// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function() {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"6JTod":[function(require,module,exports) {
var HMR_HOST = null;var HMR_PORT = 1234;var HMR_SECURE = false;var HMR_ENV_HASH = "d751713988987e9331980363e24189ce";module.bundle.HMR_BUNDLE_ID = "a811a865499216ada83b415c9c215ba3";/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */

var OVERLAY_ID = '__parcel__error__overlay__';

var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function(fn) {
      this._acceptCallbacks.push(fn || function() {});
    },
    dispose: function(fn) {
      this._disposeCallbacks.push(fn);
    },
  };

  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept, acceptedAssets;

function getHostname() {
  return (
    HMR_HOST ||
    (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost')
  );
}

function getPort() {
  return HMR_PORT || location.port;
}

// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = getHostname();
  var port = getPort();
  var protocol =
    HMR_SECURE ||
    (location.protocol == 'https:' &&
      !/localhost|127.0.0.1|0.0.0.0/.test(hostname))
      ? 'wss'
      : 'ws';
  var ws = new WebSocket(
    protocol + '://' + hostname + (port ? ':' + port : '') + '/',
  );
  ws.onmessage = function(event) {
    checkedAssets = {};
    assetsToAccept = [];
    acceptedAssets = {};

    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      // Remove error overlay if there is one
      removeErrorOverlay();

      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH);

      // Handle HMR Update
      var handled = false;
      assets.forEach(asset => {
        var didAccept =
          asset.type === 'css' || hmrAcceptCheck(module.bundle.root, asset.id);
        if (didAccept) {
          handled = true;
        }
      });

      if (handled) {
        console.clear();

        assets.forEach(function(asset) {
          hmrApply(module.bundle.root, asset);
        });

        for (var i = 0; i < assetsToAccept.length; i++) {
          var id = assetsToAccept[i][1];
          if (!acceptedAssets[id]) {
            hmrAcceptRun(assetsToAccept[i][0], id);
          }
        }
      } else {
        window.location.reload();
      }
    }

    if (data.type === 'error') {
      // Log parcel errors to console
      for (let ansiDiagnostic of data.diagnostics.ansi) {
        let stack = ansiDiagnostic.codeframe
          ? ansiDiagnostic.codeframe
          : ansiDiagnostic.stack;

        console.error(
          '🚨 [parcel]: ' +
            ansiDiagnostic.message +
            '\n' +
            stack +
            '\n\n' +
            ansiDiagnostic.hints.join('\n'),
        );
      }

      // Render the fancy html overlay
      removeErrorOverlay();
      var overlay = createErrorOverlay(data.diagnostics.html);
      document.body.appendChild(overlay);
    }
  };
  ws.onerror = function(e) {
    console.error(e.message);
  };
  ws.onclose = function(e) {
    console.warn('[parcel] 🚨 Connection to the HMR server was lost');
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);
  if (overlay) {
    overlay.remove();
    console.log('[parcel] ✨ Error resolved');
  }
}

function createErrorOverlay(diagnostics) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID;

  let errorHTML =
    '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';

  for (let diagnostic of diagnostics) {
    let stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;

    errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>
          ${stack}
        </pre>
        <div>
          ${diagnostic.hints.map(hint => '<div>' + hint + '</div>').join('')}
        </div>
      </div>
    `;
  }

  errorHTML += '</div>';

  overlay.innerHTML = errorHTML;

  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {
        parents.push([bundle, k]);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function updateLink(link) {
  var newLink = link.cloneNode();
  newLink.onload = function() {
    if (link.parentNode !== null) {
      link.parentNode.removeChild(link);
    }
  };
  newLink.setAttribute(
    'href',
    link.getAttribute('href').split('?')[0] + '?' + Date.now(),
  );
  link.parentNode.insertBefore(newLink, link.nextSibling);
}

var cssTimeout = null;
function reloadCSS() {
  if (cssTimeout) {
    return;
  }

  cssTimeout = setTimeout(function() {
    var links = document.querySelectorAll('link[rel="stylesheet"]');
    for (var i = 0; i < links.length; i++) {
      var href = links[i].getAttribute('href');
      var hostname = getHostname();
      var servedFromHMRServer =
        hostname === 'localhost'
          ? new RegExp(
              '^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort(),
            ).test(href)
          : href.indexOf(hostname + ':' + getPort());
      var absolute =
        /^https?:\/\//i.test(href) &&
        href.indexOf(window.location.origin) !== 0 &&
        !servedFromHMRServer;
      if (!absolute) {
        updateLink(links[i]);
      }
    }

    cssTimeout = null;
  }, 50);
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    if (asset.type === 'css') {
      reloadCSS();
    } else {
      var fn = new Function('require', 'module', 'exports', asset.output);
      modules[asset.id] = [fn, asset.depsByBundle[bundle.HMR_BUNDLE_ID]];
    }
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;

  var cached = bundle.cache[id];

  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(module.bundle.root, id).some(function(v) {
    return hmrAcceptCheck(v[0], v[1]);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};
  if (cached && cached.hot) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function(cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);

  cached = bundle.cache[id];
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function(cb) {
      var assetsToAlsoAccept = cb(function() {
        return getParents(module.bundle.root, id);
      });
      if (assetsToAlsoAccept && assetsToAccept.length) {
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
      }
    });
  }
  acceptedAssets[id] = true;
}

},{}],"Xnpma":[function(require,module,exports) {
var _typescriptLiascriptIndex = require('../../typescript/liascript/index');
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
var _typescriptLiascriptIndexDefault = _parcelHelpers.interopDefault(_typescriptLiascriptIndex);
var _typescriptConnectorsBrowserIndex = require('../../typescript/connectors/Browser/index');
const ua = window.navigator.userAgent;
if (ua.indexOf('Trident/') > 0 || ua.indexOf('MSIE ') > 0) {
  console.warn('unsupported browser');
  const elem = document.getElementById('IE-message');
  if (elem) elem.hidden = false;
} else {
  let debug = false;
  if ("development" === 'development') {
    debug = true;
  }
  const app = new _typescriptLiascriptIndexDefault.default(document.body, new _typescriptConnectorsBrowserIndex.Connector(), debug);
}

},{"../../typescript/liascript/index":"4q6nz","../../typescript/connectors/Browser/index":"2WpIg","@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"4q6nz":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _elmMainElm = require('../../elm/Main.elm');
var _events = require('./events');
var _log = require('./log');
var _logDefault = _parcelHelpers.interopDefault(_log);
var _swipe = require('./swipe');
require('./types/globals');
var _typesPorts = require('./types/ports');
var _typesPortsDefault = _parcelHelpers.interopDefault(_typesPorts);
var _tts = require('./tts');
var _ttsDefault = _parcelHelpers.interopDefault(_tts);
function isInViewport(elem) {
  const bounding = elem.getBoundingClientRect();
  return bounding.top >= 20 && bounding.left >= 0 && bounding.bottom <= (window.innerHeight - 20 || document.documentElement.clientHeight - 20) && bounding.right <= (window.innerWidth || document.documentElement.clientWidth);
}
;
function scrollIntoView(id, delay) {
  setTimeout(function () {
    const elem = document.getElementById(id);
    if (elem) {
      elem.scrollIntoView({
        behavior: 'smooth'
      });
    }
  }, delay);
}
;
function handleEffects(event, elmSend, section = -1, self) {
  switch (event.topic) {
    case 'scrollTo':
      scrollIntoView(event.message, 350);
      break;
    case 'persistent':
      // Todo
      // setTimeout((e) => { persistent.load(event.section) }, 10)
      break;
    case 'execute':
      _events.lia_execute_event(event.message, elmSend, section);
      break;
    case 'speak':
      {
        let msg = {
          topic: _typesPortsDefault.default.SETTINGS,
          section: -1,
          message: {
            topic: 'speak',
            section: -1,
            message: 'stop'
          }
        };
        if (section >= 0) {
          msg = {
            topic: _typesPortsDefault.default.EFFECT,
            section: section,
            message: {
              topic: 'speak',
              section: event.section,
              message: 'stop'
            }
          };
        }
        try {
          if (event.message === 'cancel') {
            _ttsDefault.default.cancel();
            msg.message.message = 'stop';
            elmSend(msg);
          } else if (event.message === 'repeat') {
            event.message = [ttsBackup[0], ttsBackup[1], 'true'];
            handleEffects(event, elmSend);
          } else if (firstSpeak) {
            // this is a hack to deal with the delay in responsivevoice
            firstSpeak = false;
            setTimeout(function () {
              handleEffects(event, elmSend);
            }, 200);
          } else {
            ttsBackup = event.message;
            if (event.message[2] === 'true') {
              _ttsDefault.default.speak(event.message[1], event.message[0], function () {
                msg.message.message = 'start';
                elmSend(msg);
              }, function () {
                msg.message.message = 'stop';
                elmSend(msg);
              }, function (e) {
                msg.message.message = e.toString();
                elmSend(msg);
              });
            }
          }
        } catch (e) {
          msg.message.message = e.toString();
          elmSend(msg);
        }
        break;
      }
    case "sub":
      {
        if (self != undefined && event.message != null) {
          const newSend = function (subEvent) {
            elmSend({
              topic: _typesPortsDefault.default.EFFECT,
              section: section,
              message: {
                topic: "sub",
                section: event.section,
                message: subEvent
              }
            });
          };
          process(false, self, newSend, event.message);
        }
        break;
      }
    default:
      {
        // checking for sub-events
        _logDefault.default.warn('effect missed => ', event, section);
      }
  }
}
;
function meta(name, content) {
  if (content !== '') {
    let meta = document.createElement('meta');
    meta.name = name;
    meta.content = content;
    document.getElementsByTagName('head')[0].appendChild(meta);
  }
}
// -----------------------------------------------------------------------------
var eventHandler;
var liaStorage;
var ttsBackup;
var firstSpeak = true;
class LiaScript {
  constructor(elem, connector, debug = false, courseUrl = null, script = null) {
    if (debug) window.debug__ = true;
    eventHandler = new _events.LiaEvents();
    this.app = _elmMainElm.Elm.Main.init({
      node: elem,
      flags: {
        courseUrl: courseUrl,
        script: script,
        settings: connector.getSettings(),
        screen: {
          width: window.innerWidth,
          height: window.innerHeight
        },
        hasShareAPI: !!navigator.share,
        hasIndex: connector.hasIndex()
      }
    });
    const sendTo = this.app.ports.event2elm.send;
    const sender = function (msg) {
      _logDefault.default.info(`LIA <<< (${msg.topic}:${msg.section})`, msg.message);
      sendTo(msg);
    };
    this.connector = connector;
    this.connector.connect(sender);
    this.initEventSystem(elem, this.app.ports.event2js.subscribe, sender);
    liaStorage = this.connector.storage();
    window.playback = function (event) {
      handleEffects(event.message, sender, event.section);
    };
    let self = this;
    window.showFootnote = key => {
      self.footnote(key);
    };
    setTimeout(function () {
      firstSpeak = false;
    }, 1000);
  }
  footnote(key) {
    this.app.ports.footnote.send(key);
  }
  initNaviation(elem, elmSend) {
    _swipe.detect(elem, function (swipedir) {
      elmSend({
        topic: _typesPortsDefault.default.SWIPE,
        section: -1,
        message: swipedir
      });
    });
    elem.addEventListener('keydown', e => {
      switch (e.key) {
        case "ArrowRight":
          {
            elmSend({
              topic: _typesPortsDefault.default.SWIPE,
              section: -1,
              message: _swipe.Dir.left
            });
            break;
          }
        case "ArrowLeft":
          {
            elmSend({
              topic: _typesPortsDefault.default.SWIPE,
              section: -1,
              message: _swipe.Dir.right
            });
            break;
          }
      }
    }, false);
  }
  reset() {
    this.app.ports.event2elm.send({
      topic: _typesPortsDefault.default.RESET,
      section: -1,
      message: null
    });
  }
  initEventSystem(elem, jsSubscribe, elmSend) {
    _logDefault.default.info('initEventSystem');
    let self = this;
    this.initNaviation(elem, elmSend);
    jsSubscribe(event => {
      process(true, self, elmSend, event);
    });
  }
}
;
function process(isConnected, self, elmSend, event) {
  _logDefault.default.info(`LIA >>> (${event.topic}:${event.section})`, event.message);
  switch (event.topic) {
    case _typesPortsDefault.default.SLIDE:
      {
        self.connector.slide(event.section);
        const sec = document.getElementsByTagName('section')[0];
        if (sec) {
          sec.scrollTo(0, 0);
        }
        const elem = document.getElementById('focusedToc');
        if (elem) {
          if (!isInViewport(elem)) {
            elem.scrollIntoView({
              behavior: 'smooth'
            });
          }
        }
        break;
      }
    case _typesPortsDefault.default.LOAD:
      {
        self.connector.load({
          topic: event.message,
          section: event.section,
          message: null
        });
        break;
      }
    case _typesPortsDefault.default.CODE:
      {
        switch (event.message.topic) {
          case 'eval':
            _events.lia_eval_event(elmSend, eventHandler, event);
            break;
          case 'store':
            if (isConnected) {
              event.message = event.message.message;
              self.connector.store(event);
            }
            break;
          case 'input':
            eventHandler.dispatch_input(event);
            break;
          case 'stop':
            eventHandler.dispatch_input(event);
            break;
          default:
            {
              if (isConnected) {
                self.connector.update(event.message, event.section);
              }
            }
        }
        break;
      }
    case _typesPortsDefault.default.QUIZ:
      {
        if (isConnected && event.message.topic === 'store') {
          event.message = event.message.message;
          self.connector.store(event);
        } else if (event.message.topic === 'eval') {
          _events.lia_eval_event(elmSend, eventHandler, event);
        }
        break;
      }
    case _typesPortsDefault.default.SURVEY:
      {
        if (isConnected && event.message.topic === 'store') {
          event.message = event.message.message;
          self.connector.store(event);
        } else if (event.message.topic === 'eval') {
          _events.lia_eval_event(elmSend, eventHandler, event);
        }
        break;
      }
    case _typesPortsDefault.default.TASK:
      {
        if (isConnected && event.message.topic === 'store') {
          event.message = event.message.message;
          self.connector.store(event);
        } else if (event.message.topic === 'eval') {
          _events.lia_eval_event(elmSend, eventHandler, event);
        }
        break;
      }
    case _typesPortsDefault.default.EFFECT:
      handleEffects(event.message, elmSend, event.section, self);
      break;
    case _typesPortsDefault.default.SETTINGS:
      {
        // if (self.channel) {
        // self.channel.push('lia', {settings: event.message});
        // } else {
        try {
          const conf = self.connector.getSettings();
          if (conf?.table_of_contents !== event.message.table_of_contents) {
            setTimeout(function () {
              window.dispatchEvent(new Event('resize'));
            }, 200);
          }
        } catch (e) {}
        if (isConnected) {
          self.connector.setSettings(event.message);
        }
        break;
      }
    case _typesPortsDefault.default.RESOURCE:
      {
        let elem = event.message[0];
        let url = event.message[1];
        _logDefault.default.info('loading resource => ', elem, ':', url);
        try {
          let tag = document.createElement(elem);
          if (elem === 'link') {
            tag.href = url;
            tag.rel = 'stylesheet';
          } else {
            window.event_semaphore++;
            tag.src = url;
            tag.async = false;
            tag.defer = true;
            tag.onload = function () {
              window.event_semaphore--;
              _logDefault.default.info('successfully loaded =>', url);
            };
            tag.onerror = function (e) {
              window.event_semaphore--;
              _logDefault.default.warn('could not load =>', url, e);
            };
          }
          document.head.appendChild(tag);
        } catch (e) {
          _logDefault.default.error('loading resource => ', e);
        }
        break;
      }
    case _typesPortsDefault.default.PERSISTENT:
      {
        if (event.message === 'store') {
          // todo, needs to be moved back
          // persistent.store(event.section)
          elmSend({
            topic: _typesPortsDefault.default.LOAD,
            section: -1,
            message: null
          });
        }
        break;
      }
    case _typesPortsDefault.default.INIT:
      {
        let data = event.message;
        if (isConnected) {
          self.connector.open(data.readme, data.version, data.section_active, data);
        }
        if (data.definition.onload !== '') {
          _events.lia_execute_event({
            code: data.definition.onload,
            delay: 350
          });
        }
        meta('author', data.definition.author);
        meta('og:description', data.comment);
        meta('og:title', data.str_title);
        meta('og:type', 'website');
        meta('og:url', '');
        meta('og:image', data.definition.logo);
        // store the basic info in the offline-repositories
        if (isConnected) {
          self.connector.storeToIndex(data);
        }
        break;
      }
    case _typesPortsDefault.default.INDEX:
      {
        if (!isConnected) break;
        switch (event.message.topic) {
          case 'list':
            {
              try {
                _ttsDefault.default.cancel();
              } catch (e) {}
              self.connector.getIndex();
              break;
            }
          case 'delete':
            {
              self.connector.deleteFromIndex(event.message.message);
              break;
            }
          case 'restore':
            {
              self.connector.restoreFromIndex(event.message.message, event.message.section);
              break;
            }
          case 'reset':
            {
              self.connector.reset(event.message.message, event.message.section);
              break;
            }
          case 'get':
            {
              self.connector.getFromIndex(event.message.message);
              break;
            }
          default:
            _logDefault.default.error('Command  not found => ', event.message);
        }
        break;
      }
    case _typesPortsDefault.default.SHARE:
      {
        try {
          if (navigator.share) {
            navigator.share(event.message.message);
          }
        } catch (e) {
          _logDefault.default.error('sharing was not possible => ', event.message, e);
        }
        break;
      }
    case _typesPortsDefault.default.RESET:
      {
        self.connector.reset();
        window.location.reload();
        break;
      }
    default:
      _logDefault.default.error('Command not found => ', event);
  }
}
exports.default = LiaScript;

},{"../../elm/Main.elm":"1EOUh","./events":"3gLXs","./log":"45sqU","./swipe":"3GInx","./types/globals":"24T8l","./types/ports":"3WoDr","./tts":"2weYa","@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"1EOUh":[function(require,module,exports) {
(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

console.warn('Compiled in DEBUG mode. Follow the advice at https://elm-lang.org/0.19.1/optimize for better performance and smaller assets.');


var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log_UNUSED = F2(function(tag, value)
{
	return value;
});

var _Debug_log = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString_UNUSED(value)
{
	return '<internals>';
}

function _Debug_toString(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash_UNUSED(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.start.line === region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'on lines ' + region.start.line + ' through ' + region.end.line;
}



// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**_UNUSED/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**_UNUSED/
	if (typeof x.$ === 'undefined')
	//*/
	/**/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0_UNUSED = 0;
var _Utils_Tuple0 = { $: '#0' };

function _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr_UNUSED(c) { return c; }
function _Utils_chr(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil_UNUSED = { $: 0 };
var _List_Nil = { $: '[]' };

function _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap(value) { return { $: 0, a: value }; }
function _Json_unwrap(value) { return value.a; }

function _Json_wrap_UNUSED(value) { return value; }
function _Json_unwrap_UNUSED(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/);
	var managers = {};
	var initPair = init(result.a);
	var model = initPair.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		var pair = A2(update, msg, model);
		stepper(model = pair.a, viewMetadata);
		_Platform_enqueueEffects(managers, pair.b, subscriptions(model));
	}

	_Platform_enqueueEffects(managers, initPair.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**_UNUSED/
	var node = args['node'];
	//*/
	/**/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS


function _VirtualDom_noScript(tag)
{
	return tag == 'script' ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return /^(on|formAction$)/i.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri_UNUSED(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,'')) ? '' : value;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,''))
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri_UNUSED(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value) ? '' : value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value)
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2($elm$json$Json$Decode$map, func, handler.a)
				:
			A3($elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				$elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		message: func(record.message),
		stopPropagation: record.stopPropagation,
		preventDefault: record.preventDefault
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!$elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.message;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.stopPropagation;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.preventDefault) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}



var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});




// HELPERS


function _Debugger_unsafeCoerce(value)
{
	return value;
}



// PROGRAMS


var _Debugger_element = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		A3($elm$browser$Debugger$Main$wrapInit, _Json_wrap(debugMetadata), _Debugger_popout(), impl.init),
		$elm$browser$Debugger$Main$wrapUpdate(impl.update),
		$elm$browser$Debugger$Main$wrapSubs(impl.subscriptions),
		function(sendToApp, initialModel)
		{
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			var currNode = _VirtualDom_virtualize(domNode);
			var currBlocker = $elm$browser$Debugger$Main$toBlockerType(initialModel);
			var currPopout;

			var cornerNode = _VirtualDom_doc.createElement('div');
			domNode.parentNode.insertBefore(cornerNode, domNode.nextSibling);
			var cornerCurr = _VirtualDom_virtualize(cornerNode);

			initialModel.popout.a = sendToApp;

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = A2(_VirtualDom_map, $elm$browser$Debugger$Main$UserMsg, view($elm$browser$Debugger$Main$getUserModel(model)));
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;

				// update blocker

				var nextBlocker = $elm$browser$Debugger$Main$toBlockerType(model);
				_Debugger_updateBlocker(currBlocker, nextBlocker);
				currBlocker = nextBlocker;

				// view corner

				var cornerNext = $elm$browser$Debugger$Main$cornerView(model);
				var cornerPatches = _VirtualDom_diff(cornerCurr, cornerNext);
				cornerNode = _VirtualDom_applyPatches(cornerNode, cornerCurr, cornerPatches, sendToApp);
				cornerCurr = cornerNext;

				if (!model.popout.b)
				{
					currPopout = undefined;
					return;
				}

				// view popout

				_VirtualDom_doc = model.popout.b; // SWITCH TO POPOUT DOC
				currPopout || (currPopout = _VirtualDom_virtualize(model.popout.b));
				var nextPopout = $elm$browser$Debugger$Main$popoutView(model);
				var popoutPatches = _VirtualDom_diff(currPopout, nextPopout);
				_VirtualDom_applyPatches(model.popout.b.body, currPopout, popoutPatches, sendToApp);
				currPopout = nextPopout;
				_VirtualDom_doc = document; // SWITCH BACK TO NORMAL DOC
			});
		}
	);
});


var _Debugger_document = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		A3($elm$browser$Debugger$Main$wrapInit, _Json_wrap(debugMetadata), _Debugger_popout(), impl.init),
		$elm$browser$Debugger$Main$wrapUpdate(impl.update),
		$elm$browser$Debugger$Main$wrapSubs(impl.subscriptions),
		function(sendToApp, initialModel)
		{
			var divertHrefToApp = impl.setup && impl.setup(function(x) { return sendToApp($elm$browser$Debugger$Main$UserMsg(x)); });
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			var currBlocker = $elm$browser$Debugger$Main$toBlockerType(initialModel);
			var currPopout;

			initialModel.popout.a = sendToApp;

			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view($elm$browser$Debugger$Main$getUserModel(model));
				var nextNode = _VirtualDom_node('body')(_List_Nil)(
					_Utils_ap(
						A2($elm$core$List$map, _VirtualDom_map($elm$browser$Debugger$Main$UserMsg), doc.body),
						_List_Cons($elm$browser$Debugger$Main$cornerView(model), _List_Nil)
					)
				);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);

				// update blocker

				var nextBlocker = $elm$browser$Debugger$Main$toBlockerType(model);
				_Debugger_updateBlocker(currBlocker, nextBlocker);
				currBlocker = nextBlocker;

				// view popout

				if (!model.popout.b) { currPopout = undefined; return; }

				_VirtualDom_doc = model.popout.b; // SWITCH TO POPOUT DOC
				currPopout || (currPopout = _VirtualDom_virtualize(model.popout.b));
				var nextPopout = $elm$browser$Debugger$Main$popoutView(model);
				var popoutPatches = _VirtualDom_diff(currPopout, nextPopout);
				_VirtualDom_applyPatches(model.popout.b.body, currPopout, popoutPatches, sendToApp);
				currPopout = nextPopout;
				_VirtualDom_doc = document; // SWITCH BACK TO NORMAL DOC
			});
		}
	);
});


function _Debugger_popout()
{
	return {
		b: undefined,
		a: undefined
	};
}

function _Debugger_isOpen(popout)
{
	return !!popout.b;
}

function _Debugger_open(popout)
{
	return _Scheduler_binding(function(callback)
	{
		_Debugger_openWindow(popout);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}

function _Debugger_openWindow(popout)
{
	var w = $elm$browser$Debugger$Main$initialWindowWidth,
		h = $elm$browser$Debugger$Main$initialWindowHeight,
	 	x = screen.width - w,
		y = screen.height - h;

	var debuggerWindow = window.open('', '', 'width=' + w + ',height=' + h + ',left=' + x + ',top=' + y);
	var doc = debuggerWindow.document;
	doc.title = 'Elm Debugger';

	// handle arrow keys
	doc.addEventListener('keydown', function(event) {
		event.metaKey && event.which === 82 && window.location.reload();
		event.key === 'ArrowUp'   && (popout.a($elm$browser$Debugger$Main$Up  ), event.preventDefault());
		event.key === 'ArrowDown' && (popout.a($elm$browser$Debugger$Main$Down), event.preventDefault());
	});

	// handle window close
	window.addEventListener('unload', close);
	debuggerWindow.addEventListener('unload', function() {
		popout.b = undefined;
		popout.a($elm$browser$Debugger$Main$NoOp);
		window.removeEventListener('unload', close);
	});

	function close() {
		popout.b = undefined;
		popout.a($elm$browser$Debugger$Main$NoOp);
		debuggerWindow.close();
	}

	// register new window
	popout.b = doc;
}



// SCROLL


function _Debugger_scroll(popout)
{
	return _Scheduler_binding(function(callback)
	{
		if (popout.b)
		{
			var msgs = popout.b.getElementById('elm-debugger-sidebar');
			if (msgs && msgs.scrollTop !== 0)
			{
				msgs.scrollTop = 0;
			}
		}
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


var _Debugger_scrollTo = F2(function(id, popout)
{
	return _Scheduler_binding(function(callback)
	{
		if (popout.b)
		{
			var msg = popout.b.getElementById(id);
			if (msg)
			{
				msg.scrollIntoView(false);
			}
		}
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});



// UPLOAD


function _Debugger_upload(popout)
{
	return _Scheduler_binding(function(callback)
	{
		var doc = popout.b || document;
		var element = doc.createElement('input');
		element.setAttribute('type', 'file');
		element.setAttribute('accept', 'text/json');
		element.style.display = 'none';
		element.addEventListener('change', function(event)
		{
			var fileReader = new FileReader();
			fileReader.onload = function(e)
			{
				callback(_Scheduler_succeed(e.target.result));
			};
			fileReader.readAsText(event.target.files[0]);
			doc.body.removeChild(element);
		});
		doc.body.appendChild(element);
		element.click();
	});
}



// DOWNLOAD


var _Debugger_download = F2(function(historyLength, json)
{
	return _Scheduler_binding(function(callback)
	{
		var fileName = 'history-' + historyLength + '.txt';
		var jsonString = JSON.stringify(json);
		var mime = 'text/plain;charset=utf-8';
		var done = _Scheduler_succeed(_Utils_Tuple0);

		// for IE10+
		if (navigator.msSaveBlob)
		{
			navigator.msSaveBlob(new Blob([jsonString], {type: mime}), fileName);
			return callback(done);
		}

		// for HTML5
		var element = document.createElement('a');
		element.setAttribute('href', 'data:' + mime + ',' + encodeURIComponent(jsonString));
		element.setAttribute('download', fileName);
		element.style.display = 'none';
		document.body.appendChild(element);
		element.click();
		document.body.removeChild(element);
		callback(done);
	});
});



// POPOUT CONTENT


function _Debugger_messageToString(value)
{
	if (typeof value === 'boolean')
	{
		return value ? 'True' : 'False';
	}

	if (typeof value === 'number')
	{
		return value + '';
	}

	if (typeof value === 'string')
	{
		return '"' + _Debugger_addSlashes(value, false) + '"';
	}

	if (value instanceof String)
	{
		return "'" + _Debugger_addSlashes(value, true) + "'";
	}

	if (typeof value !== 'object' || value === null || !('$' in value))
	{
		return '…';
	}

	if (typeof value.$ === 'number')
	{
		return '…';
	}

	var code = value.$.charCodeAt(0);
	if (code === 0x23 /* # */ || /* a */ 0x61 <= code && code <= 0x7A /* z */)
	{
		return '…';
	}

	if (['Array_elm_builtin', 'Set_elm_builtin', 'RBNode_elm_builtin', 'RBEmpty_elm_builtin'].indexOf(value.$) >= 0)
	{
		return '…';
	}

	var keys = Object.keys(value);
	switch (keys.length)
	{
		case 1:
			return value.$;
		case 2:
			return value.$ + ' ' + _Debugger_messageToString(value.a);
		default:
			return value.$ + ' … ' + _Debugger_messageToString(value[keys[keys.length - 1]]);
	}
}


function _Debugger_init(value)
{
	if (typeof value === 'boolean')
	{
		return A3($elm$browser$Debugger$Expando$Constructor, $elm$core$Maybe$Just(value ? 'True' : 'False'), true, _List_Nil);
	}

	if (typeof value === 'number')
	{
		return $elm$browser$Debugger$Expando$Primitive(value + '');
	}

	if (typeof value === 'string')
	{
		return $elm$browser$Debugger$Expando$S('"' + _Debugger_addSlashes(value, false) + '"');
	}

	if (value instanceof String)
	{
		return $elm$browser$Debugger$Expando$S("'" + _Debugger_addSlashes(value, true) + "'");
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (tag === '::' || tag === '[]')
		{
			return A3($elm$browser$Debugger$Expando$Sequence, $elm$browser$Debugger$Expando$ListSeq, true,
				A2($elm$core$List$map, _Debugger_init, value)
			);
		}

		if (tag === 'Set_elm_builtin')
		{
			return A3($elm$browser$Debugger$Expando$Sequence, $elm$browser$Debugger$Expando$SetSeq, true,
				A3($elm$core$Set$foldr, _Debugger_initCons, _List_Nil, value)
			);
		}

		if (tag === 'RBNode_elm_builtin' || tag == 'RBEmpty_elm_builtin')
		{
			return A2($elm$browser$Debugger$Expando$Dictionary, true,
				A3($elm$core$Dict$foldr, _Debugger_initKeyValueCons, _List_Nil, value)
			);
		}

		if (tag === 'Array_elm_builtin')
		{
			return A3($elm$browser$Debugger$Expando$Sequence, $elm$browser$Debugger$Expando$ArraySeq, true,
				A3($elm$core$Array$foldr, _Debugger_initCons, _List_Nil, value)
			);
		}

		if (typeof tag === 'number')
		{
			return $elm$browser$Debugger$Expando$Primitive('<internals>');
		}

		var char = tag.charCodeAt(0);
		if (char === 35 || 65 <= char && char <= 90)
		{
			var list = _List_Nil;
			for (var i in value)
			{
				if (i === '$') continue;
				list = _List_Cons(_Debugger_init(value[i]), list);
			}
			return A3($elm$browser$Debugger$Expando$Constructor, char === 35 ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(tag), true, $elm$core$List$reverse(list));
		}

		return $elm$browser$Debugger$Expando$Primitive('<internals>');
	}

	if (typeof value === 'object')
	{
		var dict = $elm$core$Dict$empty;
		for (var i in value)
		{
			dict = A3($elm$core$Dict$insert, i, _Debugger_init(value[i]), dict);
		}
		return A2($elm$browser$Debugger$Expando$Record, true, dict);
	}

	return $elm$browser$Debugger$Expando$Primitive('<internals>');
}

var _Debugger_initCons = F2(function initConsHelp(value, list)
{
	return _List_Cons(_Debugger_init(value), list);
});

var _Debugger_initKeyValueCons = F3(function(key, value, list)
{
	return _List_Cons(
		_Utils_Tuple2(_Debugger_init(key), _Debugger_init(value)),
		list
	);
});

function _Debugger_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');
	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}



// BLOCK EVENTS


function _Debugger_updateBlocker(oldBlocker, newBlocker)
{
	if (oldBlocker === newBlocker) return;

	var oldEvents = _Debugger_blockerToEvents(oldBlocker);
	var newEvents = _Debugger_blockerToEvents(newBlocker);

	// remove old blockers
	for (var i = 0; i < oldEvents.length; i++)
	{
		document.removeEventListener(oldEvents[i], _Debugger_blocker, true);
	}

	// add new blockers
	for (var i = 0; i < newEvents.length; i++)
	{
		document.addEventListener(newEvents[i], _Debugger_blocker, true);
	}
}


function _Debugger_blocker(event)
{
	if (event.type === 'keydown' && event.metaKey && event.which === 82)
	{
		return;
	}

	var isScroll = event.type === 'scroll' || event.type === 'wheel';
	for (var node = event.target; node; node = node.parentNode)
	{
		if (isScroll ? node.id === 'elm-debugger-details' : node.id === 'elm-debugger-overlay')
		{
			return;
		}
	}

	event.stopPropagation();
	event.preventDefault();
}

function _Debugger_blockerToEvents(blocker)
{
	return blocker === $elm$browser$Debugger$Overlay$BlockNone
		? []
		: blocker === $elm$browser$Debugger$Overlay$BlockMost
			? _Debugger_mostEvents
			: _Debugger_allEvents;
}

var _Debugger_mostEvents = [
	'click', 'dblclick', 'mousemove',
	'mouseup', 'mousedown', 'mouseenter', 'mouseleave',
	'touchstart', 'touchend', 'touchcancel', 'touchmove',
	'pointerdown', 'pointerup', 'pointerover', 'pointerout',
	'pointerenter', 'pointerleave', 'pointermove', 'pointercancel',
	'dragstart', 'drag', 'dragend', 'dragenter', 'dragover', 'dragleave', 'drop',
	'keyup', 'keydown', 'keypress',
	'input', 'change',
	'focus', 'blur'
];

var _Debugger_allEvents = _Debugger_mostEvents.concat('wheel', 'scroll');




// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var view = impl.view;
			/**_UNUSED/
			var domNode = args['node'];
			//*/
			/**/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.setup && impl.setup(sendToApp)
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.body);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.onUrlChange;
	var onUrlRequest = impl.onUrlRequest;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };
key['elm-hot-nav-key'] = true;

	return _Browser_document({
		setup: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = $elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.protocol === next.protocol
							&& curr.host === next.host
							&& curr.port_.a === next.port_.a
						)
							? $elm$browser$Browser$Internal(next)
							: $elm$browser$Browser$External(href)
					));
				}
			});
		},
		init: function(flags)
		{
			return A3(impl.init, flags, _Browser_getUrl(), key);
		},
		view: impl.view,
		update: impl.update,
		subscriptions: impl.subscriptions
	});
}

function _Browser_getUrl()
{
	return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { hidden: 'hidden', change: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { hidden: 'mozHidden', change: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { hidden: 'msHidden', change: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { hidden: 'webkitHidden', change: 'webkitvisibilitychange' }
		: { hidden: 'hidden', change: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		scene: _Browser_getScene(),
		viewport: {
			x: _Browser_window.pageXOffset,
			y: _Browser_window.pageYOffset,
			width: _Browser_doc.documentElement.clientWidth,
			height: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		width: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		height: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			scene: {
				width: node.scrollWidth,
				height: node.scrollHeight
			},
			viewport: {
				x: node.scrollLeft,
				y: node.scrollTop,
				width: node.clientWidth,
				height: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			scene: _Browser_getScene(),
			viewport: {
				x: x,
				y: y,
				width: _Browser_doc.documentElement.clientWidth,
				height: _Browser_doc.documentElement.clientHeight
			},
			element: {
				x: x + rect.left,
				y: y + rect.top,
				width: rect.width,
				height: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}


// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function(options, string)
{
	var flags = 'g';
	if (options.multiline) { flags += 'm'; }
	if (options.caseInsensitive) { flags += 'i'; }

	try
	{
		return $elm$core$Maybe$Just(new RegExp(string, flags));
	}
	catch(error)
	{
		return $elm$core$Maybe$Nothing;
	}
});


// USE

var _Regex_contains = F2(function(re, string)
{
	return string.match(re) !== null;
});


var _Regex_findAtMost = F3(function(n, re, str)
{
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex == re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _List_fromArray(out);
});


var _Regex_replaceAtMost = F4(function(n, re, replacer, string)
{
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
	}
	return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function(n, re, str)
{
	var string = str;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		var result = re.exec(string);
		if (!result) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _List_fromArray(out);
});

var _Regex_infinity = Infinity;



// SEND REQUEST

var _Http_toTask = F3(function(router, toTask, request)
{
	return _Scheduler_binding(function(callback)
	{
		function done(response) {
			callback(toTask(request.expect.a(response)));
		}

		var xhr = new XMLHttpRequest();
		xhr.addEventListener('error', function() { done($elm$http$Http$NetworkError_); });
		xhr.addEventListener('timeout', function() { done($elm$http$Http$Timeout_); });
		xhr.addEventListener('load', function() { done(_Http_toResponse(request.expect.b, xhr)); });
		$elm$core$Maybe$isJust(request.tracker) && _Http_track(router, xhr, request.tracker.a);

		try {
			xhr.open(request.method, request.url, true);
		} catch (e) {
			return done($elm$http$Http$BadUrl_(request.url));
		}

		_Http_configureRequest(xhr, request);

		request.body.a && xhr.setRequestHeader('Content-Type', request.body.a);
		xhr.send(request.body.b);

		return function() { xhr.c = true; xhr.abort(); };
	});
});


// CONFIGURE

function _Http_configureRequest(xhr, request)
{
	for (var headers = request.headers; headers.b; headers = headers.b) // WHILE_CONS
	{
		xhr.setRequestHeader(headers.a.a, headers.a.b);
	}
	xhr.timeout = request.timeout.a || 0;
	xhr.responseType = request.expect.d;
	xhr.withCredentials = request.allowCookiesFromOtherDomains;
}


// RESPONSES

function _Http_toResponse(toBody, xhr)
{
	return A2(
		200 <= xhr.status && xhr.status < 300 ? $elm$http$Http$GoodStatus_ : $elm$http$Http$BadStatus_,
		_Http_toMetadata(xhr),
		toBody(xhr.response)
	);
}


// METADATA

function _Http_toMetadata(xhr)
{
	return {
		url: xhr.responseURL,
		statusCode: xhr.status,
		statusText: xhr.statusText,
		headers: _Http_parseHeaders(xhr.getAllResponseHeaders())
	};
}


// HEADERS

function _Http_parseHeaders(rawHeaders)
{
	if (!rawHeaders)
	{
		return $elm$core$Dict$empty;
	}

	var headers = $elm$core$Dict$empty;
	var headerPairs = rawHeaders.split('\r\n');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf(': ');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3($elm$core$Dict$update, key, function(oldValue) {
				return $elm$core$Maybe$Just($elm$core$Maybe$isJust(oldValue)
					? value + ', ' + oldValue.a
					: value
				);
			}, headers);
		}
	}
	return headers;
}


// EXPECT

var _Http_expect = F3(function(type, toBody, toValue)
{
	return {
		$: 0,
		d: type,
		b: toBody,
		a: toValue
	};
});

var _Http_mapExpect = F2(function(func, expect)
{
	return {
		$: 0,
		d: expect.d,
		b: expect.b,
		a: function(x) { return func(expect.a(x)); }
	};
});

function _Http_toDataView(arrayBuffer)
{
	return new DataView(arrayBuffer);
}


// BODY and PARTS

var _Http_emptyBody = { $: 0 };
var _Http_pair = F2(function(a, b) { return { $: 0, a: a, b: b }; });

function _Http_toFormData(parts)
{
	for (var formData = new FormData(); parts.b; parts = parts.b) // WHILE_CONS
	{
		var part = parts.a;
		formData.append(part.a, part.b);
	}
	return formData;
}

var _Http_bytesToBlob = F2(function(mime, bytes)
{
	return new Blob([bytes], { type: mime });
});


// PROGRESS

function _Http_track(router, xhr, tracker)
{
	// TODO check out lengthComputable on loadstart event

	xhr.upload.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Sending({
			sent: event.loaded,
			size: event.total
		}))));
	});
	xhr.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Receiving({
			received: event.loaded,
			size: event.lengthComputable ? $elm$core$Maybe$Just(event.total) : $elm$core$Maybe$Nothing
		}))));
	});
}

// BYTES

function _Bytes_width(bytes)
{
	return bytes.byteLength;
}

var _Bytes_getHostEndianness = F2(function(le, be)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(new Uint8Array(new Uint32Array([1]))[0] === 1 ? le : be));
	});
});


// ENCODERS

function _Bytes_encode(encoder)
{
	var mutableBytes = new DataView(new ArrayBuffer($elm$bytes$Bytes$Encode$getWidth(encoder)));
	$elm$bytes$Bytes$Encode$write(encoder)(mutableBytes)(0);
	return mutableBytes;
}


// SIGNED INTEGERS

var _Bytes_write_i8  = F3(function(mb, i, n) { mb.setInt8(i, n); return i + 1; });
var _Bytes_write_i16 = F4(function(mb, i, n, isLE) { mb.setInt16(i, n, isLE); return i + 2; });
var _Bytes_write_i32 = F4(function(mb, i, n, isLE) { mb.setInt32(i, n, isLE); return i + 4; });


// UNSIGNED INTEGERS

var _Bytes_write_u8  = F3(function(mb, i, n) { mb.setUint8(i, n); return i + 1 ;});
var _Bytes_write_u16 = F4(function(mb, i, n, isLE) { mb.setUint16(i, n, isLE); return i + 2; });
var _Bytes_write_u32 = F4(function(mb, i, n, isLE) { mb.setUint32(i, n, isLE); return i + 4; });


// FLOATS

var _Bytes_write_f32 = F4(function(mb, i, n, isLE) { mb.setFloat32(i, n, isLE); return i + 4; });
var _Bytes_write_f64 = F4(function(mb, i, n, isLE) { mb.setFloat64(i, n, isLE); return i + 8; });


// BYTES

var _Bytes_write_bytes = F3(function(mb, offset, bytes)
{
	for (var i = 0, len = bytes.byteLength, limit = len - 4; i <= limit; i += 4)
	{
		mb.setUint32(offset + i, bytes.getUint32(i));
	}
	for (; i < len; i++)
	{
		mb.setUint8(offset + i, bytes.getUint8(i));
	}
	return offset + len;
});


// STRINGS

function _Bytes_getStringWidth(string)
{
	for (var width = 0, i = 0; i < string.length; i++)
	{
		var code = string.charCodeAt(i);
		width +=
			(code < 0x80) ? 1 :
			(code < 0x800) ? 2 :
			(code < 0xD800 || 0xDBFF < code) ? 3 : (i++, 4);
	}
	return width;
}

var _Bytes_write_string = F3(function(mb, offset, string)
{
	for (var i = 0; i < string.length; i++)
	{
		var code = string.charCodeAt(i);
		offset +=
			(code < 0x80)
				? (mb.setUint8(offset, code)
				, 1
				)
				:
			(code < 0x800)
				? (mb.setUint16(offset, 0xC080 /* 0b1100000010000000 */
					| (code >>> 6 & 0x1F /* 0b00011111 */) << 8
					| code & 0x3F /* 0b00111111 */)
				, 2
				)
				:
			(code < 0xD800 || 0xDBFF < code)
				? (mb.setUint16(offset, 0xE080 /* 0b1110000010000000 */
					| (code >>> 12 & 0xF /* 0b00001111 */) << 8
					| code >>> 6 & 0x3F /* 0b00111111 */)
				, mb.setUint8(offset + 2, 0x80 /* 0b10000000 */
					| code & 0x3F /* 0b00111111 */)
				, 3
				)
				:
			(code = (code - 0xD800) * 0x400 + string.charCodeAt(++i) - 0xDC00 + 0x10000
			, mb.setUint32(offset, 0xF0808080 /* 0b11110000100000001000000010000000 */
				| (code >>> 18 & 0x7 /* 0b00000111 */) << 24
				| (code >>> 12 & 0x3F /* 0b00111111 */) << 16
				| (code >>> 6 & 0x3F /* 0b00111111 */) << 8
				| code & 0x3F /* 0b00111111 */)
			, 4
			);
	}
	return offset;
});


// DECODER

var _Bytes_decode = F2(function(decoder, bytes)
{
	try {
		return $elm$core$Maybe$Just(A2(decoder, bytes, 0).b);
	} catch(e) {
		return $elm$core$Maybe$Nothing;
	}
});

var _Bytes_read_i8  = F2(function(      bytes, offset) { return _Utils_Tuple2(offset + 1, bytes.getInt8(offset)); });
var _Bytes_read_i16 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 2, bytes.getInt16(offset, isLE)); });
var _Bytes_read_i32 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getInt32(offset, isLE)); });
var _Bytes_read_u8  = F2(function(      bytes, offset) { return _Utils_Tuple2(offset + 1, bytes.getUint8(offset)); });
var _Bytes_read_u16 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 2, bytes.getUint16(offset, isLE)); });
var _Bytes_read_u32 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getUint32(offset, isLE)); });
var _Bytes_read_f32 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getFloat32(offset, isLE)); });
var _Bytes_read_f64 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 8, bytes.getFloat64(offset, isLE)); });

var _Bytes_read_bytes = F3(function(len, bytes, offset)
{
	return _Utils_Tuple2(offset + len, new DataView(bytes.buffer, bytes.byteOffset + offset, len));
});

var _Bytes_read_string = F3(function(len, bytes, offset)
{
	var string = '';
	var end = offset + len;
	for (; offset < end;)
	{
		var byte = bytes.getUint8(offset++);
		string +=
			(byte < 128)
				? String.fromCharCode(byte)
				:
			((byte & 0xE0 /* 0b11100000 */) === 0xC0 /* 0b11000000 */)
				? String.fromCharCode((byte & 0x1F /* 0b00011111 */) << 6 | bytes.getUint8(offset++) & 0x3F /* 0b00111111 */)
				:
			((byte & 0xF0 /* 0b11110000 */) === 0xE0 /* 0b11100000 */)
				? String.fromCharCode(
					(byte & 0xF /* 0b00001111 */) << 12
					| (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */) << 6
					| bytes.getUint8(offset++) & 0x3F /* 0b00111111 */
				)
				:
				(byte =
					((byte & 0x7 /* 0b00000111 */) << 18
						| (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */) << 12
						| (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */) << 6
						| bytes.getUint8(offset++) & 0x3F /* 0b00111111 */
					) - 0x10000
				, String.fromCharCode(Math.floor(byte / 0x400) + 0xD800, byte % 0x400 + 0xDC00)
				);
	}
	return _Utils_Tuple2(offset, string);
});

var _Bytes_decodeFailure = F2(function() { throw 0; });
var $elm$core$Maybe$Just = function (a) {
	return {$: 'Just', a: a};
};
var $author$project$Update$LinkClicked = function (a) {
	return {$: 'LinkClicked', a: a};
};
var $elm$core$Maybe$Nothing = {$: 'Nothing'};
var $author$project$Update$UrlChanged = function (a) {
	return {$: 'UrlChanged', a: a};
};
var $elm$core$List$cons = _List_cons;
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Basics$EQ = {$: 'EQ'};
var $elm$core$Basics$GT = {$: 'GT'};
var $elm$core$Basics$LT = {$: 'LT'};
var $elm$core$Result$Err = function (a) {
	return {$: 'Err', a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 'Failure', a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 'Index', a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 'Ok', a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var $elm$core$Basics$False = {$: 'False'};
var $elm$core$Basics$add = _Basics_add;
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 'Field':
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 'Nothing') {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'Index':
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'OneOf':
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 'SubTree', a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.nodeListSize) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.tail);
		} else {
			var treeLen = builder.nodeListSize * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.nodeList) : builder.nodeList;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.tail);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{nodeList: nodeList, nodeListSize: (len / $elm$core$Array$branchFactor) | 0, tail: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = {$: 'True'};
var $elm$core$Result$isOk = function (result) {
	if (result.$ === 'Ok') {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 'Normal':
			return 0;
		case 'MayStopPropagation':
			return 1;
		case 'MayPreventDefault':
			return 2;
		default:
			return 3;
	}
};
var $elm$browser$Debugger$Expando$ArraySeq = {$: 'ArraySeq'};
var $elm$browser$Debugger$Overlay$BlockMost = {$: 'BlockMost'};
var $elm$browser$Debugger$Overlay$BlockNone = {$: 'BlockNone'};
var $elm$browser$Debugger$Expando$Constructor = F3(
	function (a, b, c) {
		return {$: 'Constructor', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Expando$Dictionary = F2(
	function (a, b) {
		return {$: 'Dictionary', a: a, b: b};
	});
var $elm$browser$Debugger$Main$Down = {$: 'Down'};
var $elm$browser$Debugger$Expando$ListSeq = {$: 'ListSeq'};
var $elm$browser$Debugger$Main$NoOp = {$: 'NoOp'};
var $elm$browser$Debugger$Expando$Primitive = function (a) {
	return {$: 'Primitive', a: a};
};
var $elm$browser$Debugger$Expando$Record = F2(
	function (a, b) {
		return {$: 'Record', a: a, b: b};
	});
var $elm$browser$Debugger$Expando$S = function (a) {
	return {$: 'S', a: a};
};
var $elm$browser$Debugger$Expando$Sequence = F3(
	function (a, b, c) {
		return {$: 'Sequence', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Expando$SetSeq = {$: 'SetSeq'};
var $elm$browser$Debugger$Main$Up = {$: 'Up'};
var $elm$browser$Debugger$Main$UserMsg = function (a) {
	return {$: 'UserMsg', a: a};
};
var $elm$browser$Debugger$Main$Export = {$: 'Export'};
var $elm$browser$Debugger$Main$Import = {$: 'Import'};
var $elm$browser$Debugger$Main$Open = {$: 'Open'};
var $elm$browser$Debugger$Main$OverlayMsg = function (a) {
	return {$: 'OverlayMsg', a: a};
};
var $elm$browser$Debugger$Main$Resume = {$: 'Resume'};
var $elm$browser$Debugger$Main$isPaused = function (state) {
	if (state.$ === 'Running') {
		return false;
	} else {
		return true;
	}
};
var $elm$browser$Debugger$History$size = function (history) {
	return history.numMessages;
};
var $elm$browser$Debugger$Overlay$Accept = function (a) {
	return {$: 'Accept', a: a};
};
var $elm$browser$Debugger$Overlay$Choose = F2(
	function (a, b) {
		return {$: 'Choose', a: a, b: b};
	});
var $elm$html$Html$div = _VirtualDom_node('div');
var $elm$json$Json$Encode$string = _Json_wrap;
var $elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty('id');
var $elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 'Normal', a: a};
};
var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var $elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $elm$html$Html$Events$onClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$html$Html$span = _VirtualDom_node('span');
var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
var $elm$html$Html$a = _VirtualDom_node('a');
var $elm$browser$Debugger$Overlay$goodNews1 = '\nThe good news is that having values like this in your message type is not\nso great in the long run. You are better off using simpler data, like\n';
var $elm$browser$Debugger$Overlay$goodNews2 = '\nfunction can pattern match on that data and call whatever functions, JSON\ndecoders, etc. you need. This makes the code much more explicit and easy to\nfollow for other readers (or you in a few months!)\n';
var $elm$html$Html$Attributes$href = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$html$Html$p = _VirtualDom_node('p');
var $elm$html$Html$ul = _VirtualDom_node('ul');
var $elm$html$Html$code = _VirtualDom_node('code');
var $elm$browser$Debugger$Overlay$viewCode = function (name) {
	return A2(
		$elm$html$Html$code,
		_List_Nil,
		_List_fromArray(
			[
				$elm$html$Html$text(name)
			]));
};
var $elm$browser$Debugger$Overlay$addCommas = function (items) {
	if (!items.b) {
		return '';
	} else {
		if (!items.b.b) {
			var item = items.a;
			return item;
		} else {
			if (!items.b.b.b) {
				var item1 = items.a;
				var _v1 = items.b;
				var item2 = _v1.a;
				return item1 + (' and ' + item2);
			} else {
				var lastItem = items.a;
				var otherItems = items.b;
				return A2(
					$elm$core$String$join,
					', ',
					_Utils_ap(
						otherItems,
						_List_fromArray(
							[' and ' + lastItem])));
			}
		}
	}
};
var $elm$html$Html$li = _VirtualDom_node('li');
var $elm$browser$Debugger$Overlay$problemToString = function (problem) {
	switch (problem.$) {
		case 'Function':
			return 'functions';
		case 'Decoder':
			return 'JSON decoders';
		case 'Task':
			return 'tasks';
		case 'Process':
			return 'processes';
		case 'Socket':
			return 'web sockets';
		case 'Request':
			return 'HTTP requests';
		case 'Program':
			return 'programs';
		default:
			return 'virtual DOM values';
	}
};
var $elm$browser$Debugger$Overlay$viewProblemType = function (_v0) {
	var name = _v0.name;
	var problems = _v0.problems;
	return A2(
		$elm$html$Html$li,
		_List_Nil,
		_List_fromArray(
			[
				$elm$browser$Debugger$Overlay$viewCode(name),
				$elm$html$Html$text(
				' can contain ' + ($elm$browser$Debugger$Overlay$addCommas(
					A2($elm$core$List$map, $elm$browser$Debugger$Overlay$problemToString, problems)) + '.'))
			]));
};
var $elm$browser$Debugger$Overlay$viewBadMetadata = function (_v0) {
	var message = _v0.message;
	var problems = _v0.problems;
	return _List_fromArray(
		[
			A2(
			$elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('The '),
					$elm$browser$Debugger$Overlay$viewCode(message),
					$elm$html$Html$text(' type of your program cannot be reliably serialized for history files.')
				])),
			A2(
			$elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('Functions cannot be serialized, nor can values that contain functions. This is a problem in these places:')
				])),
			A2(
			$elm$html$Html$ul,
			_List_Nil,
			A2($elm$core$List$map, $elm$browser$Debugger$Overlay$viewProblemType, problems)),
			A2(
			$elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text($elm$browser$Debugger$Overlay$goodNews1),
					A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href('https://guide.elm-lang.org/types/custom_types.html')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('custom types')
						])),
					$elm$html$Html$text(', in your messages. From there, your '),
					$elm$browser$Debugger$Overlay$viewCode('update'),
					$elm$html$Html$text($elm$browser$Debugger$Overlay$goodNews2)
				]))
		]);
};
var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var $elm$html$Html$map = $elm$virtual_dom$VirtualDom$map;
var $elm$browser$Debugger$Overlay$Cancel = {$: 'Cancel'};
var $elm$browser$Debugger$Overlay$Proceed = {$: 'Proceed'};
var $elm$html$Html$button = _VirtualDom_node('button');
var $elm$browser$Debugger$Overlay$viewButtons = function (buttons) {
	var btn = F2(
		function (msg, string) {
			return A2(
				$elm$html$Html$button,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'margin-right', '20px'),
						$elm$html$Html$Events$onClick(msg)
					]),
				_List_fromArray(
					[
						$elm$html$Html$text(string)
					]));
		});
	var buttonNodes = function () {
		if (buttons.$ === 'Accept') {
			var proceed = buttons.a;
			return _List_fromArray(
				[
					A2(btn, $elm$browser$Debugger$Overlay$Proceed, proceed)
				]);
		} else {
			var cancel = buttons.a;
			var proceed = buttons.b;
			return _List_fromArray(
				[
					A2(btn, $elm$browser$Debugger$Overlay$Cancel, cancel),
					A2(btn, $elm$browser$Debugger$Overlay$Proceed, proceed)
				]);
		}
	}();
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'height', '60px'),
				A2($elm$html$Html$Attributes$style, 'line-height', '60px'),
				A2($elm$html$Html$Attributes$style, 'text-align', 'right'),
				A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)')
			]),
		buttonNodes);
};
var $elm$browser$Debugger$Overlay$viewMessage = F4(
	function (config, title, details, buttons) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$id('elm-debugger-overlay'),
					A2($elm$html$Html$Attributes$style, 'position', 'fixed'),
					A2($elm$html$Html$Attributes$style, 'top', '0'),
					A2($elm$html$Html$Attributes$style, 'left', '0'),
					A2($elm$html$Html$Attributes$style, 'width', '100vw'),
					A2($elm$html$Html$Attributes$style, 'height', '100vh'),
					A2($elm$html$Html$Attributes$style, 'color', 'white'),
					A2($elm$html$Html$Attributes$style, 'pointer-events', 'none'),
					A2($elm$html$Html$Attributes$style, 'font-family', '\'Trebuchet MS\', \'Lucida Grande\', \'Bitstream Vera Sans\', \'Helvetica Neue\', sans-serif'),
					A2($elm$html$Html$Attributes$style, 'z-index', '2147483647')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
							A2($elm$html$Html$Attributes$style, 'width', '600px'),
							A2($elm$html$Html$Attributes$style, 'height', '100vh'),
							A2($elm$html$Html$Attributes$style, 'padding-left', 'calc(50% - 300px)'),
							A2($elm$html$Html$Attributes$style, 'padding-right', 'calc(50% - 300px)'),
							A2($elm$html$Html$Attributes$style, 'background-color', 'rgba(200, 200, 200, 0.7)'),
							A2($elm$html$Html$Attributes$style, 'pointer-events', 'auto')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$style, 'font-size', '36px'),
									A2($elm$html$Html$Attributes$style, 'height', '80px'),
									A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)'),
									A2($elm$html$Html$Attributes$style, 'padding-left', '22px'),
									A2($elm$html$Html$Attributes$style, 'vertical-align', 'middle'),
									A2($elm$html$Html$Attributes$style, 'line-height', '80px')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(title)
								])),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$id('elm-debugger-details'),
									A2($elm$html$Html$Attributes$style, 'padding', ' 8px 20px'),
									A2($elm$html$Html$Attributes$style, 'overflow-y', 'auto'),
									A2($elm$html$Html$Attributes$style, 'max-height', 'calc(100vh - 156px)'),
									A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(61, 61, 61)')
								]),
							details),
							A2(
							$elm$html$Html$map,
							config.wrap,
							$elm$browser$Debugger$Overlay$viewButtons(buttons))
						]))
				]));
	});
var $elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $elm$virtual_dom$VirtualDom$nodeNS = function (tag) {
	return _VirtualDom_nodeNS(
		_VirtualDom_noScript(tag));
};
var $elm$core$String$fromFloat = _String_fromNumber;
var $elm$browser$Debugger$Overlay$viewShape = F4(
	function (x, y, angle, coordinates) {
		return A4(
			$elm$virtual_dom$VirtualDom$nodeNS,
			'http://www.w3.org/2000/svg',
			'polygon',
			_List_fromArray(
				[
					A2($elm$virtual_dom$VirtualDom$attribute, 'points', coordinates),
					A2(
					$elm$virtual_dom$VirtualDom$attribute,
					'transform',
					'translate(' + ($elm$core$String$fromFloat(x) + (' ' + ($elm$core$String$fromFloat(y) + (') rotate(' + ($elm$core$String$fromFloat(-angle) + ')'))))))
				]),
			_List_Nil);
	});
var $elm$browser$Debugger$Overlay$elmLogo = A4(
	$elm$virtual_dom$VirtualDom$nodeNS,
	'http://www.w3.org/2000/svg',
	'svg',
	_List_fromArray(
		[
			A2($elm$virtual_dom$VirtualDom$attribute, 'viewBox', '-300 -300 600 600'),
			A2($elm$virtual_dom$VirtualDom$attribute, 'xmlns', 'http://www.w3.org/2000/svg'),
			A2($elm$virtual_dom$VirtualDom$attribute, 'fill', 'currentColor'),
			A2($elm$virtual_dom$VirtualDom$attribute, 'width', '24px'),
			A2($elm$virtual_dom$VirtualDom$attribute, 'height', '24px')
		]),
	_List_fromArray(
		[
			A4(
			$elm$virtual_dom$VirtualDom$nodeNS,
			'http://www.w3.org/2000/svg',
			'g',
			_List_fromArray(
				[
					A2($elm$virtual_dom$VirtualDom$attribute, 'transform', 'scale(1 -1)')
				]),
			_List_fromArray(
				[
					A4($elm$browser$Debugger$Overlay$viewShape, 0, -210, 0, '-280,-90 0,190 280,-90'),
					A4($elm$browser$Debugger$Overlay$viewShape, -210, 0, 90, '-280,-90 0,190 280,-90'),
					A4($elm$browser$Debugger$Overlay$viewShape, 207, 207, 45, '-198,-66 0,132 198,-66'),
					A4($elm$browser$Debugger$Overlay$viewShape, 150, 0, 0, '-130,0 0,-130 130,0 0,130'),
					A4($elm$browser$Debugger$Overlay$viewShape, -89, 239, 0, '-191,61 69,61 191,-61 -69,-61'),
					A4($elm$browser$Debugger$Overlay$viewShape, 0, 106, 180, '-130,-44 0,86  130,-44'),
					A4($elm$browser$Debugger$Overlay$viewShape, 256, -150, 270, '-130,-44 0,86  130,-44')
				]))
		]));
var $elm$core$String$length = _String_length;
var $elm$browser$Debugger$Overlay$viewMiniControls = F2(
	function (config, numMsgs) {
		var string = $elm$core$String$fromInt(numMsgs);
		var width = $elm$core$String$fromInt(
			2 + $elm$core$String$length(string));
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'position', 'fixed'),
					A2($elm$html$Html$Attributes$style, 'bottom', '2em'),
					A2($elm$html$Html$Attributes$style, 'right', '2em'),
					A2($elm$html$Html$Attributes$style, 'width', 'calc(42px + ' + (width + 'ch)')),
					A2($elm$html$Html$Attributes$style, 'height', '36px'),
					A2($elm$html$Html$Attributes$style, 'background-color', '#1293D8'),
					A2($elm$html$Html$Attributes$style, 'color', 'white'),
					A2($elm$html$Html$Attributes$style, 'font-family', 'monospace'),
					A2($elm$html$Html$Attributes$style, 'pointer-events', 'auto'),
					A2($elm$html$Html$Attributes$style, 'z-index', '2147483647'),
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'justify-content', 'center'),
					A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
					A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
					$elm$html$Html$Events$onClick(config.open)
				]),
			_List_fromArray(
				[
					$elm$browser$Debugger$Overlay$elmLogo,
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'padding-left', 'calc(1ch + 6px)'),
							A2($elm$html$Html$Attributes$style, 'padding-right', '1ch')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(string)
						]))
				]));
	});
var $elm$browser$Debugger$Overlay$explanationBad = '\nThe messages in this history do not match the messages handled by your\nprogram. I noticed changes in the following types:\n';
var $elm$browser$Debugger$Overlay$explanationRisky = '\nThis history seems old. It will work with this program, but some\nmessages have been added since the history was created:\n';
var $elm$core$List$intersperse = F2(
	function (sep, xs) {
		if (!xs.b) {
			return _List_Nil;
		} else {
			var hd = xs.a;
			var tl = xs.b;
			var step = F2(
				function (x, rest) {
					return A2(
						$elm$core$List$cons,
						sep,
						A2($elm$core$List$cons, x, rest));
				});
			var spersed = A3($elm$core$List$foldr, step, _List_Nil, tl);
			return A2($elm$core$List$cons, hd, spersed);
		}
	});
var $elm$browser$Debugger$Overlay$viewMention = F2(
	function (tags, verbed) {
		var _v0 = A2(
			$elm$core$List$map,
			$elm$browser$Debugger$Overlay$viewCode,
			$elm$core$List$reverse(tags));
		if (!_v0.b) {
			return $elm$html$Html$text('');
		} else {
			if (!_v0.b.b) {
				var tag = _v0.a;
				return A2(
					$elm$html$Html$li,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(verbed),
							tag,
							$elm$html$Html$text('.')
						]));
			} else {
				if (!_v0.b.b.b) {
					var tag2 = _v0.a;
					var _v1 = _v0.b;
					var tag1 = _v1.a;
					return A2(
						$elm$html$Html$li,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(verbed),
								tag1,
								$elm$html$Html$text(' and '),
								tag2,
								$elm$html$Html$text('.')
							]));
				} else {
					var lastTag = _v0.a;
					var otherTags = _v0.b;
					return A2(
						$elm$html$Html$li,
						_List_Nil,
						A2(
							$elm$core$List$cons,
							$elm$html$Html$text(verbed),
							_Utils_ap(
								A2(
									$elm$core$List$intersperse,
									$elm$html$Html$text(', '),
									$elm$core$List$reverse(otherTags)),
								_List_fromArray(
									[
										$elm$html$Html$text(', and '),
										lastTag,
										$elm$html$Html$text('.')
									]))));
				}
			}
		}
	});
var $elm$browser$Debugger$Overlay$viewChange = function (change) {
	return A2(
		$elm$html$Html$li,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'margin', '8px 0')
			]),
		function () {
			if (change.$ === 'AliasChange') {
				var name = change.a;
				return _List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'font-size', '1.5em')
							]),
						_List_fromArray(
							[
								$elm$browser$Debugger$Overlay$viewCode(name)
							]))
					]);
			} else {
				var name = change.a;
				var removed = change.b.removed;
				var changed = change.b.changed;
				var added = change.b.added;
				var argsMatch = change.b.argsMatch;
				return _List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'font-size', '1.5em')
							]),
						_List_fromArray(
							[
								$elm$browser$Debugger$Overlay$viewCode(name)
							])),
						A2(
						$elm$html$Html$ul,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'list-style-type', 'disc'),
								A2($elm$html$Html$Attributes$style, 'padding-left', '2em')
							]),
						_List_fromArray(
							[
								A2($elm$browser$Debugger$Overlay$viewMention, removed, 'Removed '),
								A2($elm$browser$Debugger$Overlay$viewMention, changed, 'Changed '),
								A2($elm$browser$Debugger$Overlay$viewMention, added, 'Added ')
							])),
						argsMatch ? $elm$html$Html$text('') : $elm$html$Html$text('This may be due to the fact that the type variable names changed.')
					]);
			}
		}());
};
var $elm$browser$Debugger$Overlay$viewReport = F2(
	function (isBad, report) {
		switch (report.$) {
			case 'CorruptHistory':
				return _List_fromArray(
					[
						$elm$html$Html$text('Looks like this history file is corrupt. I cannot understand it.')
					]);
			case 'VersionChanged':
				var old = report.a;
				var _new = report.b;
				return _List_fromArray(
					[
						$elm$html$Html$text('This history was created with Elm ' + (old + (', but you are using Elm ' + (_new + ' right now.'))))
					]);
			case 'MessageChanged':
				var old = report.a;
				var _new = report.b;
				return _List_fromArray(
					[
						$elm$html$Html$text('To import some other history, the overall message type must' + ' be the same. The old history has '),
						$elm$browser$Debugger$Overlay$viewCode(old),
						$elm$html$Html$text(' messages, but the new program works with '),
						$elm$browser$Debugger$Overlay$viewCode(_new),
						$elm$html$Html$text(' messages.')
					]);
			default:
				var changes = report.a;
				return _List_fromArray(
					[
						A2(
						$elm$html$Html$p,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(
								isBad ? $elm$browser$Debugger$Overlay$explanationBad : $elm$browser$Debugger$Overlay$explanationRisky)
							])),
						A2(
						$elm$html$Html$ul,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'list-style-type', 'none'),
								A2($elm$html$Html$Attributes$style, 'padding-left', '20px')
							]),
						A2($elm$core$List$map, $elm$browser$Debugger$Overlay$viewChange, changes))
					]);
		}
	});
var $elm$browser$Debugger$Overlay$view = F5(
	function (config, isPaused, isOpen, numMsgs, state) {
		switch (state.$) {
			case 'None':
				return isOpen ? $elm$html$Html$text('') : (isPaused ? A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$id('elm-debugger-overlay'),
							A2($elm$html$Html$Attributes$style, 'position', 'fixed'),
							A2($elm$html$Html$Attributes$style, 'top', '0'),
							A2($elm$html$Html$Attributes$style, 'left', '0'),
							A2($elm$html$Html$Attributes$style, 'width', '100vw'),
							A2($elm$html$Html$Attributes$style, 'height', '100vh'),
							A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
							A2($elm$html$Html$Attributes$style, 'display', 'flex'),
							A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
							A2($elm$html$Html$Attributes$style, 'justify-content', 'center'),
							A2($elm$html$Html$Attributes$style, 'pointer-events', 'auto'),
							A2($elm$html$Html$Attributes$style, 'background-color', 'rgba(200, 200, 200, 0.7)'),
							A2($elm$html$Html$Attributes$style, 'color', 'white'),
							A2($elm$html$Html$Attributes$style, 'font-family', '\'Trebuchet MS\', \'Lucida Grande\', \'Bitstream Vera Sans\', \'Helvetica Neue\', sans-serif'),
							A2($elm$html$Html$Attributes$style, 'z-index', '2147483646'),
							$elm$html$Html$Events$onClick(config.resume)
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$style, 'font-size', '80px')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Click to Resume')
								])),
							A2($elm$browser$Debugger$Overlay$viewMiniControls, config, numMsgs)
						])) : A2($elm$browser$Debugger$Overlay$viewMiniControls, config, numMsgs));
			case 'BadMetadata':
				var badMetadata_ = state.a;
				return A4(
					$elm$browser$Debugger$Overlay$viewMessage,
					config,
					'Cannot use Import or Export',
					$elm$browser$Debugger$Overlay$viewBadMetadata(badMetadata_),
					$elm$browser$Debugger$Overlay$Accept('Ok'));
			case 'BadImport':
				var report = state.a;
				return A4(
					$elm$browser$Debugger$Overlay$viewMessage,
					config,
					'Cannot Import History',
					A2($elm$browser$Debugger$Overlay$viewReport, true, report),
					$elm$browser$Debugger$Overlay$Accept('Ok'));
			default:
				var report = state.a;
				return A4(
					$elm$browser$Debugger$Overlay$viewMessage,
					config,
					'Warning',
					A2($elm$browser$Debugger$Overlay$viewReport, false, report),
					A2($elm$browser$Debugger$Overlay$Choose, 'Cancel', 'Import Anyway'));
		}
	});
var $elm$browser$Debugger$Main$cornerView = function (model) {
	return A5(
		$elm$browser$Debugger$Overlay$view,
		{exportHistory: $elm$browser$Debugger$Main$Export, importHistory: $elm$browser$Debugger$Main$Import, open: $elm$browser$Debugger$Main$Open, resume: $elm$browser$Debugger$Main$Resume, wrap: $elm$browser$Debugger$Main$OverlayMsg},
		$elm$browser$Debugger$Main$isPaused(model.state),
		_Debugger_isOpen(model.popout),
		$elm$browser$Debugger$History$size(model.history),
		model.overlay);
};
var $elm$core$Dict$RBEmpty_elm_builtin = {$: 'RBEmpty_elm_builtin'};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$core$Set$foldr = F3(
	function (func, initialState, _v0) {
		var dict = _v0.a;
		return A3(
			$elm$core$Dict$foldr,
			F3(
				function (key, _v1, state) {
					return A2(func, key, state);
				}),
			initialState,
			dict);
	});
var $elm$browser$Debugger$Main$getCurrentModel = function (state) {
	if (state.$ === 'Running') {
		var model = state.a;
		return model;
	} else {
		var model = state.b;
		return model;
	}
};
var $elm$browser$Debugger$Main$getUserModel = function (model) {
	return $elm$browser$Debugger$Main$getCurrentModel(model.state);
};
var $elm$browser$Debugger$Main$initialWindowHeight = 420;
var $elm$browser$Debugger$Main$initialWindowWidth = 900;
var $elm$core$Dict$Black = {$: 'Black'};
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: 'RBNode_elm_builtin', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = {$: 'Red'};
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Red')) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) && (left.d.$ === 'RBNode_elm_builtin')) && (left.d.a.$ === 'Red')) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1.$) {
				case 'LT':
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 'EQ':
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$browser$Debugger$Main$cachedHistory = function (model) {
	var _v0 = model.state;
	if (_v0.$ === 'Running') {
		return model.history;
	} else {
		var history = _v0.e;
		return history;
	}
};
var $elm$virtual_dom$VirtualDom$node = function (tag) {
	return _VirtualDom_node(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$node = $elm$virtual_dom$VirtualDom$node;
var $elm$browser$Debugger$Main$DragEnd = {$: 'DragEnd'};
var $elm$browser$Debugger$Main$getDragStatus = function (layout) {
	if (layout.$ === 'Horizontal') {
		var status = layout.a;
		return status;
	} else {
		var status = layout.a;
		return status;
	}
};
var $elm$browser$Debugger$Main$Drag = function (a) {
	return {$: 'Drag', a: a};
};
var $elm$browser$Debugger$Main$DragInfo = F5(
	function (x, y, down, width, height) {
		return {down: down, height: height, width: width, x: x, y: y};
	});
var $elm$json$Json$Decode$field = _Json_decodeField;
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $elm$json$Json$Decode$float = _Json_decodeFloat;
var $elm$browser$Debugger$Main$decodeDimension = function (field) {
	return A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['currentTarget', 'ownerDocument', 'defaultView', field]),
		$elm$json$Json$Decode$float);
};
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $elm$json$Json$Decode$map5 = _Json_map5;
var $elm$browser$Debugger$Main$onMouseMove = A2(
	$elm$html$Html$Events$on,
	'mousemove',
	A2(
		$elm$json$Json$Decode$map,
		$elm$browser$Debugger$Main$Drag,
		A6(
			$elm$json$Json$Decode$map5,
			$elm$browser$Debugger$Main$DragInfo,
			A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$float),
			A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$float),
			A2(
				$elm$json$Json$Decode$field,
				'buttons',
				A2(
					$elm$json$Json$Decode$map,
					function (v) {
						return v === 1;
					},
					$elm$json$Json$Decode$int)),
			$elm$browser$Debugger$Main$decodeDimension('innerWidth'),
			$elm$browser$Debugger$Main$decodeDimension('innerHeight'))));
var $elm$html$Html$Events$onMouseUp = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseup',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$browser$Debugger$Main$toDragListeners = function (layout) {
	var _v0 = $elm$browser$Debugger$Main$getDragStatus(layout);
	if (_v0.$ === 'Static') {
		return _List_Nil;
	} else {
		return _List_fromArray(
			[
				$elm$browser$Debugger$Main$onMouseMove,
				$elm$html$Html$Events$onMouseUp($elm$browser$Debugger$Main$DragEnd)
			]);
	}
};
var $elm$browser$Debugger$Main$toFlexDirection = function (layout) {
	if (layout.$ === 'Horizontal') {
		return 'row';
	} else {
		return 'column-reverse';
	}
};
var $elm$browser$Debugger$Main$DragStart = {$: 'DragStart'};
var $elm$html$Html$Events$onMouseDown = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mousedown',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$browser$Debugger$Main$toPercent = function (fraction) {
	return $elm$core$String$fromFloat(100 * fraction) + '%';
};
var $elm$browser$Debugger$Main$viewDragZone = function (layout) {
	if (layout.$ === 'Horizontal') {
		var x = layout.b;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
					A2($elm$html$Html$Attributes$style, 'top', '0'),
					A2(
					$elm$html$Html$Attributes$style,
					'left',
					$elm$browser$Debugger$Main$toPercent(x)),
					A2($elm$html$Html$Attributes$style, 'margin-left', '-5px'),
					A2($elm$html$Html$Attributes$style, 'width', '10px'),
					A2($elm$html$Html$Attributes$style, 'height', '100%'),
					A2($elm$html$Html$Attributes$style, 'cursor', 'col-resize'),
					$elm$html$Html$Events$onMouseDown($elm$browser$Debugger$Main$DragStart)
				]),
			_List_Nil);
	} else {
		var y = layout.c;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
					A2(
					$elm$html$Html$Attributes$style,
					'top',
					$elm$browser$Debugger$Main$toPercent(y)),
					A2($elm$html$Html$Attributes$style, 'left', '0'),
					A2($elm$html$Html$Attributes$style, 'margin-top', '-5px'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'height', '10px'),
					A2($elm$html$Html$Attributes$style, 'cursor', 'row-resize'),
					$elm$html$Html$Events$onMouseDown($elm$browser$Debugger$Main$DragStart)
				]),
			_List_Nil);
	}
};
var $elm$browser$Debugger$Main$TweakExpandoModel = function (a) {
	return {$: 'TweakExpandoModel', a: a};
};
var $elm$browser$Debugger$Main$TweakExpandoMsg = function (a) {
	return {$: 'TweakExpandoMsg', a: a};
};
var $elm$browser$Debugger$Main$toExpandoPercents = function (layout) {
	if (layout.$ === 'Horizontal') {
		var x = layout.b;
		return _Utils_Tuple2(
			$elm$browser$Debugger$Main$toPercent(1 - x),
			'100%');
	} else {
		var y = layout.c;
		return _Utils_Tuple2(
			'100%',
			$elm$browser$Debugger$Main$toPercent(y));
	}
};
var $elm$browser$Debugger$Main$toMouseBlocker = function (layout) {
	var _v0 = $elm$browser$Debugger$Main$getDragStatus(layout);
	if (_v0.$ === 'Static') {
		return 'auto';
	} else {
		return 'none';
	}
};
var $elm$browser$Debugger$Expando$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$browser$Debugger$Expando$Index = F3(
	function (a, b, c) {
		return {$: 'Index', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Expando$Key = {$: 'Key'};
var $elm$browser$Debugger$Expando$None = {$: 'None'};
var $elm$browser$Debugger$Expando$Toggle = {$: 'Toggle'};
var $elm$browser$Debugger$Expando$Value = {$: 'Value'};
var $elm$browser$Debugger$Expando$blue = A2($elm$html$Html$Attributes$style, 'color', 'rgb(28, 0, 207)');
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $elm$browser$Debugger$Expando$leftPad = function (maybeKey) {
	if (maybeKey.$ === 'Nothing') {
		return _List_Nil;
	} else {
		return _List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'padding-left', '4ch')
			]);
	}
};
var $elm$browser$Debugger$Expando$makeArrow = function (arrow) {
	return A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'color', '#777'),
				A2($elm$html$Html$Attributes$style, 'padding-left', '2ch'),
				A2($elm$html$Html$Attributes$style, 'width', '2ch'),
				A2($elm$html$Html$Attributes$style, 'display', 'inline-block')
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(arrow)
			]));
};
var $elm$browser$Debugger$Expando$purple = A2($elm$html$Html$Attributes$style, 'color', 'rgb(136, 19, 145)');
var $elm$browser$Debugger$Expando$lineStarter = F3(
	function (maybeKey, maybeIsClosed, description) {
		var arrow = function () {
			if (maybeIsClosed.$ === 'Nothing') {
				return $elm$browser$Debugger$Expando$makeArrow('');
			} else {
				if (maybeIsClosed.a) {
					return $elm$browser$Debugger$Expando$makeArrow('▸');
				} else {
					return $elm$browser$Debugger$Expando$makeArrow('▾');
				}
			}
		}();
		if (maybeKey.$ === 'Nothing') {
			return A2($elm$core$List$cons, arrow, description);
		} else {
			var key = maybeKey.a;
			return A2(
				$elm$core$List$cons,
				arrow,
				A2(
					$elm$core$List$cons,
					A2(
						$elm$html$Html$span,
						_List_fromArray(
							[$elm$browser$Debugger$Expando$purple]),
						_List_fromArray(
							[
								$elm$html$Html$text(key)
							])),
					A2(
						$elm$core$List$cons,
						$elm$html$Html$text(' = '),
						description)));
		}
	});
var $elm$browser$Debugger$Expando$red = A2($elm$html$Html$Attributes$style, 'color', 'rgb(196, 26, 22)');
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $elm$browser$Debugger$Expando$seqTypeToString = F2(
	function (n, seqType) {
		switch (seqType.$) {
			case 'ListSeq':
				return 'List(' + ($elm$core$String$fromInt(n) + ')');
			case 'SetSeq':
				return 'Set(' + ($elm$core$String$fromInt(n) + ')');
			default:
				return 'Array(' + ($elm$core$String$fromInt(n) + ')');
		}
	});
var $elm$core$String$slice = _String_slice;
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $elm$core$String$right = F2(
	function (n, string) {
		return (n < 1) ? '' : A3(
			$elm$core$String$slice,
			-n,
			$elm$core$String$length(string),
			string);
	});
var $elm$browser$Debugger$Expando$elideMiddle = function (str) {
	return ($elm$core$String$length(str) <= 18) ? str : (A2($elm$core$String$left, 8, str) + ('...' + A2($elm$core$String$right, 8, str)));
};
var $elm$core$Dict$isEmpty = function (dict) {
	if (dict.$ === 'RBEmpty_elm_builtin') {
		return true;
	} else {
		return false;
	}
};
var $elm$browser$Debugger$Expando$viewExtraTinyRecord = F3(
	function (length, starter, entries) {
		if (!entries.b) {
			return _Utils_Tuple2(
				length + 1,
				_List_fromArray(
					[
						$elm$html$Html$text('}')
					]));
		} else {
			var field = entries.a;
			var rest = entries.b;
			var nextLength = (length + $elm$core$String$length(field)) + 1;
			if (nextLength > 18) {
				return _Utils_Tuple2(
					length + 2,
					_List_fromArray(
						[
							$elm$html$Html$text('…}')
						]));
			} else {
				var _v1 = A3($elm$browser$Debugger$Expando$viewExtraTinyRecord, nextLength, ',', rest);
				var finalLength = _v1.a;
				var otherHtmls = _v1.b;
				return _Utils_Tuple2(
					finalLength,
					A2(
						$elm$core$List$cons,
						$elm$html$Html$text(starter),
						A2(
							$elm$core$List$cons,
							A2(
								$elm$html$Html$span,
								_List_fromArray(
									[$elm$browser$Debugger$Expando$purple]),
								_List_fromArray(
									[
										$elm$html$Html$text(field)
									])),
							otherHtmls)));
			}
		}
	});
var $elm$browser$Debugger$Expando$viewTinyHelp = function (str) {
	return _Utils_Tuple2(
		$elm$core$String$length(str),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $elm$browser$Debugger$Expando$viewExtraTiny = function (value) {
	if (value.$ === 'Record') {
		var record = value.b;
		return A3(
			$elm$browser$Debugger$Expando$viewExtraTinyRecord,
			0,
			'{',
			$elm$core$Dict$keys(record));
	} else {
		return $elm$browser$Debugger$Expando$viewTiny(value);
	}
};
var $elm$browser$Debugger$Expando$viewTiny = function (value) {
	switch (value.$) {
		case 'S':
			var stringRep = value.a;
			var str = $elm$browser$Debugger$Expando$elideMiddle(stringRep);
			return _Utils_Tuple2(
				$elm$core$String$length(str),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[$elm$browser$Debugger$Expando$red]),
						_List_fromArray(
							[
								$elm$html$Html$text(str)
							]))
					]));
		case 'Primitive':
			var stringRep = value.a;
			return _Utils_Tuple2(
				$elm$core$String$length(stringRep),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[$elm$browser$Debugger$Expando$blue]),
						_List_fromArray(
							[
								$elm$html$Html$text(stringRep)
							]))
					]));
		case 'Sequence':
			var seqType = value.a;
			var valueList = value.c;
			return $elm$browser$Debugger$Expando$viewTinyHelp(
				A2(
					$elm$browser$Debugger$Expando$seqTypeToString,
					$elm$core$List$length(valueList),
					seqType));
		case 'Dictionary':
			var keyValuePairs = value.b;
			return $elm$browser$Debugger$Expando$viewTinyHelp(
				'Dict(' + ($elm$core$String$fromInt(
					$elm$core$List$length(keyValuePairs)) + ')'));
		case 'Record':
			var record = value.b;
			return $elm$browser$Debugger$Expando$viewTinyRecord(record);
		default:
			if (!value.c.b) {
				var maybeName = value.a;
				return $elm$browser$Debugger$Expando$viewTinyHelp(
					A2($elm$core$Maybe$withDefault, 'Unit', maybeName));
			} else {
				var maybeName = value.a;
				var valueList = value.c;
				return $elm$browser$Debugger$Expando$viewTinyHelp(
					function () {
						if (maybeName.$ === 'Nothing') {
							return 'Tuple(' + ($elm$core$String$fromInt(
								$elm$core$List$length(valueList)) + ')');
						} else {
							var name = maybeName.a;
							return name + ' …';
						}
					}());
			}
	}
};
var $elm$browser$Debugger$Expando$viewTinyRecord = function (record) {
	return $elm$core$Dict$isEmpty(record) ? _Utils_Tuple2(
		2,
		_List_fromArray(
			[
				$elm$html$Html$text('{}')
			])) : A3(
		$elm$browser$Debugger$Expando$viewTinyRecordHelp,
		0,
		'{ ',
		$elm$core$Dict$toList(record));
};
var $elm$browser$Debugger$Expando$viewTinyRecordHelp = F3(
	function (length, starter, entries) {
		if (!entries.b) {
			return _Utils_Tuple2(
				length + 2,
				_List_fromArray(
					[
						$elm$html$Html$text(' }')
					]));
		} else {
			var _v1 = entries.a;
			var field = _v1.a;
			var value = _v1.b;
			var rest = entries.b;
			var fieldLen = $elm$core$String$length(field);
			var _v2 = $elm$browser$Debugger$Expando$viewExtraTiny(value);
			var valueLen = _v2.a;
			var valueHtmls = _v2.b;
			var newLength = ((length + fieldLen) + valueLen) + 5;
			if (newLength > 60) {
				return _Utils_Tuple2(
					length + 4,
					_List_fromArray(
						[
							$elm$html$Html$text(', … }')
						]));
			} else {
				var _v3 = A3($elm$browser$Debugger$Expando$viewTinyRecordHelp, newLength, ', ', rest);
				var finalLength = _v3.a;
				var otherHtmls = _v3.b;
				return _Utils_Tuple2(
					finalLength,
					A2(
						$elm$core$List$cons,
						$elm$html$Html$text(starter),
						A2(
							$elm$core$List$cons,
							A2(
								$elm$html$Html$span,
								_List_fromArray(
									[$elm$browser$Debugger$Expando$purple]),
								_List_fromArray(
									[
										$elm$html$Html$text(field)
									])),
							A2(
								$elm$core$List$cons,
								$elm$html$Html$text(' = '),
								A2(
									$elm$core$List$cons,
									A2($elm$html$Html$span, _List_Nil, valueHtmls),
									otherHtmls)))));
			}
		}
	});
var $elm$browser$Debugger$Expando$view = F2(
	function (maybeKey, expando) {
		switch (expando.$) {
			case 'S':
				var stringRep = expando.a;
				return A2(
					$elm$html$Html$div,
					$elm$browser$Debugger$Expando$leftPad(maybeKey),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Nothing,
						_List_fromArray(
							[
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[$elm$browser$Debugger$Expando$red]),
								_List_fromArray(
									[
										$elm$html$Html$text(stringRep)
									]))
							])));
			case 'Primitive':
				var stringRep = expando.a;
				return A2(
					$elm$html$Html$div,
					$elm$browser$Debugger$Expando$leftPad(maybeKey),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Nothing,
						_List_fromArray(
							[
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[$elm$browser$Debugger$Expando$blue]),
								_List_fromArray(
									[
										$elm$html$Html$text(stringRep)
									]))
							])));
			case 'Sequence':
				var seqType = expando.a;
				var isClosed = expando.b;
				var valueList = expando.c;
				return A4($elm$browser$Debugger$Expando$viewSequence, maybeKey, seqType, isClosed, valueList);
			case 'Dictionary':
				var isClosed = expando.a;
				var keyValuePairs = expando.b;
				return A3($elm$browser$Debugger$Expando$viewDictionary, maybeKey, isClosed, keyValuePairs);
			case 'Record':
				var isClosed = expando.a;
				var valueDict = expando.b;
				return A3($elm$browser$Debugger$Expando$viewRecord, maybeKey, isClosed, valueDict);
			default:
				var maybeName = expando.a;
				var isClosed = expando.b;
				var valueList = expando.c;
				return A4($elm$browser$Debugger$Expando$viewConstructor, maybeKey, maybeName, isClosed, valueList);
		}
	});
var $elm$browser$Debugger$Expando$viewConstructor = F4(
	function (maybeKey, maybeName, isClosed, valueList) {
		var tinyArgs = A2(
			$elm$core$List$map,
			A2($elm$core$Basics$composeL, $elm$core$Tuple$second, $elm$browser$Debugger$Expando$viewExtraTiny),
			valueList);
		var description = function () {
			var _v7 = _Utils_Tuple2(maybeName, tinyArgs);
			if (_v7.a.$ === 'Nothing') {
				if (!_v7.b.b) {
					var _v8 = _v7.a;
					return _List_fromArray(
						[
							$elm$html$Html$text('()')
						]);
				} else {
					var _v9 = _v7.a;
					var _v10 = _v7.b;
					var x = _v10.a;
					var xs = _v10.b;
					return A2(
						$elm$core$List$cons,
						$elm$html$Html$text('( '),
						A2(
							$elm$core$List$cons,
							A2($elm$html$Html$span, _List_Nil, x),
							A3(
								$elm$core$List$foldr,
								F2(
									function (args, rest) {
										return A2(
											$elm$core$List$cons,
											$elm$html$Html$text(', '),
											A2(
												$elm$core$List$cons,
												A2($elm$html$Html$span, _List_Nil, args),
												rest));
									}),
								_List_fromArray(
									[
										$elm$html$Html$text(' )')
									]),
								xs)));
				}
			} else {
				if (!_v7.b.b) {
					var name = _v7.a.a;
					return _List_fromArray(
						[
							$elm$html$Html$text(name)
						]);
				} else {
					var name = _v7.a.a;
					var _v11 = _v7.b;
					var x = _v11.a;
					var xs = _v11.b;
					return A2(
						$elm$core$List$cons,
						$elm$html$Html$text(name + ' '),
						A2(
							$elm$core$List$cons,
							A2($elm$html$Html$span, _List_Nil, x),
							A3(
								$elm$core$List$foldr,
								F2(
									function (args, rest) {
										return A2(
											$elm$core$List$cons,
											$elm$html$Html$text(' '),
											A2(
												$elm$core$List$cons,
												A2($elm$html$Html$span, _List_Nil, args),
												rest));
									}),
								_List_Nil,
								xs)));
				}
			}
		}();
		var _v4 = function () {
			if (!valueList.b) {
				return _Utils_Tuple2(
					$elm$core$Maybe$Nothing,
					A2($elm$html$Html$div, _List_Nil, _List_Nil));
			} else {
				if (!valueList.b.b) {
					var entry = valueList.a;
					switch (entry.$) {
						case 'S':
							return _Utils_Tuple2(
								$elm$core$Maybe$Nothing,
								A2($elm$html$Html$div, _List_Nil, _List_Nil));
						case 'Primitive':
							return _Utils_Tuple2(
								$elm$core$Maybe$Nothing,
								A2($elm$html$Html$div, _List_Nil, _List_Nil));
						case 'Sequence':
							var subValueList = entry.c;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(isClosed),
								isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									$elm$html$Html$map,
									A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0),
									$elm$browser$Debugger$Expando$viewSequenceOpen(subValueList)));
						case 'Dictionary':
							var keyValuePairs = entry.b;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(isClosed),
								isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									$elm$html$Html$map,
									A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0),
									$elm$browser$Debugger$Expando$viewDictionaryOpen(keyValuePairs)));
						case 'Record':
							var record = entry.b;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(isClosed),
								isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									$elm$html$Html$map,
									A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0),
									$elm$browser$Debugger$Expando$viewRecordOpen(record)));
						default:
							var subValueList = entry.c;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(isClosed),
								isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									$elm$html$Html$map,
									A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0),
									$elm$browser$Debugger$Expando$viewConstructorOpen(subValueList)));
					}
				} else {
					return _Utils_Tuple2(
						$elm$core$Maybe$Just(isClosed),
						isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : $elm$browser$Debugger$Expando$viewConstructorOpen(valueList));
				}
			}
		}();
		var maybeIsClosed = _v4.a;
		var openHtml = _v4.b;
		return A2(
			$elm$html$Html$div,
			$elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
						]),
					A3($elm$browser$Debugger$Expando$lineStarter, maybeKey, maybeIsClosed, description)),
					openHtml
				]));
	});
var $elm$browser$Debugger$Expando$viewConstructorEntry = F2(
	function (index, value) {
		return A2(
			$elm$html$Html$map,
			A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, index),
			A2(
				$elm$browser$Debugger$Expando$view,
				$elm$core$Maybe$Just(
					$elm$core$String$fromInt(index)),
				value));
	});
var $elm$browser$Debugger$Expando$viewConstructorOpen = function (valueList) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2($elm$core$List$indexedMap, $elm$browser$Debugger$Expando$viewConstructorEntry, valueList));
};
var $elm$browser$Debugger$Expando$viewDictionary = F3(
	function (maybeKey, isClosed, keyValuePairs) {
		var starter = 'Dict(' + ($elm$core$String$fromInt(
			$elm$core$List$length(keyValuePairs)) + ')');
		return A2(
			$elm$html$Html$div,
			$elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
						]),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Just(isClosed),
						_List_fromArray(
							[
								$elm$html$Html$text(starter)
							]))),
					isClosed ? $elm$html$Html$text('') : $elm$browser$Debugger$Expando$viewDictionaryOpen(keyValuePairs)
				]));
	});
var $elm$browser$Debugger$Expando$viewDictionaryEntry = F2(
	function (index, _v2) {
		var key = _v2.a;
		var value = _v2.b;
		switch (key.$) {
			case 'S':
				var stringRep = key.a;
				return A2(
					$elm$html$Html$map,
					A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Value, index),
					A2(
						$elm$browser$Debugger$Expando$view,
						$elm$core$Maybe$Just(stringRep),
						value));
			case 'Primitive':
				var stringRep = key.a;
				return A2(
					$elm$html$Html$map,
					A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Value, index),
					A2(
						$elm$browser$Debugger$Expando$view,
						$elm$core$Maybe$Just(stringRep),
						value));
			default:
				return A2(
					$elm$html$Html$div,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$elm$html$Html$map,
							A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Key, index),
							A2(
								$elm$browser$Debugger$Expando$view,
								$elm$core$Maybe$Just('key'),
								key)),
							A2(
							$elm$html$Html$map,
							A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Value, index),
							A2(
								$elm$browser$Debugger$Expando$view,
								$elm$core$Maybe$Just('value'),
								value))
						]));
		}
	});
var $elm$browser$Debugger$Expando$viewDictionaryOpen = function (keyValuePairs) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2($elm$core$List$indexedMap, $elm$browser$Debugger$Expando$viewDictionaryEntry, keyValuePairs));
};
var $elm$browser$Debugger$Expando$viewRecord = F3(
	function (maybeKey, isClosed, record) {
		var _v1 = isClosed ? _Utils_Tuple3(
			$elm$browser$Debugger$Expando$viewTinyRecord(record).b,
			$elm$html$Html$text(''),
			$elm$html$Html$text('')) : _Utils_Tuple3(
			_List_fromArray(
				[
					$elm$html$Html$text('{')
				]),
			$elm$browser$Debugger$Expando$viewRecordOpen(record),
			A2(
				$elm$html$Html$div,
				$elm$browser$Debugger$Expando$leftPad(
					$elm$core$Maybe$Just(_Utils_Tuple0)),
				_List_fromArray(
					[
						$elm$html$Html$text('}')
					])));
		var start = _v1.a;
		var middle = _v1.b;
		var end = _v1.c;
		return A2(
			$elm$html$Html$div,
			$elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
						]),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Just(isClosed),
						start)),
					middle,
					end
				]));
	});
var $elm$browser$Debugger$Expando$viewRecordEntry = function (_v0) {
	var field = _v0.a;
	var value = _v0.b;
	return A2(
		$elm$html$Html$map,
		$elm$browser$Debugger$Expando$Field(field),
		A2(
			$elm$browser$Debugger$Expando$view,
			$elm$core$Maybe$Just(field),
			value));
};
var $elm$browser$Debugger$Expando$viewRecordOpen = function (record) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2(
			$elm$core$List$map,
			$elm$browser$Debugger$Expando$viewRecordEntry,
			$elm$core$Dict$toList(record)));
};
var $elm$browser$Debugger$Expando$viewSequence = F4(
	function (maybeKey, seqType, isClosed, valueList) {
		var starter = A2(
			$elm$browser$Debugger$Expando$seqTypeToString,
			$elm$core$List$length(valueList),
			seqType);
		return A2(
			$elm$html$Html$div,
			$elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
						]),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Just(isClosed),
						_List_fromArray(
							[
								$elm$html$Html$text(starter)
							]))),
					isClosed ? $elm$html$Html$text('') : $elm$browser$Debugger$Expando$viewSequenceOpen(valueList)
				]));
	});
var $elm$browser$Debugger$Expando$viewSequenceOpen = function (values) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2($elm$core$List$indexedMap, $elm$browser$Debugger$Expando$viewConstructorEntry, values));
};
var $elm$browser$Debugger$Main$viewExpando = F3(
	function (expandoMsg, expandoModel, layout) {
		var block = $elm$browser$Debugger$Main$toMouseBlocker(layout);
		var _v0 = $elm$browser$Debugger$Main$toExpandoPercents(layout);
		var w = _v0.a;
		var h = _v0.b;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'display', 'block'),
					A2($elm$html$Html$Attributes$style, 'width', 'calc(' + (w + ' - 4em)')),
					A2($elm$html$Html$Attributes$style, 'height', 'calc(' + (h + ' - 4em)')),
					A2($elm$html$Html$Attributes$style, 'padding', '2em'),
					A2($elm$html$Html$Attributes$style, 'margin', '0'),
					A2($elm$html$Html$Attributes$style, 'overflow', 'auto'),
					A2($elm$html$Html$Attributes$style, 'pointer-events', block),
					A2($elm$html$Html$Attributes$style, '-webkit-user-select', block),
					A2($elm$html$Html$Attributes$style, '-moz-user-select', block),
					A2($elm$html$Html$Attributes$style, '-ms-user-select', block),
					A2($elm$html$Html$Attributes$style, 'user-select', block)
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'color', '#ccc'),
							A2($elm$html$Html$Attributes$style, 'padding', '0 0 1em 0')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('-- MESSAGE')
						])),
					A2(
					$elm$html$Html$map,
					$elm$browser$Debugger$Main$TweakExpandoMsg,
					A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Nothing, expandoMsg)),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'color', '#ccc'),
							A2($elm$html$Html$Attributes$style, 'padding', '1em 0')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('-- MODEL')
						])),
					A2(
					$elm$html$Html$map,
					$elm$browser$Debugger$Main$TweakExpandoModel,
					A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Nothing, expandoModel))
				]));
	});
var $elm$browser$Debugger$Main$Jump = function (a) {
	return {$: 'Jump', a: a};
};
var $elm$virtual_dom$VirtualDom$lazy = _VirtualDom_lazy;
var $elm$html$Html$Lazy$lazy = $elm$virtual_dom$VirtualDom$lazy;
var $elm$browser$Debugger$Main$toHistoryPercents = function (layout) {
	if (layout.$ === 'Horizontal') {
		var x = layout.b;
		return _Utils_Tuple2(
			$elm$browser$Debugger$Main$toPercent(x),
			'100%');
	} else {
		var y = layout.c;
		return _Utils_Tuple2(
			'100%',
			$elm$browser$Debugger$Main$toPercent(1 - y));
	}
};
var $elm$virtual_dom$VirtualDom$lazy3 = _VirtualDom_lazy3;
var $elm$html$Html$Lazy$lazy3 = $elm$virtual_dom$VirtualDom$lazy3;
var $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty('className');
var $elm$browser$Debugger$History$idForMessageIndex = function (index) {
	return 'msg-' + $elm$core$String$fromInt(index);
};
var $elm$html$Html$Attributes$title = $elm$html$Html$Attributes$stringProperty('title');
var $elm$browser$Debugger$History$viewMessage = F3(
	function (currentIndex, index, msg) {
		var messageName = _Debugger_messageToString(msg);
		var className = _Utils_eq(currentIndex, index) ? 'elm-debugger-entry elm-debugger-entry-selected' : 'elm-debugger-entry';
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$id(
					$elm$browser$Debugger$History$idForMessageIndex(index)),
					$elm$html$Html$Attributes$class(className),
					$elm$html$Html$Events$onClick(index)
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$title(messageName),
							$elm$html$Html$Attributes$class('elm-debugger-entry-content')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(messageName)
						])),
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('elm-debugger-entry-index')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							$elm$core$String$fromInt(index))
						]))
				]));
	});
var $elm$browser$Debugger$History$consMsg = F3(
	function (currentIndex, msg, _v0) {
		var index = _v0.a;
		var rest = _v0.b;
		return _Utils_Tuple2(
			index + 1,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$elm$core$String$fromInt(index),
					A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewMessage, currentIndex, index, msg)),
				rest));
	});
var $elm$core$Array$length = function (_v0) {
	var len = _v0.a;
	return len;
};
var $elm$core$Basics$neq = _Utils_notEqual;
var $elm$virtual_dom$VirtualDom$keyedNode = function (tag) {
	return _VirtualDom_keyedNode(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$Keyed$node = $elm$virtual_dom$VirtualDom$keyedNode;
var $elm$browser$Debugger$History$maxSnapshotSize = 31;
var $elm$browser$Debugger$History$showMoreButton = function (numMessages) {
	var nextIndex = (numMessages - 1) - ($elm$browser$Debugger$History$maxSnapshotSize * 2);
	var labelText = 'View more messages';
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('elm-debugger-entry'),
				$elm$html$Html$Events$onClick(nextIndex)
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$title(labelText),
						$elm$html$Html$Attributes$class('elm-debugger-entry-content')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text(labelText)
					])),
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('elm-debugger-entry-index')
					]),
				_List_Nil)
			]));
};
var $elm$browser$Debugger$History$styles = A3(
	$elm$html$Html$node,
	'style',
	_List_Nil,
	_List_fromArray(
		[
			$elm$html$Html$text('\n\n.elm-debugger-entry {\n  cursor: pointer;\n  width: 100%;\n  box-sizing: border-box;\n  padding: 8px;\n}\n\n.elm-debugger-entry:hover {\n  background-color: rgb(41, 41, 41);\n}\n\n.elm-debugger-entry-selected, .elm-debugger-entry-selected:hover {\n  background-color: rgb(10, 10, 10);\n}\n\n.elm-debugger-entry-content {\n  width: calc(100% - 40px);\n  padding: 0 5px;\n  box-sizing: border-box;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  display: inline-block;\n}\n\n.elm-debugger-entry-index {\n  color: #666;\n  width: 40px;\n  text-align: right;\n  display: block;\n  float: right;\n}\n\n')
		]));
var $elm$core$Basics$ge = _Utils_ge;
var $elm$browser$Debugger$History$viewSnapshot = F3(
	function (selectedIndex, index, _v0) {
		var messages = _v0.messages;
		return A3(
			$elm$html$Html$Keyed$node,
			'div',
			_List_Nil,
			A3(
				$elm$core$Array$foldr,
				$elm$browser$Debugger$History$consMsg(selectedIndex),
				_Utils_Tuple2(index, _List_Nil),
				messages).b);
	});
var $elm$browser$Debugger$History$consSnapshot = F3(
	function (selectedIndex, snapshot, _v0) {
		var index = _v0.a;
		var rest = _v0.b;
		var nextIndex = index + $elm$core$Array$length(snapshot.messages);
		var selectedIndexHelp = ((_Utils_cmp(nextIndex, selectedIndex) > 0) && (_Utils_cmp(selectedIndex, index) > -1)) ? selectedIndex : (-1);
		return _Utils_Tuple2(
			nextIndex,
			A2(
				$elm$core$List$cons,
				A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewSnapshot, selectedIndexHelp, index, snapshot),
				rest));
	});
var $elm$core$Elm$JsArray$foldl = _JsArray_foldl;
var $elm$core$Array$foldl = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldl, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldl, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldl,
			func,
			A3($elm$core$Elm$JsArray$foldl, helper, baseCase, tree),
			tail);
	});
var $elm$browser$Debugger$History$viewAllSnapshots = F3(
	function (selectedIndex, startIndex, snapshots) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			A3(
				$elm$core$Array$foldl,
				$elm$browser$Debugger$History$consSnapshot(selectedIndex),
				_Utils_Tuple2(startIndex, _List_Nil),
				snapshots).b);
	});
var $elm$core$Array$fromListHelp = F3(
	function (list, nodeList, nodeListSize) {
		fromListHelp:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, list);
			var jsArray = _v0.a;
			var remainingItems = _v0.b;
			if (_Utils_cmp(
				$elm$core$Elm$JsArray$length(jsArray),
				$elm$core$Array$branchFactor) < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					true,
					{nodeList: nodeList, nodeListSize: nodeListSize, tail: jsArray});
			} else {
				var $temp$list = remainingItems,
					$temp$nodeList = A2(
					$elm$core$List$cons,
					$elm$core$Array$Leaf(jsArray),
					nodeList),
					$temp$nodeListSize = nodeListSize + 1;
				list = $temp$list;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue fromListHelp;
			}
		}
	});
var $elm$core$Array$fromList = function (list) {
	if (!list.b) {
		return $elm$core$Array$empty;
	} else {
		return A3($elm$core$Array$fromListHelp, list, _List_Nil, 0);
	}
};
var $elm$core$Bitwise$and = _Bitwise_and;
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $elm$core$Array$bitMask = 4294967295 >>> (32 - $elm$core$Array$shiftStep);
var $elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
var $elm$core$Array$getHelp = F3(
	function (shift, index, tree) {
		getHelp:
		while (true) {
			var pos = $elm$core$Array$bitMask & (index >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_v0.$ === 'SubTree') {
				var subTree = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$index = index,
					$temp$tree = subTree;
				shift = $temp$shift;
				index = $temp$index;
				tree = $temp$tree;
				continue getHelp;
			} else {
				var values = _v0.a;
				return A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, values);
			}
		}
	});
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $elm$core$Array$tailIndex = function (len) {
	return (len >>> 5) << 5;
};
var $elm$core$Array$get = F2(
	function (index, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? $elm$core$Maybe$Nothing : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? $elm$core$Maybe$Just(
			A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, tail)) : $elm$core$Maybe$Just(
			A3($elm$core$Array$getHelp, startShift, index, tree)));
	});
var $elm$core$Elm$JsArray$appendN = _JsArray_appendN;
var $elm$core$Elm$JsArray$slice = _JsArray_slice;
var $elm$core$Array$appendHelpBuilder = F2(
	function (tail, builder) {
		var tailLen = $elm$core$Elm$JsArray$length(tail);
		var notAppended = ($elm$core$Array$branchFactor - $elm$core$Elm$JsArray$length(builder.tail)) - tailLen;
		var appended = A3($elm$core$Elm$JsArray$appendN, $elm$core$Array$branchFactor, builder.tail, tail);
		return (notAppended < 0) ? {
			nodeList: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.nodeList),
			nodeListSize: builder.nodeListSize + 1,
			tail: A3($elm$core$Elm$JsArray$slice, notAppended, tailLen, tail)
		} : ((!notAppended) ? {
			nodeList: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.nodeList),
			nodeListSize: builder.nodeListSize + 1,
			tail: $elm$core$Elm$JsArray$empty
		} : {nodeList: builder.nodeList, nodeListSize: builder.nodeListSize, tail: appended});
	});
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $elm$core$Array$sliceLeft = F2(
	function (from, array) {
		var len = array.a;
		var tree = array.c;
		var tail = array.d;
		if (!from) {
			return array;
		} else {
			if (_Utils_cmp(
				from,
				$elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					len - from,
					$elm$core$Array$shiftStep,
					$elm$core$Elm$JsArray$empty,
					A3(
						$elm$core$Elm$JsArray$slice,
						from - $elm$core$Array$tailIndex(len),
						$elm$core$Elm$JsArray$length(tail),
						tail));
			} else {
				var skipNodes = (from / $elm$core$Array$branchFactor) | 0;
				var helper = F2(
					function (node, acc) {
						if (node.$ === 'SubTree') {
							var subTree = node.a;
							return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
						} else {
							var leaf = node.a;
							return A2($elm$core$List$cons, leaf, acc);
						}
					});
				var leafNodes = A3(
					$elm$core$Elm$JsArray$foldr,
					helper,
					_List_fromArray(
						[tail]),
					tree);
				var nodesToInsert = A2($elm$core$List$drop, skipNodes, leafNodes);
				if (!nodesToInsert.b) {
					return $elm$core$Array$empty;
				} else {
					var head = nodesToInsert.a;
					var rest = nodesToInsert.b;
					var firstSlice = from - (skipNodes * $elm$core$Array$branchFactor);
					var initialBuilder = {
						nodeList: _List_Nil,
						nodeListSize: 0,
						tail: A3(
							$elm$core$Elm$JsArray$slice,
							firstSlice,
							$elm$core$Elm$JsArray$length(head),
							head)
					};
					return A2(
						$elm$core$Array$builderToArray,
						true,
						A3($elm$core$List$foldl, $elm$core$Array$appendHelpBuilder, initialBuilder, rest));
				}
			}
		}
	});
var $elm$core$Array$fetchNewTail = F4(
	function (shift, end, treeEnd, tree) {
		fetchNewTail:
		while (true) {
			var pos = $elm$core$Array$bitMask & (treeEnd >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_v0.$ === 'SubTree') {
				var sub = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$end = end,
					$temp$treeEnd = treeEnd,
					$temp$tree = sub;
				shift = $temp$shift;
				end = $temp$end;
				treeEnd = $temp$treeEnd;
				tree = $temp$tree;
				continue fetchNewTail;
			} else {
				var values = _v0.a;
				return A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, values);
			}
		}
	});
var $elm$core$Array$hoistTree = F3(
	function (oldShift, newShift, tree) {
		hoistTree:
		while (true) {
			if ((_Utils_cmp(oldShift, newShift) < 1) || (!$elm$core$Elm$JsArray$length(tree))) {
				return tree;
			} else {
				var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, 0, tree);
				if (_v0.$ === 'SubTree') {
					var sub = _v0.a;
					var $temp$oldShift = oldShift - $elm$core$Array$shiftStep,
						$temp$newShift = newShift,
						$temp$tree = sub;
					oldShift = $temp$oldShift;
					newShift = $temp$newShift;
					tree = $temp$tree;
					continue hoistTree;
				} else {
					return tree;
				}
			}
		}
	});
var $elm$core$Elm$JsArray$unsafeSet = _JsArray_unsafeSet;
var $elm$core$Array$sliceTree = F3(
	function (shift, endIdx, tree) {
		var lastPos = $elm$core$Array$bitMask & (endIdx >>> shift);
		var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, lastPos, tree);
		if (_v0.$ === 'SubTree') {
			var sub = _v0.a;
			var newSub = A3($elm$core$Array$sliceTree, shift - $elm$core$Array$shiftStep, endIdx, sub);
			return (!$elm$core$Elm$JsArray$length(newSub)) ? A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree) : A3(
				$elm$core$Elm$JsArray$unsafeSet,
				lastPos,
				$elm$core$Array$SubTree(newSub),
				A3($elm$core$Elm$JsArray$slice, 0, lastPos + 1, tree));
		} else {
			return A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree);
		}
	});
var $elm$core$Array$sliceRight = F2(
	function (end, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		if (_Utils_eq(end, len)) {
			return array;
		} else {
			if (_Utils_cmp(
				end,
				$elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					end,
					startShift,
					tree,
					A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, tail));
			} else {
				var endIdx = $elm$core$Array$tailIndex(end);
				var depth = $elm$core$Basics$floor(
					A2(
						$elm$core$Basics$logBase,
						$elm$core$Array$branchFactor,
						A2($elm$core$Basics$max, 1, endIdx - 1)));
				var newShift = A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep);
				return A4(
					$elm$core$Array$Array_elm_builtin,
					end,
					newShift,
					A3(
						$elm$core$Array$hoistTree,
						startShift,
						newShift,
						A3($elm$core$Array$sliceTree, startShift, endIdx, tree)),
					A4($elm$core$Array$fetchNewTail, startShift, end, endIdx, tree));
			}
		}
	});
var $elm$core$Array$translateIndex = F2(
	function (index, _v0) {
		var len = _v0.a;
		var posIndex = (index < 0) ? (len + index) : index;
		return (posIndex < 0) ? 0 : ((_Utils_cmp(posIndex, len) > 0) ? len : posIndex);
	});
var $elm$core$Array$slice = F3(
	function (from, to, array) {
		var correctTo = A2($elm$core$Array$translateIndex, to, array);
		var correctFrom = A2($elm$core$Array$translateIndex, from, array);
		return (_Utils_cmp(correctFrom, correctTo) > 0) ? $elm$core$Array$empty : A2(
			$elm$core$Array$sliceLeft,
			correctFrom,
			A2($elm$core$Array$sliceRight, correctTo, array));
	});
var $elm$browser$Debugger$History$viewRecentSnapshots = F3(
	function (selectedIndex, recentMessagesNum, snapshots) {
		var messagesToFill = $elm$browser$Debugger$History$maxSnapshotSize - recentMessagesNum;
		var arrayLength = $elm$core$Array$length(snapshots);
		var snapshotsToRender = function () {
			var _v0 = _Utils_Tuple2(
				A2($elm$core$Array$get, arrayLength - 2, snapshots),
				A2($elm$core$Array$get, arrayLength - 1, snapshots));
			if ((_v0.a.$ === 'Just') && (_v0.b.$ === 'Just')) {
				var fillerSnapshot = _v0.a.a;
				var recentSnapshot = _v0.b.a;
				return $elm$core$Array$fromList(
					_List_fromArray(
						[
							{
							messages: A3($elm$core$Array$slice, 0, messagesToFill, fillerSnapshot.messages),
							model: fillerSnapshot.model
						},
							recentSnapshot
						]));
			} else {
				return snapshots;
			}
		}();
		var startingIndex = ((arrayLength * $elm$browser$Debugger$History$maxSnapshotSize) - $elm$browser$Debugger$History$maxSnapshotSize) - messagesToFill;
		return A3($elm$browser$Debugger$History$viewAllSnapshots, selectedIndex, startingIndex, snapshotsToRender);
	});
var $elm$browser$Debugger$History$view = F2(
	function (maybeIndex, _v0) {
		var snapshots = _v0.snapshots;
		var recent = _v0.recent;
		var numMessages = _v0.numMessages;
		var recentMessageStartIndex = numMessages - recent.numMessages;
		var index = A2($elm$core$Maybe$withDefault, -1, maybeIndex);
		var newStuff = A3(
			$elm$html$Html$Keyed$node,
			'div',
			_List_Nil,
			A3(
				$elm$core$List$foldr,
				$elm$browser$Debugger$History$consMsg(index),
				_Utils_Tuple2(recentMessageStartIndex, _List_Nil),
				recent.messages).b);
		var onlyRenderRecentMessages = (!_Utils_eq(index, -1)) || ($elm$core$Array$length(snapshots) < 2);
		var oldStuff = onlyRenderRecentMessages ? A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewAllSnapshots, index, 0, snapshots) : A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewRecentSnapshots, index, recent.numMessages, snapshots);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$id('elm-debugger-sidebar'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'overflow-y', 'auto'),
					A2($elm$html$Html$Attributes$style, 'height', 'calc(100% - 72px)')
				]),
			A2(
				$elm$core$List$cons,
				$elm$browser$Debugger$History$styles,
				A2(
					$elm$core$List$cons,
					newStuff,
					A2(
						$elm$core$List$cons,
						oldStuff,
						onlyRenderRecentMessages ? _List_Nil : _List_fromArray(
							[
								$elm$browser$Debugger$History$showMoreButton(numMessages)
							])))));
	});
var $elm$browser$Debugger$Main$SwapLayout = {$: 'SwapLayout'};
var $elm$browser$Debugger$Main$toHistoryIcon = function (layout) {
	if (layout.$ === 'Horizontal') {
		return 'M13 1a3 3 0 0 1 3 3v8a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3v-8a3 3 0 0 1 3-3z M13 3h-10a1 1 0 0 0-1 1v5h12v-5a1 1 0 0 0-1-1z M14 10h-12v2a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1z';
	} else {
		return 'M0 4a3 3 0 0 1 3-3h10a3 3 0 0 1 3 3v8a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3z M2 4v8a1 1 0 0 0 1 1h2v-10h-2a1 1 0 0 0-1 1z M6 3v10h7a1 1 0 0 0 1-1v-8a1 1 0 0 0-1-1z';
	}
};
var $elm$browser$Debugger$Main$icon = function (path) {
	return A4(
		$elm$virtual_dom$VirtualDom$nodeNS,
		'http://www.w3.org/2000/svg',
		'svg',
		_List_fromArray(
			[
				A2($elm$virtual_dom$VirtualDom$attribute, 'viewBox', '0 0 16 16'),
				A2($elm$virtual_dom$VirtualDom$attribute, 'xmlns', 'http://www.w3.org/2000/svg'),
				A2($elm$virtual_dom$VirtualDom$attribute, 'fill', 'currentColor'),
				A2($elm$virtual_dom$VirtualDom$attribute, 'width', '16px'),
				A2($elm$virtual_dom$VirtualDom$attribute, 'height', '16px')
			]),
		_List_fromArray(
			[
				A4(
				$elm$virtual_dom$VirtualDom$nodeNS,
				'http://www.w3.org/2000/svg',
				'path',
				_List_fromArray(
					[
						A2($elm$virtual_dom$VirtualDom$attribute, 'd', path)
					]),
				_List_Nil)
			]));
};
var $elm$browser$Debugger$Main$viewHistoryButton = F3(
	function (label, msg, path) {
		return A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
					A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
					A2($elm$html$Html$Attributes$style, 'background', 'none'),
					A2($elm$html$Html$Attributes$style, 'border', 'none'),
					A2($elm$html$Html$Attributes$style, 'color', 'inherit'),
					A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
					$elm$html$Html$Events$onClick(msg)
				]),
			_List_fromArray(
				[
					$elm$browser$Debugger$Main$icon(path),
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'padding-left', '6px')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(label)
						]))
				]));
	});
var $elm$browser$Debugger$Main$viewHistoryOptions = function (layout) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'width', '100%'),
				A2($elm$html$Html$Attributes$style, 'height', '36px'),
				A2($elm$html$Html$Attributes$style, 'display', 'flex'),
				A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
				A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
				A2($elm$html$Html$Attributes$style, 'justify-content', 'space-between'),
				A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)')
			]),
		_List_fromArray(
			[
				A3(
				$elm$browser$Debugger$Main$viewHistoryButton,
				'Swap Layout',
				$elm$browser$Debugger$Main$SwapLayout,
				$elm$browser$Debugger$Main$toHistoryIcon(layout)),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'display', 'flex'),
						A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
						A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
						A2($elm$html$Html$Attributes$style, 'justify-content', 'space-between')
					]),
				_List_fromArray(
					[
						A3($elm$browser$Debugger$Main$viewHistoryButton, 'Import', $elm$browser$Debugger$Main$Import, 'M5 1a1 1 0 0 1 0 2h-2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1a1 1 0 0 1 2 0a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3v-8a3 3 0 0 1 3-3z M10 2a1 1 0 0 0 -2 0v6a1 1 0 0 0 1 1h6a1 1 0 0 0 0-2h-3.586l4.293-4.293a1 1 0 0 0-1.414-1.414l-4.293 4.293z'),
						A3($elm$browser$Debugger$Main$viewHistoryButton, 'Export', $elm$browser$Debugger$Main$Export, 'M5 1a1 1 0 0 1 0 2h-2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1 a1 1 0 0 1 2 0a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3v-8a3 3 0 0 1 3-3z M9 3a1 1 0 1 1 0-2h6a1 1 0 0 1 1 1v6a1 1 0 1 1-2 0v-3.586l-5.293 5.293 a1 1 0 0 1-1.414-1.414l5.293 -5.293z')
					]))
			]));
};
var $elm$browser$Debugger$Main$SliderJump = function (a) {
	return {$: 'SliderJump', a: a};
};
var $elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var $elm$html$Html$input = _VirtualDom_node('input');
var $elm$browser$Debugger$Main$isPlaying = function (maybeIndex) {
	if (maybeIndex.$ === 'Nothing') {
		return true;
	} else {
		return false;
	}
};
var $elm$html$Html$Attributes$max = $elm$html$Html$Attributes$stringProperty('max');
var $elm$html$Html$Attributes$min = $elm$html$Html$Attributes$stringProperty('min');
var $elm$html$Html$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var $elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 'MayStopPropagation', a: a};
};
var $elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var $elm$json$Json$Decode$string = _Json_decodeString;
var $elm$html$Html$Events$targetValue = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	$elm$json$Json$Decode$string);
var $elm$html$Html$Events$onInput = function (tagger) {
	return A2(
		$elm$html$Html$Events$stopPropagationOn,
		'input',
		A2(
			$elm$json$Json$Decode$map,
			$elm$html$Html$Events$alwaysStop,
			A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetValue)));
};
var $elm$core$String$toInt = _String_toInt;
var $elm$html$Html$Attributes$type_ = $elm$html$Html$Attributes$stringProperty('type');
var $elm$html$Html$Attributes$value = $elm$html$Html$Attributes$stringProperty('value');
var $elm$browser$Debugger$Main$viewPlayButton = function (playing) {
	return A2(
		$elm$html$Html$button,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'background', '#1293D8'),
				A2($elm$html$Html$Attributes$style, 'border', 'none'),
				A2($elm$html$Html$Attributes$style, 'color', 'white'),
				A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
				A2($elm$html$Html$Attributes$style, 'width', '36px'),
				A2($elm$html$Html$Attributes$style, 'height', '36px'),
				$elm$html$Html$Events$onClick($elm$browser$Debugger$Main$Resume)
			]),
		_List_fromArray(
			[
				playing ? $elm$browser$Debugger$Main$icon('M2 2h4v12h-4v-12z M10 2h4v12h-4v-12z') : $elm$browser$Debugger$Main$icon('M2 2l12 7l-12 7z')
			]));
};
var $elm$browser$Debugger$Main$viewHistorySlider = F2(
	function (history, maybeIndex) {
		var lastIndex = $elm$browser$Debugger$History$size(history) - 1;
		var selectedIndex = A2($elm$core$Maybe$withDefault, lastIndex, maybeIndex);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
					A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'height', '36px'),
					A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$Lazy$lazy,
					$elm$browser$Debugger$Main$viewPlayButton,
					$elm$browser$Debugger$Main$isPlaying(maybeIndex)),
					A2(
					$elm$html$Html$input,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$type_('range'),
							A2($elm$html$Html$Attributes$style, 'width', 'calc(100% - 56px)'),
							A2($elm$html$Html$Attributes$style, 'height', '36px'),
							A2($elm$html$Html$Attributes$style, 'margin', '0 10px'),
							$elm$html$Html$Attributes$min('0'),
							$elm$html$Html$Attributes$max(
							$elm$core$String$fromInt(lastIndex)),
							$elm$html$Html$Attributes$value(
							$elm$core$String$fromInt(selectedIndex)),
							$elm$html$Html$Events$onInput(
							A2(
								$elm$core$Basics$composeR,
								$elm$core$String$toInt,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$Maybe$withDefault(lastIndex),
									$elm$browser$Debugger$Main$SliderJump)))
						]),
					_List_Nil)
				]));
	});
var $elm$browser$Debugger$Main$viewHistory = F3(
	function (maybeIndex, history, layout) {
		var block = $elm$browser$Debugger$Main$toMouseBlocker(layout);
		var _v0 = $elm$browser$Debugger$Main$toHistoryPercents(layout);
		var w = _v0.a;
		var h = _v0.b;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'width', w),
					A2($elm$html$Html$Attributes$style, 'height', h),
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'flex-direction', 'column'),
					A2($elm$html$Html$Attributes$style, 'color', '#DDDDDD'),
					A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(61, 61, 61)'),
					A2($elm$html$Html$Attributes$style, 'pointer-events', block),
					A2($elm$html$Html$Attributes$style, 'user-select', block)
				]),
			_List_fromArray(
				[
					A2($elm$browser$Debugger$Main$viewHistorySlider, history, maybeIndex),
					A2(
					$elm$html$Html$map,
					$elm$browser$Debugger$Main$Jump,
					A2($elm$browser$Debugger$History$view, maybeIndex, history)),
					A2($elm$html$Html$Lazy$lazy, $elm$browser$Debugger$Main$viewHistoryOptions, layout)
				]));
	});
var $elm$browser$Debugger$Main$popoutView = function (model) {
	var maybeIndex = function () {
		var _v0 = model.state;
		if (_v0.$ === 'Running') {
			return $elm$core$Maybe$Nothing;
		} else {
			var index = _v0.a;
			return $elm$core$Maybe$Just(index);
		}
	}();
	var historyToRender = $elm$browser$Debugger$Main$cachedHistory(model);
	return A3(
		$elm$html$Html$node,
		'body',
		_Utils_ap(
			$elm$browser$Debugger$Main$toDragListeners(model.layout),
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'margin', '0'),
					A2($elm$html$Html$Attributes$style, 'padding', '0'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'height', '100%'),
					A2($elm$html$Html$Attributes$style, 'font-family', 'monospace'),
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2(
					$elm$html$Html$Attributes$style,
					'flex-direction',
					$elm$browser$Debugger$Main$toFlexDirection(model.layout))
				])),
		_List_fromArray(
			[
				A3($elm$browser$Debugger$Main$viewHistory, maybeIndex, historyToRender, model.layout),
				$elm$browser$Debugger$Main$viewDragZone(model.layout),
				A3($elm$browser$Debugger$Main$viewExpando, model.expandoMsg, model.expandoModel, model.layout)
			]));
};
var $elm$browser$Debugger$Overlay$BlockAll = {$: 'BlockAll'};
var $elm$browser$Debugger$Overlay$toBlockerType = F2(
	function (isPaused, state) {
		switch (state.$) {
			case 'None':
				return isPaused ? $elm$browser$Debugger$Overlay$BlockAll : $elm$browser$Debugger$Overlay$BlockNone;
			case 'BadMetadata':
				return $elm$browser$Debugger$Overlay$BlockMost;
			case 'BadImport':
				return $elm$browser$Debugger$Overlay$BlockMost;
			default:
				return $elm$browser$Debugger$Overlay$BlockMost;
		}
	});
var $elm$browser$Debugger$Main$toBlockerType = function (model) {
	return A2(
		$elm$browser$Debugger$Overlay$toBlockerType,
		$elm$browser$Debugger$Main$isPaused(model.state),
		model.overlay);
};
var $elm$browser$Debugger$Main$Horizontal = F3(
	function (a, b, c) {
		return {$: 'Horizontal', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Main$Running = function (a) {
	return {$: 'Running', a: a};
};
var $elm$browser$Debugger$Main$Static = {$: 'Static'};
var $elm$browser$Debugger$Metadata$Error = F2(
	function (message, problems) {
		return {message: message, problems: problems};
	});
var $elm$json$Json$Decode$decodeValue = _Json_run;
var $elm$browser$Debugger$Metadata$Metadata = F2(
	function (versions, types) {
		return {types: types, versions: versions};
	});
var $elm$browser$Debugger$Metadata$Types = F3(
	function (message, aliases, unions) {
		return {aliases: aliases, message: message, unions: unions};
	});
var $elm$browser$Debugger$Metadata$Alias = F2(
	function (args, tipe) {
		return {args: args, tipe: tipe};
	});
var $elm$json$Json$Decode$list = _Json_decodeList;
var $elm$browser$Debugger$Metadata$decodeAlias = A3(
	$elm$json$Json$Decode$map2,
	$elm$browser$Debugger$Metadata$Alias,
	A2(
		$elm$json$Json$Decode$field,
		'args',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	A2($elm$json$Json$Decode$field, 'type', $elm$json$Json$Decode$string));
var $elm$browser$Debugger$Metadata$Union = F2(
	function (args, tags) {
		return {args: args, tags: tags};
	});
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
var $elm$json$Json$Decode$dict = function (decoder) {
	return A2(
		$elm$json$Json$Decode$map,
		$elm$core$Dict$fromList,
		$elm$json$Json$Decode$keyValuePairs(decoder));
};
var $elm$browser$Debugger$Metadata$decodeUnion = A3(
	$elm$json$Json$Decode$map2,
	$elm$browser$Debugger$Metadata$Union,
	A2(
		$elm$json$Json$Decode$field,
		'args',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	A2(
		$elm$json$Json$Decode$field,
		'tags',
		$elm$json$Json$Decode$dict(
			$elm$json$Json$Decode$list($elm$json$Json$Decode$string))));
var $elm$json$Json$Decode$map3 = _Json_map3;
var $elm$browser$Debugger$Metadata$decodeTypes = A4(
	$elm$json$Json$Decode$map3,
	$elm$browser$Debugger$Metadata$Types,
	A2($elm$json$Json$Decode$field, 'message', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'aliases',
		$elm$json$Json$Decode$dict($elm$browser$Debugger$Metadata$decodeAlias)),
	A2(
		$elm$json$Json$Decode$field,
		'unions',
		$elm$json$Json$Decode$dict($elm$browser$Debugger$Metadata$decodeUnion)));
var $elm$browser$Debugger$Metadata$Versions = function (elm) {
	return {elm: elm};
};
var $elm$browser$Debugger$Metadata$decodeVersions = A2(
	$elm$json$Json$Decode$map,
	$elm$browser$Debugger$Metadata$Versions,
	A2($elm$json$Json$Decode$field, 'elm', $elm$json$Json$Decode$string));
var $elm$browser$Debugger$Metadata$decoder = A3(
	$elm$json$Json$Decode$map2,
	$elm$browser$Debugger$Metadata$Metadata,
	A2($elm$json$Json$Decode$field, 'versions', $elm$browser$Debugger$Metadata$decodeVersions),
	A2($elm$json$Json$Decode$field, 'types', $elm$browser$Debugger$Metadata$decodeTypes));
var $elm$browser$Debugger$Metadata$ProblemType = F2(
	function (name, problems) {
		return {name: name, problems: problems};
	});
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (_v0.$ === 'Just') {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $elm$core$String$contains = _String_contains;
var $elm$browser$Debugger$Metadata$hasProblem = F2(
	function (tipe, _v0) {
		var problem = _v0.a;
		var token = _v0.b;
		return A2($elm$core$String$contains, token, tipe) ? $elm$core$Maybe$Just(problem) : $elm$core$Maybe$Nothing;
	});
var $elm$browser$Debugger$Metadata$Decoder = {$: 'Decoder'};
var $elm$browser$Debugger$Metadata$Function = {$: 'Function'};
var $elm$browser$Debugger$Metadata$Process = {$: 'Process'};
var $elm$browser$Debugger$Metadata$Program = {$: 'Program'};
var $elm$browser$Debugger$Metadata$Request = {$: 'Request'};
var $elm$browser$Debugger$Metadata$Socket = {$: 'Socket'};
var $elm$browser$Debugger$Metadata$Task = {$: 'Task'};
var $elm$browser$Debugger$Metadata$VirtualDom = {$: 'VirtualDom'};
var $elm$browser$Debugger$Metadata$problemTable = _List_fromArray(
	[
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Function, '->'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Decoder, 'Json.Decode.Decoder'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Task, 'Task.Task'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Process, 'Process.Id'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Socket, 'WebSocket.LowLevel.WebSocket'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Request, 'Http.Request'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Program, 'Platform.Program'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$VirtualDom, 'VirtualDom.Node'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$VirtualDom, 'VirtualDom.Attribute')
	]);
var $elm$browser$Debugger$Metadata$findProblems = function (tipe) {
	return A2(
		$elm$core$List$filterMap,
		$elm$browser$Debugger$Metadata$hasProblem(tipe),
		$elm$browser$Debugger$Metadata$problemTable);
};
var $elm$browser$Debugger$Metadata$collectBadAliases = F3(
	function (name, _v0, list) {
		var tipe = _v0.tipe;
		var _v1 = $elm$browser$Debugger$Metadata$findProblems(tipe);
		if (!_v1.b) {
			return list;
		} else {
			var problems = _v1;
			return A2(
				$elm$core$List$cons,
				A2($elm$browser$Debugger$Metadata$ProblemType, name, problems),
				list);
		}
	});
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $elm$core$Dict$values = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return A2($elm$core$List$cons, value, valueList);
			}),
		_List_Nil,
		dict);
};
var $elm$browser$Debugger$Metadata$collectBadUnions = F3(
	function (name, _v0, list) {
		var tags = _v0.tags;
		var _v1 = A2(
			$elm$core$List$concatMap,
			$elm$browser$Debugger$Metadata$findProblems,
			$elm$core$List$concat(
				$elm$core$Dict$values(tags)));
		if (!_v1.b) {
			return list;
		} else {
			var problems = _v1;
			return A2(
				$elm$core$List$cons,
				A2($elm$browser$Debugger$Metadata$ProblemType, name, problems),
				list);
		}
	});
var $elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $elm$browser$Debugger$Metadata$isPortable = function (_v0) {
	var types = _v0.types;
	var badAliases = A3($elm$core$Dict$foldl, $elm$browser$Debugger$Metadata$collectBadAliases, _List_Nil, types.aliases);
	var _v1 = A3($elm$core$Dict$foldl, $elm$browser$Debugger$Metadata$collectBadUnions, badAliases, types.unions);
	if (!_v1.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var problems = _v1;
		return $elm$core$Maybe$Just(
			A2($elm$browser$Debugger$Metadata$Error, types.message, problems));
	}
};
var $elm$browser$Debugger$Metadata$decode = function (value) {
	var _v0 = A2($elm$json$Json$Decode$decodeValue, $elm$browser$Debugger$Metadata$decoder, value);
	if (_v0.$ === 'Err') {
		return $elm$core$Result$Err(
			A2($elm$browser$Debugger$Metadata$Error, 'The compiler is generating bad metadata. This is a compiler bug!', _List_Nil));
	} else {
		var metadata = _v0.a;
		var _v1 = $elm$browser$Debugger$Metadata$isPortable(metadata);
		if (_v1.$ === 'Nothing') {
			return $elm$core$Result$Ok(metadata);
		} else {
			var error = _v1.a;
			return $elm$core$Result$Err(error);
		}
	}
};
var $elm$browser$Debugger$History$History = F3(
	function (snapshots, recent, numMessages) {
		return {numMessages: numMessages, recent: recent, snapshots: snapshots};
	});
var $elm$browser$Debugger$History$RecentHistory = F3(
	function (model, messages, numMessages) {
		return {messages: messages, model: model, numMessages: numMessages};
	});
var $elm$browser$Debugger$History$empty = function (model) {
	return A3(
		$elm$browser$Debugger$History$History,
		$elm$core$Array$empty,
		A3($elm$browser$Debugger$History$RecentHistory, model, _List_Nil, 0),
		0);
};
var $elm$core$Dict$map = F2(
	function (func, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				A2(func, key, value),
				A2($elm$core$Dict$map, func, left),
				A2($elm$core$Dict$map, func, right));
		}
	});
var $elm$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var left = dict.d;
				var right = dict.e;
				var $temp$n = A2($elm$core$Dict$sizeHelp, n + 1, right),
					$temp$dict = left;
				n = $temp$n;
				dict = $temp$dict;
				continue sizeHelp;
			}
		}
	});
var $elm$core$Dict$size = function (dict) {
	return A2($elm$core$Dict$sizeHelp, 0, dict);
};
var $elm$browser$Debugger$Expando$initHelp = F2(
	function (isOuter, expando) {
		switch (expando.$) {
			case 'S':
				return expando;
			case 'Primitive':
				return expando;
			case 'Sequence':
				var seqType = expando.a;
				var isClosed = expando.b;
				var items = expando.c;
				return isOuter ? A3(
					$elm$browser$Debugger$Expando$Sequence,
					seqType,
					false,
					A2(
						$elm$core$List$map,
						$elm$browser$Debugger$Expando$initHelp(false),
						items)) : (($elm$core$List$length(items) <= 8) ? A3($elm$browser$Debugger$Expando$Sequence, seqType, false, items) : expando);
			case 'Dictionary':
				var isClosed = expando.a;
				var keyValuePairs = expando.b;
				return isOuter ? A2(
					$elm$browser$Debugger$Expando$Dictionary,
					false,
					A2(
						$elm$core$List$map,
						function (_v1) {
							var k = _v1.a;
							var v = _v1.b;
							return _Utils_Tuple2(
								k,
								A2($elm$browser$Debugger$Expando$initHelp, false, v));
						},
						keyValuePairs)) : (($elm$core$List$length(keyValuePairs) <= 8) ? A2($elm$browser$Debugger$Expando$Dictionary, false, keyValuePairs) : expando);
			case 'Record':
				var isClosed = expando.a;
				var entries = expando.b;
				return isOuter ? A2(
					$elm$browser$Debugger$Expando$Record,
					false,
					A2(
						$elm$core$Dict$map,
						F2(
							function (_v2, v) {
								return A2($elm$browser$Debugger$Expando$initHelp, false, v);
							}),
						entries)) : (($elm$core$Dict$size(entries) <= 4) ? A2($elm$browser$Debugger$Expando$Record, false, entries) : expando);
			default:
				var maybeName = expando.a;
				var isClosed = expando.b;
				var args = expando.c;
				return isOuter ? A3(
					$elm$browser$Debugger$Expando$Constructor,
					maybeName,
					false,
					A2(
						$elm$core$List$map,
						$elm$browser$Debugger$Expando$initHelp(false),
						args)) : (($elm$core$List$length(args) <= 4) ? A3($elm$browser$Debugger$Expando$Constructor, maybeName, false, args) : expando);
		}
	});
var $elm$browser$Debugger$Expando$init = function (value) {
	return A2(
		$elm$browser$Debugger$Expando$initHelp,
		true,
		_Debugger_init(value));
};
var $elm$core$Platform$Cmd$map = _Platform_map;
var $elm$browser$Debugger$Overlay$None = {$: 'None'};
var $elm$browser$Debugger$Overlay$none = $elm$browser$Debugger$Overlay$None;
var $elm$browser$Debugger$Main$wrapInit = F4(
	function (metadata, popout, init, flags) {
		var _v0 = init(flags);
		var userModel = _v0.a;
		var userCommands = _v0.b;
		return _Utils_Tuple2(
			{
				expandoModel: $elm$browser$Debugger$Expando$init(userModel),
				expandoMsg: $elm$browser$Debugger$Expando$init(_Utils_Tuple0),
				history: $elm$browser$Debugger$History$empty(userModel),
				layout: A3($elm$browser$Debugger$Main$Horizontal, $elm$browser$Debugger$Main$Static, 0.3, 0.5),
				metadata: $elm$browser$Debugger$Metadata$decode(metadata),
				overlay: $elm$browser$Debugger$Overlay$none,
				popout: popout,
				state: $elm$browser$Debugger$Main$Running(userModel)
			},
			A2($elm$core$Platform$Cmd$map, $elm$browser$Debugger$Main$UserMsg, userCommands));
	});
var $elm$browser$Debugger$Main$getLatestModel = function (state) {
	if (state.$ === 'Running') {
		var model = state.a;
		return model;
	} else {
		var model = state.c;
		return model;
	}
};
var $elm$core$Platform$Sub$map = _Platform_map;
var $elm$browser$Debugger$Main$wrapSubs = F2(
	function (subscriptions, model) {
		return A2(
			$elm$core$Platform$Sub$map,
			$elm$browser$Debugger$Main$UserMsg,
			subscriptions(
				$elm$browser$Debugger$Main$getLatestModel(model.state)));
	});
var $elm$browser$Debugger$Main$Moving = {$: 'Moving'};
var $elm$browser$Debugger$Main$Paused = F5(
	function (a, b, c, d, e) {
		return {$: 'Paused', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$browser$Debugger$History$Snapshot = F2(
	function (model, messages) {
		return {messages: messages, model: model};
	});
var $elm$browser$Debugger$History$addRecent = F3(
	function (msg, newModel, _v0) {
		var model = _v0.model;
		var messages = _v0.messages;
		var numMessages = _v0.numMessages;
		return _Utils_eq(numMessages, $elm$browser$Debugger$History$maxSnapshotSize) ? _Utils_Tuple2(
			$elm$core$Maybe$Just(
				A2(
					$elm$browser$Debugger$History$Snapshot,
					model,
					$elm$core$Array$fromList(messages))),
			A3(
				$elm$browser$Debugger$History$RecentHistory,
				newModel,
				_List_fromArray(
					[msg]),
				1)) : _Utils_Tuple2(
			$elm$core$Maybe$Nothing,
			A3(
				$elm$browser$Debugger$History$RecentHistory,
				model,
				A2($elm$core$List$cons, msg, messages),
				numMessages + 1));
	});
var $elm$core$Elm$JsArray$push = _JsArray_push;
var $elm$core$Elm$JsArray$singleton = _JsArray_singleton;
var $elm$core$Array$insertTailInTree = F4(
	function (shift, index, tail, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		if (_Utils_cmp(
			pos,
			$elm$core$Elm$JsArray$length(tree)) > -1) {
			if (shift === 5) {
				return A2(
					$elm$core$Elm$JsArray$push,
					$elm$core$Array$Leaf(tail),
					tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, $elm$core$Elm$JsArray$empty));
				return A2($elm$core$Elm$JsArray$push, newSub, tree);
			}
		} else {
			var value = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (value.$ === 'SubTree') {
				var subTree = value.a;
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, subTree));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4(
						$elm$core$Array$insertTailInTree,
						shift - $elm$core$Array$shiftStep,
						index,
						tail,
						$elm$core$Elm$JsArray$singleton(value)));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			}
		}
	});
var $elm$core$Array$unsafeReplaceTail = F2(
	function (newTail, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		var originalTailLen = $elm$core$Elm$JsArray$length(tail);
		var newTailLen = $elm$core$Elm$JsArray$length(newTail);
		var newArrayLen = len + (newTailLen - originalTailLen);
		if (_Utils_eq(newTailLen, $elm$core$Array$branchFactor)) {
			var overflow = _Utils_cmp(newArrayLen >>> $elm$core$Array$shiftStep, 1 << startShift) > 0;
			if (overflow) {
				var newShift = startShift + $elm$core$Array$shiftStep;
				var newTree = A4(
					$elm$core$Array$insertTailInTree,
					newShift,
					len,
					newTail,
					$elm$core$Elm$JsArray$singleton(
						$elm$core$Array$SubTree(tree)));
				return A4($elm$core$Array$Array_elm_builtin, newArrayLen, newShift, newTree, $elm$core$Elm$JsArray$empty);
			} else {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					newArrayLen,
					startShift,
					A4($elm$core$Array$insertTailInTree, startShift, len, newTail, tree),
					$elm$core$Elm$JsArray$empty);
			}
		} else {
			return A4($elm$core$Array$Array_elm_builtin, newArrayLen, startShift, tree, newTail);
		}
	});
var $elm$core$Array$push = F2(
	function (a, array) {
		var tail = array.d;
		return A2(
			$elm$core$Array$unsafeReplaceTail,
			A2($elm$core$Elm$JsArray$push, a, tail),
			array);
	});
var $elm$browser$Debugger$History$add = F3(
	function (msg, model, _v0) {
		var snapshots = _v0.snapshots;
		var recent = _v0.recent;
		var numMessages = _v0.numMessages;
		var _v1 = A3($elm$browser$Debugger$History$addRecent, msg, model, recent);
		if (_v1.a.$ === 'Just') {
			var snapshot = _v1.a.a;
			var newRecent = _v1.b;
			return A3(
				$elm$browser$Debugger$History$History,
				A2($elm$core$Array$push, snapshot, snapshots),
				newRecent,
				numMessages + 1);
		} else {
			var _v2 = _v1.a;
			var newRecent = _v1.b;
			return A3($elm$browser$Debugger$History$History, snapshots, newRecent, numMessages + 1);
		}
	});
var $elm$core$Basics$always = F2(
	function (a, _v0) {
		return a;
	});
var $elm$browser$Debugger$Overlay$BadImport = function (a) {
	return {$: 'BadImport', a: a};
};
var $elm$browser$Debugger$Overlay$RiskyImport = F2(
	function (a, b) {
		return {$: 'RiskyImport', a: a, b: b};
	});
var $elm$browser$Debugger$Report$VersionChanged = F2(
	function (a, b) {
		return {$: 'VersionChanged', a: a, b: b};
	});
var $elm$browser$Debugger$Report$MessageChanged = F2(
	function (a, b) {
		return {$: 'MessageChanged', a: a, b: b};
	});
var $elm$browser$Debugger$Report$SomethingChanged = function (a) {
	return {$: 'SomethingChanged', a: a};
};
var $elm$browser$Debugger$Report$AliasChange = function (a) {
	return {$: 'AliasChange', a: a};
};
var $elm$browser$Debugger$Metadata$checkAlias = F4(
	function (name, old, _new, changes) {
		return (_Utils_eq(old.tipe, _new.tipe) && _Utils_eq(old.args, _new.args)) ? changes : A2(
			$elm$core$List$cons,
			$elm$browser$Debugger$Report$AliasChange(name),
			changes);
	});
var $elm$browser$Debugger$Report$UnionChange = F2(
	function (a, b) {
		return {$: 'UnionChange', a: a, b: b};
	});
var $elm$browser$Debugger$Metadata$addTag = F3(
	function (tag, _v0, changes) {
		return _Utils_update(
			changes,
			{
				added: A2($elm$core$List$cons, tag, changes.added)
			});
	});
var $elm$browser$Debugger$Metadata$checkTag = F4(
	function (tag, old, _new, changes) {
		return _Utils_eq(old, _new) ? changes : _Utils_update(
			changes,
			{
				changed: A2($elm$core$List$cons, tag, changes.changed)
			});
	});
var $elm$browser$Debugger$Report$TagChanges = F4(
	function (removed, changed, added, argsMatch) {
		return {added: added, argsMatch: argsMatch, changed: changed, removed: removed};
	});
var $elm$browser$Debugger$Report$emptyTagChanges = function (argsMatch) {
	return A4($elm$browser$Debugger$Report$TagChanges, _List_Nil, _List_Nil, _List_Nil, argsMatch);
};
var $elm$browser$Debugger$Report$hasTagChanges = function (tagChanges) {
	return _Utils_eq(
		tagChanges,
		A4($elm$browser$Debugger$Report$TagChanges, _List_Nil, _List_Nil, _List_Nil, true));
};
var $elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _v0) {
				stepState:
				while (true) {
					var list = _v0.a;
					var result = _v0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _v2 = list.a;
						var lKey = _v2.a;
						var lValue = _v2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_v0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_v0 = $temp$_v0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _v3 = A3(
			$elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				$elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v3.a;
		var intermediateResult = _v3.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, result) {
					var k = _v4.a;
					var v = _v4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $elm$browser$Debugger$Metadata$removeTag = F3(
	function (tag, _v0, changes) {
		return _Utils_update(
			changes,
			{
				removed: A2($elm$core$List$cons, tag, changes.removed)
			});
	});
var $elm$browser$Debugger$Metadata$checkUnion = F4(
	function (name, old, _new, changes) {
		var tagChanges = A6(
			$elm$core$Dict$merge,
			$elm$browser$Debugger$Metadata$removeTag,
			$elm$browser$Debugger$Metadata$checkTag,
			$elm$browser$Debugger$Metadata$addTag,
			old.tags,
			_new.tags,
			$elm$browser$Debugger$Report$emptyTagChanges(
				_Utils_eq(old.args, _new.args)));
		return $elm$browser$Debugger$Report$hasTagChanges(tagChanges) ? changes : A2(
			$elm$core$List$cons,
			A2($elm$browser$Debugger$Report$UnionChange, name, tagChanges),
			changes);
	});
var $elm$browser$Debugger$Metadata$ignore = F3(
	function (key, value, report) {
		return report;
	});
var $elm$browser$Debugger$Metadata$checkTypes = F2(
	function (old, _new) {
		return (!_Utils_eq(old.message, _new.message)) ? A2($elm$browser$Debugger$Report$MessageChanged, old.message, _new.message) : $elm$browser$Debugger$Report$SomethingChanged(
			A6(
				$elm$core$Dict$merge,
				$elm$browser$Debugger$Metadata$ignore,
				$elm$browser$Debugger$Metadata$checkUnion,
				$elm$browser$Debugger$Metadata$ignore,
				old.unions,
				_new.unions,
				A6($elm$core$Dict$merge, $elm$browser$Debugger$Metadata$ignore, $elm$browser$Debugger$Metadata$checkAlias, $elm$browser$Debugger$Metadata$ignore, old.aliases, _new.aliases, _List_Nil)));
	});
var $elm$browser$Debugger$Metadata$check = F2(
	function (old, _new) {
		return (!_Utils_eq(old.versions.elm, _new.versions.elm)) ? A2($elm$browser$Debugger$Report$VersionChanged, old.versions.elm, _new.versions.elm) : A2($elm$browser$Debugger$Metadata$checkTypes, old.types, _new.types);
	});
var $elm$browser$Debugger$Report$CorruptHistory = {$: 'CorruptHistory'};
var $elm$browser$Debugger$Overlay$corruptImport = $elm$browser$Debugger$Overlay$BadImport($elm$browser$Debugger$Report$CorruptHistory);
var $elm$json$Json$Decode$decodeString = _Json_runOnString;
var $elm$browser$Debugger$Report$Fine = {$: 'Fine'};
var $elm$browser$Debugger$Report$Impossible = {$: 'Impossible'};
var $elm$browser$Debugger$Report$Risky = {$: 'Risky'};
var $elm$core$Basics$not = _Basics_not;
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $elm$browser$Debugger$Report$some = function (list) {
	return !$elm$core$List$isEmpty(list);
};
var $elm$browser$Debugger$Report$evaluateChange = function (change) {
	if (change.$ === 'AliasChange') {
		return $elm$browser$Debugger$Report$Impossible;
	} else {
		var removed = change.b.removed;
		var changed = change.b.changed;
		var added = change.b.added;
		var argsMatch = change.b.argsMatch;
		return ((!argsMatch) || ($elm$browser$Debugger$Report$some(changed) || $elm$browser$Debugger$Report$some(removed))) ? $elm$browser$Debugger$Report$Impossible : ($elm$browser$Debugger$Report$some(added) ? $elm$browser$Debugger$Report$Risky : $elm$browser$Debugger$Report$Fine);
	}
};
var $elm$browser$Debugger$Report$worstCase = F2(
	function (status, statusList) {
		worstCase:
		while (true) {
			if (!statusList.b) {
				return status;
			} else {
				switch (statusList.a.$) {
					case 'Impossible':
						var _v1 = statusList.a;
						return $elm$browser$Debugger$Report$Impossible;
					case 'Risky':
						var _v2 = statusList.a;
						var rest = statusList.b;
						var $temp$status = $elm$browser$Debugger$Report$Risky,
							$temp$statusList = rest;
						status = $temp$status;
						statusList = $temp$statusList;
						continue worstCase;
					default:
						var _v3 = statusList.a;
						var rest = statusList.b;
						var $temp$status = status,
							$temp$statusList = rest;
						status = $temp$status;
						statusList = $temp$statusList;
						continue worstCase;
				}
			}
		}
	});
var $elm$browser$Debugger$Report$evaluate = function (report) {
	switch (report.$) {
		case 'CorruptHistory':
			return $elm$browser$Debugger$Report$Impossible;
		case 'VersionChanged':
			return $elm$browser$Debugger$Report$Impossible;
		case 'MessageChanged':
			return $elm$browser$Debugger$Report$Impossible;
		default:
			var changes = report.a;
			return A2(
				$elm$browser$Debugger$Report$worstCase,
				$elm$browser$Debugger$Report$Fine,
				A2($elm$core$List$map, $elm$browser$Debugger$Report$evaluateChange, changes));
	}
};
var $elm$json$Json$Decode$value = _Json_decodeValue;
var $elm$browser$Debugger$Overlay$uploadDecoder = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (x, y) {
			return _Utils_Tuple2(x, y);
		}),
	A2($elm$json$Json$Decode$field, 'metadata', $elm$browser$Debugger$Metadata$decoder),
	A2($elm$json$Json$Decode$field, 'history', $elm$json$Json$Decode$value));
var $elm$browser$Debugger$Overlay$assessImport = F2(
	function (metadata, jsonString) {
		var _v0 = A2($elm$json$Json$Decode$decodeString, $elm$browser$Debugger$Overlay$uploadDecoder, jsonString);
		if (_v0.$ === 'Err') {
			return $elm$core$Result$Err($elm$browser$Debugger$Overlay$corruptImport);
		} else {
			var _v1 = _v0.a;
			var foreignMetadata = _v1.a;
			var rawHistory = _v1.b;
			var report = A2($elm$browser$Debugger$Metadata$check, foreignMetadata, metadata);
			var _v2 = $elm$browser$Debugger$Report$evaluate(report);
			switch (_v2.$) {
				case 'Impossible':
					return $elm$core$Result$Err(
						$elm$browser$Debugger$Overlay$BadImport(report));
				case 'Risky':
					return $elm$core$Result$Err(
						A2($elm$browser$Debugger$Overlay$RiskyImport, report, rawHistory));
				default:
					return $elm$core$Result$Ok(rawHistory);
			}
		}
	});
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $elm$browser$Debugger$Overlay$close = F2(
	function (msg, state) {
		switch (state.$) {
			case 'None':
				return $elm$core$Maybe$Nothing;
			case 'BadMetadata':
				return $elm$core$Maybe$Nothing;
			case 'BadImport':
				return $elm$core$Maybe$Nothing;
			default:
				var rawHistory = state.b;
				if (msg.$ === 'Cancel') {
					return $elm$core$Maybe$Nothing;
				} else {
					return $elm$core$Maybe$Just(rawHistory);
				}
		}
	});
var $elm$browser$Debugger$History$elmToJs = A2($elm$core$Basics$composeR, _Json_wrap, _Debugger_unsafeCoerce);
var $elm$browser$Debugger$History$encodeHelp = F2(
	function (snapshot, allMessages) {
		return A3($elm$core$Array$foldl, $elm$core$List$cons, allMessages, snapshot.messages);
	});
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var $elm$browser$Debugger$History$encode = function (_v0) {
	var snapshots = _v0.snapshots;
	var recent = _v0.recent;
	return A2(
		$elm$json$Json$Encode$list,
		$elm$browser$Debugger$History$elmToJs,
		A3(
			$elm$core$Array$foldr,
			$elm$browser$Debugger$History$encodeHelp,
			$elm$core$List$reverse(recent.messages),
			snapshots));
};
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(_Utils_Tuple0),
			pairs));
};
var $elm$browser$Debugger$Metadata$encodeAlias = function (_v0) {
	var args = _v0.args;
	var tipe = _v0.tipe;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'args',
				A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, args)),
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string(tipe))
			]));
};
var $elm$browser$Debugger$Metadata$encodeDict = F2(
	function (f, dict) {
		return $elm$json$Json$Encode$object(
			$elm$core$Dict$toList(
				A2(
					$elm$core$Dict$map,
					F2(
						function (key, value) {
							return f(value);
						}),
					dict)));
	});
var $elm$browser$Debugger$Metadata$encodeUnion = function (_v0) {
	var args = _v0.args;
	var tags = _v0.tags;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'args',
				A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, args)),
				_Utils_Tuple2(
				'tags',
				A2(
					$elm$browser$Debugger$Metadata$encodeDict,
					$elm$json$Json$Encode$list($elm$json$Json$Encode$string),
					tags))
			]));
};
var $elm$browser$Debugger$Metadata$encodeTypes = function (_v0) {
	var message = _v0.message;
	var unions = _v0.unions;
	var aliases = _v0.aliases;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'message',
				$elm$json$Json$Encode$string(message)),
				_Utils_Tuple2(
				'aliases',
				A2($elm$browser$Debugger$Metadata$encodeDict, $elm$browser$Debugger$Metadata$encodeAlias, aliases)),
				_Utils_Tuple2(
				'unions',
				A2($elm$browser$Debugger$Metadata$encodeDict, $elm$browser$Debugger$Metadata$encodeUnion, unions))
			]));
};
var $elm$browser$Debugger$Metadata$encodeVersions = function (_v0) {
	var elm = _v0.elm;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'elm',
				$elm$json$Json$Encode$string(elm))
			]));
};
var $elm$browser$Debugger$Metadata$encode = function (_v0) {
	var versions = _v0.versions;
	var types = _v0.types;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'versions',
				$elm$browser$Debugger$Metadata$encodeVersions(versions)),
				_Utils_Tuple2(
				'types',
				$elm$browser$Debugger$Metadata$encodeTypes(types))
			]));
};
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $elm$core$Task$Perform = function (a) {
	return {$: 'Perform', a: a};
};
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(_Utils_Tuple0);
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0.a;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return _Utils_Tuple0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(_Utils_Tuple0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0.a;
		return $elm$core$Task$Perform(
			A2($elm$core$Task$map, tagger, task));
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2($elm$core$Task$map, toMessage, task)));
	});
var $elm$browser$Debugger$Main$download = F2(
	function (metadata, history) {
		var historyLength = $elm$browser$Debugger$History$size(history);
		return A2(
			$elm$core$Task$perform,
			function (_v0) {
				return $elm$browser$Debugger$Main$NoOp;
			},
			A2(
				_Debugger_download,
				historyLength,
				_Json_unwrap(
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'metadata',
								$elm$browser$Debugger$Metadata$encode(metadata)),
								_Utils_Tuple2(
								'history',
								$elm$browser$Debugger$History$encode(history))
							])))));
	});
var $elm$browser$Debugger$Main$Vertical = F3(
	function (a, b, c) {
		return {$: 'Vertical', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Main$drag = F2(
	function (info, layout) {
		if (layout.$ === 'Horizontal') {
			var status = layout.a;
			var y = layout.c;
			return A3($elm$browser$Debugger$Main$Horizontal, status, info.x / info.width, y);
		} else {
			var status = layout.a;
			var x = layout.b;
			return A3($elm$browser$Debugger$Main$Vertical, status, x, info.y / info.height);
		}
	});
var $elm$browser$Debugger$History$Stepping = F2(
	function (a, b) {
		return {$: 'Stepping', a: a, b: b};
	});
var $elm$browser$Debugger$History$Done = F2(
	function (a, b) {
		return {$: 'Done', a: a, b: b};
	});
var $elm$browser$Debugger$History$getHelp = F3(
	function (update, msg, getResult) {
		if (getResult.$ === 'Done') {
			return getResult;
		} else {
			var n = getResult.a;
			var model = getResult.b;
			return (!n) ? A2(
				$elm$browser$Debugger$History$Done,
				msg,
				A2(update, msg, model).a) : A2(
				$elm$browser$Debugger$History$Stepping,
				n - 1,
				A2(update, msg, model).a);
		}
	});
var $elm$browser$Debugger$History$undone = function (getResult) {
	undone:
	while (true) {
		if (getResult.$ === 'Done') {
			var msg = getResult.a;
			var model = getResult.b;
			return _Utils_Tuple2(model, msg);
		} else {
			var $temp$getResult = getResult;
			getResult = $temp$getResult;
			continue undone;
		}
	}
};
var $elm$browser$Debugger$History$get = F3(
	function (update, index, history) {
		get:
		while (true) {
			var recent = history.recent;
			var snapshotMax = history.numMessages - recent.numMessages;
			if (_Utils_cmp(index, snapshotMax) > -1) {
				return $elm$browser$Debugger$History$undone(
					A3(
						$elm$core$List$foldr,
						$elm$browser$Debugger$History$getHelp(update),
						A2($elm$browser$Debugger$History$Stepping, index - snapshotMax, recent.model),
						recent.messages));
			} else {
				var _v0 = A2($elm$core$Array$get, (index / $elm$browser$Debugger$History$maxSnapshotSize) | 0, history.snapshots);
				if (_v0.$ === 'Nothing') {
					var $temp$update = update,
						$temp$index = index,
						$temp$history = history;
					update = $temp$update;
					index = $temp$index;
					history = $temp$history;
					continue get;
				} else {
					var model = _v0.a.model;
					var messages = _v0.a.messages;
					return $elm$browser$Debugger$History$undone(
						A3(
							$elm$core$Array$foldr,
							$elm$browser$Debugger$History$getHelp(update),
							A2($elm$browser$Debugger$History$Stepping, index % $elm$browser$Debugger$History$maxSnapshotSize, model),
							messages));
				}
			}
		}
	});
var $elm$browser$Debugger$History$getRecentMsg = function (history) {
	getRecentMsg:
	while (true) {
		var _v0 = history.recent.messages;
		if (!_v0.b) {
			var $temp$history = history;
			history = $temp$history;
			continue getRecentMsg;
		} else {
			var first = _v0.a;
			return first;
		}
	}
};
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 'EQ':
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$browser$Debugger$Expando$mergeDictHelp = F3(
	function (oldDict, key, value) {
		var _v12 = A2($elm$core$Dict$get, key, oldDict);
		if (_v12.$ === 'Nothing') {
			return value;
		} else {
			var oldValue = _v12.a;
			return A2($elm$browser$Debugger$Expando$mergeHelp, oldValue, value);
		}
	});
var $elm$browser$Debugger$Expando$mergeHelp = F2(
	function (old, _new) {
		var _v3 = _Utils_Tuple2(old, _new);
		_v3$6:
		while (true) {
			switch (_v3.b.$) {
				case 'S':
					return _new;
				case 'Primitive':
					return _new;
				case 'Sequence':
					if (_v3.a.$ === 'Sequence') {
						var _v4 = _v3.a;
						var isClosed = _v4.b;
						var oldValues = _v4.c;
						var _v5 = _v3.b;
						var seqType = _v5.a;
						var newValues = _v5.c;
						return A3(
							$elm$browser$Debugger$Expando$Sequence,
							seqType,
							isClosed,
							A2($elm$browser$Debugger$Expando$mergeListHelp, oldValues, newValues));
					} else {
						break _v3$6;
					}
				case 'Dictionary':
					if (_v3.a.$ === 'Dictionary') {
						var _v6 = _v3.a;
						var isClosed = _v6.a;
						var _v7 = _v3.b;
						var keyValuePairs = _v7.b;
						return A2($elm$browser$Debugger$Expando$Dictionary, isClosed, keyValuePairs);
					} else {
						break _v3$6;
					}
				case 'Record':
					if (_v3.a.$ === 'Record') {
						var _v8 = _v3.a;
						var isClosed = _v8.a;
						var oldDict = _v8.b;
						var _v9 = _v3.b;
						var newDict = _v9.b;
						return A2(
							$elm$browser$Debugger$Expando$Record,
							isClosed,
							A2(
								$elm$core$Dict$map,
								$elm$browser$Debugger$Expando$mergeDictHelp(oldDict),
								newDict));
					} else {
						break _v3$6;
					}
				default:
					if (_v3.a.$ === 'Constructor') {
						var _v10 = _v3.a;
						var isClosed = _v10.b;
						var oldValues = _v10.c;
						var _v11 = _v3.b;
						var maybeName = _v11.a;
						var newValues = _v11.c;
						return A3(
							$elm$browser$Debugger$Expando$Constructor,
							maybeName,
							isClosed,
							A2($elm$browser$Debugger$Expando$mergeListHelp, oldValues, newValues));
					} else {
						break _v3$6;
					}
			}
		}
		return _new;
	});
var $elm$browser$Debugger$Expando$mergeListHelp = F2(
	function (olds, news) {
		var _v0 = _Utils_Tuple2(olds, news);
		if (!_v0.a.b) {
			return news;
		} else {
			if (!_v0.b.b) {
				return news;
			} else {
				var _v1 = _v0.a;
				var x = _v1.a;
				var xs = _v1.b;
				var _v2 = _v0.b;
				var y = _v2.a;
				var ys = _v2.b;
				return A2(
					$elm$core$List$cons,
					A2($elm$browser$Debugger$Expando$mergeHelp, x, y),
					A2($elm$browser$Debugger$Expando$mergeListHelp, xs, ys));
			}
		}
	});
var $elm$browser$Debugger$Expando$merge = F2(
	function (value, expando) {
		return A2(
			$elm$browser$Debugger$Expando$mergeHelp,
			expando,
			_Debugger_init(value));
	});
var $elm$browser$Debugger$Main$jumpUpdate = F3(
	function (update, index, model) {
		var history = $elm$browser$Debugger$Main$cachedHistory(model);
		var currentMsg = $elm$browser$Debugger$History$getRecentMsg(history);
		var currentModel = $elm$browser$Debugger$Main$getLatestModel(model.state);
		var _v0 = A3($elm$browser$Debugger$History$get, update, index, history);
		var indexModel = _v0.a;
		var indexMsg = _v0.b;
		return _Utils_update(
			model,
			{
				expandoModel: A2($elm$browser$Debugger$Expando$merge, indexModel, model.expandoModel),
				expandoMsg: A2($elm$browser$Debugger$Expando$merge, indexMsg, model.expandoMsg),
				state: A5($elm$browser$Debugger$Main$Paused, index, indexModel, currentModel, currentMsg, history)
			});
	});
var $elm$browser$Debugger$History$jsToElm = A2($elm$core$Basics$composeR, _Json_unwrap, _Debugger_unsafeCoerce);
var $elm$browser$Debugger$History$decoder = F2(
	function (initialModel, update) {
		var addMessage = F2(
			function (rawMsg, _v0) {
				var model = _v0.a;
				var history = _v0.b;
				var msg = $elm$browser$Debugger$History$jsToElm(rawMsg);
				return _Utils_Tuple2(
					A2(update, msg, model),
					A3($elm$browser$Debugger$History$add, msg, model, history));
			});
		var updateModel = function (rawMsgs) {
			return A3(
				$elm$core$List$foldl,
				addMessage,
				_Utils_Tuple2(
					initialModel,
					$elm$browser$Debugger$History$empty(initialModel)),
				rawMsgs);
		};
		return A2(
			$elm$json$Json$Decode$map,
			updateModel,
			$elm$json$Json$Decode$list($elm$json$Json$Decode$value));
	});
var $elm$browser$Debugger$History$getInitialModel = function (_v0) {
	var snapshots = _v0.snapshots;
	var recent = _v0.recent;
	var _v1 = A2($elm$core$Array$get, 0, snapshots);
	if (_v1.$ === 'Just') {
		var model = _v1.a.model;
		return model;
	} else {
		return recent.model;
	}
};
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $elm$browser$Debugger$Main$loadNewHistory = F3(
	function (rawHistory, update, model) {
		var pureUserUpdate = F2(
			function (msg, userModel) {
				return A2(update, msg, userModel).a;
			});
		var initialUserModel = $elm$browser$Debugger$History$getInitialModel(model.history);
		var decoder = A2($elm$browser$Debugger$History$decoder, initialUserModel, pureUserUpdate);
		var _v0 = A2($elm$json$Json$Decode$decodeValue, decoder, rawHistory);
		if (_v0.$ === 'Err') {
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{overlay: $elm$browser$Debugger$Overlay$corruptImport}),
				$elm$core$Platform$Cmd$none);
		} else {
			var _v1 = _v0.a;
			var latestUserModel = _v1.a;
			var newHistory = _v1.b;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						expandoModel: $elm$browser$Debugger$Expando$init(latestUserModel),
						expandoMsg: $elm$browser$Debugger$Expando$init(
							$elm$browser$Debugger$History$getRecentMsg(newHistory)),
						history: newHistory,
						overlay: $elm$browser$Debugger$Overlay$none,
						state: $elm$browser$Debugger$Main$Running(latestUserModel)
					}),
				$elm$core$Platform$Cmd$none);
		}
	});
var $elm$browser$Debugger$Main$scroll = function (popout) {
	return A2(
		$elm$core$Task$perform,
		$elm$core$Basics$always($elm$browser$Debugger$Main$NoOp),
		_Debugger_scroll(popout));
};
var $elm$browser$Debugger$Main$scrollTo = F2(
	function (id, popout) {
		return A2(
			$elm$core$Task$perform,
			$elm$core$Basics$always($elm$browser$Debugger$Main$NoOp),
			A2(_Debugger_scrollTo, id, popout));
	});
var $elm$browser$Debugger$Main$setDragStatus = F2(
	function (status, layout) {
		if (layout.$ === 'Horizontal') {
			var x = layout.b;
			var y = layout.c;
			return A3($elm$browser$Debugger$Main$Horizontal, status, x, y);
		} else {
			var x = layout.b;
			var y = layout.c;
			return A3($elm$browser$Debugger$Main$Vertical, status, x, y);
		}
	});
var $elm$browser$Debugger$Main$swapLayout = function (layout) {
	if (layout.$ === 'Horizontal') {
		var s = layout.a;
		var x = layout.b;
		var y = layout.c;
		return A3($elm$browser$Debugger$Main$Vertical, s, x, y);
	} else {
		var s = layout.a;
		var x = layout.b;
		var y = layout.c;
		return A3($elm$browser$Debugger$Main$Horizontal, s, x, y);
	}
};
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.e.d.$ === 'RBNode_elm_builtin') && (dict.e.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.d.d.$ === 'RBNode_elm_builtin') && (dict.d.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Black')) {
					if (right.d.$ === 'RBNode_elm_builtin') {
						if (right.d.a.$ === 'Black') {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor.$ === 'Black') {
			if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === 'RBNode_elm_builtin') {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Black')) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === 'RBNode_elm_builtin') {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBNode_elm_builtin') {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === 'RBNode_elm_builtin') {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (_v0.$ === 'Just') {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $elm$browser$Debugger$Expando$updateIndex = F3(
	function (n, func, list) {
		if (!list.b) {
			return _List_Nil;
		} else {
			var x = list.a;
			var xs = list.b;
			return (n <= 0) ? A2(
				$elm$core$List$cons,
				func(x),
				xs) : A2(
				$elm$core$List$cons,
				x,
				A3($elm$browser$Debugger$Expando$updateIndex, n - 1, func, xs));
		}
	});
var $elm$browser$Debugger$Expando$update = F2(
	function (msg, value) {
		switch (value.$) {
			case 'S':
				return value;
			case 'Primitive':
				return value;
			case 'Sequence':
				var seqType = value.a;
				var isClosed = value.b;
				var valueList = value.c;
				switch (msg.$) {
					case 'Toggle':
						return A3($elm$browser$Debugger$Expando$Sequence, seqType, !isClosed, valueList);
					case 'Index':
						if (msg.a.$ === 'None') {
							var _v3 = msg.a;
							var index = msg.b;
							var subMsg = msg.c;
							return A3(
								$elm$browser$Debugger$Expando$Sequence,
								seqType,
								isClosed,
								A3(
									$elm$browser$Debugger$Expando$updateIndex,
									index,
									$elm$browser$Debugger$Expando$update(subMsg),
									valueList));
						} else {
							return value;
						}
					default:
						return value;
				}
			case 'Dictionary':
				var isClosed = value.a;
				var keyValuePairs = value.b;
				switch (msg.$) {
					case 'Toggle':
						return A2($elm$browser$Debugger$Expando$Dictionary, !isClosed, keyValuePairs);
					case 'Index':
						var redirect = msg.a;
						var index = msg.b;
						var subMsg = msg.c;
						switch (redirect.$) {
							case 'None':
								return value;
							case 'Key':
								return A2(
									$elm$browser$Debugger$Expando$Dictionary,
									isClosed,
									A3(
										$elm$browser$Debugger$Expando$updateIndex,
										index,
										function (_v6) {
											var k = _v6.a;
											var v = _v6.b;
											return _Utils_Tuple2(
												A2($elm$browser$Debugger$Expando$update, subMsg, k),
												v);
										},
										keyValuePairs));
							default:
								return A2(
									$elm$browser$Debugger$Expando$Dictionary,
									isClosed,
									A3(
										$elm$browser$Debugger$Expando$updateIndex,
										index,
										function (_v7) {
											var k = _v7.a;
											var v = _v7.b;
											return _Utils_Tuple2(
												k,
												A2($elm$browser$Debugger$Expando$update, subMsg, v));
										},
										keyValuePairs));
						}
					default:
						return value;
				}
			case 'Record':
				var isClosed = value.a;
				var valueDict = value.b;
				switch (msg.$) {
					case 'Toggle':
						return A2($elm$browser$Debugger$Expando$Record, !isClosed, valueDict);
					case 'Index':
						return value;
					default:
						var field = msg.a;
						var subMsg = msg.b;
						return A2(
							$elm$browser$Debugger$Expando$Record,
							isClosed,
							A3(
								$elm$core$Dict$update,
								field,
								$elm$browser$Debugger$Expando$updateField(subMsg),
								valueDict));
				}
			default:
				var maybeName = value.a;
				var isClosed = value.b;
				var valueList = value.c;
				switch (msg.$) {
					case 'Toggle':
						return A3($elm$browser$Debugger$Expando$Constructor, maybeName, !isClosed, valueList);
					case 'Index':
						if (msg.a.$ === 'None') {
							var _v10 = msg.a;
							var index = msg.b;
							var subMsg = msg.c;
							return A3(
								$elm$browser$Debugger$Expando$Constructor,
								maybeName,
								isClosed,
								A3(
									$elm$browser$Debugger$Expando$updateIndex,
									index,
									$elm$browser$Debugger$Expando$update(subMsg),
									valueList));
						} else {
							return value;
						}
					default:
						return value;
				}
		}
	});
var $elm$browser$Debugger$Expando$updateField = F2(
	function (msg, maybeExpando) {
		if (maybeExpando.$ === 'Nothing') {
			return maybeExpando;
		} else {
			var expando = maybeExpando.a;
			return $elm$core$Maybe$Just(
				A2($elm$browser$Debugger$Expando$update, msg, expando));
		}
	});
var $elm$browser$Debugger$Main$Upload = function (a) {
	return {$: 'Upload', a: a};
};
var $elm$browser$Debugger$Main$upload = function (popout) {
	return A2(
		$elm$core$Task$perform,
		$elm$browser$Debugger$Main$Upload,
		_Debugger_upload(popout));
};
var $elm$browser$Debugger$Overlay$BadMetadata = function (a) {
	return {$: 'BadMetadata', a: a};
};
var $elm$browser$Debugger$Overlay$badMetadata = $elm$browser$Debugger$Overlay$BadMetadata;
var $elm$browser$Debugger$Main$withGoodMetadata = F2(
	function (model, func) {
		var _v0 = model.metadata;
		if (_v0.$ === 'Ok') {
			var metadata = _v0.a;
			return func(metadata);
		} else {
			var error = _v0.a;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						overlay: $elm$browser$Debugger$Overlay$badMetadata(error)
					}),
				$elm$core$Platform$Cmd$none);
		}
	});
var $elm$browser$Debugger$Main$wrapUpdate = F3(
	function (update, msg, model) {
		wrapUpdate:
		while (true) {
			switch (msg.$) {
				case 'NoOp':
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				case 'UserMsg':
					var userMsg = msg.a;
					var userModel = $elm$browser$Debugger$Main$getLatestModel(model.state);
					var newHistory = A3($elm$browser$Debugger$History$add, userMsg, userModel, model.history);
					var _v1 = A2(update, userMsg, userModel);
					var newUserModel = _v1.a;
					var userCmds = _v1.b;
					var commands = A2($elm$core$Platform$Cmd$map, $elm$browser$Debugger$Main$UserMsg, userCmds);
					var _v2 = model.state;
					if (_v2.$ === 'Running') {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									expandoModel: A2($elm$browser$Debugger$Expando$merge, newUserModel, model.expandoModel),
									expandoMsg: A2($elm$browser$Debugger$Expando$merge, userMsg, model.expandoMsg),
									history: newHistory,
									state: $elm$browser$Debugger$Main$Running(newUserModel)
								}),
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										commands,
										$elm$browser$Debugger$Main$scroll(model.popout)
									])));
					} else {
						var index = _v2.a;
						var indexModel = _v2.b;
						var history = _v2.e;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									history: newHistory,
									state: A5($elm$browser$Debugger$Main$Paused, index, indexModel, newUserModel, userMsg, history)
								}),
							commands);
					}
				case 'TweakExpandoMsg':
					var eMsg = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								expandoMsg: A2($elm$browser$Debugger$Expando$update, eMsg, model.expandoMsg)
							}),
						$elm$core$Platform$Cmd$none);
				case 'TweakExpandoModel':
					var eMsg = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								expandoModel: A2($elm$browser$Debugger$Expando$update, eMsg, model.expandoModel)
							}),
						$elm$core$Platform$Cmd$none);
				case 'Resume':
					var _v3 = model.state;
					if (_v3.$ === 'Running') {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					} else {
						var userModel = _v3.c;
						var userMsg = _v3.d;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									expandoModel: A2($elm$browser$Debugger$Expando$merge, userModel, model.expandoModel),
									expandoMsg: A2($elm$browser$Debugger$Expando$merge, userMsg, model.expandoMsg),
									state: $elm$browser$Debugger$Main$Running(userModel)
								}),
							$elm$browser$Debugger$Main$scroll(model.popout));
					}
				case 'Jump':
					var index = msg.a;
					return _Utils_Tuple2(
						A3($elm$browser$Debugger$Main$jumpUpdate, update, index, model),
						$elm$core$Platform$Cmd$none);
				case 'SliderJump':
					var index = msg.a;
					return _Utils_Tuple2(
						A3($elm$browser$Debugger$Main$jumpUpdate, update, index, model),
						A2(
							$elm$browser$Debugger$Main$scrollTo,
							$elm$browser$Debugger$History$idForMessageIndex(index),
							model.popout));
				case 'Open':
					return _Utils_Tuple2(
						model,
						A2(
							$elm$core$Task$perform,
							$elm$core$Basics$always($elm$browser$Debugger$Main$NoOp),
							_Debugger_open(model.popout)));
				case 'Up':
					var _v4 = model.state;
					if (_v4.$ === 'Running') {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					} else {
						var i = _v4.a;
						var history = _v4.e;
						var targetIndex = i + 1;
						if (_Utils_cmp(
							targetIndex,
							$elm$browser$Debugger$History$size(history)) < 0) {
							var $temp$update = update,
								$temp$msg = $elm$browser$Debugger$Main$SliderJump(targetIndex),
								$temp$model = model;
							update = $temp$update;
							msg = $temp$msg;
							model = $temp$model;
							continue wrapUpdate;
						} else {
							var $temp$update = update,
								$temp$msg = $elm$browser$Debugger$Main$Resume,
								$temp$model = model;
							update = $temp$update;
							msg = $temp$msg;
							model = $temp$model;
							continue wrapUpdate;
						}
					}
				case 'Down':
					var _v5 = model.state;
					if (_v5.$ === 'Running') {
						var $temp$update = update,
							$temp$msg = $elm$browser$Debugger$Main$Jump(
							$elm$browser$Debugger$History$size(model.history) - 1),
							$temp$model = model;
						update = $temp$update;
						msg = $temp$msg;
						model = $temp$model;
						continue wrapUpdate;
					} else {
						var index = _v5.a;
						if (index > 0) {
							var $temp$update = update,
								$temp$msg = $elm$browser$Debugger$Main$SliderJump(index - 1),
								$temp$model = model;
							update = $temp$update;
							msg = $temp$msg;
							model = $temp$model;
							continue wrapUpdate;
						} else {
							return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
						}
					}
				case 'Import':
					return A2(
						$elm$browser$Debugger$Main$withGoodMetadata,
						model,
						function (_v6) {
							return _Utils_Tuple2(
								model,
								$elm$browser$Debugger$Main$upload(model.popout));
						});
				case 'Export':
					return A2(
						$elm$browser$Debugger$Main$withGoodMetadata,
						model,
						function (metadata) {
							return _Utils_Tuple2(
								model,
								A2($elm$browser$Debugger$Main$download, metadata, model.history));
						});
				case 'Upload':
					var jsonString = msg.a;
					return A2(
						$elm$browser$Debugger$Main$withGoodMetadata,
						model,
						function (metadata) {
							var _v7 = A2($elm$browser$Debugger$Overlay$assessImport, metadata, jsonString);
							if (_v7.$ === 'Err') {
								var newOverlay = _v7.a;
								return _Utils_Tuple2(
									_Utils_update(
										model,
										{overlay: newOverlay}),
									$elm$core$Platform$Cmd$none);
							} else {
								var rawHistory = _v7.a;
								return A3($elm$browser$Debugger$Main$loadNewHistory, rawHistory, update, model);
							}
						});
				case 'OverlayMsg':
					var overlayMsg = msg.a;
					var _v8 = A2($elm$browser$Debugger$Overlay$close, overlayMsg, model.overlay);
					if (_v8.$ === 'Nothing') {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{overlay: $elm$browser$Debugger$Overlay$none}),
							$elm$core$Platform$Cmd$none);
					} else {
						var rawHistory = _v8.a;
						return A3($elm$browser$Debugger$Main$loadNewHistory, rawHistory, update, model);
					}
				case 'SwapLayout':
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								layout: $elm$browser$Debugger$Main$swapLayout(model.layout)
							}),
						$elm$core$Platform$Cmd$none);
				case 'DragStart':
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								layout: A2($elm$browser$Debugger$Main$setDragStatus, $elm$browser$Debugger$Main$Moving, model.layout)
							}),
						$elm$core$Platform$Cmd$none);
				case 'Drag':
					var info = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								layout: A2($elm$browser$Debugger$Main$drag, info, model.layout)
							}),
						$elm$core$Platform$Cmd$none);
				default:
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								layout: A2($elm$browser$Debugger$Main$setDragStatus, $elm$browser$Debugger$Main$Static, model.layout)
							}),
						$elm$core$Platform$Cmd$none);
			}
		}
	});
var $elm$browser$Browser$External = function (a) {
	return {$: 'External', a: a};
};
var $elm$browser$Browser$Internal = function (a) {
	return {$: 'Internal', a: a};
};
var $elm$browser$Browser$Dom$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var $elm$url$Url$Http = {$: 'Http'};
var $elm$url$Url$Https = {$: 'Https'};
var $elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {fragment: fragment, host: host, path: path, port_: port_, protocol: protocol, query: query};
	});
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, '@', str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, ':', str);
			if (!_v0.b) {
				return $elm$core$Maybe$Just(
					A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_v0.b.b) {
					var i = _v0.a;
					var _v1 = $elm$core$String$toInt(
						A2($elm$core$String$dropLeft, i + 1, str));
					if (_v1.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var port_ = _v1;
						return $elm$core$Maybe$Just(
							A6(
								$elm$url$Url$Url,
								protocol,
								A2($elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '/', str);
			if (!_v0.b) {
				return A5($elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _v0.a;
				return A5(
					$elm$url$Url$chompBeforePath,
					protocol,
					A2($elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '?', str);
			if (!_v0.b) {
				return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _v0.a;
				return A4(
					$elm$url$Url$chompBeforeQuery,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '#', str);
			if (!_v0.b) {
				return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
			} else {
				var i = _v0.a;
				return A3(
					$elm$url$Url$chompBeforeFragment,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $elm$url$Url$fromString = function (str) {
	return A2($elm$core$String$startsWith, 'http://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Http,
		A2($elm$core$String$dropLeft, 7, str)) : (A2($elm$core$String$startsWith, 'https://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Https,
		A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing);
};
var $elm$core$Basics$never = function (_v0) {
	never:
	while (true) {
		var nvr = _v0.a;
		var $temp$_v0 = nvr;
		_v0 = $temp$_v0;
		continue never;
	}
};
var $elm$browser$Browser$application = _Browser_application;
var $elm$json$Json$Decode$bool = _Json_decodeBool;
var $author$project$Model$Idle = {$: 'Idle'};
var $author$project$Model$Loading = {$: 'Loading'};
var $author$project$Model$Model = F8(
	function (size, hasIndex, code, index, preload, session, state, lia) {
		return {code: code, hasIndex: hasIndex, index: index, lia: lia, preload: preload, session: session, size: size, state: state};
	});
var $author$project$Session$Session = F4(
	function (share, key, screen, url) {
		return {key: key, screen: screen, share: share, url: url};
	});
var $elm$json$Json$Encode$int = _Json_wrap;
var $author$project$Update$event2js = _Platform_outgoingPort(
	'event2js',
	function ($) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'message',
					$elm$core$Basics$identity($.message)),
					_Utils_Tuple2(
					'section',
					$elm$json$Json$Encode$int($.section)),
					_Utils_Tuple2(
					'topic',
					$elm$json$Json$Encode$string($.topic))
				]));
	});
var $author$project$Port$Event$Event = F3(
	function (topic, section, message) {
		return {message: message, section: section, topic: topic};
	});
var $author$project$Port$Event$encode = function (_v0) {
	var topic = _v0.topic;
	var section = _v0.section;
	var message = _v0.message;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'topic',
				$elm$json$Json$Encode$string(topic)),
				_Utils_Tuple2(
				'section',
				$elm$json$Json$Encode$int(section)),
				_Utils_Tuple2('message', message)
			]));
};
var $author$project$Index$Update$index = A2(
	$elm$core$Basics$composeR,
	$author$project$Port$Event$encode,
	A2($author$project$Port$Event$Event, 'index', -1));
var $author$project$Index$Update$get = A2(
	$elm$core$Basics$composeR,
	$elm$json$Json$Encode$string,
	A2(
		$elm$core$Basics$composeR,
		A2($author$project$Port$Event$Event, 'get', -1),
		$author$project$Index$Update$index));
var $author$project$Update$getIndex = F2(
	function (url, model) {
		return _Utils_Tuple2(
			model,
			$author$project$Update$event2js(
				$author$project$Index$Update$get(url)));
	});
var $elm$url$Url$addPort = F2(
	function (maybePort, starter) {
		if (maybePort.$ === 'Nothing') {
			return starter;
		} else {
			var port_ = maybePort.a;
			return starter + (':' + $elm$core$String$fromInt(port_));
		}
	});
var $elm$url$Url$addPrefixed = F3(
	function (prefix, maybeSegment, starter) {
		if (maybeSegment.$ === 'Nothing') {
			return starter;
		} else {
			var segment = maybeSegment.a;
			return _Utils_ap(
				starter,
				_Utils_ap(prefix, segment));
		}
	});
var $elm$url$Url$toString = function (url) {
	var http = function () {
		var _v0 = url.protocol;
		if (_v0.$ === 'Http') {
			return 'http://';
		} else {
			return 'https://';
		}
	}();
	return A3(
		$elm$url$Url$addPrefixed,
		'#',
		url.fragment,
		A3(
			$elm$url$Url$addPrefixed,
			'?',
			url.query,
			_Utils_ap(
				A2(
					$elm$url$Url$addPort,
					url.port_,
					_Utils_ap(http, url.host)),
				url.path)));
};
var $author$project$Main$get_base = function (url) {
	return $elm$url$Url$toString(
		_Utils_update(
			url,
			{fragment: $elm$core$Maybe$Nothing}));
};
var $author$project$Main$get_origin = function (query) {
	if (query.$ === 'Just') {
		var url = query.a;
		return A2(
			$elm$core$String$join,
			'/',
			$elm$core$List$reverse(
				A2(
					$elm$core$List$drop,
					1,
					$elm$core$List$reverse(
						A2($elm$core$String$split, '/', url))))) + '/';
	} else {
		return '';
	}
};
var $author$project$Index$Model$Model = F3(
	function (input, courses, initialized) {
		return {courses: courses, initialized: initialized, input: input};
	});
var $author$project$Index$Model$init = A3($author$project$Index$Model$Model, '', _List_Nil, false);
var $author$project$Translations$En = {$: 'En'};
var $author$project$Lia$Settings$Types$Presentation = {$: 'Presentation'};
var $author$project$Lia$Definition$Types$default = function (base) {
	return {attributes: _List_Nil, author: '', base: base, comment: _List_Nil, date: '', debug: false, email: '', imports: _List_Nil, language: 'en', lightMode: $elm$core$Maybe$Nothing, logo: '', macro: $elm$core$Dict$empty, mode: $elm$core$Maybe$Nothing, narrator: 'US English Male', onload: '', resources: _List_Nil, section: -1, translation: $elm$core$Dict$empty, uid: -1, version: '0.0.1'};
};
var $author$project$Lia$Index$Model$init = '';
var $author$project$Lia$Settings$Types$init = F2(
	function (hasShareApi, mode) {
		return {action: $elm$core$Maybe$Nothing, editor: 'dreamweaver', font_size: 100, hasShareApi: hasShareApi, initialized: false, lang: 'default', light: true, mode: mode, sound: true, speaking: false, table_of_contents: true, theme: 'default'};
	});
var $elm$json$Json$Decode$map8 = _Json_map8;
var $author$project$Lia$Settings$Json$settings = F9(
	function (model, toc, mode, theme, light, editor, font_size, sound, lang) {
		return _Utils_update(
			model,
			{editor: editor, font_size: font_size, lang: lang, light: light, mode: mode, sound: sound, table_of_contents: toc, theme: theme});
	});
var $author$project$Lia$Settings$Types$Slides = {$: 'Slides'};
var $author$project$Lia$Settings$Types$Textbook = {$: 'Textbook'};
var $elm$json$Json$Decode$fail = _Json_fail;
var $author$project$Lia$Settings$Json$toMode = function (str) {
	switch (str) {
		case 'Textbook':
			return $elm$json$Json$Decode$succeed($author$project$Lia$Settings$Types$Textbook);
		case 'Presentation':
			return $elm$json$Json$Decode$succeed($author$project$Lia$Settings$Types$Presentation);
		case 'Slides':
			return $elm$json$Json$Decode$succeed($author$project$Lia$Settings$Types$Slides);
		default:
			return $elm$json$Json$Decode$fail('unknown presentation mode');
	}
};
var $author$project$Lia$Settings$Json$toModel = function (model) {
	return $elm$json$Json$Decode$decodeValue(
		A9(
			$elm$json$Json$Decode$map8,
			$author$project$Lia$Settings$Json$settings(model),
			A2($elm$json$Json$Decode$field, 'table_of_contents', $elm$json$Json$Decode$bool),
			A2(
				$elm$json$Json$Decode$andThen,
				$author$project$Lia$Settings$Json$toMode,
				A2($elm$json$Json$Decode$field, 'mode', $elm$json$Json$Decode$string)),
			A2($elm$json$Json$Decode$field, 'theme', $elm$json$Json$Decode$string),
			A2($elm$json$Json$Decode$field, 'light', $elm$json$Json$Decode$bool),
			A2($elm$json$Json$Decode$field, 'editor', $elm$json$Json$Decode$string),
			A2($elm$json$Json$Decode$field, 'font_size', $elm$json$Json$Decode$int),
			A2($elm$json$Json$Decode$field, 'sound', $elm$json$Json$Decode$bool),
			A2($elm$json$Json$Decode$field, 'lang', $elm$json$Json$Decode$string)));
};
var $elm$core$Result$withDefault = F2(
	function (def, result) {
		if (result.$ === 'Ok') {
			var a = result.a;
			return a;
		} else {
			return def;
		}
	});
var $author$project$Lia$Model$init = F7(
	function (hasShareApi, openTOC, settings, url, readme, origin, anchor) {
		var _default = A2($author$project$Lia$Settings$Types$init, hasShareApi, $author$project$Lia$Settings$Types$Presentation);
		return {
			anchor: anchor,
			definition: $author$project$Lia$Definition$Types$default(url),
			error: $elm$core$Maybe$Nothing,
			index_model: $author$project$Lia$Index$Model$init,
			origin: origin,
			readme: readme,
			resource: _List_Nil,
			search_index: $elm$core$Basics$identity,
			section_active: 0,
			sections: $elm$core$Array$empty,
			settings: function (set) {
				return _Utils_update(
					set,
					{table_of_contents: openTOC});
			}(
				A2(
					$elm$core$Result$withDefault,
					_default,
					A2($author$project$Lia$Settings$Json$toModel, _default, settings))),
			title: 'Lia',
			to_do: _List_Nil,
			translation: $author$project$Translations$En,
			url: url
		};
	});
var $author$project$Lia$Script$init = $author$project$Lia$Model$init;
var $elm$json$Json$Encode$null = _Json_encodeNull;
var $author$project$Index$Update$init = $author$project$Index$Update$index(
	A3($author$project$Port$Event$Event, 'list', -1, $elm$json$Json$Encode$null));
var $author$project$Update$initIndex = function (model) {
	return _Utils_Tuple2(
		model,
		$author$project$Update$event2js($author$project$Index$Update$init));
};
var $elm$regex$Regex$Match = F4(
	function (match, index, number, submatches) {
		return {index: index, match: match, number: number, submatches: submatches};
	});
var $elm$regex$Regex$findAtMost = _Regex_findAtMost;
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
var $elm$regex$Regex$fromString = function (string) {
	return A2(
		$elm$regex$Regex$fromStringWith,
		{caseInsensitive: false, multiline: false},
		string);
};
var $elm$regex$Regex$never = _Regex_never;
var $author$project$Lia$Parser$PatReplace$regex = A2(
	$elm$core$Basics$composeR,
	$elm$regex$Regex$fromString,
	$elm$core$Maybe$withDefault($elm$regex$Regex$never));
var $author$project$Lia$Parser$PatReplace$check = F2(
	function (pattern, url) {
		var _v0 = A3(
			$elm$regex$Regex$findAtMost,
			1,
			$author$project$Lia$Parser$PatReplace$regex(pattern),
			url);
		if (_v0.b && (!_v0.b.b)) {
			var match = _v0.a;
			return A2(
				$elm$core$Maybe$withDefault,
				$elm$core$Maybe$Nothing,
				$elm$core$List$head(match.submatches));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Lia$Parser$PatReplace$replace = F2(
	function (patterns, url) {
		replace:
		while (true) {
			if (!patterns.b) {
				return _Utils_Tuple2(false, url);
			} else {
				var t = patterns.a;
				var ts = patterns.b;
				var _v1 = A2($author$project$Lia$Parser$PatReplace$check, t.pattern, url);
				if (_v1.$ === 'Just') {
					var str = _v1.a;
					return _Utils_Tuple2(
						true,
						t.by(str));
				} else {
					var $temp$patterns = ts,
						$temp$url = url;
					patterns = $temp$patterns;
					url = $temp$url;
					continue replace;
				}
			}
		}
	});
var $elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			$elm$core$String$join,
			after,
			A2($elm$core$String$split, before, string));
	});
var $author$project$Lia$Parser$PatReplace$link = A2(
	$elm$core$Basics$composeR,
	$author$project$Lia$Parser$PatReplace$replace(
		_List_fromArray(
			[
				{
				by: function (w) {
					return 'https://raw.githubusercontent.com/' + function () {
						var _v0 = A2($elm$core$String$split, '/', w);
						_v0$2:
						while (true) {
							if (_v0.b && _v0.b.b) {
								if (!_v0.b.b.b) {
									var _v1 = _v0.b;
									return w + '/master/README.md';
								} else {
									if (_v0.b.b.a === 'tree') {
										var _v2 = _v0.b;
										var _v3 = _v2.b;
										return A3($elm$core$String$replace, '/tree/', '/', w) + '/README.md';
									} else {
										break _v0$2;
									}
								}
							} else {
								break _v0$2;
							}
						}
						return A3($elm$core$String$replace, '/blob/', '/', w);
					}();
				},
				pattern: '(?:http(?:s)?://)?(?:www\\.)?github\\.com/(.*)'
			},
				{
				by: function (w) {
					return 'https://dl.dropbox.com/s/' + w;
				},
				pattern: '(?:http(?:s)?://)?www\\.dropbox\\.com/s/(.*)'
			}
			])),
	$elm$core$Tuple$second);
var $author$project$Index$Version$getMajor = function (ver) {
	var _v0 = A2(
		$elm$core$List$map,
		$elm$core$String$toInt,
		A2($elm$core$String$split, '.', ver));
	if (_v0.b && (_v0.a.$ === 'Just')) {
		var major = _v0.a.a;
		return major;
	} else {
		return 0;
	}
};
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$core$List$sortBy = _List_sortBy;
var $author$project$Index$Version$toInt = function (str) {
	var _v0 = A2(
		$elm$core$List$map,
		$elm$core$String$toInt,
		A2($elm$core$String$split, '.', str));
	if (_v0.b && (_v0.a.$ === 'Just')) {
		if (_v0.b.b && (_v0.b.a.$ === 'Just')) {
			if (_v0.b.b.b && (_v0.b.b.a.$ === 'Just')) {
				var major = _v0.a.a;
				var _v1 = _v0.b;
				var minor = _v1.a.a;
				var _v2 = _v1.b;
				var patch = _v2.a.a;
				return ((10000 * major) + (100 * minor)) + patch;
			} else {
				var major = _v0.a.a;
				var _v3 = _v0.b;
				var minor = _v3.a.a;
				return (10000 * major) + (100 * minor);
			}
		} else {
			var major = _v0.a.a;
			return 10000 * major;
		}
	} else {
		return 0;
	}
};
var $author$project$Index$Version$sort = $elm$core$List$sortBy($author$project$Index$Version$toInt);
var $author$project$Index$Version$max = A2(
	$elm$core$Basics$composeR,
	$author$project$Index$Version$sort,
	A2($elm$core$Basics$composeR, $elm$core$List$reverse, $elm$core$List$head));
var $author$project$Index$Update$inCache = F2(
	function (version, course) {
		return (!(!$author$project$Index$Version$getMajor(version))) && _Utils_eq(
			$author$project$Index$Version$toInt(version),
			A2(
				$elm$core$Maybe$withDefault,
				-1,
				A2(
					$elm$core$Maybe$map,
					$author$project$Index$Version$toInt,
					$author$project$Index$Version$max(
						A2(
							$elm$core$List$map,
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.definition;
								},
								function ($) {
									return $.version;
								}),
							$elm$core$Dict$values(course.versions))))));
	});
var $elm$core$String$trim = _String_trim;
var $elm$core$Dict$union = F2(
	function (t1, t2) {
		return A3($elm$core$Dict$foldl, $elm$core$Dict$insert, t2, t1);
	});
var $author$project$Lia$Definition$Types$add_macros = F2(
	function (orig, temp) {
		return _Utils_update(
			orig,
			{
				attributes: A2($elm$core$List$append, orig.attributes, temp.attributes),
				macro: A2($elm$core$Dict$union, orig.macro, temp.macro),
				onload: $elm$core$String$trim(orig.onload + ('\n' + temp.onload)),
				resources: A2($elm$core$List$append, orig.resources, temp.resources)
			});
	});
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $author$project$Lia$Model$loadResource = F2(
	function (old, _new) {
		var member = function (x) {
			return !A2($elm$core$List$member, x, old);
		};
		var to_load = A2($elm$core$List$filter, member, _new);
		return _Utils_Tuple2(
			A2($elm$core$List$append, old, to_load),
			A2(
				$elm$core$List$map,
				function (res) {
					return A3(
						$author$project$Port$Event$Event,
						'resource',
						0,
						A2(
							$elm$json$Json$Encode$list,
							$elm$json$Json$Encode$string,
							function () {
								if (res.$ === 'Script') {
									var url = res.a;
									return _List_fromArray(
										['script', url]);
								} else {
									var url = res.a;
									return _List_fromArray(
										['link', url]);
								}
							}()));
				},
				to_load));
	});
var $author$project$Lia$Script$add_todos = F2(
	function (definition, model) {
		var _v0 = A2($author$project$Lia$Model$loadResource, model.resource, definition.resources);
		var res = _v0.a;
		var events = _v0.b;
		return _Utils_update(
			model,
			{
				definition: A2($author$project$Lia$Definition$Types$add_macros, model.definition, definition),
				resource: res,
				to_do: A2(
					$elm$core$List$append,
					model.to_do,
					$elm$core$List$reverse(events))
			});
	});
var $author$project$Translations$Bg = {$: 'Bg'};
var $author$project$Translations$De = {$: 'De'};
var $author$project$Translations$Es = {$: 'Es'};
var $author$project$Translations$Fa = {$: 'Fa'};
var $author$project$Translations$Hy = {$: 'Hy'};
var $author$project$Translations$Nl = {$: 'Nl'};
var $author$project$Translations$Ru = {$: 'Ru'};
var $author$project$Translations$Tw = {$: 'Tw'};
var $author$project$Translations$Ua = {$: 'Ua'};
var $author$project$Translations$Zh = {$: 'Zh'};
var $author$project$Translations$getLnFromCode = function (code) {
	switch (code) {
		case 'bg':
			return $author$project$Translations$Bg;
		case 'de':
			return $author$project$Translations$De;
		case 'en':
			return $author$project$Translations$En;
		case 'es':
			return $author$project$Translations$Es;
		case 'fa':
			return $author$project$Translations$Fa;
		case 'hy':
			return $author$project$Translations$Hy;
		case 'nl':
			return $author$project$Translations$Nl;
		case 'ru':
			return $author$project$Translations$Ru;
		case 'tw':
			return $author$project$Translations$Tw;
		case 'ua':
			return $author$project$Translations$Ua;
		case 'zh':
			return $author$project$Translations$Zh;
		default:
			return $author$project$Translations$En;
	}
};
var $andre_dietrich$parser_combinators$Combine$ParseLocation = F3(
	function (source, line, column) {
		return {column: column, line: line, source: source};
	});
var $andre_dietrich$parser_combinators$Combine$currentLocation = function (stream) {
	var find = F3(
		function (position, currentLine_, lines) {
			find:
			while (true) {
				if (!lines.b) {
					return A3($andre_dietrich$parser_combinators$Combine$ParseLocation, '', currentLine_, position);
				} else {
					var line = lines.a;
					var rest = lines.b;
					var length = $elm$core$String$length(line);
					var lengthPlusNL = length + 1;
					if (_Utils_eq(position, length)) {
						return A3($andre_dietrich$parser_combinators$Combine$ParseLocation, line, currentLine_, position);
					} else {
						if (_Utils_cmp(position, length) > 0) {
							var $temp$position = position - lengthPlusNL,
								$temp$currentLine_ = currentLine_ + 1,
								$temp$lines = rest;
							position = $temp$position;
							currentLine_ = $temp$currentLine_;
							lines = $temp$lines;
							continue find;
						} else {
							return A3($andre_dietrich$parser_combinators$Combine$ParseLocation, line, currentLine_, position);
						}
					}
				}
			}
		});
	return A3(
		find,
		stream.position,
		0,
		A2($elm$core$String$split, '\n', stream.data));
};
var $elm$core$String$cons = _String_cons;
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $elm$core$String$repeatHelp = F3(
	function (n, chunk, result) {
		return (n <= 0) ? result : A3(
			$elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var $elm$core$String$repeat = F2(
	function (n, chunk) {
		return A3($elm$core$String$repeatHelp, n, chunk, '');
	});
var $elm$core$String$padLeft = F3(
	function (n, _char, string) {
		return _Utils_ap(
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)),
			string);
	});
var $author$project$Lia$Parser$Parser$formatError = F2(
	function (ms, stream) {
		var separator = '|> ';
		var separatorOffset = $elm$core$String$length(separator);
		var location = $andre_dietrich$parser_combinators$Combine$currentLocation(stream);
		var padding = (location.column + separatorOffset) + 2;
		var expectationSeparator = '\n  * ';
		return 'Parse error around line:\\n\\n' + ($elm$core$String$fromInt(location.line) + (separator + (location.source + ('\\n' + (A3(
			$elm$core$String$padLeft,
			padding,
			_Utils_chr(' '),
			'^') + ('\\nI expected one of the following:\\n' + (expectationSeparator + A2($elm$core$String$join, expectationSeparator, ms))))))));
	});
var $andre_dietrich$parser_combinators$Combine$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $andre_dietrich$parser_combinators$Combine$app = function (_v0) {
	var inner = _v0.a;
	return inner;
};
var $andre_dietrich$parser_combinators$Combine$andThen = F2(
	function (f, p) {
		return $andre_dietrich$parser_combinators$Combine$Parser(
			F2(
				function (state, stream) {
					var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
					if (_v0.c.$ === 'Ok') {
						var rstate = _v0.a;
						var rstream = _v0.b;
						var res = _v0.c.a;
						return A3(
							$andre_dietrich$parser_combinators$Combine$app,
							f(res),
							rstate,
							rstream);
					} else {
						var estate = _v0.a;
						var estream = _v0.b;
						var ms = _v0.c.a;
						return _Utils_Tuple3(
							estate,
							estream,
							$elm$core$Result$Err(ms));
					}
				}));
	});
var $pilatch$flip$Flip$flip = F3(
	function (_function, argB, argA) {
		return A2(_function, argA, argB);
	});
var $andre_dietrich$parser_combinators$Combine$bimap = F3(
	function (fok, ferr, p) {
		return $andre_dietrich$parser_combinators$Combine$Parser(
			F2(
				function (state, stream) {
					var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
					if (_v0.c.$ === 'Ok') {
						var rstate = _v0.a;
						var rstream = _v0.b;
						var res = _v0.c.a;
						return _Utils_Tuple3(
							rstate,
							rstream,
							$elm$core$Result$Ok(
								fok(res)));
					} else {
						var estate = _v0.a;
						var estream = _v0.b;
						var ms = _v0.c.a;
						return _Utils_Tuple3(
							estate,
							estream,
							$elm$core$Result$Err(
								ferr(ms)));
					}
				}));
	});
var $andre_dietrich$parser_combinators$Combine$map = F2(
	function (f, p) {
		return A3($andre_dietrich$parser_combinators$Combine$bimap, f, $elm$core$Basics$identity, p);
	});
var $andre_dietrich$parser_combinators$Combine$andMap = F2(
	function (rp, lp) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$andThen,
			A2($pilatch$flip$Flip$flip, $andre_dietrich$parser_combinators$Combine$map, rp),
			lp);
	});
var $andre_dietrich$parser_combinators$Combine$ignore = F2(
	function (p1, p2) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			p1,
			A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Basics$always, p2));
	});
var $author$project$Lia$Markdown$Effect$Model$Model = F5(
	function (visible, effects, comments, javascript, speaking) {
		return {comments: comments, effects: effects, javascript: javascript, speaking: speaking, visible: visible};
	});
var $author$project$Lia$Markdown$Effect$Model$init = A5($author$project$Lia$Markdown$Effect$Model$Model, 0, 0, $elm$core$Dict$empty, $elm$core$Array$empty, $elm$core$Maybe$Nothing);
var $author$project$Lia$Markdown$Footnote$Model$init = $elm$core$Dict$empty;
var $author$project$Lia$Parser$Context$init = F2(
	function (search_index, global) {
		return {
			code_vector: $elm$core$Array$empty,
			defines: global,
			defines_updated: false,
			effect_id: 0,
			effect_model: $author$project$Lia$Markdown$Effect$Model$init,
			effect_number: _List_fromArray(
				[0]),
			footnotes: $author$project$Lia$Markdown$Footnote$Model$init,
			indentation: _List_Nil,
			indentation_skip: false,
			quiz_vector: $elm$core$Array$empty,
			search_index: A2($elm$core$Maybe$withDefault, $elm$core$Basics$identity, search_index),
			survey_vector: $elm$core$Array$empty,
			table_vector: $elm$core$Array$empty,
			task_vector: $elm$core$Array$empty
		};
	});
var $author$project$Lia$Parser$Parser$notification = '# Welcome to LiaScript (Ups)\n\n> The file you have loaded does not contain any content or it is not a valid\n> Markdown file.\n\nLiaScript is domain specific language that is based on Markdown. For more\ninformation visit:\n\n* Project-website: https://LiaScript.github.io\n* Documentation: https://github.com/liascript/docs\n* YouTube: https://www.youtube.com/channel/UCyiTe2GkW_u05HSdvUblGYg\n  ';
var $andre_dietrich$parser_combinators$Combine$or = F2(
	function (lp, rp) {
		return $andre_dietrich$parser_combinators$Combine$Parser(
			F2(
				function (state, stream) {
					var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, lp, state, stream);
					if (_v0.c.$ === 'Ok') {
						var res = _v0;
						return res;
					} else {
						var lms = _v0.c.a;
						var _v1 = A3($andre_dietrich$parser_combinators$Combine$app, rp, state, stream);
						if (_v1.c.$ === 'Ok') {
							var res = _v1;
							return res;
						} else {
							var rms = _v1.c.a;
							return _Utils_Tuple3(
								state,
								stream,
								$elm$core$Result$Err(
									_Utils_ap(lms, rms)));
						}
					}
				}));
	});
var $andre_dietrich$parser_combinators$Combine$keep = F2(
	function (p1, p2) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			p1,
			A2(
				$andre_dietrich$parser_combinators$Combine$map,
				$pilatch$flip$Flip$flip($elm$core$Basics$always),
				p2));
	});
var $andre_dietrich$parser_combinators$Combine$manyTill = F2(
	function (p, end_) {
		var accumulate = F3(
			function (acc, state, stream) {
				accumulate:
				while (true) {
					var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, end_, state, stream);
					if (_v0.c.$ === 'Ok') {
						var rstate = _v0.a;
						var rstream = _v0.b;
						return _Utils_Tuple3(
							rstate,
							rstream,
							$elm$core$Result$Ok(
								$elm$core$List$reverse(acc)));
					} else {
						var estate = _v0.a;
						var estream = _v0.b;
						var ms = _v0.c.a;
						var _v1 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
						if (_v1.c.$ === 'Ok') {
							var rstate = _v1.a;
							var rstream = _v1.b;
							var res = _v1.c.a;
							var $temp$acc = A2($elm$core$List$cons, res, acc),
								$temp$state = rstate,
								$temp$stream = rstream;
							acc = $temp$acc;
							state = $temp$state;
							stream = $temp$stream;
							continue accumulate;
						} else {
							return _Utils_Tuple3(
								estate,
								estream,
								$elm$core$Result$Err(ms));
						}
					}
				}
			});
		return $andre_dietrich$parser_combinators$Combine$Parser(
			accumulate(_List_Nil));
	});
var $andre_dietrich$parser_combinators$Combine$string = function (s) {
	return $andre_dietrich$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				if (A2($elm$core$String$startsWith, s, stream.input)) {
					var len = $elm$core$String$length(s);
					var pos = stream.position + len;
					var rem = A2($elm$core$String$dropLeft, len, stream.input);
					return _Utils_Tuple3(
						state,
						_Utils_update(
							stream,
							{input: rem, position: pos}),
						$elm$core$Result$Ok(s));
				} else {
					return _Utils_Tuple3(
						state,
						stream,
						$elm$core$Result$Err(
							_List_fromArray(
								['expected \"' + (s + '\"')])));
				}
			}));
};
var $andre_dietrich$parser_combinators$Combine$mapError = $andre_dietrich$parser_combinators$Combine$bimap($elm$core$Basics$identity);
var $andre_dietrich$parser_combinators$Combine$onerror = F2(
	function (m, p) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$mapError,
			$elm$core$Basics$always(
				_List_fromArray(
					[m])),
			p);
	});
var $andre_dietrich$parser_combinators$Combine$regexer = F5(
	function (input, output, pat, state, stream) {
		var pattern = A2($elm$core$String$startsWith, '^', pat) ? pat : ('^' + pat);
		var _v0 = A3(
			$elm$regex$Regex$findAtMost,
			1,
			A2(
				$elm$core$Maybe$withDefault,
				$elm$regex$Regex$never,
				input(pattern)),
			stream.input);
		if (_v0.b && (!_v0.b.b)) {
			var match = _v0.a;
			var len = $elm$core$String$length(match.match);
			var pos = stream.position + len;
			var rem = A2($elm$core$String$dropLeft, len, stream.input);
			return _Utils_Tuple3(
				state,
				_Utils_update(
					stream,
					{input: rem, position: pos}),
				$elm$core$Result$Ok(
					output(match)));
		} else {
			return _Utils_Tuple3(
				state,
				stream,
				$elm$core$Result$Err(
					_List_fromArray(
						['expected input matching Regexp /' + (pattern + '/')])));
		}
	});
var $andre_dietrich$parser_combinators$Combine$regex = A2(
	$elm$core$Basics$composeR,
	A2(
		$andre_dietrich$parser_combinators$Combine$regexer,
		$elm$regex$Regex$fromString,
		function ($) {
			return $.match;
		}),
	$andre_dietrich$parser_combinators$Combine$Parser);
var $andre_dietrich$parser_combinators$Combine$whitespace = A2(
	$andre_dietrich$parser_combinators$Combine$onerror,
	'optional whitespace',
	$andre_dietrich$parser_combinators$Combine$regex('\\s*'));
var $author$project$Lia$Markdown$Inline$Parser$comment = function (p) {
	return A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		A2(
			$andre_dietrich$parser_combinators$Combine$manyTill,
			p,
			$andre_dietrich$parser_combinators$Combine$string('-->')),
		A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			$andre_dietrich$parser_combinators$Combine$whitespace,
			$andre_dietrich$parser_combinators$Combine$string('<!--')));
};
var $andre_dietrich$parser_combinators$Combine$emptyErr = $andre_dietrich$parser_combinators$Combine$Parser(
	F2(
		function (state, stream) {
			return _Utils_Tuple3(
				state,
				stream,
				$elm$core$Result$Err(_List_Nil));
		}));
var $andre_dietrich$parser_combinators$Combine$choice = function (xs) {
	return A3($elm$core$List$foldr, $andre_dietrich$parser_combinators$Combine$or, $andre_dietrich$parser_combinators$Combine$emptyErr, xs);
};
var $andre_dietrich$parser_combinators$Combine$maybe = function (p) {
	return $andre_dietrich$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
				if (_v0.c.$ === 'Ok') {
					var rstate = _v0.a;
					var rstream = _v0.b;
					var res = _v0.c.a;
					return _Utils_Tuple3(
						rstate,
						rstream,
						$elm$core$Result$Ok(
							$elm$core$Maybe$Just(res)));
				} else {
					return _Utils_Tuple3(
						state,
						stream,
						$elm$core$Result$Ok($elm$core$Maybe$Nothing));
				}
			}));
};
var $author$project$Lia$Definition$Parser$start = $andre_dietrich$parser_combinators$Combine$maybe(
	$andre_dietrich$parser_combinators$Combine$string('@'));
var $author$project$Lia$Definition$Parser$key = A2(
	$andre_dietrich$parser_combinators$Combine$keep,
	$andre_dietrich$parser_combinators$Combine$regex('\\w+[\\w\\-.\\d]*'),
	$author$project$Lia$Definition$Parser$start);
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $elm$core$String$words = _String_words;
var $author$project$Lia$Definition$Parser$reduce = A2(
	$elm$core$Basics$composeR,
	$elm$core$String$words,
	A2(
		$elm$core$Basics$composeR,
		$elm$core$List$intersperse(' '),
		$elm$core$String$concat));
var $author$project$Lia$Definition$Parser$lines = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$author$project$Lia$Definition$Parser$reduce,
	$andre_dietrich$parser_combinators$Combine$regex('([ \\t].*|[ \\t]*\\n)+'));
var $andre_dietrich$parser_combinators$Combine$primitive = $andre_dietrich$parser_combinators$Combine$Parser;
var $andre_dietrich$parser_combinators$Combine$Char$satisfy = function (pred) {
	return $andre_dietrich$parser_combinators$Combine$primitive(
		F2(
			function (state, stream) {
				var message = 'could not satisfy predicate';
				var _v0 = $elm$core$String$uncons(stream.input);
				if (_v0.$ === 'Just') {
					var _v1 = _v0.a;
					var h = _v1.a;
					var rest = _v1.b;
					return pred(h) ? _Utils_Tuple3(
						state,
						_Utils_update(
							stream,
							{input: rest, position: stream.position + 1}),
						$elm$core$Result$Ok(h)) : _Utils_Tuple3(
						state,
						stream,
						$elm$core$Result$Err(
							_List_fromArray(
								[message])));
				} else {
					return _Utils_Tuple3(
						state,
						stream,
						$elm$core$Result$Err(
							_List_fromArray(
								[message])));
				}
			}));
};
var $andre_dietrich$parser_combinators$Combine$Char$anyChar = A2(
	$andre_dietrich$parser_combinators$Combine$onerror,
	'expected any character',
	$andre_dietrich$parser_combinators$Combine$Char$satisfy(
		$elm$core$Basics$always(true)));
var $elm$core$String$fromList = _String_fromList;
var $author$project$Lia$Parser$Helper$stringTill = function (p) {
	return A2(
		$andre_dietrich$parser_combinators$Combine$map,
		$elm$core$String$fromList,
		A2($andre_dietrich$parser_combinators$Combine$manyTill, $andre_dietrich$parser_combinators$Combine$Char$anyChar, p));
};
var $author$project$Lia$Definition$Parser$multiline = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	function (x) {
		return A2($elm$core$String$startsWith, '\n', x) ? (' ' + x) : x;
	},
	$author$project$Lia$Parser$Helper$stringTill(
		$andre_dietrich$parser_combinators$Combine$string('\n@end')));
var $author$project$Lia$Definition$Parser$value = A2(
	$andre_dietrich$parser_combinators$Combine$or,
	A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		$author$project$Lia$Definition$Parser$lines,
		$andre_dietrich$parser_combinators$Combine$regex('[\\t ]*:')),
	A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		$author$project$Lia$Definition$Parser$multiline,
		$andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\n')));
var $author$project$Lia$Definition$Parser$key_value = A2(
	$andre_dietrich$parser_combinators$Combine$andMap,
	$author$project$Lia$Definition$Parser$value,
	A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair, $author$project$Lia$Definition$Parser$key));
var $andre_dietrich$parser_combinators$Combine$onsuccess = function (res) {
	return $andre_dietrich$parser_combinators$Combine$map(
		$elm$core$Basics$always(res));
};
var $andre_dietrich$parser_combinators$Combine$skip = function (p) {
	return A2($andre_dietrich$parser_combinators$Combine$onsuccess, _Utils_Tuple0, p);
};
var $author$project$Lia$Definition$Types$Link = function (a) {
	return {$: 'Link', a: a};
};
var $author$project$Lia$Definition$Types$Script = function (a) {
	return {$: 'Script', a: a};
};
var $author$project$Lia$Markdown$Macro$Parser$add = F2(
	function (_v0, def) {
		var name = _v0.a;
		var code = _v0.b;
		return _Utils_update(
			def,
			{
				macro: A3($elm$core$Dict$insert, name, code, def.macro)
			});
	});
var $elm$core$String$toLower = _String_toLower;
var $author$project$Lia$Markdown$HTML$Attributes$toURL = F2(
	function (basis, url) {
		return A2(
			$elm$core$String$startsWith,
			'http',
			$elm$core$String$toLower(url)) ? url : _Utils_ap(basis, url);
	});
var $author$project$Lia$Definition$Types$append = F4(
	function (to, base, urls, list) {
		return A2(
			$elm$core$List$append,
			list,
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					$author$project$Lia$Markdown$HTML$Attributes$toURL(base),
					to),
				$elm$core$String$words(urls)));
	});
var $author$project$Lia$Definition$Types$addToResources = F3(
	function (to, urls, def) {
		return _Utils_update(
			def,
			{
				resources: A4($author$project$Lia$Definition$Types$append, to, def.base, urls, def.resources)
			});
	});
var $author$project$Lia$Definition$Types$add_imports = F2(
	function (url, def) {
		return _Utils_update(
			def,
			{
				imports: A4($author$project$Lia$Definition$Types$append, $author$project$Lia$Parser$PatReplace$link, def.base, url, def.imports)
			});
	});
var $author$project$Lia$Definition$Types$add_translation = F2(
	function (str, def) {
		var _v0 = $elm$core$String$words(str);
		if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
			var lang = _v0.a;
			var _v1 = _v0.b;
			var url = _v1.a;
			return _Utils_update(
				def,
				{
					translation: A3(
						$elm$core$Dict$insert,
						lang,
						A2($author$project$Lia$Markdown$HTML$Attributes$toURL, def.base, url),
						def.translation)
				});
		} else {
			return def;
		}
	});
var $author$project$Lia$Markdown$Inline$Types$Chars = F2(
	function (a, b) {
		return {$: 'Chars', a: a, b: b};
	});
var $author$project$Lia$Markdown$Inline$Parser$combine = function (list) {
	combine:
	while (true) {
		if (!list.b) {
			return _List_Nil;
		} else {
			if (!list.b.b) {
				var xs = list.a;
				return _List_fromArray(
					[xs]);
			} else {
				var x1 = list.a;
				var _v1 = list.b;
				var x2 = _v1.a;
				var xs = _v1.b;
				var _v2 = _Utils_Tuple2(x1, x2);
				if ((((_v2.a.$ === 'Chars') && (!_v2.a.b.b)) && (_v2.b.$ === 'Chars')) && (!_v2.b.b.b)) {
					var _v3 = _v2.a;
					var str1 = _v3.a;
					var _v4 = _v2.b;
					var str2 = _v4.a;
					var $temp$list = A2(
						$elm$core$List$cons,
						A2(
							$author$project$Lia$Markdown$Inline$Types$Chars,
							_Utils_ap(str1, str2),
							_List_Nil),
						xs);
					list = $temp$list;
					continue combine;
				} else {
					return A2(
						$elm$core$List$cons,
						x1,
						$author$project$Lia$Markdown$Inline$Parser$combine(
							A2($elm$core$List$cons, x2, xs)));
				}
			}
		}
	}
};
var $author$project$Lia$Markdown$Inline$Types$Audio = F3(
	function (a, b, c) {
		return {$: 'Audio', a: a, b: b, c: c};
	});
var $author$project$Lia$Markdown$Inline$Types$Bold = F2(
	function (a, b) {
		return {$: 'Bold', a: a, b: b};
	});
var $author$project$Lia$Markdown$Inline$Types$EInline = F2(
	function (a, b) {
		return {$: 'EInline', a: a, b: b};
	});
var $author$project$Lia$Markdown$Inline$Types$Embed = F3(
	function (a, b, c) {
		return {$: 'Embed', a: a, b: b, c: c};
	});
var $author$project$Lia$Markdown$Inline$Types$IHTML = F2(
	function (a, b) {
		return {$: 'IHTML', a: a, b: b};
	});
var $author$project$Lia$Markdown$Inline$Types$Image = F3(
	function (a, b, c) {
		return {$: 'Image', a: a, b: b, c: c};
	});
var $author$project$Lia$Markdown$Inline$Types$Italic = F2(
	function (a, b) {
		return {$: 'Italic', a: a, b: b};
	});
var $author$project$Lia$Markdown$Inline$Types$Link = F3(
	function (a, b, c) {
		return {$: 'Link', a: a, b: b, c: c};
	});
var $author$project$Lia$Markdown$Inline$Types$Mail = F3(
	function (a, b, c) {
		return {$: 'Mail', a: a, b: b, c: c};
	});
var $author$project$Lia$Markdown$Inline$Types$Movie = F3(
	function (a, b, c) {
		return {$: 'Movie', a: a, b: b, c: c};
	});
var $author$project$Lia$Markdown$Inline$Types$Preview_Lia = function (a) {
	return {$: 'Preview_Lia', a: a};
};
var $author$project$Lia$Markdown$Inline$Types$Preview_Link = function (a) {
	return {$: 'Preview_Link', a: a};
};
var $author$project$Lia$Markdown$Inline$Types$QR_Link = F2(
	function (a, b) {
		return {$: 'QR_Link', a: a, b: b};
	});
var $author$project$Lia$Markdown$Inline$Types$Ref = F2(
	function (a, b) {
		return {$: 'Ref', a: a, b: b};
	});
var $author$project$Lia$Markdown$Inline$Types$Strike = F2(
	function (a, b) {
		return {$: 'Strike', a: a, b: b};
	});
var $author$project$Lia$Markdown$Inline$Types$Superscript = F2(
	function (a, b) {
		return {$: 'Superscript', a: a, b: b};
	});
var $author$project$Lia$Markdown$Inline$Types$Underline = F2(
	function (a, b) {
		return {$: 'Underline', a: a, b: b};
	});
var $author$project$Lia$Markdown$Effect$Model$Element = F3(
	function (narrator, comment, paragraphs) {
		return {comment: comment, narrator: narrator, paragraphs: paragraphs};
	});
var $andre_dietrich$parser_combinators$Combine$succeed = function (res) {
	return $andre_dietrich$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return _Utils_Tuple3(
					state,
					stream,
					$elm$core$Result$Ok(res));
			}));
};
var $andre_dietrich$parser_combinators$Combine$withState = function (f) {
	return $andre_dietrich$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					$andre_dietrich$parser_combinators$Combine$app,
					f(state),
					state,
					stream);
			}));
};
var $author$project$Lia$Markdown$Effect$Parser$get_counter = function (idx) {
	return $andre_dietrich$parser_combinators$Combine$withState(
		function (s) {
			return $andre_dietrich$parser_combinators$Combine$succeed(
				function () {
					var _v0 = A2($elm$core$Dict$get, idx, s.effect_model.comments);
					if (_v0.$ === 'Just') {
						var e = _v0.a;
						return $elm$core$Array$length(e.paragraphs) - 1;
					} else {
						return 0;
					}
				}());
		});
};
var $andre_dietrich$parser_combinators$Combine$modifyState = function (f) {
	return $andre_dietrich$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					$andre_dietrich$parser_combinators$Combine$app,
					$andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0),
					f(state),
					stream);
			}));
};
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (maybeValue.$ === 'Just') {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Lia$Markdown$Effect$Types$isIn_ = F2(
	function (effect, id) {
		var _v0 = effect.end;
		if (_v0.$ === 'Nothing') {
			return _Utils_cmp(effect.begin, id) < 1;
		} else {
			var end = _v0.a;
			return (_Utils_cmp(effect.begin, id) < 1) && (_Utils_cmp(end, id) > 0);
		}
	});
var $author$project$Lia$Markdown$Effect$Types$isIn = F2(
	function (id, effect) {
		return A2(
			$elm$core$Maybe$withDefault,
			true,
			A2(
				$elm$core$Maybe$map,
				$author$project$Lia$Markdown$Effect$Types$isIn_(effect),
				id));
	});
var $author$project$Lia$Markdown$Effect$Script$Types$text = function (stdout) {
	if (stdout.$ === 'Text') {
		var str = stdout.a;
		return $elm$core$Maybe$Just(str);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Lia$Markdown$Inline$Stringify$inline2string = F3(
	function (effects, id, inline) {
		inline2string:
		while (true) {
			_v1$13:
			while (true) {
				switch (inline.$) {
					case 'Chars':
						var str = inline.a;
						return str;
					case 'Bold':
						var x = inline.a;
						var $temp$effects = effects,
							$temp$id = id,
							$temp$inline = x;
						effects = $temp$effects;
						id = $temp$id;
						inline = $temp$inline;
						continue inline2string;
					case 'Italic':
						var x = inline.a;
						var $temp$effects = effects,
							$temp$id = id,
							$temp$inline = x;
						effects = $temp$effects;
						id = $temp$id;
						inline = $temp$inline;
						continue inline2string;
					case 'Strike':
						var x = inline.a;
						var $temp$effects = effects,
							$temp$id = id,
							$temp$inline = x;
						effects = $temp$effects;
						id = $temp$id;
						inline = $temp$inline;
						continue inline2string;
					case 'Underline':
						var x = inline.a;
						var $temp$effects = effects,
							$temp$id = id,
							$temp$inline = x;
						effects = $temp$effects;
						id = $temp$id;
						inline = $temp$inline;
						continue inline2string;
					case 'Superscript':
						var x = inline.a;
						var $temp$effects = effects,
							$temp$id = id,
							$temp$inline = x;
						effects = $temp$effects;
						id = $temp$id;
						inline = $temp$inline;
						continue inline2string;
					case 'Verbatim':
						var str = inline.a;
						return str;
					case 'Formula':
						var str = inline.b;
						return str;
					case 'Ref':
						var ref = inline.a;
						return A3($author$project$Lia$Markdown$Inline$Stringify$ref2string, effects, id, ref);
					case 'IHTML':
						if (inline.a.$ === 'Node') {
							var _v2 = inline.a;
							var x = _v2.c;
							return A3($author$project$Lia$Markdown$Inline$Stringify$stringify_, effects, id, x);
						} else {
							break _v1$13;
						}
					case 'Container':
						var x = inline.a;
						return A3($author$project$Lia$Markdown$Inline$Stringify$stringify_, effects, id, x);
					case 'EInline':
						var e = inline.a;
						return A2($author$project$Lia$Markdown$Effect$Types$isIn, id, e) ? A3($author$project$Lia$Markdown$Inline$Stringify$stringify_, effects, id, e.content) : '';
					case 'Script':
						var i = inline.a;
						return A2(
							$elm$core$Maybe$withDefault,
							'',
							A2(
								$elm$core$Maybe$andThen,
								$author$project$Lia$Markdown$Effect$Script$Types$text,
								A2(
									$elm$core$Maybe$andThen,
									function ($) {
										return $.result;
									},
									A2($elm$core$Array$get, i, effects))));
					default:
						break _v1$13;
				}
			}
			return '';
		}
	});
var $author$project$Lia$Markdown$Inline$Stringify$ref2string = F3(
	function (effects, id, ref) {
		switch (ref.$) {
			case 'Movie':
				var alt = ref.a;
				return A3($author$project$Lia$Markdown$Inline$Stringify$stringify_, effects, id, alt);
			case 'Image':
				var alt = ref.a;
				return A3($author$project$Lia$Markdown$Inline$Stringify$stringify_, effects, id, alt);
			case 'Audio':
				var alt = ref.a;
				return A3($author$project$Lia$Markdown$Inline$Stringify$stringify_, effects, id, alt);
			case 'Link':
				var alt = ref.a;
				return A3($author$project$Lia$Markdown$Inline$Stringify$stringify_, effects, id, alt);
			case 'Mail':
				var alt = ref.a;
				return A3($author$project$Lia$Markdown$Inline$Stringify$stringify_, effects, id, alt);
			case 'Embed':
				var alt = ref.a;
				return A3($author$project$Lia$Markdown$Inline$Stringify$stringify_, effects, id, alt);
			case 'Preview_Lia':
				return 'preview-lia';
			case 'Preview_Link':
				return 'preview-link';
			default:
				return 'qr-code';
		}
	});
var $author$project$Lia$Markdown$Inline$Stringify$stringify_ = F2(
	function (effects, id) {
		return A2(
			$elm$core$Basics$composeR,
			$elm$core$List$map(
				A2($author$project$Lia$Markdown$Inline$Stringify$inline2string, effects, id)),
			$elm$core$String$concat);
	});
var $author$project$Lia$Markdown$Inline$Stringify$stringify = A2($author$project$Lia$Markdown$Inline$Stringify$stringify_, $elm$core$Array$empty, $elm$core$Maybe$Nothing);
var $author$project$Lia$Markdown$Effect$Parser$add_comment = F2(
	function (visible, _v0) {
		var idx = _v0.a;
		var temp_narrator = _v0.b;
		var par = _v0.c;
		var rslt = function (id2) {
			return $andre_dietrich$parser_combinators$Combine$succeed(
				_Utils_Tuple2(idx, id2));
		};
		var mod = function (s) {
			var narrator = A2(
				$elm$core$Maybe$withDefault,
				s.defines.narrator,
				A2($elm$core$Maybe$map, $elm$core$String$trim, temp_narrator));
			return _Utils_update(
				s,
				{
					effect_model: function () {
						var e = s.effect_model;
						return _Utils_update(
							e,
							{
								comments: function () {
									var _v1 = A2($elm$core$Dict$get, idx, e.comments);
									if (_v1.$ === 'Just') {
										var cmt = _v1.a;
										return A3(
											$elm$core$Dict$insert,
											idx,
											visible ? _Utils_update(
												cmt,
												{
													comment: cmt.comment + ('\n' + $author$project$Lia$Markdown$Inline$Stringify$stringify(par)),
													paragraphs: A2(
														$elm$core$Array$push,
														_Utils_Tuple2(_List_Nil, par),
														cmt.paragraphs)
												}) : _Utils_update(
												cmt,
												{
													comment: cmt.comment + ('\n' + $author$project$Lia$Markdown$Inline$Stringify$stringify(par))
												}),
											e.comments);
									} else {
										return A3(
											$elm$core$Dict$insert,
											idx,
											A3(
												$author$project$Lia$Markdown$Effect$Model$Element,
												narrator,
												$author$project$Lia$Markdown$Inline$Stringify$stringify(par),
												$elm$core$Array$fromList(
													visible ? _List_fromArray(
														[
															_Utils_Tuple2(_List_Nil, par)
														]) : _List_Nil)),
											e.comments);
									}
								}()
							});
					}()
				});
		};
		return A2(
			$andre_dietrich$parser_combinators$Combine$andThen,
			rslt,
			A2(
				$andre_dietrich$parser_combinators$Combine$keep,
				$author$project$Lia$Markdown$Effect$Parser$get_counter(idx),
				$andre_dietrich$parser_combinators$Combine$modifyState(mod)));
	});
var $andre_dietrich$parser_combinators$Combine$fail = function (m) {
	return $andre_dietrich$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return _Utils_Tuple3(
					state,
					stream,
					$elm$core$Result$Err(
						_List_fromArray(
							[m])));
			}));
};
var $andre_dietrich$parser_combinators$Combine$Num$unwrap = function (value) {
	if (value.$ === 'Just') {
		var v = value.a;
		return $andre_dietrich$parser_combinators$Combine$succeed(v);
	} else {
		return $andre_dietrich$parser_combinators$Combine$fail('impossible state in Combine.Num.unwrap');
	}
};
var $andre_dietrich$parser_combinators$Combine$Num$int = A2(
	$andre_dietrich$parser_combinators$Combine$onerror,
	'expected an int',
	A2(
		$andre_dietrich$parser_combinators$Combine$andThen,
		$andre_dietrich$parser_combinators$Combine$Num$unwrap,
		A2(
			$andre_dietrich$parser_combinators$Combine$map,
			$elm$core$String$toInt,
			$andre_dietrich$parser_combinators$Combine$regex('-?(?:0|[1-9]\\d*)'))));
var $author$project$Lia$Markdown$Effect$Parser$effect_number = function () {
	var state = function (n) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$keep,
			$andre_dietrich$parser_combinators$Combine$succeed(n),
			$andre_dietrich$parser_combinators$Combine$modifyState(
				function (s) {
					return _Utils_update(
						s,
						{
							effect_model: function () {
								if (_Utils_cmp(n, s.effect_model.effects) > 0) {
									var e = s.effect_model;
									return _Utils_update(
										e,
										{effects: n});
								} else {
									return s.effect_model;
								}
							}(),
							effect_number: A2($elm$core$List$cons, n, s.effect_number)
						});
				}));
	};
	return A2($andre_dietrich$parser_combinators$Combine$andThen, state, $andre_dietrich$parser_combinators$Combine$Num$int);
}();
var $author$project$Lia$Parser$Helper$c_frame = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$elm$core$String$length,
	$andre_dietrich$parser_combinators$Combine$regex('(`){3,}'));
var $author$project$Lia$Parser$Indentation$par_ = function (s) {
	return _Utils_eq(s.indentation, _List_Nil) ? $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0) : (s.indentation_skip ? $andre_dietrich$parser_combinators$Combine$skip(
		$andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0)) : $andre_dietrich$parser_combinators$Combine$skip(
		$andre_dietrich$parser_combinators$Combine$regex(
			$elm$core$String$concat(s.indentation))));
};
var $author$project$Lia$Parser$Indentation$skip_ = F2(
	function (bool, state) {
		return _Utils_update(
			state,
			{indentation_skip: bool});
	});
var $author$project$Lia$Parser$Indentation$check = A2(
	$andre_dietrich$parser_combinators$Combine$ignore,
	$andre_dietrich$parser_combinators$Combine$modifyState(
		$author$project$Lia$Parser$Indentation$skip_(false)),
	$andre_dietrich$parser_combinators$Combine$withState($author$project$Lia$Parser$Indentation$par_));
var $elm$core$List$singleton = function (value) {
	return _List_fromArray(
		[value]);
};
var $author$project$Lia$Markdown$Macro$Parser$code_block = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	A2($elm$core$Basics$composeR, $elm$core$String$concat, $elm$core$List$singleton),
	A2(
		$andre_dietrich$parser_combinators$Combine$manyTill,
		A2(
			$andre_dietrich$parser_combinators$Combine$keep,
			$andre_dietrich$parser_combinators$Combine$regex('(.(?!```))*\\n?'),
			$andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check)),
		A2(
			$andre_dietrich$parser_combinators$Combine$keep,
			$author$project$Lia$Parser$Helper$c_frame,
			$andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check))));
var $author$project$Lia$Markdown$Macro$Parser$debugEnvironment = F2(
	function (env, code) {
		return env ? ('<lia-keep><pre id=\'ls\'><code style=\'background: #CCCCCC; white-space: pre;\'>' + (code + '</code></pre></lia-keep>')) : code;
	});
var $elm$regex$Regex$replace = _Regex_replaceAtMost(_Regex_infinity);
var $author$project$Lia$Markdown$Macro$Parser$debugReplace = F3(
	function (pat, fn, string) {
		var _v0 = $elm$regex$Regex$fromString(pat);
		if (_v0.$ === 'Just') {
			var regex = _v0.a;
			return A3($elm$regex$Regex$replace, regex, fn, string);
		} else {
			return string;
		}
	});
var $author$project$Lia$Markdown$Macro$Parser$debug = function (env) {
	return A2(
		$elm$core$Basics$composeR,
		A2(
			$author$project$Lia$Markdown$Macro$Parser$debugReplace,
			'[*+`{}#^|$\\[\\]]',
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.match;
				},
				$elm$core$Basics$append('\\'))),
		A2(
			$elm$core$Basics$composeR,
			A2($elm$core$String$replace, '<', '\\<'),
			A2(
				$elm$core$Basics$composeR,
				A2($elm$core$String$replace, '>', '\\>'),
				A2(
					$elm$core$Basics$composeR,
					A2($elm$core$String$replace, '\\\\`', '`'),
					A2(
						$elm$core$Basics$composeR,
						A2($elm$core$String$replace, '\n', '<br id=\'ls\'>'),
						A2(
							$elm$core$Basics$composeR,
							A2(
								$author$project$Lia$Markdown$Macro$Parser$debugReplace,
								'@[a-zA-Z]+[\\w\\d._\\-]*',
								function (x) {
									return (x.match !== '@input') ? ('@-' + x.match) : x.match;
								}),
							A2(
								$elm$core$Basics$composeR,
								A2($elm$core$String$replace, '\\<br id=\'ls\'\\>', '<br id=\'ls\'>'),
								$author$project$Lia$Markdown$Macro$Parser$debugEnvironment(env))))))));
};
var $author$project$Lia$Markdown$Macro$Parser$get = F2(
	function (name, def) {
		var _v0 = A2($elm$core$String$startsWith, '@@', name) ? _Utils_Tuple3(
			true,
			true,
			A2($elm$core$String$dropLeft, 2, name)) : (A2($elm$core$String$startsWith, '@-@', name) ? _Utils_Tuple3(
			true,
			false,
			A2($elm$core$String$dropLeft, 3, name)) : _Utils_Tuple3(
			false,
			false,
			A2($elm$core$String$dropLeft, 1, name)));
		var isDebug = _v0.a;
		var deepDebug = _v0.b;
		var id = _v0.c;
		return A2(
			$elm$core$Maybe$map,
			function (x) {
				return _Utils_Tuple3(isDebug, deepDebug, x);
			},
			function () {
				switch (id) {
					case 'author':
						return $elm$core$Maybe$Just(def.author);
					case 'date':
						return $elm$core$Maybe$Just(def.date);
					case 'email':
						return $elm$core$Maybe$Just(def.email);
					case 'version':
						return $elm$core$Maybe$Just(def.version);
					case 'section':
						return $elm$core$Maybe$Just(
							$elm$core$String$fromInt(def.section));
					case 'uid':
						return $elm$core$Maybe$Just(
							$elm$core$String$fromInt(def.section) + ('_' + $elm$core$String$fromInt(def.uid)));
					default:
						return A2($elm$core$Dict$get, id, def.macro);
				}
			}());
	});
var $elm$core$String$lines = _String_lines;
var $andre_dietrich$parser_combinators$Combine$many = function (p) {
	var accumulate = F3(
		function (acc, state, stream) {
			accumulate:
			while (true) {
				var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
				if (_v0.c.$ === 'Ok') {
					var rstate = _v0.a;
					var rstream = _v0.b;
					var res = _v0.c.a;
					if (_Utils_eq(stream, rstream)) {
						return _Utils_Tuple3(
							rstate,
							rstream,
							$elm$core$List$reverse(acc));
					} else {
						var $temp$acc = A2($elm$core$List$cons, res, acc),
							$temp$state = rstate,
							$temp$stream = rstream;
						acc = $temp$acc;
						state = $temp$state;
						stream = $temp$stream;
						continue accumulate;
					}
				} else {
					return _Utils_Tuple3(
						state,
						stream,
						$elm$core$List$reverse(acc));
				}
			}
		});
	return $andre_dietrich$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				var _v1 = A3(accumulate, _List_Nil, state, stream);
				var rstate = _v1.a;
				var rstream = _v1.b;
				var res = _v1.c;
				return _Utils_Tuple3(
					rstate,
					rstream,
					$elm$core$Result$Ok(res));
			}));
};
var $andre_dietrich$parser_combinators$Combine$many1 = function (p) {
	return A2(
		$andre_dietrich$parser_combinators$Combine$andMap,
		$andre_dietrich$parser_combinators$Combine$many(p),
		A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$List$cons, p));
};
var $andre_dietrich$parser_combinators$Combine$modifyInput = function (f) {
	return $andre_dietrich$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					$andre_dietrich$parser_combinators$Combine$app,
					$andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0),
					state,
					_Utils_update(
						stream,
						{
							input: f(stream.input)
						}));
			}));
};
var $andre_dietrich$parser_combinators$Combine$optional = F2(
	function (res, p) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$or,
			p,
			$andre_dietrich$parser_combinators$Combine$succeed(res));
	});
var $author$project$Lia$Utils$toJSstring = A2(
	$elm$core$Basics$composeR,
	$elm$core$String$split('\\'),
	$elm$core$String$join('\\\\'));
var $author$project$Lia$Markdown$Macro$Parser$parameter = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$author$project$Lia$Utils$toJSstring,
	$andre_dietrich$parser_combinators$Combine$choice(
		_List_fromArray(
			[
				A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$author$project$Lia$Parser$Helper$c_frame,
				A2(
					$andre_dietrich$parser_combinators$Combine$keep,
					$andre_dietrich$parser_combinators$Combine$regex('(([^`]+|(`[^`]+)|(``[^`]+))|\\n)+'),
					$author$project$Lia$Parser$Helper$c_frame)),
				A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$andre_dietrich$parser_combinators$Combine$string('`'),
				A2(
					$andre_dietrich$parser_combinators$Combine$keep,
					$andre_dietrich$parser_combinators$Combine$regex('[^`\n]+'),
					$andre_dietrich$parser_combinators$Combine$string('`'))),
				$andre_dietrich$parser_combinators$Combine$regex('[^),]+')
			])));
var $andre_dietrich$parser_combinators$Combine$between = F3(
	function (lp, rp, p) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			rp,
			A2($andre_dietrich$parser_combinators$Combine$keep, p, lp));
	});
var $andre_dietrich$parser_combinators$Combine$parens = A2(
	$andre_dietrich$parser_combinators$Combine$between,
	$andre_dietrich$parser_combinators$Combine$string('('),
	$andre_dietrich$parser_combinators$Combine$string(')'));
var $andre_dietrich$parser_combinators$Combine$sepBy1 = F2(
	function (sep, p) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			$andre_dietrich$parser_combinators$Combine$many(
				A2($andre_dietrich$parser_combinators$Combine$keep, p, sep)),
			A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$List$cons, p));
	});
var $andre_dietrich$parser_combinators$Combine$sepBy = F2(
	function (sep, p) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$or,
			A2($andre_dietrich$parser_combinators$Combine$sepBy1, sep, p),
			$andre_dietrich$parser_combinators$Combine$succeed(_List_Nil));
	});
var $author$project$Lia$Markdown$Macro$Parser$parameter_list = A2(
	$andre_dietrich$parser_combinators$Combine$optional,
	_List_Nil,
	$andre_dietrich$parser_combinators$Combine$parens(
		A2(
			$andre_dietrich$parser_combinators$Combine$sepBy,
			$andre_dietrich$parser_combinators$Combine$string(','),
			$author$project$Lia$Markdown$Macro$Parser$parameter)));
var $author$project$Lia$Markdown$Macro$Parser$pattern = A2(
	$andre_dietrich$parser_combinators$Combine$andMap,
	$andre_dietrich$parser_combinators$Combine$regex('\\w[\\w\\d._]+'),
	A2(
		$andre_dietrich$parser_combinators$Combine$andMap,
		A2(
			$andre_dietrich$parser_combinators$Combine$optional,
			false,
			A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				true,
				$andre_dietrich$parser_combinators$Combine$string('\''))),
		A2(
			$andre_dietrich$parser_combinators$Combine$map,
			F3(
				function (ad, escape, name) {
					return _Utils_Tuple2(
						_Utils_ap(ad, name),
						escape);
				}),
			$andre_dietrich$parser_combinators$Combine$regex('@-?@?'))));
var $andre_dietrich$parser_combinators$Combine$putState = function (state) {
	return $andre_dietrich$parser_combinators$Combine$Parser(
		F2(
			function (_v0, stream) {
				return A3(
					$andre_dietrich$parser_combinators$Combine$app,
					$andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0),
					state,
					stream);
			}));
};
var $andre_dietrich$parser_combinators$Combine$InputStream = F3(
	function (data, input, position) {
		return {data: data, input: input, position: position};
	});
var $andre_dietrich$parser_combinators$Combine$initStream = function (s) {
	return A3($andre_dietrich$parser_combinators$Combine$InputStream, s, s, 0);
};
var $andre_dietrich$parser_combinators$Combine$runParser = F3(
	function (p, st, s) {
		var _v0 = A3(
			$andre_dietrich$parser_combinators$Combine$app,
			p,
			st,
			$andre_dietrich$parser_combinators$Combine$initStream(s));
		if (_v0.c.$ === 'Ok') {
			var state = _v0.a;
			var stream = _v0.b;
			var res = _v0.c.a;
			return $elm$core$Result$Ok(
				_Utils_Tuple3(state, stream, res));
		} else {
			var state = _v0.a;
			var stream = _v0.b;
			var ms = _v0.c.a;
			return $elm$core$Result$Err(
				_Utils_Tuple3(state, stream, ms));
		}
	});
var $author$project$Lia$Markdown$Macro$Parser$simple_macro = A2(
	$andre_dietrich$parser_combinators$Combine$andMap,
	$author$project$Lia$Markdown$Macro$Parser$parameter_list,
	A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair, $author$project$Lia$Markdown$Macro$Parser$pattern));
var $author$project$Lia$Utils$toEscapeString = function (str) {
	return A3(
		$elm$core$String$replace,
		'\n',
		'\\n',
		A3(
			$elm$core$String$replace,
			'`',
			'\\`',
			A3(
				$elm$core$String$replace,
				'\'',
				'\\\'',
				A3($elm$core$String$replace, '\"', '\\\"', str))));
};
var $author$project$Lia$Markdown$Macro$Parser$uid_update = function (state) {
	var def = state.defines;
	return _Utils_update(
		state,
		{
			defines: _Utils_update(
				def,
				{uid: def.uid + 1})
		});
};
var $author$project$Lia$Markdown$Macro$Parser$uid_macro = A2(
	$andre_dietrich$parser_combinators$Combine$onsuccess,
	_Utils_Tuple2(
		_Utils_Tuple2('@uid', false),
		_List_Nil),
	A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		$andre_dietrich$parser_combinators$Combine$modifyState($author$project$Lia$Markdown$Macro$Parser$uid_update),
		$andre_dietrich$parser_combinators$Combine$string('@uid')));
var $author$project$Lia$Markdown$Macro$Parser$eval_parameter = F2(
	function (param, _v7) {
		var state = _v7.a;
		var i = _v7.b;
		var code = _v7.c;
		var _v8 = A2($author$project$Lia$Markdown$Macro$Parser$macro_parse, state, param);
		var new_state = _v8.a;
		var new_param = _v8.b;
		return _Utils_Tuple3(
			new_state,
			i + 1,
			A3(
				$elm$core$String$replace,
				'@' + $elm$core$String$fromInt(i),
				new_param,
				A3(
					$elm$core$String$replace,
					'@\'' + $elm$core$String$fromInt(i),
					$author$project$Lia$Utils$toEscapeString(new_param),
					code)));
	});
var $author$project$Lia$Markdown$Macro$Parser$inject_macro = function (_v2) {
	var _v3 = _v2.a;
	var name = _v3.a;
	var escape = _v3.b;
	var params = _v2.b;
	var inject = function (state) {
		var _v4 = A2($author$project$Lia$Markdown$Macro$Parser$get, name, state.defines);
		if (_v4.$ === 'Just') {
			var _v5 = _v4.a;
			var isDebug = _v5.a;
			var deepDebug = _v5.b;
			var code = _v5.c;
			var code_ = _Utils_eq(state.indentation, _List_Nil) ? code : A2(
				$elm$core$String$join,
				'\n' + $elm$core$String$concat(state.indentation),
				$elm$core$String$lines(code));
			var _v6 = A3(
				$elm$core$List$foldl,
				$author$project$Lia$Markdown$Macro$Parser$eval_parameter,
				_Utils_Tuple3(state, 0, code_),
				params);
			var new_state = _v6.a;
			var new_code = _v6.c;
			return A2(
				$andre_dietrich$parser_combinators$Combine$keep,
				$andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0),
				A2(
					$andre_dietrich$parser_combinators$Combine$keep,
					$andre_dietrich$parser_combinators$Combine$putState(new_state),
					$andre_dietrich$parser_combinators$Combine$modifyInput(
						$elm$core$Basics$append(
							(isDebug ? $author$project$Lia$Markdown$Macro$Parser$debug(deepDebug) : $elm$core$Basics$identity)(
								escape ? $author$project$Lia$Utils$toEscapeString(new_code) : new_code)))));
		} else {
			return $andre_dietrich$parser_combinators$Combine$fail('macro definition not found');
		}
	};
	return $andre_dietrich$parser_combinators$Combine$withState(inject);
};
var $author$project$Lia$Markdown$Macro$Parser$macro_parse = F2(
	function (defines, str) {
		var _v0 = A3(
			$andre_dietrich$parser_combinators$Combine$runParser,
			A2(
				$andre_dietrich$parser_combinators$Combine$map,
				$elm$core$String$concat,
				$andre_dietrich$parser_combinators$Combine$many1(
					A2(
						$andre_dietrich$parser_combinators$Combine$or,
						$andre_dietrich$parser_combinators$Combine$regex('@input[^@]+'),
						A2(
							$andre_dietrich$parser_combinators$Combine$keep,
							$andre_dietrich$parser_combinators$Combine$regex('[^@]+'),
							$author$project$Lia$Markdown$Macro$Parser$cyclic$macro())))),
			defines,
			str);
		if (_v0.$ === 'Ok') {
			var _v1 = _v0.a;
			var state = _v1.a;
			var s = _v1.c;
			return _Utils_Tuple2(state, s);
		} else {
			return _Utils_Tuple2(defines, str);
		}
	});
function $author$project$Lia$Markdown$Macro$Parser$cyclic$macro() {
	return $andre_dietrich$parser_combinators$Combine$skip(
		$andre_dietrich$parser_combinators$Combine$maybe(
			$andre_dietrich$parser_combinators$Combine$many1(
				$andre_dietrich$parser_combinators$Combine$choice(
					_List_fromArray(
						[
							A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Macro$Parser$inject_macro, $author$project$Lia$Markdown$Macro$Parser$uid_macro),
							A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Macro$Parser$inject_macro, $author$project$Lia$Markdown$Macro$Parser$simple_macro),
							$author$project$Lia$Markdown$Macro$Parser$cyclic$macro_listing()
						])))));
}
function $author$project$Lia$Markdown$Macro$Parser$cyclic$macro_listing() {
	return A2(
		$andre_dietrich$parser_combinators$Combine$andThen,
		function (name) {
			return A2(
				$andre_dietrich$parser_combinators$Combine$andThen,
				function (params) {
					return A2(
						$andre_dietrich$parser_combinators$Combine$andThen,
						function (p) {
							return $author$project$Lia$Markdown$Macro$Parser$inject_macro(
								_Utils_Tuple2(name, p));
						},
						A2(
							$andre_dietrich$parser_combinators$Combine$map,
							$elm$core$List$append(params),
							$author$project$Lia$Markdown$Macro$Parser$code_block));
				},
				A2(
					$andre_dietrich$parser_combinators$Combine$ignore,
					$andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\n'),
					$author$project$Lia$Markdown$Macro$Parser$parameter_list));
		},
		A2(
			$andre_dietrich$parser_combinators$Combine$keep,
			$author$project$Lia$Markdown$Macro$Parser$pattern,
			A2(
				$andre_dietrich$parser_combinators$Combine$keep,
				$andre_dietrich$parser_combinators$Combine$regex('[\t ]*[a-zA-Z0-9_]*[\t ]*'),
				$author$project$Lia$Parser$Helper$c_frame)));
}
try {
	var $author$project$Lia$Markdown$Macro$Parser$macro = $author$project$Lia$Markdown$Macro$Parser$cyclic$macro();
	$author$project$Lia$Markdown$Macro$Parser$cyclic$macro = function () {
		return $author$project$Lia$Markdown$Macro$Parser$macro;
	};
	var $author$project$Lia$Markdown$Macro$Parser$macro_listing = $author$project$Lia$Markdown$Macro$Parser$cyclic$macro_listing();
	$author$project$Lia$Markdown$Macro$Parser$cyclic$macro_listing = function () {
		return $author$project$Lia$Markdown$Macro$Parser$macro_listing;
	};
} catch ($) {
	throw 'Some top-level definitions from `Lia.Markdown.Macro.Parser` are causing infinite recursion:\n\n  ┌─────┐\n  │    eval_parameter\n  │     ↓\n  │    macro\n  │     ↓\n  │    inject_macro\n  │     ↓\n  │    macro_listing\n  │     ↓\n  │    macro_parse\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $author$project$Lia$Markdown$Effect$Parser$reset_effect_number = $andre_dietrich$parser_combinators$Combine$modifyState(
	function (s) {
		return _Utils_update(
			s,
			{
				effect_number: A2($elm$core$List$drop, 1, s.effect_number)
			});
	});
var $author$project$Lia$Parser$Helper$spaces1 = $andre_dietrich$parser_combinators$Combine$regex('[\t ]+');
var $author$project$Lia$Markdown$Effect$Parser$hidden_comment = $andre_dietrich$parser_combinators$Combine$skip(
	A2(
		$andre_dietrich$parser_combinators$Combine$andThen,
		$author$project$Lia$Markdown$Effect$Parser$add_comment(false),
		A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			$author$project$Lia$Markdown$Effect$Parser$reset_effect_number,
			A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				A2(
					$andre_dietrich$parser_combinators$Combine$manyTill,
					$andre_dietrich$parser_combinators$Combine$Char$anyChar,
					$andre_dietrich$parser_combinators$Combine$string('-->')),
				A2(
					$andre_dietrich$parser_combinators$Combine$ignore,
					$andre_dietrich$parser_combinators$Combine$regex('}}--[\t ]*'),
					A2(
						$andre_dietrich$parser_combinators$Combine$andMap,
						$andre_dietrich$parser_combinators$Combine$maybe(
							A2(
								$andre_dietrich$parser_combinators$Combine$keep,
								$andre_dietrich$parser_combinators$Combine$regex('[A-Za-z0-9 ]+'),
								A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Macro$Parser$macro, $author$project$Lia$Parser$Helper$spaces1))),
						A2(
							$andre_dietrich$parser_combinators$Combine$map,
							F3(
								function (i, voice, text) {
									return _Utils_Tuple3(
										i,
										voice,
										_List_fromArray(
											[
												A2(
												$author$project$Lia$Markdown$Inline$Types$Chars,
												$elm$core$String$trim(
													$elm$core$String$fromList(text)),
												_List_Nil)
											]));
								}),
							A2(
								$andre_dietrich$parser_combinators$Combine$keep,
								$author$project$Lia$Markdown$Effect$Parser$effect_number,
								$andre_dietrich$parser_combinators$Combine$regex('<!--[\t ]*--{{')))))))));
var $author$project$Lia$Markdown$Inline$Parser$comments = $andre_dietrich$parser_combinators$Combine$skip(
	$andre_dietrich$parser_combinators$Combine$many(
		A2(
			$andre_dietrich$parser_combinators$Combine$or,
			$andre_dietrich$parser_combinators$Combine$skip(
				$author$project$Lia$Markdown$Inline$Parser$comment($andre_dietrich$parser_combinators$Combine$Char$anyChar)),
			$author$project$Lia$Markdown$Effect$Parser$hidden_comment)));
var $author$project$Lia$Markdown$HTML$Attributes$base = F2(
	function (url, _v0) {
		var key = _v0.a;
		var value = _v0.b;
		return _Utils_Tuple2(
			key,
			((key === 'src') || ((key === 'href') || ((key === 'data') || ((key === 'data-src') || ((key === 'formaction') || (key === 'poster')))))) ? A2($author$project$Lia$Markdown$HTML$Attributes$toURL, url, value) : value);
	});
var $author$project$Lia$Markdown$HTML$NamedCharacterReferences$dict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('Aacute', 'Á'),
			_Utils_Tuple2('aacute', 'á'),
			_Utils_Tuple2('Abreve', 'Ă'),
			_Utils_Tuple2('abreve', 'ă'),
			_Utils_Tuple2('ac', '∾'),
			_Utils_Tuple2('acd', '∿'),
			_Utils_Tuple2('acE', '∾̳'),
			_Utils_Tuple2('Acirc', 'Â'),
			_Utils_Tuple2('acirc', 'â'),
			_Utils_Tuple2('acute', '´'),
			_Utils_Tuple2('Acy', 'А'),
			_Utils_Tuple2('acy', 'а'),
			_Utils_Tuple2('AElig', 'Æ'),
			_Utils_Tuple2('aelig', 'æ'),
			_Utils_Tuple2('af', '\u2061'),
			_Utils_Tuple2('Afr', '\uD835\uDD04'),
			_Utils_Tuple2('afr', '\uD835\uDD1E'),
			_Utils_Tuple2('Agrave', 'À'),
			_Utils_Tuple2('agrave', 'à'),
			_Utils_Tuple2('alefsym', 'ℵ'),
			_Utils_Tuple2('aleph', 'ℵ'),
			_Utils_Tuple2('Alpha', 'Α'),
			_Utils_Tuple2('alpha', 'α'),
			_Utils_Tuple2('Amacr', 'Ā'),
			_Utils_Tuple2('amacr', 'ā'),
			_Utils_Tuple2('amalg', '⨿'),
			_Utils_Tuple2('amp', '&'),
			_Utils_Tuple2('AMP', '&'),
			_Utils_Tuple2('andand', '⩕'),
			_Utils_Tuple2('And', '⩓'),
			_Utils_Tuple2('and', '∧'),
			_Utils_Tuple2('andd', '⩜'),
			_Utils_Tuple2('andslope', '⩘'),
			_Utils_Tuple2('andv', '⩚'),
			_Utils_Tuple2('ang', '∠'),
			_Utils_Tuple2('ange', '⦤'),
			_Utils_Tuple2('angle', '∠'),
			_Utils_Tuple2('angmsdaa', '⦨'),
			_Utils_Tuple2('angmsdab', '⦩'),
			_Utils_Tuple2('angmsdac', '⦪'),
			_Utils_Tuple2('angmsdad', '⦫'),
			_Utils_Tuple2('angmsdae', '⦬'),
			_Utils_Tuple2('angmsdaf', '⦭'),
			_Utils_Tuple2('angmsdag', '⦮'),
			_Utils_Tuple2('angmsdah', '⦯'),
			_Utils_Tuple2('angmsd', '∡'),
			_Utils_Tuple2('angrt', '∟'),
			_Utils_Tuple2('angrtvb', '⊾'),
			_Utils_Tuple2('angrtvbd', '⦝'),
			_Utils_Tuple2('angsph', '∢'),
			_Utils_Tuple2('angst', 'Å'),
			_Utils_Tuple2('angzarr', '⍼'),
			_Utils_Tuple2('Aogon', 'Ą'),
			_Utils_Tuple2('aogon', 'ą'),
			_Utils_Tuple2('Aopf', '\uD835\uDD38'),
			_Utils_Tuple2('aopf', '\uD835\uDD52'),
			_Utils_Tuple2('apacir', '⩯'),
			_Utils_Tuple2('ap', '≈'),
			_Utils_Tuple2('apE', '⩰'),
			_Utils_Tuple2('ape', '≊'),
			_Utils_Tuple2('apid', '≋'),
			_Utils_Tuple2('apos', '\''),
			_Utils_Tuple2('ApplyFunction', '\u2061'),
			_Utils_Tuple2('approx', '≈'),
			_Utils_Tuple2('approxeq', '≊'),
			_Utils_Tuple2('Aring', 'Å'),
			_Utils_Tuple2('aring', 'å'),
			_Utils_Tuple2('Ascr', '\uD835\uDC9C'),
			_Utils_Tuple2('ascr', '\uD835\uDCB6'),
			_Utils_Tuple2('Assign', '≔'),
			_Utils_Tuple2('ast', '*'),
			_Utils_Tuple2('asymp', '≈'),
			_Utils_Tuple2('asympeq', '≍'),
			_Utils_Tuple2('Atilde', 'Ã'),
			_Utils_Tuple2('atilde', 'ã'),
			_Utils_Tuple2('Auml', 'Ä'),
			_Utils_Tuple2('auml', 'ä'),
			_Utils_Tuple2('awconint', '∳'),
			_Utils_Tuple2('awint', '⨑'),
			_Utils_Tuple2('backcong', '≌'),
			_Utils_Tuple2('backepsilon', '϶'),
			_Utils_Tuple2('backprime', '‵'),
			_Utils_Tuple2('backsim', '∽'),
			_Utils_Tuple2('backsimeq', '⋍'),
			_Utils_Tuple2('Backslash', '∖'),
			_Utils_Tuple2('Barv', '⫧'),
			_Utils_Tuple2('barvee', '⊽'),
			_Utils_Tuple2('barwed', '⌅'),
			_Utils_Tuple2('Barwed', '⌆'),
			_Utils_Tuple2('barwedge', '⌅'),
			_Utils_Tuple2('bbrk', '⎵'),
			_Utils_Tuple2('bbrktbrk', '⎶'),
			_Utils_Tuple2('bcong', '≌'),
			_Utils_Tuple2('Bcy', 'Б'),
			_Utils_Tuple2('bcy', 'б'),
			_Utils_Tuple2('bdquo', '„'),
			_Utils_Tuple2('becaus', '∵'),
			_Utils_Tuple2('because', '∵'),
			_Utils_Tuple2('Because', '∵'),
			_Utils_Tuple2('bemptyv', '⦰'),
			_Utils_Tuple2('bepsi', '϶'),
			_Utils_Tuple2('bernou', 'ℬ'),
			_Utils_Tuple2('Bernoullis', 'ℬ'),
			_Utils_Tuple2('Beta', 'Β'),
			_Utils_Tuple2('beta', 'β'),
			_Utils_Tuple2('beth', 'ℶ'),
			_Utils_Tuple2('between', '≬'),
			_Utils_Tuple2('Bfr', '\uD835\uDD05'),
			_Utils_Tuple2('bfr', '\uD835\uDD1F'),
			_Utils_Tuple2('bigcap', '⋂'),
			_Utils_Tuple2('bigcirc', '◯'),
			_Utils_Tuple2('bigcup', '⋃'),
			_Utils_Tuple2('bigodot', '⨀'),
			_Utils_Tuple2('bigoplus', '⨁'),
			_Utils_Tuple2('bigotimes', '⨂'),
			_Utils_Tuple2('bigsqcup', '⨆'),
			_Utils_Tuple2('bigstar', '★'),
			_Utils_Tuple2('bigtriangledown', '▽'),
			_Utils_Tuple2('bigtriangleup', '△'),
			_Utils_Tuple2('biguplus', '⨄'),
			_Utils_Tuple2('bigvee', '⋁'),
			_Utils_Tuple2('bigwedge', '⋀'),
			_Utils_Tuple2('bkarow', '⤍'),
			_Utils_Tuple2('blacklozenge', '⧫'),
			_Utils_Tuple2('blacksquare', '▪'),
			_Utils_Tuple2('blacktriangle', '▴'),
			_Utils_Tuple2('blacktriangledown', '▾'),
			_Utils_Tuple2('blacktriangleleft', '◂'),
			_Utils_Tuple2('blacktriangleright', '▸'),
			_Utils_Tuple2('blank', '␣'),
			_Utils_Tuple2('blk12', '▒'),
			_Utils_Tuple2('blk14', '░'),
			_Utils_Tuple2('blk34', '▓'),
			_Utils_Tuple2('block', '█'),
			_Utils_Tuple2('bne', '=⃥'),
			_Utils_Tuple2('bnequiv', '≡⃥'),
			_Utils_Tuple2('bNot', '⫭'),
			_Utils_Tuple2('bnot', '⌐'),
			_Utils_Tuple2('Bopf', '\uD835\uDD39'),
			_Utils_Tuple2('bopf', '\uD835\uDD53'),
			_Utils_Tuple2('bot', '⊥'),
			_Utils_Tuple2('bottom', '⊥'),
			_Utils_Tuple2('bowtie', '⋈'),
			_Utils_Tuple2('boxbox', '⧉'),
			_Utils_Tuple2('boxdl', '┐'),
			_Utils_Tuple2('boxdL', '╕'),
			_Utils_Tuple2('boxDl', '╖'),
			_Utils_Tuple2('boxDL', '╗'),
			_Utils_Tuple2('boxdr', '┌'),
			_Utils_Tuple2('boxdR', '╒'),
			_Utils_Tuple2('boxDr', '╓'),
			_Utils_Tuple2('boxDR', '╔'),
			_Utils_Tuple2('boxh', '─'),
			_Utils_Tuple2('boxH', '═'),
			_Utils_Tuple2('boxhd', '┬'),
			_Utils_Tuple2('boxHd', '╤'),
			_Utils_Tuple2('boxhD', '╥'),
			_Utils_Tuple2('boxHD', '╦'),
			_Utils_Tuple2('boxhu', '┴'),
			_Utils_Tuple2('boxHu', '╧'),
			_Utils_Tuple2('boxhU', '╨'),
			_Utils_Tuple2('boxHU', '╩'),
			_Utils_Tuple2('boxminus', '⊟'),
			_Utils_Tuple2('boxplus', '⊞'),
			_Utils_Tuple2('boxtimes', '⊠'),
			_Utils_Tuple2('boxul', '┘'),
			_Utils_Tuple2('boxuL', '╛'),
			_Utils_Tuple2('boxUl', '╜'),
			_Utils_Tuple2('boxUL', '╝'),
			_Utils_Tuple2('boxur', '└'),
			_Utils_Tuple2('boxuR', '╘'),
			_Utils_Tuple2('boxUr', '╙'),
			_Utils_Tuple2('boxUR', '╚'),
			_Utils_Tuple2('boxv', '│'),
			_Utils_Tuple2('boxV', '║'),
			_Utils_Tuple2('boxvh', '┼'),
			_Utils_Tuple2('boxvH', '╪'),
			_Utils_Tuple2('boxVh', '╫'),
			_Utils_Tuple2('boxVH', '╬'),
			_Utils_Tuple2('boxvl', '┤'),
			_Utils_Tuple2('boxvL', '╡'),
			_Utils_Tuple2('boxVl', '╢'),
			_Utils_Tuple2('boxVL', '╣'),
			_Utils_Tuple2('boxvr', '├'),
			_Utils_Tuple2('boxvR', '╞'),
			_Utils_Tuple2('boxVr', '╟'),
			_Utils_Tuple2('boxVR', '╠'),
			_Utils_Tuple2('bprime', '‵'),
			_Utils_Tuple2('breve', '˘'),
			_Utils_Tuple2('Breve', '˘'),
			_Utils_Tuple2('brvbar', '¦'),
			_Utils_Tuple2('bscr', '\uD835\uDCB7'),
			_Utils_Tuple2('Bscr', 'ℬ'),
			_Utils_Tuple2('bsemi', '⁏'),
			_Utils_Tuple2('bsim', '∽'),
			_Utils_Tuple2('bsime', '⋍'),
			_Utils_Tuple2('bsolb', '⧅'),
			_Utils_Tuple2('bsol', '\\'),
			_Utils_Tuple2('bsolhsub', '⟈'),
			_Utils_Tuple2('bull', '•'),
			_Utils_Tuple2('bullet', '•'),
			_Utils_Tuple2('bump', '≎'),
			_Utils_Tuple2('bumpE', '⪮'),
			_Utils_Tuple2('bumpe', '≏'),
			_Utils_Tuple2('Bumpeq', '≎'),
			_Utils_Tuple2('bumpeq', '≏'),
			_Utils_Tuple2('Cacute', 'Ć'),
			_Utils_Tuple2('cacute', 'ć'),
			_Utils_Tuple2('capand', '⩄'),
			_Utils_Tuple2('capbrcup', '⩉'),
			_Utils_Tuple2('capcap', '⩋'),
			_Utils_Tuple2('cap', '∩'),
			_Utils_Tuple2('Cap', '⋒'),
			_Utils_Tuple2('capcup', '⩇'),
			_Utils_Tuple2('capdot', '⩀'),
			_Utils_Tuple2('CapitalDifferentialD', 'ⅅ'),
			_Utils_Tuple2('caps', '∩︀'),
			_Utils_Tuple2('caret', '⁁'),
			_Utils_Tuple2('caron', 'ˇ'),
			_Utils_Tuple2('Cayleys', 'ℭ'),
			_Utils_Tuple2('ccaps', '⩍'),
			_Utils_Tuple2('Ccaron', 'Č'),
			_Utils_Tuple2('ccaron', 'č'),
			_Utils_Tuple2('Ccedil', 'Ç'),
			_Utils_Tuple2('ccedil', 'ç'),
			_Utils_Tuple2('Ccirc', 'Ĉ'),
			_Utils_Tuple2('ccirc', 'ĉ'),
			_Utils_Tuple2('Cconint', '∰'),
			_Utils_Tuple2('ccups', '⩌'),
			_Utils_Tuple2('ccupssm', '⩐'),
			_Utils_Tuple2('Cdot', 'Ċ'),
			_Utils_Tuple2('cdot', 'ċ'),
			_Utils_Tuple2('cedil', '¸'),
			_Utils_Tuple2('Cedilla', '¸'),
			_Utils_Tuple2('cemptyv', '⦲'),
			_Utils_Tuple2('cent', '¢'),
			_Utils_Tuple2('centerdot', '·'),
			_Utils_Tuple2('CenterDot', '·'),
			_Utils_Tuple2('cfr', '\uD835\uDD20'),
			_Utils_Tuple2('Cfr', 'ℭ'),
			_Utils_Tuple2('CHcy', 'Ч'),
			_Utils_Tuple2('chcy', 'ч'),
			_Utils_Tuple2('check', '✓'),
			_Utils_Tuple2('checkmark', '✓'),
			_Utils_Tuple2('Chi', 'Χ'),
			_Utils_Tuple2('chi', 'χ'),
			_Utils_Tuple2('circ', 'ˆ'),
			_Utils_Tuple2('circeq', '≗'),
			_Utils_Tuple2('circlearrowleft', '↺'),
			_Utils_Tuple2('circlearrowright', '↻'),
			_Utils_Tuple2('circledast', '⊛'),
			_Utils_Tuple2('circledcirc', '⊚'),
			_Utils_Tuple2('circleddash', '⊝'),
			_Utils_Tuple2('CircleDot', '⊙'),
			_Utils_Tuple2('circledR', '®'),
			_Utils_Tuple2('circledS', 'Ⓢ'),
			_Utils_Tuple2('CircleMinus', '⊖'),
			_Utils_Tuple2('CirclePlus', '⊕'),
			_Utils_Tuple2('CircleTimes', '⊗'),
			_Utils_Tuple2('cir', '○'),
			_Utils_Tuple2('cirE', '⧃'),
			_Utils_Tuple2('cire', '≗'),
			_Utils_Tuple2('cirfnint', '⨐'),
			_Utils_Tuple2('cirmid', '⫯'),
			_Utils_Tuple2('cirscir', '⧂'),
			_Utils_Tuple2('ClockwiseContourIntegral', '∲'),
			_Utils_Tuple2('CloseCurlyDoubleQuote', '”'),
			_Utils_Tuple2('CloseCurlyQuote', '’'),
			_Utils_Tuple2('clubs', '♣'),
			_Utils_Tuple2('clubsuit', '♣'),
			_Utils_Tuple2('colon', ':'),
			_Utils_Tuple2('Colon', '∷'),
			_Utils_Tuple2('Colone', '⩴'),
			_Utils_Tuple2('colone', '≔'),
			_Utils_Tuple2('coloneq', '≔'),
			_Utils_Tuple2('comma', ','),
			_Utils_Tuple2('commat', '@'),
			_Utils_Tuple2('comp', '∁'),
			_Utils_Tuple2('compfn', '∘'),
			_Utils_Tuple2('complement', '∁'),
			_Utils_Tuple2('complexes', 'ℂ'),
			_Utils_Tuple2('cong', '≅'),
			_Utils_Tuple2('congdot', '⩭'),
			_Utils_Tuple2('Congruent', '≡'),
			_Utils_Tuple2('conint', '∮'),
			_Utils_Tuple2('Conint', '∯'),
			_Utils_Tuple2('ContourIntegral', '∮'),
			_Utils_Tuple2('copf', '\uD835\uDD54'),
			_Utils_Tuple2('Copf', 'ℂ'),
			_Utils_Tuple2('coprod', '∐'),
			_Utils_Tuple2('Coproduct', '∐'),
			_Utils_Tuple2('copy', '©'),
			_Utils_Tuple2('COPY', '©'),
			_Utils_Tuple2('copysr', '℗'),
			_Utils_Tuple2('CounterClockwiseContourIntegral', '∳'),
			_Utils_Tuple2('crarr', '↵'),
			_Utils_Tuple2('cross', '✗'),
			_Utils_Tuple2('Cross', '⨯'),
			_Utils_Tuple2('Cscr', '\uD835\uDC9E'),
			_Utils_Tuple2('cscr', '\uD835\uDCB8'),
			_Utils_Tuple2('csub', '⫏'),
			_Utils_Tuple2('csube', '⫑'),
			_Utils_Tuple2('csup', '⫐'),
			_Utils_Tuple2('csupe', '⫒'),
			_Utils_Tuple2('ctdot', '⋯'),
			_Utils_Tuple2('cudarrl', '⤸'),
			_Utils_Tuple2('cudarrr', '⤵'),
			_Utils_Tuple2('cuepr', '⋞'),
			_Utils_Tuple2('cuesc', '⋟'),
			_Utils_Tuple2('cularr', '↶'),
			_Utils_Tuple2('cularrp', '⤽'),
			_Utils_Tuple2('cupbrcap', '⩈'),
			_Utils_Tuple2('cupcap', '⩆'),
			_Utils_Tuple2('CupCap', '≍'),
			_Utils_Tuple2('cup', '∪'),
			_Utils_Tuple2('Cup', '⋓'),
			_Utils_Tuple2('cupcup', '⩊'),
			_Utils_Tuple2('cupdot', '⊍'),
			_Utils_Tuple2('cupor', '⩅'),
			_Utils_Tuple2('cups', '∪︀'),
			_Utils_Tuple2('curarr', '↷'),
			_Utils_Tuple2('curarrm', '⤼'),
			_Utils_Tuple2('curlyeqprec', '⋞'),
			_Utils_Tuple2('curlyeqsucc', '⋟'),
			_Utils_Tuple2('curlyvee', '⋎'),
			_Utils_Tuple2('curlywedge', '⋏'),
			_Utils_Tuple2('curren', '¤'),
			_Utils_Tuple2('curvearrowleft', '↶'),
			_Utils_Tuple2('curvearrowright', '↷'),
			_Utils_Tuple2('cuvee', '⋎'),
			_Utils_Tuple2('cuwed', '⋏'),
			_Utils_Tuple2('cwconint', '∲'),
			_Utils_Tuple2('cwint', '∱'),
			_Utils_Tuple2('cylcty', '⌭'),
			_Utils_Tuple2('dagger', '†'),
			_Utils_Tuple2('Dagger', '‡'),
			_Utils_Tuple2('daleth', 'ℸ'),
			_Utils_Tuple2('darr', '↓'),
			_Utils_Tuple2('Darr', '↡'),
			_Utils_Tuple2('dArr', '⇓'),
			_Utils_Tuple2('dash', '‐'),
			_Utils_Tuple2('Dashv', '⫤'),
			_Utils_Tuple2('dashv', '⊣'),
			_Utils_Tuple2('dbkarow', '⤏'),
			_Utils_Tuple2('dblac', '˝'),
			_Utils_Tuple2('Dcaron', 'Ď'),
			_Utils_Tuple2('dcaron', 'ď'),
			_Utils_Tuple2('Dcy', 'Д'),
			_Utils_Tuple2('dcy', 'д'),
			_Utils_Tuple2('ddagger', '‡'),
			_Utils_Tuple2('ddarr', '⇊'),
			_Utils_Tuple2('DD', 'ⅅ'),
			_Utils_Tuple2('dd', 'ⅆ'),
			_Utils_Tuple2('DDotrahd', '⤑'),
			_Utils_Tuple2('ddotseq', '⩷'),
			_Utils_Tuple2('deg', '°'),
			_Utils_Tuple2('Del', '∇'),
			_Utils_Tuple2('Delta', 'Δ'),
			_Utils_Tuple2('delta', 'δ'),
			_Utils_Tuple2('demptyv', '⦱'),
			_Utils_Tuple2('dfisht', '⥿'),
			_Utils_Tuple2('Dfr', '\uD835\uDD07'),
			_Utils_Tuple2('dfr', '\uD835\uDD21'),
			_Utils_Tuple2('dHar', '⥥'),
			_Utils_Tuple2('dharl', '⇃'),
			_Utils_Tuple2('dharr', '⇂'),
			_Utils_Tuple2('DiacriticalAcute', '´'),
			_Utils_Tuple2('DiacriticalDot', '˙'),
			_Utils_Tuple2('DiacriticalDoubleAcute', '˝'),
			_Utils_Tuple2('DiacriticalGrave', '`'),
			_Utils_Tuple2('DiacriticalTilde', '˜'),
			_Utils_Tuple2('diam', '⋄'),
			_Utils_Tuple2('diamond', '⋄'),
			_Utils_Tuple2('Diamond', '⋄'),
			_Utils_Tuple2('diamondsuit', '♦'),
			_Utils_Tuple2('diams', '♦'),
			_Utils_Tuple2('die', '¨'),
			_Utils_Tuple2('DifferentialD', 'ⅆ'),
			_Utils_Tuple2('digamma', 'ϝ'),
			_Utils_Tuple2('disin', '⋲'),
			_Utils_Tuple2('div', '÷'),
			_Utils_Tuple2('divide', '÷'),
			_Utils_Tuple2('divideontimes', '⋇'),
			_Utils_Tuple2('divonx', '⋇'),
			_Utils_Tuple2('DJcy', 'Ђ'),
			_Utils_Tuple2('djcy', 'ђ'),
			_Utils_Tuple2('dlcorn', '⌞'),
			_Utils_Tuple2('dlcrop', '⌍'),
			_Utils_Tuple2('dollar', '$'),
			_Utils_Tuple2('Dopf', '\uD835\uDD3B'),
			_Utils_Tuple2('dopf', '\uD835\uDD55'),
			_Utils_Tuple2('Dot', '¨'),
			_Utils_Tuple2('dot', '˙'),
			_Utils_Tuple2('DotDot', '⃜'),
			_Utils_Tuple2('doteq', '≐'),
			_Utils_Tuple2('doteqdot', '≑'),
			_Utils_Tuple2('DotEqual', '≐'),
			_Utils_Tuple2('dotminus', '∸'),
			_Utils_Tuple2('dotplus', '∔'),
			_Utils_Tuple2('dotsquare', '⊡'),
			_Utils_Tuple2('doublebarwedge', '⌆'),
			_Utils_Tuple2('DoubleContourIntegral', '∯'),
			_Utils_Tuple2('DoubleDot', '¨'),
			_Utils_Tuple2('DoubleDownArrow', '⇓'),
			_Utils_Tuple2('DoubleLeftArrow', '⇐'),
			_Utils_Tuple2('DoubleLeftRightArrow', '⇔'),
			_Utils_Tuple2('DoubleLeftTee', '⫤'),
			_Utils_Tuple2('DoubleLongLeftArrow', '⟸'),
			_Utils_Tuple2('DoubleLongLeftRightArrow', '⟺'),
			_Utils_Tuple2('DoubleLongRightArrow', '⟹'),
			_Utils_Tuple2('DoubleRightArrow', '⇒'),
			_Utils_Tuple2('DoubleRightTee', '⊨'),
			_Utils_Tuple2('DoubleUpArrow', '⇑'),
			_Utils_Tuple2('DoubleUpDownArrow', '⇕'),
			_Utils_Tuple2('DoubleVerticalBar', '∥'),
			_Utils_Tuple2('DownArrowBar', '⤓'),
			_Utils_Tuple2('downarrow', '↓'),
			_Utils_Tuple2('DownArrow', '↓'),
			_Utils_Tuple2('Downarrow', '⇓'),
			_Utils_Tuple2('DownArrowUpArrow', '⇵'),
			_Utils_Tuple2('DownBreve', '̑'),
			_Utils_Tuple2('downdownarrows', '⇊'),
			_Utils_Tuple2('downharpoonleft', '⇃'),
			_Utils_Tuple2('downharpoonright', '⇂'),
			_Utils_Tuple2('DownLeftRightVector', '⥐'),
			_Utils_Tuple2('DownLeftTeeVector', '⥞'),
			_Utils_Tuple2('DownLeftVectorBar', '⥖'),
			_Utils_Tuple2('DownLeftVector', '↽'),
			_Utils_Tuple2('DownRightTeeVector', '⥟'),
			_Utils_Tuple2('DownRightVectorBar', '⥗'),
			_Utils_Tuple2('DownRightVector', '⇁'),
			_Utils_Tuple2('DownTeeArrow', '↧'),
			_Utils_Tuple2('DownTee', '⊤'),
			_Utils_Tuple2('drbkarow', '⤐'),
			_Utils_Tuple2('drcorn', '⌟'),
			_Utils_Tuple2('drcrop', '⌌'),
			_Utils_Tuple2('Dscr', '\uD835\uDC9F'),
			_Utils_Tuple2('dscr', '\uD835\uDCB9'),
			_Utils_Tuple2('DScy', 'Ѕ'),
			_Utils_Tuple2('dscy', 'ѕ'),
			_Utils_Tuple2('dsol', '⧶'),
			_Utils_Tuple2('Dstrok', 'Đ'),
			_Utils_Tuple2('dstrok', 'đ'),
			_Utils_Tuple2('dtdot', '⋱'),
			_Utils_Tuple2('dtri', '▿'),
			_Utils_Tuple2('dtrif', '▾'),
			_Utils_Tuple2('duarr', '⇵'),
			_Utils_Tuple2('duhar', '⥯'),
			_Utils_Tuple2('dwangle', '⦦'),
			_Utils_Tuple2('DZcy', 'Џ'),
			_Utils_Tuple2('dzcy', 'џ'),
			_Utils_Tuple2('dzigrarr', '⟿'),
			_Utils_Tuple2('Eacute', 'É'),
			_Utils_Tuple2('eacute', 'é'),
			_Utils_Tuple2('easter', '⩮'),
			_Utils_Tuple2('Ecaron', 'Ě'),
			_Utils_Tuple2('ecaron', 'ě'),
			_Utils_Tuple2('Ecirc', 'Ê'),
			_Utils_Tuple2('ecirc', 'ê'),
			_Utils_Tuple2('ecir', '≖'),
			_Utils_Tuple2('ecolon', '≕'),
			_Utils_Tuple2('Ecy', 'Э'),
			_Utils_Tuple2('ecy', 'э'),
			_Utils_Tuple2('eDDot', '⩷'),
			_Utils_Tuple2('Edot', 'Ė'),
			_Utils_Tuple2('edot', 'ė'),
			_Utils_Tuple2('eDot', '≑'),
			_Utils_Tuple2('ee', 'ⅇ'),
			_Utils_Tuple2('efDot', '≒'),
			_Utils_Tuple2('Efr', '\uD835\uDD08'),
			_Utils_Tuple2('efr', '\uD835\uDD22'),
			_Utils_Tuple2('eg', '⪚'),
			_Utils_Tuple2('Egrave', 'È'),
			_Utils_Tuple2('egrave', 'è'),
			_Utils_Tuple2('egs', '⪖'),
			_Utils_Tuple2('egsdot', '⪘'),
			_Utils_Tuple2('el', '⪙'),
			_Utils_Tuple2('Element', '∈'),
			_Utils_Tuple2('elinters', '⏧'),
			_Utils_Tuple2('ell', 'ℓ'),
			_Utils_Tuple2('els', '⪕'),
			_Utils_Tuple2('elsdot', '⪗'),
			_Utils_Tuple2('Emacr', 'Ē'),
			_Utils_Tuple2('emacr', 'ē'),
			_Utils_Tuple2('empty', '∅'),
			_Utils_Tuple2('emptyset', '∅'),
			_Utils_Tuple2('EmptySmallSquare', '◻'),
			_Utils_Tuple2('emptyv', '∅'),
			_Utils_Tuple2('EmptyVerySmallSquare', '▫'),
			_Utils_Tuple2('emsp13', '\u2004'),
			_Utils_Tuple2('emsp14', '\u2005'),
			_Utils_Tuple2('emsp', '\u2003'),
			_Utils_Tuple2('ENG', 'Ŋ'),
			_Utils_Tuple2('eng', 'ŋ'),
			_Utils_Tuple2('ensp', '\u2002'),
			_Utils_Tuple2('Eogon', 'Ę'),
			_Utils_Tuple2('eogon', 'ę'),
			_Utils_Tuple2('Eopf', '\uD835\uDD3C'),
			_Utils_Tuple2('eopf', '\uD835\uDD56'),
			_Utils_Tuple2('epar', '⋕'),
			_Utils_Tuple2('eparsl', '⧣'),
			_Utils_Tuple2('eplus', '⩱'),
			_Utils_Tuple2('epsi', 'ε'),
			_Utils_Tuple2('Epsilon', 'Ε'),
			_Utils_Tuple2('epsilon', 'ε'),
			_Utils_Tuple2('epsiv', 'ϵ'),
			_Utils_Tuple2('eqcirc', '≖'),
			_Utils_Tuple2('eqcolon', '≕'),
			_Utils_Tuple2('eqsim', '≂'),
			_Utils_Tuple2('eqslantgtr', '⪖'),
			_Utils_Tuple2('eqslantless', '⪕'),
			_Utils_Tuple2('Equal', '⩵'),
			_Utils_Tuple2('equals', '='),
			_Utils_Tuple2('EqualTilde', '≂'),
			_Utils_Tuple2('equest', '≟'),
			_Utils_Tuple2('Equilibrium', '⇌'),
			_Utils_Tuple2('equiv', '≡'),
			_Utils_Tuple2('equivDD', '⩸'),
			_Utils_Tuple2('eqvparsl', '⧥'),
			_Utils_Tuple2('erarr', '⥱'),
			_Utils_Tuple2('erDot', '≓'),
			_Utils_Tuple2('escr', 'ℯ'),
			_Utils_Tuple2('Escr', 'ℰ'),
			_Utils_Tuple2('esdot', '≐'),
			_Utils_Tuple2('Esim', '⩳'),
			_Utils_Tuple2('esim', '≂'),
			_Utils_Tuple2('Eta', 'Η'),
			_Utils_Tuple2('eta', 'η'),
			_Utils_Tuple2('ETH', 'Ð'),
			_Utils_Tuple2('eth', 'ð'),
			_Utils_Tuple2('Euml', 'Ë'),
			_Utils_Tuple2('euml', 'ë'),
			_Utils_Tuple2('euro', '€'),
			_Utils_Tuple2('excl', '!'),
			_Utils_Tuple2('exist', '∃'),
			_Utils_Tuple2('Exists', '∃'),
			_Utils_Tuple2('expectation', 'ℰ'),
			_Utils_Tuple2('exponentiale', 'ⅇ'),
			_Utils_Tuple2('ExponentialE', 'ⅇ'),
			_Utils_Tuple2('fallingdotseq', '≒'),
			_Utils_Tuple2('Fcy', 'Ф'),
			_Utils_Tuple2('fcy', 'ф'),
			_Utils_Tuple2('female', '♀'),
			_Utils_Tuple2('ffilig', 'ﬃ'),
			_Utils_Tuple2('fflig', 'ﬀ'),
			_Utils_Tuple2('ffllig', 'ﬄ'),
			_Utils_Tuple2('Ffr', '\uD835\uDD09'),
			_Utils_Tuple2('ffr', '\uD835\uDD23'),
			_Utils_Tuple2('filig', 'ﬁ'),
			_Utils_Tuple2('FilledSmallSquare', '◼'),
			_Utils_Tuple2('FilledVerySmallSquare', '▪'),
			_Utils_Tuple2('fjlig', 'fj'),
			_Utils_Tuple2('flat', '♭'),
			_Utils_Tuple2('fllig', 'ﬂ'),
			_Utils_Tuple2('fltns', '▱'),
			_Utils_Tuple2('fnof', 'ƒ'),
			_Utils_Tuple2('Fopf', '\uD835\uDD3D'),
			_Utils_Tuple2('fopf', '\uD835\uDD57'),
			_Utils_Tuple2('forall', '∀'),
			_Utils_Tuple2('ForAll', '∀'),
			_Utils_Tuple2('fork', '⋔'),
			_Utils_Tuple2('forkv', '⫙'),
			_Utils_Tuple2('Fouriertrf', 'ℱ'),
			_Utils_Tuple2('fpartint', '⨍'),
			_Utils_Tuple2('frac12', '½'),
			_Utils_Tuple2('frac13', '⅓'),
			_Utils_Tuple2('frac14', '¼'),
			_Utils_Tuple2('frac15', '⅕'),
			_Utils_Tuple2('frac16', '⅙'),
			_Utils_Tuple2('frac18', '⅛'),
			_Utils_Tuple2('frac23', '⅔'),
			_Utils_Tuple2('frac25', '⅖'),
			_Utils_Tuple2('frac34', '¾'),
			_Utils_Tuple2('frac35', '⅗'),
			_Utils_Tuple2('frac38', '⅜'),
			_Utils_Tuple2('frac45', '⅘'),
			_Utils_Tuple2('frac56', '⅚'),
			_Utils_Tuple2('frac58', '⅝'),
			_Utils_Tuple2('frac78', '⅞'),
			_Utils_Tuple2('frasl', '⁄'),
			_Utils_Tuple2('frown', '⌢'),
			_Utils_Tuple2('fscr', '\uD835\uDCBB'),
			_Utils_Tuple2('Fscr', 'ℱ'),
			_Utils_Tuple2('gacute', 'ǵ'),
			_Utils_Tuple2('Gamma', 'Γ'),
			_Utils_Tuple2('gamma', 'γ'),
			_Utils_Tuple2('Gammad', 'Ϝ'),
			_Utils_Tuple2('gammad', 'ϝ'),
			_Utils_Tuple2('gap', '⪆'),
			_Utils_Tuple2('Gbreve', 'Ğ'),
			_Utils_Tuple2('gbreve', 'ğ'),
			_Utils_Tuple2('Gcedil', 'Ģ'),
			_Utils_Tuple2('Gcirc', 'Ĝ'),
			_Utils_Tuple2('gcirc', 'ĝ'),
			_Utils_Tuple2('Gcy', 'Г'),
			_Utils_Tuple2('gcy', 'г'),
			_Utils_Tuple2('Gdot', 'Ġ'),
			_Utils_Tuple2('gdot', 'ġ'),
			_Utils_Tuple2('ge', '≥'),
			_Utils_Tuple2('gE', '≧'),
			_Utils_Tuple2('gEl', '⪌'),
			_Utils_Tuple2('gel', '⋛'),
			_Utils_Tuple2('geq', '≥'),
			_Utils_Tuple2('geqq', '≧'),
			_Utils_Tuple2('geqslant', '⩾'),
			_Utils_Tuple2('gescc', '⪩'),
			_Utils_Tuple2('ges', '⩾'),
			_Utils_Tuple2('gesdot', '⪀'),
			_Utils_Tuple2('gesdoto', '⪂'),
			_Utils_Tuple2('gesdotol', '⪄'),
			_Utils_Tuple2('gesl', '⋛︀'),
			_Utils_Tuple2('gesles', '⪔'),
			_Utils_Tuple2('Gfr', '\uD835\uDD0A'),
			_Utils_Tuple2('gfr', '\uD835\uDD24'),
			_Utils_Tuple2('gg', '≫'),
			_Utils_Tuple2('Gg', '⋙'),
			_Utils_Tuple2('ggg', '⋙'),
			_Utils_Tuple2('gimel', 'ℷ'),
			_Utils_Tuple2('GJcy', 'Ѓ'),
			_Utils_Tuple2('gjcy', 'ѓ'),
			_Utils_Tuple2('gla', '⪥'),
			_Utils_Tuple2('gl', '≷'),
			_Utils_Tuple2('glE', '⪒'),
			_Utils_Tuple2('glj', '⪤'),
			_Utils_Tuple2('gnap', '⪊'),
			_Utils_Tuple2('gnapprox', '⪊'),
			_Utils_Tuple2('gne', '⪈'),
			_Utils_Tuple2('gnE', '≩'),
			_Utils_Tuple2('gneq', '⪈'),
			_Utils_Tuple2('gneqq', '≩'),
			_Utils_Tuple2('gnsim', '⋧'),
			_Utils_Tuple2('Gopf', '\uD835\uDD3E'),
			_Utils_Tuple2('gopf', '\uD835\uDD58'),
			_Utils_Tuple2('grave', '`'),
			_Utils_Tuple2('GreaterEqual', '≥'),
			_Utils_Tuple2('GreaterEqualLess', '⋛'),
			_Utils_Tuple2('GreaterFullEqual', '≧'),
			_Utils_Tuple2('GreaterGreater', '⪢'),
			_Utils_Tuple2('GreaterLess', '≷'),
			_Utils_Tuple2('GreaterSlantEqual', '⩾'),
			_Utils_Tuple2('GreaterTilde', '≳'),
			_Utils_Tuple2('Gscr', '\uD835\uDCA2'),
			_Utils_Tuple2('gscr', 'ℊ'),
			_Utils_Tuple2('gsim', '≳'),
			_Utils_Tuple2('gsime', '⪎'),
			_Utils_Tuple2('gsiml', '⪐'),
			_Utils_Tuple2('gtcc', '⪧'),
			_Utils_Tuple2('gtcir', '⩺'),
			_Utils_Tuple2('gt', '>'),
			_Utils_Tuple2('GT', '>'),
			_Utils_Tuple2('Gt', '≫'),
			_Utils_Tuple2('gtdot', '⋗'),
			_Utils_Tuple2('gtlPar', '⦕'),
			_Utils_Tuple2('gtquest', '⩼'),
			_Utils_Tuple2('gtrapprox', '⪆'),
			_Utils_Tuple2('gtrarr', '⥸'),
			_Utils_Tuple2('gtrdot', '⋗'),
			_Utils_Tuple2('gtreqless', '⋛'),
			_Utils_Tuple2('gtreqqless', '⪌'),
			_Utils_Tuple2('gtrless', '≷'),
			_Utils_Tuple2('gtrsim', '≳'),
			_Utils_Tuple2('gvertneqq', '≩︀'),
			_Utils_Tuple2('gvnE', '≩︀'),
			_Utils_Tuple2('Hacek', 'ˇ'),
			_Utils_Tuple2('hairsp', '\u200A'),
			_Utils_Tuple2('half', '½'),
			_Utils_Tuple2('hamilt', 'ℋ'),
			_Utils_Tuple2('HARDcy', 'Ъ'),
			_Utils_Tuple2('hardcy', 'ъ'),
			_Utils_Tuple2('harrcir', '⥈'),
			_Utils_Tuple2('harr', '↔'),
			_Utils_Tuple2('hArr', '⇔'),
			_Utils_Tuple2('harrw', '↭'),
			_Utils_Tuple2('Hat', '^'),
			_Utils_Tuple2('hbar', 'ℏ'),
			_Utils_Tuple2('Hcirc', 'Ĥ'),
			_Utils_Tuple2('hcirc', 'ĥ'),
			_Utils_Tuple2('hearts', '♥'),
			_Utils_Tuple2('heartsuit', '♥'),
			_Utils_Tuple2('hellip', '…'),
			_Utils_Tuple2('hercon', '⊹'),
			_Utils_Tuple2('hfr', '\uD835\uDD25'),
			_Utils_Tuple2('Hfr', 'ℌ'),
			_Utils_Tuple2('HilbertSpace', 'ℋ'),
			_Utils_Tuple2('hksearow', '⤥'),
			_Utils_Tuple2('hkswarow', '⤦'),
			_Utils_Tuple2('hoarr', '⇿'),
			_Utils_Tuple2('homtht', '∻'),
			_Utils_Tuple2('hookleftarrow', '↩'),
			_Utils_Tuple2('hookrightarrow', '↪'),
			_Utils_Tuple2('hopf', '\uD835\uDD59'),
			_Utils_Tuple2('Hopf', 'ℍ'),
			_Utils_Tuple2('horbar', '―'),
			_Utils_Tuple2('HorizontalLine', '─'),
			_Utils_Tuple2('hscr', '\uD835\uDCBD'),
			_Utils_Tuple2('Hscr', 'ℋ'),
			_Utils_Tuple2('hslash', 'ℏ'),
			_Utils_Tuple2('Hstrok', 'Ħ'),
			_Utils_Tuple2('hstrok', 'ħ'),
			_Utils_Tuple2('HumpDownHump', '≎'),
			_Utils_Tuple2('HumpEqual', '≏'),
			_Utils_Tuple2('hybull', '⁃'),
			_Utils_Tuple2('hyphen', '‐'),
			_Utils_Tuple2('Iacute', 'Í'),
			_Utils_Tuple2('iacute', 'í'),
			_Utils_Tuple2('ic', '\u2063'),
			_Utils_Tuple2('Icirc', 'Î'),
			_Utils_Tuple2('icirc', 'î'),
			_Utils_Tuple2('Icy', 'И'),
			_Utils_Tuple2('icy', 'и'),
			_Utils_Tuple2('Idot', 'İ'),
			_Utils_Tuple2('IEcy', 'Е'),
			_Utils_Tuple2('iecy', 'е'),
			_Utils_Tuple2('iexcl', '¡'),
			_Utils_Tuple2('iff', '⇔'),
			_Utils_Tuple2('ifr', '\uD835\uDD26'),
			_Utils_Tuple2('Ifr', 'ℑ'),
			_Utils_Tuple2('Igrave', 'Ì'),
			_Utils_Tuple2('igrave', 'ì'),
			_Utils_Tuple2('ii', 'ⅈ'),
			_Utils_Tuple2('iiiint', '⨌'),
			_Utils_Tuple2('iiint', '∭'),
			_Utils_Tuple2('iinfin', '⧜'),
			_Utils_Tuple2('iiota', '℩'),
			_Utils_Tuple2('IJlig', 'Ĳ'),
			_Utils_Tuple2('ijlig', 'ĳ'),
			_Utils_Tuple2('Imacr', 'Ī'),
			_Utils_Tuple2('imacr', 'ī'),
			_Utils_Tuple2('image', 'ℑ'),
			_Utils_Tuple2('ImaginaryI', 'ⅈ'),
			_Utils_Tuple2('imagline', 'ℐ'),
			_Utils_Tuple2('imagpart', 'ℑ'),
			_Utils_Tuple2('imath', 'ı'),
			_Utils_Tuple2('Im', 'ℑ'),
			_Utils_Tuple2('imof', '⊷'),
			_Utils_Tuple2('imped', 'Ƶ'),
			_Utils_Tuple2('Implies', '⇒'),
			_Utils_Tuple2('incare', '℅'),
			_Utils_Tuple2('in', '∈'),
			_Utils_Tuple2('infin', '∞'),
			_Utils_Tuple2('infintie', '⧝'),
			_Utils_Tuple2('inodot', 'ı'),
			_Utils_Tuple2('intcal', '⊺'),
			_Utils_Tuple2('int', '∫'),
			_Utils_Tuple2('Int', '∬'),
			_Utils_Tuple2('integers', 'ℤ'),
			_Utils_Tuple2('Integral', '∫'),
			_Utils_Tuple2('intercal', '⊺'),
			_Utils_Tuple2('Intersection', '⋂'),
			_Utils_Tuple2('intlarhk', '⨗'),
			_Utils_Tuple2('intprod', '⨼'),
			_Utils_Tuple2('InvisibleComma', '\u2063'),
			_Utils_Tuple2('InvisibleTimes', '\u2062'),
			_Utils_Tuple2('IOcy', 'Ё'),
			_Utils_Tuple2('iocy', 'ё'),
			_Utils_Tuple2('Iogon', 'Į'),
			_Utils_Tuple2('iogon', 'į'),
			_Utils_Tuple2('Iopf', '\uD835\uDD40'),
			_Utils_Tuple2('iopf', '\uD835\uDD5A'),
			_Utils_Tuple2('Iota', 'Ι'),
			_Utils_Tuple2('iota', 'ι'),
			_Utils_Tuple2('iprod', '⨼'),
			_Utils_Tuple2('iquest', '¿'),
			_Utils_Tuple2('iscr', '\uD835\uDCBE'),
			_Utils_Tuple2('Iscr', 'ℐ'),
			_Utils_Tuple2('isin', '∈'),
			_Utils_Tuple2('isindot', '⋵'),
			_Utils_Tuple2('isinE', '⋹'),
			_Utils_Tuple2('isins', '⋴'),
			_Utils_Tuple2('isinsv', '⋳'),
			_Utils_Tuple2('isinv', '∈'),
			_Utils_Tuple2('it', '\u2062'),
			_Utils_Tuple2('Itilde', 'Ĩ'),
			_Utils_Tuple2('itilde', 'ĩ'),
			_Utils_Tuple2('Iukcy', 'І'),
			_Utils_Tuple2('iukcy', 'і'),
			_Utils_Tuple2('Iuml', 'Ï'),
			_Utils_Tuple2('iuml', 'ï'),
			_Utils_Tuple2('Jcirc', 'Ĵ'),
			_Utils_Tuple2('jcirc', 'ĵ'),
			_Utils_Tuple2('Jcy', 'Й'),
			_Utils_Tuple2('jcy', 'й'),
			_Utils_Tuple2('Jfr', '\uD835\uDD0D'),
			_Utils_Tuple2('jfr', '\uD835\uDD27'),
			_Utils_Tuple2('jmath', 'ȷ'),
			_Utils_Tuple2('Jopf', '\uD835\uDD41'),
			_Utils_Tuple2('jopf', '\uD835\uDD5B'),
			_Utils_Tuple2('Jscr', '\uD835\uDCA5'),
			_Utils_Tuple2('jscr', '\uD835\uDCBF'),
			_Utils_Tuple2('Jsercy', 'Ј'),
			_Utils_Tuple2('jsercy', 'ј'),
			_Utils_Tuple2('Jukcy', 'Є'),
			_Utils_Tuple2('jukcy', 'є'),
			_Utils_Tuple2('Kappa', 'Κ'),
			_Utils_Tuple2('kappa', 'κ'),
			_Utils_Tuple2('kappav', 'ϰ'),
			_Utils_Tuple2('Kcedil', 'Ķ'),
			_Utils_Tuple2('kcedil', 'ķ'),
			_Utils_Tuple2('Kcy', 'К'),
			_Utils_Tuple2('kcy', 'к'),
			_Utils_Tuple2('Kfr', '\uD835\uDD0E'),
			_Utils_Tuple2('kfr', '\uD835\uDD28'),
			_Utils_Tuple2('kgreen', 'ĸ'),
			_Utils_Tuple2('KHcy', 'Х'),
			_Utils_Tuple2('khcy', 'х'),
			_Utils_Tuple2('KJcy', 'Ќ'),
			_Utils_Tuple2('kjcy', 'ќ'),
			_Utils_Tuple2('Kopf', '\uD835\uDD42'),
			_Utils_Tuple2('kopf', '\uD835\uDD5C'),
			_Utils_Tuple2('Kscr', '\uD835\uDCA6'),
			_Utils_Tuple2('kscr', '\uD835\uDCC0'),
			_Utils_Tuple2('lAarr', '⇚'),
			_Utils_Tuple2('Lacute', 'Ĺ'),
			_Utils_Tuple2('lacute', 'ĺ'),
			_Utils_Tuple2('laemptyv', '⦴'),
			_Utils_Tuple2('lagran', 'ℒ'),
			_Utils_Tuple2('Lambda', 'Λ'),
			_Utils_Tuple2('lambda', 'λ'),
			_Utils_Tuple2('lang', '⟨'),
			_Utils_Tuple2('Lang', '⟪'),
			_Utils_Tuple2('langd', '⦑'),
			_Utils_Tuple2('langle', '⟨'),
			_Utils_Tuple2('lap', '⪅'),
			_Utils_Tuple2('Laplacetrf', 'ℒ'),
			_Utils_Tuple2('laquo', '«'),
			_Utils_Tuple2('larrb', '⇤'),
			_Utils_Tuple2('larrbfs', '⤟'),
			_Utils_Tuple2('larr', '←'),
			_Utils_Tuple2('Larr', '↞'),
			_Utils_Tuple2('lArr', '⇐'),
			_Utils_Tuple2('larrfs', '⤝'),
			_Utils_Tuple2('larrhk', '↩'),
			_Utils_Tuple2('larrlp', '↫'),
			_Utils_Tuple2('larrpl', '⤹'),
			_Utils_Tuple2('larrsim', '⥳'),
			_Utils_Tuple2('larrtl', '↢'),
			_Utils_Tuple2('latail', '⤙'),
			_Utils_Tuple2('lAtail', '⤛'),
			_Utils_Tuple2('lat', '⪫'),
			_Utils_Tuple2('late', '⪭'),
			_Utils_Tuple2('lates', '⪭︀'),
			_Utils_Tuple2('lbarr', '⤌'),
			_Utils_Tuple2('lBarr', '⤎'),
			_Utils_Tuple2('lbbrk', '❲'),
			_Utils_Tuple2('lbrace', '{'),
			_Utils_Tuple2('lbrack', '['),
			_Utils_Tuple2('lbrke', '⦋'),
			_Utils_Tuple2('lbrksld', '⦏'),
			_Utils_Tuple2('lbrkslu', '⦍'),
			_Utils_Tuple2('Lcaron', 'Ľ'),
			_Utils_Tuple2('lcaron', 'ľ'),
			_Utils_Tuple2('Lcedil', 'Ļ'),
			_Utils_Tuple2('lcedil', 'ļ'),
			_Utils_Tuple2('lceil', '⌈'),
			_Utils_Tuple2('lcub', '{'),
			_Utils_Tuple2('Lcy', 'Л'),
			_Utils_Tuple2('lcy', 'л'),
			_Utils_Tuple2('ldca', '⤶'),
			_Utils_Tuple2('ldquo', '“'),
			_Utils_Tuple2('ldquor', '„'),
			_Utils_Tuple2('ldrdhar', '⥧'),
			_Utils_Tuple2('ldrushar', '⥋'),
			_Utils_Tuple2('ldsh', '↲'),
			_Utils_Tuple2('le', '≤'),
			_Utils_Tuple2('lE', '≦'),
			_Utils_Tuple2('LeftAngleBracket', '⟨'),
			_Utils_Tuple2('LeftArrowBar', '⇤'),
			_Utils_Tuple2('leftarrow', '←'),
			_Utils_Tuple2('LeftArrow', '←'),
			_Utils_Tuple2('Leftarrow', '⇐'),
			_Utils_Tuple2('LeftArrowRightArrow', '⇆'),
			_Utils_Tuple2('leftarrowtail', '↢'),
			_Utils_Tuple2('LeftCeiling', '⌈'),
			_Utils_Tuple2('LeftDoubleBracket', '⟦'),
			_Utils_Tuple2('LeftDownTeeVector', '⥡'),
			_Utils_Tuple2('LeftDownVectorBar', '⥙'),
			_Utils_Tuple2('LeftDownVector', '⇃'),
			_Utils_Tuple2('LeftFloor', '⌊'),
			_Utils_Tuple2('leftharpoondown', '↽'),
			_Utils_Tuple2('leftharpoonup', '↼'),
			_Utils_Tuple2('leftleftarrows', '⇇'),
			_Utils_Tuple2('leftrightarrow', '↔'),
			_Utils_Tuple2('LeftRightArrow', '↔'),
			_Utils_Tuple2('Leftrightarrow', '⇔'),
			_Utils_Tuple2('leftrightarrows', '⇆'),
			_Utils_Tuple2('leftrightharpoons', '⇋'),
			_Utils_Tuple2('leftrightsquigarrow', '↭'),
			_Utils_Tuple2('LeftRightVector', '⥎'),
			_Utils_Tuple2('LeftTeeArrow', '↤'),
			_Utils_Tuple2('LeftTee', '⊣'),
			_Utils_Tuple2('LeftTeeVector', '⥚'),
			_Utils_Tuple2('leftthreetimes', '⋋'),
			_Utils_Tuple2('LeftTriangleBar', '⧏'),
			_Utils_Tuple2('LeftTriangle', '⊲'),
			_Utils_Tuple2('LeftTriangleEqual', '⊴'),
			_Utils_Tuple2('LeftUpDownVector', '⥑'),
			_Utils_Tuple2('LeftUpTeeVector', '⥠'),
			_Utils_Tuple2('LeftUpVectorBar', '⥘'),
			_Utils_Tuple2('LeftUpVector', '↿'),
			_Utils_Tuple2('LeftVectorBar', '⥒'),
			_Utils_Tuple2('LeftVector', '↼'),
			_Utils_Tuple2('lEg', '⪋'),
			_Utils_Tuple2('leg', '⋚'),
			_Utils_Tuple2('leq', '≤'),
			_Utils_Tuple2('leqq', '≦'),
			_Utils_Tuple2('leqslant', '⩽'),
			_Utils_Tuple2('lescc', '⪨'),
			_Utils_Tuple2('les', '⩽'),
			_Utils_Tuple2('lesdot', '⩿'),
			_Utils_Tuple2('lesdoto', '⪁'),
			_Utils_Tuple2('lesdotor', '⪃'),
			_Utils_Tuple2('lesg', '⋚︀'),
			_Utils_Tuple2('lesges', '⪓'),
			_Utils_Tuple2('lessapprox', '⪅'),
			_Utils_Tuple2('lessdot', '⋖'),
			_Utils_Tuple2('lesseqgtr', '⋚'),
			_Utils_Tuple2('lesseqqgtr', '⪋'),
			_Utils_Tuple2('LessEqualGreater', '⋚'),
			_Utils_Tuple2('LessFullEqual', '≦'),
			_Utils_Tuple2('LessGreater', '≶'),
			_Utils_Tuple2('lessgtr', '≶'),
			_Utils_Tuple2('LessLess', '⪡'),
			_Utils_Tuple2('lesssim', '≲'),
			_Utils_Tuple2('LessSlantEqual', '⩽'),
			_Utils_Tuple2('LessTilde', '≲'),
			_Utils_Tuple2('lfisht', '⥼'),
			_Utils_Tuple2('lfloor', '⌊'),
			_Utils_Tuple2('Lfr', '\uD835\uDD0F'),
			_Utils_Tuple2('lfr', '\uD835\uDD29'),
			_Utils_Tuple2('lg', '≶'),
			_Utils_Tuple2('lgE', '⪑'),
			_Utils_Tuple2('lHar', '⥢'),
			_Utils_Tuple2('lhard', '↽'),
			_Utils_Tuple2('lharu', '↼'),
			_Utils_Tuple2('lharul', '⥪'),
			_Utils_Tuple2('lhblk', '▄'),
			_Utils_Tuple2('LJcy', 'Љ'),
			_Utils_Tuple2('ljcy', 'љ'),
			_Utils_Tuple2('llarr', '⇇'),
			_Utils_Tuple2('ll', '≪'),
			_Utils_Tuple2('Ll', '⋘'),
			_Utils_Tuple2('llcorner', '⌞'),
			_Utils_Tuple2('Lleftarrow', '⇚'),
			_Utils_Tuple2('llhard', '⥫'),
			_Utils_Tuple2('lltri', '◺'),
			_Utils_Tuple2('Lmidot', 'Ŀ'),
			_Utils_Tuple2('lmidot', 'ŀ'),
			_Utils_Tuple2('lmoustache', '⎰'),
			_Utils_Tuple2('lmoust', '⎰'),
			_Utils_Tuple2('lnap', '⪉'),
			_Utils_Tuple2('lnapprox', '⪉'),
			_Utils_Tuple2('lne', '⪇'),
			_Utils_Tuple2('lnE', '≨'),
			_Utils_Tuple2('lneq', '⪇'),
			_Utils_Tuple2('lneqq', '≨'),
			_Utils_Tuple2('lnsim', '⋦'),
			_Utils_Tuple2('loang', '⟬'),
			_Utils_Tuple2('loarr', '⇽'),
			_Utils_Tuple2('lobrk', '⟦'),
			_Utils_Tuple2('longleftarrow', '⟵'),
			_Utils_Tuple2('LongLeftArrow', '⟵'),
			_Utils_Tuple2('Longleftarrow', '⟸'),
			_Utils_Tuple2('longleftrightarrow', '⟷'),
			_Utils_Tuple2('LongLeftRightArrow', '⟷'),
			_Utils_Tuple2('Longleftrightarrow', '⟺'),
			_Utils_Tuple2('longmapsto', '⟼'),
			_Utils_Tuple2('longrightarrow', '⟶'),
			_Utils_Tuple2('LongRightArrow', '⟶'),
			_Utils_Tuple2('Longrightarrow', '⟹'),
			_Utils_Tuple2('looparrowleft', '↫'),
			_Utils_Tuple2('looparrowright', '↬'),
			_Utils_Tuple2('lopar', '⦅'),
			_Utils_Tuple2('Lopf', '\uD835\uDD43'),
			_Utils_Tuple2('lopf', '\uD835\uDD5D'),
			_Utils_Tuple2('loplus', '⨭'),
			_Utils_Tuple2('lotimes', '⨴'),
			_Utils_Tuple2('lowast', '∗'),
			_Utils_Tuple2('lowbar', '_'),
			_Utils_Tuple2('LowerLeftArrow', '↙'),
			_Utils_Tuple2('LowerRightArrow', '↘'),
			_Utils_Tuple2('loz', '◊'),
			_Utils_Tuple2('lozenge', '◊'),
			_Utils_Tuple2('lozf', '⧫'),
			_Utils_Tuple2('lpar', '('),
			_Utils_Tuple2('lparlt', '⦓'),
			_Utils_Tuple2('lrarr', '⇆'),
			_Utils_Tuple2('lrcorner', '⌟'),
			_Utils_Tuple2('lrhar', '⇋'),
			_Utils_Tuple2('lrhard', '⥭'),
			_Utils_Tuple2('lrm', '\u200E'),
			_Utils_Tuple2('lrtri', '⊿'),
			_Utils_Tuple2('lsaquo', '‹'),
			_Utils_Tuple2('lscr', '\uD835\uDCC1'),
			_Utils_Tuple2('Lscr', 'ℒ'),
			_Utils_Tuple2('lsh', '↰'),
			_Utils_Tuple2('Lsh', '↰'),
			_Utils_Tuple2('lsim', '≲'),
			_Utils_Tuple2('lsime', '⪍'),
			_Utils_Tuple2('lsimg', '⪏'),
			_Utils_Tuple2('lsqb', '['),
			_Utils_Tuple2('lsquo', '‘'),
			_Utils_Tuple2('lsquor', '‚'),
			_Utils_Tuple2('Lstrok', 'Ł'),
			_Utils_Tuple2('lstrok', 'ł'),
			_Utils_Tuple2('ltcc', '⪦'),
			_Utils_Tuple2('ltcir', '⩹'),
			_Utils_Tuple2('lt', '<'),
			_Utils_Tuple2('LT', '<'),
			_Utils_Tuple2('Lt', '≪'),
			_Utils_Tuple2('ltdot', '⋖'),
			_Utils_Tuple2('lthree', '⋋'),
			_Utils_Tuple2('ltimes', '⋉'),
			_Utils_Tuple2('ltlarr', '⥶'),
			_Utils_Tuple2('ltquest', '⩻'),
			_Utils_Tuple2('ltri', '◃'),
			_Utils_Tuple2('ltrie', '⊴'),
			_Utils_Tuple2('ltrif', '◂'),
			_Utils_Tuple2('ltrPar', '⦖'),
			_Utils_Tuple2('lurdshar', '⥊'),
			_Utils_Tuple2('luruhar', '⥦'),
			_Utils_Tuple2('lvertneqq', '≨︀'),
			_Utils_Tuple2('lvnE', '≨︀'),
			_Utils_Tuple2('macr', '¯'),
			_Utils_Tuple2('male', '♂'),
			_Utils_Tuple2('malt', '✠'),
			_Utils_Tuple2('maltese', '✠'),
			_Utils_Tuple2('Map', '⤅'),
			_Utils_Tuple2('map', '↦'),
			_Utils_Tuple2('mapsto', '↦'),
			_Utils_Tuple2('mapstodown', '↧'),
			_Utils_Tuple2('mapstoleft', '↤'),
			_Utils_Tuple2('mapstoup', '↥'),
			_Utils_Tuple2('marker', '▮'),
			_Utils_Tuple2('mcomma', '⨩'),
			_Utils_Tuple2('Mcy', 'М'),
			_Utils_Tuple2('mcy', 'м'),
			_Utils_Tuple2('mdash', '—'),
			_Utils_Tuple2('mDDot', '∺'),
			_Utils_Tuple2('measuredangle', '∡'),
			_Utils_Tuple2('MediumSpace', '\u205F'),
			_Utils_Tuple2('Mellintrf', 'ℳ'),
			_Utils_Tuple2('Mfr', '\uD835\uDD10'),
			_Utils_Tuple2('mfr', '\uD835\uDD2A'),
			_Utils_Tuple2('mho', '℧'),
			_Utils_Tuple2('micro', 'µ'),
			_Utils_Tuple2('midast', '*'),
			_Utils_Tuple2('midcir', '⫰'),
			_Utils_Tuple2('mid', '∣'),
			_Utils_Tuple2('middot', '·'),
			_Utils_Tuple2('minusb', '⊟'),
			_Utils_Tuple2('minus', '−'),
			_Utils_Tuple2('minusd', '∸'),
			_Utils_Tuple2('minusdu', '⨪'),
			_Utils_Tuple2('MinusPlus', '∓'),
			_Utils_Tuple2('mlcp', '⫛'),
			_Utils_Tuple2('mldr', '…'),
			_Utils_Tuple2('mnplus', '∓'),
			_Utils_Tuple2('models', '⊧'),
			_Utils_Tuple2('Mopf', '\uD835\uDD44'),
			_Utils_Tuple2('mopf', '\uD835\uDD5E'),
			_Utils_Tuple2('mp', '∓'),
			_Utils_Tuple2('mscr', '\uD835\uDCC2'),
			_Utils_Tuple2('Mscr', 'ℳ'),
			_Utils_Tuple2('mstpos', '∾'),
			_Utils_Tuple2('Mu', 'Μ'),
			_Utils_Tuple2('mu', 'μ'),
			_Utils_Tuple2('multimap', '⊸'),
			_Utils_Tuple2('mumap', '⊸'),
			_Utils_Tuple2('nabla', '∇'),
			_Utils_Tuple2('Nacute', 'Ń'),
			_Utils_Tuple2('nacute', 'ń'),
			_Utils_Tuple2('nang', '∠⃒'),
			_Utils_Tuple2('nap', '≉'),
			_Utils_Tuple2('napE', '⩰̸'),
			_Utils_Tuple2('napid', '≋̸'),
			_Utils_Tuple2('napos', 'ŉ'),
			_Utils_Tuple2('napprox', '≉'),
			_Utils_Tuple2('natural', '♮'),
			_Utils_Tuple2('naturals', 'ℕ'),
			_Utils_Tuple2('natur', '♮'),
			_Utils_Tuple2('nbsp', '\u00A0'),
			_Utils_Tuple2('nbump', '≎̸'),
			_Utils_Tuple2('nbumpe', '≏̸'),
			_Utils_Tuple2('ncap', '⩃'),
			_Utils_Tuple2('Ncaron', 'Ň'),
			_Utils_Tuple2('ncaron', 'ň'),
			_Utils_Tuple2('Ncedil', 'Ņ'),
			_Utils_Tuple2('ncedil', 'ņ'),
			_Utils_Tuple2('ncong', '≇'),
			_Utils_Tuple2('ncongdot', '⩭̸'),
			_Utils_Tuple2('ncup', '⩂'),
			_Utils_Tuple2('Ncy', 'Н'),
			_Utils_Tuple2('ncy', 'н'),
			_Utils_Tuple2('ndash', '–'),
			_Utils_Tuple2('nearhk', '⤤'),
			_Utils_Tuple2('nearr', '↗'),
			_Utils_Tuple2('neArr', '⇗'),
			_Utils_Tuple2('nearrow', '↗'),
			_Utils_Tuple2('ne', '≠'),
			_Utils_Tuple2('nedot', '≐̸'),
			_Utils_Tuple2('NegativeMediumSpace', '\u200B'),
			_Utils_Tuple2('NegativeThickSpace', '\u200B'),
			_Utils_Tuple2('NegativeThinSpace', '\u200B'),
			_Utils_Tuple2('NegativeVeryThinSpace', '\u200B'),
			_Utils_Tuple2('nequiv', '≢'),
			_Utils_Tuple2('nesear', '⤨'),
			_Utils_Tuple2('nesim', '≂̸'),
			_Utils_Tuple2('NestedGreaterGreater', '≫'),
			_Utils_Tuple2('NestedLessLess', '≪'),
			_Utils_Tuple2('NewLine', '\n'),
			_Utils_Tuple2('nexist', '∄'),
			_Utils_Tuple2('nexists', '∄'),
			_Utils_Tuple2('Nfr', '\uD835\uDD11'),
			_Utils_Tuple2('nfr', '\uD835\uDD2B'),
			_Utils_Tuple2('ngE', '≧̸'),
			_Utils_Tuple2('nge', '≱'),
			_Utils_Tuple2('ngeq', '≱'),
			_Utils_Tuple2('ngeqq', '≧̸'),
			_Utils_Tuple2('ngeqslant', '⩾̸'),
			_Utils_Tuple2('nges', '⩾̸'),
			_Utils_Tuple2('nGg', '⋙̸'),
			_Utils_Tuple2('ngsim', '≵'),
			_Utils_Tuple2('nGt', '≫⃒'),
			_Utils_Tuple2('ngt', '≯'),
			_Utils_Tuple2('ngtr', '≯'),
			_Utils_Tuple2('nGtv', '≫̸'),
			_Utils_Tuple2('nharr', '↮'),
			_Utils_Tuple2('nhArr', '⇎'),
			_Utils_Tuple2('nhpar', '⫲'),
			_Utils_Tuple2('ni', '∋'),
			_Utils_Tuple2('nis', '⋼'),
			_Utils_Tuple2('nisd', '⋺'),
			_Utils_Tuple2('niv', '∋'),
			_Utils_Tuple2('NJcy', 'Њ'),
			_Utils_Tuple2('njcy', 'њ'),
			_Utils_Tuple2('nlarr', '↚'),
			_Utils_Tuple2('nlArr', '⇍'),
			_Utils_Tuple2('nldr', '‥'),
			_Utils_Tuple2('nlE', '≦̸'),
			_Utils_Tuple2('nle', '≰'),
			_Utils_Tuple2('nleftarrow', '↚'),
			_Utils_Tuple2('nLeftarrow', '⇍'),
			_Utils_Tuple2('nleftrightarrow', '↮'),
			_Utils_Tuple2('nLeftrightarrow', '⇎'),
			_Utils_Tuple2('nleq', '≰'),
			_Utils_Tuple2('nleqq', '≦̸'),
			_Utils_Tuple2('nleqslant', '⩽̸'),
			_Utils_Tuple2('nles', '⩽̸'),
			_Utils_Tuple2('nless', '≮'),
			_Utils_Tuple2('nLl', '⋘̸'),
			_Utils_Tuple2('nlsim', '≴'),
			_Utils_Tuple2('nLt', '≪⃒'),
			_Utils_Tuple2('nlt', '≮'),
			_Utils_Tuple2('nltri', '⋪'),
			_Utils_Tuple2('nltrie', '⋬'),
			_Utils_Tuple2('nLtv', '≪̸'),
			_Utils_Tuple2('nmid', '∤'),
			_Utils_Tuple2('NoBreak', '\u2060'),
			_Utils_Tuple2('NonBreakingSpace', '\u00A0'),
			_Utils_Tuple2('nopf', '\uD835\uDD5F'),
			_Utils_Tuple2('Nopf', 'ℕ'),
			_Utils_Tuple2('Not', '⫬'),
			_Utils_Tuple2('not', '¬'),
			_Utils_Tuple2('NotCongruent', '≢'),
			_Utils_Tuple2('NotCupCap', '≭'),
			_Utils_Tuple2('NotDoubleVerticalBar', '∦'),
			_Utils_Tuple2('NotElement', '∉'),
			_Utils_Tuple2('NotEqual', '≠'),
			_Utils_Tuple2('NotEqualTilde', '≂̸'),
			_Utils_Tuple2('NotExists', '∄'),
			_Utils_Tuple2('NotGreater', '≯'),
			_Utils_Tuple2('NotGreaterEqual', '≱'),
			_Utils_Tuple2('NotGreaterFullEqual', '≧̸'),
			_Utils_Tuple2('NotGreaterGreater', '≫̸'),
			_Utils_Tuple2('NotGreaterLess', '≹'),
			_Utils_Tuple2('NotGreaterSlantEqual', '⩾̸'),
			_Utils_Tuple2('NotGreaterTilde', '≵'),
			_Utils_Tuple2('NotHumpDownHump', '≎̸'),
			_Utils_Tuple2('NotHumpEqual', '≏̸'),
			_Utils_Tuple2('notin', '∉'),
			_Utils_Tuple2('notindot', '⋵̸'),
			_Utils_Tuple2('notinE', '⋹̸'),
			_Utils_Tuple2('notinva', '∉'),
			_Utils_Tuple2('notinvb', '⋷'),
			_Utils_Tuple2('notinvc', '⋶'),
			_Utils_Tuple2('NotLeftTriangleBar', '⧏̸'),
			_Utils_Tuple2('NotLeftTriangle', '⋪'),
			_Utils_Tuple2('NotLeftTriangleEqual', '⋬'),
			_Utils_Tuple2('NotLess', '≮'),
			_Utils_Tuple2('NotLessEqual', '≰'),
			_Utils_Tuple2('NotLessGreater', '≸'),
			_Utils_Tuple2('NotLessLess', '≪̸'),
			_Utils_Tuple2('NotLessSlantEqual', '⩽̸'),
			_Utils_Tuple2('NotLessTilde', '≴'),
			_Utils_Tuple2('NotNestedGreaterGreater', '⪢̸'),
			_Utils_Tuple2('NotNestedLessLess', '⪡̸'),
			_Utils_Tuple2('notni', '∌'),
			_Utils_Tuple2('notniva', '∌'),
			_Utils_Tuple2('notnivb', '⋾'),
			_Utils_Tuple2('notnivc', '⋽'),
			_Utils_Tuple2('NotPrecedes', '⊀'),
			_Utils_Tuple2('NotPrecedesEqual', '⪯̸'),
			_Utils_Tuple2('NotPrecedesSlantEqual', '⋠'),
			_Utils_Tuple2('NotReverseElement', '∌'),
			_Utils_Tuple2('NotRightTriangleBar', '⧐̸'),
			_Utils_Tuple2('NotRightTriangle', '⋫'),
			_Utils_Tuple2('NotRightTriangleEqual', '⋭'),
			_Utils_Tuple2('NotSquareSubset', '⊏̸'),
			_Utils_Tuple2('NotSquareSubsetEqual', '⋢'),
			_Utils_Tuple2('NotSquareSuperset', '⊐̸'),
			_Utils_Tuple2('NotSquareSupersetEqual', '⋣'),
			_Utils_Tuple2('NotSubset', '⊂⃒'),
			_Utils_Tuple2('NotSubsetEqual', '⊈'),
			_Utils_Tuple2('NotSucceeds', '⊁'),
			_Utils_Tuple2('NotSucceedsEqual', '⪰̸'),
			_Utils_Tuple2('NotSucceedsSlantEqual', '⋡'),
			_Utils_Tuple2('NotSucceedsTilde', '≿̸'),
			_Utils_Tuple2('NotSuperset', '⊃⃒'),
			_Utils_Tuple2('NotSupersetEqual', '⊉'),
			_Utils_Tuple2('NotTilde', '≁'),
			_Utils_Tuple2('NotTildeEqual', '≄'),
			_Utils_Tuple2('NotTildeFullEqual', '≇'),
			_Utils_Tuple2('NotTildeTilde', '≉'),
			_Utils_Tuple2('NotVerticalBar', '∤'),
			_Utils_Tuple2('nparallel', '∦'),
			_Utils_Tuple2('npar', '∦'),
			_Utils_Tuple2('nparsl', '⫽⃥'),
			_Utils_Tuple2('npart', '∂̸'),
			_Utils_Tuple2('npolint', '⨔'),
			_Utils_Tuple2('npr', '⊀'),
			_Utils_Tuple2('nprcue', '⋠'),
			_Utils_Tuple2('nprec', '⊀'),
			_Utils_Tuple2('npreceq', '⪯̸'),
			_Utils_Tuple2('npre', '⪯̸'),
			_Utils_Tuple2('nrarrc', '⤳̸'),
			_Utils_Tuple2('nrarr', '↛'),
			_Utils_Tuple2('nrArr', '⇏'),
			_Utils_Tuple2('nrarrw', '↝̸'),
			_Utils_Tuple2('nrightarrow', '↛'),
			_Utils_Tuple2('nRightarrow', '⇏'),
			_Utils_Tuple2('nrtri', '⋫'),
			_Utils_Tuple2('nrtrie', '⋭'),
			_Utils_Tuple2('nsc', '⊁'),
			_Utils_Tuple2('nsccue', '⋡'),
			_Utils_Tuple2('nsce', '⪰̸'),
			_Utils_Tuple2('Nscr', '\uD835\uDCA9'),
			_Utils_Tuple2('nscr', '\uD835\uDCC3'),
			_Utils_Tuple2('nshortmid', '∤'),
			_Utils_Tuple2('nshortparallel', '∦'),
			_Utils_Tuple2('nsim', '≁'),
			_Utils_Tuple2('nsime', '≄'),
			_Utils_Tuple2('nsimeq', '≄'),
			_Utils_Tuple2('nsmid', '∤'),
			_Utils_Tuple2('nspar', '∦'),
			_Utils_Tuple2('nsqsube', '⋢'),
			_Utils_Tuple2('nsqsupe', '⋣'),
			_Utils_Tuple2('nsub', '⊄'),
			_Utils_Tuple2('nsubE', '⫅̸'),
			_Utils_Tuple2('nsube', '⊈'),
			_Utils_Tuple2('nsubset', '⊂⃒'),
			_Utils_Tuple2('nsubseteq', '⊈'),
			_Utils_Tuple2('nsubseteqq', '⫅̸'),
			_Utils_Tuple2('nsucc', '⊁'),
			_Utils_Tuple2('nsucceq', '⪰̸'),
			_Utils_Tuple2('nsup', '⊅'),
			_Utils_Tuple2('nsupE', '⫆̸'),
			_Utils_Tuple2('nsupe', '⊉'),
			_Utils_Tuple2('nsupset', '⊃⃒'),
			_Utils_Tuple2('nsupseteq', '⊉'),
			_Utils_Tuple2('nsupseteqq', '⫆̸'),
			_Utils_Tuple2('ntgl', '≹'),
			_Utils_Tuple2('Ntilde', 'Ñ'),
			_Utils_Tuple2('ntilde', 'ñ'),
			_Utils_Tuple2('ntlg', '≸'),
			_Utils_Tuple2('ntriangleleft', '⋪'),
			_Utils_Tuple2('ntrianglelefteq', '⋬'),
			_Utils_Tuple2('ntriangleright', '⋫'),
			_Utils_Tuple2('ntrianglerighteq', '⋭'),
			_Utils_Tuple2('Nu', 'Ν'),
			_Utils_Tuple2('nu', 'ν'),
			_Utils_Tuple2('num', '#'),
			_Utils_Tuple2('numero', '№'),
			_Utils_Tuple2('numsp', '\u2007'),
			_Utils_Tuple2('nvap', '≍⃒'),
			_Utils_Tuple2('nvdash', '⊬'),
			_Utils_Tuple2('nvDash', '⊭'),
			_Utils_Tuple2('nVdash', '⊮'),
			_Utils_Tuple2('nVDash', '⊯'),
			_Utils_Tuple2('nvge', '≥⃒'),
			_Utils_Tuple2('nvgt', '>⃒'),
			_Utils_Tuple2('nvHarr', '⤄'),
			_Utils_Tuple2('nvinfin', '⧞'),
			_Utils_Tuple2('nvlArr', '⤂'),
			_Utils_Tuple2('nvle', '≤⃒'),
			_Utils_Tuple2('nvlt', '<⃒'),
			_Utils_Tuple2('nvltrie', '⊴⃒'),
			_Utils_Tuple2('nvrArr', '⤃'),
			_Utils_Tuple2('nvrtrie', '⊵⃒'),
			_Utils_Tuple2('nvsim', '∼⃒'),
			_Utils_Tuple2('nwarhk', '⤣'),
			_Utils_Tuple2('nwarr', '↖'),
			_Utils_Tuple2('nwArr', '⇖'),
			_Utils_Tuple2('nwarrow', '↖'),
			_Utils_Tuple2('nwnear', '⤧'),
			_Utils_Tuple2('Oacute', 'Ó'),
			_Utils_Tuple2('oacute', 'ó'),
			_Utils_Tuple2('oast', '⊛'),
			_Utils_Tuple2('Ocirc', 'Ô'),
			_Utils_Tuple2('ocirc', 'ô'),
			_Utils_Tuple2('ocir', '⊚'),
			_Utils_Tuple2('Ocy', 'О'),
			_Utils_Tuple2('ocy', 'о'),
			_Utils_Tuple2('odash', '⊝'),
			_Utils_Tuple2('Odblac', 'Ő'),
			_Utils_Tuple2('odblac', 'ő'),
			_Utils_Tuple2('odiv', '⨸'),
			_Utils_Tuple2('odot', '⊙'),
			_Utils_Tuple2('odsold', '⦼'),
			_Utils_Tuple2('OElig', 'Œ'),
			_Utils_Tuple2('oelig', 'œ'),
			_Utils_Tuple2('ofcir', '⦿'),
			_Utils_Tuple2('Ofr', '\uD835\uDD12'),
			_Utils_Tuple2('ofr', '\uD835\uDD2C'),
			_Utils_Tuple2('ogon', '˛'),
			_Utils_Tuple2('Ograve', 'Ò'),
			_Utils_Tuple2('ograve', 'ò'),
			_Utils_Tuple2('ogt', '⧁'),
			_Utils_Tuple2('ohbar', '⦵'),
			_Utils_Tuple2('ohm', 'Ω'),
			_Utils_Tuple2('oint', '∮'),
			_Utils_Tuple2('olarr', '↺'),
			_Utils_Tuple2('olcir', '⦾'),
			_Utils_Tuple2('olcross', '⦻'),
			_Utils_Tuple2('oline', '‾'),
			_Utils_Tuple2('olt', '⧀'),
			_Utils_Tuple2('Omacr', 'Ō'),
			_Utils_Tuple2('omacr', 'ō'),
			_Utils_Tuple2('Omega', 'Ω'),
			_Utils_Tuple2('omega', 'ω'),
			_Utils_Tuple2('Omicron', 'Ο'),
			_Utils_Tuple2('omicron', 'ο'),
			_Utils_Tuple2('omid', '⦶'),
			_Utils_Tuple2('ominus', '⊖'),
			_Utils_Tuple2('Oopf', '\uD835\uDD46'),
			_Utils_Tuple2('oopf', '\uD835\uDD60'),
			_Utils_Tuple2('opar', '⦷'),
			_Utils_Tuple2('OpenCurlyDoubleQuote', '“'),
			_Utils_Tuple2('OpenCurlyQuote', '‘'),
			_Utils_Tuple2('operp', '⦹'),
			_Utils_Tuple2('oplus', '⊕'),
			_Utils_Tuple2('orarr', '↻'),
			_Utils_Tuple2('Or', '⩔'),
			_Utils_Tuple2('or', '∨'),
			_Utils_Tuple2('ord', '⩝'),
			_Utils_Tuple2('order', 'ℴ'),
			_Utils_Tuple2('orderof', 'ℴ'),
			_Utils_Tuple2('ordf', 'ª'),
			_Utils_Tuple2('ordm', 'º'),
			_Utils_Tuple2('origof', '⊶'),
			_Utils_Tuple2('oror', '⩖'),
			_Utils_Tuple2('orslope', '⩗'),
			_Utils_Tuple2('orv', '⩛'),
			_Utils_Tuple2('oS', 'Ⓢ'),
			_Utils_Tuple2('Oscr', '\uD835\uDCAA'),
			_Utils_Tuple2('oscr', 'ℴ'),
			_Utils_Tuple2('Oslash', 'Ø'),
			_Utils_Tuple2('oslash', 'ø'),
			_Utils_Tuple2('osol', '⊘'),
			_Utils_Tuple2('Otilde', 'Õ'),
			_Utils_Tuple2('otilde', 'õ'),
			_Utils_Tuple2('otimesas', '⨶'),
			_Utils_Tuple2('Otimes', '⨷'),
			_Utils_Tuple2('otimes', '⊗'),
			_Utils_Tuple2('Ouml', 'Ö'),
			_Utils_Tuple2('ouml', 'ö'),
			_Utils_Tuple2('ovbar', '⌽'),
			_Utils_Tuple2('OverBar', '‾'),
			_Utils_Tuple2('OverBrace', '⏞'),
			_Utils_Tuple2('OverBracket', '⎴'),
			_Utils_Tuple2('OverParenthesis', '⏜'),
			_Utils_Tuple2('para', '¶'),
			_Utils_Tuple2('parallel', '∥'),
			_Utils_Tuple2('par', '∥'),
			_Utils_Tuple2('parsim', '⫳'),
			_Utils_Tuple2('parsl', '⫽'),
			_Utils_Tuple2('part', '∂'),
			_Utils_Tuple2('PartialD', '∂'),
			_Utils_Tuple2('Pcy', 'П'),
			_Utils_Tuple2('pcy', 'п'),
			_Utils_Tuple2('percnt', '%'),
			_Utils_Tuple2('period', '.'),
			_Utils_Tuple2('permil', '‰'),
			_Utils_Tuple2('perp', '⊥'),
			_Utils_Tuple2('pertenk', '‱'),
			_Utils_Tuple2('Pfr', '\uD835\uDD13'),
			_Utils_Tuple2('pfr', '\uD835\uDD2D'),
			_Utils_Tuple2('Phi', 'Φ'),
			_Utils_Tuple2('phi', 'φ'),
			_Utils_Tuple2('phiv', 'ϕ'),
			_Utils_Tuple2('phmmat', 'ℳ'),
			_Utils_Tuple2('phone', '☎'),
			_Utils_Tuple2('Pi', 'Π'),
			_Utils_Tuple2('pi', 'π'),
			_Utils_Tuple2('pitchfork', '⋔'),
			_Utils_Tuple2('piv', 'ϖ'),
			_Utils_Tuple2('planck', 'ℏ'),
			_Utils_Tuple2('planckh', 'ℎ'),
			_Utils_Tuple2('plankv', 'ℏ'),
			_Utils_Tuple2('plusacir', '⨣'),
			_Utils_Tuple2('plusb', '⊞'),
			_Utils_Tuple2('pluscir', '⨢'),
			_Utils_Tuple2('plus', '+'),
			_Utils_Tuple2('plusdo', '∔'),
			_Utils_Tuple2('plusdu', '⨥'),
			_Utils_Tuple2('pluse', '⩲'),
			_Utils_Tuple2('PlusMinus', '±'),
			_Utils_Tuple2('plusmn', '±'),
			_Utils_Tuple2('plussim', '⨦'),
			_Utils_Tuple2('plustwo', '⨧'),
			_Utils_Tuple2('pm', '±'),
			_Utils_Tuple2('Poincareplane', 'ℌ'),
			_Utils_Tuple2('pointint', '⨕'),
			_Utils_Tuple2('popf', '\uD835\uDD61'),
			_Utils_Tuple2('Popf', 'ℙ'),
			_Utils_Tuple2('pound', '£'),
			_Utils_Tuple2('prap', '⪷'),
			_Utils_Tuple2('Pr', '⪻'),
			_Utils_Tuple2('pr', '≺'),
			_Utils_Tuple2('prcue', '≼'),
			_Utils_Tuple2('precapprox', '⪷'),
			_Utils_Tuple2('prec', '≺'),
			_Utils_Tuple2('preccurlyeq', '≼'),
			_Utils_Tuple2('Precedes', '≺'),
			_Utils_Tuple2('PrecedesEqual', '⪯'),
			_Utils_Tuple2('PrecedesSlantEqual', '≼'),
			_Utils_Tuple2('PrecedesTilde', '≾'),
			_Utils_Tuple2('preceq', '⪯'),
			_Utils_Tuple2('precnapprox', '⪹'),
			_Utils_Tuple2('precneqq', '⪵'),
			_Utils_Tuple2('precnsim', '⋨'),
			_Utils_Tuple2('pre', '⪯'),
			_Utils_Tuple2('prE', '⪳'),
			_Utils_Tuple2('precsim', '≾'),
			_Utils_Tuple2('prime', '′'),
			_Utils_Tuple2('Prime', '″'),
			_Utils_Tuple2('primes', 'ℙ'),
			_Utils_Tuple2('prnap', '⪹'),
			_Utils_Tuple2('prnE', '⪵'),
			_Utils_Tuple2('prnsim', '⋨'),
			_Utils_Tuple2('prod', '∏'),
			_Utils_Tuple2('Product', '∏'),
			_Utils_Tuple2('profalar', '⌮'),
			_Utils_Tuple2('profline', '⌒'),
			_Utils_Tuple2('profsurf', '⌓'),
			_Utils_Tuple2('prop', '∝'),
			_Utils_Tuple2('Proportional', '∝'),
			_Utils_Tuple2('Proportion', '∷'),
			_Utils_Tuple2('propto', '∝'),
			_Utils_Tuple2('prsim', '≾'),
			_Utils_Tuple2('prurel', '⊰'),
			_Utils_Tuple2('Pscr', '\uD835\uDCAB'),
			_Utils_Tuple2('pscr', '\uD835\uDCC5'),
			_Utils_Tuple2('Psi', 'Ψ'),
			_Utils_Tuple2('psi', 'ψ'),
			_Utils_Tuple2('puncsp', '\u2008'),
			_Utils_Tuple2('Qfr', '\uD835\uDD14'),
			_Utils_Tuple2('qfr', '\uD835\uDD2E'),
			_Utils_Tuple2('qint', '⨌'),
			_Utils_Tuple2('qopf', '\uD835\uDD62'),
			_Utils_Tuple2('Qopf', 'ℚ'),
			_Utils_Tuple2('qprime', '⁗'),
			_Utils_Tuple2('Qscr', '\uD835\uDCAC'),
			_Utils_Tuple2('qscr', '\uD835\uDCC6'),
			_Utils_Tuple2('quaternions', 'ℍ'),
			_Utils_Tuple2('quatint', '⨖'),
			_Utils_Tuple2('quest', '?'),
			_Utils_Tuple2('questeq', '≟'),
			_Utils_Tuple2('quot', '\"'),
			_Utils_Tuple2('QUOT', '\"'),
			_Utils_Tuple2('rAarr', '⇛'),
			_Utils_Tuple2('race', '∽̱'),
			_Utils_Tuple2('Racute', 'Ŕ'),
			_Utils_Tuple2('racute', 'ŕ'),
			_Utils_Tuple2('radic', '√'),
			_Utils_Tuple2('raemptyv', '⦳'),
			_Utils_Tuple2('rang', '⟩'),
			_Utils_Tuple2('Rang', '⟫'),
			_Utils_Tuple2('rangd', '⦒'),
			_Utils_Tuple2('range', '⦥'),
			_Utils_Tuple2('rangle', '⟩'),
			_Utils_Tuple2('raquo', '»'),
			_Utils_Tuple2('rarrap', '⥵'),
			_Utils_Tuple2('rarrb', '⇥'),
			_Utils_Tuple2('rarrbfs', '⤠'),
			_Utils_Tuple2('rarrc', '⤳'),
			_Utils_Tuple2('rarr', '→'),
			_Utils_Tuple2('Rarr', '↠'),
			_Utils_Tuple2('rArr', '⇒'),
			_Utils_Tuple2('rarrfs', '⤞'),
			_Utils_Tuple2('rarrhk', '↪'),
			_Utils_Tuple2('rarrlp', '↬'),
			_Utils_Tuple2('rarrpl', '⥅'),
			_Utils_Tuple2('rarrsim', '⥴'),
			_Utils_Tuple2('Rarrtl', '⤖'),
			_Utils_Tuple2('rarrtl', '↣'),
			_Utils_Tuple2('rarrw', '↝'),
			_Utils_Tuple2('ratail', '⤚'),
			_Utils_Tuple2('rAtail', '⤜'),
			_Utils_Tuple2('ratio', '∶'),
			_Utils_Tuple2('rationals', 'ℚ'),
			_Utils_Tuple2('rbarr', '⤍'),
			_Utils_Tuple2('rBarr', '⤏'),
			_Utils_Tuple2('RBarr', '⤐'),
			_Utils_Tuple2('rbbrk', '❳'),
			_Utils_Tuple2('rbrace', '}'),
			_Utils_Tuple2('rbrack', ']'),
			_Utils_Tuple2('rbrke', '⦌'),
			_Utils_Tuple2('rbrksld', '⦎'),
			_Utils_Tuple2('rbrkslu', '⦐'),
			_Utils_Tuple2('Rcaron', 'Ř'),
			_Utils_Tuple2('rcaron', 'ř'),
			_Utils_Tuple2('Rcedil', 'Ŗ'),
			_Utils_Tuple2('rcedil', 'ŗ'),
			_Utils_Tuple2('rceil', '⌉'),
			_Utils_Tuple2('rcub', '}'),
			_Utils_Tuple2('Rcy', 'Р'),
			_Utils_Tuple2('rcy', 'р'),
			_Utils_Tuple2('rdca', '⤷'),
			_Utils_Tuple2('rdldhar', '⥩'),
			_Utils_Tuple2('rdquo', '”'),
			_Utils_Tuple2('rdquor', '”'),
			_Utils_Tuple2('rdsh', '↳'),
			_Utils_Tuple2('real', 'ℜ'),
			_Utils_Tuple2('realine', 'ℛ'),
			_Utils_Tuple2('realpart', 'ℜ'),
			_Utils_Tuple2('reals', 'ℝ'),
			_Utils_Tuple2('Re', 'ℜ'),
			_Utils_Tuple2('rect', '▭'),
			_Utils_Tuple2('reg', '®'),
			_Utils_Tuple2('REG', '®'),
			_Utils_Tuple2('ReverseElement', '∋'),
			_Utils_Tuple2('ReverseEquilibrium', '⇋'),
			_Utils_Tuple2('ReverseUpEquilibrium', '⥯'),
			_Utils_Tuple2('rfisht', '⥽'),
			_Utils_Tuple2('rfloor', '⌋'),
			_Utils_Tuple2('rfr', '\uD835\uDD2F'),
			_Utils_Tuple2('Rfr', 'ℜ'),
			_Utils_Tuple2('rHar', '⥤'),
			_Utils_Tuple2('rhard', '⇁'),
			_Utils_Tuple2('rharu', '⇀'),
			_Utils_Tuple2('rharul', '⥬'),
			_Utils_Tuple2('Rho', 'Ρ'),
			_Utils_Tuple2('rho', 'ρ'),
			_Utils_Tuple2('rhov', 'ϱ'),
			_Utils_Tuple2('RightAngleBracket', '⟩'),
			_Utils_Tuple2('RightArrowBar', '⇥'),
			_Utils_Tuple2('rightarrow', '→'),
			_Utils_Tuple2('RightArrow', '→'),
			_Utils_Tuple2('Rightarrow', '⇒'),
			_Utils_Tuple2('RightArrowLeftArrow', '⇄'),
			_Utils_Tuple2('rightarrowtail', '↣'),
			_Utils_Tuple2('RightCeiling', '⌉'),
			_Utils_Tuple2('RightDoubleBracket', '⟧'),
			_Utils_Tuple2('RightDownTeeVector', '⥝'),
			_Utils_Tuple2('RightDownVectorBar', '⥕'),
			_Utils_Tuple2('RightDownVector', '⇂'),
			_Utils_Tuple2('RightFloor', '⌋'),
			_Utils_Tuple2('rightharpoondown', '⇁'),
			_Utils_Tuple2('rightharpoonup', '⇀'),
			_Utils_Tuple2('rightleftarrows', '⇄'),
			_Utils_Tuple2('rightleftharpoons', '⇌'),
			_Utils_Tuple2('rightrightarrows', '⇉'),
			_Utils_Tuple2('rightsquigarrow', '↝'),
			_Utils_Tuple2('RightTeeArrow', '↦'),
			_Utils_Tuple2('RightTee', '⊢'),
			_Utils_Tuple2('RightTeeVector', '⥛'),
			_Utils_Tuple2('rightthreetimes', '⋌'),
			_Utils_Tuple2('RightTriangleBar', '⧐'),
			_Utils_Tuple2('RightTriangle', '⊳'),
			_Utils_Tuple2('RightTriangleEqual', '⊵'),
			_Utils_Tuple2('RightUpDownVector', '⥏'),
			_Utils_Tuple2('RightUpTeeVector', '⥜'),
			_Utils_Tuple2('RightUpVectorBar', '⥔'),
			_Utils_Tuple2('RightUpVector', '↾'),
			_Utils_Tuple2('RightVectorBar', '⥓'),
			_Utils_Tuple2('RightVector', '⇀'),
			_Utils_Tuple2('ring', '˚'),
			_Utils_Tuple2('risingdotseq', '≓'),
			_Utils_Tuple2('rlarr', '⇄'),
			_Utils_Tuple2('rlhar', '⇌'),
			_Utils_Tuple2('rlm', '\u200F'),
			_Utils_Tuple2('rmoustache', '⎱'),
			_Utils_Tuple2('rmoust', '⎱'),
			_Utils_Tuple2('rnmid', '⫮'),
			_Utils_Tuple2('roang', '⟭'),
			_Utils_Tuple2('roarr', '⇾'),
			_Utils_Tuple2('robrk', '⟧'),
			_Utils_Tuple2('ropar', '⦆'),
			_Utils_Tuple2('ropf', '\uD835\uDD63'),
			_Utils_Tuple2('Ropf', 'ℝ'),
			_Utils_Tuple2('roplus', '⨮'),
			_Utils_Tuple2('rotimes', '⨵'),
			_Utils_Tuple2('RoundImplies', '⥰'),
			_Utils_Tuple2('rpar', ')'),
			_Utils_Tuple2('rpargt', '⦔'),
			_Utils_Tuple2('rppolint', '⨒'),
			_Utils_Tuple2('rrarr', '⇉'),
			_Utils_Tuple2('Rrightarrow', '⇛'),
			_Utils_Tuple2('rsaquo', '›'),
			_Utils_Tuple2('rscr', '\uD835\uDCC7'),
			_Utils_Tuple2('Rscr', 'ℛ'),
			_Utils_Tuple2('rsh', '↱'),
			_Utils_Tuple2('Rsh', '↱'),
			_Utils_Tuple2('rsqb', ']'),
			_Utils_Tuple2('rsquo', '’'),
			_Utils_Tuple2('rsquor', '’'),
			_Utils_Tuple2('rthree', '⋌'),
			_Utils_Tuple2('rtimes', '⋊'),
			_Utils_Tuple2('rtri', '▹'),
			_Utils_Tuple2('rtrie', '⊵'),
			_Utils_Tuple2('rtrif', '▸'),
			_Utils_Tuple2('rtriltri', '⧎'),
			_Utils_Tuple2('RuleDelayed', '⧴'),
			_Utils_Tuple2('ruluhar', '⥨'),
			_Utils_Tuple2('rx', '℞'),
			_Utils_Tuple2('Sacute', 'Ś'),
			_Utils_Tuple2('sacute', 'ś'),
			_Utils_Tuple2('sbquo', '‚'),
			_Utils_Tuple2('scap', '⪸'),
			_Utils_Tuple2('Scaron', 'Š'),
			_Utils_Tuple2('scaron', 'š'),
			_Utils_Tuple2('Sc', '⪼'),
			_Utils_Tuple2('sc', '≻'),
			_Utils_Tuple2('sccue', '≽'),
			_Utils_Tuple2('sce', '⪰'),
			_Utils_Tuple2('scE', '⪴'),
			_Utils_Tuple2('Scedil', 'Ş'),
			_Utils_Tuple2('scedil', 'ş'),
			_Utils_Tuple2('Scirc', 'Ŝ'),
			_Utils_Tuple2('scirc', 'ŝ'),
			_Utils_Tuple2('scnap', '⪺'),
			_Utils_Tuple2('scnE', '⪶'),
			_Utils_Tuple2('scnsim', '⋩'),
			_Utils_Tuple2('scpolint', '⨓'),
			_Utils_Tuple2('scsim', '≿'),
			_Utils_Tuple2('Scy', 'С'),
			_Utils_Tuple2('scy', 'с'),
			_Utils_Tuple2('sdotb', '⊡'),
			_Utils_Tuple2('sdot', '⋅'),
			_Utils_Tuple2('sdote', '⩦'),
			_Utils_Tuple2('searhk', '⤥'),
			_Utils_Tuple2('searr', '↘'),
			_Utils_Tuple2('seArr', '⇘'),
			_Utils_Tuple2('searrow', '↘'),
			_Utils_Tuple2('sect', '§'),
			_Utils_Tuple2('semi', ';'),
			_Utils_Tuple2('seswar', '⤩'),
			_Utils_Tuple2('setminus', '∖'),
			_Utils_Tuple2('setmn', '∖'),
			_Utils_Tuple2('sext', '✶'),
			_Utils_Tuple2('Sfr', '\uD835\uDD16'),
			_Utils_Tuple2('sfr', '\uD835\uDD30'),
			_Utils_Tuple2('sfrown', '⌢'),
			_Utils_Tuple2('sharp', '♯'),
			_Utils_Tuple2('SHCHcy', 'Щ'),
			_Utils_Tuple2('shchcy', 'щ'),
			_Utils_Tuple2('SHcy', 'Ш'),
			_Utils_Tuple2('shcy', 'ш'),
			_Utils_Tuple2('ShortDownArrow', '↓'),
			_Utils_Tuple2('ShortLeftArrow', '←'),
			_Utils_Tuple2('shortmid', '∣'),
			_Utils_Tuple2('shortparallel', '∥'),
			_Utils_Tuple2('ShortRightArrow', '→'),
			_Utils_Tuple2('ShortUpArrow', '↑'),
			_Utils_Tuple2('shy', '\u00AD'),
			_Utils_Tuple2('Sigma', 'Σ'),
			_Utils_Tuple2('sigma', 'σ'),
			_Utils_Tuple2('sigmaf', 'ς'),
			_Utils_Tuple2('sigmav', 'ς'),
			_Utils_Tuple2('sim', '∼'),
			_Utils_Tuple2('simdot', '⩪'),
			_Utils_Tuple2('sime', '≃'),
			_Utils_Tuple2('simeq', '≃'),
			_Utils_Tuple2('simg', '⪞'),
			_Utils_Tuple2('simgE', '⪠'),
			_Utils_Tuple2('siml', '⪝'),
			_Utils_Tuple2('simlE', '⪟'),
			_Utils_Tuple2('simne', '≆'),
			_Utils_Tuple2('simplus', '⨤'),
			_Utils_Tuple2('simrarr', '⥲'),
			_Utils_Tuple2('slarr', '←'),
			_Utils_Tuple2('SmallCircle', '∘'),
			_Utils_Tuple2('smallsetminus', '∖'),
			_Utils_Tuple2('smashp', '⨳'),
			_Utils_Tuple2('smeparsl', '⧤'),
			_Utils_Tuple2('smid', '∣'),
			_Utils_Tuple2('smile', '⌣'),
			_Utils_Tuple2('smt', '⪪'),
			_Utils_Tuple2('smte', '⪬'),
			_Utils_Tuple2('smtes', '⪬︀'),
			_Utils_Tuple2('SOFTcy', 'Ь'),
			_Utils_Tuple2('softcy', 'ь'),
			_Utils_Tuple2('solbar', '⌿'),
			_Utils_Tuple2('solb', '⧄'),
			_Utils_Tuple2('sol', '/'),
			_Utils_Tuple2('Sopf', '\uD835\uDD4A'),
			_Utils_Tuple2('sopf', '\uD835\uDD64'),
			_Utils_Tuple2('spades', '♠'),
			_Utils_Tuple2('spadesuit', '♠'),
			_Utils_Tuple2('spar', '∥'),
			_Utils_Tuple2('sqcap', '⊓'),
			_Utils_Tuple2('sqcaps', '⊓︀'),
			_Utils_Tuple2('sqcup', '⊔'),
			_Utils_Tuple2('sqcups', '⊔︀'),
			_Utils_Tuple2('Sqrt', '√'),
			_Utils_Tuple2('sqsub', '⊏'),
			_Utils_Tuple2('sqsube', '⊑'),
			_Utils_Tuple2('sqsubset', '⊏'),
			_Utils_Tuple2('sqsubseteq', '⊑'),
			_Utils_Tuple2('sqsup', '⊐'),
			_Utils_Tuple2('sqsupe', '⊒'),
			_Utils_Tuple2('sqsupset', '⊐'),
			_Utils_Tuple2('sqsupseteq', '⊒'),
			_Utils_Tuple2('square', '□'),
			_Utils_Tuple2('Square', '□'),
			_Utils_Tuple2('SquareIntersection', '⊓'),
			_Utils_Tuple2('SquareSubset', '⊏'),
			_Utils_Tuple2('SquareSubsetEqual', '⊑'),
			_Utils_Tuple2('SquareSuperset', '⊐'),
			_Utils_Tuple2('SquareSupersetEqual', '⊒'),
			_Utils_Tuple2('SquareUnion', '⊔'),
			_Utils_Tuple2('squarf', '▪'),
			_Utils_Tuple2('squ', '□'),
			_Utils_Tuple2('squf', '▪'),
			_Utils_Tuple2('srarr', '→'),
			_Utils_Tuple2('Sscr', '\uD835\uDCAE'),
			_Utils_Tuple2('sscr', '\uD835\uDCC8'),
			_Utils_Tuple2('ssetmn', '∖'),
			_Utils_Tuple2('ssmile', '⌣'),
			_Utils_Tuple2('sstarf', '⋆'),
			_Utils_Tuple2('Star', '⋆'),
			_Utils_Tuple2('star', '☆'),
			_Utils_Tuple2('starf', '★'),
			_Utils_Tuple2('straightepsilon', 'ϵ'),
			_Utils_Tuple2('straightphi', 'ϕ'),
			_Utils_Tuple2('strns', '¯'),
			_Utils_Tuple2('sub', '⊂'),
			_Utils_Tuple2('Sub', '⋐'),
			_Utils_Tuple2('subdot', '⪽'),
			_Utils_Tuple2('subE', '⫅'),
			_Utils_Tuple2('sube', '⊆'),
			_Utils_Tuple2('subedot', '⫃'),
			_Utils_Tuple2('submult', '⫁'),
			_Utils_Tuple2('subnE', '⫋'),
			_Utils_Tuple2('subne', '⊊'),
			_Utils_Tuple2('subplus', '⪿'),
			_Utils_Tuple2('subrarr', '⥹'),
			_Utils_Tuple2('subset', '⊂'),
			_Utils_Tuple2('Subset', '⋐'),
			_Utils_Tuple2('subseteq', '⊆'),
			_Utils_Tuple2('subseteqq', '⫅'),
			_Utils_Tuple2('SubsetEqual', '⊆'),
			_Utils_Tuple2('subsetneq', '⊊'),
			_Utils_Tuple2('subsetneqq', '⫋'),
			_Utils_Tuple2('subsim', '⫇'),
			_Utils_Tuple2('subsub', '⫕'),
			_Utils_Tuple2('subsup', '⫓'),
			_Utils_Tuple2('succapprox', '⪸'),
			_Utils_Tuple2('succ', '≻'),
			_Utils_Tuple2('succcurlyeq', '≽'),
			_Utils_Tuple2('Succeeds', '≻'),
			_Utils_Tuple2('SucceedsEqual', '⪰'),
			_Utils_Tuple2('SucceedsSlantEqual', '≽'),
			_Utils_Tuple2('SucceedsTilde', '≿'),
			_Utils_Tuple2('succeq', '⪰'),
			_Utils_Tuple2('succnapprox', '⪺'),
			_Utils_Tuple2('succneqq', '⪶'),
			_Utils_Tuple2('succnsim', '⋩'),
			_Utils_Tuple2('succsim', '≿'),
			_Utils_Tuple2('SuchThat', '∋'),
			_Utils_Tuple2('sum', '∑'),
			_Utils_Tuple2('Sum', '∑'),
			_Utils_Tuple2('sung', '♪'),
			_Utils_Tuple2('sup1', '¹'),
			_Utils_Tuple2('sup2', '²'),
			_Utils_Tuple2('sup3', '³'),
			_Utils_Tuple2('sup', '⊃'),
			_Utils_Tuple2('Sup', '⋑'),
			_Utils_Tuple2('supdot', '⪾'),
			_Utils_Tuple2('supdsub', '⫘'),
			_Utils_Tuple2('supE', '⫆'),
			_Utils_Tuple2('supe', '⊇'),
			_Utils_Tuple2('supedot', '⫄'),
			_Utils_Tuple2('Superset', '⊃'),
			_Utils_Tuple2('SupersetEqual', '⊇'),
			_Utils_Tuple2('suphsol', '⟉'),
			_Utils_Tuple2('suphsub', '⫗'),
			_Utils_Tuple2('suplarr', '⥻'),
			_Utils_Tuple2('supmult', '⫂'),
			_Utils_Tuple2('supnE', '⫌'),
			_Utils_Tuple2('supne', '⊋'),
			_Utils_Tuple2('supplus', '⫀'),
			_Utils_Tuple2('supset', '⊃'),
			_Utils_Tuple2('Supset', '⋑'),
			_Utils_Tuple2('supseteq', '⊇'),
			_Utils_Tuple2('supseteqq', '⫆'),
			_Utils_Tuple2('supsetneq', '⊋'),
			_Utils_Tuple2('supsetneqq', '⫌'),
			_Utils_Tuple2('supsim', '⫈'),
			_Utils_Tuple2('supsub', '⫔'),
			_Utils_Tuple2('supsup', '⫖'),
			_Utils_Tuple2('swarhk', '⤦'),
			_Utils_Tuple2('swarr', '↙'),
			_Utils_Tuple2('swArr', '⇙'),
			_Utils_Tuple2('swarrow', '↙'),
			_Utils_Tuple2('swnwar', '⤪'),
			_Utils_Tuple2('szlig', 'ß'),
			_Utils_Tuple2('Tab', '\t'),
			_Utils_Tuple2('target', '⌖'),
			_Utils_Tuple2('Tau', 'Τ'),
			_Utils_Tuple2('tau', 'τ'),
			_Utils_Tuple2('tbrk', '⎴'),
			_Utils_Tuple2('Tcaron', 'Ť'),
			_Utils_Tuple2('tcaron', 'ť'),
			_Utils_Tuple2('Tcedil', 'Ţ'),
			_Utils_Tuple2('tcedil', 'ţ'),
			_Utils_Tuple2('Tcy', 'Т'),
			_Utils_Tuple2('tcy', 'т'),
			_Utils_Tuple2('tdot', '⃛'),
			_Utils_Tuple2('telrec', '⌕'),
			_Utils_Tuple2('Tfr', '\uD835\uDD17'),
			_Utils_Tuple2('tfr', '\uD835\uDD31'),
			_Utils_Tuple2('there4', '∴'),
			_Utils_Tuple2('therefore', '∴'),
			_Utils_Tuple2('Therefore', '∴'),
			_Utils_Tuple2('Theta', 'Θ'),
			_Utils_Tuple2('theta', 'θ'),
			_Utils_Tuple2('thetasym', 'ϑ'),
			_Utils_Tuple2('thetav', 'ϑ'),
			_Utils_Tuple2('thickapprox', '≈'),
			_Utils_Tuple2('thicksim', '∼'),
			_Utils_Tuple2('ThickSpace', '\u205F\u200A'),
			_Utils_Tuple2('ThinSpace', '\u2009'),
			_Utils_Tuple2('thinsp', '\u2009'),
			_Utils_Tuple2('thkap', '≈'),
			_Utils_Tuple2('thksim', '∼'),
			_Utils_Tuple2('THORN', 'Þ'),
			_Utils_Tuple2('thorn', 'þ'),
			_Utils_Tuple2('tilde', '˜'),
			_Utils_Tuple2('Tilde', '∼'),
			_Utils_Tuple2('TildeEqual', '≃'),
			_Utils_Tuple2('TildeFullEqual', '≅'),
			_Utils_Tuple2('TildeTilde', '≈'),
			_Utils_Tuple2('timesbar', '⨱'),
			_Utils_Tuple2('timesb', '⊠'),
			_Utils_Tuple2('times', '×'),
			_Utils_Tuple2('timesd', '⨰'),
			_Utils_Tuple2('tint', '∭'),
			_Utils_Tuple2('toea', '⤨'),
			_Utils_Tuple2('topbot', '⌶'),
			_Utils_Tuple2('topcir', '⫱'),
			_Utils_Tuple2('top', '⊤'),
			_Utils_Tuple2('Topf', '\uD835\uDD4B'),
			_Utils_Tuple2('topf', '\uD835\uDD65'),
			_Utils_Tuple2('topfork', '⫚'),
			_Utils_Tuple2('tosa', '⤩'),
			_Utils_Tuple2('tprime', '‴'),
			_Utils_Tuple2('trade', '™'),
			_Utils_Tuple2('TRADE', '™'),
			_Utils_Tuple2('triangle', '▵'),
			_Utils_Tuple2('triangledown', '▿'),
			_Utils_Tuple2('triangleleft', '◃'),
			_Utils_Tuple2('trianglelefteq', '⊴'),
			_Utils_Tuple2('triangleq', '≜'),
			_Utils_Tuple2('triangleright', '▹'),
			_Utils_Tuple2('trianglerighteq', '⊵'),
			_Utils_Tuple2('tridot', '◬'),
			_Utils_Tuple2('trie', '≜'),
			_Utils_Tuple2('triminus', '⨺'),
			_Utils_Tuple2('TripleDot', '⃛'),
			_Utils_Tuple2('triplus', '⨹'),
			_Utils_Tuple2('trisb', '⧍'),
			_Utils_Tuple2('tritime', '⨻'),
			_Utils_Tuple2('trpezium', '⏢'),
			_Utils_Tuple2('Tscr', '\uD835\uDCAF'),
			_Utils_Tuple2('tscr', '\uD835\uDCC9'),
			_Utils_Tuple2('TScy', 'Ц'),
			_Utils_Tuple2('tscy', 'ц'),
			_Utils_Tuple2('TSHcy', 'Ћ'),
			_Utils_Tuple2('tshcy', 'ћ'),
			_Utils_Tuple2('Tstrok', 'Ŧ'),
			_Utils_Tuple2('tstrok', 'ŧ'),
			_Utils_Tuple2('twixt', '≬'),
			_Utils_Tuple2('twoheadleftarrow', '↞'),
			_Utils_Tuple2('twoheadrightarrow', '↠'),
			_Utils_Tuple2('Uacute', 'Ú'),
			_Utils_Tuple2('uacute', 'ú'),
			_Utils_Tuple2('uarr', '↑'),
			_Utils_Tuple2('Uarr', '↟'),
			_Utils_Tuple2('uArr', '⇑'),
			_Utils_Tuple2('Uarrocir', '⥉'),
			_Utils_Tuple2('Ubrcy', 'Ў'),
			_Utils_Tuple2('ubrcy', 'ў'),
			_Utils_Tuple2('Ubreve', 'Ŭ'),
			_Utils_Tuple2('ubreve', 'ŭ'),
			_Utils_Tuple2('Ucirc', 'Û'),
			_Utils_Tuple2('ucirc', 'û'),
			_Utils_Tuple2('Ucy', 'У'),
			_Utils_Tuple2('ucy', 'у'),
			_Utils_Tuple2('udarr', '⇅'),
			_Utils_Tuple2('Udblac', 'Ű'),
			_Utils_Tuple2('udblac', 'ű'),
			_Utils_Tuple2('udhar', '⥮'),
			_Utils_Tuple2('ufisht', '⥾'),
			_Utils_Tuple2('Ufr', '\uD835\uDD18'),
			_Utils_Tuple2('ufr', '\uD835\uDD32'),
			_Utils_Tuple2('Ugrave', 'Ù'),
			_Utils_Tuple2('ugrave', 'ù'),
			_Utils_Tuple2('uHar', '⥣'),
			_Utils_Tuple2('uharl', '↿'),
			_Utils_Tuple2('uharr', '↾'),
			_Utils_Tuple2('uhblk', '▀'),
			_Utils_Tuple2('ulcorn', '⌜'),
			_Utils_Tuple2('ulcorner', '⌜'),
			_Utils_Tuple2('ulcrop', '⌏'),
			_Utils_Tuple2('ultri', '◸'),
			_Utils_Tuple2('Umacr', 'Ū'),
			_Utils_Tuple2('umacr', 'ū'),
			_Utils_Tuple2('uml', '¨'),
			_Utils_Tuple2('UnderBar', '_'),
			_Utils_Tuple2('UnderBrace', '⏟'),
			_Utils_Tuple2('UnderBracket', '⎵'),
			_Utils_Tuple2('UnderParenthesis', '⏝'),
			_Utils_Tuple2('Union', '⋃'),
			_Utils_Tuple2('UnionPlus', '⊎'),
			_Utils_Tuple2('Uogon', 'Ų'),
			_Utils_Tuple2('uogon', 'ų'),
			_Utils_Tuple2('Uopf', '\uD835\uDD4C'),
			_Utils_Tuple2('uopf', '\uD835\uDD66'),
			_Utils_Tuple2('UpArrowBar', '⤒'),
			_Utils_Tuple2('uparrow', '↑'),
			_Utils_Tuple2('UpArrow', '↑'),
			_Utils_Tuple2('Uparrow', '⇑'),
			_Utils_Tuple2('UpArrowDownArrow', '⇅'),
			_Utils_Tuple2('updownarrow', '↕'),
			_Utils_Tuple2('UpDownArrow', '↕'),
			_Utils_Tuple2('Updownarrow', '⇕'),
			_Utils_Tuple2('UpEquilibrium', '⥮'),
			_Utils_Tuple2('upharpoonleft', '↿'),
			_Utils_Tuple2('upharpoonright', '↾'),
			_Utils_Tuple2('uplus', '⊎'),
			_Utils_Tuple2('UpperLeftArrow', '↖'),
			_Utils_Tuple2('UpperRightArrow', '↗'),
			_Utils_Tuple2('upsi', 'υ'),
			_Utils_Tuple2('Upsi', 'ϒ'),
			_Utils_Tuple2('upsih', 'ϒ'),
			_Utils_Tuple2('Upsilon', 'Υ'),
			_Utils_Tuple2('upsilon', 'υ'),
			_Utils_Tuple2('UpTeeArrow', '↥'),
			_Utils_Tuple2('UpTee', '⊥'),
			_Utils_Tuple2('upuparrows', '⇈'),
			_Utils_Tuple2('urcorn', '⌝'),
			_Utils_Tuple2('urcorner', '⌝'),
			_Utils_Tuple2('urcrop', '⌎'),
			_Utils_Tuple2('Uring', 'Ů'),
			_Utils_Tuple2('uring', 'ů'),
			_Utils_Tuple2('urtri', '◹'),
			_Utils_Tuple2('Uscr', '\uD835\uDCB0'),
			_Utils_Tuple2('uscr', '\uD835\uDCCA'),
			_Utils_Tuple2('utdot', '⋰'),
			_Utils_Tuple2('Utilde', 'Ũ'),
			_Utils_Tuple2('utilde', 'ũ'),
			_Utils_Tuple2('utri', '▵'),
			_Utils_Tuple2('utrif', '▴'),
			_Utils_Tuple2('uuarr', '⇈'),
			_Utils_Tuple2('Uuml', 'Ü'),
			_Utils_Tuple2('uuml', 'ü'),
			_Utils_Tuple2('uwangle', '⦧'),
			_Utils_Tuple2('vangrt', '⦜'),
			_Utils_Tuple2('varepsilon', 'ϵ'),
			_Utils_Tuple2('varkappa', 'ϰ'),
			_Utils_Tuple2('varnothing', '∅'),
			_Utils_Tuple2('varphi', 'ϕ'),
			_Utils_Tuple2('varpi', 'ϖ'),
			_Utils_Tuple2('varpropto', '∝'),
			_Utils_Tuple2('varr', '↕'),
			_Utils_Tuple2('vArr', '⇕'),
			_Utils_Tuple2('varrho', 'ϱ'),
			_Utils_Tuple2('varsigma', 'ς'),
			_Utils_Tuple2('varsubsetneq', '⊊︀'),
			_Utils_Tuple2('varsubsetneqq', '⫋︀'),
			_Utils_Tuple2('varsupsetneq', '⊋︀'),
			_Utils_Tuple2('varsupsetneqq', '⫌︀'),
			_Utils_Tuple2('vartheta', 'ϑ'),
			_Utils_Tuple2('vartriangleleft', '⊲'),
			_Utils_Tuple2('vartriangleright', '⊳'),
			_Utils_Tuple2('vBar', '⫨'),
			_Utils_Tuple2('Vbar', '⫫'),
			_Utils_Tuple2('vBarv', '⫩'),
			_Utils_Tuple2('Vcy', 'В'),
			_Utils_Tuple2('vcy', 'в'),
			_Utils_Tuple2('vdash', '⊢'),
			_Utils_Tuple2('vDash', '⊨'),
			_Utils_Tuple2('Vdash', '⊩'),
			_Utils_Tuple2('VDash', '⊫'),
			_Utils_Tuple2('Vdashl', '⫦'),
			_Utils_Tuple2('veebar', '⊻'),
			_Utils_Tuple2('vee', '∨'),
			_Utils_Tuple2('Vee', '⋁'),
			_Utils_Tuple2('veeeq', '≚'),
			_Utils_Tuple2('vellip', '⋮'),
			_Utils_Tuple2('verbar', '|'),
			_Utils_Tuple2('Verbar', '‖'),
			_Utils_Tuple2('vert', '|'),
			_Utils_Tuple2('Vert', '‖'),
			_Utils_Tuple2('VerticalBar', '∣'),
			_Utils_Tuple2('VerticalLine', '|'),
			_Utils_Tuple2('VerticalSeparator', '❘'),
			_Utils_Tuple2('VerticalTilde', '≀'),
			_Utils_Tuple2('VeryThinSpace', '\u200A'),
			_Utils_Tuple2('Vfr', '\uD835\uDD19'),
			_Utils_Tuple2('vfr', '\uD835\uDD33'),
			_Utils_Tuple2('vltri', '⊲'),
			_Utils_Tuple2('vnsub', '⊂⃒'),
			_Utils_Tuple2('vnsup', '⊃⃒'),
			_Utils_Tuple2('Vopf', '\uD835\uDD4D'),
			_Utils_Tuple2('vopf', '\uD835\uDD67'),
			_Utils_Tuple2('vprop', '∝'),
			_Utils_Tuple2('vrtri', '⊳'),
			_Utils_Tuple2('Vscr', '\uD835\uDCB1'),
			_Utils_Tuple2('vscr', '\uD835\uDCCB'),
			_Utils_Tuple2('vsubnE', '⫋︀'),
			_Utils_Tuple2('vsubne', '⊊︀'),
			_Utils_Tuple2('vsupnE', '⫌︀'),
			_Utils_Tuple2('vsupne', '⊋︀'),
			_Utils_Tuple2('Vvdash', '⊪'),
			_Utils_Tuple2('vzigzag', '⦚'),
			_Utils_Tuple2('Wcirc', 'Ŵ'),
			_Utils_Tuple2('wcirc', 'ŵ'),
			_Utils_Tuple2('wedbar', '⩟'),
			_Utils_Tuple2('wedge', '∧'),
			_Utils_Tuple2('Wedge', '⋀'),
			_Utils_Tuple2('wedgeq', '≙'),
			_Utils_Tuple2('weierp', '℘'),
			_Utils_Tuple2('Wfr', '\uD835\uDD1A'),
			_Utils_Tuple2('wfr', '\uD835\uDD34'),
			_Utils_Tuple2('Wopf', '\uD835\uDD4E'),
			_Utils_Tuple2('wopf', '\uD835\uDD68'),
			_Utils_Tuple2('wp', '℘'),
			_Utils_Tuple2('wr', '≀'),
			_Utils_Tuple2('wreath', '≀'),
			_Utils_Tuple2('Wscr', '\uD835\uDCB2'),
			_Utils_Tuple2('wscr', '\uD835\uDCCC'),
			_Utils_Tuple2('xcap', '⋂'),
			_Utils_Tuple2('xcirc', '◯'),
			_Utils_Tuple2('xcup', '⋃'),
			_Utils_Tuple2('xdtri', '▽'),
			_Utils_Tuple2('Xfr', '\uD835\uDD1B'),
			_Utils_Tuple2('xfr', '\uD835\uDD35'),
			_Utils_Tuple2('xharr', '⟷'),
			_Utils_Tuple2('xhArr', '⟺'),
			_Utils_Tuple2('Xi', 'Ξ'),
			_Utils_Tuple2('xi', 'ξ'),
			_Utils_Tuple2('xlarr', '⟵'),
			_Utils_Tuple2('xlArr', '⟸'),
			_Utils_Tuple2('xmap', '⟼'),
			_Utils_Tuple2('xnis', '⋻'),
			_Utils_Tuple2('xodot', '⨀'),
			_Utils_Tuple2('Xopf', '\uD835\uDD4F'),
			_Utils_Tuple2('xopf', '\uD835\uDD69'),
			_Utils_Tuple2('xoplus', '⨁'),
			_Utils_Tuple2('xotime', '⨂'),
			_Utils_Tuple2('xrarr', '⟶'),
			_Utils_Tuple2('xrArr', '⟹'),
			_Utils_Tuple2('Xscr', '\uD835\uDCB3'),
			_Utils_Tuple2('xscr', '\uD835\uDCCD'),
			_Utils_Tuple2('xsqcup', '⨆'),
			_Utils_Tuple2('xuplus', '⨄'),
			_Utils_Tuple2('xutri', '△'),
			_Utils_Tuple2('xvee', '⋁'),
			_Utils_Tuple2('xwedge', '⋀'),
			_Utils_Tuple2('Yacute', 'Ý'),
			_Utils_Tuple2('yacute', 'ý'),
			_Utils_Tuple2('YAcy', 'Я'),
			_Utils_Tuple2('yacy', 'я'),
			_Utils_Tuple2('Ycirc', 'Ŷ'),
			_Utils_Tuple2('ycirc', 'ŷ'),
			_Utils_Tuple2('Ycy', 'Ы'),
			_Utils_Tuple2('ycy', 'ы'),
			_Utils_Tuple2('yen', '¥'),
			_Utils_Tuple2('Yfr', '\uD835\uDD1C'),
			_Utils_Tuple2('yfr', '\uD835\uDD36'),
			_Utils_Tuple2('YIcy', 'Ї'),
			_Utils_Tuple2('yicy', 'ї'),
			_Utils_Tuple2('Yopf', '\uD835\uDD50'),
			_Utils_Tuple2('yopf', '\uD835\uDD6A'),
			_Utils_Tuple2('Yscr', '\uD835\uDCB4'),
			_Utils_Tuple2('yscr', '\uD835\uDCCE'),
			_Utils_Tuple2('YUcy', 'Ю'),
			_Utils_Tuple2('yucy', 'ю'),
			_Utils_Tuple2('yuml', 'ÿ'),
			_Utils_Tuple2('Yuml', 'Ÿ'),
			_Utils_Tuple2('Zacute', 'Ź'),
			_Utils_Tuple2('zacute', 'ź'),
			_Utils_Tuple2('Zcaron', 'Ž'),
			_Utils_Tuple2('zcaron', 'ž'),
			_Utils_Tuple2('Zcy', 'З'),
			_Utils_Tuple2('zcy', 'з'),
			_Utils_Tuple2('Zdot', 'Ż'),
			_Utils_Tuple2('zdot', 'ż'),
			_Utils_Tuple2('zeetrf', 'ℨ'),
			_Utils_Tuple2('ZeroWidthSpace', '\u200B'),
			_Utils_Tuple2('Zeta', 'Ζ'),
			_Utils_Tuple2('zeta', 'ζ'),
			_Utils_Tuple2('zfr', '\uD835\uDD37'),
			_Utils_Tuple2('Zfr', 'ℨ'),
			_Utils_Tuple2('ZHcy', 'Ж'),
			_Utils_Tuple2('zhcy', 'ж'),
			_Utils_Tuple2('zigrarr', '⇝'),
			_Utils_Tuple2('zopf', '\uD835\uDD6B'),
			_Utils_Tuple2('Zopf', 'ℤ'),
			_Utils_Tuple2('Zscr', '\uD835\uDCB5'),
			_Utils_Tuple2('zscr', '\uD835\uDCCF'),
			_Utils_Tuple2('zwj', '\u200D'),
			_Utils_Tuple2('zwnj', '\u200C')
		]));
var $author$project$Lia$Markdown$HTML$Attributes$namedCharacterReference = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	function (reference) {
		return A2(
			$elm$core$Maybe$withDefault,
			'&' + (reference + ';'),
			A2($elm$core$Dict$get, reference, $author$project$Lia$Markdown$HTML$NamedCharacterReferences$dict));
	},
	$andre_dietrich$parser_combinators$Combine$regex('[a-zA-Z]+'));
var $elm$core$Char$fromCode = _Char_fromCode;
var $elm$core$Basics$pow = _Basics_pow;
var $rtfeldman$elm_hex$Hex$fromStringHelp = F3(
	function (position, chars, accumulated) {
		fromStringHelp:
		while (true) {
			if (!chars.b) {
				return $elm$core$Result$Ok(accumulated);
			} else {
				var _char = chars.a;
				var rest = chars.b;
				switch (_char.valueOf()) {
					case '0':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated;
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '1':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + A2($elm$core$Basics$pow, 16, position);
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '2':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (2 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '3':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (3 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '4':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (4 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '5':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (5 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '6':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (6 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '7':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (7 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '8':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (8 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '9':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (9 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'a':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (10 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'b':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (11 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'c':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (12 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'd':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (13 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'e':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (14 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'f':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (15 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					default:
						var nonHex = _char;
						return $elm$core$Result$Err(
							$elm$core$String$fromChar(nonHex) + ' is not a valid hexadecimal character.');
				}
			}
		}
	});
var $elm$core$Result$map = F2(
	function (func, ra) {
		if (ra.$ === 'Ok') {
			var a = ra.a;
			return $elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return $elm$core$Result$Err(e);
		}
	});
var $elm$core$Result$mapError = F2(
	function (f, result) {
		if (result.$ === 'Ok') {
			var v = result.a;
			return $elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return $elm$core$Result$Err(
				f(e));
		}
	});
var $elm$core$List$tail = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(xs);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$toList = function (string) {
	return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
};
var $rtfeldman$elm_hex$Hex$fromString = function (str) {
	if ($elm$core$String$isEmpty(str)) {
		return $elm$core$Result$Err('Empty strings are not valid hexadecimal strings.');
	} else {
		var result = function () {
			if (A2($elm$core$String$startsWith, '-', str)) {
				var list = A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					$elm$core$List$tail(
						$elm$core$String$toList(str)));
				return A2(
					$elm$core$Result$map,
					$elm$core$Basics$negate,
					A3(
						$rtfeldman$elm_hex$Hex$fromStringHelp,
						$elm$core$List$length(list) - 1,
						list,
						0));
			} else {
				return A3(
					$rtfeldman$elm_hex$Hex$fromStringHelp,
					$elm$core$String$length(str) - 1,
					$elm$core$String$toList(str),
					0);
			}
		}();
		var formatError = function (err) {
			return A2(
				$elm$core$String$join,
				' ',
				_List_fromArray(
					['\"' + (str + '\"'), 'is not a valid hexadecimal string because', err]));
		};
		return A2($elm$core$Result$mapError, formatError, result);
	}
};
var $author$project$Lia$Markdown$HTML$Attributes$hexadecimal = A2(
	$andre_dietrich$parser_combinators$Combine$andThen,
	function (hex) {
		var _v0 = $rtfeldman$elm_hex$Hex$fromString(
			$elm$core$String$toLower(hex));
		if (_v0.$ === 'Ok') {
			var value = _v0.a;
			return $andre_dietrich$parser_combinators$Combine$succeed(value);
		} else {
			var err = _v0.a;
			return $andre_dietrich$parser_combinators$Combine$fail(err);
		}
	},
	$andre_dietrich$parser_combinators$Combine$regex('[0-9a-fA-F]+'));
var $author$project$Lia$Markdown$HTML$Attributes$numericCharacterReference = function () {
	var codepoint = $andre_dietrich$parser_combinators$Combine$choice(
		_List_fromArray(
			[
				A2(
				$andre_dietrich$parser_combinators$Combine$keep,
				$author$project$Lia$Markdown$HTML$Attributes$hexadecimal,
				$andre_dietrich$parser_combinators$Combine$regex('(x|X)')),
				A2(
				$andre_dietrich$parser_combinators$Combine$keep,
				$andre_dietrich$parser_combinators$Combine$Num$int,
				$andre_dietrich$parser_combinators$Combine$regex('0*'))
			]));
	return A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		A2(
			$andre_dietrich$parser_combinators$Combine$map,
			A2($elm$core$Basics$composeR, $elm$core$Char$fromCode, $elm$core$String$fromChar),
			codepoint),
		$andre_dietrich$parser_combinators$Combine$string('#'));
}();
var $author$project$Lia$Markdown$HTML$Attributes$characterReference = A2(
	$andre_dietrich$parser_combinators$Combine$keep,
	$andre_dietrich$parser_combinators$Combine$choice(
		_List_fromArray(
			[
				A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$andre_dietrich$parser_combinators$Combine$string(';'),
				$author$project$Lia$Markdown$HTML$Attributes$namedCharacterReference),
				A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$andre_dietrich$parser_combinators$Combine$string(';'),
				$author$project$Lia$Markdown$HTML$Attributes$numericCharacterReference),
				$andre_dietrich$parser_combinators$Combine$succeed('&')
			])),
	$andre_dietrich$parser_combinators$Combine$string('&'));
var $author$project$Lia$Markdown$HTML$Attributes$tagAttributeQuotedValue = function (quote) {
	return A2(
		$andre_dietrich$parser_combinators$Combine$ignore,
		$andre_dietrich$parser_combinators$Combine$string(quote),
		A2(
			$andre_dietrich$parser_combinators$Combine$keep,
			A2(
				$andre_dietrich$parser_combinators$Combine$map,
				$elm$core$String$join(''),
				$andre_dietrich$parser_combinators$Combine$many(
					$andre_dietrich$parser_combinators$Combine$choice(
						_List_fromArray(
							[
								A2(
								$andre_dietrich$parser_combinators$Combine$map,
								A2($elm$core$String$replace, '\\' + quote, quote),
								$andre_dietrich$parser_combinators$Combine$regex('([^' + (quote + (']*|(?<=\\\\)' + (quote + ')*'))))),
								$author$project$Lia$Markdown$HTML$Attributes$characterReference
							])))),
			$andre_dietrich$parser_combinators$Combine$string(quote)));
};
var $author$project$Lia$Markdown$HTML$Attributes$tagAttributeUnquotedValue = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$elm$core$String$join(''),
	$andre_dietrich$parser_combinators$Combine$many1(
		$andre_dietrich$parser_combinators$Combine$choice(
			_List_fromArray(
				[
					$andre_dietrich$parser_combinators$Combine$regex('[^\\s\"\'=<>`&]+'),
					$author$project$Lia$Markdown$HTML$Attributes$characterReference
				]))));
var $author$project$Lia$Markdown$HTML$Attributes$tagAttributeValue = A2(
	$andre_dietrich$parser_combinators$Combine$or,
	A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		$andre_dietrich$parser_combinators$Combine$choice(
			_List_fromArray(
				[
					$author$project$Lia$Markdown$HTML$Attributes$tagAttributeUnquotedValue,
					$author$project$Lia$Markdown$HTML$Attributes$tagAttributeQuotedValue('\"'),
					$author$project$Lia$Markdown$HTML$Attributes$tagAttributeQuotedValue('\'')
				])),
		A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			$andre_dietrich$parser_combinators$Combine$whitespace,
			$andre_dietrich$parser_combinators$Combine$string('='))),
	$andre_dietrich$parser_combinators$Combine$succeed(''));
var $author$project$Lia$Markdown$HTML$Attributes$parse = function (url) {
	return A2(
		$andre_dietrich$parser_combinators$Combine$map,
		$author$project$Lia$Markdown$HTML$Attributes$base(url),
		A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			$andre_dietrich$parser_combinators$Combine$whitespace,
			A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				$author$project$Lia$Markdown$HTML$Attributes$tagAttributeValue,
				A2(
					$andre_dietrich$parser_combinators$Combine$ignore,
					$andre_dietrich$parser_combinators$Combine$whitespace,
					A2(
						$andre_dietrich$parser_combinators$Combine$map,
						A2($elm$core$Basics$composeR, $elm$core$String$toLower, $elm$core$Tuple$pair),
						$andre_dietrich$parser_combinators$Combine$regex('[A-Za-z0-9_\\-]+'))))));
};
var $author$project$Lia$Parser$Helper$spaces = $andre_dietrich$parser_combinators$Combine$regex('[\t ]*');
var $author$project$Lia$Markdown$Inline$Parser$annotations = function () {
	var attr = A2(
		$andre_dietrich$parser_combinators$Combine$andThen,
		$author$project$Lia$Markdown$HTML$Attributes$parse,
		$andre_dietrich$parser_combinators$Combine$withState(
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.defines;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.base;
					},
					$andre_dietrich$parser_combinators$Combine$succeed))));
	return A2(
		$andre_dietrich$parser_combinators$Combine$ignore,
		$author$project$Lia$Markdown$Inline$Parser$comments,
		A2(
			$andre_dietrich$parser_combinators$Combine$map,
			$elm$core$Maybe$withDefault(_List_Nil),
			$andre_dietrich$parser_combinators$Combine$maybe(
				A2(
					$andre_dietrich$parser_combinators$Combine$keep,
					$author$project$Lia$Markdown$Inline$Parser$comment(attr),
					$author$project$Lia$Parser$Helper$spaces))));
}();
var $author$project$Lia$Markdown$Inline$Types$Symbol = F2(
	function (a, b) {
		return {$: 'Symbol', a: a, b: b};
	});
var $author$project$Lia$Markdown$Inline$Parser$Symbol$arrows = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$author$project$Lia$Markdown$Inline$Types$Symbol,
	$andre_dietrich$parser_combinators$Combine$choice(
		_List_fromArray(
			[
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'⟷',
				$andre_dietrich$parser_combinators$Combine$string('<-->')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'⟵',
				$andre_dietrich$parser_combinators$Combine$string('<--')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'⟶',
				$andre_dietrich$parser_combinators$Combine$string('-->')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'↞',
				$andre_dietrich$parser_combinators$Combine$string('<<-')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'↠',
				$andre_dietrich$parser_combinators$Combine$string('->>')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'↔',
				$andre_dietrich$parser_combinators$Combine$string('<->')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'↣',
				$andre_dietrich$parser_combinators$Combine$string('>->')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'↢',
				$andre_dietrich$parser_combinators$Combine$string('<-<')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'→',
				$andre_dietrich$parser_combinators$Combine$string('->')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'←',
				$andre_dietrich$parser_combinators$Combine$string('<-')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'↜',
				$andre_dietrich$parser_combinators$Combine$string('<~')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'↝',
				$andre_dietrich$parser_combinators$Combine$string('~>')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'⟺',
				$andre_dietrich$parser_combinators$Combine$string('<==>')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'⟹',
				$andre_dietrich$parser_combinators$Combine$string('==>')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'⟸',
				$andre_dietrich$parser_combinators$Combine$string('<==')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'⇔',
				$andre_dietrich$parser_combinators$Combine$string('<=>')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'⇒',
				$andre_dietrich$parser_combinators$Combine$string('=>')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'⇐',
				$andre_dietrich$parser_combinators$Combine$string('<='))
			])));
var $author$project$Lia$Markdown$Inline$Multimedia$audio = $author$project$Lia$Parser$PatReplace$replace(
	_List_fromArray(
		[
			{
			by: function (w) {
				return 'https://w.soundcloud.com/player/?url=https://soundcloud.com/' + w;
			},
			pattern: 'https?:\\/\\/(?:w\\.|www\\.|)(?:soundcloud\\.com\\/)(?:(?:player\\/\\?url=https\\%3A\\/\\/api.soundcloud.com\\/tracks\\/)|)(((\\w|-)[^A-z]{7})|([A-Za-z0-9]+(?:[-_][A-Za-z0-9]+)*(?!\\/sets(?:\\/|$))(?:\\/[A-Za-z0-9]+(?:[-_][A-Za-z0-9]+)*){1,2}))'
		}
		]));
var $author$project$Lia$Markdown$Inline$Types$Verbatim = F2(
	function (a, b) {
		return {$: 'Verbatim', a: a, b: b};
	});
var $author$project$Lia$Markdown$Inline$Parser$code = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	A2(
		$elm$core$Basics$composeR,
		A2($elm$core$String$replace, '\\`', '`'),
		$author$project$Lia$Markdown$Inline$Types$Verbatim),
	A2(
		$andre_dietrich$parser_combinators$Combine$ignore,
		$andre_dietrich$parser_combinators$Combine$string('`'),
		A2(
			$andre_dietrich$parser_combinators$Combine$keep,
			$andre_dietrich$parser_combinators$Combine$regex('([^`\\n]*|(?<=\\\\)`)+'),
			$andre_dietrich$parser_combinators$Combine$string('`'))));
var $author$project$Lia$Markdown$Inline$Parser$email = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$elm$core$Basics$append('mailto:'),
	A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		$andre_dietrich$parser_combinators$Combine$regex('[a-zA-Z0-9_.\\-]+@[a-zA-Z0-9_.\\-]+'),
		$andre_dietrich$parser_combinators$Combine$maybe(
			$andre_dietrich$parser_combinators$Combine$string('mailto:'))));
var $author$project$Lia$Markdown$Inline$Types$Formula = F3(
	function (a, b, c) {
		return {$: 'Formula', a: a, b: b, c: c};
	});
var $author$project$Lia$Markdown$Inline$Parser$Formula$formula_block = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$author$project$Lia$Markdown$Inline$Types$Formula('true'),
	A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		$author$project$Lia$Parser$Helper$stringTill(
			$andre_dietrich$parser_combinators$Combine$string('$$')),
		$andre_dietrich$parser_combinators$Combine$string('$$')));
var $author$project$Lia$Markdown$Inline$Parser$Formula$formula_inline = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$author$project$Lia$Markdown$Inline$Types$Formula('false'),
	A2(
		$andre_dietrich$parser_combinators$Combine$ignore,
		$andre_dietrich$parser_combinators$Combine$string('$'),
		A2(
			$andre_dietrich$parser_combinators$Combine$keep,
			$andre_dietrich$parser_combinators$Combine$regex('[^\\n$]+'),
			$andre_dietrich$parser_combinators$Combine$string('$'))));
var $author$project$Lia$Markdown$Inline$Parser$Formula$formula = A2($andre_dietrich$parser_combinators$Combine$or, $author$project$Lia$Markdown$Inline$Parser$Formula$formula_block, $author$project$Lia$Markdown$Inline$Parser$Formula$formula_inline);
var $author$project$Lia$Markdown$Inline$Types$Script = F2(
	function (a, b) {
		return {$: 'Script', a: a, b: b};
	});
var $andre_dietrich$parser_combinators$Combine$regexWith = F2(
	function (caseInsensitive, multiline) {
		return A2(
			$elm$core$Basics$composeR,
			A2(
				$andre_dietrich$parser_combinators$Combine$regexer,
				$elm$regex$Regex$fromStringWith(
					{caseInsensitive: caseInsensitive, multiline: multiline}),
				function ($) {
					return $.match;
				}),
			$andre_dietrich$parser_combinators$Combine$Parser);
	});
var $author$project$Lia$Markdown$Inline$Parser$scriptBody = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$elm$core$String$concat,
	A2(
		$andre_dietrich$parser_combinators$Combine$manyTill,
		$andre_dietrich$parser_combinators$Combine$choice(
			_List_fromArray(
				[
					$andre_dietrich$parser_combinators$Combine$regex('[^\"\'`</]+'),
					$andre_dietrich$parser_combinators$Combine$regex('[ \t\n]+'),
					$andre_dietrich$parser_combinators$Combine$regex('\"([^\"]*|(?<=\\\\)\")*\"'),
					$andre_dietrich$parser_combinators$Combine$regex('\'([^\']*|(?<=\\\\)\')*\''),
					$andre_dietrich$parser_combinators$Combine$regex('`([^`]*|\n|(?<=\\\\)`)*`'),
					$andre_dietrich$parser_combinators$Combine$regex('<(?!/)'),
					$andre_dietrich$parser_combinators$Combine$regex('//[^\n]*'),
					$andre_dietrich$parser_combinators$Combine$string('/')
				])),
		A3($andre_dietrich$parser_combinators$Combine$regexWith, true, false, '</script>')));
var $author$project$Lia$Markdown$Inline$Parser$javascriptWithAttributes = function () {
	var attr = A2(
		$andre_dietrich$parser_combinators$Combine$andThen,
		$author$project$Lia$Markdown$HTML$Attributes$parse,
		$andre_dietrich$parser_combinators$Combine$withState(
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.defines;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.base;
					},
					$andre_dietrich$parser_combinators$Combine$succeed))));
	return A2(
		$andre_dietrich$parser_combinators$Combine$andMap,
		$author$project$Lia$Markdown$Inline$Parser$scriptBody,
		A2(
			$andre_dietrich$parser_combinators$Combine$map,
			$elm$core$Tuple$pair,
			A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$andre_dietrich$parser_combinators$Combine$string('>'),
				A2(
					$andre_dietrich$parser_combinators$Combine$keep,
					$andre_dietrich$parser_combinators$Combine$many(
						A2($andre_dietrich$parser_combinators$Combine$keep, attr, $andre_dietrich$parser_combinators$Combine$whitespace)),
					A3($andre_dietrich$parser_combinators$Combine$regexWith, true, false, '<script')))));
}();
var $author$project$Lia$Markdown$Effect$Script$Types$Text = function (a) {
	return {$: 'Text', a: a};
};
var $elm$regex$Regex$find = _Regex_findAtMost(_Regex_infinity);
var $author$project$Lia$Markdown$HTML$Attributes$get = F2(
	function (name, attr) {
		get:
		while (true) {
			if (!attr.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var _v1 = attr.a;
				var key = _v1.a;
				var value = _v1.b;
				var xs = attr.b;
				if (_Utils_eq(key, name)) {
					return $elm$core$Maybe$Just(value);
				} else {
					var $temp$name = name,
						$temp$attr = xs;
					name = $temp$name;
					attr = $temp$attr;
					continue get;
				}
			}
		}
	});
var $author$project$Lia$Markdown$HTML$Attributes$isTrue = function (val) {
	return (val === '') || ((val === '1') || (val === 'true'));
};
var $author$project$Lia$Markdown$HTML$Attributes$isSetMaybe = function (name) {
	return A2(
		$elm$core$Basics$composeR,
		$author$project$Lia$Markdown$HTML$Attributes$get(name),
		$elm$core$Maybe$map(
			A2(
				$elm$core$Basics$composeR,
				$elm$core$String$trim,
				A2($elm$core$Basics$composeR, $elm$core$String$toLower, $author$project$Lia$Markdown$HTML$Attributes$isTrue))));
};
var $author$project$Lia$Markdown$HTML$Attributes$isSet = function (name) {
	return A2(
		$elm$core$Basics$composeR,
		$author$project$Lia$Markdown$HTML$Attributes$isSetMaybe(name),
		$elm$core$Maybe$withDefault(false));
};
var $author$project$Lia$Markdown$Effect$Script$Input$Button_ = {$: 'Button_'};
var $author$project$Lia$Markdown$Effect$Script$Input$Checkbox_ = function (a) {
	return {$: 'Checkbox_', a: a};
};
var $author$project$Lia$Markdown$Effect$Script$Input$Color_ = {$: 'Color_'};
var $author$project$Lia$Markdown$Effect$Script$Input$Date_ = {$: 'Date_'};
var $author$project$Lia$Markdown$Effect$Script$Input$DatetimeLocal_ = {$: 'DatetimeLocal_'};
var $author$project$Lia$Markdown$Effect$Script$Input$Email_ = {$: 'Email_'};
var $author$project$Lia$Markdown$Effect$Script$Input$File_ = {$: 'File_'};
var $author$project$Lia$Markdown$Effect$Script$Input$Hidden_ = {$: 'Hidden_'};
var $author$project$Lia$Markdown$Effect$Script$Input$Image_ = {$: 'Image_'};
var $author$project$Lia$Markdown$Effect$Script$Input$Month_ = {$: 'Month_'};
var $author$project$Lia$Markdown$Effect$Script$Input$Number_ = {$: 'Number_'};
var $author$project$Lia$Markdown$Effect$Script$Input$Password_ = {$: 'Password_'};
var $author$project$Lia$Markdown$Effect$Script$Input$Radio_ = function (a) {
	return {$: 'Radio_', a: a};
};
var $author$project$Lia$Markdown$Effect$Script$Input$Range_ = {$: 'Range_'};
var $author$project$Lia$Markdown$Effect$Script$Input$Search_ = {$: 'Search_'};
var $author$project$Lia$Markdown$Effect$Script$Input$Select_ = function (a) {
	return {$: 'Select_', a: a};
};
var $author$project$Lia$Markdown$Effect$Script$Input$Tel_ = {$: 'Tel_'};
var $author$project$Lia$Markdown$Effect$Script$Input$Text_ = {$: 'Text_'};
var $author$project$Lia$Markdown$Effect$Script$Input$Textarea_ = {$: 'Textarea_'};
var $author$project$Lia$Markdown$Effect$Script$Input$Time_ = {$: 'Time_'};
var $author$project$Lia$Markdown$Effect$Script$Input$Url_ = {$: 'Url_'};
var $author$project$Lia$Markdown$Effect$Script$Input$Week_ = {$: 'Week_'};
var $author$project$Lia$Markdown$Effect$Script$Input$options = A2(
	$elm$core$Basics$composeR,
	$author$project$Lia$Markdown$HTML$Attributes$get('options'),
	A2(
		$elm$core$Basics$composeR,
		$elm$core$Maybe$map(
			$elm$core$String$split('|')),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$Maybe$withDefault(_List_Nil),
			A2(
				$elm$core$Basics$composeR,
				$elm$core$List$map($elm$core$String$trim),
				$elm$core$List$filter(
					A2($elm$core$Basics$composeR, $elm$core$String$isEmpty, $elm$core$Basics$not))))));
var $author$project$Lia$Markdown$Effect$Script$Input$parseType_ = F2(
	function (params, input_) {
		switch (input_) {
			case 'button':
				return $author$project$Lia$Markdown$Effect$Script$Input$Button_;
			case 'checkbox':
				return $author$project$Lia$Markdown$Effect$Script$Input$Checkbox_(
					$author$project$Lia$Markdown$Effect$Script$Input$options(params));
			case 'color':
				return $author$project$Lia$Markdown$Effect$Script$Input$Color_;
			case 'date':
				return $author$project$Lia$Markdown$Effect$Script$Input$Date_;
			case 'datetime-local':
				return $author$project$Lia$Markdown$Effect$Script$Input$DatetimeLocal_;
			case 'email':
				return $author$project$Lia$Markdown$Effect$Script$Input$Email_;
			case 'file':
				return $author$project$Lia$Markdown$Effect$Script$Input$File_;
			case 'hidden':
				return $author$project$Lia$Markdown$Effect$Script$Input$Hidden_;
			case 'image':
				return $author$project$Lia$Markdown$Effect$Script$Input$Image_;
			case 'month':
				return $author$project$Lia$Markdown$Effect$Script$Input$Month_;
			case 'number':
				return $author$project$Lia$Markdown$Effect$Script$Input$Number_;
			case 'password':
				return $author$project$Lia$Markdown$Effect$Script$Input$Password_;
			case 'radio':
				return $author$project$Lia$Markdown$Effect$Script$Input$Radio_(
					$author$project$Lia$Markdown$Effect$Script$Input$options(params));
			case 'range':
				return $author$project$Lia$Markdown$Effect$Script$Input$Range_;
			case 'search':
				return $author$project$Lia$Markdown$Effect$Script$Input$Search_;
			case 'select':
				return $author$project$Lia$Markdown$Effect$Script$Input$Select_(
					$author$project$Lia$Markdown$Effect$Script$Input$options(params));
			case 'submit':
				return $author$project$Lia$Markdown$Effect$Script$Input$Button_;
			case 'tel':
				return $author$project$Lia$Markdown$Effect$Script$Input$Tel_;
			case 'textarea':
				return $author$project$Lia$Markdown$Effect$Script$Input$Textarea_;
			case 'time':
				return $author$project$Lia$Markdown$Effect$Script$Input$Time_;
			case 'url':
				return $author$project$Lia$Markdown$Effect$Script$Input$Url_;
			case 'week':
				return $author$project$Lia$Markdown$Effect$Script$Input$Week_;
			default:
				return $author$project$Lia$Markdown$Effect$Script$Input$Text_;
		}
	});
var $author$project$Lia$Markdown$Effect$Script$Input$runnable = F2(
	function (t_, updateOnChange) {
		var _v0 = _Utils_Tuple2(updateOnChange, t_);
		if (_v0.a.$ === 'Just') {
			var b = _v0.a.a;
			return b;
		} else {
			if (_v0.b.$ === 'Nothing') {
				var _v1 = _v0.a;
				var _v2 = _v0.b;
				return false;
			} else {
				var _v3 = _v0.a;
				var t = _v0.b.a;
				switch (t.$) {
					case 'Email_':
						return false;
					case 'Password_':
						return false;
					case 'Search_':
						return false;
					case 'Tel_':
						return false;
					case 'Textarea_':
						return false;
					case 'Url_':
						return false;
					default:
						return true;
				}
			}
		}
	});
var $author$project$Lia$Markdown$Effect$Script$Input$from = function (params) {
	var val = A2(
		$elm$core$Maybe$withDefault,
		'',
		A2($author$project$Lia$Markdown$HTML$Attributes$get, 'value', params));
	var t_ = A2(
		$elm$core$Maybe$map,
		$author$project$Lia$Markdown$Effect$Script$Input$parseType_(params),
		A2($author$project$Lia$Markdown$HTML$Attributes$get, 'input', params));
	var alwaysActive = A2($author$project$Lia$Markdown$HTML$Attributes$isSet, 'input-always-active', params);
	return {
		active: alwaysActive ? true : A2($author$project$Lia$Markdown$HTML$Attributes$isSet, 'input-active', params),
		alwaysActive: alwaysActive,
		_default: val,
		type_: t_,
		updateOnChange: A2(
			$author$project$Lia$Markdown$Effect$Script$Input$runnable,
			t_,
			A2($author$project$Lia$Markdown$HTML$Attributes$isSetMaybe, 'update-on-change', params)),
		value: val
	};
};
var $author$project$Lia$Markdown$Effect$Script$Intl$datetime = _List_fromArray(
	['calendar', 'datestyle', 'day', 'dayperiod', 'era', 'formatmatcher', 'fractionalseconddigits', 'hour', 'hour12', 'hourcycle', 'localematcher', 'minute', 'month', 'numberingsystem', 'second', 'timestyle', 'timezone', 'timezonename', 'weekday', 'year']);
var $author$project$Lia$Markdown$Effect$Script$Intl$list = _List_fromArray(
	['localematcher', 'type', 'localestyle']);
var $author$project$Lia$Markdown$Effect$Script$Intl$locale = function (lang) {
	return A2(
		$elm$core$Basics$composeR,
		$author$project$Lia$Markdown$HTML$Attributes$get('locale'),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$Maybe$withDefault(lang),
			$elm$core$Tuple$pair('locale')));
};
var $author$project$Lia$Markdown$Effect$Script$Intl$number = _List_fromArray(
	['compactdisplay', 'currency', 'currencydisplay', 'currencysign', 'localematcher', 'maximumfractiondigits', 'maximumsignificantdigits', 'minimumfractiondigits', 'minimumintegerdigits', 'minimumsignificantdigits', 'notation', 'numberingsystem', 'signdisplay', 'localestyle', 'unit', 'unitdisplay', 'usegrouping']);
var $author$project$Lia$Markdown$Effect$Script$Intl$pluralrules = _List_fromArray(
	['localematcher', 'type', 'minimumintegerdigits', 'minimumfractiondigits', 'maximumfractiondigits', 'minimumsignificantdigits', 'maximumsignificantdigits']);
var $author$project$Lia$Markdown$Effect$Script$Intl$relativetime = _List_fromArray(
	['unit', 'localematcher', 'numeric', 'localestyle']);
var $author$project$Lia$Markdown$HTML$Attributes$isMemberOf = F2(
	function (names, _v0) {
		var name = _v0.a;
		return A2($elm$core$List$member, name, names);
	});
var $author$project$Lia$Markdown$HTML$Attributes$filterNames = function (names) {
	return $elm$core$List$filter(
		$author$project$Lia$Markdown$HTML$Attributes$isMemberOf(names));
};
var $author$project$Lia$Markdown$Effect$Script$Intl$to = F2(
	function (format, names) {
		return A2(
			$elm$core$Basics$composeR,
			$author$project$Lia$Markdown$HTML$Attributes$filterNames(names),
			A2(
				$elm$core$Basics$composeR,
				$elm$core$List$cons(
					_Utils_Tuple2('format', format)),
				$elm$core$Maybe$Just));
	});
var $author$project$Lia$Markdown$Effect$Script$Intl$from = F2(
	function (lang, params) {
		return A2(
			$elm$core$Maybe$map,
			$elm$core$List$cons(
				A2($author$project$Lia$Markdown$Effect$Script$Intl$locale, lang, params)),
			function () {
				var _v0 = A2(
					$elm$core$Maybe$map,
					$elm$core$String$toLower,
					A2($author$project$Lia$Markdown$HTML$Attributes$get, 'format', params));
				_v0$5:
				while (true) {
					if (_v0.$ === 'Just') {
						switch (_v0.a) {
							case 'number':
								return A3($author$project$Lia$Markdown$Effect$Script$Intl$to, 'number', $author$project$Lia$Markdown$Effect$Script$Intl$number, params);
							case 'datetime':
								return A3($author$project$Lia$Markdown$Effect$Script$Intl$to, 'datetime', $author$project$Lia$Markdown$Effect$Script$Intl$datetime, params);
							case 'relativetime':
								return A3($author$project$Lia$Markdown$Effect$Script$Intl$to, 'relativetime', $author$project$Lia$Markdown$Effect$Script$Intl$relativetime, params);
							case 'list':
								return A3($author$project$Lia$Markdown$Effect$Script$Intl$to, 'list', $author$project$Lia$Markdown$Effect$Script$Intl$list, params);
							case 'pluralrules':
								return A3($author$project$Lia$Markdown$Effect$Script$Intl$to, 'pluralrules', $author$project$Lia$Markdown$Effect$Script$Intl$pluralrules, params);
							default:
								break _v0$5;
						}
					} else {
						break _v0$5;
					}
				}
				return $elm$core$Maybe$Nothing;
			}());
	});
var $author$project$Lia$Markdown$Effect$Script$Types$input = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('@input\\(`([^`]+)`\\)'));
var $author$project$Lia$Markdown$HTML$Attributes$isNotSet = function (name) {
	return A2(
		$elm$core$Basics$composeR,
		$author$project$Lia$Markdown$HTML$Attributes$isSetMaybe(name),
		$elm$core$Maybe$withDefault(true));
};
var $author$project$Lia$Markdown$Effect$Script$Types$push = F5(
	function (lang, id, params, script, javascript) {
		return A2(
			$elm$core$Array$push,
			{
				counter: 0,
				edit: false,
				effect_id: id,
				input: $author$project$Lia$Markdown$Effect$Script$Input$from(params),
				inputs: A2(
					$elm$core$List$filterMap,
					$elm$core$Basics$identity,
					A2(
						$elm$core$List$concatMap,
						function ($) {
							return $.submatches;
						},
						A2($elm$regex$Regex$find, $author$project$Lia$Markdown$Effect$Script$Types$input, script))),
				intl: A2($author$project$Lia$Markdown$Effect$Script$Intl$from, lang, params),
				modify: A2($author$project$Lia$Markdown$HTML$Attributes$isNotSet, 'modify', params),
				output: A2($author$project$Lia$Markdown$HTML$Attributes$get, 'output', params),
				result: A2(
					$elm$core$Maybe$map,
					$author$project$Lia$Markdown$Effect$Script$Types$Text,
					A2($author$project$Lia$Markdown$HTML$Attributes$get, 'default', params)),
				runOnce: A2($author$project$Lia$Markdown$HTML$Attributes$isSet, 'run-once', params),
				running: false,
				script: script,
				update: false,
				updated: false
			},
			javascript);
	});
var $author$project$Lia$Markdown$Effect$Script$Types$count = A2(
	$elm$core$Basics$composeR,
	$elm$core$Array$length,
	$elm$core$Basics$add(-1));
var $author$project$Lia$Markdown$Inline$Parser$scriptID = $andre_dietrich$parser_combinators$Combine$withState(
	A2(
		$elm$core$Basics$composeR,
		function ($) {
			return $.effect_model;
		},
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.javascript;
			},
			A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Effect$Script$Types$count, $andre_dietrich$parser_combinators$Combine$succeed))));
var $author$project$Lia$Markdown$Inline$Parser$html = function () {
	var state = function (_v0) {
		var attr = _v0.a;
		var script = _v0.b;
		return A2(
			$andre_dietrich$parser_combinators$Combine$keep,
			$andre_dietrich$parser_combinators$Combine$succeed(attr),
			$andre_dietrich$parser_combinators$Combine$modifyState(
				function (s) {
					var effect_model = s.effect_model;
					return _Utils_update(
						s,
						{
							effect_model: _Utils_update(
								effect_model,
								{
									javascript: A5(
										$author$project$Lia$Markdown$Effect$Script$Types$push,
										s.defines.language,
										A2(
											$elm$core$Maybe$withDefault,
											0,
											$elm$core$List$head(s.effect_number)),
										attr,
										$elm$core$String$trim(script),
										effect_model.javascript)
								})
						});
				}));
	};
	return A2(
		$andre_dietrich$parser_combinators$Combine$andMap,
		$author$project$Lia$Markdown$Inline$Parser$scriptID,
		A2(
			$andre_dietrich$parser_combinators$Combine$map,
			F2(
				function (attr, id) {
					return A2($author$project$Lia$Markdown$Inline$Types$Script, id, attr);
				}),
			A2($andre_dietrich$parser_combinators$Combine$andThen, state, $author$project$Lia$Markdown$Inline$Parser$javascriptWithAttributes)));
}();
var $author$project$Lia$Markdown$Effect$Parser$begin_ = function (e) {
	return A2(
		$andre_dietrich$parser_combinators$Combine$map,
		function (i) {
			return _Utils_update(
				e,
				{begin: i});
		},
		$author$project$Lia$Markdown$Effect$Parser$effect_number);
};
var $author$project$Lia$Markdown$Effect$Parser$end_ = function (e) {
	return A2(
		$andre_dietrich$parser_combinators$Combine$map,
		function (i) {
			return _Utils_update(
				e,
				{
					end: $elm$core$Maybe$Just(i)
				});
		},
		A2(
			$andre_dietrich$parser_combinators$Combine$keep,
			$andre_dietrich$parser_combinators$Combine$Num$int,
			$andre_dietrich$parser_combinators$Combine$regex('-[\t ]*')));
};
var $author$project$Lia$Markdown$Effect$Parser$playback_ = function (e) {
	return A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		$andre_dietrich$parser_combinators$Combine$succeed(
			_Utils_update(
				e,
				{playback: true})),
		A2(
			$andre_dietrich$parser_combinators$Combine$or,
			$andre_dietrich$parser_combinators$Combine$string('!>'),
			$andre_dietrich$parser_combinators$Combine$string('|>')));
};
var $author$project$Lia$Markdown$Effect$Parser$voice_ = function (e) {
	return A2(
		$andre_dietrich$parser_combinators$Combine$map,
		function (str) {
			return _Utils_update(
				e,
				{
					voice: $elm$core$String$trim(str)
				});
		},
		A2(
			$andre_dietrich$parser_combinators$Combine$keep,
			$andre_dietrich$parser_combinators$Combine$regex('([A-Za-z][A-Za-z0-9]+[ \t]*)+'),
			$author$project$Lia$Markdown$Macro$Parser$macro));
};
var $author$project$Lia$Markdown$Effect$Parser$effect = function (e) {
	return A2(
		$andre_dietrich$parser_combinators$Combine$optional,
		e,
		A2(
			$andre_dietrich$parser_combinators$Combine$keep,
			$andre_dietrich$parser_combinators$Combine$choice(
				_List_fromArray(
					[
						$author$project$Lia$Markdown$Effect$Parser$end_(e),
						$author$project$Lia$Markdown$Effect$Parser$begin_(e),
						$author$project$Lia$Markdown$Effect$Parser$playback_(e),
						$author$project$Lia$Markdown$Effect$Parser$voice_(e)
					])),
			$andre_dietrich$parser_combinators$Combine$whitespace));
};
var $author$project$Lia$Markdown$Effect$Types$empty = function (e) {
	return (!e.playback) && (e.begin < 0);
};
var $author$project$Lia$Markdown$Effect$Types$init = function (voice) {
	return {begin: -1, content: _List_Nil, end: $elm$core$Maybe$Nothing, id: -1, playback: false, voice: voice};
};
var $author$project$Lia$Markdown$Effect$Parser$definition = A2(
	$andre_dietrich$parser_combinators$Combine$andThen,
	function (e) {
		return $author$project$Lia$Markdown$Effect$Types$empty(e) ? $andre_dietrich$parser_combinators$Combine$fail('no effect definition') : $andre_dietrich$parser_combinators$Combine$succeed(e);
	},
	A2(
		$andre_dietrich$parser_combinators$Combine$andThen,
		$author$project$Lia$Markdown$Effect$Parser$effect,
		A2(
			$andre_dietrich$parser_combinators$Combine$andThen,
			$author$project$Lia$Markdown$Effect$Parser$effect,
			A2(
				$andre_dietrich$parser_combinators$Combine$andThen,
				$author$project$Lia$Markdown$Effect$Parser$effect,
				A2(
					$andre_dietrich$parser_combinators$Combine$andThen,
					$author$project$Lia$Markdown$Effect$Parser$effect,
					A2(
						$andre_dietrich$parser_combinators$Combine$map,
						$author$project$Lia$Markdown$Effect$Types$init,
						$andre_dietrich$parser_combinators$Combine$withState(
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.defines;
								},
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.narrator;
									},
									$andre_dietrich$parser_combinators$Combine$succeed)))))))));
var $author$project$Lia$Markdown$Effect$Parser$effect_id = A2(
	$andre_dietrich$parser_combinators$Combine$ignore,
	$andre_dietrich$parser_combinators$Combine$modifyState(
		function (s) {
			return _Utils_update(
				s,
				{effect_id: s.effect_id + 1});
		}),
	$andre_dietrich$parser_combinators$Combine$withState(
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.effect_id;
			},
			$andre_dietrich$parser_combinators$Combine$succeed)));
var $author$project$Lia$Markdown$Effect$Parser$inline = function (inlines) {
	return A2(
		$andre_dietrich$parser_combinators$Combine$andMap,
		$author$project$Lia$Markdown$Effect$Parser$effect_id,
		A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			$author$project$Lia$Markdown$Effect$Parser$reset_effect_number,
			A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				A2(
					$andre_dietrich$parser_combinators$Combine$manyTill,
					inlines,
					$andre_dietrich$parser_combinators$Combine$string('}')),
				A2(
					$andre_dietrich$parser_combinators$Combine$ignore,
					$andre_dietrich$parser_combinators$Combine$string('}{'),
					A2(
						$andre_dietrich$parser_combinators$Combine$map,
						F3(
							function (e, b, c) {
								return _Utils_update(
									e,
									{content: b, id: c});
							}),
						A2(
							$andre_dietrich$parser_combinators$Combine$keep,
							$author$project$Lia$Markdown$Effect$Parser$definition,
							$andre_dietrich$parser_combinators$Combine$string('{')))))));
};
var $author$project$Lia$Markdown$Inline$Types$FootnoteMark = F2(
	function (a, b) {
		return {$: 'FootnoteMark', a: a, b: b};
	});
var $author$project$Lia$Markdown$Types$Paragraph = F2(
	function (a, b) {
		return {$: 'Paragraph', a: a, b: b};
	});
var $author$project$Lia$Markdown$Footnote$Model$insert = F3(
	function (key, val, model) {
		return A3($elm$core$Dict$insert, key, val, model);
	});
var $author$project$Lia$Markdown$Footnote$Parser$add_footnote = function (_v0) {
	var key = _v0.a;
	var val = _v0.b;
	return $andre_dietrich$parser_combinators$Combine$modifyState(
		function (s) {
			return _Utils_update(
				s,
				{
					footnotes: A3($author$project$Lia$Markdown$Footnote$Model$insert, key, val, s.footnotes)
				});
		});
};
var $author$project$Lia$Markdown$Footnote$Parser$store = function (_v0) {
	var key = _v0.a;
	var val = _v0.b;
	if (val.$ === 'Just') {
		var v = val.a;
		return A2(
			$andre_dietrich$parser_combinators$Combine$keep,
			$andre_dietrich$parser_combinators$Combine$succeed(
				$author$project$Lia$Markdown$Inline$Types$FootnoteMark(key)),
			$author$project$Lia$Markdown$Footnote$Parser$add_footnote(
				_Utils_Tuple2(
					key,
					_List_fromArray(
						[
							A2(
							$author$project$Lia$Markdown$Types$Paragraph,
							_List_Nil,
							_List_fromArray(
								[
									A2($author$project$Lia$Markdown$Inline$Types$Chars, v, _List_Nil)
								]))
						]))));
	} else {
		return $andre_dietrich$parser_combinators$Combine$succeed(
			$author$project$Lia$Markdown$Inline$Types$FootnoteMark(key));
	}
};
var $author$project$Lia$Markdown$Footnote$Parser$inline = A2(
	$andre_dietrich$parser_combinators$Combine$andThen,
	$author$project$Lia$Markdown$Footnote$Parser$store,
	A2(
		$andre_dietrich$parser_combinators$Combine$andMap,
		$andre_dietrich$parser_combinators$Combine$maybe(
			A2(
				$andre_dietrich$parser_combinators$Combine$keep,
				$author$project$Lia$Parser$Helper$stringTill(
					$andre_dietrich$parser_combinators$Combine$string(')')),
				$andre_dietrich$parser_combinators$Combine$string('('))),
		A2(
			$andre_dietrich$parser_combinators$Combine$map,
			$elm$core$Tuple$pair,
			A2(
				$andre_dietrich$parser_combinators$Combine$keep,
				$author$project$Lia$Parser$Helper$stringTill(
					$andre_dietrich$parser_combinators$Combine$string(']')),
				$andre_dietrich$parser_combinators$Combine$string('[^')))));
var $author$project$Lia$Markdown$Inline$Parser$url = $andre_dietrich$parser_combinators$Combine$regex('[a-zA-Z]+://(/)?[a-zA-Z0-9\\.\\-\\_]+\\.([a-z\\.]{2,6})[^ \\]\\)\t\n]*');
var $author$project$Lia$Markdown$Inline$Parser$inline_url = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	function (u) {
		return $author$project$Lia$Markdown$Inline$Types$Ref(
			A3(
				$author$project$Lia$Markdown$Inline$Types$Link,
				_List_fromArray(
					[
						A2($author$project$Lia$Markdown$Inline$Types$Chars, u, _List_Nil)
					]),
				u,
				$elm$core$Maybe$Nothing));
	},
	$author$project$Lia$Markdown$Inline$Parser$url);
var $andre_dietrich$parser_combinators$Combine$lazy = function (t) {
	return A2(
		$andre_dietrich$parser_combinators$Combine$andThen,
		t,
		$andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0));
};
var $author$project$Lia$Markdown$Inline$Parser$many1Till = function (p) {
	return A2(
		$elm$core$Basics$composeR,
		$andre_dietrich$parser_combinators$Combine$manyTill(p),
		$andre_dietrich$parser_combinators$Combine$andThen(
			function (result) {
				if (!result.b) {
					return $andre_dietrich$parser_combinators$Combine$fail('not enough results');
				} else {
					return $andre_dietrich$parser_combinators$Combine$succeed(result);
				}
			}));
};
var $author$project$Lia$Markdown$Inline$Multimedia$movie = $author$project$Lia$Parser$PatReplace$replace(
	_List_fromArray(
		[
			{
			by: function (w) {
				return 'https://www.youtube.com/embed/' + w;
			},
			pattern: '(?:http(?:s)?://)?(?:www\\.)?(?:youtu\\.be/|youtube\\.com/(?:(?:watch)?\\?(?:.*&)?v(?:i)?=|(?:v|vi|user)/))([^\\?&\"\'<> #]+)'
		},
			{
			by: function (w) {
				return 'https://player.vimeo.com/video/' + w;
			},
			pattern: '(?:http(?:s)?://)?(?:www\\.)?(?:player.)?(?:vimeo\\.com).*?(\\d+)'
		},
			{
			by: function (w) {
				return 'https://www.teachertube.com/embed/video/' + w;
			},
			pattern: '(?:http(?:s)?://)?(?:www\\.)?(?:teachertube\\.com).*?(\\d+)'
		}
		]));
var $author$project$Lia$Markdown$Inline$Parser$nicer_ref = F4(
	function (ref_type, info_string, url_string, title_string) {
		return A3(ref_type, info_string, url_string, title_string);
	});
var $author$project$Lia$Markdown$HTML$Types$InnerHtml = function (a) {
	return {$: 'InnerHtml', a: a};
};
var $author$project$Lia$Markdown$HTML$Parser$liaKeep = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$author$project$Lia$Markdown$HTML$Types$InnerHtml,
	A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		$author$project$Lia$Parser$Helper$stringTill(
			$andre_dietrich$parser_combinators$Combine$string('</lia-keep>')),
		$andre_dietrich$parser_combinators$Combine$string('<lia-keep>')));
var $author$project$Lia$Markdown$HTML$Types$Node = F3(
	function (a, b, c) {
		return {$: 'Node', a: a, b: b, c: c};
	});
var $author$project$Lia$Markdown$HTML$Parser$closingTag = function (name) {
	var chompName = A2(
		$andre_dietrich$parser_combinators$Combine$andThen,
		function (closingName) {
			return _Utils_eq(
				$elm$core$String$toLower(closingName),
				name) ? $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0) : $andre_dietrich$parser_combinators$Combine$fail('closing tag does not match opening tag: ' + name);
		},
		$andre_dietrich$parser_combinators$Combine$regex('\\w+(\\-\\w+)*'));
	return A2(
		$andre_dietrich$parser_combinators$Combine$ignore,
		$andre_dietrich$parser_combinators$Combine$regex('[ \\t\\n]*>'),
		A2(
			$andre_dietrich$parser_combinators$Combine$keep,
			chompName,
			$andre_dietrich$parser_combinators$Combine$regex('[ \\t\\n]*</[ \\t]*')));
};
var $author$project$Lia$Markdown$HTML$Parser$voidElements = _List_fromArray(
	['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'link', 'meta', 'param', 'source', 'track', 'wbr']);
var $author$project$Lia$Markdown$HTML$Parser$isVoidElement = function (name) {
	return A2($elm$core$List$member, name, $author$project$Lia$Markdown$HTML$Parser$voidElements);
};
var $author$project$Lia$Markdown$HTML$Parser$unscript = function (name) {
	return (name === 'script') ? $andre_dietrich$parser_combinators$Combine$fail('') : $andre_dietrich$parser_combinators$Combine$succeed(name);
};
var $author$project$Lia$Markdown$HTML$Parser$tagName = A2(
	$andre_dietrich$parser_combinators$Combine$andThen,
	$author$project$Lia$Markdown$HTML$Parser$unscript,
	A2(
		$andre_dietrich$parser_combinators$Combine$map,
		$elm$core$String$toLower,
		$andre_dietrich$parser_combinators$Combine$regex('\\w+(\\-\\w+)*')));
var $author$project$Lia$Markdown$HTML$Parser$tag = function (parser) {
	var attr = A2(
		$andre_dietrich$parser_combinators$Combine$andThen,
		$author$project$Lia$Markdown$HTML$Attributes$parse,
		$andre_dietrich$parser_combinators$Combine$withState(
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.defines;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.base;
					},
					$andre_dietrich$parser_combinators$Combine$succeed))));
	return A2(
		$andre_dietrich$parser_combinators$Combine$andThen,
		function (_v0) {
			var name = _v0.a;
			var attributes = _v0.b;
			return $author$project$Lia$Markdown$HTML$Parser$isVoidElement(name) ? A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$andre_dietrich$parser_combinators$Combine$string('>'),
				A2(
					$andre_dietrich$parser_combinators$Combine$ignore,
					$andre_dietrich$parser_combinators$Combine$whitespace,
					A2(
						$andre_dietrich$parser_combinators$Combine$ignore,
						$andre_dietrich$parser_combinators$Combine$maybe(
							$andre_dietrich$parser_combinators$Combine$string('/')),
						A2(
							$andre_dietrich$parser_combinators$Combine$ignore,
							$andre_dietrich$parser_combinators$Combine$whitespace,
							$andre_dietrich$parser_combinators$Combine$succeed(
								A3($author$project$Lia$Markdown$HTML$Types$Node, name, attributes, _List_Nil)))))) : A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				A2(
					$andre_dietrich$parser_combinators$Combine$manyTill,
					A2(
						$andre_dietrich$parser_combinators$Combine$ignore,
						$andre_dietrich$parser_combinators$Combine$regex('[\\n]*'),
						parser),
					$author$project$Lia$Markdown$HTML$Parser$closingTag(name)),
				A2(
					$andre_dietrich$parser_combinators$Combine$ignore,
					$andre_dietrich$parser_combinators$Combine$regex('[ \\t]*>[ \\t]*\\n*'),
					$andre_dietrich$parser_combinators$Combine$succeed(
						A2($author$project$Lia$Markdown$HTML$Types$Node, name, attributes))));
		},
		A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			$andre_dietrich$parser_combinators$Combine$many(attr),
			A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$andre_dietrich$parser_combinators$Combine$whitespace,
				A2(
					$andre_dietrich$parser_combinators$Combine$map,
					$elm$core$Tuple$pair,
					A2(
						$andre_dietrich$parser_combinators$Combine$keep,
						$author$project$Lia$Markdown$HTML$Parser$tagName,
						$andre_dietrich$parser_combinators$Combine$regex('[ \\t]*<[ \\t]*'))))));
};
var $author$project$Lia$Markdown$HTML$Parser$parse = A2(
	$elm$core$Basics$composeR,
	$author$project$Lia$Markdown$HTML$Parser$tag,
	$andre_dietrich$parser_combinators$Combine$or($author$project$Lia$Markdown$HTML$Parser$liaKeep));
var $author$project$Lia$Parser$Context$searchIndex = $andre_dietrich$parser_combinators$Combine$withState(
	A2(
		$elm$core$Basics$composeR,
		function ($) {
			return $.search_index;
		},
		$andre_dietrich$parser_combinators$Combine$succeed));
var $author$project$Lia$Markdown$Inline$Parser$ref_url_1 = $andre_dietrich$parser_combinators$Combine$choice(
	_List_fromArray(
		[
			$author$project$Lia$Markdown$Inline$Parser$url,
			A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			$andre_dietrich$parser_combinators$Combine$regex('#[^ \t\\)]+'),
			$author$project$Lia$Parser$Context$searchIndex),
			$andre_dietrich$parser_combinators$Combine$regex('[^\\)\n \"]*')
		]));
var $author$project$Lia$Markdown$Inline$Parser$ref_url_2 = A2(
	$andre_dietrich$parser_combinators$Combine$or,
	$author$project$Lia$Markdown$Inline$Parser$url,
	A2(
		$andre_dietrich$parser_combinators$Combine$andMap,
		$andre_dietrich$parser_combinators$Combine$regex('[^\\)\n \"]*'),
		A2(
			$andre_dietrich$parser_combinators$Combine$map,
			$elm$core$Basics$append,
			$andre_dietrich$parser_combinators$Combine$withState(
				function (s) {
					return $andre_dietrich$parser_combinators$Combine$succeed(s.defines.base);
				}))));
var $author$project$Lia$Markdown$Inline$Parser$Symbol$smileys = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$author$project$Lia$Markdown$Inline$Types$Symbol,
	$andre_dietrich$parser_combinators$Combine$choice(
		_List_fromArray(
			[
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'🙂',
				$andre_dietrich$parser_combinators$Combine$string(':-)')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'😉',
				$andre_dietrich$parser_combinators$Combine$string(';-)')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'😀',
				$andre_dietrich$parser_combinators$Combine$string(':-D')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'😮',
				$andre_dietrich$parser_combinators$Combine$string(':-O')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'🙁',
				$andre_dietrich$parser_combinators$Combine$string(':-(')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'😐',
				$andre_dietrich$parser_combinators$Combine$string(':-|')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'😕',
				$andre_dietrich$parser_combinators$Combine$string(':-/')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'😕',
				$andre_dietrich$parser_combinators$Combine$string(':-\\')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'😛',
				$andre_dietrich$parser_combinators$Combine$string(':-P')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'😛',
				$andre_dietrich$parser_combinators$Combine$string(':-p')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'😜',
				$andre_dietrich$parser_combinators$Combine$string(';-P')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'😜',
				$andre_dietrich$parser_combinators$Combine$string(';-p')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'😗',
				$andre_dietrich$parser_combinators$Combine$string(':-*')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'😘',
				$andre_dietrich$parser_combinators$Combine$string(';-*')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'😂',
				$andre_dietrich$parser_combinators$Combine$string(':\')')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'😢',
				$andre_dietrich$parser_combinators$Combine$string(':\'(')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'😭',
				$andre_dietrich$parser_combinators$Combine$string(':\'[')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'😠',
				$andre_dietrich$parser_combinators$Combine$string(':-[')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'😷',
				$andre_dietrich$parser_combinators$Combine$string(':-#')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'😷',
				$andre_dietrich$parser_combinators$Combine$string(':-X')),
				A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				'😖',
				$andre_dietrich$parser_combinators$Combine$string(':-§'))
			])));
var $author$project$Lia$Markdown$Inline$Parser$stringBase = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$author$project$Lia$Markdown$Inline$Types$Chars,
	$andre_dietrich$parser_combinators$Combine$regex('[^@*+_~:;`\\^\\[\\]\\(\\)|{}\\\\\\n<>=$ \"\\-]+'));
var $author$project$Lia$Markdown$Inline$Parser$stringBase2 = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$author$project$Lia$Markdown$Inline$Types$Chars,
	$andre_dietrich$parser_combinators$Combine$regex('[^\n*|<>+\\-]+'));
var $author$project$Lia$Markdown$Inline$Parser$stringCharacters = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$author$project$Lia$Markdown$Inline$Types$Chars,
	$andre_dietrich$parser_combinators$Combine$regex('[~:_;=${}\\[\\]\\(\\)\\-+]'));
var $author$project$Lia$Markdown$Inline$Parser$stringEscape = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$author$project$Lia$Markdown$Inline$Types$Chars,
	A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		$andre_dietrich$parser_combinators$Combine$regex('[@\\^*_+~`\\\\${}\\[\\]|#\\-]'),
		$andre_dietrich$parser_combinators$Combine$string('\\')));
var $author$project$Lia$Markdown$Inline$Parser$stringSpaces = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$author$project$Lia$Markdown$Inline$Types$Chars,
	$andre_dietrich$parser_combinators$Combine$regex('[ \t]+'));
var $author$project$Lia$Markdown$Inline$Types$Container = F2(
	function (a, b) {
		return {$: 'Container', a: a, b: b};
	});
var $author$project$Lia$Markdown$Inline$Parser$toContainer = function (inline_list) {
	var _v0 = $author$project$Lia$Markdown$Inline$Parser$combine(inline_list);
	if (_v0.b && (!_v0.b.b)) {
		var one = _v0.a;
		return one;
	} else {
		var moreThanOne = _v0;
		return A2($author$project$Lia$Markdown$Inline$Types$Container, moreThanOne, _List_Nil);
	}
};
var $author$project$Lia$Markdown$Inline$Parser$between_ = function (str) {
	return A2(
		$andre_dietrich$parser_combinators$Combine$map,
		$author$project$Lia$Markdown$Inline$Parser$toContainer,
		A2(
			$andre_dietrich$parser_combinators$Combine$keep,
			A2(
				$author$project$Lia$Markdown$Inline$Parser$many1Till,
				$author$project$Lia$Markdown$Inline$Parser$cyclic$inlines(),
				$andre_dietrich$parser_combinators$Combine$string(str)),
			$andre_dietrich$parser_combinators$Combine$string(str)));
};
var $author$project$Lia$Markdown$Inline$Parser$ref_pattern = F3(
	function (ref_type, info_type, url_type) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			$andre_dietrich$parser_combinators$Combine$string(')'),
			A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				$author$project$Lia$Markdown$Inline$Parser$cyclic$ref_title(),
				A2(
					$andre_dietrich$parser_combinators$Combine$andMap,
					url_type,
					A2(
						$andre_dietrich$parser_combinators$Combine$ignore,
						$andre_dietrich$parser_combinators$Combine$string('('),
						A2(
							$andre_dietrich$parser_combinators$Combine$map,
							$author$project$Lia$Markdown$Inline$Parser$nicer_ref(ref_type),
							info_type)))));
	});
function $author$project$Lia$Markdown$Inline$Parser$cyclic$stringUnderline() {
	return A2(
		$andre_dietrich$parser_combinators$Combine$map,
		$author$project$Lia$Markdown$Inline$Types$Underline,
		$author$project$Lia$Markdown$Inline$Parser$between_('~~'));
}
function $author$project$Lia$Markdown$Inline$Parser$cyclic$stringSuperscript() {
	return A2(
		$andre_dietrich$parser_combinators$Combine$map,
		$author$project$Lia$Markdown$Inline$Types$Superscript,
		$author$project$Lia$Markdown$Inline$Parser$between_('^'));
}
function $author$project$Lia$Markdown$Inline$Parser$cyclic$stringStrike() {
	return A2(
		$andre_dietrich$parser_combinators$Combine$map,
		$author$project$Lia$Markdown$Inline$Types$Strike,
		$author$project$Lia$Markdown$Inline$Parser$between_('~'));
}
function $author$project$Lia$Markdown$Inline$Parser$cyclic$stringItalic() {
	return A2(
		$andre_dietrich$parser_combinators$Combine$map,
		$author$project$Lia$Markdown$Inline$Types$Italic,
		A2(
			$andre_dietrich$parser_combinators$Combine$or,
			$author$project$Lia$Markdown$Inline$Parser$between_('*'),
			$author$project$Lia$Markdown$Inline$Parser$between_('_')));
}
function $author$project$Lia$Markdown$Inline$Parser$cyclic$stringBold() {
	return A2(
		$andre_dietrich$parser_combinators$Combine$map,
		$author$project$Lia$Markdown$Inline$Types$Bold,
		A2(
			$andre_dietrich$parser_combinators$Combine$or,
			$author$project$Lia$Markdown$Inline$Parser$between_('**'),
			$author$project$Lia$Markdown$Inline$Parser$between_('__')));
}
function $author$project$Lia$Markdown$Inline$Parser$cyclic$reference() {
	return A2(
		$andre_dietrich$parser_combinators$Combine$map,
		$author$project$Lia$Markdown$Inline$Types$Ref,
		$andre_dietrich$parser_combinators$Combine$choice(
			_List_fromArray(
				[
					$author$project$Lia$Markdown$Inline$Parser$cyclic$refEmbed(),
					$author$project$Lia$Markdown$Inline$Parser$cyclic$refMovie(),
					$author$project$Lia$Markdown$Inline$Parser$cyclic$refAudio(),
					$author$project$Lia$Markdown$Inline$Parser$cyclic$refImage(),
					$author$project$Lia$Markdown$Inline$Parser$cyclic$refMail(),
					$author$project$Lia$Markdown$Inline$Parser$cyclic$refPreview(),
					$author$project$Lia$Markdown$Inline$Parser$cyclic$refQr(),
					$author$project$Lia$Markdown$Inline$Parser$cyclic$refLink()
				])));
}
function $author$project$Lia$Markdown$Inline$Parser$cyclic$refMovie() {
	return A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		$author$project$Lia$Markdown$Inline$Parser$cyclic$ref_video(),
		$andre_dietrich$parser_combinators$Combine$string('!?'));
}
function $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_video() {
	return A2(
		$andre_dietrich$parser_combinators$Combine$ignore,
		$andre_dietrich$parser_combinators$Combine$string(')'),
		A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			$author$project$Lia$Markdown$Inline$Parser$cyclic$ref_title(),
			A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Multimedia$movie, $author$project$Lia$Markdown$Inline$Parser$ref_url_2),
				A2(
					$andre_dietrich$parser_combinators$Combine$ignore,
					$andre_dietrich$parser_combinators$Combine$string('('),
					A2(
						$andre_dietrich$parser_combinators$Combine$map,
						$author$project$Lia$Markdown$Inline$Types$Movie,
						$author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info())))));
}
function $author$project$Lia$Markdown$Inline$Parser$cyclic$refAudio() {
	return A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		$author$project$Lia$Markdown$Inline$Parser$cyclic$ref_audio(),
		$andre_dietrich$parser_combinators$Combine$string('?'));
}
function $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_audio() {
	return A2(
		$andre_dietrich$parser_combinators$Combine$ignore,
		$andre_dietrich$parser_combinators$Combine$string(')'),
		A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			$author$project$Lia$Markdown$Inline$Parser$cyclic$ref_title(),
			A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Multimedia$audio, $author$project$Lia$Markdown$Inline$Parser$ref_url_2),
				A2(
					$andre_dietrich$parser_combinators$Combine$ignore,
					$andre_dietrich$parser_combinators$Combine$string('('),
					A2(
						$andre_dietrich$parser_combinators$Combine$map,
						$author$project$Lia$Markdown$Inline$Types$Audio,
						$author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info())))));
}
function $author$project$Lia$Markdown$Inline$Parser$cyclic$refQr() {
	return A2(
		$andre_dietrich$parser_combinators$Combine$ignore,
		$andre_dietrich$parser_combinators$Combine$string(')'),
		A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			$author$project$Lia$Markdown$Inline$Parser$cyclic$ref_title(),
			A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				$author$project$Lia$Markdown$Inline$Parser$ref_url_1,
				A2(
					$andre_dietrich$parser_combinators$Combine$ignore,
					$andre_dietrich$parser_combinators$Combine$string('('),
					A2(
						$andre_dietrich$parser_combinators$Combine$onsuccess,
						$author$project$Lia$Markdown$Inline$Types$QR_Link,
						A3($andre_dietrich$parser_combinators$Combine$regexWith, true, false, '\\[\\w*qr-code\\w*]'))))));
}
function $author$project$Lia$Markdown$Inline$Parser$cyclic$refPreview() {
	return A2(
		$andre_dietrich$parser_combinators$Combine$ignore,
		$andre_dietrich$parser_combinators$Combine$string(')'),
		A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			$author$project$Lia$Markdown$Inline$Parser$cyclic$ref_title(),
			A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				$author$project$Lia$Markdown$Inline$Parser$ref_url_1,
				A2(
					$andre_dietrich$parser_combinators$Combine$ignore,
					$andre_dietrich$parser_combinators$Combine$string('('),
					A2(
						$andre_dietrich$parser_combinators$Combine$ignore,
						$andre_dietrich$parser_combinators$Combine$regex('\\w*]'),
						A2(
							$andre_dietrich$parser_combinators$Combine$keep,
							$andre_dietrich$parser_combinators$Combine$choice(
								_List_fromArray(
									[
										A2(
										$andre_dietrich$parser_combinators$Combine$onsuccess,
										$author$project$Lia$Markdown$Inline$Types$Preview_Lia,
										A3($andre_dietrich$parser_combinators$Combine$regexWith, true, false, 'lia')),
										A2(
										$andre_dietrich$parser_combinators$Combine$onsuccess,
										$author$project$Lia$Markdown$Inline$Types$Preview_Link,
										A3($andre_dietrich$parser_combinators$Combine$regexWith, true, false, 'link'))
									])),
							A3($andre_dietrich$parser_combinators$Combine$regexWith, true, false, '\\[\\w*preview-')))))));
}
function $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_title() {
	return $andre_dietrich$parser_combinators$Combine$maybe(
		A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			$author$project$Lia$Parser$Helper$spaces,
			A2(
				$andre_dietrich$parser_combinators$Combine$keep,
				A2(
					$andre_dietrich$parser_combinators$Combine$manyTill,
					$author$project$Lia$Markdown$Inline$Parser$cyclic$inlines(),
					$andre_dietrich$parser_combinators$Combine$string('\"')),
				A2(
					$andre_dietrich$parser_combinators$Combine$ignore,
					$andre_dietrich$parser_combinators$Combine$string('\"'),
					$author$project$Lia$Parser$Helper$spaces))));
}
function $author$project$Lia$Markdown$Inline$Parser$cyclic$refMail() {
	return A3(
		$author$project$Lia$Markdown$Inline$Parser$ref_pattern,
		$author$project$Lia$Markdown$Inline$Types$Mail,
		$author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info(),
		$author$project$Lia$Markdown$Inline$Parser$email);
}
function $author$project$Lia$Markdown$Inline$Parser$cyclic$refLink() {
	return A3(
		$author$project$Lia$Markdown$Inline$Parser$ref_pattern,
		$author$project$Lia$Markdown$Inline$Types$Link,
		$author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info(),
		$author$project$Lia$Markdown$Inline$Parser$ref_url_1);
}
function $author$project$Lia$Markdown$Inline$Parser$cyclic$refImage() {
	return A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		A3(
			$author$project$Lia$Markdown$Inline$Parser$ref_pattern,
			$author$project$Lia$Markdown$Inline$Types$Image,
			$author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info(),
			$author$project$Lia$Markdown$Inline$Parser$ref_url_2),
		$andre_dietrich$parser_combinators$Combine$string('!'));
}
function $author$project$Lia$Markdown$Inline$Parser$cyclic$refEmbed() {
	return A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		A3(
			$author$project$Lia$Markdown$Inline$Parser$ref_pattern,
			$author$project$Lia$Markdown$Inline$Types$Embed,
			$author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info(),
			$author$project$Lia$Markdown$Inline$Parser$ref_url_1),
		$andre_dietrich$parser_combinators$Combine$string('??'));
}
function $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info() {
	return A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		A2(
			$andre_dietrich$parser_combinators$Combine$manyTill,
			$author$project$Lia$Markdown$Inline$Parser$cyclic$inlines(),
			$andre_dietrich$parser_combinators$Combine$string(']')),
		$andre_dietrich$parser_combinators$Combine$string('['));
}
function $author$project$Lia$Markdown$Inline$Parser$cyclic$inlines() {
	return $andre_dietrich$parser_combinators$Combine$lazy(
		function (_v1) {
			return A2(
				$andre_dietrich$parser_combinators$Combine$keep,
				A2(
					$andre_dietrich$parser_combinators$Combine$or,
					$author$project$Lia$Markdown$Inline$Parser$html,
					A2(
						$andre_dietrich$parser_combinators$Combine$andMap,
						A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Inline$Parser$annotations, $author$project$Lia$Markdown$Macro$Parser$macro),
						$andre_dietrich$parser_combinators$Combine$choice(
							_List_fromArray(
								[
									$author$project$Lia$Markdown$Inline$Parser$code,
									$author$project$Lia$Markdown$Footnote$Parser$inline,
									$author$project$Lia$Markdown$Inline$Parser$cyclic$reference(),
									$author$project$Lia$Markdown$Inline$Parser$Formula$formula,
									A2(
									$andre_dietrich$parser_combinators$Combine$map,
									$author$project$Lia$Markdown$Inline$Types$EInline,
									$author$project$Lia$Markdown$Effect$Parser$inline(
										$author$project$Lia$Markdown$Inline$Parser$cyclic$inlines())),
									$author$project$Lia$Markdown$Inline$Parser$cyclic$strings()
								])))),
				$author$project$Lia$Markdown$Macro$Parser$macro);
		});
}
function $author$project$Lia$Markdown$Inline$Parser$cyclic$strings() {
	return $andre_dietrich$parser_combinators$Combine$lazy(
		function (_v0) {
			return $andre_dietrich$parser_combinators$Combine$choice(
				_List_fromArray(
					[
						$author$project$Lia$Markdown$Inline$Parser$inline_url,
						$author$project$Lia$Markdown$Inline$Parser$stringBase,
						$author$project$Lia$Markdown$Inline$Parser$Symbol$arrows,
						$author$project$Lia$Markdown$Inline$Parser$Symbol$smileys,
						$author$project$Lia$Markdown$Inline$Parser$stringEscape,
						$author$project$Lia$Markdown$Inline$Parser$cyclic$stringBold(),
						$author$project$Lia$Markdown$Inline$Parser$cyclic$stringItalic(),
						$author$project$Lia$Markdown$Inline$Parser$cyclic$stringUnderline(),
						$author$project$Lia$Markdown$Inline$Parser$cyclic$stringStrike(),
						$author$project$Lia$Markdown$Inline$Parser$cyclic$stringSuperscript(),
						$author$project$Lia$Markdown$Inline$Parser$stringSpaces,
						A2(
						$andre_dietrich$parser_combinators$Combine$map,
						$author$project$Lia$Markdown$Inline$Types$IHTML,
						$author$project$Lia$Markdown$HTML$Parser$parse(
							$author$project$Lia$Markdown$Inline$Parser$cyclic$inlines())),
						$author$project$Lia$Markdown$Inline$Parser$stringCharacters,
						$author$project$Lia$Markdown$Inline$Parser$stringBase2
					]));
		});
}
try {
	var $author$project$Lia$Markdown$Inline$Parser$stringUnderline = $author$project$Lia$Markdown$Inline$Parser$cyclic$stringUnderline();
	$author$project$Lia$Markdown$Inline$Parser$cyclic$stringUnderline = function () {
		return $author$project$Lia$Markdown$Inline$Parser$stringUnderline;
	};
	var $author$project$Lia$Markdown$Inline$Parser$stringSuperscript = $author$project$Lia$Markdown$Inline$Parser$cyclic$stringSuperscript();
	$author$project$Lia$Markdown$Inline$Parser$cyclic$stringSuperscript = function () {
		return $author$project$Lia$Markdown$Inline$Parser$stringSuperscript;
	};
	var $author$project$Lia$Markdown$Inline$Parser$stringStrike = $author$project$Lia$Markdown$Inline$Parser$cyclic$stringStrike();
	$author$project$Lia$Markdown$Inline$Parser$cyclic$stringStrike = function () {
		return $author$project$Lia$Markdown$Inline$Parser$stringStrike;
	};
	var $author$project$Lia$Markdown$Inline$Parser$stringItalic = $author$project$Lia$Markdown$Inline$Parser$cyclic$stringItalic();
	$author$project$Lia$Markdown$Inline$Parser$cyclic$stringItalic = function () {
		return $author$project$Lia$Markdown$Inline$Parser$stringItalic;
	};
	var $author$project$Lia$Markdown$Inline$Parser$stringBold = $author$project$Lia$Markdown$Inline$Parser$cyclic$stringBold();
	$author$project$Lia$Markdown$Inline$Parser$cyclic$stringBold = function () {
		return $author$project$Lia$Markdown$Inline$Parser$stringBold;
	};
	var $author$project$Lia$Markdown$Inline$Parser$reference = $author$project$Lia$Markdown$Inline$Parser$cyclic$reference();
	$author$project$Lia$Markdown$Inline$Parser$cyclic$reference = function () {
		return $author$project$Lia$Markdown$Inline$Parser$reference;
	};
	var $author$project$Lia$Markdown$Inline$Parser$refMovie = $author$project$Lia$Markdown$Inline$Parser$cyclic$refMovie();
	$author$project$Lia$Markdown$Inline$Parser$cyclic$refMovie = function () {
		return $author$project$Lia$Markdown$Inline$Parser$refMovie;
	};
	var $author$project$Lia$Markdown$Inline$Parser$ref_video = $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_video();
	$author$project$Lia$Markdown$Inline$Parser$cyclic$ref_video = function () {
		return $author$project$Lia$Markdown$Inline$Parser$ref_video;
	};
	var $author$project$Lia$Markdown$Inline$Parser$refAudio = $author$project$Lia$Markdown$Inline$Parser$cyclic$refAudio();
	$author$project$Lia$Markdown$Inline$Parser$cyclic$refAudio = function () {
		return $author$project$Lia$Markdown$Inline$Parser$refAudio;
	};
	var $author$project$Lia$Markdown$Inline$Parser$ref_audio = $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_audio();
	$author$project$Lia$Markdown$Inline$Parser$cyclic$ref_audio = function () {
		return $author$project$Lia$Markdown$Inline$Parser$ref_audio;
	};
	var $author$project$Lia$Markdown$Inline$Parser$refQr = $author$project$Lia$Markdown$Inline$Parser$cyclic$refQr();
	$author$project$Lia$Markdown$Inline$Parser$cyclic$refQr = function () {
		return $author$project$Lia$Markdown$Inline$Parser$refQr;
	};
	var $author$project$Lia$Markdown$Inline$Parser$refPreview = $author$project$Lia$Markdown$Inline$Parser$cyclic$refPreview();
	$author$project$Lia$Markdown$Inline$Parser$cyclic$refPreview = function () {
		return $author$project$Lia$Markdown$Inline$Parser$refPreview;
	};
	var $author$project$Lia$Markdown$Inline$Parser$ref_title = $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_title();
	$author$project$Lia$Markdown$Inline$Parser$cyclic$ref_title = function () {
		return $author$project$Lia$Markdown$Inline$Parser$ref_title;
	};
	var $author$project$Lia$Markdown$Inline$Parser$refMail = $author$project$Lia$Markdown$Inline$Parser$cyclic$refMail();
	$author$project$Lia$Markdown$Inline$Parser$cyclic$refMail = function () {
		return $author$project$Lia$Markdown$Inline$Parser$refMail;
	};
	var $author$project$Lia$Markdown$Inline$Parser$refLink = $author$project$Lia$Markdown$Inline$Parser$cyclic$refLink();
	$author$project$Lia$Markdown$Inline$Parser$cyclic$refLink = function () {
		return $author$project$Lia$Markdown$Inline$Parser$refLink;
	};
	var $author$project$Lia$Markdown$Inline$Parser$refImage = $author$project$Lia$Markdown$Inline$Parser$cyclic$refImage();
	$author$project$Lia$Markdown$Inline$Parser$cyclic$refImage = function () {
		return $author$project$Lia$Markdown$Inline$Parser$refImage;
	};
	var $author$project$Lia$Markdown$Inline$Parser$refEmbed = $author$project$Lia$Markdown$Inline$Parser$cyclic$refEmbed();
	$author$project$Lia$Markdown$Inline$Parser$cyclic$refEmbed = function () {
		return $author$project$Lia$Markdown$Inline$Parser$refEmbed;
	};
	var $author$project$Lia$Markdown$Inline$Parser$ref_info = $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info();
	$author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info = function () {
		return $author$project$Lia$Markdown$Inline$Parser$ref_info;
	};
	var $author$project$Lia$Markdown$Inline$Parser$inlines = $author$project$Lia$Markdown$Inline$Parser$cyclic$inlines();
	$author$project$Lia$Markdown$Inline$Parser$cyclic$inlines = function () {
		return $author$project$Lia$Markdown$Inline$Parser$inlines;
	};
	var $author$project$Lia$Markdown$Inline$Parser$strings = $author$project$Lia$Markdown$Inline$Parser$cyclic$strings();
	$author$project$Lia$Markdown$Inline$Parser$cyclic$strings = function () {
		return $author$project$Lia$Markdown$Inline$Parser$strings;
	};
} catch ($) {
	throw 'Some top-level definitions from `Lia.Markdown.Inline.Parser` are causing infinite recursion:\n\n  ┌─────┐\n  │    stringUnderline\n  │     ↓\n  │    stringSuperscript\n  │     ↓\n  │    stringStrike\n  │     ↓\n  │    stringItalic\n  │     ↓\n  │    stringBold\n  │     ↓\n  │    between_\n  │     ↓\n  │    reference\n  │     ↓\n  │    refMovie\n  │     ↓\n  │    ref_video\n  │     ↓\n  │    refAudio\n  │     ↓\n  │    ref_audio\n  │     ↓\n  │    refQr\n  │     ↓\n  │    refPreview\n  │     ↓\n  │    ref_title\n  │     ↓\n  │    refMail\n  │     ↓\n  │    refLink\n  │     ↓\n  │    refImage\n  │     ↓\n  │    refEmbed\n  │     ↓\n  │    ref_info\n  │     ↓\n  │    inlines\n  │     ↓\n  │    ref_pattern\n  │     ↓\n  │    strings\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $author$project$Lia$Markdown$Inline$Parser$line = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$author$project$Lia$Markdown$Inline$Parser$combine,
	$andre_dietrich$parser_combinators$Combine$many1($author$project$Lia$Markdown$Inline$Parser$inlines));
var $author$project$Lia$Definition$Parser$inline_parser = F2(
	function (defines, str) {
		var _v0 = A3(
			$andre_dietrich$parser_combinators$Combine$runParser,
			$author$project$Lia$Markdown$Inline$Parser$line,
			A2($author$project$Lia$Parser$Context$init, $elm$core$Maybe$Nothing, defines),
			A3($elm$core$String$replace, '\n', ' ', str));
		if (_v0.$ === 'Ok') {
			var _v1 = _v0.a;
			var rslt = _v1.c;
			return rslt;
		} else {
			return _List_Nil;
		}
	});
var $author$project$Lia$Definition$Parser$set = function (fct) {
	return $andre_dietrich$parser_combinators$Combine$modifyState(
		function (s) {
			return _Utils_update(
				s,
				{
					defines: fct(s.defines)
				});
		});
};
var $author$project$Lia$Definition$Parser$store = function (_v0) {
	var key_ = _v0.a;
	var value_ = _v0.b;
	switch (key_) {
		case 'attribute':
			return $author$project$Lia$Definition$Parser$set(
				function (c) {
					return _Utils_update(
						c,
						{
							attributes: A2(
								$elm$core$List$append,
								c.attributes,
								_List_fromArray(
									[
										A2($author$project$Lia$Definition$Parser$inline_parser, c, value_)
									]))
						});
				});
		case 'author':
			return $author$project$Lia$Definition$Parser$set(
				function (c) {
					return _Utils_update(
						c,
						{author: value_});
				});
		case 'base':
			return $author$project$Lia$Definition$Parser$set(
				function (c) {
					return _Utils_update(
						c,
						{base: value_});
				});
		case 'comment':
			return $author$project$Lia$Definition$Parser$set(
				function (c) {
					var singleLineComment = $author$project$Lia$Definition$Parser$reduce(value_);
					return A2(
						$author$project$Lia$Markdown$Macro$Parser$add,
						_Utils_Tuple2('comment', singleLineComment),
						_Utils_update(
							c,
							{
								comment: A2($author$project$Lia$Definition$Parser$inline_parser, c, singleLineComment)
							}));
				});
		case 'dark':
			return $author$project$Lia$Definition$Parser$set(
				function (c) {
					return _Utils_update(
						c,
						{
							lightMode: function () {
								var _v2 = $elm$core$String$toLower(value_);
								switch (_v2) {
									case 'true':
										return $elm$core$Maybe$Just(false);
									case 'false':
										return $elm$core$Maybe$Just(true);
									default:
										return $elm$core$Maybe$Nothing;
								}
							}()
						});
				});
		case 'date':
			return $author$project$Lia$Definition$Parser$set(
				function (c) {
					return _Utils_update(
						c,
						{date: value_});
				});
		case 'email':
			return $author$project$Lia$Definition$Parser$set(
				function (c) {
					return _Utils_update(
						c,
						{email: value_});
				});
		case 'import':
			return $author$project$Lia$Definition$Parser$set(
				$author$project$Lia$Definition$Types$add_imports(value_));
		case 'language':
			return $author$project$Lia$Definition$Parser$set(
				function (c) {
					return _Utils_update(
						c,
						{language: value_});
				});
		case 'link':
			return $author$project$Lia$Definition$Parser$set(
				A2($author$project$Lia$Definition$Types$addToResources, $author$project$Lia$Definition$Types$Link, value_));
		case 'logo':
			return $author$project$Lia$Definition$Parser$set(
				function (c) {
					return _Utils_update(
						c,
						{
							logo: A2($author$project$Lia$Markdown$HTML$Attributes$toURL, c.base, value_)
						});
				});
		case 'narrator':
			return $author$project$Lia$Definition$Parser$set(
				function (c) {
					return _Utils_update(
						c,
						{narrator: value_});
				});
		case 'script':
			return $author$project$Lia$Definition$Parser$set(
				A2($author$project$Lia$Definition$Types$addToResources, $author$project$Lia$Definition$Types$Script, value_));
		case 'translation':
			return $author$project$Lia$Definition$Parser$set(
				$author$project$Lia$Definition$Types$add_translation(value_));
		case 'version':
			return $author$project$Lia$Definition$Parser$set(
				function (c) {
					return _Utils_update(
						c,
						{version: value_});
				});
		case 'mode':
			return $author$project$Lia$Definition$Parser$set(
				function (c) {
					return _Utils_update(
						c,
						{
							mode: function () {
								var _v3 = $elm$core$String$toLower(value_);
								switch (_v3) {
									case 'textbook':
										return $elm$core$Maybe$Just($author$project$Lia$Settings$Types$Textbook);
									case 'presentation':
										return $elm$core$Maybe$Just($author$project$Lia$Settings$Types$Presentation);
									case 'slides':
										return $elm$core$Maybe$Just($author$project$Lia$Settings$Types$Slides);
									default:
										return $elm$core$Maybe$Nothing;
								}
							}()
						});
				});
		case 'debug':
			return $author$project$Lia$Definition$Parser$set(
				function (c) {
					return _Utils_update(
						c,
						{debug: value_ === 'true'});
				});
		case 'onload':
			return $author$project$Lia$Definition$Parser$set(
				function (c) {
					return _Utils_update(
						c,
						{onload: value_});
				});
		default:
			return $author$project$Lia$Definition$Parser$set(
				$author$project$Lia$Markdown$Macro$Parser$add(
					_Utils_Tuple2(key_, value_)));
	}
};
var $author$project$Lia$Definition$Parser$defs = $andre_dietrich$parser_combinators$Combine$choice(
	_List_fromArray(
		[
			$andre_dietrich$parser_combinators$Combine$skip(
			A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$author$project$Lia$Definition$Parser$multiline,
				$andre_dietrich$parser_combinators$Combine$regex('@@@.*\n'))),
			$andre_dietrich$parser_combinators$Combine$skip(
			A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$author$project$Lia$Definition$Parser$lines,
				$andre_dietrich$parser_combinators$Combine$regex('@@.*\n'))),
			A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Definition$Parser$store, $author$project$Lia$Definition$Parser$key_value)
		]));
var $author$project$Lia$Definition$Parser$definition = $andre_dietrich$parser_combinators$Combine$lazy(
	function (_v0) {
		return $andre_dietrich$parser_combinators$Combine$skip(
			$author$project$Lia$Markdown$Inline$Parser$comment(
				A2(
					$andre_dietrich$parser_combinators$Combine$ignore,
					$andre_dietrich$parser_combinators$Combine$whitespace,
					$andre_dietrich$parser_combinators$Combine$many1(
						A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Definition$Parser$defs, $andre_dietrich$parser_combinators$Combine$whitespace)))));
	});
var $author$project$Lia$Definition$Parser$parse = $andre_dietrich$parser_combinators$Combine$skip(
	A2(
		$andre_dietrich$parser_combinators$Combine$ignore,
		$andre_dietrich$parser_combinators$Combine$whitespace,
		$andre_dietrich$parser_combinators$Combine$maybe(
			A2(
				$andre_dietrich$parser_combinators$Combine$keep,
				$andre_dietrich$parser_combinators$Combine$modifyState(
					function (s) {
						return _Utils_update(
							s,
							{defines_updated: true});
					}),
				$author$project$Lia$Definition$Parser$definition))));
var $author$project$Lia$Parser$Parser$parse_defintion = F2(
	function (base, code) {
		parse_defintion:
		while (true) {
			var _v0 = A3(
				$andre_dietrich$parser_combinators$Combine$runParser,
				A2(
					$andre_dietrich$parser_combinators$Combine$ignore,
					A2(
						$andre_dietrich$parser_combinators$Combine$or,
						$andre_dietrich$parser_combinators$Combine$string('#'),
						$author$project$Lia$Parser$Helper$stringTill(
							$andre_dietrich$parser_combinators$Combine$regex('\n#'))),
					$author$project$Lia$Definition$Parser$parse),
				A2(
					$author$project$Lia$Parser$Context$init,
					$elm$core$Maybe$Nothing,
					$author$project$Lia$Definition$Types$default(base)),
				code + '\n');
			if (_v0.$ === 'Ok') {
				var _v1 = _v0.a;
				var state = _v1.a;
				var data = _v1.b;
				return $elm$core$Result$Ok(
					_Utils_Tuple2(state.defines, '#' + data.input));
			} else {
				var _v2 = _v0.a;
				var stream = _v2.b;
				var ms = _v2.c;
				if ($elm$core$String$trim(code) === '') {
					var $temp$base = base,
						$temp$code = $author$project$Lia$Parser$Parser$notification;
					base = $temp$base;
					code = $temp$code;
					continue parse_defintion;
				} else {
					return $elm$core$Result$Err(
						A2($author$project$Lia$Parser$Parser$formatError, ms, stream));
				}
			}
		}
	});
var $author$project$Lia$Script$init_script = F2(
	function (model, script) {
		var _v0 = A2($author$project$Lia$Parser$Parser$parse_defintion, model.origin, script);
		if (_v0.$ === 'Ok') {
			var _v1 = _v0.a;
			var definition = _v1.a;
			var code = _v1.b;
			var settings = model.settings;
			return _Utils_Tuple3(
				A2(
					$author$project$Lia$Script$add_todos,
					definition,
					_Utils_update(
						model,
						{
							definition: _Utils_update(
								definition,
								{attributes: _List_Nil}),
							settings: _Utils_update(
								settings,
								{
									light: A2($elm$core$Maybe$withDefault, settings.light, definition.lightMode),
									mode: A2($elm$core$Maybe$withDefault, settings.mode, definition.mode)
								}),
							translation: $author$project$Translations$getLnFromCode(definition.language)
						})),
				$elm$core$Maybe$Just(code),
				definition.imports);
		} else {
			var msg = _v0.a;
			return _Utils_Tuple3(
				_Utils_update(
					model,
					{
						error: $elm$core$Maybe$Just(msg)
					}),
				$elm$core$Maybe$Nothing,
				_List_Nil);
		}
	});
var $author$project$Model$Error = function (a) {
	return {$: 'Error', a: a};
};
var $author$project$Update$LiaParse = {$: 'LiaParse'};
var $author$project$Update$Load_Template_Result = F2(
	function (a, b) {
		return {$: 'Load_Template_Result', a: a, b: b};
	});
var $author$project$Model$Parsing = F2(
	function (a, b) {
		return {$: 'Parsing', a: a, b: b};
	});
var $elm$http$Http$BadStatus_ = F2(
	function (a, b) {
		return {$: 'BadStatus_', a: a, b: b};
	});
var $elm$http$Http$BadUrl_ = function (a) {
	return {$: 'BadUrl_', a: a};
};
var $elm$http$Http$GoodStatus_ = F2(
	function (a, b) {
		return {$: 'GoodStatus_', a: a, b: b};
	});
var $elm$http$Http$NetworkError_ = {$: 'NetworkError_'};
var $elm$http$Http$Receiving = function (a) {
	return {$: 'Receiving', a: a};
};
var $elm$http$Http$Sending = function (a) {
	return {$: 'Sending', a: a};
};
var $elm$http$Http$Timeout_ = {$: 'Timeout_'};
var $elm$core$Maybe$isJust = function (maybe) {
	if (maybe.$ === 'Just') {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var $elm$http$Http$expectStringResponse = F2(
	function (toMsg, toResult) {
		return A3(
			_Http_expect,
			'',
			$elm$core$Basics$identity,
			A2($elm$core$Basics$composeR, toResult, toMsg));
	});
var $elm$http$Http$BadBody = function (a) {
	return {$: 'BadBody', a: a};
};
var $elm$http$Http$BadStatus = function (a) {
	return {$: 'BadStatus', a: a};
};
var $elm$http$Http$BadUrl = function (a) {
	return {$: 'BadUrl', a: a};
};
var $elm$http$Http$NetworkError = {$: 'NetworkError'};
var $elm$http$Http$Timeout = {$: 'Timeout'};
var $elm$http$Http$resolve = F2(
	function (toResult, response) {
		switch (response.$) {
			case 'BadUrl_':
				var url = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadUrl(url));
			case 'Timeout_':
				return $elm$core$Result$Err($elm$http$Http$Timeout);
			case 'NetworkError_':
				return $elm$core$Result$Err($elm$http$Http$NetworkError);
			case 'BadStatus_':
				var metadata = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadStatus(metadata.statusCode));
			default:
				var body = response.b;
				return A2(
					$elm$core$Result$mapError,
					$elm$http$Http$BadBody,
					toResult(body));
		}
	});
var $elm$http$Http$expectString = function (toMsg) {
	return A2(
		$elm$http$Http$expectStringResponse,
		toMsg,
		$elm$http$Http$resolve($elm$core$Result$Ok));
};
var $elm$http$Http$emptyBody = _Http_emptyBody;
var $elm$http$Http$Request = function (a) {
	return {$: 'Request', a: a};
};
var $elm$http$Http$State = F2(
	function (reqs, subs) {
		return {reqs: reqs, subs: subs};
	});
var $elm$http$Http$init = $elm$core$Task$succeed(
	A2($elm$http$Http$State, $elm$core$Dict$empty, _List_Nil));
var $elm$core$Process$kill = _Scheduler_kill;
var $elm$core$Process$spawn = _Scheduler_spawn;
var $elm$http$Http$updateReqs = F3(
	function (router, cmds, reqs) {
		updateReqs:
		while (true) {
			if (!cmds.b) {
				return $elm$core$Task$succeed(reqs);
			} else {
				var cmd = cmds.a;
				var otherCmds = cmds.b;
				if (cmd.$ === 'Cancel') {
					var tracker = cmd.a;
					var _v2 = A2($elm$core$Dict$get, tracker, reqs);
					if (_v2.$ === 'Nothing') {
						var $temp$router = router,
							$temp$cmds = otherCmds,
							$temp$reqs = reqs;
						router = $temp$router;
						cmds = $temp$cmds;
						reqs = $temp$reqs;
						continue updateReqs;
					} else {
						var pid = _v2.a;
						return A2(
							$elm$core$Task$andThen,
							function (_v3) {
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A2($elm$core$Dict$remove, tracker, reqs));
							},
							$elm$core$Process$kill(pid));
					}
				} else {
					var req = cmd.a;
					return A2(
						$elm$core$Task$andThen,
						function (pid) {
							var _v4 = req.tracker;
							if (_v4.$ === 'Nothing') {
								return A3($elm$http$Http$updateReqs, router, otherCmds, reqs);
							} else {
								var tracker = _v4.a;
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A3($elm$core$Dict$insert, tracker, pid, reqs));
							}
						},
						$elm$core$Process$spawn(
							A3(
								_Http_toTask,
								router,
								$elm$core$Platform$sendToApp(router),
								req)));
				}
			}
		}
	});
var $elm$http$Http$onEffects = F4(
	function (router, cmds, subs, state) {
		return A2(
			$elm$core$Task$andThen,
			function (reqs) {
				return $elm$core$Task$succeed(
					A2($elm$http$Http$State, reqs, subs));
			},
			A3($elm$http$Http$updateReqs, router, cmds, state.reqs));
	});
var $elm$http$Http$maybeSend = F4(
	function (router, desiredTracker, progress, _v0) {
		var actualTracker = _v0.a;
		var toMsg = _v0.b;
		return _Utils_eq(desiredTracker, actualTracker) ? $elm$core$Maybe$Just(
			A2(
				$elm$core$Platform$sendToApp,
				router,
				toMsg(progress))) : $elm$core$Maybe$Nothing;
	});
var $elm$http$Http$onSelfMsg = F3(
	function (router, _v0, state) {
		var tracker = _v0.a;
		var progress = _v0.b;
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$filterMap,
					A3($elm$http$Http$maybeSend, router, tracker, progress),
					state.subs)));
	});
var $elm$http$Http$Cancel = function (a) {
	return {$: 'Cancel', a: a};
};
var $elm$http$Http$cmdMap = F2(
	function (func, cmd) {
		if (cmd.$ === 'Cancel') {
			var tracker = cmd.a;
			return $elm$http$Http$Cancel(tracker);
		} else {
			var r = cmd.a;
			return $elm$http$Http$Request(
				{
					allowCookiesFromOtherDomains: r.allowCookiesFromOtherDomains,
					body: r.body,
					expect: A2(_Http_mapExpect, func, r.expect),
					headers: r.headers,
					method: r.method,
					timeout: r.timeout,
					tracker: r.tracker,
					url: r.url
				});
		}
	});
var $elm$http$Http$MySub = F2(
	function (a, b) {
		return {$: 'MySub', a: a, b: b};
	});
var $elm$http$Http$subMap = F2(
	function (func, _v0) {
		var tracker = _v0.a;
		var toMsg = _v0.b;
		return A2(
			$elm$http$Http$MySub,
			tracker,
			A2($elm$core$Basics$composeR, toMsg, func));
	});
_Platform_effectManagers['Http'] = _Platform_createManager($elm$http$Http$init, $elm$http$Http$onEffects, $elm$http$Http$onSelfMsg, $elm$http$Http$cmdMap, $elm$http$Http$subMap);
var $elm$http$Http$command = _Platform_leaf('Http');
var $elm$http$Http$subscription = _Platform_leaf('Http');
var $elm$http$Http$request = function (r) {
	return $elm$http$Http$command(
		$elm$http$Http$Request(
			{allowCookiesFromOtherDomains: false, body: r.body, expect: r.expect, headers: r.headers, method: r.method, timeout: r.timeout, tracker: r.tracker, url: r.url}));
};
var $elm$http$Http$get = function (r) {
	return $elm$http$Http$request(
		{body: $elm$http$Http$emptyBody, expect: r.expect, headers: _List_Nil, method: 'GET', timeout: $elm$core$Maybe$Nothing, tracker: $elm$core$Maybe$Nothing, url: r.url});
};
var $author$project$Update$download = F2(
	function (msg, url) {
		return $elm$http$Http$get(
			{
				expect: $elm$http$Http$expectString(
					msg(url)),
				url: url
			});
	});
var $elm$core$Process$sleep = _Process_sleep;
var $author$project$Update$message = function (msg) {
	return A2(
		$elm$core$Task$perform,
		$elm$core$Basics$identity,
		A2(
			$elm$core$Task$andThen,
			$elm$core$Basics$always(
				$elm$core$Task$succeed(msg)),
			$elm$core$Process$sleep(0)));
};
var $author$project$Update$load = F4(
	function (model, lia, code, templates) {
		if (code.$ === 'Just') {
			var code_ = code.a;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						code: code,
						lia: lia,
						size: $elm$core$String$length(code_),
						state: A2(
							$author$project$Model$Parsing,
							true,
							$elm$core$List$length(templates))
					}),
				$elm$core$Platform$Cmd$batch(
					A2(
						$elm$core$List$cons,
						$author$project$Update$message($author$project$Update$LiaParse),
						A2(
							$elm$core$List$map,
							$author$project$Update$download($author$project$Update$Load_Template_Result),
							templates))));
		} else {
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						state: $author$project$Model$Error(
							A2($elm$core$Maybe$withDefault, '', lia.error))
					}),
				$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Update$removeCR = A2($elm$core$String$replace, '\u000D', '');
var $author$project$Index$Update$restore = function (version) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$json$Json$Encode$string,
		A2(
			$elm$core$Basics$composeR,
			A2(
				$author$project$Port$Event$Event,
				'restore',
				$author$project$Index$Version$getMajor(version)),
			$author$project$Index$Update$index));
};
var $author$project$Update$load_readme = F2(
	function (readme, model) {
		var _v0 = A2(
			$author$project$Lia$Script$init_script,
			model.lia,
			$author$project$Update$removeCR(readme));
		var lia = _v0.a;
		var code = _v0.b;
		var templates = _v0.c;
		return A2(
			$elm$core$Maybe$withDefault,
			false,
			A2(
				$elm$core$Maybe$map,
				$author$project$Index$Update$inCache(lia.definition.version),
				model.preload)) ? _Utils_Tuple2(
			model,
			$author$project$Update$event2js(
				A2($author$project$Index$Update$restore, lia.definition.version, lia.readme))) : A4($author$project$Update$load, model, lia, code, templates);
	});
var $elm$browser$Browser$Navigation$replaceUrl = _Browser_replaceUrl;
var $author$project$Session$update = function (session) {
	return A2(
		$elm$browser$Browser$Navigation$replaceUrl,
		session.key,
		$elm$url$Url$toString(session.url));
};
var $author$project$Main$navToFirstSlide = function (_v0) {
	var model = _v0.a;
	var cmd = _v0.b;
	return _Utils_Tuple2(
		model,
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					$author$project$Session$update(model.session),
					cmd
				])));
};
var $author$project$Main$init = F3(
	function (flags, url, key) {
		var openTableOfContents = flags.screen.width > 620;
		var model = A2(
			$elm$core$Basics$composeR,
			A3($author$project$Session$Session, flags.hasShareAPI, key, flags.screen),
			A5($author$project$Model$Model, 0, flags.hasIndex, $elm$core$Maybe$Nothing, $author$project$Index$Model$init, $elm$core$Maybe$Nothing));
		var courseUrl = _Utils_update(
			url,
			{
				query: A2($elm$core$Maybe$map, $author$project$Lia$Parser$PatReplace$link, url.query)
			});
		var _v0 = _Utils_Tuple3(courseUrl.query, flags.courseUrl, flags.script);
		if (_v0.c.$ === 'Just') {
			var script = _v0.c.a;
			var subURL = _Utils_update(
				courseUrl,
				{
					query: $elm$core$Maybe$Just('README.md')
				});
			return $author$project$Main$navToFirstSlide(
				A2(
					$author$project$Update$load_readme,
					script,
					A3(
						model,
						subURL,
						$author$project$Model$Idle,
						A7(
							$author$project$Lia$Script$init,
							flags.hasShareAPI,
							openTableOfContents,
							flags.settings,
							$author$project$Main$get_base(subURL),
							'README.md',
							'',
							$elm$core$Maybe$Nothing))));
		} else {
			if (_v0.b.$ === 'Just') {
				var query = _v0.b.a;
				return $author$project$Main$navToFirstSlide(
					A2(
						$author$project$Update$getIndex,
						query,
						A3(
							model,
							_Utils_update(
								courseUrl,
								{
									query: $elm$core$Maybe$Just(query)
								}),
							$author$project$Model$Loading,
							A7(
								$author$project$Lia$Script$init,
								flags.hasShareAPI,
								openTableOfContents,
								flags.settings,
								$author$project$Main$get_base(
									A2(
										$elm$core$Maybe$withDefault,
										_Utils_update(
											courseUrl,
											{
												query: $elm$core$Maybe$Just(query)
											}),
										$elm$url$Url$fromString(query))),
								query,
								$author$project$Main$get_origin(
									$elm$core$Maybe$Just(query)),
								url.fragment))));
			} else {
				if (_v0.a.$ === 'Just') {
					var query = _v0.a.a;
					return A2(
						$author$project$Update$getIndex,
						query,
						A3(
							model,
							courseUrl,
							$author$project$Model$Loading,
							A7(
								$author$project$Lia$Script$init,
								flags.hasShareAPI,
								openTableOfContents,
								flags.settings,
								$author$project$Main$get_base(courseUrl),
								query,
								$author$project$Main$get_origin(courseUrl.query),
								url.fragment)));
				} else {
					return $author$project$Update$initIndex(
						A3(
							model,
							courseUrl,
							$author$project$Model$Idle,
							A7($author$project$Lia$Script$init, flags.hasShareAPI, openTableOfContents, flags.settings, '', '', '', url.fragment)));
				}
			}
		}
	});
var $elm$json$Json$Decode$null = _Json_decodeNull;
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $author$project$Update$Handle = function (a) {
	return {$: 'Handle', a: a};
};
var $author$project$Update$LiaScript = function (a) {
	return {$: 'LiaScript', a: a};
};
var $author$project$Update$Resize = function (a) {
	return {$: 'Resize', a: a};
};
var $author$project$Session$Screen = F2(
	function (width, height) {
		return {height: height, width: width};
	});
var $elm$core$Platform$Sub$batch = _Platform_batch;
var $author$project$Update$event2elm = _Platform_incomingPort(
	'event2elm',
	A2(
		$elm$json$Json$Decode$andThen,
		function (topic) {
			return A2(
				$elm$json$Json$Decode$andThen,
				function (section) {
					return A2(
						$elm$json$Json$Decode$andThen,
						function (message) {
							return $elm$json$Json$Decode$succeed(
								{message: message, section: section, topic: topic});
						},
						A2($elm$json$Json$Decode$field, 'message', $elm$json$Json$Decode$value));
				},
				A2($elm$json$Json$Decode$field, 'section', $elm$json$Json$Decode$int));
		},
		A2($elm$json$Json$Decode$field, 'topic', $elm$json$Json$Decode$string)));
var $elm$browser$Browser$Events$Window = {$: 'Window'};
var $elm$browser$Browser$Events$MySub = F3(
	function (a, b, c) {
		return {$: 'MySub', a: a, b: b, c: c};
	});
var $elm$browser$Browser$Events$State = F2(
	function (subs, pids) {
		return {pids: pids, subs: subs};
	});
var $elm$browser$Browser$Events$init = $elm$core$Task$succeed(
	A2($elm$browser$Browser$Events$State, _List_Nil, $elm$core$Dict$empty));
var $elm$browser$Browser$Events$nodeToKey = function (node) {
	if (node.$ === 'Document') {
		return 'd_';
	} else {
		return 'w_';
	}
};
var $elm$browser$Browser$Events$addKey = function (sub) {
	var node = sub.a;
	var name = sub.b;
	return _Utils_Tuple2(
		_Utils_ap(
			$elm$browser$Browser$Events$nodeToKey(node),
			name),
		sub);
};
var $elm$browser$Browser$Events$Event = F2(
	function (key, event) {
		return {event: event, key: key};
	});
var $elm$browser$Browser$Events$spawn = F3(
	function (router, key, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var actualNode = function () {
			if (node.$ === 'Document') {
				return _Browser_doc;
			} else {
				return _Browser_window;
			}
		}();
		return A2(
			$elm$core$Task$map,
			function (value) {
				return _Utils_Tuple2(key, value);
			},
			A3(
				_Browser_on,
				actualNode,
				name,
				function (event) {
					return A2(
						$elm$core$Platform$sendToSelf,
						router,
						A2($elm$browser$Browser$Events$Event, key, event));
				}));
	});
var $elm$browser$Browser$Events$onEffects = F3(
	function (router, subs, state) {
		var stepRight = F3(
			function (key, sub, _v6) {
				var deads = _v6.a;
				var lives = _v6.b;
				var news = _v6.c;
				return _Utils_Tuple3(
					deads,
					lives,
					A2(
						$elm$core$List$cons,
						A3($elm$browser$Browser$Events$spawn, router, key, sub),
						news));
			});
		var stepLeft = F3(
			function (_v4, pid, _v5) {
				var deads = _v5.a;
				var lives = _v5.b;
				var news = _v5.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, pid, deads),
					lives,
					news);
			});
		var stepBoth = F4(
			function (key, pid, _v2, _v3) {
				var deads = _v3.a;
				var lives = _v3.b;
				var news = _v3.c;
				return _Utils_Tuple3(
					deads,
					A3($elm$core$Dict$insert, key, pid, lives),
					news);
			});
		var newSubs = A2($elm$core$List$map, $elm$browser$Browser$Events$addKey, subs);
		var _v0 = A6(
			$elm$core$Dict$merge,
			stepLeft,
			stepBoth,
			stepRight,
			state.pids,
			$elm$core$Dict$fromList(newSubs),
			_Utils_Tuple3(_List_Nil, $elm$core$Dict$empty, _List_Nil));
		var deadPids = _v0.a;
		var livePids = _v0.b;
		var makeNewPids = _v0.c;
		return A2(
			$elm$core$Task$andThen,
			function (pids) {
				return $elm$core$Task$succeed(
					A2(
						$elm$browser$Browser$Events$State,
						newSubs,
						A2(
							$elm$core$Dict$union,
							livePids,
							$elm$core$Dict$fromList(pids))));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$sequence(makeNewPids);
				},
				$elm$core$Task$sequence(
					A2($elm$core$List$map, $elm$core$Process$kill, deadPids))));
	});
var $elm$browser$Browser$Events$onSelfMsg = F3(
	function (router, _v0, state) {
		var key = _v0.key;
		var event = _v0.event;
		var toMessage = function (_v2) {
			var subKey = _v2.a;
			var _v3 = _v2.b;
			var node = _v3.a;
			var name = _v3.b;
			var decoder = _v3.c;
			return _Utils_eq(subKey, key) ? A2(_Browser_decodeEvent, decoder, event) : $elm$core$Maybe$Nothing;
		};
		var messages = A2($elm$core$List$filterMap, toMessage, state.subs);
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Platform$sendToApp(router),
					messages)));
	});
var $elm$browser$Browser$Events$subMap = F2(
	function (func, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var decoder = _v0.c;
		return A3(
			$elm$browser$Browser$Events$MySub,
			node,
			name,
			A2($elm$json$Json$Decode$map, func, decoder));
	});
_Platform_effectManagers['Browser.Events'] = _Platform_createManager($elm$browser$Browser$Events$init, $elm$browser$Browser$Events$onEffects, $elm$browser$Browser$Events$onSelfMsg, 0, $elm$browser$Browser$Events$subMap);
var $elm$browser$Browser$Events$subscription = _Platform_leaf('Browser.Events');
var $elm$browser$Browser$Events$on = F3(
	function (node, name, decoder) {
		return $elm$browser$Browser$Events$subscription(
			A3($elm$browser$Browser$Events$MySub, node, name, decoder));
	});
var $elm$browser$Browser$Events$onResize = function (func) {
	return A3(
		$elm$browser$Browser$Events$on,
		$elm$browser$Browser$Events$Window,
		'resize',
		A2(
			$elm$json$Json$Decode$field,
			'target',
			A3(
				$elm$json$Json$Decode$map2,
				func,
				A2($elm$json$Json$Decode$field, 'innerWidth', $elm$json$Json$Decode$int),
				A2($elm$json$Json$Decode$field, 'innerHeight', $elm$json$Json$Decode$int))));
};
var $author$project$Lia$Update$UpdateMarkdown = function (a) {
	return {$: 'UpdateMarkdown', a: a};
};
var $author$project$Lia$Update$get_active_section = function (model) {
	return A2($elm$core$Array$get, model.section_active, model.sections);
};
var $elm$core$Platform$Sub$none = $elm$core$Platform$Sub$batch(_List_Nil);
var $author$project$Lia$Markdown$Update$FootnoteShow = function (a) {
	return {$: 'FootnoteShow', a: a};
};
var $author$project$Lia$Markdown$Update$footnote = _Platform_incomingPort('footnote', $elm$json$Json$Decode$string);
var $author$project$Lia$Markdown$Update$subscriptions = function (_v0) {
	return $author$project$Lia$Markdown$Update$footnote($author$project$Lia$Markdown$Update$FootnoteShow);
};
var $author$project$Lia$Update$subscriptions = function (model) {
	var _v0 = $author$project$Lia$Update$get_active_section(model);
	if (_v0.$ === 'Just') {
		var section = _v0.a;
		return A2(
			$elm$core$Platform$Sub$map,
			$author$project$Lia$Update$UpdateMarkdown,
			$author$project$Lia$Markdown$Update$subscriptions(section));
	} else {
		return $elm$core$Platform$Sub$none;
	}
};
var $author$project$Lia$Script$subscriptions = $author$project$Lia$Update$subscriptions;
var $author$project$Update$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$Update$event2elm($author$project$Update$Handle),
				A2(
				$elm$core$Platform$Sub$map,
				$author$project$Update$LiaScript,
				$author$project$Lia$Script$subscriptions(model.lia)),
				A2(
				$elm$core$Platform$Sub$map,
				$author$project$Update$Resize,
				$elm$browser$Browser$Events$onResize($author$project$Session$Screen))
			]));
};
var $author$project$Update$Load_ReadMe_Result = F2(
	function (a, b) {
		return {$: 'Load_ReadMe_Result', a: a, b: b};
	});
var $author$project$Update$UpdateIndex = function (a) {
	return {$: 'UpdateIndex', a: a};
};
var $author$project$Lia$Script$add_imports = F2(
	function (model, code) {
		var _v0 = A2($author$project$Lia$Parser$Parser$parse_defintion, model.url, code);
		if (_v0.$ === 'Ok') {
			var _v1 = _v0.a;
			var definition = _v1.a;
			return A2($author$project$Lia$Script$add_todos, definition, model);
		} else {
			return model;
		}
	});
var $author$project$Update$batch = F3(
	function (map, cmd, events) {
		return $elm$core$List$isEmpty(events) ? A2($elm$core$Platform$Cmd$map, map, cmd) : $elm$core$Platform$Cmd$batch(
			A2(
				$elm$core$List$cons,
				A2($elm$core$Platform$Cmd$map, map, cmd),
				A2($elm$core$List$map, $author$project$Update$event2js, events)));
	});
var $author$project$Lia$Model$Model = function (url) {
	return function (readme) {
		return function (origin) {
			return function (title) {
				return function (settings) {
					return function (error) {
						return function (sections) {
							return function (section_active) {
								return function (anchor) {
									return function (definition) {
										return function (index_model) {
											return function (resource) {
												return function (to_do) {
													return function (translation) {
														return function (search_index) {
															return {anchor: anchor, definition: definition, error: error, index_model: index_model, origin: origin, readme: readme, resource: resource, search_index: search_index, section_active: section_active, sections: sections, settings: settings, title: title, to_do: to_do, translation: translation, url: url};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Lia$Json$Decode$andMap = F2(
	function (key, dec) {
		return A2(
			$elm$json$Json$Decode$map2,
			$elm$core$Basics$apR,
			A2($elm$json$Json$Decode$field, key, dec));
	});
var $elm$json$Json$Decode$array = _Json_decodeArray;
var $author$project$Lia$Definition$Types$Definition = function (author) {
	return function (date) {
		return function (email) {
			return function (language) {
				return function (logo) {
					return function (narrator) {
						return function (version) {
							return function (comment) {
								return function (resources) {
									return function (base) {
										return function (translation) {
											return function (macro) {
												return function (imports) {
													return function (attributes) {
														return function (section) {
															return function (uid) {
																return function (debug) {
																	return function (onload) {
																		return function (lightMode) {
																			return function (mode) {
																				return {attributes: attributes, author: author, base: base, comment: comment, date: date, debug: debug, email: email, imports: imports, language: language, lightMode: lightMode, logo: logo, macro: macro, mode: mode, narrator: narrator, onload: onload, resources: resources, section: section, translation: translation, uid: uid, version: version};
																			};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Lia$Definition$Json$Decode$andMap = F2(
	function (key, dec) {
		return A2(
			$elm$json$Json$Decode$map2,
			$elm$core$Basics$apR,
			A2($elm$json$Json$Decode$field, key, dec));
	});
var $author$project$Lia$Definition$Json$Decode$decResource = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$map,
			$author$project$Lia$Definition$Types$Link,
			A2($elm$json$Json$Decode$field, 'Link', $elm$json$Json$Decode$string)),
			A2(
			$elm$json$Json$Decode$map,
			$author$project$Lia$Definition$Types$Script,
			A2($elm$json$Json$Decode$field, 'Script', $elm$json$Json$Decode$string))
		]));
var $author$project$Lia$Markdown$Effect$Types$Effect = F6(
	function (content, playback, begin, end, voice, id) {
		return {begin: begin, content: content, end: end, id: id, playback: playback, voice: voice};
	});
var $author$project$Lia$Markdown$HTML$Types$decode = function (contentDecoder) {
	return A4(
		$elm$json$Json$Decode$map3,
		$author$project$Lia$Markdown$HTML$Types$Node,
		A2($elm$json$Json$Decode$field, 'node', $elm$json$Json$Decode$string),
		A2(
			$elm$json$Json$Decode$map,
			$elm$core$Dict$toList,
			A2(
				$elm$json$Json$Decode$field,
				'attr',
				$elm$json$Json$Decode$dict($elm$json$Json$Decode$string))),
		A2(
			$elm$json$Json$Decode$field,
			'children',
			$elm$json$Json$Decode$list(contentDecoder)));
};
var $elm$json$Json$Decode$lazy = function (thunk) {
	return A2(
		$elm$json$Json$Decode$andThen,
		thunk,
		$elm$json$Json$Decode$succeed(_Utils_Tuple0));
};
var $elm$json$Json$Decode$map6 = _Json_map6;
var $elm$json$Json$Decode$maybe = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder),
				$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
			]));
};
var $author$project$Lia$Markdown$Inline$Json$Decode$strReader = F2(
	function (key, type_) {
		return A2(
			$elm$json$Json$Decode$map,
			type_,
			A2($elm$json$Json$Decode$field, key, $elm$json$Json$Decode$string));
	});
var $author$project$Lia$Markdown$Inline$Json$Decode$toAnnotation = function (fn) {
	return A2(
		$elm$json$Json$Decode$map,
		fn,
		$elm$json$Json$Decode$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$json$Json$Decode$field,
					'a',
					$elm$json$Json$Decode$list(
						A2(
							$elm$json$Json$Decode$andThen,
							function (p) {
								if ((p.b && p.b.b) && (!p.b.b.b)) {
									var key = p.a;
									var _v1 = p.b;
									var value = _v1.a;
									return $elm$json$Json$Decode$succeed(
										_Utils_Tuple2(key, value));
								} else {
									return $elm$json$Json$Decode$fail('not correct parameter list');
								}
							},
							$elm$json$Json$Decode$list($elm$json$Json$Decode$string)))),
					$elm$json$Json$Decode$succeed(_List_Nil)
				])));
};
var $author$project$Lia$Markdown$Inline$Json$Decode$inlReader = F2(
	function (key, type_) {
		return A2(
			$elm$json$Json$Decode$map,
			type_,
			A2(
				$elm$json$Json$Decode$field,
				key,
				$elm$json$Json$Decode$lazy(
					function (_v3) {
						return $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decInline();
					})));
	});
var $author$project$Lia$Markdown$Inline$Json$Decode$toMultimedia = F2(
	function (fn3, _class) {
		return A4(
			$elm$json$Json$Decode$map3,
			fn3,
			A2(
				$elm$json$Json$Decode$field,
				_class,
				$elm$json$Json$Decode$lazy(
					function (_v2) {
						return $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decode();
					})),
			A3(
				$elm$json$Json$Decode$map2,
				$elm$core$Tuple$pair,
				A2($elm$json$Json$Decode$field, 'stream', $elm$json$Json$Decode$bool),
				A2($elm$json$Json$Decode$field, 'url', $elm$json$Json$Decode$string)),
			$author$project$Lia$Markdown$Inline$Json$Decode$cyclic$toTitle());
	});
var $author$project$Lia$Markdown$Inline$Json$Decode$toRef = F2(
	function (fn3, _class) {
		return A4(
			$elm$json$Json$Decode$map3,
			fn3,
			A2(
				$elm$json$Json$Decode$field,
				_class,
				$elm$json$Json$Decode$lazy(
					function (_v1) {
						return $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decode();
					})),
			A2($elm$json$Json$Decode$field, 'url', $elm$json$Json$Decode$string),
			$author$project$Lia$Markdown$Inline$Json$Decode$cyclic$toTitle());
	});
function $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decode() {
	return $elm$json$Json$Decode$list(
		$author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decInline());
}
function $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decInline() {
	return A2(
		$elm$json$Json$Decode$andThen,
		$author$project$Lia$Markdown$Inline$Json$Decode$toAnnotation,
		$elm$json$Json$Decode$oneOf(
			_List_fromArray(
				[
					A2($author$project$Lia$Markdown$Inline$Json$Decode$strReader, 'Chars', $author$project$Lia$Markdown$Inline$Types$Chars),
					A2($author$project$Lia$Markdown$Inline$Json$Decode$strReader, 'FootnoteMark', $author$project$Lia$Markdown$Inline$Types$FootnoteMark),
					A2($author$project$Lia$Markdown$Inline$Json$Decode$strReader, 'Symbol', $author$project$Lia$Markdown$Inline$Types$Symbol),
					A2($author$project$Lia$Markdown$Inline$Json$Decode$strReader, 'Verbatim', $author$project$Lia$Markdown$Inline$Types$Verbatim),
					A2($author$project$Lia$Markdown$Inline$Json$Decode$inlReader, 'Bold', $author$project$Lia$Markdown$Inline$Types$Bold),
					A2($author$project$Lia$Markdown$Inline$Json$Decode$inlReader, 'Italic', $author$project$Lia$Markdown$Inline$Types$Italic),
					A2($author$project$Lia$Markdown$Inline$Json$Decode$inlReader, 'Strike', $author$project$Lia$Markdown$Inline$Types$Strike),
					A2($author$project$Lia$Markdown$Inline$Json$Decode$inlReader, 'Superscript', $author$project$Lia$Markdown$Inline$Types$Superscript),
					A2($author$project$Lia$Markdown$Inline$Json$Decode$inlReader, 'Underline', $author$project$Lia$Markdown$Inline$Types$Underline),
					A2(
					$elm$json$Json$Decode$map,
					$author$project$Lia$Markdown$Inline$Types$Ref,
					A2(
						$elm$json$Json$Decode$field,
						'Ref',
						$author$project$Lia$Markdown$Inline$Json$Decode$cyclic$toReference())),
					A2(
					$elm$json$Json$Decode$map,
					$author$project$Lia$Markdown$Inline$Types$Container,
					A2(
						$elm$json$Json$Decode$field,
						'Container',
						$elm$json$Json$Decode$lazy(
							function (_v5) {
								return $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decode();
							}))),
					A2(
					$elm$json$Json$Decode$map,
					$author$project$Lia$Markdown$Inline$Types$IHTML,
					A2(
						$elm$json$Json$Decode$field,
						'IHTML',
						$elm$json$Json$Decode$lazy(
							function (_v6) {
								return $author$project$Lia$Markdown$HTML$Types$decode(
									$author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decInline());
							}))),
					A2(
					$elm$json$Json$Decode$map,
					$author$project$Lia$Markdown$Inline$Types$Script,
					A2($elm$json$Json$Decode$field, 'Script', $elm$json$Json$Decode$int)),
					A2(
					$elm$json$Json$Decode$map,
					$author$project$Lia$Markdown$Inline$Types$EInline,
					$author$project$Lia$Markdown$Inline$Json$Decode$cyclic$effect())
				])));
}
function $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$effect() {
	return A7(
		$elm$json$Json$Decode$map6,
		$author$project$Lia$Markdown$Effect$Types$Effect,
		A2(
			$elm$json$Json$Decode$field,
			'EInline',
			$elm$json$Json$Decode$lazy(
				function (_v4) {
					return $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decode();
				})),
		A2($elm$json$Json$Decode$field, 'playback', $elm$json$Json$Decode$bool),
		A2($elm$json$Json$Decode$field, 'begin', $elm$json$Json$Decode$int),
		A2(
			$elm$json$Json$Decode$field,
			'end',
			$elm$json$Json$Decode$maybe($elm$json$Json$Decode$int)),
		A2($elm$json$Json$Decode$field, 'voice', $elm$json$Json$Decode$string),
		A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$int));
}
function $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$toReference() {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2($author$project$Lia$Markdown$Inline$Json$Decode$toRef, $author$project$Lia$Markdown$Inline$Types$Link, 'Link'),
				A2($author$project$Lia$Markdown$Inline$Json$Decode$toRef, $author$project$Lia$Markdown$Inline$Types$Mail, 'Mail'),
				A2($author$project$Lia$Markdown$Inline$Json$Decode$toRef, $author$project$Lia$Markdown$Inline$Types$Image, 'Image'),
				A2($author$project$Lia$Markdown$Inline$Json$Decode$toRef, $author$project$Lia$Markdown$Inline$Types$Embed, 'Embed'),
				A2($author$project$Lia$Markdown$Inline$Json$Decode$toMultimedia, $author$project$Lia$Markdown$Inline$Types$Audio, 'Audio'),
				A2($author$project$Lia$Markdown$Inline$Json$Decode$toMultimedia, $author$project$Lia$Markdown$Inline$Types$Movie, 'Movie')
			]));
}
function $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$toTitle() {
	return A2(
		$elm$json$Json$Decode$field,
		'title',
		$elm$json$Json$Decode$lazy(
			function (_v0) {
				return $elm$json$Json$Decode$maybe(
					$author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decode());
			}));
}
try {
	var $author$project$Lia$Markdown$Inline$Json$Decode$decode = $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decode();
	$author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decode = function () {
		return $author$project$Lia$Markdown$Inline$Json$Decode$decode;
	};
	var $author$project$Lia$Markdown$Inline$Json$Decode$decInline = $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decInline();
	$author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decInline = function () {
		return $author$project$Lia$Markdown$Inline$Json$Decode$decInline;
	};
	var $author$project$Lia$Markdown$Inline$Json$Decode$effect = $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$effect();
	$author$project$Lia$Markdown$Inline$Json$Decode$cyclic$effect = function () {
		return $author$project$Lia$Markdown$Inline$Json$Decode$effect;
	};
	var $author$project$Lia$Markdown$Inline$Json$Decode$toReference = $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$toReference();
	$author$project$Lia$Markdown$Inline$Json$Decode$cyclic$toReference = function () {
		return $author$project$Lia$Markdown$Inline$Json$Decode$toReference;
	};
	var $author$project$Lia$Markdown$Inline$Json$Decode$toTitle = $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$toTitle();
	$author$project$Lia$Markdown$Inline$Json$Decode$cyclic$toTitle = function () {
		return $author$project$Lia$Markdown$Inline$Json$Decode$toTitle;
	};
} catch ($) {
	throw 'Some top-level definitions from `Lia.Markdown.Inline.Json.Decode` are causing infinite recursion:\n\n  ┌─────┐\n  │    decode\n  │     ↓\n  │    decInline\n  │     ↓\n  │    effect\n  │     ↓\n  │    inlReader\n  │     ↓\n  │    toReference\n  │     ↓\n  │    toMultimedia\n  │     ↓\n  │    toRef\n  │     ↓\n  │    toTitle\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $author$project$Lia$Definition$Json$Decode$decode = A3(
	$elm$json$Json$Decode$map2,
	$elm$core$Basics$apR,
	$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing),
	A3(
		$elm$json$Json$Decode$map2,
		$elm$core$Basics$apR,
		$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing),
		A3(
			$author$project$Lia$Definition$Json$Decode$andMap,
			'onload',
			$elm$json$Json$Decode$string,
			A3(
				$elm$json$Json$Decode$map2,
				$elm$core$Basics$apR,
				$elm$json$Json$Decode$succeed(false),
				A3(
					$elm$json$Json$Decode$map2,
					$elm$core$Basics$apR,
					$elm$json$Json$Decode$succeed(-1),
					A3(
						$elm$json$Json$Decode$map2,
						$elm$core$Basics$apR,
						$elm$json$Json$Decode$succeed(-1),
						A3(
							$author$project$Lia$Definition$Json$Decode$andMap,
							'attributes',
							$elm$json$Json$Decode$list($author$project$Lia$Markdown$Inline$Json$Decode$decode),
							A3(
								$elm$json$Json$Decode$map2,
								$elm$core$Basics$apR,
								$elm$json$Json$Decode$succeed(_List_Nil),
								A3(
									$author$project$Lia$Definition$Json$Decode$andMap,
									'macro',
									$elm$json$Json$Decode$dict($elm$json$Json$Decode$string),
									A3(
										$author$project$Lia$Definition$Json$Decode$andMap,
										'translation',
										$elm$json$Json$Decode$dict($elm$json$Json$Decode$string),
										A3(
											$author$project$Lia$Definition$Json$Decode$andMap,
											'base',
											$elm$json$Json$Decode$string,
											A3(
												$author$project$Lia$Definition$Json$Decode$andMap,
												'resources',
												$elm$json$Json$Decode$list($author$project$Lia$Definition$Json$Decode$decResource),
												A3(
													$author$project$Lia$Definition$Json$Decode$andMap,
													'comment',
													$author$project$Lia$Markdown$Inline$Json$Decode$decode,
													A3(
														$author$project$Lia$Definition$Json$Decode$andMap,
														'version',
														$elm$json$Json$Decode$string,
														A3(
															$author$project$Lia$Definition$Json$Decode$andMap,
															'narrator',
															$elm$json$Json$Decode$string,
															A3(
																$author$project$Lia$Definition$Json$Decode$andMap,
																'logo',
																$elm$json$Json$Decode$string,
																A3(
																	$author$project$Lia$Definition$Json$Decode$andMap,
																	'language',
																	$elm$json$Json$Decode$string,
																	A3(
																		$author$project$Lia$Definition$Json$Decode$andMap,
																		'email',
																		$elm$json$Json$Decode$string,
																		A3(
																			$author$project$Lia$Definition$Json$Decode$andMap,
																			'date',
																			$elm$json$Json$Decode$string,
																			A3(
																				$author$project$Lia$Definition$Json$Decode$andMap,
																				'author',
																				$elm$json$Json$Decode$string,
																				$elm$json$Json$Decode$succeed($author$project$Lia$Definition$Types$Definition)))))))))))))))))))));
var $elm$core$Elm$JsArray$indexedMap = _JsArray_indexedMap;
var $elm$core$Array$indexedMap = F2(
	function (func, _v0) {
		var len = _v0.a;
		var tree = _v0.c;
		var tail = _v0.d;
		var initialBuilder = {
			nodeList: _List_Nil,
			nodeListSize: 0,
			tail: A3(
				$elm$core$Elm$JsArray$indexedMap,
				func,
				$elm$core$Array$tailIndex(len),
				tail)
		};
		var helper = F2(
			function (node, builder) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldl, helper, builder, subTree);
				} else {
					var leaf = node.a;
					var offset = builder.nodeListSize * $elm$core$Array$branchFactor;
					var mappedLeaf = $elm$core$Array$Leaf(
						A3($elm$core$Elm$JsArray$indexedMap, func, offset, leaf));
					return {
						nodeList: A2($elm$core$List$cons, mappedLeaf, builder.nodeList),
						nodeListSize: builder.nodeListSize + 1,
						tail: builder.tail
					};
				}
			});
		return A2(
			$elm$core$Array$builderToArray,
			true,
			A3($elm$core$Elm$JsArray$foldl, helper, initialBuilder, tree));
	});
var $author$project$Lia$Section$init = F2(
	function (id, base) {
		return {body: _List_Nil, code: base.code, code_vector: $elm$core$Array$empty, definition: $elm$core$Maybe$Nothing, effect_model: $author$project$Lia$Markdown$Effect$Model$init, error: $elm$core$Maybe$Nothing, footnote2show: $elm$core$Maybe$Nothing, footnotes: $author$project$Lia$Markdown$Footnote$Model$init, id: id, indentation: base.indentation, parsed: false, quiz_vector: $elm$core$Array$empty, survey_vector: $elm$core$Array$empty, table_vector: $elm$core$Array$empty, task_vector: $elm$core$Array$empty, title: base.title, visible: true};
	});
var $author$project$Lia$Section$Base = F3(
	function (indentation, title, code) {
		return {code: code, indentation: indentation, title: title};
	});
var $author$project$Lia$Json$Decode$toSectionBase = A4(
	$elm$json$Json$Decode$map3,
	$author$project$Lia$Section$Base,
	A2($elm$json$Json$Decode$field, 'indentation', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'title', $author$project$Lia$Markdown$Inline$Json$Decode$decode),
	A2($elm$json$Json$Decode$field, 'code', $elm$json$Json$Decode$string));
var $author$project$Lia$Json$Decode$toModel = A3(
	$elm$json$Json$Decode$map2,
	$elm$core$Basics$apR,
	$elm$json$Json$Decode$succeed($elm$core$Basics$identity),
	A3(
		$author$project$Lia$Json$Decode$andMap,
		'translation',
		A2($elm$json$Json$Decode$map, $author$project$Translations$getLnFromCode, $elm$json$Json$Decode$string),
		A3(
			$elm$json$Json$Decode$map2,
			$elm$core$Basics$apR,
			$elm$json$Json$Decode$succeed(_List_Nil),
			A3(
				$elm$json$Json$Decode$map2,
				$elm$core$Basics$apR,
				$elm$json$Json$Decode$succeed(_List_Nil),
				A3(
					$elm$json$Json$Decode$map2,
					$elm$core$Basics$apR,
					$elm$json$Json$Decode$succeed($author$project$Lia$Index$Model$init),
					A3(
						$author$project$Lia$Json$Decode$andMap,
						'definition',
						$author$project$Lia$Definition$Json$Decode$decode,
						A3(
							$elm$json$Json$Decode$map2,
							$elm$core$Basics$apR,
							$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing),
							A3(
								$author$project$Lia$Json$Decode$andMap,
								'section_active',
								$elm$json$Json$Decode$int,
								A3(
									$author$project$Lia$Json$Decode$andMap,
									'sections',
									A2(
										$elm$json$Json$Decode$map,
										$elm$core$Array$indexedMap($author$project$Lia$Section$init),
										$elm$json$Json$Decode$array($author$project$Lia$Json$Decode$toSectionBase)),
									A3(
										$elm$json$Json$Decode$map2,
										$elm$core$Basics$apR,
										$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing),
										A3(
											$elm$json$Json$Decode$map2,
											$elm$core$Basics$apR,
											$elm$json$Json$Decode$succeed(
												A2($author$project$Lia$Settings$Types$init, false, $author$project$Lia$Settings$Types$Slides)),
											A3(
												$author$project$Lia$Json$Decode$andMap,
												'str_title',
												$elm$json$Json$Decode$string,
												A3(
													$author$project$Lia$Json$Decode$andMap,
													'origin',
													$elm$json$Json$Decode$string,
													A3(
														$author$project$Lia$Json$Decode$andMap,
														'readme',
														$elm$json$Json$Decode$string,
														A3(
															$author$project$Lia$Json$Decode$andMap,
															'url',
															$elm$json$Json$Decode$string,
															$elm$json$Json$Decode$succeed($author$project$Lia$Model$Model))))))))))))))));
var $author$project$Lia$Json$Decode$decode = $elm$json$Json$Decode$decodeValue($author$project$Lia$Json$Decode$toModel);
var $author$project$Index$Model$Course = F4(
	function (id, versions, active, last_visit) {
		return {active: active, id: id, last_visit: last_visit, versions: versions};
	});
var $author$project$Index$Model$Release = F2(
	function (title, definition) {
		return {definition: definition, title: title};
	});
var $author$project$Index$Update$decRelease = A3(
	$elm$json$Json$Decode$map2,
	$author$project$Index$Model$Release,
	A2($elm$json$Json$Decode$field, 'title', $author$project$Lia$Markdown$Inline$Json$Decode$decode),
	$author$project$Lia$Definition$Json$Decode$decode);
var $elm$json$Json$Decode$map4 = _Json_map4;
var $author$project$Index$Update$decCourse = A5(
	$elm$json$Json$Decode$map4,
	$author$project$Index$Model$Course,
	A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'data',
		$elm$json$Json$Decode$dict($author$project$Index$Update$decRelease)),
	$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing),
	A2($elm$json$Json$Decode$field, 'updated_str', $elm$json$Json$Decode$string));
var $author$project$Index$Update$decodeGet = function (event) {
	var _v0 = _Utils_Tuple2(
		A2(
			$elm$json$Json$Decode$decodeValue,
			A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$string),
			event),
		A2(
			$elm$json$Json$Decode$decodeValue,
			A2($elm$json$Json$Decode$field, 'course', $author$project$Index$Update$decCourse),
			event));
	if (_v0.a.$ === 'Ok') {
		if (_v0.b.$ === 'Ok') {
			var uri = _v0.a.a;
			var course = _v0.b.a;
			return _Utils_Tuple2(
				uri,
				$elm$core$Maybe$Just(course));
		} else {
			var uri = _v0.a.a;
			return _Utils_Tuple2(uri, $elm$core$Maybe$Nothing);
		}
	} else {
		return _Utils_Tuple2('', $elm$core$Maybe$Nothing);
	}
};
var $author$project$Lia$Script$getSectionNumberFrom = F2(
	function (index, fragment) {
		var slide = function () {
			var _v0 = $elm$core$String$toInt(fragment);
			if (_v0.$ === 'Just') {
				var number = _v0.a;
				return number - 1;
			} else {
				return A2(
					$elm$core$Maybe$withDefault,
					-1,
					A2(
						$elm$core$Maybe$map,
						$elm$core$Basics$add(-1),
						$elm$core$String$toInt(
							A2(
								$elm$core$String$dropLeft,
								1,
								index('#' + fragment)))));
			}
		}();
		return (slide < 0) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(slide);
	});
var $author$project$Session$Course = F2(
	function (a, b) {
		return {$: 'Course', a: a, b: b};
	});
var $author$project$Session$Index = {$: 'Index'};
var $author$project$Session$getType = function (url) {
	var _v0 = url.query;
	if (_v0.$ === 'Just') {
		var str = _v0.a;
		return A2($author$project$Session$Course, str, url.fragment);
	} else {
		return $author$project$Session$Index;
	}
};
var $author$project$Index$Update$Handle = function (a) {
	return {$: 'Handle', a: a};
};
var $author$project$Index$Update$handle = $author$project$Index$Update$Handle;
var $author$project$Lia$Update$Handle = function (a) {
	return {$: 'Handle', a: a};
};
var $author$project$Lia$Script$handle = $author$project$Lia$Update$Handle;
var $elm$browser$Browser$Navigation$load = _Browser_load;
var $author$project$Session$load = A2($elm$core$Basics$composeR, $elm$url$Url$toString, $elm$browser$Browser$Navigation$load);
var $author$project$Lia$Update$Load = F2(
	function (a, b) {
		return {$: 'Load', a: a, b: b};
	});
var $author$project$Lia$Update$InitSection = {$: 'InitSection'};
var $author$project$Lia$Update$NextSection = {$: 'NextSection'};
var $author$project$Lia$Update$PrevSection = {$: 'PrevSection'};
var $author$project$Lia$Update$UpdateSettings = function (a) {
	return {$: 'UpdateSettings', a: a};
};
var $author$project$Port$Event$decode = $elm$json$Json$Decode$decodeValue(
	A4(
		$elm$json$Json$Decode$map3,
		$author$project$Port$Event$Event,
		A2($elm$json$Json$Decode$field, 'topic', $elm$json$Json$Decode$string),
		A2($elm$json$Json$Decode$field, 'section', $elm$json$Json$Decode$int),
		A2($elm$json$Json$Decode$field, 'message', $elm$json$Json$Decode$value)));
var $elm$core$Array$isEmpty = function (_v0) {
	var len = _v0.a;
	return !len;
};
var $author$project$Lia$Update$add_load = F4(
	function (vector, sectionID, name, logs) {
		return $elm$core$Array$isEmpty(vector) ? logs : A2(
			$elm$core$List$cons,
			A3(
				$author$project$Port$Event$Event,
				'load',
				sectionID,
				$elm$json$Json$Encode$string(name)),
			logs);
	});
var $author$project$Lia$Parser$Parser$return = F3(
	function (sec, state, es) {
		return $elm$core$Result$Ok(
			_Utils_update(
				sec,
				{
					body: es,
					code_vector: state.code_vector,
					definition: state.defines_updated ? $elm$core$Maybe$Just(state.defines) : $elm$core$Maybe$Nothing,
					effect_model: state.effect_model,
					error: $elm$core$Maybe$Nothing,
					footnotes: state.footnotes,
					parsed: true,
					quiz_vector: state.quiz_vector,
					survey_vector: state.survey_vector,
					table_vector: state.table_vector,
					task_vector: state.task_vector
				}));
	});
var $author$project$Lia$Markdown$Types$ASCII = F2(
	function (a, b) {
		return {$: 'ASCII', a: a, b: b};
	});
var $author$project$Lia$Markdown$Types$BulletList = F2(
	function (a, b) {
		return {$: 'BulletList', a: a, b: b};
	});
var $author$project$Lia$Markdown$Types$Chart = F2(
	function (a, b) {
		return {$: 'Chart', a: a, b: b};
	});
var $author$project$Lia$Markdown$Types$Code = function (a) {
	return {$: 'Code', a: a};
};
var $author$project$Lia$Markdown$Types$Effect = F2(
	function (a, b) {
		return {$: 'Effect', a: a, b: b};
	});
var $author$project$Lia$Markdown$Types$HTML = F2(
	function (a, b) {
		return {$: 'HTML', a: a, b: b};
	});
var $author$project$Lia$Markdown$Types$Header = F2(
	function (a, b) {
		return {$: 'Header', a: a, b: b};
	});
var $author$project$Lia$Markdown$Types$OrderedList = F2(
	function (a, b) {
		return {$: 'OrderedList', a: a, b: b};
	});
var $author$project$Lia$Markdown$Types$Quiz = F3(
	function (a, b, c) {
		return {$: 'Quiz', a: a, b: b, c: c};
	});
var $author$project$Lia$Markdown$Types$Quote = F2(
	function (a, b) {
		return {$: 'Quote', a: a, b: b};
	});
var $author$project$Lia$Markdown$Types$Survey = F2(
	function (a, b) {
		return {$: 'Survey', a: a, b: b};
	});
var $author$project$Lia$Markdown$Types$Table = F2(
	function (a, b) {
		return {$: 'Table', a: a, b: b};
	});
var $author$project$Lia$Markdown$Types$Task = F2(
	function (a, b) {
		return {$: 'Task', a: a, b: b};
	});
var $author$project$Lia$Parser$Indentation$push = function (str) {
	return $andre_dietrich$parser_combinators$Combine$modifyState(
		function (state) {
			return _Utils_update(
				state,
				{
					indentation: A2(
						$elm$core$List$append,
						state.indentation,
						_List_fromArray(
							[str])),
					indentation_skip: true
				});
		});
};
var $author$project$Lia$Markdown$Footnote$Parser$block = function (p) {
	return A2(
		$andre_dietrich$parser_combinators$Combine$andThen,
		$author$project$Lia$Markdown$Footnote$Parser$add_footnote,
		A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			p,
			A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$author$project$Lia$Parser$Indentation$push('[ ]{3,}'),
				A2(
					$andre_dietrich$parser_combinators$Combine$map,
					$elm$core$Tuple$pair,
					A2(
						$andre_dietrich$parser_combinators$Combine$keep,
						$author$project$Lia$Parser$Helper$stringTill(
							$andre_dietrich$parser_combinators$Combine$string(']:')),
						$andre_dietrich$parser_combinators$Combine$string('[^'))))));
};
var $author$project$Lia$Markdown$Table$Types$Map = {$: 'Map'};
var $author$project$Lia$Markdown$Table$Types$BarChart = {$: 'BarChart'};
var $author$project$Lia$Markdown$Table$Types$Graph = {$: 'Graph'};
var $author$project$Lia$Markdown$Table$Types$HeatMap = {$: 'HeatMap'};
var $author$project$Lia$Markdown$Table$Types$LinePlot = {$: 'LinePlot'};
var $author$project$Lia$Markdown$Table$Types$None = {$: 'None'};
var $author$project$Lia$Markdown$Table$Types$Parallel = {$: 'Parallel'};
var $author$project$Lia$Markdown$Table$Types$PieChart = {$: 'PieChart'};
var $author$project$Lia$Markdown$Table$Types$Radar = {$: 'Radar'};
var $author$project$Lia$Markdown$Table$Types$ScatterPlot = {$: 'ScatterPlot'};
var $elm$core$Basics$abs = function (n) {
	return (n < 0) ? (-n) : n;
};
var $elm$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			$elm$core$List$any,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, isOkay),
			list);
	});
var $author$project$Lia$Markdown$Table$Matrix$any = function (fn) {
	return $elm$core$List$any(
		$elm$core$List$any(fn));
};
var $author$project$Lia$Utils$get = F2(
	function (i, list) {
		get:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var r = list.a;
				var rs = list.b;
				if (i <= 0) {
					return $elm$core$Maybe$Just(r);
				} else {
					var $temp$i = i - 1,
						$temp$list = rs;
					i = $temp$i;
					list = $temp$list;
					continue get;
				}
			}
		}
	});
var $elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2($elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var $elm$core$List$repeat = F2(
	function (n, value) {
		return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var $author$project$Lia$Markdown$Table$Matrix$transpose = function (matrix) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (input, output) {
				return A3(
					$elm$core$List$map2,
					F2(
						function (i, o) {
							return A2(
								$elm$core$List$append,
								o,
								_List_fromArray(
									[i]));
						}),
					input,
					output);
			}),
		A2(
			$elm$core$List$repeat,
			$elm$core$List$length(
				A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					$elm$core$List$head(matrix))),
			_List_Nil),
		matrix);
};
var $author$project$Lia$Markdown$Table$Matrix$column = function (i) {
	return A2(
		$elm$core$Basics$composeR,
		$author$project$Lia$Markdown$Table$Matrix$transpose,
		$author$project$Lia$Utils$get(i));
};
var $elm$core$Set$Set_elm_builtin = function (a) {
	return {$: 'Set_elm_builtin', a: a};
};
var $elm$core$Set$empty = $elm$core$Set$Set_elm_builtin($elm$core$Dict$empty);
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A3($elm$core$Dict$insert, key, _Utils_Tuple0, dict));
	});
var $elm$core$Set$fromList = function (list) {
	return A3($elm$core$List$foldl, $elm$core$Set$insert, $elm$core$Set$empty, list);
};
var $author$project$Lia$Markdown$Table$Types$isNumber = A2(
	$elm$core$Basics$composeR,
	function ($) {
		return $._float;
	},
	$elm$core$Basics$neq($elm$core$Maybe$Nothing));
var $author$project$Lia$Markdown$Table$Matrix$map = function (fn) {
	return $elm$core$List$map(
		$elm$core$List$map(fn));
};
var $elm$core$List$maximum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$max, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var $elm$core$List$minimum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$min, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$Set$size = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$size(dict);
};
var $author$project$Lia$Markdown$Table$Matrix$some = F2(
	function (percent, fn) {
		return A2(
			$elm$core$Basics$composeR,
			$author$project$Lia$Markdown$Table$Matrix$map(fn),
			A2(
				$elm$core$Basics$composeR,
				$elm$core$List$concat,
				A2(
					$elm$core$Basics$composeR,
					A2(
						$elm$core$List$foldl,
						F2(
							function (cell, _v0) {
								var _true = _v0.a;
								var _false = _v0.b;
								return cell ? _Utils_Tuple2(_true + 1, _false) : _Utils_Tuple2(_true, _false + 1);
							}),
						_Utils_Tuple2(0, 0)),
					function (_v1) {
						var _true = _v1.a;
						var _false = _v1.b;
						return _Utils_cmp(_true / (_true + _false), percent) > -1;
					})));
	});
var $author$project$Lia$Markdown$Table$Matrix$split = function (matrix) {
	if (!matrix.b) {
		return _Utils_Tuple2(_List_Nil, _List_Nil);
	} else {
		var r = matrix.a;
		var rs = matrix.b;
		return _Utils_Tuple2(r, rs);
	}
};
var $author$project$Lia$Markdown$Table$Parser$checkDiagram = F2(
	function (headLine, rows) {
		if (A2(
			$author$project$Lia$Markdown$Table$Matrix$any,
			$author$project$Lia$Markdown$Table$Types$isNumber,
			A2($elm$core$List$filterMap, $elm$core$List$tail, rows))) {
			var firstColumn = A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$List$head,
					$elm$core$Maybe$andThen(
						function ($) {
							return $._float;
						})),
				rows);
			if (A2(
				$elm$core$List$all,
				$elm$core$Basics$neq($elm$core$Maybe$Nothing),
				firstColumn)) {
				if ((!_Utils_eq(headLine, $elm$core$Maybe$Nothing)) && ($elm$core$List$length(firstColumn) === 1)) {
					return $author$project$Lia$Markdown$Table$Types$PieChart;
				} else {
					if (_Utils_eq(
						$elm$core$List$length(firstColumn),
						$elm$core$Set$size(
							$elm$core$Set$fromList(
								A2($elm$core$List$filterMap, $elm$core$Basics$identity, firstColumn))))) {
						var headNumbers = A2(
							$elm$core$Maybe$withDefault,
							_List_fromArray(
								[$elm$core$Maybe$Nothing]),
							A2(
								$elm$core$Maybe$map,
								$elm$core$List$map(
									function ($) {
										return $._float;
									}),
								A2($elm$core$Maybe$andThen, $elm$core$List$tail, headLine)));
						return (($elm$core$List$length(headNumbers) > 1) && A2(
							$elm$core$List$all,
							$elm$core$Basics$neq($elm$core$Maybe$Nothing),
							headNumbers)) ? $author$project$Lia$Markdown$Table$Types$HeatMap : (A3(
							$author$project$Lia$Markdown$Table$Matrix$some,
							0.3,
							$author$project$Lia$Markdown$Table$Types$isNumber,
							$author$project$Lia$Markdown$Table$Matrix$split(
								$author$project$Lia$Markdown$Table$Matrix$transpose(rows)).b) ? $author$project$Lia$Markdown$Table$Types$LinePlot : $author$project$Lia$Markdown$Table$Types$None);
					} else {
						if (A3(
							$author$project$Lia$Markdown$Table$Matrix$some,
							0.3,
							$author$project$Lia$Markdown$Table$Types$isNumber,
							$author$project$Lia$Markdown$Table$Matrix$split(
								$author$project$Lia$Markdown$Table$Matrix$transpose(rows)).b)) {
							return $author$project$Lia$Markdown$Table$Types$ScatterPlot;
						} else {
							return $author$project$Lia$Markdown$Table$Types$None;
						}
					}
				}
			} else {
				if (!_Utils_eq(headLine, $elm$core$Maybe$Nothing)) {
					if ($elm$core$List$length(firstColumn) === 1) {
						return $author$project$Lia$Markdown$Table$Types$PieChart;
					} else {
						if (_Utils_eq(
							A2(
								$elm$core$Maybe$map,
								$elm$core$List$map(
									function ($) {
										return $.string;
									}),
								A2($elm$core$Maybe$andThen, $elm$core$List$tail, headLine)),
							A2(
								$elm$core$Maybe$map,
								$elm$core$List$map(
									function ($) {
										return $.string;
									}),
								A2($author$project$Lia$Markdown$Table$Matrix$column, 0, rows)))) {
							return $author$project$Lia$Markdown$Table$Types$Graph;
						} else {
							if (($elm$core$List$length(rows) * A2(
								$elm$core$Maybe$withDefault,
								1,
								A2($elm$core$Maybe$map, $elm$core$List$length, headLine))) >= 50) {
								return $author$project$Lia$Markdown$Table$Types$Parallel;
							} else {
								var maxima = A2(
									$elm$core$List$filterMap,
									$elm$core$Basics$identity,
									A2(
										$elm$core$List$map,
										A2(
											$elm$core$Basics$composeR,
											$elm$core$List$filterMap($elm$core$Basics$identity),
											$elm$core$List$maximum),
										A2(
											$author$project$Lia$Markdown$Table$Matrix$map,
											function ($) {
												return $._float;
											},
											$author$project$Lia$Markdown$Table$Matrix$split(
												$author$project$Lia$Markdown$Table$Matrix$transpose(rows)).b)));
								return (_Utils_cmp(
									$elm$core$Basics$abs(
										A2(
											$elm$core$Maybe$withDefault,
											0,
											$elm$core$List$maximum(maxima))),
									10 * $elm$core$Basics$abs(
										A2(
											$elm$core$Maybe$withDefault,
											0,
											$elm$core$List$minimum(maxima)))) > 0) ? $author$project$Lia$Markdown$Table$Types$Radar : $author$project$Lia$Markdown$Table$Types$BarChart;
							}
						}
					}
				} else {
					return $author$project$Lia$Markdown$Table$Types$None;
				}
			}
		} else {
			return $author$project$Lia$Markdown$Table$Types$None;
		}
	});
var $author$project$Lia$Markdown$Table$Types$BoxPlot = {$: 'BoxPlot'};
var $author$project$Lia$Markdown$Table$Types$Funnel = {$: 'Funnel'};
var $author$project$Lia$Markdown$Table$Types$Sankey = {$: 'Sankey'};
var $author$project$Lia$Markdown$Table$Parser$diagramType = A2(
	$elm$core$Basics$composeR,
	$author$project$Lia$Markdown$HTML$Attributes$get('data-type'),
	A2(
		$elm$core$Basics$composeR,
		$elm$core$Maybe$withDefault(''),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$String$toLower,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$String$trim,
				function (param) {
					switch (param) {
						case 'lineplot':
							return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$LinePlot);
						case 'line':
							return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$LinePlot);
						case 'scatterplot':
							return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$ScatterPlot);
						case 'scatter':
							return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$ScatterPlot);
						case 'barchart':
							return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$BarChart);
						case 'bar':
							return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$BarChart);
						case 'piechart':
							return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$PieChart);
						case 'pie':
							return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$PieChart);
						case 'heatmap':
							return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$HeatMap);
						case 'map':
							return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$Map);
						case 'radar':
							return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$Radar);
						case 'graph':
							return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$Graph);
						case 'parallel':
							return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$Parallel);
						case 'sankey':
							return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$Sankey);
						case 'boxplot':
							return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$BoxPlot);
						case 'funnel':
							return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$Funnel);
						case 'none':
							return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$None);
						default:
							return $elm$core$Maybe$Nothing;
					}
				}))));
var $author$project$Lia$Markdown$Table$Types$Cell = F4(
	function (attr, inlines, string, _float) {
		return {attr: attr, _float: _float, inlines: inlines, string: string};
	});
var $elm$core$String$toFloat = _String_toFloat;
var $author$project$Lia$Markdown$Table$Types$float = A2(
	$elm$core$Basics$composeR,
	$elm$core$String$split(' '),
	A2(
		$elm$core$Basics$composeR,
		$elm$core$List$head,
		$elm$core$Maybe$andThen($elm$core$String$toFloat)));
var $author$project$Lia$Markdown$Table$Types$toCell = F3(
	function (effects, effectId, _v0) {
		var attr = _v0.a;
		var data = _v0.b;
		var str = $elm$core$String$trim(
			A3($author$project$Lia$Markdown$Inline$Stringify$stringify_, effects, effectId, data));
		return A4(
			$author$project$Lia$Markdown$Table$Types$Cell,
			attr,
			data,
			str,
			$author$project$Lia$Markdown$Table$Types$float(str));
	});
var $author$project$Lia$Markdown$Table$Types$toMatrix = F2(
	function (effects, id) {
		return $author$project$Lia$Markdown$Table$Matrix$map(
			A2($author$project$Lia$Markdown$Table$Types$toCell, effects, id));
	});
var $author$project$Lia$Markdown$Table$Parser$classify = F3(
	function (attr, table, js) {
		return _Utils_update(
			table,
			{
				_class: function () {
					var _v0 = $author$project$Lia$Markdown$Table$Parser$diagramType(attr);
					if (_v0.$ === 'Just') {
						var _class = _v0.a;
						return _class;
					} else {
						if (!_Utils_eq(
							A2($author$project$Lia$Markdown$HTML$Attributes$get, 'data-src', attr),
							$elm$core$Maybe$Nothing)) {
							return $author$project$Lia$Markdown$Table$Types$Map;
						} else {
							var matrix = A2($author$project$Lia$Markdown$HTML$Attributes$isSet, 'data-transpose', attr) ? _Utils_update(
								table,
								{
									body: $author$project$Lia$Markdown$Table$Matrix$split(
										$author$project$Lia$Markdown$Table$Matrix$transpose(
											A2($elm$core$List$cons, table.head, table.body))).b,
									head: function () {
										var _v1 = $elm$core$List$head(table.head);
										if (_v1.$ === 'Nothing') {
											return _List_Nil;
										} else {
											var cell = _v1.a;
											return A2(
												$elm$core$List$cons,
												cell,
												A2(
													$elm$core$Maybe$withDefault,
													_List_Nil,
													A2($author$project$Lia$Markdown$Table$Matrix$column, 0, table.body)));
										}
									}()
								}) : table;
							return A2(
								$author$project$Lia$Markdown$Table$Parser$checkDiagram,
								_Utils_eq(matrix.head, _List_Nil) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
									A2(
										$elm$core$List$map,
										A2($author$project$Lia$Markdown$Table$Types$toCell, js, $elm$core$Maybe$Nothing),
										matrix.head)),
								A3($author$project$Lia$Markdown$Table$Types$toMatrix, js, $elm$core$Maybe$Nothing, matrix.body));
						}
					}
				}()
			});
	});
var $author$project$Lia$Parser$Helper$newlines1 = $andre_dietrich$parser_combinators$Combine$regex('\\n+');
var $author$project$Lia$Parser$Indentation$skip = $andre_dietrich$parser_combinators$Combine$modifyState(
	$author$project$Lia$Parser$Indentation$skip_(true));
var $author$project$Lia$Markdown$Effect$Parser$comment = function (paragraph) {
	return A2(
		$andre_dietrich$parser_combinators$Combine$ignore,
		$author$project$Lia$Markdown$Effect$Parser$reset_effect_number,
		A2(
			$andre_dietrich$parser_combinators$Combine$andThen,
			$author$project$Lia$Markdown$Effect$Parser$add_comment(true),
			A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				A2($andre_dietrich$parser_combinators$Combine$keep, paragraph, $author$project$Lia$Parser$Indentation$check),
				A2(
					$andre_dietrich$parser_combinators$Combine$ignore,
					$andre_dietrich$parser_combinators$Combine$maybe(
						A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Indentation$skip, $author$project$Lia$Parser$Helper$newlines1)),
					A2(
						$andre_dietrich$parser_combinators$Combine$ignore,
						$andre_dietrich$parser_combinators$Combine$regex('}}--[\t ]*'),
						A2(
							$andre_dietrich$parser_combinators$Combine$andMap,
							$andre_dietrich$parser_combinators$Combine$maybe(
								A2(
									$andre_dietrich$parser_combinators$Combine$keep,
									$andre_dietrich$parser_combinators$Combine$regex('[A-Za-z0-9 ]+'),
									A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Macro$Parser$macro, $author$project$Lia$Parser$Helper$spaces1))),
							A2(
								$andre_dietrich$parser_combinators$Combine$map,
								F3(
									function (a, b, c) {
										return _Utils_Tuple3(a, b, c);
									}),
								A2(
									$andre_dietrich$parser_combinators$Combine$keep,
									$author$project$Lia$Markdown$Effect$Parser$effect_number,
									$andre_dietrich$parser_combinators$Combine$regex('[\t ]*--{{')))))))));
};
var $andre_dietrich$elm_svgbob$SvgBob$Types$Point = F2(
	function (x, y) {
		return {x: x, y: y};
	});
var $andre_dietrich$elm_svgbob$SvgBob$Types$AlphaNumeric = {$: 'AlphaNumeric'};
var $andre_dietrich$elm_svgbob$SvgBob$Types$Box = {$: 'Box'};
var $andre_dietrich$elm_svgbob$SvgBob$Types$East = {$: 'East'};
var $andre_dietrich$elm_svgbob$SvgBob$Types$Ext = F2(
	function (a, b) {
		return {$: 'Ext', a: a, b: b};
	});
var $andre_dietrich$elm_svgbob$SvgBob$Types$Ext_ = F3(
	function (a, b, c) {
		return {$: 'Ext_', a: a, b: b, c: c};
	});
var $andre_dietrich$elm_svgbob$SvgBob$Types$ForeignObject = F2(
	function (a, b) {
		return {$: 'ForeignObject', a: a, b: b};
	});
var $andre_dietrich$elm_svgbob$SvgBob$Types$Line = F2(
	function (a, b) {
		return {$: 'Line', a: a, b: b};
	});
var $andre_dietrich$elm_svgbob$SvgBob$Types$North = {$: 'North'};
var $andre_dietrich$elm_svgbob$SvgBob$Types$Sequence = function (a) {
	return {$: 'Sequence', a: a};
};
var $andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft = {$: 'SlantLeft'};
var $andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight = {$: 'SlantRight'};
var $andre_dietrich$elm_svgbob$SvgBob$Types$South = {$: 'South'};
var $andre_dietrich$elm_svgbob$SvgBob$Types$Text = function (a) {
	return {$: 'Text', a: a};
};
var $andre_dietrich$elm_svgbob$SvgBob$Types$Triangle = function (a) {
	return {$: 'Triangle', a: a};
};
var $andre_dietrich$elm_svgbob$SvgBob$Types$Vertical = {$: 'Vertical'};
var $andre_dietrich$elm_svgbob$SvgBob$Types$West = {$: 'West'};
var $andre_dietrich$elm_svgbob$SvgBob$Types$Circle = function (a) {
	return {$: 'Circle', a: a};
};
var $andre_dietrich$elm_svgbob$SvgBob$Types$Center = {$: 'Center'};
var $andre_dietrich$elm_svgbob$SvgBob$Types$Corner = {$: 'Corner'};
var $andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal = {$: 'Horizontal'};
var $andre_dietrich$elm_svgbob$SvgBob$Types$Intersection = {$: 'Intersection'};
var $andre_dietrich$elm_svgbob$SvgBob$Grid$apply = F2(
	function (matrix, list) {
		apply:
		while (true) {
			if (!list.b) {
				return _List_Nil;
			} else {
				var _v1 = list.a;
				var if_ = _v1.a;
				var then_ = _v1.b;
				var fns = list.b;
				if (if_(matrix)) {
					return A2(
						$elm$core$List$cons,
						then_,
						A2($andre_dietrich$elm_svgbob$SvgBob$Grid$apply, matrix, fns));
				} else {
					var $temp$matrix = matrix,
						$temp$list = fns;
					matrix = $temp$matrix;
					list = $temp$list;
					continue apply;
				}
			}
		}
	});
var $andre_dietrich$elm_svgbob$SvgBob$Grid$sequenceWithDefault = F2(
	function (_char, list) {
		return _Utils_eq(list, _List_Nil) ? $andre_dietrich$elm_svgbob$SvgBob$Types$Text(_char) : $andre_dietrich$elm_svgbob$SvgBob$Types$Sequence(list);
	});
var $andre_dietrich$elm_svgbob$SvgBob$Grid$intersection = F2(
	function (_char, matrix) {
		return A2(
			$andre_dietrich$elm_svgbob$SvgBob$Grid$sequenceWithDefault,
			_char,
			A2(
				$andre_dietrich$elm_svgbob$SvgBob$Grid$apply,
				matrix,
				_List_fromArray(
					[
						_Utils_Tuple2(
						function (_v0) {
							var north = _v0.north;
							return _Utils_eq(north, $andre_dietrich$elm_svgbob$SvgBob$Types$Vertical) || (_Utils_eq(north, $andre_dietrich$elm_svgbob$SvgBob$Types$Intersection) || _Utils_eq(north, $andre_dietrich$elm_svgbob$SvgBob$Types$Corner));
						},
						A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$Center, $andre_dietrich$elm_svgbob$SvgBob$Types$North)),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq(m.south, $andre_dietrich$elm_svgbob$SvgBob$Types$Vertical) || (_Utils_eq(m.south, $andre_dietrich$elm_svgbob$SvgBob$Types$Intersection) || _Utils_eq(m.south, $andre_dietrich$elm_svgbob$SvgBob$Types$Corner));
						},
						A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$Center, $andre_dietrich$elm_svgbob$SvgBob$Types$South)),
						_Utils_Tuple2(
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.east;
							},
							$elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal)),
						A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$Center, $andre_dietrich$elm_svgbob$SvgBob$Types$East)),
						_Utils_Tuple2(
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.west;
							},
							$elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal)),
						A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$Center, $andre_dietrich$elm_svgbob$SvgBob$Types$West)),
						_Utils_Tuple2(
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.north_west;
							},
							$elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft)),
						A2(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
							$andre_dietrich$elm_svgbob$SvgBob$Types$Center,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$West))),
						_Utils_Tuple2(
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.north_east;
							},
							$elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight)),
						A2(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
							$andre_dietrich$elm_svgbob$SvgBob$Types$Center,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$East))),
						_Utils_Tuple2(
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.south_west;
							},
							$elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight)),
						A2(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
							$andre_dietrich$elm_svgbob$SvgBob$Types$Center,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West))),
						_Utils_Tuple2(
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.south_east;
							},
							$elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft)),
						A2(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
							$andre_dietrich$elm_svgbob$SvgBob$Types$Center,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East)))
					])));
	});
var $andre_dietrich$elm_svgbob$SvgBob$Grid$circle = F3(
	function (filled, _char, m) {
		if (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$AlphaNumeric, m.west) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$AlphaNumeric, m.east)) {
			return $andre_dietrich$elm_svgbob$SvgBob$Types$Text(_char);
		} else {
			var _v0 = A2($andre_dietrich$elm_svgbob$SvgBob$Grid$intersection, _char, m);
			if (_v0.$ === 'Sequence') {
				var list = _v0.a;
				return $andre_dietrich$elm_svgbob$SvgBob$Types$Sequence(
					A2(
						$elm$core$List$append,
						list,
						_List_fromArray(
							[
								$andre_dietrich$elm_svgbob$SvgBob$Types$Circle(filled)
							])));
			} else {
				return $andre_dietrich$elm_svgbob$SvgBob$Types$Text(_char);
			}
		}
	});
var $andre_dietrich$elm_svgbob$SvgBob$Types$Curve = F3(
	function (a, b, c) {
		return {$: 'Curve', a: a, b: b, c: c};
	});
var $andre_dietrich$elm_svgbob$SvgBob$Grid$closeCurve = F2(
	function (_char, matrix) {
		return A2(
			$andre_dietrich$elm_svgbob$SvgBob$Grid$sequenceWithDefault,
			_char,
			A2(
				$andre_dietrich$elm_svgbob$SvgBob$Grid$apply,
				matrix,
				_List_fromArray(
					[
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner, m.north_west) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner, m.south_west);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							4,
							$andre_dietrich$elm_svgbob$SvgBob$Types$South,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$North))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.north_west) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.south_west);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							4,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West),
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$North)))
					])));
	});
var $andre_dietrich$elm_svgbob$SvgBob$Types$CloseCurve = {$: 'CloseCurve'};
var $andre_dietrich$elm_svgbob$SvgBob$Types$East_ = function (a) {
	return {$: 'East_', a: a};
};
var $andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontal = {$: 'LowHorizontal'};
var $andre_dietrich$elm_svgbob$SvgBob$Types$North_ = function (a) {
	return {$: 'North_', a: a};
};
var $andre_dietrich$elm_svgbob$SvgBob$Types$OpenCurve = {$: 'OpenCurve'};
var $andre_dietrich$elm_svgbob$SvgBob$Types$South_ = function (a) {
	return {$: 'South_', a: a};
};
var $andre_dietrich$elm_svgbob$SvgBob$Types$West_ = function (a) {
	return {$: 'West_', a: a};
};
var $andre_dietrich$elm_svgbob$SvgBob$Grid$corner = F2(
	function (_char, matrix) {
		return A2(
			$andre_dietrich$elm_svgbob$SvgBob$Grid$sequenceWithDefault,
			_char,
			A2(
				$andre_dietrich$elm_svgbob$SvgBob$Grid$apply,
				matrix,
				_List_fromArray(
					[
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.west) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.east);
						},
						A2(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
							$andre_dietrich$elm_svgbob$SvgBob$Types$West,
							$andre_dietrich$elm_svgbob$SvgBob$Types$East_(2))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.north) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.south);
						},
						A2(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
							$andre_dietrich$elm_svgbob$SvgBob$Types$North,
							$andre_dietrich$elm_svgbob$SvgBob$Types$South_(2))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner, m.north_east) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner, m.south_west);
						},
						A2(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
							$andre_dietrich$elm_svgbob$SvgBob$Types$Center,
							A2(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
								$andre_dietrich$elm_svgbob$SvgBob$Types$North,
								$andre_dietrich$elm_svgbob$SvgBob$Types$East_(2)))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.north_east) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.south_west);
						},
						A2(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$East),
							A3($andre_dietrich$elm_svgbob$SvgBob$Types$Ext_, 2, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.north_west) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.south_east);
						},
						A2(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$West),
							A3($andre_dietrich$elm_svgbob$SvgBob$Types$Ext_, 2, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East))),
						_Utils_Tuple2(
						function (m) {
							return (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.north) || (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner, m.north) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Intersection, m.north))) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.west);
						},
						$andre_dietrich$elm_svgbob$SvgBob$Types$Sequence(
							_List_fromArray(
								[
									A3(
									$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
									1,
									$andre_dietrich$elm_svgbob$SvgBob$Types$West,
									A2(
										$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
										$andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5),
										$andre_dietrich$elm_svgbob$SvgBob$Types$East)),
									A2(
									$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
									$andre_dietrich$elm_svgbob$SvgBob$Types$North,
									$andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5))
								]))),
						_Utils_Tuple2(
						function (m) {
							return (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.north) || (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner, m.north) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Intersection, m.north))) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.east);
						},
						$andre_dietrich$elm_svgbob$SvgBob$Types$Sequence(
							_List_fromArray(
								[
									A3(
									$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
									1,
									$andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5),
									A2(
										$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
										$andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5),
										$andre_dietrich$elm_svgbob$SvgBob$Types$East)),
									A2(
									$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
									$andre_dietrich$elm_svgbob$SvgBob$Types$North,
									$andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5))
								]))),
						_Utils_Tuple2(
						function (m) {
							return (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.south) || (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner, m.south) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Intersection, m.south))) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.west);
						},
						$andre_dietrich$elm_svgbob$SvgBob$Types$Sequence(
							_List_fromArray(
								[
									A3(
									$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
									1,
									$andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5),
									A2(
										$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
										$andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5),
										$andre_dietrich$elm_svgbob$SvgBob$Types$West)),
									A2(
									$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
									$andre_dietrich$elm_svgbob$SvgBob$Types$South,
									$andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5))
								]))),
						_Utils_Tuple2(
						function (m) {
							return (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.north) || (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner, m.north) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Intersection, m.north))) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontal, m.west);
						},
						$andre_dietrich$elm_svgbob$SvgBob$Types$Sequence(
							_List_fromArray(
								[
									A3(
									$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
									1,
									A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West),
									A2(
										$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
										$andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5),
										$andre_dietrich$elm_svgbob$SvgBob$Types$East)),
									A2(
									$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
									$andre_dietrich$elm_svgbob$SvgBob$Types$North,
									$andre_dietrich$elm_svgbob$SvgBob$Types$South_(1.5))
								]))),
						_Utils_Tuple2(
						function (m) {
							return (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.south) || (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner, m.south) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Intersection, m.south))) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontal, m.west);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							1,
							$andre_dietrich$elm_svgbob$SvgBob$Types$South_(1.5),
							A2(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
								$andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5),
								$andre_dietrich$elm_svgbob$SvgBob$Types$West))),
						_Utils_Tuple2(
						function (m) {
							return (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.south) || (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner, m.south) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Intersection, m.south))) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontal, m.east);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							1,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East),
							A2(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
								$andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5),
								$andre_dietrich$elm_svgbob$SvgBob$Types$West))),
						_Utils_Tuple2(
						function (m) {
							return (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.north) || (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner, m.north) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Intersection, m.north))) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontal, m.east);
						},
						$andre_dietrich$elm_svgbob$SvgBob$Types$Sequence(
							_List_fromArray(
								[
									A3(
									$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
									1,
									$andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5),
									A2(
										$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
										$andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5),
										$andre_dietrich$elm_svgbob$SvgBob$Types$East)),
									A2(
									$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
									$andre_dietrich$elm_svgbob$SvgBob$Types$North,
									$andre_dietrich$elm_svgbob$SvgBob$Types$South_(1.5))
								]))),
						_Utils_Tuple2(
						function (m) {
							return (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.south) || (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner, m.south) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Intersection, m.south))) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.east);
						},
						$andre_dietrich$elm_svgbob$SvgBob$Types$Sequence(
							_List_fromArray(
								[
									A3(
									$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
									1,
									$andre_dietrich$elm_svgbob$SvgBob$Types$East,
									A2(
										$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
										$andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5),
										$andre_dietrich$elm_svgbob$SvgBob$Types$West)),
									A2(
									$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
									$andre_dietrich$elm_svgbob$SvgBob$Types$South,
									$andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5))
								]))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.south_east) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.west);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							3,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East),
							A3(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext_,
								2,
								$andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5),
								$andre_dietrich$elm_svgbob$SvgBob$Types$West))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.north_east) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.west);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							3,
							$andre_dietrich$elm_svgbob$SvgBob$Types$West,
							A2(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
								$andre_dietrich$elm_svgbob$SvgBob$Types$North,
								$andre_dietrich$elm_svgbob$SvgBob$Types$East_(2)))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.north_west) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.east);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							3,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$West),
							A2(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
								$andre_dietrich$elm_svgbob$SvgBob$Types$South,
								$andre_dietrich$elm_svgbob$SvgBob$Types$East_(2)))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.north_west) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.east);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							3,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$West),
							A2(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
								$andre_dietrich$elm_svgbob$SvgBob$Types$South,
								$andre_dietrich$elm_svgbob$SvgBob$Types$East_(20)))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.south_west) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.east);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							3,
							$andre_dietrich$elm_svgbob$SvgBob$Types$East,
							A2(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
								$andre_dietrich$elm_svgbob$SvgBob$Types$South,
								$andre_dietrich$elm_svgbob$SvgBob$Types$West_(2)))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.north) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.south_west);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							8,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West),
							A3(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext_,
								2,
								$andre_dietrich$elm_svgbob$SvgBob$Types$North,
								$andre_dietrich$elm_svgbob$SvgBob$Types$East_(0.5)))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.north) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.south_east);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							8,
							$andre_dietrich$elm_svgbob$SvgBob$Types$North,
							A3(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext_,
								2,
								$andre_dietrich$elm_svgbob$SvgBob$Types$South,
								$andre_dietrich$elm_svgbob$SvgBob$Types$East_(0.5)))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.south) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.north_east);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							8,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$East),
							A3(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext_,
								2,
								$andre_dietrich$elm_svgbob$SvgBob$Types$South,
								$andre_dietrich$elm_svgbob$SvgBob$Types$West_(0.5)))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.south) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.north_west);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							8,
							$andre_dietrich$elm_svgbob$SvgBob$Types$South,
							A3(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext_,
								2,
								$andre_dietrich$elm_svgbob$SvgBob$Types$North,
								$andre_dietrich$elm_svgbob$SvgBob$Types$West_(0.5)))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.east) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.north_east);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							2,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$East),
							$andre_dietrich$elm_svgbob$SvgBob$Types$South)),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.west) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.north_west);
						},
						A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 2, $andre_dietrich$elm_svgbob$SvgBob$Types$West, $andre_dietrich$elm_svgbob$SvgBob$Types$North)),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.west) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.south_west);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							2,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West),
							$andre_dietrich$elm_svgbob$SvgBob$Types$North)),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.east) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.south_east);
						},
						A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 2, $andre_dietrich$elm_svgbob$SvgBob$Types$East, $andre_dietrich$elm_svgbob$SvgBob$Types$South)),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontal, m.east) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.north_east);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							4,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$East),
							$andre_dietrich$elm_svgbob$SvgBob$Types$South_(2))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontal, m.west) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.north_west);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							4,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West),
							$andre_dietrich$elm_svgbob$SvgBob$Types$North_(2))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.west) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$CloseCurve, m.south_east);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							4,
							A2(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
								$andre_dietrich$elm_svgbob$SvgBob$Types$South,
								$andre_dietrich$elm_svgbob$SvgBob$Types$East_(2)),
							A2(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
								$andre_dietrich$elm_svgbob$SvgBob$Types$North,
								$andre_dietrich$elm_svgbob$SvgBob$Types$West_(3)))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$OpenCurve, m.south_west);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							4,
							$andre_dietrich$elm_svgbob$SvgBob$Types$East,
							A2(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
								$andre_dietrich$elm_svgbob$SvgBob$Types$South,
								$andre_dietrich$elm_svgbob$SvgBob$Types$West_(3)))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$CloseCurve, m.south_east);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							4,
							A2(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
								$andre_dietrich$elm_svgbob$SvgBob$Types$South,
								$andre_dietrich$elm_svgbob$SvgBob$Types$East_(2)),
							A2(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
								$andre_dietrich$elm_svgbob$SvgBob$Types$North,
								$andre_dietrich$elm_svgbob$SvgBob$Types$West_(3)))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$OpenCurve, m.north_west);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							4,
							A2(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
								$andre_dietrich$elm_svgbob$SvgBob$Types$North,
								$andre_dietrich$elm_svgbob$SvgBob$Types$West_(2)),
							A2(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
								$andre_dietrich$elm_svgbob$SvgBob$Types$South,
								$andre_dietrich$elm_svgbob$SvgBob$Types$East_(3)))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$CloseCurve, m.north_east);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							4,
							$andre_dietrich$elm_svgbob$SvgBob$Types$West,
							A2(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
								$andre_dietrich$elm_svgbob$SvgBob$Types$North,
								$andre_dietrich$elm_svgbob$SvgBob$Types$East_(3)))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.north) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.north_east);
						},
						$andre_dietrich$elm_svgbob$SvgBob$Types$Sequence(
							_List_fromArray(
								[
									A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$Center, $andre_dietrich$elm_svgbob$SvgBob$Types$North),
									A2(
									$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
									$andre_dietrich$elm_svgbob$SvgBob$Types$Center,
									A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$East))
								]))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.north) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.north_west);
						},
						$andre_dietrich$elm_svgbob$SvgBob$Types$Sequence(
							_List_fromArray(
								[
									A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$Center, $andre_dietrich$elm_svgbob$SvgBob$Types$North),
									A2(
									$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
									$andre_dietrich$elm_svgbob$SvgBob$Types$Center,
									A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$West))
								]))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.north_east) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.north_west);
						},
						$andre_dietrich$elm_svgbob$SvgBob$Types$Sequence(
							_List_fromArray(
								[
									A2(
									$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
									$andre_dietrich$elm_svgbob$SvgBob$Types$Center,
									A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$East)),
									A2(
									$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
									$andre_dietrich$elm_svgbob$SvgBob$Types$Center,
									A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$West))
								])))
					])));
	});
var $andre_dietrich$elm_svgbob$SvgBob$Model$dim = function (lines) {
	return _Utils_Tuple2(
		$elm$core$List$length(lines),
		A2(
			$elm$core$Maybe$withDefault,
			0,
			$elm$core$List$maximum(
				A2($elm$core$List$map, $elm$core$String$length, lines))));
};
var $andre_dietrich$elm_svgbob$SvgBob$Grid$horizontal = F2(
	function (_char, matrix) {
		return A2(
			$andre_dietrich$elm_svgbob$SvgBob$Grid$sequenceWithDefault,
			_char,
			A2(
				$andre_dietrich$elm_svgbob$SvgBob$Grid$apply,
				matrix,
				_List_fromArray(
					[
						_Utils_Tuple2(
						function (m) {
							return (!_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$AlphaNumeric, m.west)) || (!_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$AlphaNumeric, m.east));
						},
						A2(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
							$andre_dietrich$elm_svgbob$SvgBob$Types$East,
							$andre_dietrich$elm_svgbob$SvgBob$Types$West_(2)))
					])));
	});
var $andre_dietrich$elm_svgbob$SvgBob$Grid$lowHorizontal = F2(
	function (_char, matrix) {
		return A2(
			$andre_dietrich$elm_svgbob$SvgBob$Grid$sequenceWithDefault,
			_char,
			A2(
				$andre_dietrich$elm_svgbob$SvgBob$Grid$apply,
				matrix,
				_List_fromArray(
					[
						_Utils_Tuple2(
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.west;
							},
							$elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight)),
						A2(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East),
							$andre_dietrich$elm_svgbob$SvgBob$Types$West_(4))),
						_Utils_Tuple2(
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.west;
							},
							$elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical)),
						A2(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East),
							$andre_dietrich$elm_svgbob$SvgBob$Types$West_(3))),
						_Utils_Tuple2(
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.east;
							},
							$elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft)),
						A2(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West),
							$andre_dietrich$elm_svgbob$SvgBob$Types$East_(4))),
						_Utils_Tuple2(
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.east;
							},
							$elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft)),
						A2(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West),
							$andre_dietrich$elm_svgbob$SvgBob$Types$East_(4))),
						_Utils_Tuple2(
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.east;
							},
							$elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical)),
						A2(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West),
							$andre_dietrich$elm_svgbob$SvgBob$Types$East_(3))),
						_Utils_Tuple2(
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.south_west;
							},
							$elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical)),
						A2(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
							A2(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
								$andre_dietrich$elm_svgbob$SvgBob$Types$South,
								$andre_dietrich$elm_svgbob$SvgBob$Types$West_(2)),
							$andre_dietrich$elm_svgbob$SvgBob$Types$East_(3))),
						_Utils_Tuple2(
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.south_east;
							},
							$elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical)),
						A2(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West),
							$andre_dietrich$elm_svgbob$SvgBob$Types$East_(3))),
						_Utils_Tuple2(
						function (m) {
							return (!_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$AlphaNumeric, m.west)) && (!_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$AlphaNumeric, m.east));
						},
						A2(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East),
							$andre_dietrich$elm_svgbob$SvgBob$Types$West_(2))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$OpenCurve, m.south_west);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							1,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West),
							A3(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext_,
								0.15,
								$andre_dietrich$elm_svgbob$SvgBob$Types$South,
								$andre_dietrich$elm_svgbob$SvgBob$Types$West_(4)))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$OpenCurve, m.west);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							1,
							A2(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
								$andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.75),
								$andre_dietrich$elm_svgbob$SvgBob$Types$West_(1.6)),
							A3(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext_,
								0.2,
								$andre_dietrich$elm_svgbob$SvgBob$Types$South,
								$andre_dietrich$elm_svgbob$SvgBob$Types$East_(4)))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$CloseCurve, m.south_east);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							1,
							A2(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
								$andre_dietrich$elm_svgbob$SvgBob$Types$South_(1.15),
								$andre_dietrich$elm_svgbob$SvgBob$Types$East_(1.7)),
							A3(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext_,
								0.15,
								$andre_dietrich$elm_svgbob$SvgBob$Types$North,
								$andre_dietrich$elm_svgbob$SvgBob$Types$West_(4)))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$CloseCurve, m.east);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							1,
							A2(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
								$andre_dietrich$elm_svgbob$SvgBob$Types$South,
								$andre_dietrich$elm_svgbob$SvgBob$Types$East_(1)),
							A3(
								$andre_dietrich$elm_svgbob$SvgBob$Types$Ext_,
								0.2,
								$andre_dietrich$elm_svgbob$SvgBob$Types$North_(2),
								$andre_dietrich$elm_svgbob$SvgBob$Types$East_(4))))
					])));
	});
var $andre_dietrich$elm_svgbob$SvgBob$Grid$openCurve = F2(
	function (_char, matrix) {
		return A2(
			$andre_dietrich$elm_svgbob$SvgBob$Grid$sequenceWithDefault,
			_char,
			A2(
				$andre_dietrich$elm_svgbob$SvgBob$Grid$apply,
				matrix,
				_List_fromArray(
					[
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner, m.north_east) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner, m.south_east);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							4,
							$andre_dietrich$elm_svgbob$SvgBob$Types$North,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$South))),
						_Utils_Tuple2(
						function (m) {
							return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.north_east) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.south_east);
						},
						A3(
							$andre_dietrich$elm_svgbob$SvgBob$Types$Curve,
							4,
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$East),
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$South)))
					])));
	});
var $andre_dietrich$elm_svgbob$SvgBob$Grid$getElement = F2(
	function (m, _v0) {
		var _char = _v0.a;
		var elem = _v0.b;
		switch (elem.$) {
			case 'Vertical':
				return ((!_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$AlphaNumeric, m.west)) || (!_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$AlphaNumeric, m.east))) ? A2(
					$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
					$andre_dietrich$elm_svgbob$SvgBob$Types$South,
					A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$North)) : $andre_dietrich$elm_svgbob$SvgBob$Types$Text(_char);
			case 'Horizontal':
				return A2($andre_dietrich$elm_svgbob$SvgBob$Grid$horizontal, _char, m);
			case 'LowHorizontal':
				return A2($andre_dietrich$elm_svgbob$SvgBob$Grid$lowHorizontal, _char, m);
			case 'Intersection':
				return A2($andre_dietrich$elm_svgbob$SvgBob$Grid$intersection, _char, m);
			case 'Arrow':
				switch (elem.a.$) {
					case 'South':
						var _v2 = elem.a;
						return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.north) ? $andre_dietrich$elm_svgbob$SvgBob$Types$Triangle($andre_dietrich$elm_svgbob$SvgBob$Types$North) : (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.north_east) ? $andre_dietrich$elm_svgbob$SvgBob$Types$Triangle(
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$East)) : (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.north_west) ? $andre_dietrich$elm_svgbob$SvgBob$Types$Triangle(
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$West)) : $andre_dietrich$elm_svgbob$SvgBob$Types$Text(_char)));
					case 'North':
						var _v3 = elem.a;
						return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.south) ? $andre_dietrich$elm_svgbob$SvgBob$Types$Triangle($andre_dietrich$elm_svgbob$SvgBob$Types$South) : (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.south_west) ? $andre_dietrich$elm_svgbob$SvgBob$Types$Triangle(
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West)) : (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.south_east) ? $andre_dietrich$elm_svgbob$SvgBob$Types$Triangle(
							A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East)) : $andre_dietrich$elm_svgbob$SvgBob$Types$Text(_char)));
					default:
						var dir = elem.a;
						return $andre_dietrich$elm_svgbob$SvgBob$Types$Triangle(dir);
				}
			case 'Corner':
				return A2($andre_dietrich$elm_svgbob$SvgBob$Grid$corner, _char, m);
			case 'SlantRight':
				return A2(
					$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
					A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$East),
					A3($andre_dietrich$elm_svgbob$SvgBob$Types$Ext_, 2, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West));
			case 'SlantLeft':
				return A2(
					$andre_dietrich$elm_svgbob$SvgBob$Types$Line,
					A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East),
					A3($andre_dietrich$elm_svgbob$SvgBob$Types$Ext_, 2, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$West));
			case 'OpenCurve':
				return A2($andre_dietrich$elm_svgbob$SvgBob$Grid$openCurve, _char, m);
			case 'CloseCurve':
				return A2($andre_dietrich$elm_svgbob$SvgBob$Grid$closeCurve, _char, m);
			case 'Square':
				var _v4 = A2($andre_dietrich$elm_svgbob$SvgBob$Grid$intersection, _char, m);
				if (_v4.$ === 'Sequence') {
					var list = _v4.a;
					return $andre_dietrich$elm_svgbob$SvgBob$Types$Sequence(
						A2($elm$core$List$cons, $andre_dietrich$elm_svgbob$SvgBob$Types$Box, list));
				} else {
					return $andre_dietrich$elm_svgbob$SvgBob$Types$Text(_char);
				}
			case 'O':
				var filled = elem.a;
				return A3($andre_dietrich$elm_svgbob$SvgBob$Grid$circle, filled, _char, m);
			case 'Verbatim':
				var str = elem.a;
				return A2(
					$andre_dietrich$elm_svgbob$SvgBob$Types$ForeignObject,
					str,
					$andre_dietrich$elm_svgbob$SvgBob$Model$dim(
						$elm$core$String$lines(str)));
			default:
				return $andre_dietrich$elm_svgbob$SvgBob$Types$Text(_char);
		}
	});
var $andre_dietrich$elm_svgbob$SvgBob$Types$None = {$: 'None'};
var $andre_dietrich$elm_svgbob$SvgBob$Grid$get = F2(
	function (pos, dict) {
		return A2(
			$elm$core$Maybe$withDefault,
			$andre_dietrich$elm_svgbob$SvgBob$Types$None,
			A2(
				$elm$core$Maybe$map,
				$elm$core$Tuple$second,
				A2($elm$core$Dict$get, pos, dict)));
	});
var $andre_dietrich$elm_svgbob$SvgBob$Grid$getMatrix = F3(
	function (x, y, dict) {
		return {
			east: A2(
				$andre_dietrich$elm_svgbob$SvgBob$Grid$get,
				_Utils_Tuple2(x + 1, y),
				dict),
			north: A2(
				$andre_dietrich$elm_svgbob$SvgBob$Grid$get,
				_Utils_Tuple2(x, y - 1),
				dict),
			north_east: A2(
				$andre_dietrich$elm_svgbob$SvgBob$Grid$get,
				_Utils_Tuple2(x + 1, y - 1),
				dict),
			north_west: A2(
				$andre_dietrich$elm_svgbob$SvgBob$Grid$get,
				_Utils_Tuple2(x - 1, y - 1),
				dict),
			south: A2(
				$andre_dietrich$elm_svgbob$SvgBob$Grid$get,
				_Utils_Tuple2(x, y + 1),
				dict),
			south_east: A2(
				$andre_dietrich$elm_svgbob$SvgBob$Grid$get,
				_Utils_Tuple2(x + 1, y + 1),
				dict),
			south_west: A2(
				$andre_dietrich$elm_svgbob$SvgBob$Grid$get,
				_Utils_Tuple2(x - 1, y + 1),
				dict),
			west: A2(
				$andre_dietrich$elm_svgbob$SvgBob$Grid$get,
				_Utils_Tuple2(x - 1, y),
				dict)
		};
	});
var $andre_dietrich$elm_svgbob$SvgBob$Types$Verbatim = function (a) {
	return {$: 'Verbatim', a: a};
};
var $andre_dietrich$elm_svgbob$SvgBob$Types$mergeVerbatim = F2(
	function (scan, scan2) {
		var _v0 = _Utils_Tuple2(scan, scan2);
		if ((_v0.a.$ === 'Verbatim') && (_v0.b.$ === 'Verbatim')) {
			var str = _v0.a.a;
			var str2 = _v0.b.a;
			return $andre_dietrich$elm_svgbob$SvgBob$Types$Verbatim(str + ('\n' + str2));
		} else {
			return scan;
		}
	});
var $andre_dietrich$elm_svgbob$SvgBob$Grid$merge = F2(
	function (combined, verbs) {
		merge:
		while (true) {
			var _v0 = _Utils_Tuple2(
				$elm$core$List$head(verbs),
				$elm$core$List$tail(verbs));
			if (_v0.a.$ === 'Nothing') {
				var _v1 = _v0.a;
				return combined;
			} else {
				if (_v0.b.$ === 'Nothing') {
					var _v2 = _v0.b;
					return combined;
				} else {
					var head = _v0.a.a;
					var tail = _v0.b.a;
					var _v3 = A3(
						$elm$core$List$foldl,
						F2(
							function (_v4, _v5) {
								var pos = _v4.a;
								var x = pos.a;
								var y = pos.b;
								var scan = _v4.b;
								var c = scan.a;
								var s = scan.b;
								var currentY = _v5.a;
								var v = _v5.b;
								var _v6 = v.a;
								var v_x = _v6.a;
								var v_y = _v6.b;
								var _v7 = v.b;
								var v_s = _v7.b;
								var rest = _v5.c;
								return (_Utils_eq(x, v_x) && _Utils_eq(currentY + 1, y)) ? _Utils_Tuple3(
									currentY + 1,
									_Utils_Tuple2(
										_Utils_Tuple2(v_x, v_y),
										_Utils_Tuple2(
											c,
											A2($andre_dietrich$elm_svgbob$SvgBob$Types$mergeVerbatim, v_s, s))),
									rest) : _Utils_Tuple3(
									currentY,
									v,
									A2(
										$elm$core$List$cons,
										_Utils_Tuple2(pos, scan),
										rest));
							}),
						_Utils_Tuple3(head.a.b, head, _List_Nil),
						tail);
					var verb = _v3.b;
					var newTail = _v3.c;
					var $temp$combined = A2($elm$core$List$cons, verb, combined),
						$temp$verbs = $elm$core$List$reverse(newTail);
					combined = $temp$combined;
					verbs = $temp$verbs;
					continue merge;
				}
			}
		}
	});
var $elm$core$String$append = _String_append;
var $andre_dietrich$elm_svgbob$SvgBob$Grid$appendToVerbatim = function (str) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$String$fromChar,
		A2(
			$elm$core$Basics$composeR,
			$elm$core$String$append(str),
			A2(
				$elm$core$Basics$composeR,
				$andre_dietrich$elm_svgbob$SvgBob$Types$Verbatim,
				$elm$core$Tuple$pair(
					_Utils_chr(' ')))));
};
var $elm$core$String$dropRight = F2(
	function (n, string) {
		return (n < 1) ? string : A3($elm$core$String$slice, 0, -n, string);
	});
var $andre_dietrich$elm_svgbob$SvgBob$Types$Arrow = function (a) {
	return {$: 'Arrow', a: a};
};
var $andre_dietrich$elm_svgbob$SvgBob$Types$O = function (a) {
	return {$: 'O', a: a};
};
var $andre_dietrich$elm_svgbob$SvgBob$Types$Square = {$: 'Square'};
var $andre_dietrich$elm_svgbob$SvgBob$Grid$getScan = function (_char) {
	switch (_char.valueOf()) {
		case ' ':
			return $elm$core$Maybe$Nothing;
		case '-':
			return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal);
		case '_':
			return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontal);
		case '+':
			return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$Intersection);
		case '.':
			return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$Corner);
		case '\'':
			return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$Corner);
		case ',':
			return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$Corner);
		case '`':
			return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$Corner);
		case '´':
			return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$Corner);
		case '>':
			return $elm$core$Maybe$Just(
				$andre_dietrich$elm_svgbob$SvgBob$Types$Arrow($andre_dietrich$elm_svgbob$SvgBob$Types$West));
		case '<':
			return $elm$core$Maybe$Just(
				$andre_dietrich$elm_svgbob$SvgBob$Types$Arrow($andre_dietrich$elm_svgbob$SvgBob$Types$East));
		case 'V':
			return $elm$core$Maybe$Just(
				$andre_dietrich$elm_svgbob$SvgBob$Types$Arrow($andre_dietrich$elm_svgbob$SvgBob$Types$South));
		case 'v':
			return $elm$core$Maybe$Just(
				$andre_dietrich$elm_svgbob$SvgBob$Types$Arrow($andre_dietrich$elm_svgbob$SvgBob$Types$South));
		case '^':
			return $elm$core$Maybe$Just(
				$andre_dietrich$elm_svgbob$SvgBob$Types$Arrow($andre_dietrich$elm_svgbob$SvgBob$Types$North));
		case 'A':
			return $elm$core$Maybe$Just(
				$andre_dietrich$elm_svgbob$SvgBob$Types$Arrow($andre_dietrich$elm_svgbob$SvgBob$Types$North));
		case '/':
			return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight);
		case '\\':
			return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft);
		case '(':
			return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$OpenCurve);
		case ')':
			return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$CloseCurve);
		case '|':
			return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical);
		case '#':
			return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$Square);
		case 'O':
			return $elm$core$Maybe$Just(
				$andre_dietrich$elm_svgbob$SvgBob$Types$O(false));
		case 'o':
			return $elm$core$Maybe$Just(
				$andre_dietrich$elm_svgbob$SvgBob$Types$O(false));
		case '*':
			return $elm$core$Maybe$Just(
				$andre_dietrich$elm_svgbob$SvgBob$Types$O(true));
		default:
			return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$AlphaNumeric);
	}
};
var $andre_dietrich$elm_svgbob$SvgBob$Grid$scanElement = F5(
	function (verbatim, withVerbatim, y, _char, scan) {
		return function (s) {
			return _Utils_update(
				s,
				{
					lastChars: A2(
						$elm$core$List$cons,
						_Utils_eq(_char, verbatim),
						s.lastChars),
					x: s.x + 1
				});
		}(
			function () {
				if (_Utils_eq(_char, verbatim)) {
					var _v0 = _Utils_Tuple2(scan.verbatimCounter, scan.lastChars);
					_v0$4:
					while (true) {
						switch (_v0.a) {
							case 0:
								return _Utils_update(
									scan,
									{verbatimCounter: 1});
							case 1:
								if (_v0.b.b) {
									if (!_v0.b.a) {
										var _v1 = _v0.b;
										return _Utils_update(
											scan,
											{verbatimCounter: 0});
									} else {
										var _v2 = _v0.b;
										return _Utils_update(
											scan,
											{verbatimCounter: 2});
									}
								} else {
									break _v0$4;
								}
							case 2:
								if (_v0.b.b && _v0.b.a) {
									var _v3 = _v0.b;
									return _Utils_update(
										scan,
										{
											result: function () {
												var _v4 = _Utils_Tuple2(withVerbatim, scan.result);
												if ((_v4.a && _v4.b.b) && (_v4.b.a.b.b.$ === 'Verbatim')) {
													var _v5 = _v4.b;
													var _v6 = _v5.a;
													var pos = _v6.a;
													var _v7 = _v6.b;
													var str = _v7.b.a;
													var xs = _v5.b;
													return A2(
														$elm$core$List$cons,
														_Utils_Tuple2(
															pos,
															_Utils_Tuple2(
																_Utils_chr(' '),
																$andre_dietrich$elm_svgbob$SvgBob$Types$Verbatim(
																	A2($elm$core$String$dropRight, 1, str) + '  '))),
														xs);
												} else {
													var result = _v4.b;
													return A2(
														$elm$core$Maybe$withDefault,
														_List_Nil,
														$elm$core$List$tail(result));
												}
											}(),
											verbatimCounter: 0
										});
								} else {
									break _v0$4;
								}
							default:
								break _v0$4;
						}
					}
					return _Utils_update(
						scan,
						{
							result: function () {
								var _v8 = _Utils_Tuple2(withVerbatim, scan.result);
								if (!_v8.a) {
									return A2(
										$elm$core$List$cons,
										_Utils_Tuple2(
											_Utils_Tuple2(scan.x, y),
											_Utils_Tuple2(_char, $andre_dietrich$elm_svgbob$SvgBob$Types$AlphaNumeric)),
										scan.result);
								} else {
									if (_v8.b.b && (_v8.b.a.b.b.$ === 'Verbatim')) {
										var _v9 = _v8.b;
										var _v10 = _v9.a;
										var pos = _v10.a;
										var _v11 = _v10.b;
										var str = _v11.b.a;
										var xs = _v9.b;
										return A2(
											$elm$core$List$cons,
											_Utils_Tuple2(
												pos,
												A2($andre_dietrich$elm_svgbob$SvgBob$Grid$appendToVerbatim, str, _char)),
											xs);
									} else {
										return A2(
											$elm$core$List$cons,
											_Utils_Tuple2(
												_Utils_Tuple2(scan.x, y),
												A2($andre_dietrich$elm_svgbob$SvgBob$Grid$appendToVerbatim, '', _char)),
											scan.result);
									}
								}
							}()
						});
				} else {
					if (scan.verbatimCounter > 0) {
						return _Utils_update(
							scan,
							{
								result: function () {
									var _v12 = _Utils_Tuple2(withVerbatim, scan.result);
									if (!_v12.a) {
										return A2(
											$elm$core$List$cons,
											_Utils_Tuple2(
												_Utils_Tuple2(scan.x, y),
												_Utils_Tuple2(_char, $andre_dietrich$elm_svgbob$SvgBob$Types$AlphaNumeric)),
											scan.result);
									} else {
										if (_v12.b.b && (_v12.b.a.b.b.$ === 'Verbatim')) {
											var _v13 = _v12.b;
											var _v14 = _v13.a;
											var pos = _v14.a;
											var _v15 = _v14.b;
											var str = _v15.b.a;
											var xs = _v13.b;
											return A2(
												$elm$core$List$cons,
												_Utils_Tuple2(
													pos,
													A2($andre_dietrich$elm_svgbob$SvgBob$Grid$appendToVerbatim, str, _char)),
												xs);
										} else {
											return A2(
												$elm$core$List$cons,
												_Utils_Tuple2(
													_Utils_Tuple2((scan.x + 1) - scan.verbatimCounter, y),
													A2($andre_dietrich$elm_svgbob$SvgBob$Grid$appendToVerbatim, '', _char)),
												scan.result);
										}
									}
								}()
							});
					} else {
						var _v16 = $andre_dietrich$elm_svgbob$SvgBob$Grid$getScan(_char);
						if (_v16.$ === 'Nothing') {
							return scan;
						} else {
							var elem = _v16.a;
							return _Utils_update(
								scan,
								{
									result: A2(
										$elm$core$List$cons,
										_Utils_Tuple2(
											_Utils_Tuple2(scan.x, y),
											_Utils_Tuple2(_char, elem)),
										scan.result)
								});
						}
					}
				}
			}());
	});
var $elm$core$String$trimRight = _String_trimRight;
var $andre_dietrich$elm_svgbob$SvgBob$Grid$scanLine = F3(
	function (verbatim, withVerbatim, y) {
		return A2(
			$elm$core$Basics$composeR,
			$elm$core$String$trimRight,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$String$toList,
				A2(
					$elm$core$Basics$composeR,
					A2(
						$elm$core$List$foldl,
						A3($andre_dietrich$elm_svgbob$SvgBob$Grid$scanElement, verbatim, withVerbatim, y),
						{lastChars: _List_Nil, result: _List_Nil, verbatimCounter: 0, x: 0}),
					function ($) {
						return $.result;
					})));
	});
var $andre_dietrich$elm_svgbob$SvgBob$Grid$getScans = F2(
	function (withVerbatim, model) {
		var scanFn = A2($andre_dietrich$elm_svgbob$SvgBob$Grid$scanLine, model.settings.verbatim, withVerbatim);
		var elements = $elm$core$List$concat(
			A2($elm$core$List$indexedMap, scanFn, model.lines));
		if (model.settings.multilineVerbatim) {
			var _v0 = A3(
				$elm$core$List$foldl,
				F2(
					function (_v1, _v3) {
						var pos = _v1.a;
						var _v2 = _v1.b;
						var _char = _v2.a;
						var scan = _v2.b;
						var v = _v3.a;
						var s = _v3.b;
						if (scan.$ === 'Verbatim') {
							return _Utils_Tuple2(
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2(
										pos,
										_Utils_Tuple2(_char, scan)),
									v),
								s);
						} else {
							return _Utils_Tuple2(
								v,
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2(
										pos,
										_Utils_Tuple2(_char, scan)),
									s));
						}
					}),
				_Utils_Tuple2(_List_Nil, _List_Nil),
				elements);
			var verbs = _v0.a;
			var scans = _v0.b;
			return A2(
				$elm$core$List$append,
				scans,
				$elm$core$List$reverse(
					A2(
						$andre_dietrich$elm_svgbob$SvgBob$Grid$merge,
						_List_Nil,
						A2(
							$elm$core$List$sortBy,
							A2($elm$core$Basics$composeR, $elm$core$Tuple$first, $elm$core$Tuple$second),
							verbs))));
		} else {
			return elements;
		}
	});
var $andre_dietrich$elm_svgbob$SvgBob$Model$init = F2(
	function (settings, str) {
		var lines = $elm$core$String$lines(str);
		var _v0 = $andre_dietrich$elm_svgbob$SvgBob$Model$dim(lines);
		var rows = _v0.a;
		var columns = _v0.b;
		return {columns: columns, lines: lines, rows: rows, settings: settings};
	});
var $andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth = 8.0;
var $andre_dietrich$elm_svgbob$SvgBob$Grid$measureX = function (x) {
	return x * $andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
};
var $andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight = 16.0;
var $andre_dietrich$elm_svgbob$SvgBob$Grid$measureY = function (y) {
	return y * $andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
};
var $andre_dietrich$elm_svgbob$SvgBob$Grid$getElements = F2(
	function (settings, code) {
		var model = A2($andre_dietrich$elm_svgbob$SvgBob$Model$init, settings, code);
		var intermediate = A2($andre_dietrich$elm_svgbob$SvgBob$Grid$getScans, true, model);
		var dict = $elm$core$Dict$fromList(intermediate);
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, container) {
					var _v1 = _v0.a;
					var x = _v1.a;
					var y = _v1.b;
					var _v2 = _v0.b;
					var _char = _v2.a;
					var element = _v2.b;
					var point = A2(
						$andre_dietrich$elm_svgbob$SvgBob$Types$Point,
						$andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + ($andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2),
						$andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ($andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2));
					var _v3 = A2(
						$andre_dietrich$elm_svgbob$SvgBob$Grid$getElement,
						A3($andre_dietrich$elm_svgbob$SvgBob$Grid$getMatrix, x, y, dict),
						_Utils_Tuple2(_char, element));
					if (_v3.$ === 'ForeignObject') {
						var str = _v3.a;
						var dim = _v3.b;
						return _Utils_update(
							container,
							{
								foreign: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(
										str,
										_Utils_Tuple2(point, dim)),
									container.foreign)
							});
					} else {
						var e = _v3;
						return _Utils_update(
							container,
							{
								svg: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(point, e),
									container.svg)
							});
					}
				}),
			{columns: model.columns, foreign: _List_Nil, rows: model.rows, settings: settings, svg: _List_Nil},
			intermediate);
	});
var $andre_dietrich$elm_svgbob$SvgBob$getElements = $andre_dietrich$elm_svgbob$SvgBob$Grid$getElements;
var $author$project$Lia$Markdown$Types$HLine = function (a) {
	return {$: 'HLine', a: a};
};
var $author$project$Lia$Markdown$Parser$md_annotations = function () {
	var attr = A2(
		$andre_dietrich$parser_combinators$Combine$andThen,
		$author$project$Lia$Markdown$HTML$Attributes$parse,
		$andre_dietrich$parser_combinators$Combine$withState(
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.defines;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.base;
					},
					$andre_dietrich$parser_combinators$Combine$succeed))));
	return A2(
		$andre_dietrich$parser_combinators$Combine$optional,
		_List_Nil,
		A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			$andre_dietrich$parser_combinators$Combine$maybe(
				A2(
					$andre_dietrich$parser_combinators$Combine$ignore,
					$author$project$Lia$Parser$Indentation$check,
					$andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\n'))),
			A2(
				$andre_dietrich$parser_combinators$Combine$keep,
				$author$project$Lia$Markdown$Inline$Parser$comment(attr),
				A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Macro$Parser$macro, $author$project$Lia$Parser$Helper$spaces))));
}();
var $author$project$Lia$Markdown$Parser$horizontal_line = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$author$project$Lia$Markdown$Types$HLine,
	A2(
		$andre_dietrich$parser_combinators$Combine$ignore,
		$andre_dietrich$parser_combinators$Combine$regex('-{3,}'),
		$author$project$Lia$Markdown$Parser$md_annotations));
var $author$project$Lia$Parser$Helper$newlines = $andre_dietrich$parser_combinators$Combine$regex('\\n*');
var $author$project$Lia$Markdown$Effect$Parser$multi = function (blocks) {
	return A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		A2(
			$andre_dietrich$parser_combinators$Combine$manyTill,
			A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$newlines, blocks),
			$andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\*{3,}')),
		A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			$andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\*{3,}\\n+'),
			$author$project$Lia$Parser$Indentation$check));
};
var $author$project$Lia$Markdown$Effect$Parser$single = $andre_dietrich$parser_combinators$Combine$map($elm$core$List$singleton);
var $author$project$Lia$Markdown$Effect$Parser$markdown = function (blocks) {
	return A2(
		$andre_dietrich$parser_combinators$Combine$andMap,
		$author$project$Lia$Markdown$Effect$Parser$effect_id,
		A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			$author$project$Lia$Markdown$Effect$Parser$reset_effect_number,
			A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				A2(
					$andre_dietrich$parser_combinators$Combine$or,
					$author$project$Lia$Markdown$Effect$Parser$multi(blocks),
					$author$project$Lia$Markdown$Effect$Parser$single(blocks)),
				A2(
					$andre_dietrich$parser_combinators$Combine$ignore,
					A2(
						$andre_dietrich$parser_combinators$Combine$or,
						$andre_dietrich$parser_combinators$Combine$skip(
							$andre_dietrich$parser_combinators$Combine$string('\n')),
						$author$project$Lia$Parser$Indentation$skip),
					A2(
						$andre_dietrich$parser_combinators$Combine$ignore,
						$andre_dietrich$parser_combinators$Combine$regex('}}[\t ]*'),
						A2(
							$andre_dietrich$parser_combinators$Combine$map,
							F3(
								function (e, b, c) {
									return _Utils_update(
										e,
										{content: b, id: c});
								}),
							A2(
								$andre_dietrich$parser_combinators$Combine$keep,
								$author$project$Lia$Markdown$Effect$Parser$definition,
								$andre_dietrich$parser_combinators$Combine$regex('[\t ]*{{'))))))));
};
var $author$project$Lia$Parser$Helper$newline = $andre_dietrich$parser_combinators$Combine$string('\n');
var $author$project$Lia$Markdown$Parser$newlineWithIndentation = A2(
	$andre_dietrich$parser_combinators$Combine$ignore,
	$andre_dietrich$parser_combinators$Combine$string('\n'),
	$andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check));
var $author$project$Lia$Markdown$Parser$paragraph = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	A2(
		$elm$core$Basics$composeR,
		$elm$core$List$intersperse(
			_List_fromArray(
				[
					A2($author$project$Lia$Markdown$Inline$Types$Chars, ' ', _List_Nil)
				])),
		A2($elm$core$Basics$composeR, $elm$core$List$concat, $author$project$Lia$Markdown$Inline$Parser$combine)),
	A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		$andre_dietrich$parser_combinators$Combine$many1(
			A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$author$project$Lia$Parser$Helper$newline,
				A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Inline$Parser$line, $author$project$Lia$Parser$Indentation$check))),
		$author$project$Lia$Parser$Indentation$skip));
var $author$project$Lia$Markdown$Chart$Types$Chart = F5(
	function (title, yLabel, xLabel, legend, diagrams) {
		return {diagrams: diagrams, legend: legend, title: title, xLabel: xLabel, yLabel: yLabel};
	});
var $author$project$Lia$Markdown$Chart$Types$Dots = F2(
	function (a, b) {
		return {$: 'Dots', a: a, b: b};
	});
var $author$project$Lia$Markdown$Chart$Types$Lines = F2(
	function (a, b) {
		return {$: 'Lines', a: a, b: b};
	});
var $author$project$Lia$Markdown$Chart$Types$Point = F2(
	function (x, y) {
		return {x: x, y: y};
	});
var $author$project$Lia$Markdown$Chart$Parser$magicMerge = F2(
	function (left, right) {
		return A6(
			$elm$core$Dict$merge,
			$elm$core$Dict$insert,
			F4(
				function (key, l, r, dict) {
					return A3(
						$elm$core$Dict$insert,
						key,
						_Utils_ap(l, r),
						dict);
				}),
			$elm$core$Dict$insert,
			left,
			right,
			$elm$core$Dict$empty);
	});
var $andre_dietrich$parser_combinators$Combine$Num$float = A2(
	$andre_dietrich$parser_combinators$Combine$onerror,
	'expected a float',
	A2(
		$andre_dietrich$parser_combinators$Combine$andThen,
		$andre_dietrich$parser_combinators$Combine$Num$unwrap,
		A2(
			$andre_dietrich$parser_combinators$Combine$map,
			$elm$core$String$toFloat,
			$andre_dietrich$parser_combinators$Combine$regex('-?(?:0|[1-9]\\d*)\\.\\d+'))));
var $author$project$Lia$Markdown$Chart$Parser$number = A2(
	$andre_dietrich$parser_combinators$Combine$or,
	$andre_dietrich$parser_combinators$Combine$Num$float,
	A2(
		$andre_dietrich$parser_combinators$Combine$map,
		$elm$core$Basics$toFloat,
		A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			A2(
				$andre_dietrich$parser_combinators$Combine$optional,
				'.',
				$andre_dietrich$parser_combinators$Combine$string('.')),
			$andre_dietrich$parser_combinators$Combine$Num$int)));
var $elm$core$Set$remove = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A2($elm$core$Dict$remove, key, dict));
	});
var $author$project$Lia$Markdown$Chart$Parser$row = function () {
	var indexes = F3(
		function (y_label, str, label) {
			return _Utils_Tuple2(
				_Utils_Tuple2(
					function (w) {
						return (w === '') ? ' ' : w;
					}(
						$elm$core$String$trim(y_label)),
					label),
				$elm$core$Dict$fromList(
					A2(
						$elm$core$List$map,
						function (c) {
							return _Utils_Tuple2(
								c,
								A2(
									$elm$core$String$indexes,
									$elm$core$String$fromChar(c),
									str));
						},
						$elm$core$Set$toList(
							A2(
								$elm$core$Set$remove,
								_Utils_chr(' '),
								$elm$core$Set$fromList(
									$elm$core$String$toList(str)))))));
		});
	return A2(
		$andre_dietrich$parser_combinators$Combine$ignore,
		$andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\n'),
		A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			$andre_dietrich$parser_combinators$Combine$maybe(
				A2(
					$andre_dietrich$parser_combinators$Combine$ignore,
					$andre_dietrich$parser_combinators$Combine$string(')'),
					A2(
						$andre_dietrich$parser_combinators$Combine$andMap,
						$andre_dietrich$parser_combinators$Combine$regex('[^)]+'),
						A2(
							$andre_dietrich$parser_combinators$Combine$map,
							$elm$core$Tuple$pair,
							A2(
								$andre_dietrich$parser_combinators$Combine$keep,
								$andre_dietrich$parser_combinators$Combine$regex('[A-Za-z\\+\\*#]?'),
								A2(
									$andre_dietrich$parser_combinators$Combine$ignore,
									$andre_dietrich$parser_combinators$Combine$whitespace,
									$andre_dietrich$parser_combinators$Combine$string('('))))))),
			A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				$andre_dietrich$parser_combinators$Combine$regex('[ \\*a-zA-Z\\+#]*'),
				A2(
					$andre_dietrich$parser_combinators$Combine$map,
					indexes,
					A2(
						$andre_dietrich$parser_combinators$Combine$ignore,
						$andre_dietrich$parser_combinators$Combine$string('|'),
						$andre_dietrich$parser_combinators$Combine$regex('[^\n|]*'))))));
}();
var $author$project$Lia$Markdown$Chart$Parser$segmentation = F3(
	function (elements, i0, i1) {
		return _Utils_Tuple2(i0, (i1 - i0) / elements);
	});
var $author$project$Lia$Markdown$Chart$Parser$unique = F2(
	function (start, list) {
		unique:
		while (true) {
			var _v0 = _Utils_Tuple2(list, start);
			if (_v0.a.b) {
				if (_v0.b.$ === 'Nothing') {
					var _v1 = _v0.a;
					var x = _v1.a;
					var xs = _v1.b;
					var _v2 = _v0.b;
					var $temp$start = $elm$core$Maybe$Just(x),
						$temp$list = xs;
					start = $temp$start;
					list = $temp$list;
					continue unique;
				} else {
					var _v3 = _v0.a;
					var x = _v3.a;
					var xs = _v3.b;
					var s = _v0.b.a;
					if (_Utils_eq(x, s)) {
						return false;
					} else {
						var $temp$start = $elm$core$Maybe$Just(x),
							$temp$list = xs;
						start = $temp$start;
						list = $temp$list;
						continue unique;
					}
				}
			} else {
				return true;
			}
		}
	});
var $elm$core$List$unzip = function (pairs) {
	var step = F2(
		function (_v0, _v1) {
			var x = _v0.a;
			var y = _v0.b;
			var xs = _v1.a;
			var ys = _v1.b;
			return _Utils_Tuple2(
				A2($elm$core$List$cons, x, xs),
				A2($elm$core$List$cons, y, ys));
		});
	return A3(
		$elm$core$List$foldr,
		step,
		_Utils_Tuple2(_List_Nil, _List_Nil),
		pairs);
};
var $author$project$Lia$Markdown$Chart$Parser$x_axis = A2(
	$andre_dietrich$parser_combinators$Combine$andMap,
	A2(
		$andre_dietrich$parser_combinators$Combine$optional,
		1.0,
		A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			$andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\n'),
			A2(
				$andre_dietrich$parser_combinators$Combine$keep,
				$author$project$Lia$Markdown$Chart$Parser$number,
				$andre_dietrich$parser_combinators$Combine$regex('[\t ]*')))),
	A2(
		$andre_dietrich$parser_combinators$Combine$andMap,
		A2(
			$andre_dietrich$parser_combinators$Combine$optional,
			'',
			$andre_dietrich$parser_combinators$Combine$regex('[a-zA-Z_ .\\\\()\\-]+')),
		A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			A2($andre_dietrich$parser_combinators$Combine$optional, 0.0, $author$project$Lia$Markdown$Chart$Parser$number),
			A2(
				$andre_dietrich$parser_combinators$Combine$map,
				F4(
					function (e, x0, x_label, x1) {
						return _Utils_Tuple2(
							$elm$core$String$trim(x_label),
							A3(
								$author$project$Lia$Markdown$Chart$Parser$segmentation,
								$elm$core$String$length(e),
								x0,
								x1));
					}),
				A2(
					$andre_dietrich$parser_combinators$Combine$ignore,
					$andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\n[\t ]*'),
					A2(
						$andre_dietrich$parser_combinators$Combine$keep,
						$andre_dietrich$parser_combinators$Combine$regex('\\-+'),
						$andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\+')))))));
var $author$project$Lia$Markdown$Chart$Parser$parse = function () {
	var chart = F5(
		function (title, y_max, rows, y_min, _v6) {
			var x_label = _v6.a;
			var _v7 = _v6.b;
			var x0 = _v7.a;
			var x_segment = _v7.b;
			var _v0 = A3(
				$author$project$Lia$Markdown$Chart$Parser$segmentation,
				$elm$core$List$length(rows),
				y_min,
				y_max);
			var y0 = _v0.a;
			var y_segment = _v0.b;
			var _v1 = $elm$core$List$unzip(rows);
			var label = _v1.a;
			var data = _v1.b;
			var _v2 = $elm$core$List$unzip(label);
			var y_label = _v2.a;
			var data_labels = _v2.b;
			var labels = $elm$core$Dict$fromList(
				A2($elm$core$List$filterMap, $elm$core$Basics$identity, data_labels));
			return A5(
				$author$project$Lia$Markdown$Chart$Types$Chart,
				title,
				$elm$core$String$trim(
					$elm$core$String$concat(y_label)),
				x_label,
				$elm$core$Dict$values(labels),
				A2(
					$elm$core$Dict$map,
					F2(
						function (k, v) {
							return A2(
								$author$project$Lia$Markdown$Chart$Parser$unique,
								$elm$core$Maybe$Nothing,
								A2(
									$elm$core$List$map,
									function ($) {
										return $.x;
									},
									v)) ? A2(
								$author$project$Lia$Markdown$Chart$Types$Lines,
								v,
								A2(
									$elm$core$Dict$get,
									$elm$core$String$fromChar(k),
									labels)) : A2(
								$author$project$Lia$Markdown$Chart$Types$Dots,
								v,
								A2(
									$elm$core$Dict$get,
									$elm$core$String$fromChar(k),
									labels));
						}),
					A2(
						$elm$core$Dict$map,
						F2(
							function (_v5, v) {
								return A2(
									$elm$core$List$sortBy,
									function ($) {
										return $.x;
									},
									v);
							}),
						A3(
							$elm$core$List$foldr,
							$author$project$Lia$Markdown$Chart$Parser$magicMerge,
							$elm$core$Dict$empty,
							A2(
								$elm$core$List$map,
								function (_v3) {
									var y = _v3.a;
									var l = _v3.b;
									return A2(
										$elm$core$Dict$map,
										F2(
											function (_v4, xs) {
												return A2(
													$elm$core$List$map,
													function (x) {
														return A2($author$project$Lia$Markdown$Chart$Types$Point, (x * x_segment) + x0, (y * y_segment) + y0);
													},
													xs);
											}),
										l);
								},
								A2(
									$elm$core$List$indexedMap,
									$elm$core$Tuple$pair,
									$elm$core$List$reverse(data)))))));
		});
	return A2(
		$andre_dietrich$parser_combinators$Combine$andMap,
		$author$project$Lia$Markdown$Chart$Parser$x_axis,
		A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			A2(
				$andre_dietrich$parser_combinators$Combine$optional,
				0.0,
				A2(
					$andre_dietrich$parser_combinators$Combine$keep,
					$author$project$Lia$Markdown$Chart$Parser$number,
					$andre_dietrich$parser_combinators$Combine$regex('[\t ]*'))),
			A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				$andre_dietrich$parser_combinators$Combine$many1($author$project$Lia$Markdown$Chart$Parser$row),
				A2(
					$andre_dietrich$parser_combinators$Combine$andMap,
					A2(
						$andre_dietrich$parser_combinators$Combine$optional,
						1.0,
						A2(
							$andre_dietrich$parser_combinators$Combine$keep,
							$author$project$Lia$Markdown$Chart$Parser$number,
							$andre_dietrich$parser_combinators$Combine$regex('[\t ]*'))),
					A2(
						$andre_dietrich$parser_combinators$Combine$map,
						A2($elm$core$Basics$composeR, $elm$core$String$trim, chart),
						A2(
							$andre_dietrich$parser_combinators$Combine$optional,
							'',
							$andre_dietrich$parser_combinators$Combine$regex('[\t ]*[^\n\\|`]*\n')))))));
}();
var $author$project$Lia$Markdown$Inline$Parser$javascript = A2(
	$andre_dietrich$parser_combinators$Combine$keep,
	$author$project$Lia$Markdown$Inline$Parser$scriptBody,
	A3($andre_dietrich$parser_combinators$Combine$regexWith, true, false, '<script>'));
var $author$project$Lia$Markdown$Code$Types$Snippet = F4(
	function (attr, lang, name, code) {
		return {attr: attr, code: code, lang: lang, name: name};
	});
var $author$project$Lia$Markdown$Code$Parser$code_body = F2(
	function (_char, len) {
		var control_frame = _char + ('{' + ($elm$core$String$fromInt(len) + '}'));
		return A2(
			$andre_dietrich$parser_combinators$Combine$map,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$String$concat,
				$elm$core$String$dropRight(1)),
			A2(
				$andre_dietrich$parser_combinators$Combine$manyTill,
				A2(
					$andre_dietrich$parser_combinators$Combine$keep,
					$andre_dietrich$parser_combinators$Combine$regex('(?:.(?!' + (control_frame + '))*\\n')),
					$andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check)),
				A2(
					$andre_dietrich$parser_combinators$Combine$keep,
					A2(
						$andre_dietrich$parser_combinators$Combine$ignore,
						$author$project$Lia$Parser$Helper$spaces,
						$andre_dietrich$parser_combinators$Combine$regex(control_frame)),
					$author$project$Lia$Parser$Indentation$check)));
	});
var $author$project$Lia$Markdown$Code$Parser$header = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$elm$core$String$toLower,
	A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		$andre_dietrich$parser_combinators$Combine$regex('\\w*'),
		$author$project$Lia$Parser$Helper$spaces));
var $author$project$Lia$Markdown$Code$Parser$title = A2(
	$andre_dietrich$parser_combinators$Combine$ignore,
	$author$project$Lia$Parser$Helper$newline,
	A2(
		$andre_dietrich$parser_combinators$Combine$andMap,
		$andre_dietrich$parser_combinators$Combine$regex('.*'),
		A2(
			$andre_dietrich$parser_combinators$Combine$map,
			$elm$core$Tuple$pair,
			A2(
				$andre_dietrich$parser_combinators$Combine$optional,
				true,
				A2(
					$andre_dietrich$parser_combinators$Combine$keep,
					$andre_dietrich$parser_combinators$Combine$choice(
						_List_fromArray(
							[
								A2(
								$andre_dietrich$parser_combinators$Combine$onsuccess,
								true,
								$andre_dietrich$parser_combinators$Combine$string('+')),
								A2(
								$andre_dietrich$parser_combinators$Combine$onsuccess,
								false,
								$andre_dietrich$parser_combinators$Combine$string('-'))
							])),
					$author$project$Lia$Parser$Helper$spaces)))));
var $author$project$Lia$Markdown$Code$Parser$listing = function (attr) {
	var body = function (len) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			A2(
				$andre_dietrich$parser_combinators$Combine$or,
				A2($author$project$Lia$Markdown$Code$Parser$code_body, '`', len),
				A2($author$project$Lia$Markdown$Code$Parser$code_body, '~', len)),
			A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				$author$project$Lia$Markdown$Code$Parser$title,
				A2(
					$andre_dietrich$parser_combinators$Combine$map,
					F3(
						function (h, _v0, c) {
							var v = _v0.a;
							var t = _v0.b;
							return _Utils_Tuple2(
								A4(
									$author$project$Lia$Markdown$Code$Types$Snippet,
									attr,
									h,
									$elm$core$String$trim(t),
									c),
								v);
						}),
					$author$project$Lia$Markdown$Code$Parser$header)));
	};
	return A2($andre_dietrich$parser_combinators$Combine$andThen, body, $author$project$Lia$Parser$Helper$c_frame);
};
var $author$project$Lia$Markdown$Code$Types$Highlight = function (a) {
	return {$: 'Highlight', a: a};
};
var $author$project$Port$Eval$Eval = F3(
	function (ok, result, details) {
		return {details: details, ok: ok, result: result};
	});
var $author$project$Lia$Markdown$Code$Types$Evaluate = function (a) {
	return {$: 'Evaluate', a: a};
};
var $author$project$Lia$Markdown$Code$Log$Error = {$: 'Error'};
var $author$project$Lia$Markdown$Code$Log$Info = {$: 'Info'};
var $author$project$Lia$Markdown$Code$Log$Message = F2(
	function (level, text) {
		return {level: level, text: text};
	});
var $author$project$Lia$Markdown$Code$Log$crop = function (messages) {
	return ($elm$core$Array$length(messages) < 250) ? messages : A3($elm$core$Array$slice, 1, 250, messages);
};
var $author$project$Lia$Markdown$Code$Log$add = F3(
	function (level, str, log) {
		return _Utils_update(
			log,
			{
				messages: $author$project$Lia$Markdown$Code$Log$crop(
					A2(
						$elm$core$Array$push,
						A2($author$project$Lia$Markdown$Code$Log$Message, level, str),
						log.messages))
			});
	});
var $author$project$Lia$Markdown$Code$Log$add_Eval = F2(
	function (_eval, log) {
		return (_eval.ok ? A2($author$project$Lia$Markdown$Code$Log$add, $author$project$Lia$Markdown$Code$Log$Info, _eval.result) : A2($author$project$Lia$Markdown$Code$Log$add, $author$project$Lia$Markdown$Code$Log$Error, _eval.result))(
			_Utils_update(
				log,
				{details: _eval.details, ok: _eval.ok}));
	});
var $author$project$Lia$Markdown$Code$Log$Debug = {$: 'Debug'};
var $author$project$Lia$Markdown$Code$Log$Log = F4(
	function (ok, level, messages, details) {
		return {details: details, level: level, messages: messages, ok: ok};
	});
var $author$project$Lia$Markdown$Code$Log$empty = A4($author$project$Lia$Markdown$Code$Log$Log, true, $author$project$Lia$Markdown$Code$Log$Debug, $elm$core$Array$empty, _List_Nil);
var $elm$core$Array$repeat = F2(
	function (n, e) {
		return A2(
			$elm$core$Array$initialize,
			n,
			function (_v0) {
				return e;
			});
	});
var $truqu$elm_md5$MD5$emptyWords = A2($elm$core$Array$repeat, 16, 0);
var $truqu$elm_md5$MD5$addUnsigned = F2(
	function (x, y) {
		return 4294967295 & (x + y);
	});
var $elm$core$Bitwise$or = _Bitwise_or;
var $truqu$elm_md5$MD5$rotateLeft = F2(
	function (bits, input) {
		return (input << bits) | (input >>> (32 - bits));
	});
var $truqu$elm_md5$MD5$cmn = F8(
	function (fun, a, b, c, d, x, s, ac) {
		return A2(
			$truqu$elm_md5$MD5$addUnsigned,
			b,
			A2(
				$truqu$elm_md5$MD5$rotateLeft,
				s,
				A2(
					$truqu$elm_md5$MD5$addUnsigned,
					a,
					A2(
						$truqu$elm_md5$MD5$addUnsigned,
						ac,
						A2(
							$truqu$elm_md5$MD5$addUnsigned,
							A3(fun, b, c, d),
							x)))));
	});
var $elm$core$Bitwise$xor = _Bitwise_xor;
var $truqu$elm_md5$MD5$f = F3(
	function (x, y, z) {
		return z ^ (x & (y ^ z));
	});
var $truqu$elm_md5$MD5$ff = F7(
	function (a, b, c, d, x, s, ac) {
		return A8($truqu$elm_md5$MD5$cmn, $truqu$elm_md5$MD5$f, a, b, c, d, x, s, ac);
	});
var $truqu$elm_md5$MD5$g = F3(
	function (x, y, z) {
		return y ^ (z & (x ^ y));
	});
var $truqu$elm_md5$MD5$gg = F7(
	function (a, b, c, d, x, s, ac) {
		return A8($truqu$elm_md5$MD5$cmn, $truqu$elm_md5$MD5$g, a, b, c, d, x, s, ac);
	});
var $truqu$elm_md5$MD5$h = F3(
	function (x, y, z) {
		return z ^ (x ^ y);
	});
var $truqu$elm_md5$MD5$hh = F7(
	function (a, b, c, d, x, s, ac) {
		return A8($truqu$elm_md5$MD5$cmn, $truqu$elm_md5$MD5$h, a, b, c, d, x, s, ac);
	});
var $elm$core$Bitwise$complement = _Bitwise_complement;
var $truqu$elm_md5$MD5$i = F3(
	function (x, y, z) {
		return y ^ (x | (~z));
	});
var $truqu$elm_md5$MD5$ii = F7(
	function (a, b, c, d, x, s, ac) {
		return A8($truqu$elm_md5$MD5$cmn, $truqu$elm_md5$MD5$i, a, b, c, d, x, s, ac);
	});
var $truqu$elm_md5$MD5$hex_ = F2(
	function (xs, acc) {
		var a = acc.a;
		var b = acc.b;
		var c = acc.c;
		var d = acc.d;
		if ((((((((((((((((xs.b && xs.b.b) && xs.b.b.b) && xs.b.b.b.b) && xs.b.b.b.b.b) && xs.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && (!xs.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b)) {
			var x0 = xs.a;
			var _v1 = xs.b;
			var x1 = _v1.a;
			var _v2 = _v1.b;
			var x2 = _v2.a;
			var _v3 = _v2.b;
			var x3 = _v3.a;
			var _v4 = _v3.b;
			var x4 = _v4.a;
			var _v5 = _v4.b;
			var x5 = _v5.a;
			var _v6 = _v5.b;
			var x6 = _v6.a;
			var _v7 = _v6.b;
			var x7 = _v7.a;
			var _v8 = _v7.b;
			var x8 = _v8.a;
			var _v9 = _v8.b;
			var x9 = _v9.a;
			var _v10 = _v9.b;
			var x10 = _v10.a;
			var _v11 = _v10.b;
			var x11 = _v11.a;
			var _v12 = _v11.b;
			var x12 = _v12.a;
			var _v13 = _v12.b;
			var x13 = _v13.a;
			var _v14 = _v13.b;
			var x14 = _v14.a;
			var _v15 = _v14.b;
			var x15 = _v15.a;
			var s44 = 21;
			var s43 = 15;
			var s42 = 10;
			var s41 = 6;
			var s34 = 23;
			var s33 = 16;
			var s32 = 11;
			var s31 = 4;
			var s24 = 20;
			var s23 = 14;
			var s22 = 9;
			var s21 = 5;
			var s14 = 22;
			var s13 = 17;
			var s12 = 12;
			var s11 = 7;
			var d00 = d;
			var c00 = c;
			var b00 = b;
			var a00 = a;
			var a01 = A7($truqu$elm_md5$MD5$ff, a00, b00, c00, d00, x0, s11, 3614090360);
			var d01 = A7($truqu$elm_md5$MD5$ff, d00, a01, b00, c00, x1, s12, 3905402710);
			var c01 = A7($truqu$elm_md5$MD5$ff, c00, d01, a01, b00, x2, s13, 606105819);
			var b01 = A7($truqu$elm_md5$MD5$ff, b00, c01, d01, a01, x3, s14, 3250441966);
			var a02 = A7($truqu$elm_md5$MD5$ff, a01, b01, c01, d01, x4, s11, 4118548399);
			var d02 = A7($truqu$elm_md5$MD5$ff, d01, a02, b01, c01, x5, s12, 1200080426);
			var c02 = A7($truqu$elm_md5$MD5$ff, c01, d02, a02, b01, x6, s13, 2821735955);
			var b02 = A7($truqu$elm_md5$MD5$ff, b01, c02, d02, a02, x7, s14, 4249261313);
			var a03 = A7($truqu$elm_md5$MD5$ff, a02, b02, c02, d02, x8, s11, 1770035416);
			var d03 = A7($truqu$elm_md5$MD5$ff, d02, a03, b02, c02, x9, s12, 2336552879);
			var c03 = A7($truqu$elm_md5$MD5$ff, c02, d03, a03, b02, x10, s13, 4294925233);
			var b03 = A7($truqu$elm_md5$MD5$ff, b02, c03, d03, a03, x11, s14, 2304563134);
			var a04 = A7($truqu$elm_md5$MD5$ff, a03, b03, c03, d03, x12, s11, 1804603682);
			var d04 = A7($truqu$elm_md5$MD5$ff, d03, a04, b03, c03, x13, s12, 4254626195);
			var c04 = A7($truqu$elm_md5$MD5$ff, c03, d04, a04, b03, x14, s13, 2792965006);
			var b04 = A7($truqu$elm_md5$MD5$ff, b03, c04, d04, a04, x15, s14, 1236535329);
			var a05 = A7($truqu$elm_md5$MD5$gg, a04, b04, c04, d04, x1, s21, 4129170786);
			var d05 = A7($truqu$elm_md5$MD5$gg, d04, a05, b04, c04, x6, s22, 3225465664);
			var c05 = A7($truqu$elm_md5$MD5$gg, c04, d05, a05, b04, x11, s23, 643717713);
			var b05 = A7($truqu$elm_md5$MD5$gg, b04, c05, d05, a05, x0, s24, 3921069994);
			var a06 = A7($truqu$elm_md5$MD5$gg, a05, b05, c05, d05, x5, s21, 3593408605);
			var d06 = A7($truqu$elm_md5$MD5$gg, d05, a06, b05, c05, x10, s22, 38016083);
			var c06 = A7($truqu$elm_md5$MD5$gg, c05, d06, a06, b05, x15, s23, 3634488961);
			var b06 = A7($truqu$elm_md5$MD5$gg, b05, c06, d06, a06, x4, s24, 3889429448);
			var a07 = A7($truqu$elm_md5$MD5$gg, a06, b06, c06, d06, x9, s21, 568446438);
			var d07 = A7($truqu$elm_md5$MD5$gg, d06, a07, b06, c06, x14, s22, 3275163606);
			var c07 = A7($truqu$elm_md5$MD5$gg, c06, d07, a07, b06, x3, s23, 4107603335);
			var b07 = A7($truqu$elm_md5$MD5$gg, b06, c07, d07, a07, x8, s24, 1163531501);
			var a08 = A7($truqu$elm_md5$MD5$gg, a07, b07, c07, d07, x13, s21, 2850285829);
			var d08 = A7($truqu$elm_md5$MD5$gg, d07, a08, b07, c07, x2, s22, 4243563512);
			var c08 = A7($truqu$elm_md5$MD5$gg, c07, d08, a08, b07, x7, s23, 1735328473);
			var b08 = A7($truqu$elm_md5$MD5$gg, b07, c08, d08, a08, x12, s24, 2368359562);
			var a09 = A7($truqu$elm_md5$MD5$hh, a08, b08, c08, d08, x5, s31, 4294588738);
			var d09 = A7($truqu$elm_md5$MD5$hh, d08, a09, b08, c08, x8, s32, 2272392833);
			var c09 = A7($truqu$elm_md5$MD5$hh, c08, d09, a09, b08, x11, s33, 1839030562);
			var b09 = A7($truqu$elm_md5$MD5$hh, b08, c09, d09, a09, x14, s34, 4259657740);
			var a10 = A7($truqu$elm_md5$MD5$hh, a09, b09, c09, d09, x1, s31, 2763975236);
			var d10 = A7($truqu$elm_md5$MD5$hh, d09, a10, b09, c09, x4, s32, 1272893353);
			var c10 = A7($truqu$elm_md5$MD5$hh, c09, d10, a10, b09, x7, s33, 4139469664);
			var b10 = A7($truqu$elm_md5$MD5$hh, b09, c10, d10, a10, x10, s34, 3200236656);
			var a11 = A7($truqu$elm_md5$MD5$hh, a10, b10, c10, d10, x13, s31, 681279174);
			var d11 = A7($truqu$elm_md5$MD5$hh, d10, a11, b10, c10, x0, s32, 3936430074);
			var c11 = A7($truqu$elm_md5$MD5$hh, c10, d11, a11, b10, x3, s33, 3572445317);
			var b11 = A7($truqu$elm_md5$MD5$hh, b10, c11, d11, a11, x6, s34, 76029189);
			var a12 = A7($truqu$elm_md5$MD5$hh, a11, b11, c11, d11, x9, s31, 3654602809);
			var d12 = A7($truqu$elm_md5$MD5$hh, d11, a12, b11, c11, x12, s32, 3873151461);
			var c12 = A7($truqu$elm_md5$MD5$hh, c11, d12, a12, b11, x15, s33, 530742520);
			var b12 = A7($truqu$elm_md5$MD5$hh, b11, c12, d12, a12, x2, s34, 3299628645);
			var a13 = A7($truqu$elm_md5$MD5$ii, a12, b12, c12, d12, x0, s41, 4096336452);
			var d13 = A7($truqu$elm_md5$MD5$ii, d12, a13, b12, c12, x7, s42, 1126891415);
			var c13 = A7($truqu$elm_md5$MD5$ii, c12, d13, a13, b12, x14, s43, 2878612391);
			var b13 = A7($truqu$elm_md5$MD5$ii, b12, c13, d13, a13, x5, s44, 4237533241);
			var a14 = A7($truqu$elm_md5$MD5$ii, a13, b13, c13, d13, x12, s41, 1700485571);
			var d14 = A7($truqu$elm_md5$MD5$ii, d13, a14, b13, c13, x3, s42, 2399980690);
			var c14 = A7($truqu$elm_md5$MD5$ii, c13, d14, a14, b13, x10, s43, 4293915773);
			var b14 = A7($truqu$elm_md5$MD5$ii, b13, c14, d14, a14, x1, s44, 2240044497);
			var a15 = A7($truqu$elm_md5$MD5$ii, a14, b14, c14, d14, x8, s41, 1873313359);
			var d15 = A7($truqu$elm_md5$MD5$ii, d14, a15, b14, c14, x15, s42, 4264355552);
			var c15 = A7($truqu$elm_md5$MD5$ii, c14, d15, a15, b14, x6, s43, 2734768916);
			var b15 = A7($truqu$elm_md5$MD5$ii, b14, c15, d15, a15, x13, s44, 1309151649);
			var a16 = A7($truqu$elm_md5$MD5$ii, a15, b15, c15, d15, x4, s41, 4149444226);
			var d16 = A7($truqu$elm_md5$MD5$ii, d15, a16, b15, c15, x11, s42, 3174756917);
			var c16 = A7($truqu$elm_md5$MD5$ii, c15, d16, a16, b15, x2, s43, 718787259);
			var b16 = A7($truqu$elm_md5$MD5$ii, b15, c16, d16, a16, x9, s44, 3951481745);
			var b17 = A2($truqu$elm_md5$MD5$addUnsigned, b00, b16);
			var c17 = A2($truqu$elm_md5$MD5$addUnsigned, c00, c16);
			var d17 = A2($truqu$elm_md5$MD5$addUnsigned, d00, d16);
			var a17 = A2($truqu$elm_md5$MD5$addUnsigned, a00, a16);
			return {a: a17, b: b17, c: c17, d: d17};
		} else {
			return acc;
		}
	});
var $truqu$elm_md5$MD5$iget = F2(
	function (index, array) {
		return A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Array$get, index, array));
	});
var $elm$core$Array$setHelp = F4(
	function (shift, index, value, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
		if (_v0.$ === 'SubTree') {
			var subTree = _v0.a;
			var newSub = A4($elm$core$Array$setHelp, shift - $elm$core$Array$shiftStep, index, value, subTree);
			return A3(
				$elm$core$Elm$JsArray$unsafeSet,
				pos,
				$elm$core$Array$SubTree(newSub),
				tree);
		} else {
			var values = _v0.a;
			var newLeaf = A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, values);
			return A3(
				$elm$core$Elm$JsArray$unsafeSet,
				pos,
				$elm$core$Array$Leaf(newLeaf),
				tree);
		}
	});
var $elm$core$Array$set = F3(
	function (index, value, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? array : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			tree,
			A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, tail)) : A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			A4($elm$core$Array$setHelp, startShift, index, value, tree),
			tail));
	});
var $truqu$elm_md5$MD5$consume = F2(
	function (_char, _v0) {
		var hashState = _v0.a;
		var _v1 = _v0.b;
		var byteCount = _v1.a;
		var words = _v1.b;
		var totalByteCount = _v0.c;
		var wordCount = (byteCount / 4) | 0;
		var oldWord = A2($truqu$elm_md5$MD5$iget, wordCount, words);
		var bytePosition = 8 * (byteCount % 4);
		var code = _char << bytePosition;
		var newWord = oldWord | code;
		var newWords = A3($elm$core$Array$set, wordCount, newWord, words);
		return (byteCount === 63) ? _Utils_Tuple3(
			A2(
				$truqu$elm_md5$MD5$hex_,
				$elm$core$Array$toList(newWords),
				hashState),
			_Utils_Tuple2(0, $truqu$elm_md5$MD5$emptyWords),
			totalByteCount + 1) : _Utils_Tuple3(
			hashState,
			_Utils_Tuple2(byteCount + 1, newWords),
			totalByteCount + 1);
	});
var $truqu$elm_md5$MD5$finishUp = function (_v0) {
	var hashState = _v0.a;
	var _v1 = _v0.b;
	var byteCount = _v1.a;
	var words = _v1.b;
	var totalByteCount = _v0.c;
	var wordCount = (byteCount / 4) | 0;
	var oldWord = A2($truqu$elm_md5$MD5$iget, wordCount, words);
	var bytePosition = 8 * (byteCount % 4);
	var code = 128 << bytePosition;
	var newWord = oldWord | code;
	var newWords = A3($elm$core$Array$set, wordCount, newWord, words);
	return (wordCount < 14) ? function (x) {
		return A2($truqu$elm_md5$MD5$hex_, x, hashState);
	}(
		$elm$core$Array$toList(
			A3(
				$elm$core$Array$set,
				15,
				totalByteCount >>> 29,
				A3($elm$core$Array$set, 14, totalByteCount << 3, newWords)))) : function (x) {
		return A2(
			$truqu$elm_md5$MD5$hex_,
			x,
			A2(
				$truqu$elm_md5$MD5$hex_,
				$elm$core$Array$toList(newWords),
				hashState));
	}(
		$elm$core$Array$toList(
			A3(
				$elm$core$Array$set,
				15,
				totalByteCount >>> 29,
				A3($elm$core$Array$set, 14, totalByteCount << 3, $truqu$elm_md5$MD5$emptyWords))));
};
var $elm$core$String$foldl = _String_foldl;
var $zwilias$elm_utf_tools$String$UTF8$utf32ToUtf8 = F3(
	function (add, _char, acc) {
		return (_char < 128) ? A2(add, _char, acc) : ((_char < 2048) ? A2(
			add,
			128 | (63 & _char),
			A2(add, 192 | (_char >>> 6), acc)) : ((_char < 65536) ? A2(
			add,
			128 | (63 & _char),
			A2(
				add,
				128 | (63 & (_char >>> 6)),
				A2(add, 224 | (_char >>> 12), acc))) : A2(
			add,
			128 | (63 & _char),
			A2(
				add,
				128 | (63 & (_char >>> 6)),
				A2(
					add,
					128 | (63 & (_char >>> 12)),
					A2(add, 240 | (_char >>> 18), acc))))));
	});
var $zwilias$elm_utf_tools$String$UTF8$foldl = F3(
	function (op, initialAcc, input) {
		return A3(
			$elm$core$String$foldl,
			F2(
				function (_char, acc) {
					return A3(
						$zwilias$elm_utf_tools$String$UTF8$utf32ToUtf8,
						op,
						$elm$core$Char$toCode(_char),
						acc);
				}),
			initialAcc,
			input);
	});
var $truqu$elm_md5$MD5$State = F4(
	function (a, b, c, d) {
		return {a: a, b: b, c: c, d: d};
	});
var $truqu$elm_md5$MD5$initialHashState = A4($truqu$elm_md5$MD5$State, 1732584193, 4023233417, 2562383102, 271733878);
var $truqu$elm_md5$MD5$hash = function (input) {
	return $truqu$elm_md5$MD5$finishUp(
		A3(
			$zwilias$elm_utf_tools$String$UTF8$foldl,
			$truqu$elm_md5$MD5$consume,
			_Utils_Tuple3(
				$truqu$elm_md5$MD5$initialHashState,
				_Utils_Tuple2(0, $truqu$elm_md5$MD5$emptyWords),
				0),
			input));
};
var $truqu$elm_md5$MD5$bytes = function (string) {
	var _v0 = $truqu$elm_md5$MD5$hash(string);
	var a = _v0.a;
	var b = _v0.b;
	var c = _v0.c;
	var d = _v0.d;
	return _List_fromArray(
		[a & 255, (a >>> 8) & 255, (a >>> 16) & 255, (a >>> 24) & 255, b & 255, (b >>> 8) & 255, (b >>> 16) & 255, (b >>> 24) & 255, c & 255, (c >>> 8) & 255, (c >>> 16) & 255, (c >>> 24) & 255, d & 255, (d >>> 8) & 255, (d >>> 16) & 255, (d >>> 24) & 255]);
};
var $truqu$elm_md5$MD5$toHex = function (_byte) {
	switch (_byte) {
		case 0:
			return '0';
		case 1:
			return '1';
		case 2:
			return '2';
		case 3:
			return '3';
		case 4:
			return '4';
		case 5:
			return '5';
		case 6:
			return '6';
		case 7:
			return '7';
		case 8:
			return '8';
		case 9:
			return '9';
		case 10:
			return 'a';
		case 11:
			return 'b';
		case 12:
			return 'c';
		case 13:
			return 'd';
		case 14:
			return 'e';
		case 15:
			return 'f';
		default:
			return _Utils_ap(
				$truqu$elm_md5$MD5$toHex((_byte / 16) | 0),
				$truqu$elm_md5$MD5$toHex(_byte % 16));
	}
};
var $truqu$elm_md5$MD5$hex = function (s) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (b, acc) {
				return _Utils_ap(
					acc,
					A3(
						$elm$core$String$padLeft,
						2,
						_Utils_chr('0'),
						$truqu$elm_md5$MD5$toHex(b)));
			}),
		'',
		$truqu$elm_md5$MD5$bytes(s));
};
var $author$project$Lia$Markdown$Code$Types$hash = function (file) {
	return _Utils_Tuple2(
		$truqu$elm_md5$MD5$hex(file.code),
		file.code);
};
var $elm$core$Elm$JsArray$map = _JsArray_map;
var $elm$core$Array$map = F2(
	function (func, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = function (node) {
			if (node.$ === 'SubTree') {
				var subTree = node.a;
				return $elm$core$Array$SubTree(
					A2($elm$core$Elm$JsArray$map, helper, subTree));
			} else {
				var values = node.a;
				return $elm$core$Array$Leaf(
					A2($elm$core$Elm$JsArray$map, func, values));
			}
		};
		return A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			A2($elm$core$Elm$JsArray$map, helper, tree),
			A2($elm$core$Elm$JsArray$map, func, tail));
	});
var $author$project$Lia$Markdown$Code$Types$File = F5(
	function (lang, name, code, visible, fullscreen) {
		return {code: code, fullscreen: fullscreen, lang: lang, name: name, visible: visible};
	});
var $author$project$Lia$Markdown$Code$Types$toFile = function (_v0) {
	var attr = _v0.a.attr;
	var lang = _v0.a.lang;
	var name = _v0.a.name;
	var code = _v0.a.code;
	var visible = _v0.b;
	return _Utils_Tuple2(
		attr,
		A5($author$project$Lia$Markdown$Code$Types$File, lang, name, code, visible, false));
};
var $author$project$Lia$Markdown$Code$Types$initProject = F3(
	function (array, comment, output) {
		var _v0 = A3(
			$elm$core$Array$foldl,
			F2(
				function (s, _v1) {
					var a = _v1.a;
					var f = _v1.b;
					var _v2 = $author$project$Lia$Markdown$Code$Types$toFile(s);
					var a_ = _v2.a;
					var f_ = _v2.b;
					return _Utils_Tuple2(
						A2(
							$elm$core$List$append,
							a,
							_List_fromArray(
								[a_])),
						A2($elm$core$Array$push, f_, f));
				}),
			_Utils_Tuple2(_List_Nil, $elm$core$Array$empty),
			array);
		var attr = _v0.a;
		var files = _v0.b;
		var repository = $elm$core$Array$toList(
			A2($elm$core$Array$map, $author$project$Lia$Markdown$Code$Types$hash, files));
		return {
			attr: attr,
			compact_view: false,
			evaluation: comment,
			file: files,
			focus: -1,
			log: output,
			repository: $elm$core$Dict$fromList(repository),
			running: false,
			terminal: $elm$core$Maybe$Nothing,
			version: $elm$core$Array$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						A2($elm$core$List$map, $elm$core$Tuple$first, repository),
						$author$project$Lia$Markdown$Code$Log$empty)
					])),
			version_active: 0
		};
	});
var $author$project$Lia$Markdown$Code$Parser$evaluate = F2(
	function (lang_title_code, comment) {
		var ar = $elm$core$Array$fromList(lang_title_code);
		var _v0 = function () {
			var _v1 = A2(
				$elm$core$Array$get,
				$elm$core$Array$length(ar) - 1,
				ar);
			if (_v1.$ === 'Just') {
				var _v2 = _v1.a;
				var snippet = _v2.a;
				var vis = _v2.b;
				return ($elm$core$String$toLower(snippet.name) === '@output') ? _Utils_Tuple2(
					A2(
						$author$project$Lia$Markdown$Code$Log$add_Eval,
						A3($author$project$Port$Eval$Eval, vis, snippet.code, _List_Nil),
						$author$project$Lia$Markdown$Code$Log$empty),
					A3($elm$core$Array$slice, 0, -1, ar)) : _Utils_Tuple2($author$project$Lia$Markdown$Code$Log$empty, ar);
			} else {
				return _Utils_Tuple2($author$project$Lia$Markdown$Code$Log$empty, ar);
			}
		}();
		var output = _v0.a;
		var array = _v0.b;
		var add_state = function (s) {
			return _Utils_update(
				s,
				{
					code_vector: A2(
						$elm$core$Array$push,
						A3($author$project$Lia$Markdown$Code$Types$initProject, array, comment, output),
						s.code_vector)
				});
		};
		return A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			$andre_dietrich$parser_combinators$Combine$modifyState(add_state),
			$andre_dietrich$parser_combinators$Combine$withState(
				function (s) {
					return $andre_dietrich$parser_combinators$Combine$succeed(
						$author$project$Lia$Markdown$Code$Types$Evaluate(
							$elm$core$Array$length(s.code_vector)));
				}));
	});
var $author$project$Lia$Markdown$Code$Parser$result = function (_v0) {
	var lst = _v0.a;
	var script = _v0.b;
	if (script.$ === 'Just') {
		var str = script.a;
		return A2($author$project$Lia$Markdown$Code$Parser$evaluate, lst, str);
	} else {
		return $andre_dietrich$parser_combinators$Combine$succeed(
			$author$project$Lia$Markdown$Code$Types$Highlight(
				A2($elm$core$List$map, $elm$core$Tuple$first, lst)));
	}
};
var $author$project$Lia$Markdown$Code$Parser$parse = function (attr) {
	return A2(
		$andre_dietrich$parser_combinators$Combine$andThen,
		$author$project$Lia$Markdown$Code$Parser$result,
		A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			$andre_dietrich$parser_combinators$Combine$maybe(
				A2(
					$andre_dietrich$parser_combinators$Combine$keep,
					$author$project$Lia$Markdown$Inline$Parser$javascript,
					A2(
						$andre_dietrich$parser_combinators$Combine$keep,
						$author$project$Lia$Markdown$Macro$Parser$macro,
						A2(
							$andre_dietrich$parser_combinators$Combine$ignore,
							$andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check),
							$andre_dietrich$parser_combinators$Combine$regex('[ \n]?'))))),
			A2(
				$andre_dietrich$parser_combinators$Combine$map,
				$elm$core$Tuple$pair,
				A2(
					$andre_dietrich$parser_combinators$Combine$sepBy1,
					$author$project$Lia$Parser$Helper$newline,
					A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Code$Parser$listing, attr)))));
};
var $author$project$Lia$Markdown$Quiz$Types$Block_Type = function (a) {
	return {$: 'Block_Type', a: a};
};
var $author$project$Lia$Markdown$Quiz$Types$Generic_Type = {$: 'Generic_Type'};
var $author$project$Lia$Markdown$Quiz$Types$Matrix_Type = function (a) {
	return {$: 'Matrix_Type', a: a};
};
var $author$project$Lia$Markdown$Quiz$Types$Vector_Type = function (a) {
	return {$: 'Vector_Type', a: a};
};
var $author$project$Lia$Markdown$Quiz$Types$Quiz = F4(
	function (quiz, id, hints, javascript) {
		return {hints: hints, id: id, javascript: javascript, quiz: quiz};
	});
var $author$project$Lia$Markdown$Quiz$Parser$get_counter = $andre_dietrich$parser_combinators$Combine$withState(
	A2(
		$elm$core$Basics$composeR,
		function ($) {
			return $.quiz_vector;
		},
		A2($elm$core$Basics$composeR, $elm$core$Array$length, $andre_dietrich$parser_combinators$Combine$succeed)));
var $author$project$Lia$Markdown$Quiz$Vector$Parser$groupBy = F3(
	function (begin, end, parser) {
		return $andre_dietrich$parser_combinators$Combine$many1(
			A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$author$project$Lia$Parser$Helper$newline,
				A2(
					$andre_dietrich$parser_combinators$Combine$andMap,
					$author$project$Lia$Markdown$Inline$Parser$line,
					A2(
						$andre_dietrich$parser_combinators$Combine$ignore,
						end,
						A2(
							$andre_dietrich$parser_combinators$Combine$map,
							$elm$core$Tuple$pair,
							A2(
								$andre_dietrich$parser_combinators$Combine$keep,
								parser,
								A2(
									$andre_dietrich$parser_combinators$Combine$ignore,
									begin,
									A2(
										$andre_dietrich$parser_combinators$Combine$ignore,
										$author$project$Lia$Parser$Helper$spaces,
										$andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check)))))))));
	});
var $author$project$Lia$Markdown$Quiz$Vector$Parser$group = A2(
	$elm$core$Basics$composeR,
	A2(
		$author$project$Lia$Markdown$Quiz$Vector$Parser$groupBy,
		$andre_dietrich$parser_combinators$Combine$string('['),
		$andre_dietrich$parser_combinators$Combine$string(']')),
	$andre_dietrich$parser_combinators$Combine$map($elm$core$List$unzip));
var $author$project$Lia$Markdown$Quiz$Parser$hints = A2(
	$andre_dietrich$parser_combinators$Combine$optional,
	_List_Nil,
	A2(
		$andre_dietrich$parser_combinators$Combine$map,
		$elm$core$Tuple$second,
		$author$project$Lia$Markdown$Quiz$Vector$Parser$group(
			$andre_dietrich$parser_combinators$Combine$string('[?]'))));
var $author$project$Lia$Markdown$Quiz$Parser$maybeJS = A2(
	$andre_dietrich$parser_combinators$Combine$keep,
	$andre_dietrich$parser_combinators$Combine$maybe(
		A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			$author$project$Lia$Parser$Helper$newline,
			A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Inline$Parser$javascript, $author$project$Lia$Parser$Helper$spaces))),
	A2(
		$andre_dietrich$parser_combinators$Combine$ignore,
		$andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check),
		$author$project$Lia$Markdown$Macro$Parser$macro));
var $author$project$Lia$Markdown$Quiz$Parser$adds = function (type_) {
	return A2(
		$andre_dietrich$parser_combinators$Combine$andMap,
		$author$project$Lia$Markdown$Quiz$Parser$maybeJS,
		A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			$author$project$Lia$Markdown$Quiz$Parser$hints,
			A2(
				$andre_dietrich$parser_combinators$Combine$map,
				$author$project$Lia$Markdown$Quiz$Types$Quiz(type_),
				$author$project$Lia$Markdown$Quiz$Parser$get_counter)));
};
var $author$project$Lia$Markdown$Quiz$Parser$generic = $andre_dietrich$parser_combinators$Combine$skip(
	A2(
		$andre_dietrich$parser_combinators$Combine$ignore,
		$author$project$Lia$Parser$Helper$newline,
		A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			$andre_dietrich$parser_combinators$Combine$string('[[!]]'),
			A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$author$project$Lia$Parser$Helper$spaces,
				$andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check)))));
var $author$project$Lia$Markdown$Quiz$Types$Element = F5(
	function (solved, state, trial, hint, error_msg) {
		return {error_msg: error_msg, hint: hint, solved: solved, state: state, trial: trial};
	});
var $author$project$Lia$Markdown$Quiz$Types$Open = {$: 'Open'};
var $author$project$Lia$Markdown$Quiz$Types$Block_State = function (a) {
	return {$: 'Block_State', a: a};
};
var $author$project$Lia$Markdown$Quiz$Types$Generic_State = {$: 'Generic_State'};
var $author$project$Lia$Markdown$Quiz$Types$Matrix_State = function (a) {
	return {$: 'Matrix_State', a: a};
};
var $author$project$Lia$Markdown$Quiz$Types$Vector_State = function (a) {
	return {$: 'Vector_State', a: a};
};
var $author$project$Lia$Markdown$Quiz$Block$Types$Select = F2(
	function (a, b) {
		return {$: 'Select', a: a, b: b};
	});
var $author$project$Lia$Markdown$Quiz$Block$Types$Text = function (a) {
	return {$: 'Text', a: a};
};
var $author$project$Lia$Markdown$Quiz$Block$Types$initState = function (state) {
	if (state.$ === 'Text') {
		return $author$project$Lia$Markdown$Quiz$Block$Types$Text('');
	} else {
		return A2(
			$author$project$Lia$Markdown$Quiz$Block$Types$Select,
			false,
			_List_fromArray(
				[-1]));
	}
};
var $author$project$Lia$Markdown$Quiz$Vector$Types$MultipleChoice = function (a) {
	return {$: 'MultipleChoice', a: a};
};
var $author$project$Lia$Markdown$Quiz$Vector$Types$SingleChoice = function (a) {
	return {$: 'SingleChoice', a: a};
};
var $author$project$Lia$Markdown$Quiz$Vector$Types$initState = function (state) {
	if (state.$ === 'SingleChoice') {
		var list = state.a;
		return $author$project$Lia$Markdown$Quiz$Vector$Types$SingleChoice(
			A2(
				$elm$core$List$map,
				function (_v1) {
					return false;
				},
				list));
	} else {
		var list = state.a;
		return $author$project$Lia$Markdown$Quiz$Vector$Types$MultipleChoice(
			A2(
				$elm$core$List$map,
				function (_v2) {
					return false;
				},
				list));
	}
};
var $author$project$Lia$Markdown$Quiz$Matrix$Types$initState = $elm$core$Array$map($author$project$Lia$Markdown$Quiz$Vector$Types$initState);
var $author$project$Lia$Markdown$Quiz$Types$initState = function (quiz) {
	switch (quiz.$) {
		case 'Generic_Type':
			return $author$project$Lia$Markdown$Quiz$Types$Generic_State;
		case 'Block_Type':
			var q = quiz.a;
			return $author$project$Lia$Markdown$Quiz$Types$Block_State(
				$author$project$Lia$Markdown$Quiz$Block$Types$initState(q.solution));
		case 'Vector_Type':
			var q = quiz.a;
			return $author$project$Lia$Markdown$Quiz$Types$Vector_State(
				$author$project$Lia$Markdown$Quiz$Vector$Types$initState(q.solution));
		default:
			var q = quiz.a;
			return $author$project$Lia$Markdown$Quiz$Types$Matrix_State(
				$author$project$Lia$Markdown$Quiz$Matrix$Types$initState(q.solution));
	}
};
var $author$project$Lia$Markdown$Quiz$Parser$modify_State = function (q) {
	var add_state = F2(
		function (e, s) {
			return _Utils_update(
				s,
				{
					quiz_vector: A2(
						$elm$core$Array$push,
						A5($author$project$Lia$Markdown$Quiz$Types$Element, $author$project$Lia$Markdown$Quiz$Types$Open, e, 0, 0, ''),
						s.quiz_vector)
				});
		});
	return A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		$andre_dietrich$parser_combinators$Combine$succeed(q),
		$andre_dietrich$parser_combinators$Combine$modifyState(
			add_state(
				$author$project$Lia$Markdown$Quiz$Types$initState(q.quiz))));
};
var $author$project$Lia$Markdown$Quiz$Block$Types$Quiz = F2(
	function (options, solution) {
		return {options: options, solution: solution};
	});
var $elm$core$String$endsWith = _String_endsWith;
var $author$project$Lia$Markdown$Inline$Parser$parse_inlines = F2(
	function (state, str) {
		var _v0 = A3(
			$andre_dietrich$parser_combinators$Combine$runParser,
			$author$project$Lia$Markdown$Inline$Parser$line,
			state,
			A3($elm$core$String$replace, '\n', ' ', str));
		if (_v0.$ === 'Ok') {
			var _v1 = _v0.a;
			var rslt = _v1.c;
			return rslt;
		} else {
			return _List_Nil;
		}
	});
var $author$project$Lia$Markdown$Quiz$Block$Parser$check = F3(
	function (state, id, str) {
		var option = $elm$core$String$trim(str);
		var inlines = $author$project$Lia$Markdown$Inline$Parser$parse_inlines(state);
		return (A2($elm$core$String$startsWith, '(', option) && A2($elm$core$String$endsWith, ')', option)) ? _Utils_Tuple2(
			id,
			inlines(
				$elm$core$String$trim(
					A3($elm$core$String$slice, 1, -1, option)))) : _Utils_Tuple2(
			-1,
			inlines(option));
	});
var $author$project$Lia$Markdown$Quiz$Block$Parser$toSelect = function (list) {
	return $andre_dietrich$parser_combinators$Combine$succeed(
		A2(
			$author$project$Lia$Markdown$Quiz$Block$Types$Quiz,
			A2($elm$core$List$map, $elm$core$Tuple$second, list),
			A2(
				$author$project$Lia$Markdown$Quiz$Block$Types$Select,
				false,
				A2(
					$elm$core$List$map,
					$elm$core$Tuple$first,
					A2(
						$elm$core$List$filter,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Tuple$first,
							$elm$core$Basics$le(0)),
						list)))));
};
var $author$project$Lia$Markdown$Quiz$Block$Parser$split = F2(
	function (str, state) {
		var _v0 = A2($elm$core$String$split, '|', str);
		if (_v0.b && (!_v0.b.b)) {
			var solution = _v0.a;
			var str_ = $elm$core$String$trim(
				A3($elm$core$String$replace, '_', ' ', solution));
			return ((str_ === '?') || ((str_ === '!') || (str_ === ''))) ? $andre_dietrich$parser_combinators$Combine$fail('') : $andre_dietrich$parser_combinators$Combine$succeed(
				A2(
					$author$project$Lia$Markdown$Quiz$Block$Types$Quiz,
					_List_Nil,
					$author$project$Lia$Markdown$Quiz$Block$Types$Text(solution)));
		} else {
			var options = _v0;
			return $author$project$Lia$Markdown$Quiz$Block$Parser$toSelect(
				A2(
					$elm$core$List$indexedMap,
					$author$project$Lia$Markdown$Quiz$Block$Parser$check(state),
					options));
		}
	});
var $author$project$Lia$Markdown$Quiz$Block$Parser$parse = A2(
	$andre_dietrich$parser_combinators$Combine$andThen,
	$andre_dietrich$parser_combinators$Combine$withState,
	A2(
		$andre_dietrich$parser_combinators$Combine$map,
		$author$project$Lia$Markdown$Quiz$Block$Parser$split,
		A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			$author$project$Lia$Parser$Helper$newline,
			A2(
				$andre_dietrich$parser_combinators$Combine$keep,
				$author$project$Lia$Parser$Helper$stringTill(
					$andre_dietrich$parser_combinators$Combine$string(']]')),
				$andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\[\\[')))));
var $author$project$Lia$Markdown$Quiz$Matrix$Parser$inBrackets = A2(
	$andre_dietrich$parser_combinators$Combine$keep,
	A2(
		$andre_dietrich$parser_combinators$Combine$manyTill,
		$author$project$Lia$Markdown$Inline$Parser$inlines,
		$andre_dietrich$parser_combinators$Combine$regex('[ \\t]*\\][ \\t]*')),
	$andre_dietrich$parser_combinators$Combine$regex('[ \\t]*\\[[ \\t]*'));
var $author$project$Lia$Markdown$Quiz$Matrix$Parser$inParenthesis = A2(
	$andre_dietrich$parser_combinators$Combine$keep,
	A2(
		$andre_dietrich$parser_combinators$Combine$manyTill,
		$author$project$Lia$Markdown$Inline$Parser$inlines,
		$andre_dietrich$parser_combinators$Combine$regex('[ \\t]*\\)[ \\t]*')),
	$andre_dietrich$parser_combinators$Combine$regex('[ \\t]*\\([ \\t]*'));
var $author$project$Lia$Markdown$Quiz$Matrix$Parser$options = A2($andre_dietrich$parser_combinators$Combine$or, $author$project$Lia$Markdown$Quiz$Matrix$Parser$inParenthesis, $author$project$Lia$Markdown$Quiz$Matrix$Parser$inBrackets);
var $author$project$Lia$Markdown$Quiz$Matrix$Parser$header = A2(
	$andre_dietrich$parser_combinators$Combine$ignore,
	$author$project$Lia$Parser$Helper$newline,
	A2(
		$andre_dietrich$parser_combinators$Combine$ignore,
		$andre_dietrich$parser_combinators$Combine$string(']'),
		A2(
			$andre_dietrich$parser_combinators$Combine$keep,
			$andre_dietrich$parser_combinators$Combine$many1($author$project$Lia$Markdown$Quiz$Matrix$Parser$options),
			A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$andre_dietrich$parser_combinators$Combine$string('['),
				A2(
					$andre_dietrich$parser_combinators$Combine$ignore,
					$author$project$Lia$Parser$Helper$spaces,
					$andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check))))));
var $author$project$Lia$Markdown$Quiz$Matrix$Types$Quiz = F3(
	function (headers, options, solution) {
		return {headers: headers, options: options, solution: solution};
	});
var $author$project$Lia$Markdown$Quiz$Matrix$Parser$quiz = F2(
	function (main, _v0) {
		var vector = _v0.a;
		var inline = _v0.b;
		return A3(
			$author$project$Lia$Markdown$Quiz$Matrix$Types$Quiz,
			main,
			inline,
			$elm$core$Array$fromList(vector));
	});
var $author$project$Lia$Markdown$Quiz$Vector$Parser$either = F2(
	function (_true, _false) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$or,
			A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				false,
				$andre_dietrich$parser_combinators$Combine$string(_false)),
			A2(
				$andre_dietrich$parser_combinators$Combine$onsuccess,
				true,
				$andre_dietrich$parser_combinators$Combine$regex(_true)));
	});
var $author$project$Lia$Markdown$Quiz$Vector$Parser$checkButton = A2($author$project$Lia$Markdown$Quiz$Vector$Parser$either, '\\[[xX]\\]', '[ ]');
var $author$project$Lia$Markdown$Quiz$Matrix$Parser$multiple = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$author$project$Lia$Markdown$Quiz$Vector$Types$MultipleChoice,
	$andre_dietrich$parser_combinators$Combine$many1(
		A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			$author$project$Lia$Parser$Helper$spaces,
			A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Quiz$Vector$Parser$checkButton, $author$project$Lia$Parser$Helper$spaces))));
var $author$project$Lia$Markdown$Quiz$Vector$Parser$radioButton = A2($author$project$Lia$Markdown$Quiz$Vector$Parser$either, '\\([xX]\\)', '( )');
var $author$project$Lia$Markdown$Quiz$Matrix$Parser$single = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$author$project$Lia$Markdown$Quiz$Vector$Types$SingleChoice,
	$andre_dietrich$parser_combinators$Combine$many1(
		A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			$author$project$Lia$Parser$Helper$spaces,
			A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Quiz$Vector$Parser$radioButton, $author$project$Lia$Parser$Helper$spaces))));
var $author$project$Lia$Markdown$Quiz$Matrix$Parser$rows = $author$project$Lia$Markdown$Quiz$Vector$Parser$group(
	A2($andre_dietrich$parser_combinators$Combine$or, $author$project$Lia$Markdown$Quiz$Matrix$Parser$single, $author$project$Lia$Markdown$Quiz$Matrix$Parser$multiple));
var $author$project$Lia$Markdown$Quiz$Matrix$Parser$parse = A2(
	$andre_dietrich$parser_combinators$Combine$andMap,
	$author$project$Lia$Markdown$Quiz$Matrix$Parser$rows,
	A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Quiz$Matrix$Parser$quiz, $author$project$Lia$Markdown$Quiz$Matrix$Parser$header));
var $author$project$Lia$Markdown$Quiz$Vector$Types$Quiz = F2(
	function (options, solution) {
		return {options: options, solution: solution};
	});
var $author$project$Lia$Markdown$Quiz$Vector$Parser$toQuiz = F2(
	function (fn, _v0) {
		var bools = _v0.a;
		var inlines = _v0.b;
		return A2(
			$author$project$Lia$Markdown$Quiz$Vector$Types$Quiz,
			inlines,
			fn(bools));
	});
var $author$project$Lia$Markdown$Quiz$Vector$Parser$parse = A2(
	$andre_dietrich$parser_combinators$Combine$or,
	A2(
		$andre_dietrich$parser_combinators$Combine$map,
		$author$project$Lia$Markdown$Quiz$Vector$Parser$toQuiz($author$project$Lia$Markdown$Quiz$Vector$Types$SingleChoice),
		$author$project$Lia$Markdown$Quiz$Vector$Parser$group($author$project$Lia$Markdown$Quiz$Vector$Parser$radioButton)),
	A2(
		$andre_dietrich$parser_combinators$Combine$map,
		$author$project$Lia$Markdown$Quiz$Vector$Parser$toQuiz($author$project$Lia$Markdown$Quiz$Vector$Types$MultipleChoice),
		$author$project$Lia$Markdown$Quiz$Vector$Parser$group($author$project$Lia$Markdown$Quiz$Vector$Parser$checkButton)));
var $author$project$Lia$Markdown$Quiz$Parser$parse = A2(
	$andre_dietrich$parser_combinators$Combine$andThen,
	$author$project$Lia$Markdown$Quiz$Parser$modify_State,
	A2(
		$andre_dietrich$parser_combinators$Combine$andThen,
		$author$project$Lia$Markdown$Quiz$Parser$adds,
		$andre_dietrich$parser_combinators$Combine$choice(
			_List_fromArray(
				[
					A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Quiz$Types$Matrix_Type, $author$project$Lia$Markdown$Quiz$Matrix$Parser$parse),
					A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Quiz$Types$Vector_Type, $author$project$Lia$Markdown$Quiz$Vector$Parser$parse),
					A2($andre_dietrich$parser_combinators$Combine$onsuccess, $author$project$Lia$Markdown$Quiz$Types$Generic_Type, $author$project$Lia$Markdown$Quiz$Parser$generic),
					A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Quiz$Types$Block_Type, $author$project$Lia$Markdown$Quiz$Block$Parser$parse)
				]))));
var $author$project$Lia$Markdown$Survey$Types$Matrix_State = F2(
	function (a, b) {
		return {$: 'Matrix_State', a: a, b: b};
	});
var $author$project$Lia$Markdown$Survey$Types$Select_State = F2(
	function (a, b) {
		return {$: 'Select_State', a: a, b: b};
	});
var $author$project$Lia$Markdown$Survey$Types$Text_State = function (a) {
	return {$: 'Text_State', a: a};
};
var $author$project$Lia$Markdown$Survey$Types$Vector_State = F2(
	function (a, b) {
		return {$: 'Vector_State', a: a, b: b};
	});
var $author$project$Lia$Markdown$Survey$Parser$add_state = F2(
	function (state, c) {
		return _Utils_update(
			c,
			{
				survey_vector: A2(
					$elm$core$Array$push,
					_Utils_Tuple2(false, state),
					c.survey_vector)
			});
	});
var $author$project$Lia$Markdown$Survey$Parser$modify_State = function (survey_) {
	var state = function () {
		var extractor = F2(
			function (fn, v) {
				return $elm$core$Dict$fromList(
					A2($elm$core$List$map, fn, v));
			});
		var _v0 = survey_.survey;
		switch (_v0.$) {
			case 'Text':
				return $author$project$Lia$Markdown$Survey$Types$Text_State('');
			case 'Select':
				return A2($author$project$Lia$Markdown$Survey$Types$Select_State, false, -1);
			case 'Vector':
				var bool = _v0.a;
				var vars = _v0.b;
				return A2(
					$author$project$Lia$Markdown$Survey$Types$Vector_State,
					bool,
					A2(
						extractor,
						function (_v1) {
							var v = _v1.a;
							return _Utils_Tuple2(v, false);
						},
						vars));
			default:
				var bool = _v0.a;
				var vars = _v0.c;
				var qs = _v0.d;
				return A2(
					$author$project$Lia$Markdown$Survey$Types$Matrix_State,
					bool,
					A2(
						$elm$core$Array$repeat,
						$elm$core$List$length(qs),
						A2(
							extractor,
							function (v) {
								return _Utils_Tuple2(v, false);
							},
							vars)));
		}
	}();
	return A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		$andre_dietrich$parser_combinators$Combine$succeed(survey_),
		$andre_dietrich$parser_combinators$Combine$modifyState(
			$author$project$Lia$Markdown$Survey$Parser$add_state(state)));
};
var $author$project$Lia$Markdown$Survey$Types$Survey = F3(
	function (survey, id, javascript) {
		return {id: id, javascript: javascript, survey: survey};
	});
var $author$project$Lia$Markdown$Survey$Types$Text = function (a) {
	return {$: 'Text', a: a};
};
var $author$project$Lia$Markdown$Survey$Types$Vector = F2(
	function (a, b) {
		return {$: 'Vector', a: a, b: b};
	});
var $andre_dietrich$parser_combinators$Combine$brackets = A2(
	$andre_dietrich$parser_combinators$Combine$between,
	$andre_dietrich$parser_combinators$Combine$string('['),
	$andre_dietrich$parser_combinators$Combine$string(']'));
var $author$project$Lia$Markdown$Survey$Parser$pattern = function (p) {
	return A2(
		$andre_dietrich$parser_combinators$Combine$ignore,
		$andre_dietrich$parser_combinators$Combine$regex('][\t ]*'),
		A2(
			$andre_dietrich$parser_combinators$Combine$keep,
			p,
			A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\['),
				$andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check))));
};
var $author$project$Lia$Markdown$Survey$Parser$header = F2(
	function (begin, end) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			$author$project$Lia$Parser$Helper$newline,
			$author$project$Lia$Markdown$Survey$Parser$pattern(
				$andre_dietrich$parser_combinators$Combine$many1(
					A2(
						$andre_dietrich$parser_combinators$Combine$keep,
						A2(
							$andre_dietrich$parser_combinators$Combine$manyTill,
							$author$project$Lia$Markdown$Inline$Parser$inlines,
							$andre_dietrich$parser_combinators$Combine$string(end)),
						$andre_dietrich$parser_combinators$Combine$string(begin)))));
	});
var $author$project$Lia$Markdown$Survey$Parser$questions = $andre_dietrich$parser_combinators$Combine$many1(
	A2(
		$andre_dietrich$parser_combinators$Combine$ignore,
		$author$project$Lia$Parser$Helper$newline,
		A2(
			$andre_dietrich$parser_combinators$Combine$keep,
			$author$project$Lia$Markdown$Inline$Parser$line,
			A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\[[\t ]+\\]'),
				$andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check)))));
var $author$project$Lia$Markdown$Survey$Parser$text_lines = A2(
	$andre_dietrich$parser_combinators$Combine$ignore,
	$author$project$Lia$Parser$Helper$newline,
	A2(
		$andre_dietrich$parser_combinators$Combine$map,
		$elm$core$List$length,
		$author$project$Lia$Markdown$Survey$Parser$pattern(
			A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$andre_dietrich$parser_combinators$Combine$string(']'),
				A2(
					$andre_dietrich$parser_combinators$Combine$keep,
					$andre_dietrich$parser_combinators$Combine$many1(
						$andre_dietrich$parser_combinators$Combine$regex('_{3,}[\t ]*')),
					A2(
						$andre_dietrich$parser_combinators$Combine$ignore,
						$andre_dietrich$parser_combinators$Combine$string('['),
						A2(
							$andre_dietrich$parser_combinators$Combine$ignore,
							$author$project$Lia$Parser$Helper$spaces,
							$andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check))))))));
var $author$project$Lia$Markdown$Survey$Types$Matrix = F4(
	function (a, b, c, d) {
		return {$: 'Matrix', a: a, b: b, c: c, d: d};
	});
var $author$project$Lia$Markdown$Survey$Parser$toMatrix = F2(
	function (bool, ids) {
		return A3(
			$author$project$Lia$Markdown$Survey$Types$Matrix,
			bool,
			ids,
			A2($elm$core$List$map, $author$project$Lia$Markdown$Inline$Stringify$stringify, ids));
	});
var $author$project$Lia$Markdown$Survey$Types$Select = function (a) {
	return {$: 'Select', a: a};
};
var $author$project$Lia$Markdown$Survey$Parser$toSelect = function (quiz) {
	var _v0 = quiz.solution;
	if ((_v0.$ === 'Select') && (!_v0.b.b)) {
		return $andre_dietrich$parser_combinators$Combine$succeed(
			$author$project$Lia$Markdown$Survey$Types$Select(quiz.options));
	} else {
		return $andre_dietrich$parser_combinators$Combine$fail('');
	}
};
var $author$project$Lia$Markdown$Survey$Parser$id_str = A2(
	$andre_dietrich$parser_combinators$Combine$andThen,
	function (s) {
		return (s === 'X') ? $andre_dietrich$parser_combinators$Combine$fail('') : $andre_dietrich$parser_combinators$Combine$succeed(s);
	},
	$andre_dietrich$parser_combinators$Combine$regex('\\w(\\w+| )*'));
var $author$project$Lia$Markdown$Survey$Parser$question = function (p) {
	return A2(
		$andre_dietrich$parser_combinators$Combine$ignore,
		$author$project$Lia$Parser$Helper$newline,
		A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			$author$project$Lia$Markdown$Inline$Parser$line,
			A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair, p)));
};
var $author$project$Lia$Markdown$Survey$Parser$vector = function (p) {
	return $andre_dietrich$parser_combinators$Combine$many1(
		$author$project$Lia$Markdown$Survey$Parser$question(
			$author$project$Lia$Markdown$Survey$Parser$pattern(
				p($author$project$Lia$Markdown$Survey$Parser$id_str))));
};
var $author$project$Lia$Markdown$Survey$Parser$survey = A2(
	$andre_dietrich$parser_combinators$Combine$andMap,
	$author$project$Lia$Markdown$Quiz$Parser$maybeJS,
	A2(
		$andre_dietrich$parser_combinators$Combine$andMap,
		$andre_dietrich$parser_combinators$Combine$withState(
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.survey_vector;
				},
				A2($elm$core$Basics$composeR, $elm$core$Array$length, $andre_dietrich$parser_combinators$Combine$succeed))),
		A2(
			$andre_dietrich$parser_combinators$Combine$map,
			$author$project$Lia$Markdown$Survey$Types$Survey,
			$andre_dietrich$parser_combinators$Combine$choice(
				_List_fromArray(
					[
						A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Survey$Types$Text, $author$project$Lia$Markdown$Survey$Parser$text_lines),
						A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Survey$Parser$toSelect, $author$project$Lia$Markdown$Quiz$Block$Parser$parse),
						A2(
						$andre_dietrich$parser_combinators$Combine$map,
						$author$project$Lia$Markdown$Survey$Types$Vector(false),
						$author$project$Lia$Markdown$Survey$Parser$vector($andre_dietrich$parser_combinators$Combine$parens)),
						A2(
						$andre_dietrich$parser_combinators$Combine$map,
						$author$project$Lia$Markdown$Survey$Types$Vector(true),
						$author$project$Lia$Markdown$Survey$Parser$vector($andre_dietrich$parser_combinators$Combine$brackets)),
						A2(
						$andre_dietrich$parser_combinators$Combine$andMap,
						$author$project$Lia$Markdown$Survey$Parser$questions,
						A2(
							$andre_dietrich$parser_combinators$Combine$map,
							$author$project$Lia$Markdown$Survey$Parser$toMatrix(false),
							A2($author$project$Lia$Markdown$Survey$Parser$header, '(', ')'))),
						A2(
						$andre_dietrich$parser_combinators$Combine$andMap,
						$author$project$Lia$Markdown$Survey$Parser$questions,
						A2(
							$andre_dietrich$parser_combinators$Combine$map,
							$author$project$Lia$Markdown$Survey$Parser$toMatrix(true),
							A2($author$project$Lia$Markdown$Survey$Parser$header, '[', ']')))
					])))));
var $author$project$Lia$Markdown$Survey$Parser$parse = A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Survey$Parser$modify_State, $author$project$Lia$Markdown$Survey$Parser$survey);
var $author$project$Lia$Markdown$Table$Types$Table = F5(
	function (_class, head, format, body, id) {
		return {body: body, _class: _class, format: format, head: head, id: id};
	});
var $andre_dietrich$parser_combinators$Combine$sepEndBy1 = F2(
	function (sep, p) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			$andre_dietrich$parser_combinators$Combine$maybe(sep),
			A2($andre_dietrich$parser_combinators$Combine$sepBy1, sep, p));
	});
var $andre_dietrich$parser_combinators$Combine$sepEndBy = F2(
	function (sep, p) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$or,
			A2($andre_dietrich$parser_combinators$Combine$sepEndBy1, sep, p),
			$andre_dietrich$parser_combinators$Combine$succeed(_List_Nil));
	});
var $author$project$Lia$Markdown$Table$Parser$format = A2(
	$andre_dietrich$parser_combinators$Combine$ignore,
	$andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\n'),
	A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		A2(
			$andre_dietrich$parser_combinators$Combine$sepEndBy,
			$andre_dietrich$parser_combinators$Combine$string('|'),
			$andre_dietrich$parser_combinators$Combine$choice(
				_List_fromArray(
					[
						A2(
						$andre_dietrich$parser_combinators$Combine$onsuccess,
						'center',
						$andre_dietrich$parser_combinators$Combine$regex('[\t ]*:-{3,}:[\t ]*')),
						A2(
						$andre_dietrich$parser_combinators$Combine$onsuccess,
						'left',
						$andre_dietrich$parser_combinators$Combine$regex('[\t ]*:-{3,}[\t ]*')),
						A2(
						$andre_dietrich$parser_combinators$Combine$onsuccess,
						'right',
						$andre_dietrich$parser_combinators$Combine$regex('[\t ]*-{3,}:[\t ]*')),
						A2(
						$andre_dietrich$parser_combinators$Combine$onsuccess,
						'left',
						$andre_dietrich$parser_combinators$Combine$regex('[\t ]*-{3,}[\t ]*'))
					]))),
		A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			$andre_dietrich$parser_combinators$Combine$string('|'),
			$author$project$Lia$Parser$Indentation$check)));
var $author$project$Lia$Markdown$Table$Parser$row = A2(
	$andre_dietrich$parser_combinators$Combine$keep,
	A2(
		$andre_dietrich$parser_combinators$Combine$manyTill,
		A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			A2($andre_dietrich$parser_combinators$Combine$optional, _List_Nil, $author$project$Lia$Markdown$Inline$Parser$line),
			A2(
				$andre_dietrich$parser_combinators$Combine$map,
				$elm$core$Tuple$pair,
				A2(
					$andre_dietrich$parser_combinators$Combine$keep,
					$author$project$Lia$Markdown$Inline$Parser$annotations,
					A2(
						$andre_dietrich$parser_combinators$Combine$ignore,
						$author$project$Lia$Markdown$Macro$Parser$macro,
						A2(
							$andre_dietrich$parser_combinators$Combine$ignore,
							$author$project$Lia$Parser$Helper$spaces,
							$andre_dietrich$parser_combinators$Combine$string('|')))))),
		$andre_dietrich$parser_combinators$Combine$regex('\\|[\t ]*\\n')),
	$author$project$Lia$Parser$Indentation$check);
var $author$project$Lia$Markdown$Table$Parser$formated = A2(
	$andre_dietrich$parser_combinators$Combine$andMap,
	$andre_dietrich$parser_combinators$Combine$many($author$project$Lia$Markdown$Table$Parser$row),
	A2(
		$andre_dietrich$parser_combinators$Combine$andMap,
		$author$project$Lia$Markdown$Table$Parser$format,
		A2(
			$andre_dietrich$parser_combinators$Combine$map,
			$author$project$Lia$Markdown$Table$Types$Table($author$project$Lia$Markdown$Table$Types$None),
			$author$project$Lia$Markdown$Table$Parser$row)));
var $author$project$Lia$Markdown$Table$Types$State = F3(
	function (column, dir, diagram) {
		return {column: column, diagram: diagram, dir: dir};
	});
var $author$project$Lia$Markdown$Table$Parser$modify_State = A2(
	$elm$core$Basics$composeR,
	$andre_dietrich$parser_combinators$Combine$andMap(
		$andre_dietrich$parser_combinators$Combine$withState(
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.table_vector;
				},
				A2($elm$core$Basics$composeR, $elm$core$Array$length, $andre_dietrich$parser_combinators$Combine$succeed)))),
	$andre_dietrich$parser_combinators$Combine$ignore(
		$andre_dietrich$parser_combinators$Combine$modifyState(
			function (s) {
				return _Utils_update(
					s,
					{
						table_vector: A2(
							$elm$core$Array$push,
							A3($author$project$Lia$Markdown$Table$Types$State, -1, false, false),
							s.table_vector)
					});
			})));
var $author$project$Lia$Markdown$Table$Parser$simple = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	A3($author$project$Lia$Markdown$Table$Types$Table, $author$project$Lia$Markdown$Table$Types$None, _List_Nil, _List_Nil),
	$andre_dietrich$parser_combinators$Combine$many1($author$project$Lia$Markdown$Table$Parser$row));
var $author$project$Lia$Markdown$Table$Parser$parse = $author$project$Lia$Markdown$Table$Parser$modify_State(
	A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		A2($andre_dietrich$parser_combinators$Combine$or, $author$project$Lia$Markdown$Table$Parser$formated, $author$project$Lia$Markdown$Table$Parser$simple),
		$author$project$Lia$Parser$Indentation$skip));
var $author$project$Lia$Markdown$Task$Types$Task = F3(
	function (task, id, javascript) {
		return {id: id, javascript: javascript, task: task};
	});
var $author$project$Lia$Markdown$Task$Parser$modify_State = function (_v0) {
	var states = _v0.a;
	var tasks = _v0.b;
	var addTask = function (s) {
		return _Utils_update(
			s,
			{
				task_vector: A2(
					$elm$core$Array$push,
					$elm$core$Array$fromList(states),
					s.task_vector)
			});
	};
	return A2(
		$andre_dietrich$parser_combinators$Combine$ignore,
		$andre_dietrich$parser_combinators$Combine$modifyState(addTask),
		A2(
			$andre_dietrich$parser_combinators$Combine$map,
			$author$project$Lia$Markdown$Task$Types$Task(tasks),
			$andre_dietrich$parser_combinators$Combine$withState(
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.task_vector;
					},
					A2($elm$core$Basics$composeR, $elm$core$Array$length, $andre_dietrich$parser_combinators$Combine$succeed)))));
};
var $author$project$Lia$Markdown$Task$Parser$parse = A2(
	$andre_dietrich$parser_combinators$Combine$andMap,
	$author$project$Lia$Markdown$Quiz$Parser$maybeJS,
	A2(
		$andre_dietrich$parser_combinators$Combine$andThen,
		$author$project$Lia$Markdown$Task$Parser$modify_State,
		A2(
			$andre_dietrich$parser_combinators$Combine$map,
			$elm$core$List$unzip,
			A3(
				$author$project$Lia$Markdown$Quiz$Vector$Parser$groupBy,
				$andre_dietrich$parser_combinators$Combine$string('- ['),
				$andre_dietrich$parser_combinators$Combine$string(']'),
				A2($author$project$Lia$Markdown$Quiz$Vector$Parser$either, '[xX]', ' ')))));
var $author$project$Lia$Parser$Indentation$pop = $andre_dietrich$parser_combinators$Combine$modifyState(
	function (state) {
		return _Utils_update(
			state,
			{
				indentation: $elm$core$List$reverse(
					A2(
						$elm$core$List$drop,
						1,
						$elm$core$List$reverse(state.indentation))),
				indentation_skip: false
			});
	});
var $author$project$Lia$Markdown$Inline$Parser$lineWithProblems = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$author$project$Lia$Markdown$Inline$Parser$combine,
	$andre_dietrich$parser_combinators$Combine$many1(
		A2(
			$andre_dietrich$parser_combinators$Combine$or,
			$author$project$Lia$Markdown$Inline$Parser$inlines,
			A2(
				$andre_dietrich$parser_combinators$Combine$map,
				function (x) {
					return A2($author$project$Lia$Markdown$Inline$Types$Chars, x, _List_Nil);
				},
				$andre_dietrich$parser_combinators$Combine$regex('.')))));
var $author$project$Lia$Markdown$Parser$problem = A2(
	$andre_dietrich$parser_combinators$Combine$ignore,
	$author$project$Lia$Parser$Helper$newline,
	A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		$author$project$Lia$Markdown$Inline$Parser$lineWithProblems,
		A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Indentation$check, $author$project$Lia$Parser$Indentation$skip)));
var $author$project$Lia$Markdown$Parser$underline = A2(
	$andre_dietrich$parser_combinators$Combine$or,
	A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		$andre_dietrich$parser_combinators$Combine$succeed(1),
		$andre_dietrich$parser_combinators$Combine$regex('={3,}[ \t]*')),
	A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		$andre_dietrich$parser_combinators$Combine$succeed(2),
		$andre_dietrich$parser_combinators$Combine$regex('-{3,}[ \t]*')));
var $author$project$Lia$Markdown$Parser$subHeader = A2(
	$andre_dietrich$parser_combinators$Combine$ignore,
	$andre_dietrich$parser_combinators$Combine$regex('[ \t]*\n'),
	A2(
		$andre_dietrich$parser_combinators$Combine$andMap,
		$author$project$Lia$Markdown$Parser$underline,
		A2(
			$andre_dietrich$parser_combinators$Combine$map,
			$elm$core$Tuple$pair,
			A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$andre_dietrich$parser_combinators$Combine$regex('[ \t]*\n'),
				$author$project$Lia$Markdown$Inline$Parser$line))));
var $author$project$Lia$Markdown$Parser$svgbody = function (len) {
	var control_frame = '(`){' + ($elm$core$String$fromInt(len) + ((len <= 8) ? '}' : ',}'));
	var ascii = (len <= 8) ? $andre_dietrich$parser_combinators$Combine$regex('[\t ]*(ascii|art)[\t ]*\\n') : $andre_dietrich$parser_combinators$Combine$regex('([\t ]*(ascii|art))?[\t ]*\\n');
	return A2(
		$andre_dietrich$parser_combinators$Combine$keep,
		A2(
			$andre_dietrich$parser_combinators$Combine$map,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$String$concat,
				$elm$core$String$dropRight(1)),
			A2(
				$andre_dietrich$parser_combinators$Combine$manyTill,
				A2(
					$andre_dietrich$parser_combinators$Combine$keep,
					$andre_dietrich$parser_combinators$Combine$regex('(?:.(?!' + (control_frame + '))*\\n')),
					$andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check)),
				A2(
					$andre_dietrich$parser_combinators$Combine$keep,
					$andre_dietrich$parser_combinators$Combine$regex(control_frame),
					$author$project$Lia$Parser$Indentation$check))),
		ascii);
};
var $author$project$Lia$Markdown$Types$Comment = function (a) {
	return {$: 'Comment', a: a};
};
var $author$project$Lia$Markdown$Effect$Model$set_annotation = F4(
	function (id1, id2, m, attr) {
		var _v0 = A2($elm$core$Dict$get, id1, m);
		if (_v0.$ === 'Just') {
			var e = _v0.a;
			var _v1 = A2($elm$core$Array$get, id2, e.paragraphs);
			if (_v1.$ === 'Just') {
				var _v2 = _v1.a;
				var par = _v2.b;
				return A3(
					$elm$core$Dict$insert,
					id1,
					_Utils_update(
						e,
						{
							paragraphs: A3(
								$elm$core$Array$set,
								id2,
								_Utils_Tuple2(attr, par),
								e.paragraphs)
						}),
					m);
			} else {
				return m;
			}
		} else {
			return m;
		}
	});
var $author$project$Lia$Markdown$Parser$to_comment = function (_v0) {
	var attr = _v0.a;
	var _v1 = _v0.b;
	var id1 = _v1.a;
	var id2 = _v1.b;
	return A2(
		$andre_dietrich$parser_combinators$Combine$onsuccess,
		$author$project$Lia$Markdown$Types$Comment(
			_Utils_Tuple2(id1, id2)),
		function () {
			if (!attr.b) {
				return $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0);
			} else {
				return $andre_dietrich$parser_combinators$Combine$modifyState(
					function (s) {
						var e = s.effect_model;
						return _Utils_update(
							s,
							{
								effect_model: _Utils_update(
									e,
									{
										comments: A4($author$project$Lia$Markdown$Effect$Model$set_annotation, id1, id2, e.comments, attr)
									})
							});
					});
			}
		}());
};
var $author$project$Lia$Markdown$Parser$svgbobSub = function (str) {
	var svg = A2(
		$andre_dietrich$elm_svgbob$SvgBob$getElements,
		{
			arcRadius: 4.0,
			backgroundColor: 'white',
			fontSize: 14.0,
			heightVerbatim: $elm$core$Maybe$Just('100%'),
			lineWidth: 1.0,
			multilineVerbatim: true,
			strokeColor: 'black',
			textColor: 'black',
			textHeight: 16.0,
			textWidth: 8.0,
			verbatim: _Utils_chr('\"'),
			widthVerbatim: $elm$core$Maybe$Nothing
		},
		str);
	var fn = function (context) {
		var _v0 = A3(
			$elm$core$List$foldl,
			F2(
				function (_v1, _v2) {
					var code = _v1.a;
					var pos = _v1.b;
					var c = _v2.a;
					var list = _v2.b;
					var _v3 = A3(
						$andre_dietrich$parser_combinators$Combine$runParser,
						$author$project$Lia$Markdown$Parser$cyclic$run(),
						c,
						code + '\n');
					if (_v3.$ === 'Ok') {
						var _v4 = _v3.a;
						var state = _v4.a;
						var md = _v4.c;
						return _Utils_Tuple2(
							state,
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(md, pos),
								list));
					} else {
						return _Utils_Tuple2(c, list);
					}
				}),
			_Utils_Tuple2(context, _List_Nil),
			svg.foreign);
		var newContext = _v0.a;
		var foreign = _v0.b;
		return A2(
			$andre_dietrich$parser_combinators$Combine$keep,
			$andre_dietrich$parser_combinators$Combine$succeed(
				{columns: svg.columns, foreign: foreign, rows: svg.rows, settings: svg.settings, svg: svg.svg}),
			$andre_dietrich$parser_combinators$Combine$putState(newContext));
	};
	return $andre_dietrich$parser_combinators$Combine$withState(fn);
};
function $author$project$Lia$Markdown$Parser$cyclic$elements() {
	return $andre_dietrich$parser_combinators$Combine$choice(
		_List_fromArray(
			[
				A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				$author$project$Lia$Markdown$Effect$Parser$markdown(
					$author$project$Lia$Markdown$Parser$cyclic$blocks()),
				A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$Effect, $author$project$Lia$Markdown$Parser$md_annotations)),
				A2(
				$andre_dietrich$parser_combinators$Combine$andThen,
				$author$project$Lia$Markdown$Parser$to_comment,
				A2(
					$andre_dietrich$parser_combinators$Combine$andMap,
					$author$project$Lia$Markdown$Effect$Parser$comment($author$project$Lia$Markdown$Parser$paragraph),
					A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair, $author$project$Lia$Markdown$Parser$md_annotations))),
				A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				$author$project$Lia$Markdown$Chart$Parser$parse,
				A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$Chart, $author$project$Lia$Markdown$Parser$md_annotations)),
				A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				$andre_dietrich$parser_combinators$Combine$withState(
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.effect_model;
						},
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.javascript;
							},
							$andre_dietrich$parser_combinators$Combine$succeed))),
				A2(
					$andre_dietrich$parser_combinators$Combine$andMap,
					$author$project$Lia$Markdown$Table$Parser$parse,
					A2(
						$andre_dietrich$parser_combinators$Combine$map,
						F2(
							function (attr, tab) {
								return A2(
									$elm$core$Basics$composeR,
									A2($author$project$Lia$Markdown$Table$Parser$classify, attr, tab),
									$author$project$Lia$Markdown$Types$Table(attr));
							}),
						$author$project$Lia$Markdown$Parser$md_annotations))),
				$author$project$Lia$Markdown$Parser$cyclic$svgbob(),
				A2(
				$andre_dietrich$parser_combinators$Combine$map,
				$author$project$Lia$Markdown$Types$Code,
				$author$project$Lia$Markdown$Code$Parser$parse($author$project$Lia$Markdown$Parser$md_annotations)),
				A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				$author$project$Lia$Markdown$Parser$subHeader,
				A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$Header, $author$project$Lia$Markdown$Parser$md_annotations)),
				$author$project$Lia$Markdown$Parser$horizontal_line,
				A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				$author$project$Lia$Markdown$Survey$Parser$parse,
				A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$Survey, $author$project$Lia$Markdown$Parser$md_annotations)),
				A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				$author$project$Lia$Markdown$Parser$cyclic$solution(),
				A2(
					$andre_dietrich$parser_combinators$Combine$andMap,
					$author$project$Lia$Markdown$Quiz$Parser$parse,
					A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$Quiz, $author$project$Lia$Markdown$Parser$md_annotations))),
				A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				$author$project$Lia$Markdown$Task$Parser$parse,
				A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$Task, $author$project$Lia$Markdown$Parser$md_annotations)),
				$author$project$Lia$Markdown$Parser$cyclic$quote(),
				A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				$author$project$Lia$Markdown$Parser$cyclic$ordered_list(),
				A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$OrderedList, $author$project$Lia$Markdown$Parser$md_annotations)),
				A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				$author$project$Lia$Markdown$Parser$cyclic$unordered_list(),
				A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$BulletList, $author$project$Lia$Markdown$Parser$md_annotations)),
				A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$andre_dietrich$parser_combinators$Combine$regex('[ \t]*\n'),
				A2(
					$andre_dietrich$parser_combinators$Combine$andMap,
					$author$project$Lia$Markdown$HTML$Parser$parse(
						$author$project$Lia$Markdown$Parser$cyclic$blocks()),
					A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$HTML, $author$project$Lia$Markdown$Parser$md_annotations))),
				A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				$author$project$Lia$Markdown$Parser$paragraph,
				A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$Paragraph, $author$project$Lia$Markdown$Parser$md_annotations)),
				A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				$author$project$Lia$Markdown$Parser$problem,
				A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$Paragraph, $author$project$Lia$Markdown$Parser$md_annotations))
			]));
}
function $author$project$Lia$Markdown$Parser$cyclic$unordered_list() {
	return A2(
		$andre_dietrich$parser_combinators$Combine$sepBy1,
		A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			$author$project$Lia$Parser$Indentation$check,
			A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Helper$newline),
				$andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check))),
		A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			$author$project$Lia$Parser$Indentation$pop,
			A2(
				$andre_dietrich$parser_combinators$Combine$keep,
				A2(
					$andre_dietrich$parser_combinators$Combine$keep,
					A2(
						$andre_dietrich$parser_combinators$Combine$sepBy1,
						$andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Markdown$Parser$newlineWithIndentation),
						$author$project$Lia$Markdown$Parser$cyclic$blocks()),
					$andre_dietrich$parser_combinators$Combine$regex('[ \t]*[*+-][ \t]+')),
				$author$project$Lia$Parser$Indentation$push('  '))));
}
function $author$project$Lia$Markdown$Parser$cyclic$solution() {
	var rslt = F3(
		function (e1, blocks_, e2) {
			return _Utils_Tuple2(blocks_, e2 - e1);
		});
	return $andre_dietrich$parser_combinators$Combine$maybe(
		A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			$andre_dietrich$parser_combinators$Combine$withState(
				function (s) {
					return $andre_dietrich$parser_combinators$Combine$succeed(s.effect_model.effects);
				}),
			A2(
				$andre_dietrich$parser_combinators$Combine$andMap,
				A2(
					$andre_dietrich$parser_combinators$Combine$manyTill,
					A2(
						$andre_dietrich$parser_combinators$Combine$ignore,
						$author$project$Lia$Parser$Helper$newlines,
						$author$project$Lia$Markdown$Parser$cyclic$blocks()),
					$andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\*{3,}[\t ]*')),
				A2(
					$andre_dietrich$parser_combinators$Combine$map,
					rslt,
					A2(
						$andre_dietrich$parser_combinators$Combine$keep,
						$andre_dietrich$parser_combinators$Combine$withState(
							function (s) {
								return $andre_dietrich$parser_combinators$Combine$succeed(s.effect_model.effects);
							}),
						$andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\*{3,}[\t ]*\\n+'))))));
}
function $author$project$Lia$Markdown$Parser$cyclic$run() {
	return A2(
		$andre_dietrich$parser_combinators$Combine$ignore,
		$author$project$Lia$Markdown$Parser$cyclic$footnotes(),
		$andre_dietrich$parser_combinators$Combine$many(
			A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$author$project$Lia$Parser$Helper$newlines,
				A2(
					$andre_dietrich$parser_combinators$Combine$keep,
					$author$project$Lia$Markdown$Parser$cyclic$blocks(),
					$author$project$Lia$Markdown$Parser$cyclic$footnotes()))));
}
function $author$project$Lia$Markdown$Parser$cyclic$quote() {
	return A2(
		$andre_dietrich$parser_combinators$Combine$ignore,
		$author$project$Lia$Parser$Indentation$pop,
		A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			A2(
				$andre_dietrich$parser_combinators$Combine$sepBy,
				$andre_dietrich$parser_combinators$Combine$many(
					A2(
						$andre_dietrich$parser_combinators$Combine$ignore,
						$andre_dietrich$parser_combinators$Combine$string('\n'),
						$author$project$Lia$Parser$Indentation$check)),
				$author$project$Lia$Markdown$Parser$cyclic$blocks()),
			A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$author$project$Lia$Parser$Indentation$push('> ?'),
				A2(
					$andre_dietrich$parser_combinators$Combine$ignore,
					$andre_dietrich$parser_combinators$Combine$regex('> ?'),
					A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$Quote, $author$project$Lia$Markdown$Parser$md_annotations)))));
}
function $author$project$Lia$Markdown$Parser$cyclic$ordered_list() {
	return A2(
		$andre_dietrich$parser_combinators$Combine$sepBy1,
		A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			$author$project$Lia$Parser$Indentation$check,
			A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Helper$newline),
				$andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check))),
		A2(
			$andre_dietrich$parser_combinators$Combine$ignore,
			$author$project$Lia$Parser$Indentation$pop,
			A2(
				$andre_dietrich$parser_combinators$Combine$keep,
				A2(
					$andre_dietrich$parser_combinators$Combine$andMap,
					A2(
						$andre_dietrich$parser_combinators$Combine$sepBy1,
						$andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Markdown$Parser$newlineWithIndentation),
						$author$project$Lia$Markdown$Parser$cyclic$blocks()),
					A2(
						$andre_dietrich$parser_combinators$Combine$ignore,
						$andre_dietrich$parser_combinators$Combine$regex('\\.[ \t]*'),
						A2(
							$andre_dietrich$parser_combinators$Combine$map,
							$elm$core$Tuple$pair,
							$andre_dietrich$parser_combinators$Combine$regex('[ \t]*-?\\d+')))),
				$author$project$Lia$Parser$Indentation$push('   '))));
}
function $author$project$Lia$Markdown$Parser$cyclic$footnotes() {
	return $andre_dietrich$parser_combinators$Combine$skip(
		$andre_dietrich$parser_combinators$Combine$many(
			A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$author$project$Lia$Parser$Helper$newlines,
				$author$project$Lia$Markdown$Footnote$Parser$block(
					$author$project$Lia$Markdown$Parser$cyclic$ident_blocks()))));
}
function $author$project$Lia$Markdown$Parser$cyclic$ident_blocks() {
	return A2(
		$andre_dietrich$parser_combinators$Combine$ignore,
		$author$project$Lia$Parser$Indentation$pop,
		$andre_dietrich$parser_combinators$Combine$many1(
			A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$andre_dietrich$parser_combinators$Combine$regex('\n?'),
				$author$project$Lia$Markdown$Parser$cyclic$blocks())));
}
function $author$project$Lia$Markdown$Parser$cyclic$blocks() {
	return $andre_dietrich$parser_combinators$Combine$lazy(
		function (_v5) {
			return A2(
				$andre_dietrich$parser_combinators$Combine$ignore,
				$andre_dietrich$parser_combinators$Combine$maybe(
					A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Effect$Parser$hidden_comment, $andre_dietrich$parser_combinators$Combine$whitespace)),
				A2(
					$andre_dietrich$parser_combinators$Combine$keep,
					$author$project$Lia$Markdown$Parser$cyclic$elements(),
					A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Macro$Parser$macro, $author$project$Lia$Parser$Indentation$check)));
		});
}
function $author$project$Lia$Markdown$Parser$cyclic$svgbob() {
	return A2(
		$andre_dietrich$parser_combinators$Combine$andMap,
		A2(
			$andre_dietrich$parser_combinators$Combine$andThen,
			$author$project$Lia$Markdown$Parser$svgbobSub,
			A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Parser$svgbody, $author$project$Lia$Parser$Helper$c_frame)),
		A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$ASCII, $author$project$Lia$Markdown$Parser$md_annotations));
}
try {
	var $author$project$Lia$Markdown$Parser$elements = $author$project$Lia$Markdown$Parser$cyclic$elements();
	$author$project$Lia$Markdown$Parser$cyclic$elements = function () {
		return $author$project$Lia$Markdown$Parser$elements;
	};
	var $author$project$Lia$Markdown$Parser$unordered_list = $author$project$Lia$Markdown$Parser$cyclic$unordered_list();
	$author$project$Lia$Markdown$Parser$cyclic$unordered_list = function () {
		return $author$project$Lia$Markdown$Parser$unordered_list;
	};
	var $author$project$Lia$Markdown$Parser$solution = $author$project$Lia$Markdown$Parser$cyclic$solution();
	$author$project$Lia$Markdown$Parser$cyclic$solution = function () {
		return $author$project$Lia$Markdown$Parser$solution;
	};
	var $author$project$Lia$Markdown$Parser$run = $author$project$Lia$Markdown$Parser$cyclic$run();
	$author$project$Lia$Markdown$Parser$cyclic$run = function () {
		return $author$project$Lia$Markdown$Parser$run;
	};
	var $author$project$Lia$Markdown$Parser$quote = $author$project$Lia$Markdown$Parser$cyclic$quote();
	$author$project$Lia$Markdown$Parser$cyclic$quote = function () {
		return $author$project$Lia$Markdown$Parser$quote;
	};
	var $author$project$Lia$Markdown$Parser$ordered_list = $author$project$Lia$Markdown$Parser$cyclic$ordered_list();
	$author$project$Lia$Markdown$Parser$cyclic$ordered_list = function () {
		return $author$project$Lia$Markdown$Parser$ordered_list;
	};
	var $author$project$Lia$Markdown$Parser$footnotes = $author$project$Lia$Markdown$Parser$cyclic$footnotes();
	$author$project$Lia$Markdown$Parser$cyclic$footnotes = function () {
		return $author$project$Lia$Markdown$Parser$footnotes;
	};
	var $author$project$Lia$Markdown$Parser$ident_blocks = $author$project$Lia$Markdown$Parser$cyclic$ident_blocks();
	$author$project$Lia$Markdown$Parser$cyclic$ident_blocks = function () {
		return $author$project$Lia$Markdown$Parser$ident_blocks;
	};
	var $author$project$Lia$Markdown$Parser$blocks = $author$project$Lia$Markdown$Parser$cyclic$blocks();
	$author$project$Lia$Markdown$Parser$cyclic$blocks = function () {
		return $author$project$Lia$Markdown$Parser$blocks;
	};
	var $author$project$Lia$Markdown$Parser$svgbob = $author$project$Lia$Markdown$Parser$cyclic$svgbob();
	$author$project$Lia$Markdown$Parser$cyclic$svgbob = function () {
		return $author$project$Lia$Markdown$Parser$svgbob;
	};
} catch ($) {
	throw 'Some top-level definitions from `Lia.Markdown.Parser` are causing infinite recursion:\n\n  ┌─────┐\n  │    elements\n  │     ↓\n  │    unordered_list\n  │     ↓\n  │    solution\n  │     ↓\n  │    run\n  │     ↓\n  │    quote\n  │     ↓\n  │    ordered_list\n  │     ↓\n  │    footnotes\n  │     ↓\n  │    ident_blocks\n  │     ↓\n  │    blocks\n  │     ↓\n  │    svgbob\n  │     ↓\n  │    svgbobSub\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $author$project$Lia$Parser$Parser$parse_section = F3(
	function (search_index, global, sec) {
		var _v0 = A3(
			$andre_dietrich$parser_combinators$Combine$runParser,
			A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Parser$run, $author$project$Lia$Definition$Parser$parse),
			A2(
				$author$project$Lia$Parser$Context$init,
				$elm$core$Maybe$Just(search_index),
				_Utils_update(
					global,
					{section: sec.id})),
			sec.code);
		if (_v0.$ === 'Ok') {
			var _v1 = _v0.a;
			var state = _v1.a;
			var es = _v1.c;
			return A3($author$project$Lia$Parser$Parser$return, sec, state, es);
		} else {
			var _v2 = _v0.a;
			var stream = _v2.b;
			var ms = _v2.c;
			return $elm$core$Result$Err(
				A2($author$project$Lia$Parser$Parser$formatError, ms, stream));
		}
	});
var $author$project$Lia$Update$set_active_section = F2(
	function (model, section) {
		return _Utils_update(
			model,
			{
				sections: A3($elm$core$Array$set, model.section_active, section, model.sections)
			});
	});
var $author$project$Lia$Update$generate = function (model) {
	var _v0 = $author$project$Lia$Update$get_active_section(model);
	if (_v0.$ === 'Just') {
		var sec = _v0.a;
		var section = function () {
			if (sec.parsed) {
				var effects = sec.effect_model;
				return _Utils_update(
					sec,
					{
						effect_model: _Utils_update(
							effects,
							{visible: 0})
					});
			} else {
				var _v2 = A3($author$project$Lia$Parser$Parser$parse_section, model.search_index, model.definition, sec);
				if (_v2.$ === 'Ok') {
					var new_sec = _v2.a;
					return new_sec;
				} else {
					var msg = _v2.a;
					return _Utils_update(
						sec,
						{
							body: _List_Nil,
							error: $elm$core$Maybe$Just(msg)
						});
				}
			}
		}();
		var _v1 = A2(
			$author$project$Lia$Model$loadResource,
			model.resource,
			A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.resources;
					},
					section.definition)));
		var resource = _v1.a;
		var logs = _v1.b;
		return A2(
			$author$project$Lia$Update$set_active_section,
			_Utils_update(
				model,
				{
					resource: resource,
					to_do: A4(
						$author$project$Lia$Update$add_load,
						section.task_vector,
						model.section_active,
						'task',
						A4(
							$author$project$Lia$Update$add_load,
							section.survey_vector,
							model.section_active,
							'survey',
							A4(
								$author$project$Lia$Update$add_load,
								section.code_vector,
								model.section_active,
								'code',
								A4(
									$author$project$Lia$Update$add_load,
									section.quiz_vector,
									model.section_active,
									'quiz',
									A2($elm$core$List$append, logs, model.to_do)))))
				}),
			section);
	} else {
		return model;
	}
};
var $author$project$Lia$Markdown$Update$UpdateCode = function (a) {
	return {$: 'UpdateCode', a: a};
};
var $author$project$Lia$Markdown$Update$UpdateEffect = F2(
	function (a, b) {
		return {$: 'UpdateEffect', a: a, b: b};
	});
var $author$project$Lia$Markdown$Update$UpdateQuiz = function (a) {
	return {$: 'UpdateQuiz', a: a};
};
var $author$project$Lia$Markdown$Update$UpdateSurvey = function (a) {
	return {$: 'UpdateSurvey', a: a};
};
var $author$project$Lia$Markdown$Update$UpdateTask = function (a) {
	return {$: 'UpdateTask', a: a};
};
var $author$project$Lia$Markdown$Code$Update$Handle = function (a) {
	return {$: 'Handle', a: a};
};
var $author$project$Lia$Markdown$Code$Update$handle = $author$project$Lia$Markdown$Code$Update$Handle;
var $author$project$Lia$Markdown$Effect$Update$Handle = function (a) {
	return {$: 'Handle', a: a};
};
var $author$project$Lia$Markdown$Effect$Update$handle = $author$project$Lia$Markdown$Effect$Update$Handle;
var $author$project$Lia$Markdown$Quiz$Update$Handle = function (a) {
	return {$: 'Handle', a: a};
};
var $author$project$Lia$Markdown$Quiz$Update$handle = $author$project$Lia$Markdown$Quiz$Update$Handle;
var $author$project$Lia$Markdown$Survey$Update$Handle = function (a) {
	return {$: 'Handle', a: a};
};
var $author$project$Lia$Markdown$Survey$Update$handle = $author$project$Lia$Markdown$Survey$Update$Handle;
var $author$project$Lia$Markdown$Task$Update$Handle = function (a) {
	return {$: 'Handle', a: a};
};
var $author$project$Lia$Markdown$Task$Update$handle = $author$project$Lia$Markdown$Task$Update$Handle;
var $author$project$Lia$Markdown$Update$send = function (name) {
	return $elm$core$List$map(
		$elm$core$Tuple$pair(name));
};
var $author$project$Lia$Section$SubSection = function (a) {
	return {$: 'SubSection', a: a};
};
var $author$project$Lia$Section$SubSubSection = function (a) {
	return {$: 'SubSubSection', a: a};
};
var $author$project$Lia$Markdown$Code$Log$HTML = {$: 'HTML'};
var $author$project$Lia$Markdown$Code$Log$Warn = {$: 'Warn'};
var $author$project$Lia$Markdown$Code$Update$clr = function (project) {
	var _v0 = A2($elm$core$Array$get, project.version_active, project.version);
	if (_v0.$ === 'Just') {
		var _v1 = _v0.a;
		var code = _v1.a;
		return _Utils_update(
			project,
			{
				log: $author$project$Lia$Markdown$Code$Log$empty,
				version: A3(
					$elm$core$Array$set,
					project.version_active,
					_Utils_Tuple2(code, $author$project$Lia$Markdown$Code$Log$empty),
					project.version)
			});
	} else {
		return project;
	}
};
var $author$project$Port$Eval$replace_0 = function (replacement) {
	return A2(
		$elm$core$Basics$composeR,
		A2(
			$elm$core$String$replace,
			'@\'input',
			$author$project$Lia$Utils$toEscapeString(replacement)),
		A2($elm$core$String$replace, '@input', replacement));
};
var $author$project$Port$Eval$replace_id = function (_v0) {
	var id = _v0.a;
	var insert = _v0.b;
	return A2(
		$elm$core$Basics$composeR,
		A2(
			$elm$core$String$replace,
			'@\'input(' + ($elm$core$String$fromInt(id) + ')'),
			$author$project$Lia$Utils$toEscapeString(insert)),
		A2(
			$elm$core$String$replace,
			'@input(' + ($elm$core$String$fromInt(id) + ')'),
			insert));
};
var $author$project$Port$Eval$replace_input = function (_v0) {
	var key = _v0.a;
	var insert = _v0.b;
	return A2(
		$elm$core$Basics$composeR,
		A2(
			$elm$core$String$replace,
			'@\'input(`' + (key + '`)'),
			$author$project$Lia$Utils$toEscapeString(insert)),
		A2($elm$core$String$replace, '@input(`' + (key + '`)'), insert));
};
var $author$project$Port$Eval$event = F4(
	function (id, code, scripts, inputs) {
		var _default = $author$project$Lia$Utils$toJSstring(
			A2(
				$elm$core$Maybe$withDefault,
				'',
				$elm$core$List$head(inputs)));
		var code_ = A3($elm$core$List$foldl, $author$project$Port$Eval$replace_input, code, scripts);
		return A3(
			$author$project$Port$Event$Event,
			'eval',
			id,
			$elm$json$Json$Encode$string(
				A2(
					$author$project$Port$Eval$replace_0,
					_default,
					A3(
						$elm$core$List$foldl,
						$author$project$Port$Eval$replace_id,
						code_,
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (i, r) {
									return _Utils_Tuple2(
										i,
										$author$project$Lia$Utils$toJSstring(r));
								}),
							inputs)))));
	});
var $author$project$Lia$Markdown$Effect$Script$Types$outputs = A2(
	$elm$core$Basics$composeR,
	$elm$core$Array$toList,
	$elm$core$List$filterMap(
		function (js) {
			var _v0 = _Utils_Tuple2(js.output, js.result);
			if (((_v0.a.$ === 'Just') && (_v0.b.$ === 'Just')) && (_v0.b.a.$ === 'Text')) {
				var output = _v0.a.a;
				var result = _v0.b.a.a;
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(output, result));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}));
var $author$project$Lia$Markdown$Code$Events$eval = F3(
	function (scripts, idx, project) {
		return _List_fromArray(
			[
				A4(
				$author$project$Port$Eval$event,
				idx,
				project.evaluation,
				$author$project$Lia$Markdown$Effect$Script$Types$outputs(scripts),
				$elm$core$Array$toList(
					A2(
						$elm$core$Array$map,
						function ($) {
							return $.code;
						},
						project.file)))
			]);
	});
var $author$project$Lia$Markdown$Code$Update$eval = F3(
	function (scripts, idx, project) {
		return _Utils_Tuple2(
			_Utils_update(
				project,
				{running: true}),
			A3($author$project$Lia$Markdown$Code$Events$eval, scripts, idx, project));
	});
var $author$project$Port$Eval$decoder = A4(
	$elm$json$Json$Decode$map3,
	$author$project$Port$Eval$Eval,
	A2($elm$json$Json$Decode$field, 'ok', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'result', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'details',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$value)));
var $author$project$Port$Eval$decode = function (json) {
	var _v0 = A2($elm$json$Json$Decode$decodeValue, $author$project$Port$Eval$decoder, json);
	if (_v0.$ === 'Ok') {
		var result = _v0.a;
		return result;
	} else {
		var info = _v0.a;
		return A3(
			$author$project$Port$Eval$Eval,
			false,
			$elm$json$Json$Decode$errorToString(info),
			_List_Nil);
	}
};
var $author$project$Lia$Markdown$Code$Events$evalDecode = function (event) {
	return $author$project$Port$Eval$decode(event.message);
};
var $elm$json$Json$Encode$bool = _Json_wrap;
var $author$project$Lia$Markdown$Code$Events$toggle = F4(
	function (message, id1, id2, value) {
		return _List_fromArray(
			[
				A3(
				$author$project$Port$Event$Event,
				'flip',
				id1,
				$author$project$Port$Event$encode(
					A3(
						$author$project$Port$Event$Event,
						message,
						id2,
						$elm$json$Json$Encode$bool(value))))
			]);
	});
var $author$project$Lia$Markdown$Code$Events$flip_view = F3(
	function (id1, id2, file) {
		return A4($author$project$Lia$Markdown$Code$Events$toggle, 'view', id1, id2, file.visible);
	});
var $author$project$Lia$Markdown$Code$Events$fullscreen = F3(
	function (id1, id2, file) {
		return A4($author$project$Lia$Markdown$Code$Events$toggle, 'fullscreen', id1, id2, file.fullscreen);
	});
var $author$project$Lia$Markdown$Code$Terminal$Terminal = F3(
	function (input, history, history_value) {
		return {history: history, history_value: history_value, input: input};
	});
var $author$project$Lia$Markdown$Code$Terminal$init = A3($author$project$Lia$Markdown$Code$Terminal$Terminal, '', $elm$core$Array$empty, 0);
var $author$project$Lia$Markdown$Code$Events$input = F2(
	function (idx, string) {
		return A3(
			$author$project$Port$Event$Event,
			'input',
			idx,
			$elm$json$Json$Encode$string(string));
	});
var $elm$core$Dict$diff = F2(
	function (t1, t2) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, t) {
					return A2($elm$core$Dict$remove, k, t);
				}),
			t1,
			t2);
	});
var $author$project$Lia$Markdown$Code$Types$updateVersion = function (project) {
	var code = A2(
		$elm$core$Array$map,
		function ($) {
			return $.code;
		},
		project.file);
	var hashes = $elm$core$Array$toList(
		A2($elm$core$Array$map, $truqu$elm_md5$MD5$hex, code));
	if (A2(
		$elm$core$Maybe$withDefault,
		false,
		A2(
			$elm$core$Maybe$map,
			$elm$core$Basics$neq(hashes),
			A2(
				$elm$core$Maybe$map,
				$elm$core$Tuple$first,
				A2($elm$core$Array$get, project.version_active, project.version))))) {
		var repository = A2(
			$elm$core$Dict$union,
			project.repository,
			$elm$core$Dict$fromList(
				A3(
					$elm$core$List$map2,
					$elm$core$Tuple$pair,
					hashes,
					$elm$core$Array$toList(code))));
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(
				_Utils_update(
					project,
					{
						log: $author$project$Lia$Markdown$Code$Log$empty,
						repository: repository,
						version: A2(
							$elm$core$Array$push,
							_Utils_Tuple2(hashes, $author$project$Lia$Markdown$Code$Log$empty),
							project.version),
						version_active: $elm$core$Array$length(project.version)
					}),
				A2($elm$core$Dict$diff, repository, project.repository)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$json$Json$Encode$array = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$Array$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var $elm$json$Json$Encode$dict = F3(
	function (toKey, toValue, dictionary) {
		return _Json_wrap(
			A3(
				$elm$core$Dict$foldl,
				F3(
					function (key, value, obj) {
						return A3(
							_Json_addField,
							toKey(key),
							toValue(value),
							obj);
					}),
				_Json_emptyObject(_Utils_Tuple0),
				dictionary));
	});
var $author$project$Lia$Markdown$Code$Log$encLevel = function (level) {
	return $elm$json$Json$Encode$int(
		function () {
			switch (level.$) {
				case 'Debug':
					return -1;
				case 'Info':
					return 0;
				case 'Warn':
					return 1;
				case 'Error':
					return 2;
				default:
					return 3;
			}
		}());
};
var $author$project$Lia$Markdown$Code$Log$encMessage = function (_v0) {
	var level = _v0.level;
	var text = _v0.text;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'level',
				$author$project$Lia$Markdown$Code$Log$encLevel(level)),
				_Utils_Tuple2(
				'text',
				$elm$json$Json$Encode$string(text))
			]));
};
var $author$project$Lia$Markdown$Code$Log$encode = function (log) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'ok',
				$elm$json$Json$Encode$bool(log.ok)),
				_Utils_Tuple2(
				'level',
				$author$project$Lia$Markdown$Code$Log$encLevel(log.level)),
				_Utils_Tuple2(
				'messages',
				A2($elm$json$Json$Encode$array, $author$project$Lia$Markdown$Code$Log$encMessage, log.messages)),
				_Utils_Tuple2(
				'details',
				A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, log.details))
			]));
};
var $author$project$Lia$Markdown$Code$Json$fromFile = function (file) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'lang',
				$elm$json$Json$Encode$string(file.lang)),
				_Utils_Tuple2(
				'name',
				$elm$json$Json$Encode$string(file.name)),
				_Utils_Tuple2(
				'code',
				$elm$json$Json$Encode$string(file.code)),
				_Utils_Tuple2(
				'visible',
				$elm$json$Json$Encode$bool(file.visible)),
				_Utils_Tuple2(
				'fullscreen',
				$elm$json$Json$Encode$bool(file.fullscreen))
			]));
};
var $author$project$Lia$Markdown$Code$Json$fromVersion = function (_v0) {
	var hashes = _v0.a;
	var log = _v0.b;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'hashes',
				A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, hashes)),
				_Utils_Tuple2(
				'log',
				$author$project$Lia$Markdown$Code$Log$encode(log))
			]));
};
var $author$project$Lia$Markdown$Code$Events$version_append = F3(
	function (idx, project, repo_update) {
		return A3(
			$author$project$Port$Event$Event,
			'version_append',
			idx,
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'version_active',
						$elm$json$Json$Encode$int(project.version_active)),
						_Utils_Tuple2(
						'log',
						$author$project$Lia$Markdown$Code$Log$encode(project.log)),
						_Utils_Tuple2(
						'file',
						A2($elm$json$Json$Encode$array, $author$project$Lia$Markdown$Code$Json$fromFile, project.file)),
						_Utils_Tuple2(
						'version',
						function () {
							var _v0 = A2(
								$elm$core$Array$get,
								$elm$core$Array$length(project.version) - 1,
								project.version);
							if (_v0.$ === 'Just') {
								var version = _v0.a;
								return $author$project$Lia$Markdown$Code$Json$fromVersion(version);
							} else {
								return $elm$json$Json$Encode$null;
							}
						}()),
						_Utils_Tuple2(
						'repository',
						A3($elm$json$Json$Encode$dict, $elm$core$Basics$identity, $elm$json$Json$Encode$string, repo_update))
					])));
	});
var $author$project$Lia$Markdown$Code$Update$is_version_new = F2(
	function (idx, _v0) {
		var project = _v0.a;
		var events = _v0.b;
		var _v1 = $author$project$Lia$Markdown$Code$Types$updateVersion(project);
		if (_v1.$ === 'Just') {
			var _v2 = _v1.a;
			var new_project = _v2.a;
			var repo_update = _v2.b;
			return _Utils_Tuple2(
				new_project,
				A2(
					$elm$core$List$cons,
					A3($author$project$Lia$Markdown$Code$Events$version_append, idx, new_project, repo_update),
					events));
		} else {
			return _Utils_Tuple2(project, events);
		}
	});
var $author$project$Lia$Markdown$Code$Events$load = F2(
	function (idx, project) {
		return _Utils_Tuple2(
			project,
			_List_fromArray(
				[
					A3(
					$author$project$Port$Event$Event,
					'load',
					idx,
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'file',
								A2($elm$json$Json$Encode$array, $author$project$Lia$Markdown$Code$Json$fromFile, project.file)),
								_Utils_Tuple2(
								'version_active',
								$elm$json$Json$Encode$int(project.version_active)),
								_Utils_Tuple2(
								'log',
								$author$project$Lia$Markdown$Code$Log$encode(project.log))
							])))
				]));
	});
var $author$project$Lia$Markdown$Code$Types$loadVersion = F2(
	function (idx, project) {
		var _v0 = A2($elm$core$Array$get, idx, project.version);
		if (_v0.$ === 'Just') {
			var _v1 = _v0.a;
			var hashes = _v1.a;
			var log = _v1.b;
			var get = function (h) {
				return A2($elm$core$Dict$get, h, project.repository);
			};
			var code = $elm$core$Array$fromList(
				A2($elm$core$List$map, get, hashes));
			return _Utils_update(
				project,
				{
					file: A2(
						$elm$core$Array$indexedMap,
						F2(
							function (i, a) {
								return _Utils_update(
									a,
									{
										code: function () {
											var _v2 = A2($elm$core$Array$get, i, code);
											if ((_v2.$ === 'Just') && (_v2.a.$ === 'Just')) {
												var str = _v2.a.a;
												return str;
											} else {
												return a.code;
											}
										}()
									});
							}),
						project.file),
					log: log,
					version_active: idx
				});
		} else {
			return project;
		}
	});
var $author$project$Lia$Markdown$Code$Update$logger = F4(
	function (fn, level, event_str, project) {
		var _v0 = _Utils_Tuple2(
			A2($elm$core$Array$get, project.version_active, project.version),
			A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$string, event_str));
		if ((_v0.a.$ === 'Just') && (_v0.b.$ === 'Ok')) {
			var _v1 = _v0.a.a;
			var code = _v1.a;
			var str = _v0.b.a;
			return _Utils_update(
				project,
				{
					log: A3(fn, level, str, project.log),
					version: A3(
						$elm$core$Array$set,
						project.version_active,
						_Utils_Tuple2(
							code,
							A3(fn, level, str, project.log)),
						project.version)
				});
		} else {
			return project;
		}
	});
var $author$project$Lia$Markdown$Code$Update$maybe_project = F3(
	function (idx, f, model) {
		return A2(
			$elm$core$Maybe$map,
			f,
			A2($elm$core$Array$get, idx, model));
	});
var $author$project$Lia$Markdown$Code$Update$maybe_update = F3(
	function (idx, model, project) {
		if (project.$ === 'Just') {
			var _v1 = project.a;
			var p = _v1.a;
			var logs = _v1.b;
			return _Utils_Tuple2(
				A3($elm$core$Array$set, idx, p, model),
				_Utils_eq(logs, _List_Nil) ? _List_Nil : logs);
		} else {
			return _Utils_Tuple2(model, _List_Nil);
		}
	});
var $author$project$Lia$Markdown$Code$Json$copy = F2(
	function (old, _new) {
		return _Utils_update(
			_new,
			{evaluation: old.evaluation});
	});
var $author$project$Lia$Markdown$Code$Json$merge = F2(
	function (old, _new) {
		return $elm$core$Array$fromList(
			A3(
				$elm$core$List$map2,
				$author$project$Lia$Markdown$Code$Json$copy,
				$elm$core$Array$toList(old),
				$elm$core$Array$toList(_new)));
	});
var $author$project$Lia$Markdown$Code$Json$fromProject = function (p) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'file',
				A2($elm$json$Json$Encode$array, $author$project$Lia$Markdown$Code$Json$fromFile, p.file)),
				_Utils_Tuple2(
				'version',
				A2($elm$json$Json$Encode$array, $author$project$Lia$Markdown$Code$Json$fromVersion, p.version)),
				_Utils_Tuple2(
				'version_active',
				$elm$json$Json$Encode$int(p.version_active)),
				_Utils_Tuple2(
				'log',
				$author$project$Lia$Markdown$Code$Log$encode(p.log)),
				_Utils_Tuple2(
				'repository',
				A3($elm$json$Json$Encode$dict, $elm$core$Basics$identity, $elm$json$Json$Encode$string, p.repository)),
				_Utils_Tuple2(
				'compact_view',
				$elm$json$Json$Encode$bool(p.compact_view))
			]));
};
var $author$project$Lia$Markdown$Code$Json$fromVector = function (vector) {
	return A2($elm$json$Json$Encode$array, $author$project$Lia$Markdown$Code$Json$fromProject, vector);
};
var $author$project$Port$Event$store = A2($author$project$Port$Event$Event, 'store', -1);
var $author$project$Lia$Markdown$Code$Events$store = function (model) {
	return $author$project$Port$Event$store(
		$author$project$Lia$Markdown$Code$Json$fromVector(model));
};
var $elm$json$Json$Decode$nullable = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				$elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder)
			]));
};
var $author$project$Lia$Markdown$Code$Log$decLevel = A2(
	$elm$json$Json$Decode$andThen,
	function (_int) {
		return $elm$json$Json$Decode$succeed(
			function () {
				switch (_int) {
					case 0:
						return $author$project$Lia$Markdown$Code$Log$Info;
					case 1:
						return $author$project$Lia$Markdown$Code$Log$Warn;
					case 2:
						return $author$project$Lia$Markdown$Code$Log$Error;
					default:
						return $author$project$Lia$Markdown$Code$Log$Debug;
				}
			}());
	},
	$elm$json$Json$Decode$int);
var $author$project$Lia$Markdown$Code$Log$decMessage = A3(
	$elm$json$Json$Decode$map2,
	$author$project$Lia$Markdown$Code$Log$Message,
	A2($elm$json$Json$Decode$field, 'level', $author$project$Lia$Markdown$Code$Log$decLevel),
	A2($elm$json$Json$Decode$field, 'text', $elm$json$Json$Decode$string));
var $author$project$Lia$Markdown$Code$Log$decoder = A5(
	$elm$json$Json$Decode$map4,
	$author$project$Lia$Markdown$Code$Log$Log,
	A2($elm$json$Json$Decode$field, 'ok', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'level', $author$project$Lia$Markdown$Code$Log$decLevel),
	A2(
		$elm$json$Json$Decode$field,
		'messages',
		$elm$json$Json$Decode$array($author$project$Lia$Markdown$Code$Log$decMessage)),
	A2(
		$elm$json$Json$Decode$field,
		'details',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$value)));
var $author$project$Lia$Markdown$Code$Types$Project = function (file) {
	return function (focus) {
		return function (version) {
			return function (version_active) {
				return function (repository) {
					return function (evaluation) {
						return function (log) {
							return function (running) {
								return function (terminal) {
									return function (compact_view) {
										return function (attr) {
											return {attr: attr, compact_view: compact_view, evaluation: evaluation, file: file, focus: focus, log: log, repository: repository, running: running, terminal: terminal, version: version, version_active: version_active};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Lia$Markdown$Code$Json$project = F6(
	function (files, version, active, log, repository, compact) {
		return $author$project$Lia$Markdown$Code$Types$Project(files)(-1)(version)(active)(repository)('')(log)(false)($elm$core$Maybe$Nothing)(compact);
	});
var $author$project$Lia$Markdown$Code$Json$toFile = A6(
	$elm$json$Json$Decode$map5,
	$author$project$Lia$Markdown$Code$Types$File,
	A2($elm$json$Json$Decode$field, 'lang', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'code', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'visible', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'fullscreen', $elm$json$Json$Decode$bool));
var $author$project$Lia$Markdown$Code$Json$toVersion = A3(
	$elm$json$Json$Decode$map2,
	$elm$core$Tuple$pair,
	A2(
		$elm$json$Json$Decode$field,
		'hashes',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	A2($elm$json$Json$Decode$field, 'log', $author$project$Lia$Markdown$Code$Log$decoder));
var $author$project$Lia$Markdown$Code$Json$toProject = A7(
	$elm$json$Json$Decode$map6,
	$author$project$Lia$Markdown$Code$Json$project,
	A2(
		$elm$json$Json$Decode$field,
		'file',
		$elm$json$Json$Decode$array($author$project$Lia$Markdown$Code$Json$toFile)),
	A2(
		$elm$json$Json$Decode$field,
		'version',
		$elm$json$Json$Decode$array($author$project$Lia$Markdown$Code$Json$toVersion)),
	A2($elm$json$Json$Decode$field, 'version_active', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'log', $author$project$Lia$Markdown$Code$Log$decoder),
	A2(
		$elm$json$Json$Decode$field,
		'repository',
		$elm$json$Json$Decode$dict($elm$json$Json$Decode$string)),
	A2($elm$json$Json$Decode$field, 'compact_view', $elm$json$Json$Decode$bool));
var $author$project$Lia$Markdown$Code$Json$toVector = F2(
	function (json, attrs) {
		return A2(
			$elm$core$Result$map,
			$elm$core$Maybe$map(
				A2(
					$elm$core$Basics$composeR,
					$elm$core$Array$toList,
					A2(
						$elm$core$Basics$composeR,
						A2(
							$elm$core$List$map2,
							F2(
								function (a, p) {
									return p(a);
								}),
							attrs),
						$elm$core$Array$fromList))),
			A2(
				$elm$json$Json$Decode$decodeValue,
				$elm$json$Json$Decode$nullable(
					$elm$json$Json$Decode$array($author$project$Lia$Markdown$Code$Json$toProject)),
				json));
	});
var $author$project$Lia$Markdown$Code$Update$restore = F2(
	function (json, model) {
		var _v0 = A2(
			$author$project$Lia$Markdown$Code$Json$toVector,
			json,
			$elm$core$Array$toList(
				A2(
					$elm$core$Array$map,
					function ($) {
						return $.attr;
					},
					model)));
		if (_v0.$ === 'Ok') {
			if (_v0.a.$ === 'Just') {
				var model_ = _v0.a.a;
				return _Utils_Tuple2(
					A2($author$project$Lia$Markdown$Code$Json$merge, model, model_),
					_List_Nil);
			} else {
				var _v1 = _v0.a;
				return _Utils_Tuple2(
					model,
					(!$elm$core$Array$length(model)) ? _List_Nil : _List_fromArray(
						[
							$author$project$Lia$Markdown$Code$Events$store(model)
						]));
			}
		} else {
			return _Utils_Tuple2(model, _List_Nil);
		}
	});
var $author$project$Lia$Markdown$Code$Update$set_result = F3(
	function (_continue, e, project) {
		var _v0 = A2($elm$core$Array$get, project.version_active, project.version);
		if (_v0.$ === 'Just') {
			var _v1 = _v0.a;
			var code = _v1.a;
			return _Utils_update(
				project,
				{
					log: A2($author$project$Lia$Markdown$Code$Log$add_Eval, e, project.log),
					running: _continue ? project.running : false,
					version: A3(
						$elm$core$Array$set,
						project.version_active,
						_Utils_Tuple2(
							code,
							A2($author$project$Lia$Markdown$Code$Log$add_Eval, e, project.log)),
						project.version)
				});
		} else {
			return project;
		}
	});
var $author$project$Lia$Markdown$Code$Events$stop = function (idx) {
	return _List_fromArray(
		[
			A3($author$project$Port$Event$Event, 'stop', idx, $elm$json$Json$Encode$null)
		]);
};
var $author$project$Lia$Markdown$Code$Update$stop = function (project) {
	var _v0 = A2($elm$core$Array$get, project.version_active, project.version);
	if (_v0.$ === 'Just') {
		var _v1 = _v0.a;
		var code = _v1.a;
		return _Utils_update(
			project,
			{
				running: false,
				terminal: $elm$core$Maybe$Nothing,
				version: A3(
					$elm$core$Array$set,
					project.version_active,
					_Utils_Tuple2(code, project.log),
					project.version)
			});
	} else {
		return project;
	}
};
var $author$project$Lia$Markdown$Code$Update$update_file = F5(
	function (id_1, id_2, model, f, f_log) {
		var _v0 = A2($elm$core$Array$get, id_1, model);
		if (_v0.$ === 'Just') {
			var project = _v0.a;
			var _v1 = A2(
				$elm$core$Maybe$map,
				f,
				A2($elm$core$Array$get, id_2, project.file));
			if (_v1.$ === 'Just') {
				var file = _v1.a;
				return _Utils_Tuple2(
					A3(
						$elm$core$Array$set,
						id_1,
						_Utils_update(
							project,
							{
								file: A3($elm$core$Array$set, id_2, file, project.file)
							}),
						model),
					f_log(file));
			} else {
				return _Utils_Tuple2(model, _List_Nil);
			}
		} else {
			return _Utils_Tuple2(model, _List_Nil);
		}
	});
var $author$project$Lia$Markdown$Code$Terminal$print_to = function (terminal) {
	return (A2(
		$elm$core$Maybe$withDefault,
		true,
		A2(
			$elm$core$Maybe$map,
			function (h) {
				return !_Utils_eq(h, terminal.input);
			},
			A2($elm$core$Array$get, terminal.history_value, terminal.history))) && (terminal.input !== '')) ? _Utils_update(
		terminal,
		{
			history: A2($elm$core$Array$push, terminal.input, terminal.history),
			history_value: $elm$core$Array$length(terminal.history) + 1,
			input: ''
		}) : _Utils_update(
		terminal,
		{history_value: terminal.history_value + 1, input: ''});
};
var $author$project$Lia$Markdown$Code$Terminal$restore_input = F2(
	function (up, terminal) {
		var new_hist = up ? (terminal.history_value - 1) : (terminal.history_value + 1);
		var _v0 = A2($elm$core$Array$get, new_hist, terminal.history);
		if (_v0.$ === 'Just') {
			var str = _v0.a;
			return _Utils_update(
				terminal,
				{history_value: new_hist, input: str});
		} else {
			return terminal;
		}
	});
var $author$project$Lia$Markdown$Code$Terminal$update = F2(
	function (msg, terminal) {
		if (msg.$ === 'KeyDown') {
			var key = msg.a;
			return (key === 13) ? _Utils_Tuple2(
				$author$project$Lia$Markdown$Code$Terminal$print_to(terminal),
				$elm$core$Maybe$Just(terminal.input + '\n')) : ((key === 38) ? _Utils_Tuple2(
				A2($author$project$Lia$Markdown$Code$Terminal$restore_input, true, terminal),
				$elm$core$Maybe$Nothing) : ((key === 40) ? _Utils_Tuple2(
				A2($author$project$Lia$Markdown$Code$Terminal$restore_input, false, terminal),
				$elm$core$Maybe$Nothing) : _Utils_Tuple2(terminal, $elm$core$Maybe$Nothing)));
		} else {
			var str = msg.a;
			return _Utils_Tuple2(
				_Utils_update(
					terminal,
					{input: str}),
				$elm$core$Maybe$Nothing);
		}
	});
var $author$project$Lia$Markdown$Code$Update$update_terminal = F3(
	function (f, msg, project) {
		var _v0 = A2(
			$elm$core$Maybe$map,
			$author$project$Lia$Markdown$Code$Terminal$update(msg),
			project.terminal);
		if (_v0.$ === 'Just') {
			if (_v0.a.b.$ === 'Nothing') {
				var _v1 = _v0.a;
				var terminal = _v1.a;
				var _v2 = _v1.b;
				return _Utils_Tuple2(
					_Utils_update(
						project,
						{
							terminal: $elm$core$Maybe$Just(terminal)
						}),
					_List_Nil);
			} else {
				var _v3 = _v0.a;
				var terminal = _v3.a;
				var str = _v3.b.a;
				return _Utils_Tuple2(
					_Utils_update(
						project,
						{
							log: A3($author$project$Lia$Markdown$Code$Log$add, $author$project$Lia$Markdown$Code$Log$Info, str, project.log),
							terminal: $elm$core$Maybe$Just(terminal)
						}),
					_List_fromArray(
						[
							f(str)
						]));
			}
		} else {
			return _Utils_Tuple2(project, _List_Nil);
		}
	});
var $author$project$Lia$Markdown$Code$Events$version_update = F2(
	function (idx, project) {
		return _Utils_Tuple2(
			project,
			_List_fromArray(
				[
					A3(
					$author$project$Port$Event$Event,
					'version_update',
					idx,
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'version_active',
								$elm$json$Json$Encode$int(project.version_active)),
								_Utils_Tuple2(
								'log',
								$author$project$Lia$Markdown$Code$Log$encode(project.log)),
								_Utils_Tuple2(
								'version',
								function () {
									var _v0 = A2($elm$core$Array$get, project.version_active, project.version);
									if (_v0.$ === 'Just') {
										var version = _v0.a;
										return $author$project$Lia$Markdown$Code$Json$fromVersion(version);
									} else {
										return $elm$json$Json$Encode$null;
									}
								}())
							])))
				]));
	});
var $author$project$Lia$Markdown$Code$Update$update = F3(
	function (scripts, msg, model) {
		switch (msg.$) {
			case 'Eval':
				var idx = msg.a;
				return A3(
					$author$project$Lia$Markdown$Code$Update$maybe_update,
					idx,
					model,
					A2(
						$elm$core$Maybe$map,
						$author$project$Lia$Markdown$Code$Update$is_version_new(idx),
						A3(
							$author$project$Lia$Markdown$Code$Update$maybe_project,
							idx,
							A2($author$project$Lia$Markdown$Code$Update$eval, scripts, idx),
							model)));
			case 'Update':
				var id_1 = msg.a;
				var id_2 = msg.b;
				var code_str = msg.c;
				return A5(
					$author$project$Lia$Markdown$Code$Update$update_file,
					id_1,
					id_2,
					model,
					function (f) {
						return _Utils_update(
							f,
							{code: code_str});
					},
					function (_v1) {
						return _List_Nil;
					});
			case 'FlipView':
				var id_1 = msg.a;
				var id_2 = msg.b;
				return A5(
					$author$project$Lia$Markdown$Code$Update$update_file,
					id_1,
					id_2,
					model,
					function (f) {
						return _Utils_update(
							f,
							{visible: !f.visible});
					},
					A2($author$project$Lia$Markdown$Code$Events$flip_view, id_1, id_2));
			case 'FlipFullscreen':
				var id_1 = msg.a;
				var id_2 = msg.b;
				return A5(
					$author$project$Lia$Markdown$Code$Update$update_file,
					id_1,
					id_2,
					model,
					function (f) {
						return _Utils_update(
							f,
							{fullscreen: !f.fullscreen});
					},
					A2($author$project$Lia$Markdown$Code$Events$fullscreen, id_1, id_2));
			case 'Load':
				var idx = msg.a;
				var version = msg.b;
				return A3(
					$author$project$Lia$Markdown$Code$Update$maybe_update,
					idx,
					model,
					A2(
						$elm$core$Maybe$map,
						$author$project$Lia$Markdown$Code$Events$load(idx),
						A3(
							$author$project$Lia$Markdown$Code$Update$maybe_project,
							idx,
							$author$project$Lia$Markdown$Code$Types$loadVersion(version),
							model)));
			case 'First':
				var idx = msg.a;
				return A3(
					$author$project$Lia$Markdown$Code$Update$maybe_update,
					idx,
					model,
					A2(
						$elm$core$Maybe$map,
						$author$project$Lia$Markdown$Code$Events$load(idx),
						A3(
							$author$project$Lia$Markdown$Code$Update$maybe_project,
							idx,
							$author$project$Lia$Markdown$Code$Types$loadVersion(0),
							model)));
			case 'Last':
				var idx = msg.a;
				var version = A2(
					$elm$core$Maybe$withDefault,
					0,
					A3(
						$author$project$Lia$Markdown$Code$Update$maybe_project,
						idx,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.version;
							},
							A2(
								$elm$core$Basics$composeR,
								$elm$core$Array$length,
								$elm$core$Basics$add(-1))),
						model));
				return A3(
					$author$project$Lia$Markdown$Code$Update$maybe_update,
					idx,
					model,
					A2(
						$elm$core$Maybe$map,
						$author$project$Lia$Markdown$Code$Events$load(idx),
						A3(
							$author$project$Lia$Markdown$Code$Update$maybe_project,
							idx,
							$author$project$Lia$Markdown$Code$Types$loadVersion(version),
							model)));
			case 'Handle':
				var event = msg.a;
				var _v2 = event.topic;
				switch (_v2) {
					case 'eval':
						var e = $author$project$Lia$Markdown$Code$Events$evalDecode(event);
						var _v3 = e.result;
						switch (_v3) {
							case 'LIA: wait':
								return A3(
									$author$project$Lia$Markdown$Code$Update$maybe_update,
									event.section,
									model,
									A2(
										$elm$core$Maybe$map,
										function (p) {
											return _Utils_Tuple2(p, _List_Nil);
										},
										A3(
											$author$project$Lia$Markdown$Code$Update$maybe_project,
											event.section,
											function (p) {
												return _Utils_update(
													p,
													{log: $author$project$Lia$Markdown$Code$Log$empty});
											},
											model)));
							case 'LIA: stop':
								return A3(
									$author$project$Lia$Markdown$Code$Update$maybe_update,
									event.section,
									model,
									A2(
										$elm$core$Maybe$map,
										$author$project$Lia$Markdown$Code$Events$version_update(event.section),
										A3($author$project$Lia$Markdown$Code$Update$maybe_project, event.section, $author$project$Lia$Markdown$Code$Update$stop, model)));
							case 'LIA: clear':
								return A3(
									$author$project$Lia$Markdown$Code$Update$maybe_update,
									event.section,
									model,
									A2(
										$elm$core$Maybe$map,
										function (p) {
											return _Utils_Tuple2(p, _List_Nil);
										},
										A3($author$project$Lia$Markdown$Code$Update$maybe_project, event.section, $author$project$Lia$Markdown$Code$Update$clr, model)));
							case 'LIA: terminal':
								return A3(
									$author$project$Lia$Markdown$Code$Update$maybe_update,
									event.section,
									model,
									A2(
										$elm$core$Maybe$map,
										function (p) {
											return _Utils_Tuple2(p, _List_Nil);
										},
										A3(
											$author$project$Lia$Markdown$Code$Update$maybe_project,
											event.section,
											function (p) {
												return _Utils_update(
													p,
													{
														terminal: $elm$core$Maybe$Just($author$project$Lia$Markdown$Code$Terminal$init)
													});
											},
											model)));
							default:
								return A3(
									$author$project$Lia$Markdown$Code$Update$maybe_update,
									event.section,
									model,
									A2(
										$elm$core$Maybe$map,
										$author$project$Lia$Markdown$Code$Events$version_update(event.section),
										A3(
											$author$project$Lia$Markdown$Code$Update$maybe_project,
											event.section,
											A2($author$project$Lia$Markdown$Code$Update$set_result, false, e),
											model)));
						}
					case 'restore':
						return A2($author$project$Lia$Markdown$Code$Update$restore, event.message, model);
					case 'debug':
						return A3(
							$author$project$Lia$Markdown$Code$Update$maybe_update,
							event.section,
							model,
							A2(
								$elm$core$Maybe$map,
								function (p) {
									return _Utils_Tuple2(p, _List_Nil);
								},
								A3(
									$author$project$Lia$Markdown$Code$Update$maybe_project,
									event.section,
									A3($author$project$Lia$Markdown$Code$Update$logger, $author$project$Lia$Markdown$Code$Log$add, $author$project$Lia$Markdown$Code$Log$Debug, event.message),
									model)));
					case 'info':
						return A3(
							$author$project$Lia$Markdown$Code$Update$maybe_update,
							event.section,
							model,
							A2(
								$elm$core$Maybe$map,
								function (p) {
									return _Utils_Tuple2(p, _List_Nil);
								},
								A3(
									$author$project$Lia$Markdown$Code$Update$maybe_project,
									event.section,
									A3($author$project$Lia$Markdown$Code$Update$logger, $author$project$Lia$Markdown$Code$Log$add, $author$project$Lia$Markdown$Code$Log$Info, event.message),
									model)));
					case 'warn':
						return A3(
							$author$project$Lia$Markdown$Code$Update$maybe_update,
							event.section,
							model,
							A2(
								$elm$core$Maybe$map,
								function (p) {
									return _Utils_Tuple2(p, _List_Nil);
								},
								A3(
									$author$project$Lia$Markdown$Code$Update$maybe_project,
									event.section,
									A3($author$project$Lia$Markdown$Code$Update$logger, $author$project$Lia$Markdown$Code$Log$add, $author$project$Lia$Markdown$Code$Log$Warn, event.message),
									model)));
					case 'error':
						return A3(
							$author$project$Lia$Markdown$Code$Update$maybe_update,
							event.section,
							model,
							A2(
								$elm$core$Maybe$map,
								function (p) {
									return _Utils_Tuple2(p, _List_Nil);
								},
								A3(
									$author$project$Lia$Markdown$Code$Update$maybe_project,
									event.section,
									A3($author$project$Lia$Markdown$Code$Update$logger, $author$project$Lia$Markdown$Code$Log$add, $author$project$Lia$Markdown$Code$Log$Error, event.message),
									model)));
					case 'html':
						return A3(
							$author$project$Lia$Markdown$Code$Update$maybe_update,
							event.section,
							model,
							A2(
								$elm$core$Maybe$map,
								function (p) {
									return _Utils_Tuple2(p, _List_Nil);
								},
								A3(
									$author$project$Lia$Markdown$Code$Update$maybe_project,
									event.section,
									A3($author$project$Lia$Markdown$Code$Update$logger, $author$project$Lia$Markdown$Code$Log$add, $author$project$Lia$Markdown$Code$Log$HTML, event.message),
									model)));
					default:
						return _Utils_Tuple2(model, _List_Nil);
				}
			case 'Stop':
				var idx = msg.a;
				return A3(
					$author$project$Lia$Markdown$Code$Update$maybe_update,
					idx,
					model,
					A2(
						$elm$core$Maybe$map,
						function (p) {
							return _Utils_Tuple2(
								p,
								$author$project$Lia$Markdown$Code$Events$stop(idx));
						},
						A3(
							$author$project$Lia$Markdown$Code$Update$maybe_project,
							idx,
							function (p) {
								return _Utils_update(
									p,
									{running: false, terminal: $elm$core$Maybe$Nothing});
							},
							model)));
			default:
				var idx = msg.a;
				var childMsg = msg.b;
				return A3(
					$author$project$Lia$Markdown$Code$Update$maybe_update,
					idx,
					model,
					A3(
						$author$project$Lia$Markdown$Code$Update$maybe_project,
						idx,
						A2(
							$author$project$Lia$Markdown$Code$Update$update_terminal,
							$author$project$Lia$Markdown$Code$Events$input(idx),
							childMsg),
						model));
		}
	});
var $author$project$Lia$Markdown$Effect$Script$Update$Handle = function (a) {
	return {$: 'Handle', a: a};
};
var $author$project$Lia$Markdown$Effect$Update$Rendered = F2(
	function (a, b) {
		return {$: 'Rendered', a: a, b: b};
	});
var $author$project$Lia$Markdown$Effect$Update$Script = function (a) {
	return {$: 'Script', a: a};
};
var $author$project$Lia$Markdown$Effect$Update$Send = function (a) {
	return {$: 'Send', a: a};
};
var $author$project$Port$TTS$cancel = A3(
	$author$project$Port$Event$Event,
	'speak',
	-1,
	$elm$json$Json$Encode$string('cancel'));
var $author$project$Lia$Markdown$Effect$Model$current_comment = function (model) {
	return A2(
		$elm$core$Maybe$map,
		function (e) {
			return _Utils_Tuple2(e.comment, e.narrator);
		},
		A2($elm$core$Dict$get, model.visible, model.comments));
};
var $author$project$Lia$Markdown$Effect$Script$Update$execute = F2(
	function (delay, _v0) {
		var id = _v0.a;
		var code = _v0.b;
		return A3(
			$author$project$Port$Event$Event,
			'execute',
			id,
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'delay',
						$elm$json$Json$Encode$int(delay)),
						_Utils_Tuple2(
						'code',
						$elm$json$Json$Encode$string(code)),
						_Utils_Tuple2(
						'id',
						$elm$json$Json$Encode$int(id))
					])));
	});
var $elm$core$Tuple$mapSecond = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var $elm$core$Array$toIndexedList = function (array) {
	var len = array.a;
	var helper = F2(
		function (entry, _v0) {
			var index = _v0.a;
			var list = _v0.b;
			return _Utils_Tuple2(
				index - 1,
				A2(
					$elm$core$List$cons,
					_Utils_Tuple2(index, entry),
					list));
		});
	return A3(
		$elm$core$Array$foldr,
		helper,
		_Utils_Tuple2(len - 1, _List_Nil),
		array).b;
};
var $author$project$Lia$Markdown$Effect$Script$Types$filterMap = F2(
	function (filter, map) {
		return A2(
			$elm$core$Basics$composeR,
			$elm$core$Array$toIndexedList,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$List$filter(
					A2($elm$core$Basics$composeR, $elm$core$Tuple$second, filter)),
				$elm$core$List$map(
					$elm$core$Tuple$mapSecond(map))));
	});
var $author$project$Lia$Markdown$Effect$Script$Update$getIdle = $author$project$Lia$Markdown$Effect$Script$Types$filterMap(
	function (js) {
		return (!js.running) && (!(js.runOnce && (js.counter >= 1)));
	});
var $author$project$Lia$Markdown$Effect$Script$Input$getValue = function (i) {
	return ((!_Utils_eq(i.type_, $elm$core$Maybe$Nothing)) && (!_Utils_eq(
		i.type_,
		$elm$core$Maybe$Just($author$project$Lia$Markdown$Effect$Script$Input$Button_)))) ? $elm$core$Maybe$Just(i.value) : $elm$core$Maybe$Nothing;
};
var $author$project$Lia$Markdown$Effect$Script$Types$replaceInputs = function (javascript) {
	var inputs = $author$project$Lia$Markdown$Effect$Script$Types$outputs(javascript);
	return $elm$core$List$map(
		function (_v0) {
			var id = _v0.a;
			var script = _v0.b;
			var input_ = _v0.c;
			return _Utils_Tuple2(
				id,
				function (code) {
					if (input_.$ === 'Just') {
						var str = input_.a;
						return A2($author$project$Port$Eval$replace_0, str, code);
					} else {
						return code;
					}
				}(
					A3($elm$core$List$foldl, $author$project$Port$Eval$replace_input, script, inputs)));
		});
};
var $author$project$Lia$Markdown$Effect$Script$Update$getAll = function (javascript) {
	return A2(
		$author$project$Lia$Markdown$Effect$Script$Types$replaceInputs,
		javascript,
		A2(
			$elm$core$List$map,
			function (_v0) {
				var id = _v0.a;
				var node = _v0.b;
				return _Utils_Tuple3(
					id,
					node.script,
					$author$project$Lia$Markdown$Effect$Script$Input$getValue(node.input));
			},
			A2($author$project$Lia$Markdown$Effect$Script$Update$getIdle, $elm$core$Basics$identity, javascript)));
};
var $elm$browser$Browser$Dom$getViewport = _Browser_withWindow(_Browser_getViewport);
var $author$project$Lia$Markdown$Effect$Script$Update$getVisible = F2(
	function (visible, javascript) {
		return A2(
			$author$project$Lia$Markdown$Effect$Script$Types$replaceInputs,
			javascript,
			A2(
				$elm$core$List$filterMap,
				function (_v0) {
					var id = _v0.a;
					var node = _v0.b;
					return _Utils_eq(node.effect_id, visible) ? $elm$core$Maybe$Just(
						_Utils_Tuple3(
							id,
							node.script,
							$author$project$Lia$Markdown$Effect$Script$Input$getValue(node.input))) : $elm$core$Maybe$Nothing;
				},
				A2($author$project$Lia$Markdown$Effect$Script$Update$getIdle, $elm$core$Basics$identity, javascript)));
	});
var $author$project$Lia$Markdown$Effect$Update$has_next = function (model) {
	return _Utils_cmp(model.visible, model.effects) < 0;
};
var $author$project$Lia$Markdown$Effect$Update$has_previous = function (model) {
	return model.visible > 0;
};
var $author$project$Lia$Markdown$Effect$Script$Types$set = F3(
	function (idx, fn, javascript) {
		var _v0 = A2($elm$core$Array$get, idx, javascript);
		if (_v0.$ === 'Just') {
			var js = _v0.a;
			return A3(
				$elm$core$Array$set,
				idx,
				fn(js),
				javascript);
		} else {
			return javascript;
		}
	});
var $author$project$Lia$Markdown$Effect$Script$Update$setRunning = F3(
	function (id, state, javascript) {
		return A3(
			$author$project$Lia$Markdown$Effect$Script$Types$set,
			id,
			function (js) {
				return _Utils_update(
					js,
					{running: state});
			},
			javascript);
	});
var $author$project$Lia$Markdown$Effect$Update$markRunning = function (_v0) {
	var model = _v0.a;
	var cmd = _v0.b;
	var events = _v0.c;
	return _Utils_Tuple3(
		_Utils_update(
			model,
			{
				javascript: A3(
					$elm$core$List$foldl,
					F2(
						function (e, js) {
							return (e.section < 0) ? js : A3($author$project$Lia$Markdown$Effect$Script$Update$setRunning, e.section, true, js);
						}),
					model.javascript,
					events)
			}),
		cmd,
		events);
};
var $author$project$Port$TTS$mute = function (id) {
	return A3(
		$author$project$Port$Event$Event,
		'speak',
		id,
		$elm$json$Json$Encode$string('cancel'));
};
var $author$project$Port$TTS$playback = F3(
	function (id, voice, text) {
		return A3(
			$author$project$Port$Event$Event,
			'speak',
			id,
			A2(
				$elm$json$Json$Encode$list,
				$elm$json$Json$Encode$string,
				_List_fromArray(
					[voice, text, 'true'])));
	});
var $author$project$Port$TTS$speak = F3(
	function (loud, voice, text) {
		return A3(
			$author$project$Port$Event$Event,
			'speak',
			-1,
			A2(
				$elm$json$Json$Encode$list,
				$elm$json$Json$Encode$string,
				_List_fromArray(
					[
						voice,
						text,
						loud ? 'true' : 'false'
					])));
	});
var $author$project$Lia$Markdown$Effect$Script$Types$IFrame = function (a) {
	return {$: 'IFrame', a: a};
};
var $author$project$Lia$Markdown$Effect$Script$Update$NoOp = {$: 'NoOp'};
var $author$project$Lia$Markdown$Effect$Script$Update$Sub = F2(
	function (a, b) {
		return {$: 'Sub', a: a, b: b};
	});
var $author$project$Lia$Markdown$Effect$Script$Input$active = F2(
	function (bool, i) {
		return _Utils_update(
			i,
			{
				active: i.alwaysActive ? true : bool
			});
	});
var $elm$core$Task$onError = _Scheduler_onError;
var $elm$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2(
					$elm$core$Task$onError,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
						$elm$core$Result$Err),
					A2(
						$elm$core$Task$andThen,
						A2(
							$elm$core$Basics$composeL,
							A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
							$elm$core$Result$Ok),
						task))));
	});
var $author$project$Lia$Markdown$Effect$Script$Input$default = function (i) {
	return _Utils_update(
		i,
		{value: i._default});
};
var $elm$browser$Browser$Dom$focus = _Browser_call('focus');
var $author$project$Lia$Markdown$Effect$Script$Types$get = F2(
	function (fn, id) {
		return A2(
			$elm$core$Basics$composeR,
			$elm$core$Array$get(id),
			$elm$core$Maybe$map(fn));
	});
var $author$project$Lia$Markdown$Effect$Script$Update$reRun = F4(
	function (fn, cmd, id, scripts) {
		var scripts_ = A3(
			$author$project$Lia$Markdown$Effect$Script$Types$set,
			id,
			function (js) {
				return fn(
					js.running ? _Utils_update(
						js,
						{update: true}) : js);
			},
			scripts);
		var _v0 = A3($author$project$Lia$Markdown$Effect$Script$Types$get, $elm$core$Basics$identity, id, scripts_);
		if (_v0.$ === 'Just') {
			var node = _v0.a;
			return _Utils_Tuple3(
				scripts_,
				cmd,
				node.running ? _List_Nil : A2(
					$elm$core$List$map,
					$author$project$Lia$Markdown$Effect$Script$Update$execute(0),
					A2(
						$author$project$Lia$Markdown$Effect$Script$Types$replaceInputs,
						scripts,
						_List_fromArray(
							[
								_Utils_Tuple3(
								id,
								node.script,
								$author$project$Lia$Markdown$Effect$Script$Input$getValue(node.input))
							]))));
		} else {
			return _Utils_Tuple3(scripts_, cmd, _List_Nil);
		}
	});
var $author$project$Lia$Markdown$Effect$Script$Types$scriptChildren = F2(
	function (output, javascript) {
		return A2(
			$author$project$Lia$Markdown$Effect$Script$Types$replaceInputs,
			javascript,
			A2(
				$elm$core$List$filterMap,
				function (_v0) {
					var i = _v0.a;
					var js = _v0.b;
					return ((!js.running) && A2($elm$core$List$member, output, js.inputs)) ? $elm$core$Maybe$Just(
						_Utils_Tuple3(
							i,
							js.script,
							$author$project$Lia$Markdown$Effect$Script$Input$getValue(js.input))) : $elm$core$Maybe$Nothing;
				},
				$elm$core$Array$toIndexedList(javascript)));
	});
var $elm$core$Result$toMaybe = function (result) {
	if (result.$ === 'Ok') {
		var v = result.a;
		return $elm$core$Maybe$Just(v);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Lia$Markdown$Effect$Script$Input$decodeList = A2(
	$elm$core$Basics$composeR,
	$elm$json$Json$Decode$decodeString(
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	$elm$core$Result$toMaybe);
var $author$project$Lia$Markdown$Effect$Script$Input$encodeList = A2(
	$elm$core$Basics$composeR,
	$elm$json$Json$Encode$list($elm$json$Json$Encode$string),
	$elm$json$Json$Encode$encode(0));
var $author$project$Lia$Markdown$Effect$Script$Input$toggle = F2(
	function (str, i) {
		return _Utils_update(
			i,
			{
				value: $author$project$Lia$Markdown$Effect$Script$Input$encodeList(
					function () {
						var _v0 = $author$project$Lia$Markdown$Effect$Script$Input$decodeList(i.value);
						if (_v0.$ === 'Just') {
							var list = _v0.a;
							return A2($elm$core$List$member, str, list) ? A2(
								$elm$core$List$filter,
								$elm$core$Basics$neq(str),
								list) : A2($elm$core$List$cons, str, list);
						} else {
							return _List_Nil;
						}
					}())
			});
	});
var $author$project$Lia$Markdown$Effect$Script$Types$updateChildren = function (output) {
	return $elm$core$Array$map(
		function (js) {
			return (js.running && A2($elm$core$List$member, output, js.inputs)) ? _Utils_update(
				js,
				{update: true}) : js;
		});
};
var $author$project$Lia$Markdown$Effect$Script$Types$Error = function (a) {
	return {$: 'Error', a: a};
};
var $author$project$Lia$Markdown$Effect$Script$Types$HTML = function (a) {
	return {$: 'HTML', a: a};
};
var $author$project$Lia$Parser$Parser$parse_subsection = function (code) {
	var _v0 = A3(
		$andre_dietrich$parser_combinators$Combine$runParser,
		A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Parser$run, $author$project$Lia$Definition$Parser$parse),
		A2(
			$author$project$Lia$Parser$Context$init,
			$elm$core$Maybe$Nothing,
			$author$project$Lia$Definition$Types$default('')),
		$elm$core$String$trim(code) + '\n');
	if (_v0.$ === 'Ok') {
		var _v1 = _v0.a;
		var state = _v1.a;
		var es = _v1.c;
		return $elm$core$Result$Ok(
			function () {
				if (((es.b && (es.a.$ === 'Paragraph')) && (!es.a.a.b)) && (!es.b.b)) {
					var _v3 = es.a;
					var sub = _v3.b;
					return $author$project$Lia$Section$SubSubSection(
						{body: sub, effect_model: state.effect_model, error: $elm$core$Maybe$Nothing});
				} else {
					return $author$project$Lia$Section$SubSection(
						{body: es, code_vector: state.code_vector, effect_model: state.effect_model, error: $elm$core$Maybe$Nothing, footnote2show: $elm$core$Maybe$Nothing, footnotes: state.footnotes, quiz_vector: state.quiz_vector, survey_vector: state.survey_vector, table_vector: state.table_vector, task_vector: state.task_vector});
				}
			}());
	} else {
		var _v4 = _v0.a;
		var stream = _v4.b;
		var ms = _v4.c;
		return $elm$core$Result$Err(
			A2($author$project$Lia$Parser$Parser$formatError, ms, stream));
	}
};
var $author$project$Lia$Markdown$Effect$Script$Update$eval_ = F2(
	function (e, js) {
		var waiting = e.result === 'LIA: wait';
		return _Utils_update(
			js,
			{
				counter: js.counter + 1,
				result: waiting ? js.result : ((e.result === 'LIA: stop') ? js.result : $elm$core$Maybe$Just(
					function () {
						if (e.ok) {
							if (A2($elm$core$String$startsWith, 'HTML:', e.result)) {
								return $author$project$Lia$Markdown$Effect$Script$Types$HTML(
									A2($elm$core$String$dropLeft, 5, e.result));
							} else {
								if (A2($elm$core$String$startsWith, 'LIASCRIPT:', e.result)) {
									var _v0 = $author$project$Lia$Parser$Parser$parse_subsection(
										A2($elm$core$String$dropLeft, 10, e.result));
									if (_v0.$ === 'Ok') {
										var rslt = _v0.a;
										return $author$project$Lia$Markdown$Effect$Script$Types$IFrame(rslt);
									} else {
										var info = _v0.a;
										return $author$project$Lia$Markdown$Effect$Script$Types$Error(info);
									}
								} else {
									return $author$project$Lia$Markdown$Effect$Script$Types$Text(e.result);
								}
							}
						} else {
							return $author$project$Lia$Markdown$Effect$Script$Types$Error(e.result);
						}
					}())),
				running: waiting
			});
	});
var $author$project$Lia$Markdown$Effect$Script$Update$update_ = F3(
	function (id, e, scripts) {
		var _v0 = A2($elm$core$Array$get, id, scripts);
		if (_v0.$ === 'Just') {
			var js = _v0.a;
			var _new = A2(
				$author$project$Lia$Markdown$Effect$Script$Update$eval_,
				$author$project$Port$Eval$decode(e),
				js);
			return _Utils_Tuple2(
				!_Utils_eq(_new.result, js.result),
				A3($elm$core$Array$set, id, _new, scripts));
		} else {
			return _Utils_Tuple2(false, scripts);
		}
	});
var $author$project$Lia$Markdown$Effect$Script$Input$value = F2(
	function (str, i) {
		return _Utils_update(
			i,
			{value: str});
	});
var $author$project$Lia$Markdown$Effect$Script$Update$update = F3(
	function (main, msg, scripts) {
		switch (msg.$) {
			case 'Sub':
				var id = msg.a;
				var sub = msg.b;
				var _v1 = A2(
					$elm$core$Maybe$andThen,
					function ($) {
						return $.result;
					},
					A2($elm$core$Array$get, id, scripts));
				if ((_v1.$ === 'Just') && (_v1.a.$ === 'IFrame')) {
					var lia = _v1.a.a;
					var _v2 = A3(main.update, scripts, sub, lia);
					var _new = _v2.a;
					var cmd = _v2.b;
					var events = _v2.c;
					return _Utils_Tuple3(
						A3(
							$author$project$Lia$Markdown$Effect$Script$Types$set,
							id,
							function (s) {
								return _Utils_update(
									s,
									{
										result: $elm$core$Maybe$Just(
											$author$project$Lia$Markdown$Effect$Script$Types$IFrame(_new))
									});
							},
							scripts),
						A2(
							$elm$core$Platform$Cmd$map,
							$author$project$Lia$Markdown$Effect$Script$Update$Sub(id),
							cmd),
						A2(
							$elm$core$List$map,
							A2($author$project$Port$Event$Event, 'sub', id),
							A2(
								$elm$core$List$map,
								function (_v3) {
									var name = _v3.a;
									var json = _v3.b;
									return $author$project$Port$Event$encode(
										A3($author$project$Port$Event$Event, name, id, json));
								},
								events)));
				} else {
					return _Utils_Tuple3(scripts, $elm$core$Platform$Cmd$none, _List_Nil);
				}
			case 'Activate':
				var active = msg.a;
				var id = msg.b;
				var _v4 = A2($elm$core$Array$get, id, scripts);
				if (_v4.$ === 'Just') {
					var node = _v4.a;
					return (!active) ? A4(
						$author$project$Lia$Markdown$Effect$Script$Update$reRun,
						function (js) {
							return _Utils_update(
								js,
								{
									input: node.updated ? js.input : A2($author$project$Lia$Markdown$Effect$Script$Input$active, active, js.input),
									updated: false
								});
						},
						$elm$core$Platform$Cmd$none,
						id,
						scripts) : _Utils_Tuple3(
						A3(
							$elm$core$Array$set,
							id,
							_Utils_update(
								node,
								{
									input: node.updated ? node.input : A2($author$project$Lia$Markdown$Effect$Script$Input$active, active, node.input),
									updated: false
								}),
							scripts),
						active ? A2(
							$elm$core$Task$attempt,
							$elm$core$Basics$always($author$project$Lia$Markdown$Effect$Script$Update$NoOp),
							$elm$browser$Browser$Dom$focus('lia-focus')) : $elm$core$Platform$Cmd$none,
						_List_Nil);
				} else {
					return _Utils_Tuple3(scripts, $elm$core$Platform$Cmd$none, _List_Nil);
				}
			case 'Value':
				var id = msg.a;
				var exec = msg.b;
				var str = msg.c;
				return exec ? A4(
					$author$project$Lia$Markdown$Effect$Script$Update$reRun,
					function (js) {
						return _Utils_update(
							js,
							{
								input: A2($author$project$Lia$Markdown$Effect$Script$Input$value, str, js.input)
							});
					},
					$elm$core$Platform$Cmd$none,
					id,
					scripts) : _Utils_Tuple3(
					A3(
						$author$project$Lia$Markdown$Effect$Script$Types$set,
						id,
						function (js) {
							return _Utils_update(
								js,
								{
									input: A2($author$project$Lia$Markdown$Effect$Script$Input$value, str, js.input)
								});
						},
						scripts),
					$elm$core$Platform$Cmd$none,
					_List_Nil);
			case 'Checkbox':
				var id = msg.a;
				var exec = msg.b;
				var str = msg.c;
				return exec ? A4(
					$author$project$Lia$Markdown$Effect$Script$Update$reRun,
					function (js) {
						return _Utils_update(
							js,
							{
								input: A2($author$project$Lia$Markdown$Effect$Script$Input$toggle, str, js.input),
								updated: true
							});
					},
					$elm$core$Platform$Cmd$none,
					id,
					scripts) : _Utils_Tuple3(
					A3(
						$author$project$Lia$Markdown$Effect$Script$Types$set,
						id,
						function (js) {
							return _Utils_update(
								js,
								{
									input: A2($author$project$Lia$Markdown$Effect$Script$Input$toggle, str, js.input),
									updated: true
								});
						},
						scripts),
					$elm$core$Platform$Cmd$none,
					_List_Nil);
			case 'Radio':
				var id = msg.a;
				var exec = msg.b;
				var str = msg.c;
				return exec ? A4(
					$author$project$Lia$Markdown$Effect$Script$Update$reRun,
					function (js) {
						return _Utils_update(
							js,
							{
								input: A2($author$project$Lia$Markdown$Effect$Script$Input$value, str, js.input),
								updated: true
							});
					},
					$elm$core$Platform$Cmd$none,
					id,
					scripts) : _Utils_Tuple3(
					A3(
						$author$project$Lia$Markdown$Effect$Script$Types$set,
						id,
						function (js) {
							return _Utils_update(
								js,
								{
									input: A2($author$project$Lia$Markdown$Effect$Script$Input$value, str, js.input),
									updated: true
								});
						},
						scripts),
					$elm$core$Platform$Cmd$none,
					_List_Nil);
			case 'Click':
				var id = msg.a;
				return A4($author$project$Lia$Markdown$Effect$Script$Update$reRun, $elm$core$Basics$identity, $elm$core$Platform$Cmd$none, id, scripts);
			case 'Reset':
				var id = msg.a;
				return A4(
					$author$project$Lia$Markdown$Effect$Script$Update$reRun,
					function (js) {
						return _Utils_update(
							js,
							{
								input: A2(
									$author$project$Lia$Markdown$Effect$Script$Input$active,
									true,
									$author$project$Lia$Markdown$Effect$Script$Input$default(js.input))
							});
					},
					$elm$core$Platform$Cmd$none,
					id,
					scripts);
			case 'NoOp':
				return _Utils_Tuple3(scripts, $elm$core$Platform$Cmd$none, _List_Nil);
			case 'Delay':
				var milliseconds = msg.a;
				var subMsg = msg.b;
				return _Utils_Tuple3(
					scripts,
					A2(
						$elm$core$Task$perform,
						$elm$core$Basics$always(subMsg),
						$elm$core$Process$sleep(milliseconds)),
					_List_Nil);
			case 'Edit':
				var bool = msg.a;
				var id = msg.b;
				var fn = function (js) {
					return _Utils_update(
						js,
						{
							edit: bool,
							input: A2($author$project$Lia$Markdown$Effect$Script$Input$active, false, js.input)
						});
				};
				return bool ? _Utils_Tuple3(
					A3($author$project$Lia$Markdown$Effect$Script$Types$set, id, fn, scripts),
					A2(
						$elm$core$Task$attempt,
						$elm$core$Basics$always($author$project$Lia$Markdown$Effect$Script$Update$NoOp),
						$elm$browser$Browser$Dom$focus('lia-focus')),
					_List_Nil) : A4($author$project$Lia$Markdown$Effect$Script$Update$reRun, fn, $elm$core$Platform$Cmd$none, id, scripts);
			case 'EditCode':
				var id = msg.a;
				var str = msg.b;
				return _Utils_Tuple3(
					A3(
						$author$project$Lia$Markdown$Effect$Script$Types$set,
						id,
						function (js) {
							return _Utils_update(
								js,
								{script: str});
						},
						scripts),
					$elm$core$Platform$Cmd$none,
					_List_Nil);
			default:
				var event = msg.a;
				var _v5 = event.topic;
				switch (_v5) {
					case 'code':
						var _v6 = A3($author$project$Lia$Markdown$Effect$Script$Update$update_, event.section, event.message, scripts);
						var publish = _v6.a;
						var javascript = _v6.b;
						var node = A3($author$project$Lia$Markdown$Effect$Script$Types$get, $elm$core$Basics$identity, event.section, javascript);
						var nodeUpdate = A2(
							$elm$core$Maybe$withDefault,
							false,
							A2(
								$elm$core$Maybe$map,
								function ($) {
									return $.update;
								},
								node)) ? A2(
							$author$project$Lia$Markdown$Effect$Script$Types$replaceInputs,
							javascript,
							A2(
								$elm$core$Maybe$withDefault,
								_List_Nil,
								A2(
									$elm$core$Maybe$map,
									function (n) {
										return _List_fromArray(
											[
												_Utils_Tuple3(
												event.section,
												n.script,
												$author$project$Lia$Markdown$Effect$Script$Input$getValue(n.input))
											]);
									},
									node))) : _List_Nil;
						var _v7 = A2(
							$elm$core$Maybe$andThen,
							function ($) {
								return $.output;
							},
							node);
						if (_v7.$ === 'Nothing') {
							return _Utils_Tuple3(
								A3(
									$author$project$Lia$Markdown$Effect$Script$Types$set,
									event.section,
									function (js) {
										return _Utils_update(
											js,
											{update: false});
									},
									javascript),
								$elm$core$Platform$Cmd$none,
								A2(
									$elm$core$List$map,
									$author$project$Lia$Markdown$Effect$Script$Update$execute(0),
									nodeUpdate));
						} else {
							var output = _v7.a;
							return _Utils_Tuple3(
								A3(
									$author$project$Lia$Markdown$Effect$Script$Types$set,
									event.section,
									function (js) {
										return _Utils_update(
											js,
											{update: false});
									},
									A2($author$project$Lia$Markdown$Effect$Script$Types$updateChildren, output, javascript)),
								$elm$core$Platform$Cmd$none,
								publish ? A2(
									$elm$core$List$map,
									$author$project$Lia$Markdown$Effect$Script$Update$execute(0),
									A2(
										$elm$core$List$append,
										nodeUpdate,
										A2($author$project$Lia$Markdown$Effect$Script$Types$scriptChildren, output, javascript))) : _List_Nil);
						}
					case 'codeX':
						var _v8 = A3($author$project$Lia$Markdown$Effect$Script$Update$update_, event.section, event.message, scripts);
						var publish = _v8.a;
						var javascript = _v8.b;
						var node = A3($author$project$Lia$Markdown$Effect$Script$Types$get, $elm$core$Basics$identity, event.section, javascript);
						var _v9 = A2(
							$elm$core$Maybe$andThen,
							function ($) {
								return $.output;
							},
							node);
						if (_v9.$ === 'Nothing') {
							return _Utils_Tuple3(javascript, $elm$core$Platform$Cmd$none, _List_Nil);
						} else {
							var output = _v9.a;
							return _Utils_Tuple3(
								A2($author$project$Lia$Markdown$Effect$Script$Types$updateChildren, output, javascript),
								$elm$core$Platform$Cmd$none,
								publish ? A2(
									$elm$core$List$map,
									$author$project$Lia$Markdown$Effect$Script$Update$execute(0),
									A2($author$project$Lia$Markdown$Effect$Script$Types$scriptChildren, output, javascript)) : _List_Nil);
						}
					case 'sub':
						var _v10 = A2(
							$elm$core$Maybe$andThen,
							function ($) {
								return $.result;
							},
							A2($elm$core$Array$get, event.section, scripts));
						if ((_v10.$ === 'Just') && (_v10.a.$ === 'IFrame')) {
							var lia = _v10.a.a;
							var _v11 = A3(main.handle, scripts, event.message, lia);
							var _new = _v11.a;
							var cmd = _v11.b;
							var events = _v11.c;
							return _Utils_Tuple3(
								A3(
									$author$project$Lia$Markdown$Effect$Script$Types$set,
									event.section,
									function (s) {
										return _Utils_update(
											s,
											{
												result: $elm$core$Maybe$Just(
													$author$project$Lia$Markdown$Effect$Script$Types$IFrame(_new))
											});
									},
									scripts),
								A2(
									$elm$core$Platform$Cmd$map,
									$author$project$Lia$Markdown$Effect$Script$Update$Sub(event.section),
									cmd),
								A2(
									$elm$core$List$map,
									A2($author$project$Port$Event$Event, 'sub', event.section),
									A2(
										$elm$core$List$map,
										function (_v12) {
											var name = _v12.a;
											var json = _v12.b;
											return $author$project$Port$Event$encode(
												A3($author$project$Port$Event$Event, name, event.section, json));
										},
										events)));
						} else {
							return _Utils_Tuple3(scripts, $elm$core$Platform$Cmd$none, _List_Nil);
						}
					default:
						return _Utils_Tuple3(scripts, $elm$core$Platform$Cmd$none, _List_Nil);
				}
		}
	});
var $author$project$Lia$Markdown$Effect$Update$execute = F5(
	function (main, sound, run_all, delay, model) {
		var javascript = run_all ? $author$project$Lia$Markdown$Effect$Script$Update$getAll(model.javascript) : A2($author$project$Lia$Markdown$Effect$Script$Update$getVisible, model.visible, model.javascript);
		return A4(
			$author$project$Lia$Markdown$Effect$Update$update,
			main,
			sound,
			$author$project$Lia$Markdown$Effect$Update$Send(
				A2(
					$elm$core$List$map,
					$author$project$Lia$Markdown$Effect$Script$Update$execute(delay),
					javascript)),
			model);
	});
var $author$project$Lia$Markdown$Effect$Update$update = F4(
	function (main, sound, msg, model) {
		return $author$project$Lia$Markdown$Effect$Update$markRunning(
			function () {
				switch (msg.$) {
					case 'Init':
						var run_all_javascript = msg.a;
						return _Utils_Tuple3(
							model,
							A2(
								$elm$core$Task$perform,
								$author$project$Lia$Markdown$Effect$Update$Rendered(run_all_javascript),
								$elm$browser$Browser$Dom$getViewport),
							_List_Nil);
					case 'Next':
						return $author$project$Lia$Markdown$Effect$Update$has_next(model) ? A5(
							$author$project$Lia$Markdown$Effect$Update$execute,
							main,
							sound,
							false,
							0,
							_Utils_update(
								model,
								{visible: model.visible + 1})) : _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, _List_Nil);
					case 'Previous':
						return $author$project$Lia$Markdown$Effect$Update$has_previous(model) ? A5(
							$author$project$Lia$Markdown$Effect$Update$execute,
							main,
							sound,
							false,
							0,
							_Utils_update(
								model,
								{visible: model.visible - 1})) : _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, _List_Nil);
					case 'Speak':
						var id = msg.a;
						var voice = msg.b;
						var text = msg.c;
						return _Utils_Tuple3(
							_Utils_update(
								model,
								{
									speaking: $elm$core$Maybe$Just(id)
								}),
							$elm$core$Platform$Cmd$none,
							_List_fromArray(
								[
									A3($author$project$Port$TTS$playback, id, voice, text)
								]));
					case 'Mute':
						var id = msg.a;
						return _Utils_Tuple3(
							_Utils_update(
								model,
								{speaking: $elm$core$Maybe$Nothing}),
							$elm$core$Platform$Cmd$none,
							_List_fromArray(
								[
									$author$project$Port$TTS$mute(id)
								]));
					case 'Send':
						var event = msg.a;
						var events = A2(
							$elm$core$List$cons,
							A3(
								$author$project$Port$Event$Event,
								'scrollTo',
								-1,
								$elm$json$Json$Encode$string('focused')),
							event);
						return _Utils_Tuple3(
							model,
							$elm$core$Platform$Cmd$none,
							function () {
								var _v1 = $author$project$Lia$Markdown$Effect$Model$current_comment(model);
								if (_v1.$ === 'Just') {
									var _v2 = _v1.a;
									var comment = _v2.a;
									var narrator = _v2.b;
									return A2(
										$elm$core$List$cons,
										A3($author$project$Port$TTS$speak, sound, narrator, comment),
										events);
								} else {
									return A2($elm$core$List$cons, $author$project$Port$TTS$cancel, events);
								}
							}());
					case 'Rendered':
						var run_all_javascript = msg.a;
						return A5($author$project$Lia$Markdown$Effect$Update$execute, main, sound, run_all_javascript, 0, model);
					case 'Script':
						var childMsg = msg.a;
						var _v3 = A3($author$project$Lia$Markdown$Effect$Script$Update$update, main, childMsg, model.javascript);
						var scripts = _v3.a;
						var cmd = _v3.b;
						var events = _v3.c;
						return _Utils_Tuple3(
							_Utils_update(
								model,
								{javascript: scripts}),
							A2($elm$core$Platform$Cmd$map, $author$project$Lia$Markdown$Effect$Update$Script, cmd),
							events);
					default:
						var event = msg.a;
						var _v4 = event.topic;
						if (_v4 === 'speak') {
							var _v5 = A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$string, event.message);
							_v5$2:
							while (true) {
								if (_v5.$ === 'Ok') {
									switch (_v5.a) {
										case 'start':
											return _Utils_Tuple3(
												_Utils_update(
													model,
													{
														speaking: $elm$core$Maybe$Just(event.section)
													}),
												$elm$core$Platform$Cmd$none,
												_List_Nil);
										case 'stop':
											return _Utils_Tuple3(
												_Utils_update(
													model,
													{speaking: $elm$core$Maybe$Nothing}),
												$elm$core$Platform$Cmd$none,
												_List_Nil);
										default:
											break _v5$2;
									}
								} else {
									break _v5$2;
								}
							}
							return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, _List_Nil);
						} else {
							var _v6 = A3(
								$author$project$Lia$Markdown$Effect$Script$Update$update,
								main,
								$author$project$Lia$Markdown$Effect$Script$Update$Handle(event),
								model.javascript);
							var scripts = _v6.a;
							var cmd = _v6.b;
							var events = _v6.c;
							return _Utils_Tuple3(
								_Utils_update(
									model,
									{javascript: scripts}),
								A2($elm$core$Platform$Cmd$map, $author$project$Lia$Markdown$Effect$Update$Script, cmd),
								events);
						}
				}
			}());
	});
var $author$project$Lia$Markdown$Quiz$Types$ReSolved = {$: 'ReSolved'};
var $author$project$Lia$Markdown$Quiz$Types$Solved = {$: 'Solved'};
var $author$project$Lia$Markdown$Quiz$Block$Types$comp = F2(
	function (quiz, state) {
		var _v0 = _Utils_Tuple2(quiz.solution, state);
		_v0$2:
		while (true) {
			if (_v0.a.$ === 'Text') {
				if (_v0.b.$ === 'Text') {
					var str1 = _v0.a.a;
					var str2 = _v0.b.a;
					return _Utils_eq(str1, str2);
				} else {
					break _v0$2;
				}
			} else {
				if (((_v0.b.$ === 'Select') && _v0.b.b.b) && (!_v0.b.b.b.b)) {
					var _v1 = _v0.a;
					var list = _v1.b;
					var _v2 = _v0.b;
					var _v3 = _v2.b;
					var i = _v3.a;
					return !$elm$core$List$isEmpty(
						A2(
							$elm$core$List$filter,
							$elm$core$Basics$eq(i),
							list));
				} else {
					break _v0$2;
				}
			}
		}
		return false;
	});
var $author$project$Lia$Markdown$Quiz$Vector$Types$comp = F2(
	function (quiz, state) {
		var _v0 = _Utils_Tuple2(quiz.solution, state);
		_v0$2:
		while (true) {
			if (_v0.a.$ === 'SingleChoice') {
				if (_v0.b.$ === 'SingleChoice') {
					var list1 = _v0.a.a;
					var list2 = _v0.b.a;
					return A2(
						$elm$core$List$any,
						$elm$core$Basics$identity,
						A3(
							$elm$core$List$map2,
							F2(
								function (l1, l2) {
									return l1 && l2;
								}),
							list1,
							list2));
				} else {
					break _v0$2;
				}
			} else {
				if (_v0.b.$ === 'MultipleChoice') {
					var list1 = _v0.a.a;
					var list2 = _v0.b.a;
					return _Utils_eq(list1, list2);
				} else {
					break _v0$2;
				}
			}
		}
		return false;
	});
var $author$project$Lia$Markdown$Quiz$Matrix$Types$comp = F2(
	function (quiz, state) {
		var list2 = $elm$core$Array$toList(state);
		var list1 = A2(
			$elm$core$List$map,
			$author$project$Lia$Markdown$Quiz$Vector$Types$Quiz(_List_Nil),
			$elm$core$Array$toList(quiz.solution));
		return A2(
			$elm$core$List$all,
			$elm$core$Basics$identity,
			A3($elm$core$List$map2, $author$project$Lia$Markdown$Quiz$Vector$Types$comp, list1, list2));
	});
var $author$project$Lia$Markdown$Quiz$Types$comp = F2(
	function (quiz, state) {
		return function () {
			var _v0 = _Utils_Tuple2(quiz, state);
			_v0$3:
			while (true) {
				switch (_v0.a.$) {
					case 'Block_Type':
						if (_v0.b.$ === 'Block_State') {
							var q = _v0.a.a;
							var s = _v0.b.a;
							return A2($author$project$Lia$Markdown$Quiz$Block$Types$comp, q, s);
						} else {
							break _v0$3;
						}
					case 'Vector_Type':
						if (_v0.b.$ === 'Vector_State') {
							var q = _v0.a.a;
							var s = _v0.b.a;
							return A2($author$project$Lia$Markdown$Quiz$Vector$Types$comp, q, s);
						} else {
							break _v0$3;
						}
					case 'Matrix_Type':
						if (_v0.b.$ === 'Matrix_State') {
							var q = _v0.a.a;
							var s = _v0.b.a;
							return A2($author$project$Lia$Markdown$Quiz$Matrix$Types$comp, q, s);
						} else {
							break _v0$3;
						}
					default:
						break _v0$3;
				}
			}
			return false;
		}() ? $author$project$Lia$Markdown$Quiz$Types$Solved : $author$project$Lia$Markdown$Quiz$Types$Open;
	});
var $author$project$Lia$Markdown$Quiz$Update$check = F2(
	function (solution, e) {
		return _Utils_Tuple2(
			_Utils_update(
				e,
				{
					solved: A2($author$project$Lia$Markdown$Quiz$Types$comp, solution, e.state),
					trial: e.trial + 1
				}),
			$elm$core$Maybe$Nothing);
	});
var $author$project$Lia$Markdown$Quiz$Update$evalEventDecoder = function (json) {
	var _eval = $author$project$Port$Eval$decode(json);
	return _eval.ok ? ((_eval.result === 'true') ? function (e) {
		return _Utils_Tuple2(
			_Utils_update(
				e,
				{error_msg: '', solved: $author$project$Lia$Markdown$Quiz$Types$Solved, trial: e.trial + 1}),
			$elm$core$Maybe$Nothing);
	} : function (e) {
		return _Utils_Tuple2(
			_Utils_update(
				e,
				{error_msg: '', solved: $author$project$Lia$Markdown$Quiz$Types$Open, trial: e.trial + 1}),
			$elm$core$Maybe$Nothing);
	}) : function (e) {
		return _Utils_Tuple2(
			_Utils_update(
				e,
				{error_msg: _eval.result}),
			$elm$core$Maybe$Nothing);
	};
};
var $elm$core$Tuple$mapFirst = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var $author$project$Lia$Markdown$Quiz$Update$setState = F3(
	function (e, fn, state) {
		return _Utils_update(
			e,
			{
				state: fn(state)
			});
	});
var $author$project$Lia$Markdown$Quiz$Block$Update$update = F2(
	function (msg, state) {
		var _v0 = _Utils_Tuple2(msg, state);
		_v0$4:
		while (true) {
			switch (_v0.a.$) {
				case 'Choose':
					if (_v0.b.$ === 'Select') {
						var option = _v0.a.a;
						var _v1 = _v0.b;
						return _Utils_Tuple2(
							A2(
								$author$project$Lia$Markdown$Quiz$Block$Types$Select,
								false,
								_List_fromArray(
									[option])),
							$elm$core$Maybe$Nothing);
					} else {
						break _v0$4;
					}
				case 'Toggle':
					if (_v0.b.$ === 'Select') {
						var _v2 = _v0.a;
						var _v3 = _v0.b;
						var open = _v3.a;
						var id = _v3.b;
						return _Utils_Tuple2(
							A2($author$project$Lia$Markdown$Quiz$Block$Types$Select, !open, id),
							$elm$core$Maybe$Nothing);
					} else {
						break _v0$4;
					}
				case 'Input':
					if (_v0.b.$ === 'Text') {
						var str = _v0.a.a;
						return _Utils_Tuple2(
							$author$project$Lia$Markdown$Quiz$Block$Types$Text(str),
							$elm$core$Maybe$Nothing);
					} else {
						break _v0$4;
					}
				default:
					var sub = _v0.a.a;
					return _Utils_Tuple2(
						state,
						$elm$core$Maybe$Just(sub));
			}
		}
		return _Utils_Tuple2(state, $elm$core$Maybe$Nothing);
	});
var $author$project$Lia$Markdown$Quiz$Vector$Update$toggleMultiple = F2(
	function (id, list) {
		if (!list.b) {
			return _List_Nil;
		} else {
			var x = list.a;
			var xs = list.b;
			return A2(
				$elm$core$List$cons,
				(!id) ? (!x) : x,
				A2($author$project$Lia$Markdown$Quiz$Vector$Update$toggleMultiple, id - 1, xs));
		}
	});
var $author$project$Lia$Markdown$Quiz$Vector$Update$toggleSingle = F2(
	function (id, list) {
		if (!list.b) {
			return _List_Nil;
		} else {
			var xs = list.b;
			return A2(
				$elm$core$List$cons,
				!id,
				A2($author$project$Lia$Markdown$Quiz$Vector$Update$toggleSingle, id - 1, xs));
		}
	});
var $author$project$Lia$Markdown$Quiz$Vector$Update$toggle = F2(
	function (id, state) {
		if (state.$ === 'SingleChoice') {
			var list = state.a;
			return $author$project$Lia$Markdown$Quiz$Vector$Types$SingleChoice(
				A2($author$project$Lia$Markdown$Quiz$Vector$Update$toggleSingle, id, list));
		} else {
			var list = state.a;
			return $author$project$Lia$Markdown$Quiz$Vector$Types$MultipleChoice(
				A2($author$project$Lia$Markdown$Quiz$Vector$Update$toggleMultiple, id, list));
		}
	});
var $author$project$Lia$Markdown$Quiz$Matrix$Update$update = F2(
	function (msg, state) {
		if (msg.$ === 'Toggle') {
			var row_id = msg.a;
			var column_id = msg.b;
			var _v1 = A2(
				$elm$core$Maybe$map,
				$author$project$Lia$Markdown$Quiz$Vector$Update$toggle(column_id),
				A2($elm$core$Array$get, row_id, state));
			if (_v1.$ === 'Just') {
				var row = _v1.a;
				return _Utils_Tuple2(
					A3($elm$core$Array$set, row_id, row, state),
					$elm$core$Maybe$Nothing);
			} else {
				return _Utils_Tuple2(state, $elm$core$Maybe$Nothing);
			}
		} else {
			var sub = msg.a;
			return _Utils_Tuple2(
				state,
				$elm$core$Maybe$Just(sub));
		}
	});
var $author$project$Lia$Markdown$Quiz$Vector$Update$update = F2(
	function (msg, state) {
		if (msg.$ === 'Toggle') {
			var id = msg.a;
			return _Utils_Tuple2(
				A2($author$project$Lia$Markdown$Quiz$Vector$Update$toggle, id, state),
				$elm$core$Maybe$Nothing);
		} else {
			var sub = msg.a;
			return _Utils_Tuple2(
				state,
				$elm$core$Maybe$Just(sub));
		}
	});
var $author$project$Lia$Markdown$Quiz$Update$state_ = F2(
	function (msg, e) {
		var _v0 = _Utils_Tuple2(msg, e.state);
		_v0$3:
		while (true) {
			switch (_v0.a.$) {
				case 'Block_Update':
					if (_v0.b.$ === 'Block_State') {
						var _v1 = _v0.a;
						var m = _v1.b;
						var s = _v0.b.a;
						return A2(
							$elm$core$Tuple$mapFirst,
							A2($author$project$Lia$Markdown$Quiz$Update$setState, e, $author$project$Lia$Markdown$Quiz$Types$Block_State),
							A2($author$project$Lia$Markdown$Quiz$Block$Update$update, m, s));
					} else {
						break _v0$3;
					}
				case 'Vector_Update':
					if (_v0.b.$ === 'Vector_State') {
						var _v2 = _v0.a;
						var m = _v2.b;
						var s = _v0.b.a;
						return A2(
							$elm$core$Tuple$mapFirst,
							A2($author$project$Lia$Markdown$Quiz$Update$setState, e, $author$project$Lia$Markdown$Quiz$Types$Vector_State),
							A2($author$project$Lia$Markdown$Quiz$Vector$Update$update, m, s));
					} else {
						break _v0$3;
					}
				case 'Matrix_Update':
					if (_v0.b.$ === 'Matrix_State') {
						var _v3 = _v0.a;
						var m = _v3.b;
						var s = _v0.b.a;
						return A2(
							$elm$core$Tuple$mapFirst,
							A2($author$project$Lia$Markdown$Quiz$Update$setState, e, $author$project$Lia$Markdown$Quiz$Types$Matrix_State),
							A2($author$project$Lia$Markdown$Quiz$Matrix$Update$update, m, s));
					} else {
						break _v0$3;
					}
				default:
					break _v0$3;
			}
		}
		return _Utils_Tuple2(e, $elm$core$Maybe$Nothing);
	});
var $author$project$Lia$Markdown$Quiz$Block$Json$fromState = function (state) {
	return $elm$json$Json$Encode$object(
		function () {
			if (state.$ === 'Text') {
				var x = state.a;
				return _List_fromArray(
					[
						_Utils_Tuple2(
						'Text',
						$elm$json$Json$Encode$string(x))
					]);
			} else {
				if (state.b.b && (!state.b.b.b)) {
					var _v1 = state.b;
					var x = _v1.a;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Select',
							$elm$json$Json$Encode$int(x))
						]);
				} else {
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Select',
							$elm$json$Json$Encode$int(-1))
						]);
				}
			}
		}());
};
var $author$project$Lia$Markdown$Quiz$Vector$Json$fromState = function (state) {
	return $elm$json$Json$Encode$object(
		function () {
			if (state.$ === 'SingleChoice') {
				var list = state.a;
				return _List_fromArray(
					[
						_Utils_Tuple2(
						'SingleChoice',
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$bool, list))
					]);
			} else {
				var list = state.a;
				return _List_fromArray(
					[
						_Utils_Tuple2(
						'MultipleChoice',
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$bool, list))
					]);
			}
		}());
};
var $author$project$Lia$Markdown$Quiz$Matrix$Json$uid = 'Matrix';
var $author$project$Lia$Markdown$Quiz$Matrix$Json$fromState = function (state) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				$author$project$Lia$Markdown$Quiz$Matrix$Json$uid,
				A2($elm$json$Json$Encode$array, $author$project$Lia$Markdown$Quiz$Vector$Json$fromState, state))
			]));
};
var $author$project$Lia$Markdown$Quiz$Json$fromState = function (state) {
	switch (state.$) {
		case 'Generic_State':
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2('Generic', $elm$json$Json$Encode$null)
					]));
		case 'Block_State':
			var s = state.a;
			return $author$project$Lia$Markdown$Quiz$Block$Json$fromState(s);
		case 'Vector_State':
			var s = state.a;
			return $author$project$Lia$Markdown$Quiz$Vector$Json$fromState(s);
		default:
			var s = state.a;
			return $author$project$Lia$Markdown$Quiz$Matrix$Json$fromState(s);
	}
};
var $author$project$Lia$Markdown$Quiz$Json$fromElement = function (element) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'solved',
				$elm$json$Json$Encode$int(
					function () {
						var _v0 = element.solved;
						switch (_v0.$) {
							case 'Open':
								return 0;
							case 'Solved':
								return 1;
							default:
								return -1;
						}
					}())),
				_Utils_Tuple2(
				'state',
				$author$project$Lia$Markdown$Quiz$Json$fromState(element.state)),
				_Utils_Tuple2(
				'trial',
				$elm$json$Json$Encode$int(element.trial)),
				_Utils_Tuple2(
				'hint',
				$elm$json$Json$Encode$int(element.hint)),
				_Utils_Tuple2(
				'error_msg',
				$elm$json$Json$Encode$string(element.error_msg))
			]));
};
var $author$project$Lia$Markdown$Quiz$Json$fromVector = function (vector) {
	return A2($elm$json$Json$Encode$array, $author$project$Lia$Markdown$Quiz$Json$fromElement, vector);
};
var $author$project$Lia$Markdown$Quiz$Update$store = function (_v0) {
	var vector = _v0.a;
	var events = _v0.b;
	var sub = _v0.c;
	return _Utils_Tuple3(
		vector,
		A2(
			$elm$core$List$cons,
			$author$project$Port$Event$store(
				$author$project$Lia$Markdown$Quiz$Json$fromVector(vector)),
			events),
		sub);
};
var $author$project$Lia$Markdown$Quiz$Types$toState = function (quiz) {
	switch (quiz.$) {
		case 'Generic_Type':
			return $author$project$Lia$Markdown$Quiz$Types$Generic_State;
		case 'Block_Type':
			var q = quiz.a;
			return $author$project$Lia$Markdown$Quiz$Types$Block_State(q.solution);
		case 'Vector_Type':
			var q = quiz.a;
			return $author$project$Lia$Markdown$Quiz$Types$Vector_State(q.solution);
		default:
			var q = quiz.a;
			return $author$project$Lia$Markdown$Quiz$Types$Matrix_State(q.solution);
	}
};
var $author$project$Lia$Markdown$Quiz$Block$Update$toString = function (state) {
	if (state.$ === 'Text') {
		var str = state.a;
		return str;
	} else {
		if (state.b.b && (!state.b.b.b)) {
			var _v1 = state.b;
			var i = _v1.a;
			return $elm$core$String$fromInt(i);
		} else {
			return '';
		}
	}
};
var $author$project$Lia$Markdown$Quiz$Vector$Update$toString = function (state) {
	if (state.$ === 'SingleChoice') {
		var list = state.a;
		return $elm$core$String$fromInt(
			A2(
				$elm$core$Maybe$withDefault,
				-1,
				A2(
					$elm$core$Maybe$map,
					$elm$core$Tuple$first,
					$elm$core$List$head(
						A2(
							$elm$core$List$filter,
							$elm$core$Tuple$second,
							A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, list))))));
	} else {
		var values = state.a;
		return function (str) {
			return '[' + (str + ']');
		}(
			$elm$core$String$concat(
				A2(
					$elm$core$List$intersperse,
					',',
					A2(
						$elm$core$List$map,
						function (s) {
							return s ? '1' : '0';
						},
						values))));
	}
};
var $author$project$Lia$Markdown$Quiz$Matrix$Update$toString = function (state) {
	return function (str) {
		return '[' + (str + ']');
	}(
		$elm$core$String$concat(
			A2(
				$elm$core$List$intersperse,
				',',
				A2(
					$elm$core$List$map,
					$author$project$Lia$Markdown$Quiz$Vector$Update$toString,
					$elm$core$Array$toList(state)))));
};
var $author$project$Lia$Markdown$Quiz$Block$Json$toState = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$map,
			$author$project$Lia$Markdown$Quiz$Block$Types$Text,
			A2($elm$json$Json$Decode$field, 'Text', $elm$json$Json$Decode$string)),
			A2(
			$elm$json$Json$Decode$map,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$List$singleton,
				$author$project$Lia$Markdown$Quiz$Block$Types$Select(false)),
			A2($elm$json$Json$Decode$field, 'Select', $elm$json$Json$Decode$int))
		]));
var $author$project$Lia$Markdown$Quiz$Vector$Json$toState = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$map,
			$author$project$Lia$Markdown$Quiz$Vector$Types$SingleChoice,
			A2(
				$elm$json$Json$Decode$field,
				'SingleChoice',
				$elm$json$Json$Decode$list($elm$json$Json$Decode$bool))),
			A2(
			$elm$json$Json$Decode$map,
			$author$project$Lia$Markdown$Quiz$Vector$Types$MultipleChoice,
			A2(
				$elm$json$Json$Decode$field,
				'MultipleChoice',
				$elm$json$Json$Decode$list($elm$json$Json$Decode$bool)))
		]));
var $author$project$Lia$Markdown$Quiz$Matrix$Json$toState = A2(
	$elm$json$Json$Decode$field,
	$author$project$Lia$Markdown$Quiz$Matrix$Json$uid,
	$elm$json$Json$Decode$array($author$project$Lia$Markdown$Quiz$Vector$Json$toState));
var $author$project$Lia$Markdown$Quiz$Json$toState = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2($elm$json$Json$Decode$map, $author$project$Lia$Markdown$Quiz$Types$Block_State, $author$project$Lia$Markdown$Quiz$Block$Json$toState),
			A2($elm$json$Json$Decode$map, $author$project$Lia$Markdown$Quiz$Types$Vector_State, $author$project$Lia$Markdown$Quiz$Vector$Json$toState),
			A2($elm$json$Json$Decode$map, $author$project$Lia$Markdown$Quiz$Types$Matrix_State, $author$project$Lia$Markdown$Quiz$Matrix$Json$toState),
			A2(
			$elm$json$Json$Decode$andThen,
			function (_v0) {
				return $elm$json$Json$Decode$succeed($author$project$Lia$Markdown$Quiz$Types$Generic_State);
			},
			A2($elm$json$Json$Decode$field, 'Generic', $elm$json$Json$Decode$value))
		]));
var $author$project$Lia$Markdown$Quiz$Json$toElement = function () {
	var solved_decoder = function (i) {
		switch (i) {
			case 0:
				return $elm$json$Json$Decode$succeed($author$project$Lia$Markdown$Quiz$Types$Open);
			case 1:
				return $elm$json$Json$Decode$succeed($author$project$Lia$Markdown$Quiz$Types$Solved);
			default:
				return $elm$json$Json$Decode$succeed($author$project$Lia$Markdown$Quiz$Types$ReSolved);
		}
	};
	return A6(
		$elm$json$Json$Decode$map5,
		$author$project$Lia$Markdown$Quiz$Types$Element,
		A2(
			$elm$json$Json$Decode$andThen,
			solved_decoder,
			A2($elm$json$Json$Decode$field, 'solved', $elm$json$Json$Decode$int)),
		A2($elm$json$Json$Decode$field, 'state', $author$project$Lia$Markdown$Quiz$Json$toState),
		A2($elm$json$Json$Decode$field, 'trial', $elm$json$Json$Decode$int),
		A2($elm$json$Json$Decode$field, 'hint', $elm$json$Json$Decode$int),
		A2($elm$json$Json$Decode$field, 'error_msg', $elm$json$Json$Decode$string));
}();
var $author$project$Lia$Markdown$Quiz$Json$toVector = function (json) {
	return A2(
		$elm$json$Json$Decode$decodeValue,
		$elm$json$Json$Decode$array($author$project$Lia$Markdown$Quiz$Json$toElement),
		json);
};
var $author$project$Lia$Markdown$Quiz$Update$get = F2(
	function (idx, vector) {
		var _v0 = A2($elm$core$Array$get, idx, vector);
		if (_v0.$ === 'Just') {
			var elem = _v0.a;
			return (_Utils_eq(elem.solved, $author$project$Lia$Markdown$Quiz$Types$Solved) || _Utils_eq(elem.solved, $author$project$Lia$Markdown$Quiz$Types$ReSolved)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(elem);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Lia$Markdown$Quiz$Update$update_ = F3(
	function (idx, vector, fn) {
		var _v0 = A2(
			$elm$core$Maybe$map,
			fn,
			A2($author$project$Lia$Markdown$Quiz$Update$get, idx, vector));
		if (_v0.$ === 'Just') {
			var _v1 = _v0.a;
			var elem = _v1.a;
			var sub = _v1.b;
			return _Utils_Tuple3(
				A3($elm$core$Array$set, idx, elem, vector),
				_List_Nil,
				sub);
		} else {
			return _Utils_Tuple3(vector, _List_Nil, $elm$core$Maybe$Nothing);
		}
	});
var $author$project$Lia$Markdown$Quiz$Update$update = F3(
	function (scripts, msg, vector) {
		switch (msg.$) {
			case 'Block_Update':
				var id = msg.a;
				return A3(
					$author$project$Lia$Markdown$Quiz$Update$update_,
					id,
					vector,
					$author$project$Lia$Markdown$Quiz$Update$state_(msg));
			case 'Vector_Update':
				var id = msg.a;
				return A3(
					$author$project$Lia$Markdown$Quiz$Update$update_,
					id,
					vector,
					$author$project$Lia$Markdown$Quiz$Update$state_(msg));
			case 'Matrix_Update':
				var id = msg.a;
				return A3(
					$author$project$Lia$Markdown$Quiz$Update$update_,
					id,
					vector,
					$author$project$Lia$Markdown$Quiz$Update$state_(msg));
			case 'Check':
				if (msg.c.$ === 'Nothing') {
					var id = msg.a;
					var solution = msg.b;
					var _v1 = msg.c;
					return $author$project$Lia$Markdown$Quiz$Update$store(
						A3(
							$author$project$Lia$Markdown$Quiz$Update$update_,
							id,
							vector,
							$author$project$Lia$Markdown$Quiz$Update$check(solution)));
				} else {
					var idx = msg.a;
					var code = msg.c.a;
					var state = function () {
						var _v2 = A2(
							$elm$core$Maybe$map,
							function ($) {
								return $.state;
							},
							A2($elm$core$Array$get, idx, vector));
						_v2$3:
						while (true) {
							if (_v2.$ === 'Just') {
								switch (_v2.a.$) {
									case 'Block_State':
										var b = _v2.a.a;
										return $author$project$Lia$Markdown$Quiz$Block$Update$toString(b);
									case 'Vector_State':
										var s = _v2.a.a;
										return $author$project$Lia$Markdown$Quiz$Vector$Update$toString(s);
									case 'Matrix_State':
										var m = _v2.a.a;
										return $author$project$Lia$Markdown$Quiz$Matrix$Update$toString(m);
									default:
										break _v2$3;
								}
							} else {
								break _v2$3;
							}
						}
						return '';
					}();
					return _Utils_Tuple3(
						vector,
						_List_fromArray(
							[
								A4(
								$author$project$Port$Eval$event,
								idx,
								code,
								$author$project$Lia$Markdown$Effect$Script$Types$outputs(scripts),
								_List_fromArray(
									[state]))
							]),
						$elm$core$Maybe$Nothing);
				}
			case 'ShowHint':
				var idx = msg.a;
				return $author$project$Lia$Markdown$Quiz$Update$store(
					A3(
						$author$project$Lia$Markdown$Quiz$Update$update_,
						idx,
						vector,
						function (e) {
							return _Utils_Tuple2(
								_Utils_update(
									e,
									{hint: e.hint + 1}),
								$elm$core$Maybe$Nothing);
						}));
			case 'ShowSolution':
				var idx = msg.a;
				var solution = msg.b;
				return $author$project$Lia$Markdown$Quiz$Update$store(
					A3(
						$author$project$Lia$Markdown$Quiz$Update$update_,
						idx,
						vector,
						function (e) {
							return _Utils_Tuple2(
								_Utils_update(
									e,
									{
										error_msg: '',
										solved: $author$project$Lia$Markdown$Quiz$Types$ReSolved,
										state: $author$project$Lia$Markdown$Quiz$Types$toState(solution)
									}),
								$elm$core$Maybe$Nothing);
						}));
			case 'Handle':
				var event = msg.a;
				var _v3 = event.topic;
				switch (_v3) {
					case 'eval':
						return $author$project$Lia$Markdown$Quiz$Update$store(
							A3(
								$author$project$Lia$Markdown$Quiz$Update$update_,
								event.section,
								vector,
								$author$project$Lia$Markdown$Quiz$Update$evalEventDecoder(event.message)));
					case 'restore':
						return _Utils_Tuple3(
							A2(
								$elm$core$Result$withDefault,
								vector,
								$author$project$Lia$Markdown$Quiz$Json$toVector(event.message)),
							_List_Nil,
							$elm$core$Maybe$Nothing);
					default:
						return _Utils_Tuple3(vector, _List_Nil, $elm$core$Maybe$Nothing);
				}
			default:
				var sub = msg.a;
				return _Utils_Tuple3(
					vector,
					_List_Nil,
					$elm$core$Maybe$Just(sub));
		}
	});
var $author$project$Lia$Markdown$Survey$Update$Submit = F2(
	function (a, b) {
		return {$: 'Submit', a: a, b: b};
	});
var $author$project$Lia$Markdown$Survey$Json$dict2json = function (dict) {
	return $elm$json$Json$Encode$object(
		A2(
			$elm$core$List$map,
			function (_v0) {
				var s = _v0.a;
				var b = _v0.b;
				return _Utils_Tuple2(
					s,
					$elm$json$Json$Encode$bool(b));
			},
			$elm$core$Dict$toList(dict)));
};
var $author$project$Lia$Markdown$Survey$Json$fromState = function (state) {
	return $elm$json$Json$Encode$object(
		function () {
			switch (state.$) {
				case 'Text_State':
					var str = state.a;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Text',
							$elm$json$Json$Encode$string(str))
						]);
				case 'Select_State':
					var i = state.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Select',
							$elm$json$Json$Encode$int(i))
						]);
				case 'Vector_State':
					var single = state.a;
					var vector = state.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							single ? 'SingleChoice' : 'MultipleChoice',
							$author$project$Lia$Markdown$Survey$Json$dict2json(vector))
						]);
				default:
					var single = state.a;
					var matrix = state.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							single ? 'SingleChoiceMatrix' : 'MultipleChoiceMatrix',
							A2($elm$json$Json$Encode$array, $author$project$Lia$Markdown$Survey$Json$dict2json, matrix))
						]);
			}
		}());
};
var $author$project$Lia$Markdown$Survey$Json$fromElement = function (_v0) {
	var b = _v0.a;
	var state = _v0.b;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'submitted',
				$elm$json$Json$Encode$bool(b)),
				_Utils_Tuple2(
				'state',
				$author$project$Lia$Markdown$Survey$Json$fromState(state))
			]));
};
var $author$project$Lia$Markdown$Survey$Json$fromVector = function (vector) {
	return A2($elm$json$Json$Encode$array, $author$project$Lia$Markdown$Survey$Json$fromElement, vector);
};
var $author$project$Lia$Markdown$Survey$Update$submit = F2(
	function (vector, idx) {
		var _v0 = A2($elm$core$Array$get, idx, vector);
		if ((_v0.$ === 'Just') && (!_v0.a.a)) {
			var _v1 = _v0.a;
			var state = _v1.b;
			return A3(
				$elm$core$Array$set,
				idx,
				_Utils_Tuple2(true, state),
				vector);
		} else {
			return vector;
		}
	});
var $author$project$Lia$Markdown$Survey$Update$submitable = F2(
	function (vector, idx) {
		var _v0 = A2($elm$core$Array$get, idx, vector);
		if ((_v0.$ === 'Just') && (!_v0.a.a)) {
			switch (_v0.a.b.$) {
				case 'Text_State':
					var _v1 = _v0.a;
					var state = _v1.b.a;
					return state !== '';
				case 'Select_State':
					var _v2 = _v0.a;
					var _v3 = _v2.b;
					var state = _v3.b;
					return !_Utils_eq(state, -1);
				case 'Vector_State':
					var _v4 = _v0.a;
					var _v5 = _v4.b;
					var state = _v5.b;
					return function (s) {
						return s > 0;
					}(
						$elm$core$List$length(
							A2(
								$elm$core$List$filter,
								function (a) {
									return a;
								},
								$elm$core$Dict$values(state))));
				default:
					var _v6 = _v0.a;
					var _v7 = _v6.b;
					var state = _v7.b;
					return A2(
						$elm$core$List$all,
						function (a) {
							return $elm$core$List$length(a) > 0;
						},
						A2(
							$elm$core$List$map,
							function (l) {
								return A2(
									$elm$core$List$filter,
									function (a) {
										return a;
									},
									l);
							},
							A2(
								$elm$core$List$map,
								$elm$core$Dict$values,
								$elm$core$Array$toList(state))));
			}
		} else {
			return false;
		}
	});
var $author$project$Lia$Markdown$Survey$Types$key_value_string = function (_v0) {
	var key = _v0.a;
	var value = _v0.b;
	return '\"' + (key + ('\": ' + (value ? '1' : '0')));
};
var $author$project$Lia$Markdown$Survey$Types$toString = function (state) {
	switch (state.$) {
		case 'Text_State':
			var str = state.a;
			return str;
		case 'Select_State':
			var i = state.b;
			return $elm$core$String$fromInt(i);
		case 'Vector_State':
			var dict = state.b;
			return '{' + ($elm$core$String$concat(
				A2(
					$elm$core$List$intersperse,
					', ',
					A2(
						$elm$core$List$map,
						$author$project$Lia$Markdown$Survey$Types$key_value_string,
						$elm$core$Dict$toList(dict)))) + '}');
		default:
			var array = state.b;
			return '[' + ($elm$core$String$concat(
				A2(
					$elm$core$List$intersperse,
					',\n',
					A2(
						$elm$core$List$map,
						A2(
							$elm$core$Basics$composeR,
							$author$project$Lia$Markdown$Survey$Types$Vector_State(false),
							$author$project$Lia$Markdown$Survey$Types$toString),
						$elm$core$Array$toList(array)))) + ']');
	}
};
var $author$project$Lia$Markdown$Survey$Json$toState = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$map,
			$author$project$Lia$Markdown$Survey$Types$Text_State,
			A2($elm$json$Json$Decode$field, 'Text', $elm$json$Json$Decode$string)),
			A2(
			$elm$json$Json$Decode$map,
			$author$project$Lia$Markdown$Survey$Types$Select_State(false),
			A2($elm$json$Json$Decode$field, 'Select', $elm$json$Json$Decode$int)),
			A2(
			$elm$json$Json$Decode$map,
			$author$project$Lia$Markdown$Survey$Types$Vector_State(true),
			A2(
				$elm$json$Json$Decode$field,
				'SingleChoice',
				$elm$json$Json$Decode$dict($elm$json$Json$Decode$bool))),
			A2(
			$elm$json$Json$Decode$map,
			$author$project$Lia$Markdown$Survey$Types$Vector_State(false),
			A2(
				$elm$json$Json$Decode$field,
				'MultipleChoice',
				$elm$json$Json$Decode$dict($elm$json$Json$Decode$bool))),
			A2(
			$elm$json$Json$Decode$map,
			$author$project$Lia$Markdown$Survey$Types$Matrix_State(false),
			A2(
				$elm$json$Json$Decode$field,
				'SingleChoiceMatrix',
				$elm$json$Json$Decode$array(
					$elm$json$Json$Decode$dict($elm$json$Json$Decode$bool)))),
			A2(
			$elm$json$Json$Decode$map,
			$author$project$Lia$Markdown$Survey$Types$Matrix_State(true),
			A2(
				$elm$json$Json$Decode$field,
				'MultipleChoiceMatrix',
				$elm$json$Json$Decode$array(
					$elm$json$Json$Decode$dict($elm$json$Json$Decode$bool))))
		]));
var $author$project$Lia$Markdown$Survey$Json$toElement = A3(
	$elm$json$Json$Decode$map2,
	$elm$core$Tuple$pair,
	A2($elm$json$Json$Decode$field, 'submitted', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'state', $author$project$Lia$Markdown$Survey$Json$toState));
var $author$project$Lia$Markdown$Survey$Json$toVector = function (json) {
	return A2(
		$elm$json$Json$Decode$decodeValue,
		$elm$json$Json$Decode$array($author$project$Lia$Markdown$Survey$Json$toElement),
		json);
};
var $author$project$Lia$Markdown$Survey$Update$set_state = F3(
	function (vector, idx, state) {
		return A3(
			$elm$core$Array$set,
			idx,
			_Utils_Tuple2(false, state),
			vector);
	});
var $author$project$Lia$Markdown$Survey$Update$update_matrix = F4(
	function (vector, col_id, row_id, _var) {
		var _v0 = A2($elm$core$Array$get, col_id, vector);
		if (((_v0.$ === 'Just') && (!_v0.a.a)) && (_v0.a.b.$ === 'Matrix_State')) {
			if (!_v0.a.b.a) {
				var _v1 = _v0.a;
				var _v2 = _v1.b;
				var matrix = _v2.b;
				var row = A2($elm$core$Array$get, row_id, matrix);
				return A3(
					$author$project$Lia$Markdown$Survey$Update$set_state,
					vector,
					col_id,
					A2(
						$author$project$Lia$Markdown$Survey$Types$Matrix_State,
						false,
						A2(
							$elm$core$Maybe$withDefault,
							matrix,
							A2(
								$elm$core$Maybe$map,
								function (d) {
									return A3($elm$core$Array$set, row_id, d, matrix);
								},
								A2(
									$elm$core$Maybe$map,
									function (d) {
										return A3(
											$elm$core$Dict$update,
											_var,
											function (_v5) {
												return $elm$core$Maybe$Just(true);
											},
											d);
									},
									A2(
										$elm$core$Maybe$map,
										function (d) {
											return A2(
												$elm$core$Dict$map,
												F2(
													function (_v3, _v4) {
														return false;
													}),
												d);
										},
										row))))));
			} else {
				var _v6 = _v0.a;
				var _v7 = _v6.b;
				var matrix = _v7.b;
				var row = A2($elm$core$Array$get, row_id, matrix);
				return A3(
					$author$project$Lia$Markdown$Survey$Update$set_state,
					vector,
					col_id,
					A2(
						$author$project$Lia$Markdown$Survey$Types$Matrix_State,
						true,
						A2(
							$elm$core$Maybe$withDefault,
							matrix,
							A2(
								$elm$core$Maybe$map,
								function (d) {
									return A3($elm$core$Array$set, row_id, d, matrix);
								},
								A2(
									$elm$core$Maybe$map,
									function (d) {
										return A3(
											$elm$core$Dict$update,
											_var,
											function (b) {
												return A2($elm$core$Maybe$map, $elm$core$Basics$not, b);
											},
											d);
									},
									row)))));
			}
		} else {
			return vector;
		}
	});
var $author$project$Lia$Markdown$Survey$Update$update_select = F3(
	function (vector, id, value) {
		var _v0 = A2($elm$core$Array$get, id, vector);
		if (((_v0.$ === 'Just') && (!_v0.a.a)) && (_v0.a.b.$ === 'Select_State')) {
			var _v1 = _v0.a;
			var _v2 = _v1.b;
			return A3(
				$author$project$Lia$Markdown$Survey$Update$set_state,
				vector,
				id,
				A2($author$project$Lia$Markdown$Survey$Types$Select_State, false, value));
		} else {
			return vector;
		}
	});
var $author$project$Lia$Markdown$Survey$Update$update_select_chose = F2(
	function (vector, id) {
		var _v0 = A2($elm$core$Array$get, id, vector);
		if (((_v0.$ === 'Just') && (!_v0.a.a)) && (_v0.a.b.$ === 'Select_State')) {
			var _v1 = _v0.a;
			var _v2 = _v1.b;
			var b = _v2.a;
			var value = _v2.b;
			return A3(
				$author$project$Lia$Markdown$Survey$Update$set_state,
				vector,
				id,
				A2($author$project$Lia$Markdown$Survey$Types$Select_State, !b, value));
		} else {
			return vector;
		}
	});
var $author$project$Lia$Markdown$Survey$Update$update_text = F3(
	function (vector, idx, str) {
		var _v0 = A2($elm$core$Array$get, idx, vector);
		if (((_v0.$ === 'Just') && (!_v0.a.a)) && (_v0.a.b.$ === 'Text_State')) {
			var _v1 = _v0.a;
			return A3(
				$author$project$Lia$Markdown$Survey$Update$set_state,
				vector,
				idx,
				$author$project$Lia$Markdown$Survey$Types$Text_State(str));
		} else {
			return vector;
		}
	});
var $author$project$Lia$Markdown$Survey$Update$update_vector = F3(
	function (vector, idx, _var) {
		var _v0 = A2($elm$core$Array$get, idx, vector);
		if (((_v0.$ === 'Just') && (!_v0.a.a)) && (_v0.a.b.$ === 'Vector_State')) {
			if (!_v0.a.b.a) {
				var _v1 = _v0.a;
				var _v2 = _v1.b;
				var element = _v2.b;
				return A3(
					$author$project$Lia$Markdown$Survey$Update$set_state,
					vector,
					idx,
					A2(
						$author$project$Lia$Markdown$Survey$Types$Vector_State,
						false,
						A3(
							$elm$core$Dict$update,
							_var,
							function (_v5) {
								return $elm$core$Maybe$Just(true);
							},
							A2(
								$elm$core$Dict$map,
								F2(
									function (_v3, _v4) {
										return false;
									}),
								element))));
			} else {
				var _v6 = _v0.a;
				var _v7 = _v6.b;
				var element = _v7.b;
				return A3(
					$author$project$Lia$Markdown$Survey$Update$set_state,
					vector,
					idx,
					A2(
						$author$project$Lia$Markdown$Survey$Types$Vector_State,
						true,
						A3(
							$elm$core$Dict$update,
							_var,
							function (b) {
								return A2($elm$core$Maybe$map, $elm$core$Basics$not, b);
							},
							element)));
			}
		} else {
			return vector;
		}
	});
var $author$project$Lia$Markdown$Survey$Update$update = F3(
	function (scripts, msg, vector) {
		update:
		while (true) {
			switch (msg.$) {
				case 'TextUpdate':
					var idx = msg.a;
					var str = msg.b;
					return _Utils_Tuple3(
						A3($author$project$Lia$Markdown$Survey$Update$update_text, vector, idx, str),
						_List_Nil,
						$elm$core$Maybe$Nothing);
				case 'SelectUpdate':
					var id = msg.a;
					var value = msg.b;
					return _Utils_Tuple3(
						A3($author$project$Lia$Markdown$Survey$Update$update_select, vector, id, value),
						_List_Nil,
						$elm$core$Maybe$Nothing);
				case 'SelectChose':
					var id = msg.a;
					return _Utils_Tuple3(
						A2($author$project$Lia$Markdown$Survey$Update$update_select_chose, vector, id),
						_List_Nil,
						$elm$core$Maybe$Nothing);
				case 'VectorUpdate':
					var idx = msg.a;
					var _var = msg.b;
					return _Utils_Tuple3(
						A3($author$project$Lia$Markdown$Survey$Update$update_vector, vector, idx, _var),
						_List_Nil,
						$elm$core$Maybe$Nothing);
				case 'MatrixUpdate':
					var idx = msg.a;
					var row = msg.b;
					var _var = msg.c;
					return _Utils_Tuple3(
						A4($author$project$Lia$Markdown$Survey$Update$update_matrix, vector, idx, row, _var),
						_List_Nil,
						$elm$core$Maybe$Nothing);
				case 'Submit':
					if (msg.b.$ === 'Nothing') {
						var id = msg.a;
						var _v1 = msg.b;
						if (A2($author$project$Lia$Markdown$Survey$Update$submitable, vector, id)) {
							var new_vector = A2($author$project$Lia$Markdown$Survey$Update$submit, vector, id);
							return _Utils_Tuple3(
								new_vector,
								$elm$core$List$singleton(
									$author$project$Port$Event$store(
										$author$project$Lia$Markdown$Survey$Json$fromVector(new_vector))),
								$elm$core$Maybe$Nothing);
						} else {
							return _Utils_Tuple3(vector, _List_Nil, $elm$core$Maybe$Nothing);
						}
					} else {
						var id = msg.a;
						var code = msg.b.a;
						var _v2 = A2($elm$core$Array$get, id, vector);
						if ((_v2.$ === 'Just') && (!_v2.a.a)) {
							var _v3 = _v2.a;
							var state = _v3.b;
							return _Utils_Tuple3(
								vector,
								_List_fromArray(
									[
										A4(
										$author$project$Port$Eval$event,
										id,
										code,
										$author$project$Lia$Markdown$Effect$Script$Types$outputs(scripts),
										_List_fromArray(
											[
												$author$project$Lia$Markdown$Survey$Types$toString(state)
											]))
									]),
								$elm$core$Maybe$Nothing);
						} else {
							return _Utils_Tuple3(vector, _List_Nil, $elm$core$Maybe$Nothing);
						}
					}
				case 'Script':
					var sub = msg.a;
					return _Utils_Tuple3(
						vector,
						_List_Nil,
						$elm$core$Maybe$Just(sub));
				default:
					var event = msg.a;
					var _v4 = event.topic;
					switch (_v4) {
						case 'eval':
							if ('true' === $author$project$Port$Eval$decode(event.message).result) {
								var $temp$scripts = scripts,
									$temp$msg = A2($author$project$Lia$Markdown$Survey$Update$Submit, event.section, $elm$core$Maybe$Nothing),
									$temp$vector = vector;
								scripts = $temp$scripts;
								msg = $temp$msg;
								vector = $temp$vector;
								continue update;
							} else {
								return _Utils_Tuple3(vector, _List_Nil, $elm$core$Maybe$Nothing);
							}
						case 'restore':
							return _Utils_Tuple3(
								A2(
									$elm$core$Result$withDefault,
									vector,
									$author$project$Lia$Markdown$Survey$Json$toVector(event.message)),
								_List_Nil,
								$elm$core$Maybe$Nothing);
						default:
							return _Utils_Tuple3(vector, _List_Nil, $elm$core$Maybe$Nothing);
					}
			}
		}
	});
var $author$project$Lia$Markdown$Table$Update$updateSort = F2(
	function (column, state) {
		return (!_Utils_eq(state.column, column)) ? _Utils_update(
			state,
			{column: column, dir: true}) : (state.dir ? _Utils_update(
			state,
			{dir: false}) : _Utils_update(
			state,
			{column: -1}));
	});
var $author$project$Lia$Markdown$Table$Update$update = F2(
	function (msg, vector) {
		switch (msg.$) {
			case 'Sort':
				var id = msg.a;
				var col = msg.b;
				return A2(
					$elm$core$Maybe$withDefault,
					vector,
					A2(
						$elm$core$Maybe$map,
						function (state) {
							return A3(
								$elm$core$Array$set,
								id,
								A2($author$project$Lia$Markdown$Table$Update$updateSort, col, state),
								vector);
						},
						A2($elm$core$Array$get, id, vector)));
			case 'Toggle':
				var id = msg.a;
				return A2(
					$elm$core$Maybe$withDefault,
					vector,
					A2(
						$elm$core$Maybe$map,
						function (state) {
							return A3(
								$elm$core$Array$set,
								id,
								_Utils_update(
									state,
									{diagram: !state.diagram}),
								vector);
						},
						A2($elm$core$Array$get, id, vector)));
			default:
				return vector;
		}
	});
var $author$project$Lia$Markdown$Task$Json$fromVector = $elm$json$Json$Encode$array(
	$elm$json$Json$Encode$array($elm$json$Json$Encode$bool));
var $author$project$Lia$Markdown$Task$Update$store = function (_v0) {
	var vector = _v0.a;
	var events = _v0.b;
	var sub = _v0.c;
	return _Utils_Tuple3(
		vector,
		A2(
			$elm$core$List$cons,
			$author$project$Port$Event$store(
				$author$project$Lia$Markdown$Task$Json$fromVector(vector)),
			events),
		sub);
};
var $author$project$Lia$Markdown$Task$Json$toVector = $elm$json$Json$Decode$decodeValue(
	$elm$json$Json$Decode$array(
		$elm$json$Json$Decode$array($elm$json$Json$Decode$bool)));
var $author$project$Lia$Markdown$Task$Update$toggle = F2(
	function (y, states) {
		return A3(
			$elm$core$Array$set,
			y,
			A2(
				$elm$core$Maybe$withDefault,
				false,
				A2(
					$elm$core$Maybe$map,
					$elm$core$Basics$not,
					A2($elm$core$Array$get, y, states))),
			states);
	});
var $author$project$Lia$Markdown$Task$Update$update = F3(
	function (scripts, msg, vector) {
		switch (msg.$) {
			case 'Toggle':
				if (msg.c.$ === 'Nothing') {
					var x = msg.a;
					var y = msg.b;
					var _v1 = msg.c;
					return $author$project$Lia$Markdown$Task$Update$store(
						_Utils_Tuple3(
							A2(
								$elm$core$Maybe$withDefault,
								vector,
								A2(
									$elm$core$Maybe$map,
									function (state) {
										return A3(
											$elm$core$Array$set,
											x,
											A2($author$project$Lia$Markdown$Task$Update$toggle, y, state),
											vector);
									},
									A2($elm$core$Array$get, x, vector))),
							_List_Nil,
							$elm$core$Maybe$Nothing));
				} else {
					var x = msg.a;
					var y = msg.b;
					var code = msg.c.a;
					var _v2 = A2(
						$elm$core$Maybe$map,
						$author$project$Lia$Markdown$Task$Update$toggle(y),
						A2($elm$core$Array$get, x, vector));
					if (_v2.$ === 'Just') {
						var state = _v2.a;
						return $author$project$Lia$Markdown$Task$Update$store(
							_Utils_Tuple3(
								A3($elm$core$Array$set, x, state, vector),
								_List_fromArray(
									[
										A4(
										$author$project$Port$Eval$event,
										x,
										code,
										$author$project$Lia$Markdown$Effect$Script$Types$outputs(scripts),
										_List_fromArray(
											[
												A2(
												$elm$json$Json$Encode$encode,
												0,
												A2($elm$json$Json$Encode$array, $elm$json$Json$Encode$bool, state))
											]))
									]),
								$elm$core$Maybe$Nothing));
					} else {
						return _Utils_Tuple3(vector, _List_Nil, $elm$core$Maybe$Nothing);
					}
				}
			case 'Script':
				var childMsg = msg.a;
				return _Utils_Tuple3(
					vector,
					_List_Nil,
					$elm$core$Maybe$Just(childMsg));
			default:
				var event = msg.a;
				var _v3 = event.topic;
				if (_v3 === 'restore') {
					return _Utils_Tuple3(
						A2(
							$elm$core$Result$withDefault,
							vector,
							$author$project$Lia$Markdown$Task$Json$toVector(event.message)),
						_List_Nil,
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple3(vector, _List_Nil, $elm$core$Maybe$Nothing);
				}
		}
	});
var $author$project$Lia$Markdown$Effect$Update$updateSub = F2(
	function (main, msg) {
		return A3(
			$author$project$Lia$Markdown$Effect$Update$update,
			main,
			true,
			$author$project$Lia$Markdown$Effect$Update$Script(msg));
	});
var $author$project$Lia$Markdown$Update$subHandle = F3(
	function (js, json, section) {
		var _v14 = $author$project$Port$Event$decode(json);
		if (_v14.$ === 'Ok') {
			var event = _v14.a;
			var _v15 = $author$project$Port$Event$decode(event.message);
			if (_v15.$ === 'Ok') {
				var message = _v15.a;
				var _v16 = event.topic;
				switch (_v16) {
					case 'code':
						return A3(
							$author$project$Lia$Markdown$Update$subUpdate,
							js,
							$author$project$Lia$Markdown$Update$UpdateCode(
								$author$project$Lia$Markdown$Code$Update$handle(message)),
							section);
					case 'quiz':
						return A3(
							$author$project$Lia$Markdown$Update$subUpdate,
							js,
							$author$project$Lia$Markdown$Update$UpdateQuiz(
								$author$project$Lia$Markdown$Quiz$Update$handle(message)),
							section);
					case 'survey':
						return A3(
							$author$project$Lia$Markdown$Update$subUpdate,
							js,
							$author$project$Lia$Markdown$Update$UpdateSurvey(
								$author$project$Lia$Markdown$Survey$Update$handle(message)),
							section);
					case 'effect':
						return A3(
							$author$project$Lia$Markdown$Update$subUpdate,
							js,
							A2(
								$author$project$Lia$Markdown$Update$UpdateEffect,
								true,
								$author$project$Lia$Markdown$Effect$Update$handle(message)),
							section);
					case 'task':
						return A3(
							$author$project$Lia$Markdown$Update$subUpdate,
							js,
							$author$project$Lia$Markdown$Update$UpdateTask(
								$author$project$Lia$Markdown$Task$Update$handle(message)),
							section);
					default:
						return _Utils_Tuple3(section, $elm$core$Platform$Cmd$none, _List_Nil);
				}
			} else {
				return _Utils_Tuple3(section, $elm$core$Platform$Cmd$none, _List_Nil);
			}
		} else {
			return _Utils_Tuple3(section, $elm$core$Platform$Cmd$none, _List_Nil);
		}
	});
var $author$project$Lia$Markdown$Update$subUpdate = F3(
	function (js, msg, section) {
		if (section.$ === 'SubSection') {
			var subsection = section.a;
			switch (msg.$) {
				case 'UpdateEffect':
					var sound = msg.a;
					var childMsg = msg.b;
					var _v2 = A4(
						$author$project$Lia$Markdown$Effect$Update$update,
						{handle: $author$project$Lia$Markdown$Update$subHandle, update: $author$project$Lia$Markdown$Update$subUpdate},
						sound,
						childMsg,
						subsection.effect_model);
					var effect_model = _v2.a;
					var cmd = _v2.b;
					var event = _v2.c;
					return _Utils_Tuple3(
						$author$project$Lia$Section$SubSection(
							_Utils_update(
								subsection,
								{effect_model: effect_model})),
						A2(
							$elm$core$Platform$Cmd$map,
							$author$project$Lia$Markdown$Update$UpdateEffect(sound),
							cmd),
						A2(
							$author$project$Lia$Markdown$Update$send,
							'effect',
							A2($elm$core$List$map, $author$project$Port$Event$encode, event)));
				case 'UpdateTable':
					var childMsg = msg.a;
					var vector = A2($author$project$Lia$Markdown$Table$Update$update, childMsg, subsection.table_vector);
					return _Utils_Tuple3(
						$author$project$Lia$Section$SubSection(
							_Utils_update(
								subsection,
								{table_vector: vector})),
						$elm$core$Platform$Cmd$none,
						_List_Nil);
				case 'UpdateCode':
					var childMsg = msg.a;
					var _v3 = A3($author$project$Lia$Markdown$Code$Update$update, js, childMsg, subsection.code_vector);
					if (!_v3.b.b) {
						var vector = _v3.a;
						return _Utils_Tuple3(
							$author$project$Lia$Section$SubSection(
								_Utils_update(
									subsection,
									{code_vector: vector})),
							$elm$core$Platform$Cmd$none,
							_List_Nil);
					} else {
						var vector = _v3.a;
						var events = _v3.b;
						return _Utils_Tuple3(
							$author$project$Lia$Section$SubSection(
								_Utils_update(
									subsection,
									{code_vector: vector})),
							$elm$core$Platform$Cmd$none,
							A2(
								$author$project$Lia$Markdown$Update$send,
								'code',
								A2($elm$core$List$map, $author$project$Port$Event$encode, events)));
					}
				case 'UpdateQuiz':
					var childMsg = msg.a;
					var _v4 = A3($author$project$Lia$Markdown$Quiz$Update$update, js, childMsg, subsection.quiz_vector);
					var vector = _v4.a;
					var events = _v4.b;
					var subCmd = _v4.c;
					if (subCmd.$ === 'Just') {
						var cmd = subCmd.a;
						return A3(
							$author$project$Lia$Markdown$Update$subUpdate,
							js,
							$author$project$Lia$Markdown$Update$UpdateQuiz(childMsg),
							$author$project$Lia$Section$SubSection(
								_Utils_update(
									subsection,
									{quiz_vector: vector})));
					} else {
						return _Utils_Tuple3(
							$author$project$Lia$Section$SubSection(
								_Utils_update(
									subsection,
									{quiz_vector: vector})),
							$elm$core$Platform$Cmd$none,
							A2(
								$author$project$Lia$Markdown$Update$send,
								'quiz',
								A2($elm$core$List$map, $author$project$Port$Event$encode, events)));
					}
				case 'UpdateSurvey':
					var childMsg = msg.a;
					var _v6 = A3($author$project$Lia$Markdown$Survey$Update$update, js, childMsg, subsection.survey_vector);
					var vector = _v6.a;
					var events = _v6.b;
					var subCmd = _v6.c;
					if (subCmd.$ === 'Just') {
						var cmd = subCmd.a;
						return A3(
							$author$project$Lia$Markdown$Update$subUpdate,
							js,
							$author$project$Lia$Markdown$Update$UpdateSurvey(childMsg),
							$author$project$Lia$Section$SubSection(
								_Utils_update(
									subsection,
									{survey_vector: vector})));
					} else {
						return _Utils_Tuple3(
							$author$project$Lia$Section$SubSection(
								_Utils_update(
									subsection,
									{survey_vector: vector})),
							$elm$core$Platform$Cmd$none,
							A2(
								$author$project$Lia$Markdown$Update$send,
								'survey',
								A2($elm$core$List$map, $author$project$Port$Event$encode, events)));
					}
				case 'UpdateTask':
					var childMsg = msg.a;
					var _v8 = A3($author$project$Lia$Markdown$Task$Update$update, js, childMsg, subsection.task_vector);
					var vector = _v8.a;
					var events = _v8.b;
					var subCmd = _v8.c;
					if (subCmd.$ === 'Just') {
						var cmd = subCmd.a;
						return A3(
							$author$project$Lia$Markdown$Update$subUpdate,
							js,
							$author$project$Lia$Markdown$Update$UpdateTask(childMsg),
							$author$project$Lia$Section$SubSection(
								_Utils_update(
									subsection,
									{task_vector: vector})));
					} else {
						return _Utils_Tuple3(
							$author$project$Lia$Section$SubSection(
								_Utils_update(
									subsection,
									{task_vector: vector})),
							$elm$core$Platform$Cmd$none,
							A2(
								$author$project$Lia$Markdown$Update$send,
								'task',
								A2($elm$core$List$map, $author$project$Port$Event$encode, events)));
					}
				case 'Script':
					var childMsg = msg.a;
					var _v10 = A3(
						$author$project$Lia$Markdown$Effect$Update$updateSub,
						{handle: $author$project$Lia$Markdown$Update$subHandle, update: $author$project$Lia$Markdown$Update$subUpdate},
						childMsg,
						subsection.effect_model);
					var effect_model = _v10.a;
					var cmd = _v10.b;
					var event = _v10.c;
					return _Utils_Tuple3(
						$author$project$Lia$Section$SubSection(
							_Utils_update(
								subsection,
								{effect_model: effect_model})),
						A2(
							$elm$core$Platform$Cmd$map,
							$author$project$Lia$Markdown$Update$UpdateEffect(true),
							cmd),
						_List_Nil);
				default:
					return _Utils_Tuple3(section, $elm$core$Platform$Cmd$none, _List_Nil);
			}
		} else {
			var sub = section.a;
			switch (msg.$) {
				case 'Script':
					var childMsg = msg.a;
					var _v12 = A3(
						$author$project$Lia$Markdown$Effect$Update$updateSub,
						{handle: $author$project$Lia$Markdown$Update$subHandle, update: $author$project$Lia$Markdown$Update$subUpdate},
						childMsg,
						sub.effect_model);
					var effect_model = _v12.a;
					var cmd = _v12.b;
					var event = _v12.c;
					return _Utils_Tuple3(
						$author$project$Lia$Section$SubSubSection(
							_Utils_update(
								sub,
								{effect_model: effect_model})),
						A2(
							$elm$core$Platform$Cmd$map,
							$author$project$Lia$Markdown$Update$UpdateEffect(true),
							cmd),
						_List_Nil);
				case 'UpdateEffect':
					var sound = msg.a;
					var childMsg = msg.b;
					var _v13 = A4(
						$author$project$Lia$Markdown$Effect$Update$update,
						{handle: $author$project$Lia$Markdown$Update$subHandle, update: $author$project$Lia$Markdown$Update$subUpdate},
						sound,
						childMsg,
						sub.effect_model);
					var effect_model = _v13.a;
					var cmd = _v13.b;
					var event = _v13.c;
					return _Utils_Tuple3(
						$author$project$Lia$Section$SubSubSection(
							_Utils_update(
								sub,
								{effect_model: effect_model})),
						A2(
							$elm$core$Platform$Cmd$map,
							$author$project$Lia$Markdown$Update$UpdateEffect(sound),
							cmd),
						A2(
							$author$project$Lia$Markdown$Update$send,
							'effect',
							A2($elm$core$List$map, $author$project$Port$Event$encode, event)));
				default:
					return _Utils_Tuple3(section, $elm$core$Platform$Cmd$none, _List_Nil);
			}
		}
	});
var $author$project$Lia$Markdown$Update$updateScript = F2(
	function (msg, _v0) {
		var section = _v0.a;
		var cmd = _v0.b;
		var events = _v0.c;
		if (msg.$ === 'Nothing') {
			return _Utils_Tuple3(section, cmd, events);
		} else {
			var sub = msg.a;
			var _v2 = A3(
				$author$project$Lia$Markdown$Effect$Update$updateSub,
				{handle: $author$project$Lia$Markdown$Update$subHandle, update: $author$project$Lia$Markdown$Update$subUpdate},
				sub,
				section.effect_model);
			var effect_model = _v2.a;
			var cmd2 = _v2.b;
			var event = _v2.c;
			return _Utils_Tuple3(
				_Utils_update(
					section,
					{effect_model: effect_model}),
				$elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[
							cmd,
							A2(
							$elm$core$Platform$Cmd$map,
							$author$project$Lia$Markdown$Update$UpdateEffect(true),
							cmd2)
						])),
				A2(
					$author$project$Lia$Markdown$Update$send,
					'effect',
					A2($elm$core$List$map, $author$project$Port$Event$encode, event)));
		}
	});
var $author$project$Lia$Markdown$Update$update = F2(
	function (msg, section) {
		switch (msg.$) {
			case 'UpdateEffect':
				var sound = msg.a;
				var childMsg = msg.b;
				var _v1 = A4(
					$author$project$Lia$Markdown$Effect$Update$update,
					{handle: $author$project$Lia$Markdown$Update$subHandle, update: $author$project$Lia$Markdown$Update$subUpdate},
					sound,
					childMsg,
					section.effect_model);
				var effect_model = _v1.a;
				var cmd = _v1.b;
				var event = _v1.c;
				return _Utils_Tuple3(
					_Utils_update(
						section,
						{effect_model: effect_model}),
					A2(
						$elm$core$Platform$Cmd$map,
						$author$project$Lia$Markdown$Update$UpdateEffect(sound),
						cmd),
					A2(
						$author$project$Lia$Markdown$Update$send,
						'effect',
						A2($elm$core$List$map, $author$project$Port$Event$encode, event)));
			case 'UpdateCode':
				var childMsg = msg.a;
				var _v2 = A3($author$project$Lia$Markdown$Code$Update$update, section.effect_model.javascript, childMsg, section.code_vector);
				if (!_v2.b.b) {
					var vector = _v2.a;
					return _Utils_Tuple3(
						_Utils_update(
							section,
							{code_vector: vector}),
						$elm$core$Platform$Cmd$none,
						_List_Nil);
				} else {
					var vector = _v2.a;
					var events = _v2.b;
					return _Utils_Tuple3(
						_Utils_update(
							section,
							{code_vector: vector}),
						$elm$core$Platform$Cmd$none,
						A2(
							$author$project$Lia$Markdown$Update$send,
							'code',
							A2($elm$core$List$map, $author$project$Port$Event$encode, events)));
				}
			case 'UpdateQuiz':
				var childMsg = msg.a;
				var _v3 = A3($author$project$Lia$Markdown$Quiz$Update$update, section.effect_model.javascript, childMsg, section.quiz_vector);
				var vector = _v3.a;
				var event = _v3.b;
				var sub = _v3.c;
				return A2(
					$author$project$Lia$Markdown$Update$updateScript,
					sub,
					_Utils_Tuple3(
						_Utils_update(
							section,
							{quiz_vector: vector}),
						$elm$core$Platform$Cmd$none,
						A2(
							$author$project$Lia$Markdown$Update$send,
							'quiz',
							A2($elm$core$List$map, $author$project$Port$Event$encode, event))));
			case 'UpdateTask':
				var childMsg = msg.a;
				var _v4 = A3($author$project$Lia$Markdown$Task$Update$update, section.effect_model.javascript, childMsg, section.task_vector);
				var vector = _v4.a;
				var event = _v4.b;
				var sub = _v4.c;
				return A2(
					$author$project$Lia$Markdown$Update$updateScript,
					sub,
					_Utils_Tuple3(
						_Utils_update(
							section,
							{task_vector: vector}),
						$elm$core$Platform$Cmd$none,
						A2(
							$author$project$Lia$Markdown$Update$send,
							'task',
							A2($elm$core$List$map, $author$project$Port$Event$encode, event))));
			case 'UpdateSurvey':
				var childMsg = msg.a;
				var _v5 = A3($author$project$Lia$Markdown$Survey$Update$update, section.effect_model.javascript, childMsg, section.survey_vector);
				var vector = _v5.a;
				var event = _v5.b;
				var sub = _v5.c;
				return A2(
					$author$project$Lia$Markdown$Update$updateScript,
					sub,
					_Utils_Tuple3(
						_Utils_update(
							section,
							{survey_vector: vector}),
						$elm$core$Platform$Cmd$none,
						A2(
							$author$project$Lia$Markdown$Update$send,
							'survey',
							A2($elm$core$List$map, $author$project$Port$Event$encode, event))));
			case 'UpdateTable':
				var childMsg = msg.a;
				var vector = A2($author$project$Lia$Markdown$Table$Update$update, childMsg, section.table_vector);
				return _Utils_Tuple3(
					_Utils_update(
						section,
						{table_vector: vector}),
					$elm$core$Platform$Cmd$none,
					_List_Nil);
			case 'FootnoteShow':
				var key = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						section,
						{
							footnote2show: $elm$core$Maybe$Just(key)
						}),
					$elm$core$Platform$Cmd$none,
					_List_Nil);
			case 'FootnoteHide':
				return _Utils_Tuple3(
					_Utils_update(
						section,
						{footnote2show: $elm$core$Maybe$Nothing}),
					$elm$core$Platform$Cmd$none,
					_List_Nil);
			default:
				var childMsg = msg.a;
				return A2(
					$author$project$Lia$Markdown$Update$updateScript,
					$elm$core$Maybe$Just(childMsg),
					_Utils_Tuple3(section, $elm$core$Platform$Cmd$none, _List_Nil));
		}
	});
var $author$project$Lia$Markdown$Update$handle = F3(
	function (topic, event, section) {
		switch (topic) {
			case 'code':
				return A2(
					$author$project$Lia$Markdown$Update$update,
					$author$project$Lia$Markdown$Update$UpdateCode(
						$author$project$Lia$Markdown$Code$Update$handle(event)),
					section);
			case 'quiz':
				return A2(
					$author$project$Lia$Markdown$Update$update,
					$author$project$Lia$Markdown$Update$UpdateQuiz(
						$author$project$Lia$Markdown$Quiz$Update$handle(event)),
					section);
			case 'survey':
				return A2(
					$author$project$Lia$Markdown$Update$update,
					$author$project$Lia$Markdown$Update$UpdateSurvey(
						$author$project$Lia$Markdown$Survey$Update$handle(event)),
					section);
			case 'effect':
				return A2(
					$author$project$Lia$Markdown$Update$update,
					A2(
						$author$project$Lia$Markdown$Update$UpdateEffect,
						true,
						$author$project$Lia$Markdown$Effect$Update$handle(event)),
					section);
			case 'task':
				return A2(
					$author$project$Lia$Markdown$Update$update,
					$author$project$Lia$Markdown$Update$UpdateTask(
						$author$project$Lia$Markdown$Task$Update$handle(event)),
					section);
			default:
				return _Utils_Tuple3(section, $elm$core$Platform$Cmd$none, _List_Nil);
		}
	});
var $author$project$Lia$Settings$Update$Handle = function (a) {
	return {$: 'Handle', a: a};
};
var $author$project$Lia$Settings$Update$handle = $author$project$Lia$Settings$Update$Handle;
var $author$project$Lia$Markdown$Effect$Update$Init = function (a) {
	return {$: 'Init', a: a};
};
var $author$project$Lia$Markdown$Effect$Update$init = function (run_all_javascript) {
	return $author$project$Lia$Markdown$Effect$Update$Init(run_all_javascript);
};
var $author$project$Lia$Markdown$Update$initEffect = F2(
	function (run_all_javascript, sound) {
		return $author$project$Lia$Markdown$Update$update(
			A2(
				$author$project$Lia$Markdown$Update$UpdateEffect,
				sound,
				$author$project$Lia$Markdown$Effect$Update$init(run_all_javascript)));
	});
var $elm$browser$Browser$Navigation$pushUrl = _Browser_pushUrl;
var $author$project$Session$navTo = function (session) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$url$Url$toString,
		$elm$browser$Browser$Navigation$pushUrl(session.key));
};
var $author$project$Session$navToHome = function (session) {
	var url = session.url;
	return A2(
		$author$project$Session$navTo,
		session,
		_Utils_update(
			url,
			{fragment: $elm$core$Maybe$Nothing, query: $elm$core$Maybe$Nothing}));
};
var $author$project$Session$navToSlide = F2(
	function (session, id) {
		var url = session.url;
		return A2(
			$author$project$Session$navTo,
			session,
			_Utils_update(
				url,
				{
					fragment: $elm$core$Maybe$Just(
						$elm$core$String$fromInt(1 + id))
				}));
	});
var $author$project$Lia$Markdown$Effect$Update$Next = {$: 'Next'};
var $author$project$Lia$Markdown$Effect$Update$next = $author$project$Lia$Markdown$Effect$Update$Next;
var $author$project$Lia$Markdown$Update$nextEffect = function (sound) {
	return $author$project$Lia$Markdown$Update$update(
		A2($author$project$Lia$Markdown$Update$UpdateEffect, sound, $author$project$Lia$Markdown$Effect$Update$next));
};
var $author$project$Lia$Markdown$Effect$Update$Previous = {$: 'Previous'};
var $author$project$Lia$Markdown$Effect$Update$previous = $author$project$Lia$Markdown$Effect$Update$Previous;
var $author$project$Lia$Markdown$Update$previousEffect = function (sound) {
	return $author$project$Lia$Markdown$Update$update(
		A2($author$project$Lia$Markdown$Update$UpdateEffect, sound, $author$project$Lia$Markdown$Effect$Update$previous));
};
var $author$project$Lia$Update$send = function (sectionID) {
	return $elm$core$List$map(
		function (_v0) {
			var name = _v0.a;
			var json = _v0.b;
			return A3($author$project$Port$Event$Event, name, sectionID, json);
		});
};
var $author$project$Lia$Index$Update$make_visible = function (section) {
	return _Utils_update(
		section,
		{visible: true});
};
var $author$project$Lia$Index$Update$search_ = F2(
	function (pattern, text) {
		search_:
		while (true) {
			if (!pattern.b) {
				return true;
			} else {
				var p = pattern.a;
				var ps = pattern.b;
				if (!A2($elm$core$String$contains, p, text)) {
					return false;
				} else {
					var $temp$pattern = ps,
						$temp$text = text;
					pattern = $temp$pattern;
					text = $temp$text;
					continue search_;
				}
			}
		}
	});
var $author$project$Lia$Index$Update$search = F2(
	function (pattern, section) {
		return _Utils_update(
			section,
			{
				visible: A2(
					$author$project$Lia$Index$Update$search_,
					A2(
						$elm$core$List$filter,
						$elm$core$Basics$neq(''),
						A2($elm$core$String$split, ' ', pattern)),
					$elm$core$String$toLower(
						_Utils_ap(
							section.code,
							$author$project$Lia$Markdown$Inline$Stringify$stringify(section.title))))
			});
	});
var $author$project$Lia$Index$Update$scan = F2(
	function (sections, pattern) {
		var check = (pattern === '') ? $author$project$Lia$Index$Update$make_visible : $author$project$Lia$Index$Update$search(
			$elm$core$String$toLower(pattern));
		return A2($elm$core$Array$map, check, sections);
	});
var $author$project$Lia$Index$Update$update = F2(
	function (msg, sections) {
		var pattern = msg.a;
		return _Utils_Tuple2(
			pattern,
			A2($author$project$Lia$Index$Update$scan, sections, pattern));
	});
var $author$project$Port$TTS$Start = {$: 'Start'};
var $author$project$Port$TTS$Error = function (a) {
	return {$: 'Error', a: a};
};
var $author$project$Port$TTS$Stop = {$: 'Stop'};
var $author$project$Port$TTS$decode = function (json) {
	var _v0 = A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$string, json);
	if (_v0.$ === 'Ok') {
		switch (_v0.a) {
			case 'start':
				return $author$project$Port$TTS$Start;
			case 'stop':
				return $author$project$Port$TTS$Stop;
			default:
				var msg = _v0.a;
				return $author$project$Port$TTS$Error(msg);
		}
	} else {
		var msg = _v0.a;
		return $author$project$Port$TTS$Error(
			$elm$json$Json$Decode$errorToString(msg));
	}
};
var $author$project$Port$TTS$event = function (on) {
	return A3(
		$author$project$Port$Event$Event,
		'effect',
		-1,
		$author$project$Port$Event$encode(
			A3(
				$author$project$Port$Event$Event,
				'speak',
				-1,
				$elm$json$Json$Encode$string(
					on ? 'repeat' : 'cancel'))));
};
var $author$project$Lia$Settings$Update$load = function (model) {
	return A2(
		$elm$core$Basics$composeR,
		$author$project$Lia$Settings$Json$toModel(model),
		$elm$core$Result$withDefault(model));
};
var $author$project$Lia$Settings$Json$fromMode = function (mode) {
	return $elm$json$Json$Encode$string(
		function () {
			switch (mode.$) {
				case 'Textbook':
					return 'Textbook';
				case 'Presentation':
					return 'Presentation';
				default:
					return 'Slides';
			}
		}());
};
var $author$project$Lia$Settings$Json$fromModel = function (model) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'table_of_contents',
				$elm$json$Json$Encode$bool(model.table_of_contents)),
				_Utils_Tuple2(
				'mode',
				$author$project$Lia$Settings$Json$fromMode(model.mode)),
				_Utils_Tuple2(
				'theme',
				$elm$json$Json$Encode$string(model.theme)),
				_Utils_Tuple2(
				'light',
				$elm$json$Json$Encode$bool(model.light)),
				_Utils_Tuple2(
				'editor',
				$elm$json$Json$Encode$string(model.editor)),
				_Utils_Tuple2(
				'font_size',
				$elm$json$Json$Encode$int(model.font_size)),
				_Utils_Tuple2(
				'sound',
				$elm$json$Json$Encode$bool(model.sound)),
				_Utils_Tuple2(
				'lang',
				$elm$json$Json$Encode$string(model.lang))
			]));
};
var $author$project$Lia$Settings$Update$log = function (settings) {
	return _Utils_Tuple2(
		settings,
		_List_fromArray(
			[
				A3(
				$author$project$Port$Event$Event,
				'settings',
				-1,
				$author$project$Lia$Settings$Json$fromModel(settings))
			]));
};
var $author$project$Lia$Settings$Update$no_log = function (model) {
	return _Utils_Tuple2(model, _List_Nil);
};
var $author$project$Lia$Settings$Update$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'Handle':
				var event = msg.a;
				return $author$project$Lia$Settings$Update$no_log(
					function () {
						var _v1 = event.topic;
						switch (_v1) {
							case 'init':
								return A2(
									$author$project$Lia$Settings$Update$load,
									_Utils_update(
										model,
										{initialized: true}),
									event.message);
							case 'speak':
								return _Utils_update(
									model,
									{
										speaking: _Utils_eq(
											$author$project$Port$TTS$decode(event.message),
											$author$project$Port$TTS$Start)
									});
							default:
								return model;
						}
					}());
			case 'Toggle':
				switch (msg.a.$) {
					case 'TableOfContents':
						var _v2 = msg.a;
						return $author$project$Lia$Settings$Update$log(
							_Utils_update(
								model,
								{action: $elm$core$Maybe$Nothing, table_of_contents: !model.table_of_contents}));
					case 'Sound':
						var _v3 = msg.a;
						var _v4 = $author$project$Lia$Settings$Update$log(
							_Utils_update(
								model,
								{sound: !model.sound}));
						var new_model = _v4.a;
						var events = _v4.b;
						return _Utils_Tuple2(
							new_model,
							A2(
								$elm$core$List$cons,
								$author$project$Port$TTS$event(new_model.sound),
								events));
					case 'Light':
						var _v5 = msg.a;
						return $author$project$Lia$Settings$Update$log(
							_Utils_update(
								model,
								{light: !model.light}));
					default:
						var action = msg.a.a;
						return $author$project$Lia$Settings$Update$no_log(
							_Utils_update(
								model,
								{
									action: (!_Utils_eq(
										model.action,
										$elm$core$Maybe$Just(action))) ? $elm$core$Maybe$Just(action) : $elm$core$Maybe$Nothing
								}));
				}
			case 'SwitchMode':
				var mode = msg.a;
				if (mode.$ === 'Textbook') {
					var _v7 = $author$project$Lia$Settings$Update$log(
						_Utils_update(
							model,
							{mode: $author$project$Lia$Settings$Types$Textbook, sound: false}));
					var new_model = _v7.a;
					var events = _v7.b;
					return _Utils_Tuple2(
						new_model,
						A2(
							$elm$core$List$cons,
							$author$project$Port$TTS$event(new_model.sound),
							events));
				} else {
					return $author$project$Lia$Settings$Update$log(
						_Utils_update(
							model,
							{mode: mode}));
				}
			case 'ChangeTheme':
				var theme = msg.a;
				return $author$project$Lia$Settings$Update$log(
					_Utils_update(
						model,
						{theme: theme}));
			case 'ChangeEditor':
				var theme = msg.a;
				return $author$project$Lia$Settings$Update$log(
					_Utils_update(
						model,
						{editor: theme}));
			case 'ChangeFontSize':
				var inc = msg.a;
				return $author$project$Lia$Settings$Update$log(
					_Utils_update(
						model,
						{
							font_size: inc ? (model.font_size + 10) : ((model.font_size <= 10) ? model.font_size : (model.font_size - 10))
						}));
			case 'ChangeLang':
				var lang = msg.a;
				return $author$project$Lia$Settings$Update$log(
					_Utils_update(
						model,
						{lang: lang}));
			case 'Reset':
				return _Utils_Tuple2(
					model,
					_List_fromArray(
						[
							A3($author$project$Port$Event$Event, 'reset', -1, $elm$json$Json$Encode$null)
						]));
			case 'ShareCourse':
				var event = msg.a;
				return _Utils_Tuple2(
					model,
					_List_fromArray(
						[event]));
			default:
				return _Utils_Tuple2(model, _List_Nil);
		}
	});
var $author$project$Lia$Update$update = F3(
	function (session, msg, model) {
		update:
		while (true) {
			switch (msg.$) {
				case 'Load':
					var force = msg.a;
					var idx = msg.b;
					return ((_Utils_cmp(-1, idx) < 0) && (_Utils_cmp(
						idx,
						$elm$core$Array$length(model.sections)) < 0)) ? ((_Utils_eq(idx, model.section_active) || force) ? A3(
						$author$project$Lia$Update$update,
						session,
						$author$project$Lia$Update$InitSection,
						$author$project$Lia$Update$generate(
							_Utils_update(
								model,
								{section_active: idx}))) : _Utils_Tuple3(
						_Utils_update(
							model,
							{section_active: idx}),
						A2($author$project$Session$navToSlide, session, idx),
						_List_Nil)) : _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, _List_Nil);
				case 'Home':
					return _Utils_Tuple3(
						model,
						$author$project$Session$navToHome(session),
						_List_Nil);
				case 'UpdateSettings':
					var childMsg = msg.a;
					var _v1 = A2($author$project$Lia$Settings$Update$update, childMsg, model.settings);
					var settings = _v1.a;
					var events = _v1.b;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{settings: settings}),
						$elm$core$Platform$Cmd$none,
						events);
				case 'UpdateIndex':
					var childMsg = msg.a;
					var _v2 = A2($author$project$Lia$Index$Update$update, childMsg, model.sections);
					var index = _v2.a;
					var sections = _v2.b;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{index_model: index, sections: sections}),
						$elm$core$Platform$Cmd$none,
						_List_Nil);
				case 'Handle':
					var event = msg.a;
					var _v3 = event.topic;
					switch (_v3) {
						case 'settings':
							var _v4 = $author$project$Port$Event$decode(event.message);
							if (_v4.$ === 'Ok') {
								var e = _v4.a;
								var $temp$session = session,
									$temp$msg = $author$project$Lia$Update$UpdateSettings(
									$author$project$Lia$Settings$Update$handle(e)),
									$temp$model = model;
								session = $temp$session;
								msg = $temp$msg;
								model = $temp$model;
								continue update;
							} else {
								return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, _List_Nil);
							}
						case 'load':
							var $temp$session = session,
								$temp$msg = $author$project$Lia$Update$InitSection,
								$temp$model = $author$project$Lia$Update$generate(model);
							session = $temp$session;
							msg = $temp$msg;
							model = $temp$model;
							continue update;
						case 'reset':
							return _Utils_Tuple3(
								model,
								$elm$core$Platform$Cmd$none,
								_List_fromArray(
									[
										A3($author$project$Port$Event$Event, 'reset', -1, $elm$json$Json$Encode$null)
									]));
						case 'goto':
							var $temp$session = session,
								$temp$msg = A2($author$project$Lia$Update$Load, true, event.section),
								$temp$model = model;
							session = $temp$session;
							msg = $temp$msg;
							model = $temp$model;
							continue update;
						case 'swipe':
							var _v5 = A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$string, event.message);
							_v5$2:
							while (true) {
								if (_v5.$ === 'Ok') {
									switch (_v5.a) {
										case 'left':
											var $temp$session = session,
												$temp$msg = $author$project$Lia$Update$NextSection,
												$temp$model = model;
											session = $temp$session;
											msg = $temp$msg;
											model = $temp$model;
											continue update;
										case 'right':
											var $temp$session = session,
												$temp$msg = $author$project$Lia$Update$PrevSection,
												$temp$model = model;
											session = $temp$session;
											msg = $temp$msg;
											model = $temp$model;
											continue update;
										default:
											break _v5$2;
									}
								} else {
									break _v5$2;
								}
							}
							return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, _List_Nil);
						default:
							var _v6 = _Utils_Tuple2(
								A2($elm$core$Array$get, event.section, model.sections),
								$author$project$Port$Event$decode(event.message));
							if ((_v6.a.$ === 'Just') && (_v6.b.$ === 'Ok')) {
								var sec = _v6.a.a;
								var e = _v6.b.a;
								var _v7 = A3($author$project$Lia$Markdown$Update$handle, event.topic, e, sec);
								var sec_ = _v7.a;
								var cmd_ = _v7.b;
								var events = _v7.c;
								return _Utils_Tuple3(
									_Utils_update(
										model,
										{
											sections: A3($elm$core$Array$set, event.section, sec_, model.sections)
										}),
									A2($elm$core$Platform$Cmd$map, $author$project$Lia$Update$UpdateMarkdown, cmd_),
									A2($author$project$Lia$Update$send, event.section, events));
							} else {
								return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, _List_Nil);
							}
					}
				case 'Script':
					var _v8 = msg.a;
					var id = _v8.a;
					var sub = _v8.b;
					var _v9 = A2($elm$core$Array$get, id, model.sections);
					if (_v9.$ === 'Just') {
						var sec = _v9.a;
						var _v10 = A2(
							$author$project$Lia$Markdown$Update$updateScript,
							$elm$core$Maybe$Just(sub),
							_Utils_Tuple3(sec, $elm$core$Platform$Cmd$none, _List_Nil));
						var section = _v10.a;
						var cmd_ = _v10.b;
						var log_ = _v10.c;
						return _Utils_Tuple3(
							_Utils_update(
								model,
								{
									sections: A3($elm$core$Array$set, id, section, model.sections)
								}),
							A2($elm$core$Platform$Cmd$map, $author$project$Lia$Update$UpdateMarkdown, cmd_),
							A2($author$project$Lia$Update$send, id, log_));
					} else {
						return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, _List_Nil);
					}
				default:
					var _v11 = _Utils_Tuple2(
						msg,
						$author$project$Lia$Update$get_active_section(model));
					_v11$4:
					while (true) {
						if (_v11.b.$ === 'Just') {
							switch (_v11.a.$) {
								case 'UpdateMarkdown':
									var childMsg = _v11.a.a;
									var sec = _v11.b.a;
									var _v12 = A2($author$project$Lia$Markdown$Update$update, childMsg, sec);
									var section = _v12.a;
									var cmd_ = _v12.b;
									var log_ = _v12.c;
									return _Utils_Tuple3(
										A2($author$project$Lia$Update$set_active_section, model, section),
										A2($elm$core$Platform$Cmd$map, $author$project$Lia$Update$UpdateMarkdown, cmd_),
										A2($author$project$Lia$Update$send, model.section_active, log_));
								case 'NextSection':
									var _v13 = _v11.a;
									var sec = _v11.b.a;
									if (_Utils_eq(model.settings.mode, $author$project$Lia$Settings$Types$Textbook) || (!$author$project$Lia$Markdown$Effect$Update$has_next(sec.effect_model))) {
										var $temp$session = session,
											$temp$msg = A2($author$project$Lia$Update$Load, false, model.section_active + 1),
											$temp$model = model;
										session = $temp$session;
										msg = $temp$msg;
										model = $temp$model;
										continue update;
									} else {
										var _v14 = A2($author$project$Lia$Markdown$Update$nextEffect, model.settings.sound, sec);
										var sec_ = _v14.a;
										var cmd_ = _v14.b;
										var log_ = _v14.c;
										return _Utils_Tuple3(
											A2($author$project$Lia$Update$set_active_section, model, sec_),
											A2($elm$core$Platform$Cmd$map, $author$project$Lia$Update$UpdateMarkdown, cmd_),
											A2($author$project$Lia$Update$send, model.section_active, log_));
									}
								case 'PrevSection':
									var _v15 = _v11.a;
									var sec = _v11.b.a;
									if (_Utils_eq(model.settings.mode, $author$project$Lia$Settings$Types$Textbook) || (!$author$project$Lia$Markdown$Effect$Update$has_previous(sec.effect_model))) {
										var $temp$session = session,
											$temp$msg = A2($author$project$Lia$Update$Load, false, model.section_active - 1),
											$temp$model = model;
										session = $temp$session;
										msg = $temp$msg;
										model = $temp$model;
										continue update;
									} else {
										var _v16 = A2($author$project$Lia$Markdown$Update$previousEffect, model.settings.sound, sec);
										var sec_ = _v16.a;
										var cmd_ = _v16.b;
										var log_ = _v16.c;
										return _Utils_Tuple3(
											A2($author$project$Lia$Update$set_active_section, model, sec_),
											A2($elm$core$Platform$Cmd$map, $author$project$Lia$Update$UpdateMarkdown, cmd_),
											A2($author$project$Lia$Update$send, model.section_active, log_));
									}
								case 'InitSection':
									var _v17 = _v11.a;
									var sec = _v11.b.a;
									var _v18 = function () {
										var _v19 = model.settings.mode;
										if (_v19.$ === 'Textbook') {
											return A3($author$project$Lia$Markdown$Update$initEffect, true, false, sec);
										} else {
											return A3($author$project$Lia$Markdown$Update$initEffect, false, model.settings.sound, sec);
										}
									}();
									var sec_ = _v18.a;
									var cmd_ = _v18.b;
									var log_ = _v18.c;
									return _Utils_Tuple3(
										A2(
											$author$project$Lia$Update$set_active_section,
											_Utils_update(
												model,
												{to_do: _List_Nil}),
											sec_),
										A2($elm$core$Platform$Cmd$map, $author$project$Lia$Update$UpdateMarkdown, cmd_),
										A2(
											$elm$core$List$cons,
											A3($author$project$Port$Event$Event, 'slide', model.section_active, $elm$json$Json$Encode$null),
											A2(
												$elm$core$List$append,
												A2($author$project$Lia$Update$send, model.section_active, log_),
												model.to_do)));
								default:
									break _v11$4;
							}
						} else {
							break _v11$4;
						}
					}
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, _List_Nil);
			}
		}
	});
var $author$project$Lia$Script$load_slide = F2(
	function (session, force) {
		return A2(
			$elm$core$Basics$composeR,
			$author$project$Lia$Update$Load(force),
			$author$project$Lia$Update$update(session));
	});
var $author$project$Update$parse_error = function (msg) {
	switch (msg.$) {
		case 'BadUrl':
			var url = msg.a;
			return 'Bad Url ' + url;
		case 'Timeout':
			return 'Network timeout';
		case 'BadStatus':
			var _int = msg.a;
			return 'Bad status ' + $elm$core$String$fromInt(_int);
		case 'NetworkError':
			return 'Network error';
		default:
			var body = msg.a;
			return 'Bad body ' + body;
	}
};
var $elm$core$Basics$modBy = _Basics_modBy;
var $author$project$Lia$Script$pages = A2(
	$elm$core$Basics$composeR,
	function ($) {
		return $.sections;
	},
	$elm$core$Array$length);
var $author$project$Lia$Parser$Preprocessor$check = function (c) {
	return (!c) ? $andre_dietrich$parser_combinators$Combine$fail('') : $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0);
};
var $andre_dietrich$parser_combinators$Combine$currentColumn = A2(
	$elm$core$Basics$composeR,
	$andre_dietrich$parser_combinators$Combine$currentLocation,
	function ($) {
		return $.column;
	});
var $andre_dietrich$parser_combinators$Combine$withColumn = function (f) {
	return $andre_dietrich$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					$andre_dietrich$parser_combinators$Combine$app,
					f(
						$andre_dietrich$parser_combinators$Combine$currentColumn(stream)),
					state,
					stream);
			}));
};
var $author$project$Lia$Parser$Preprocessor$body = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$elm$core$String$concat,
	$andre_dietrich$parser_combinators$Combine$many(
		$andre_dietrich$parser_combinators$Combine$choice(
			_List_fromArray(
				[
					$andre_dietrich$parser_combinators$Combine$regex('(?:[^#`<]+|[\\x0D\n]+|<!--[\\S\\s]{0,1000}?-->)'),
					$andre_dietrich$parser_combinators$Combine$regex('(`{3,})[\\S\\s]*?\\1'),
					$andre_dietrich$parser_combinators$Combine$regex('`.+?`'),
					$andre_dietrich$parser_combinators$Combine$regex('(?:<([\\w+\\-]+)[\\S\\s]*?</\\2>|`|<)'),
					$andre_dietrich$parser_combinators$Combine$regex('#+(\\w|[^\\u0000-\\u007F]|[ \t]*\n)'),
					A2(
					$andre_dietrich$parser_combinators$Combine$keep,
					$andre_dietrich$parser_combinators$Combine$string('#'),
					$andre_dietrich$parser_combinators$Combine$withColumn($author$project$Lia$Parser$Preprocessor$check))
				]))));
var $author$project$Lia$Parser$Preprocessor$title_str = A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$newline, $author$project$Lia$Markdown$Inline$Parser$line);
var $author$project$Lia$Parser$Preprocessor$title_tag = A2(
	$andre_dietrich$parser_combinators$Combine$ignore,
	$author$project$Lia$Parser$Helper$spaces1,
	A2(
		$andre_dietrich$parser_combinators$Combine$map,
		$elm$core$String$length,
		$andre_dietrich$parser_combinators$Combine$regex('#+')));
var $author$project$Lia$Parser$Preprocessor$section = A2(
	$andre_dietrich$parser_combinators$Combine$andMap,
	$author$project$Lia$Parser$Preprocessor$body,
	A2(
		$andre_dietrich$parser_combinators$Combine$andMap,
		$author$project$Lia$Parser$Preprocessor$title_str,
		A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Section$Base, $author$project$Lia$Parser$Preprocessor$title_tag)));
var $author$project$Lia$Parser$Parser$parse_titles = F2(
	function (defines, code) {
		var _v0 = A3(
			$andre_dietrich$parser_combinators$Combine$runParser,
			$author$project$Lia$Parser$Preprocessor$section,
			A2($author$project$Lia$Parser$Context$init, $elm$core$Maybe$Nothing, defines),
			code);
		if (_v0.$ === 'Ok') {
			var _v1 = _v0.a;
			var data = _v1.b;
			var rslt = _v1.c;
			return $elm$core$Result$Ok(
				_Utils_Tuple2(rslt, data.input));
		} else {
			var _v2 = _v0.a;
			var stream = _v2.b;
			var ms = _v2.c;
			return $elm$core$Result$Err(
				A2($author$project$Lia$Parser$Parser$formatError, ms, stream));
		}
	});
var $author$project$Lia$Script$parse_section = F2(
	function (model, code) {
		var _v0 = A2($author$project$Lia$Parser$Parser$parse_titles, model.definition, code);
		if (_v0.$ === 'Ok') {
			var _v1 = _v0.a;
			var sec = _v1.a;
			var rest = _v1.b;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						sections: A2(
							$elm$core$Array$push,
							A2(
								$author$project$Lia$Section$init,
								$author$project$Lia$Script$pages(model),
								sec),
							model.sections)
					}),
				$elm$core$String$isEmpty(rest) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(rest));
		} else {
			var msg = _v0.a;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						error: $elm$core$Maybe$Just(msg)
					}),
				$elm$core$Maybe$Nothing);
		}
	});
var $author$project$Model$Running = {$: 'Running'};
var $author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation = function (annotation) {
	if (!annotation.b) {
		return $elm$json$Json$Encode$null;
	} else {
		return A2(
			$elm$json$Json$Encode$list,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$map,
				function (_v1) {
					var key = _v1.a;
					var value = _v1.b;
					return A2(
						$elm$json$Json$Encode$list,
						$elm$json$Json$Encode$string,
						_List_fromArray(
							[key, value]));
				},
				annotation));
	}
};
var $author$project$Lia$Markdown$HTML$Types$encode = F2(
	function (contentEncoder, obj) {
		return $elm$json$Json$Encode$object(
			function () {
				if (obj.$ === 'Node') {
					var node = obj.a;
					var attr = obj.b;
					var children = obj.c;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'node',
							$elm$json$Json$Encode$string(node)),
							_Utils_Tuple2(
							'attr',
							A3(
								$elm$json$Json$Encode$dict,
								$elm$core$Basics$identity,
								$elm$json$Json$Encode$string,
								$elm$core$Dict$fromList(attr))),
							_Utils_Tuple2(
							'children',
							A2($elm$json$Json$Encode$list, contentEncoder, children))
						]);
				} else {
					var content = obj.a;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'node_inline',
							$elm$json$Json$Encode$string(content))
						]);
				}
			}());
	});
var $author$project$Lia$Markdown$Inline$Json$Encode$encInline = function (element) {
	return $elm$json$Json$Encode$object(
		function () {
			switch (element.$) {
				case 'Chars':
					var str = element.a;
					var a = element.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Chars',
							$elm$json$Json$Encode$string(str)),
							_Utils_Tuple2(
							'a',
							$author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				case 'Symbol':
					var str = element.a;
					var a = element.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Symbol',
							$elm$json$Json$Encode$string(str)),
							_Utils_Tuple2(
							'a',
							$author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				case 'Bold':
					var x = element.a;
					var a = element.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Bold',
							$author$project$Lia$Markdown$Inline$Json$Encode$encInline(x)),
							_Utils_Tuple2(
							'a',
							$author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				case 'Italic':
					var x = element.a;
					var a = element.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Italic',
							$author$project$Lia$Markdown$Inline$Json$Encode$encInline(x)),
							_Utils_Tuple2(
							'a',
							$author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				case 'Strike':
					var x = element.a;
					var a = element.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Strike',
							$author$project$Lia$Markdown$Inline$Json$Encode$encInline(x)),
							_Utils_Tuple2(
							'a',
							$author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				case 'Underline':
					var x = element.a;
					var a = element.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Underline',
							$author$project$Lia$Markdown$Inline$Json$Encode$encInline(x)),
							_Utils_Tuple2(
							'a',
							$author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				case 'Superscript':
					var x = element.a;
					var a = element.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Superscript',
							$author$project$Lia$Markdown$Inline$Json$Encode$encInline(x)),
							_Utils_Tuple2(
							'a',
							$author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				case 'Verbatim':
					var str = element.a;
					var a = element.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Verbatim',
							$elm$json$Json$Encode$string(str)),
							_Utils_Tuple2(
							'a',
							$author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				case 'Formula':
					var head = element.a;
					var body = element.b;
					var a = element.c;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Formula',
							$elm$json$Json$Encode$string(head)),
							_Utils_Tuple2(
							'body',
							$elm$json$Json$Encode$string(body)),
							_Utils_Tuple2(
							'a',
							$author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				case 'Ref':
					var ref = element.a;
					var a = element.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Ref',
							$author$project$Lia$Markdown$Inline$Json$Encode$encReference(ref)),
							_Utils_Tuple2(
							'a',
							$author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				case 'FootnoteMark':
					var str = element.a;
					var a = element.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'FootnoteMark',
							$elm$json$Json$Encode$string(str)),
							_Utils_Tuple2(
							'a',
							$author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				case 'EInline':
					var e = element.a;
					var a = element.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'EInline',
							$author$project$Lia$Markdown$Inline$Json$Encode$encode(e.content)),
							_Utils_Tuple2(
							'begin',
							$elm$json$Json$Encode$int(e.begin)),
							_Utils_Tuple2(
							'end',
							A2(
								$elm$core$Maybe$withDefault,
								$elm$json$Json$Encode$null,
								A2($elm$core$Maybe$map, $elm$json$Json$Encode$int, e.end))),
							_Utils_Tuple2(
							'playback',
							$elm$json$Json$Encode$bool(e.playback)),
							_Utils_Tuple2(
							'voice',
							$elm$json$Json$Encode$string(e.voice)),
							_Utils_Tuple2(
							'id',
							$elm$json$Json$Encode$int(e.id)),
							_Utils_Tuple2(
							'a',
							$author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				case 'Container':
					var list = element.a;
					var a = element.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Container',
							$author$project$Lia$Markdown$Inline$Json$Encode$encode(list)),
							_Utils_Tuple2(
							'a',
							$author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				case 'IHTML':
					var node = element.a;
					var a = element.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'IHTML',
							A2($author$project$Lia$Markdown$HTML$Types$encode, $author$project$Lia$Markdown$Inline$Json$Encode$encInline, node)),
							_Utils_Tuple2(
							'a',
							$author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				default:
					var id = element.a;
					var a = element.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Script',
							$elm$json$Json$Encode$int(id)),
							_Utils_Tuple2(
							'a',
							$author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
			}
		}());
};
var $author$project$Lia$Markdown$Inline$Json$Encode$encMultimedia = F4(
	function (_class, list, _v1, title) {
		var stream = _v1.a;
		var url = _v1.b;
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					_class,
					$author$project$Lia$Markdown$Inline$Json$Encode$encode(list)),
					_Utils_Tuple2(
					'stream',
					$elm$json$Json$Encode$bool(stream)),
					_Utils_Tuple2(
					'url',
					$elm$json$Json$Encode$string(url)),
					$author$project$Lia$Markdown$Inline$Json$Encode$encTitle(title)
				]));
	});
var $author$project$Lia$Markdown$Inline$Json$Encode$encRef = F4(
	function (_class, list, url, title) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					_class,
					$author$project$Lia$Markdown$Inline$Json$Encode$encode(list)),
					_Utils_Tuple2(
					'url',
					$elm$json$Json$Encode$string(url)),
					$author$project$Lia$Markdown$Inline$Json$Encode$encTitle(title)
				]));
	});
var $author$project$Lia$Markdown$Inline$Json$Encode$encReference = function (ref) {
	switch (ref.$) {
		case 'Link':
			var list = ref.a;
			var url = ref.b;
			var title = ref.c;
			return A4($author$project$Lia$Markdown$Inline$Json$Encode$encRef, 'Link', list, url, title);
		case 'Mail':
			var list = ref.a;
			var url = ref.b;
			var title = ref.c;
			return A4($author$project$Lia$Markdown$Inline$Json$Encode$encRef, 'Mail', list, url, title);
		case 'Embed':
			var list = ref.a;
			var url = ref.b;
			var title = ref.c;
			return A4($author$project$Lia$Markdown$Inline$Json$Encode$encRef, 'Embed', list, url, title);
		case 'Image':
			var list = ref.a;
			var url = ref.b;
			var title = ref.c;
			return A4($author$project$Lia$Markdown$Inline$Json$Encode$encRef, 'Image', list, url, title);
		case 'Audio':
			var list = ref.a;
			var url = ref.b;
			var title = ref.c;
			return A4($author$project$Lia$Markdown$Inline$Json$Encode$encMultimedia, 'Audio', list, url, title);
		case 'Movie':
			var list = ref.a;
			var url = ref.b;
			var title = ref.c;
			return A4($author$project$Lia$Markdown$Inline$Json$Encode$encMultimedia, 'Movie', list, url, title);
		case 'Preview_Lia':
			var url = ref.a;
			return A4($author$project$Lia$Markdown$Inline$Json$Encode$encRef, 'Preview_Lia', _List_Nil, url, $elm$core$Maybe$Nothing);
		case 'Preview_Link':
			var url = ref.a;
			return A4($author$project$Lia$Markdown$Inline$Json$Encode$encRef, 'Preview_Link', _List_Nil, url, $elm$core$Maybe$Nothing);
		default:
			var url = ref.a;
			var title = ref.b;
			return A4($author$project$Lia$Markdown$Inline$Json$Encode$encRef, 'QR_Link', _List_Nil, url, title);
	}
};
var $author$project$Lia$Markdown$Inline$Json$Encode$encTitle = function (title) {
	return _Utils_Tuple2(
		'title',
		A2(
			$elm$core$Maybe$withDefault,
			$elm$json$Json$Encode$null,
			A2($elm$core$Maybe$map, $author$project$Lia$Markdown$Inline$Json$Encode$encode, title)));
};
var $author$project$Lia$Markdown$Inline$Json$Encode$encode = function (list) {
	return A2($elm$json$Json$Encode$list, $author$project$Lia$Markdown$Inline$Json$Encode$encInline, list);
};
var $author$project$Lia$Json$Encode$encSection = function (sec) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'title',
				$author$project$Lia$Markdown$Inline$Json$Encode$encode(sec.title)),
				_Utils_Tuple2(
				'code',
				$elm$json$Json$Encode$string(sec.code)),
				_Utils_Tuple2(
				'indentation',
				$elm$json$Json$Encode$int(sec.indentation))
			]));
};
var $author$project$Lia$Definition$Json$Encode$encResource = function (r) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				function () {
				if (r.$ === 'Link') {
					var url = r.a;
					return _Utils_Tuple2(
						'Link',
						$elm$json$Json$Encode$string(url));
				} else {
					var url = r.a;
					return _Utils_Tuple2(
						'Script',
						$elm$json$Json$Encode$string(url));
				}
			}()
			]));
};
var $author$project$Lia$Definition$Json$Encode$encode = function (def) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'author',
				$elm$json$Json$Encode$string(def.author)),
				_Utils_Tuple2(
				'date',
				$elm$json$Json$Encode$string(def.date)),
				_Utils_Tuple2(
				'email',
				$elm$json$Json$Encode$string(def.email)),
				_Utils_Tuple2(
				'language',
				$elm$json$Json$Encode$string(def.language)),
				_Utils_Tuple2(
				'logo',
				$elm$json$Json$Encode$string(def.logo)),
				_Utils_Tuple2(
				'version',
				$elm$json$Json$Encode$string(def.version)),
				_Utils_Tuple2(
				'base',
				$elm$json$Json$Encode$string(def.base)),
				_Utils_Tuple2(
				'narrator',
				$elm$json$Json$Encode$string(def.narrator)),
				_Utils_Tuple2(
				'onload',
				$elm$json$Json$Encode$string(def.onload)),
				_Utils_Tuple2(
				'comment',
				$author$project$Lia$Markdown$Inline$Json$Encode$encode(def.comment)),
				_Utils_Tuple2(
				'attributes',
				A2($elm$json$Json$Encode$list, $author$project$Lia$Markdown$Inline$Json$Encode$encode, def.attributes)),
				_Utils_Tuple2(
				'resources',
				A2($elm$json$Json$Encode$list, $author$project$Lia$Definition$Json$Encode$encResource, def.resources)),
				_Utils_Tuple2(
				'translation',
				A3($elm$json$Json$Encode$dict, $elm$core$Basics$identity, $elm$json$Json$Encode$string, def.translation)),
				_Utils_Tuple2(
				'macro',
				A3($elm$json$Json$Encode$dict, $elm$core$Basics$identity, $elm$json$Json$Encode$string, def.macro))
			]));
};
var $author$project$Lia$Json$Encode$getCodeFromLn = function (ln) {
	switch (ln.$) {
		case 'Bg':
			return 'bg';
		case 'De':
			return 'de';
		case 'Fa':
			return 'fa';
		case 'Hy':
			return 'hy';
		case 'Ua':
			return 'ua';
		default:
			return 'en';
	}
};
var $author$project$Lia$Json$Encode$get_title = function (sections) {
	return $elm$core$String$trim(
		A2(
			$elm$core$Maybe$withDefault,
			'Lia',
			A2(
				$elm$core$Maybe$map,
				$author$project$Lia$Markdown$Inline$Stringify$stringify,
				A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.title;
					},
					A2($elm$core$Array$get, 0, sections)))));
};
var $author$project$Lia$Json$Encode$encode = function (model) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'title',
				$author$project$Lia$Markdown$Inline$Json$Encode$encode(
					A2(
						$elm$core$Maybe$withDefault,
						_List_fromArray(
							[
								A2($author$project$Lia$Markdown$Inline$Types$Chars, model.title, _List_Nil)
							]),
						A2(
							$elm$core$Maybe$map,
							function ($) {
								return $.title;
							},
							A2($elm$core$Array$get, 0, model.sections))))),
				_Utils_Tuple2(
				'str_title',
				$elm$json$Json$Encode$string(
					$author$project$Lia$Json$Encode$get_title(model.sections))),
				_Utils_Tuple2(
				'definition',
				$author$project$Lia$Definition$Json$Encode$encode(model.definition)),
				_Utils_Tuple2(
				'comment',
				$elm$json$Json$Encode$string(
					$author$project$Lia$Markdown$Inline$Stringify$stringify(model.definition.comment))),
				_Utils_Tuple2(
				'readme',
				$elm$json$Json$Encode$string(model.readme)),
				_Utils_Tuple2(
				'url',
				$elm$json$Json$Encode$string(model.url)),
				_Utils_Tuple2(
				'origin',
				$elm$json$Json$Encode$string(model.origin)),
				_Utils_Tuple2(
				'sections',
				A2($elm$json$Json$Encode$array, $author$project$Lia$Json$Encode$encSection, model.sections)),
				_Utils_Tuple2(
				'section_active',
				$elm$json$Json$Encode$int(model.section_active)),
				_Utils_Tuple2(
				'version',
				$elm$json$Json$Encode$int(
					A2(
						$elm$core$Maybe$withDefault,
						0,
						$elm$core$String$toInt(
							A2(
								$elm$core$Maybe$withDefault,
								'0',
								$elm$core$List$head(
									A2($elm$core$String$split, '.', model.definition.version))))))),
				_Utils_Tuple2(
				'translation',
				$elm$json$Json$Encode$string(
					$author$project$Lia$Json$Encode$getCodeFromLn(model.translation)))
			]));
};
var $author$project$Lia$Script$generateIndex = F2(
	function (id, title) {
		return _Utils_Tuple2(
			'#' + $elm$core$String$concat(
				A2(
					$elm$core$List$intersperse,
					'-',
					A2(
						$elm$core$List$filter,
						A2($elm$core$Basics$composeR, $elm$core$String$isEmpty, $elm$core$Basics$not),
						A2(
							$elm$core$String$split,
							' ',
							A3(
								$elm$core$String$replace,
								'-',
								' ',
								$elm$core$String$toLower(title)))))),
			'#' + $elm$core$String$fromInt(id + 1));
	});
var $author$project$Lia$Script$get_title = A2(
	$elm$core$Basics$composeR,
	$elm$core$Array$get(0),
	A2(
		$elm$core$Basics$composeR,
		$elm$core$Maybe$map(
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.title;
				},
				A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$Stringify$stringify, $elm$core$String$trim))),
		$elm$core$Maybe$withDefault('Lia')));
var $author$project$Lia$Script$filterIndex = F2(
	function (str, _v0) {
		var idx = _v0.a;
		return _Utils_eq(str, idx);
	});
var $author$project$Lia$Script$searchIndex = F2(
	function (index, str) {
		var fn = $author$project$Lia$Script$filterIndex(
			$elm$core$String$toLower(str));
		var _v0 = $elm$core$List$head(
			A2($elm$core$List$filter, fn, index));
		if (_v0.$ === 'Just') {
			var _v1 = _v0.a;
			var key = _v1.b;
			return key;
		} else {
			return str;
		}
	});
var $author$project$Lia$Script$load_first_slide = F2(
	function (session, model) {
		var search_index = $author$project$Lia$Script$searchIndex(
			A2(
				$elm$core$List$indexedMap,
				$author$project$Lia$Script$generateIndex,
				$elm$core$Array$toList(
					A2(
						$elm$core$Array$map,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.title;
							},
							A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$Stringify$stringify, $elm$core$String$trim)),
						model.sections))));
		var slide = A2(
			$elm$core$Maybe$withDefault,
			model.section_active,
			A2(
				$elm$core$Maybe$andThen,
				$author$project$Lia$Script$getSectionNumberFrom(search_index),
				model.anchor));
		return A4(
			$author$project$Lia$Script$load_slide,
			session,
			false,
			(_Utils_cmp(
				slide,
				$author$project$Lia$Script$pages(model)) > -1) ? ($author$project$Lia$Script$pages(model) - 1) : slide,
			_Utils_update(
				model,
				{
					search_index: search_index,
					title: $author$project$Lia$Script$get_title(model.sections),
					to_do: A2(
						$elm$core$List$cons,
						A3(
							$author$project$Port$Event$Event,
							'init',
							model.section_active,
							$author$project$Lia$Json$Encode$encode(model)),
						model.to_do)
				}));
	});
var $author$project$Session$setQuery = F2(
	function (query, session) {
		var url = session.url;
		return _Utils_update(
			session,
			{
				url: _Utils_update(
					url,
					{
						query: $elm$core$Maybe$Just(query)
					})
			});
	});
var $author$project$Update$start = function (model) {
	var session = A2($author$project$Session$setQuery, model.lia.readme, model.session);
	var lia = model.lia;
	var slide = A2(
		$elm$core$Maybe$withDefault,
		lia.section_active,
		A2(
			$elm$core$Maybe$map,
			$elm$core$Basics$add(-1),
			A2($elm$core$Maybe$andThen, $elm$core$String$toInt, session.url.fragment)));
	var _v0 = A2(
		$author$project$Lia$Script$load_first_slide,
		session,
		_Utils_update(
			lia,
			{section_active: slide}));
	var parsed = _v0.a;
	var cmd = _v0.b;
	var events = _v0.c;
	return _Utils_Tuple2(
		_Utils_update(
			model,
			{lia: parsed, session: session, state: $author$project$Model$Running}),
		A3($author$project$Update$batch, $author$project$Update$LiaScript, cmd, events));
};
var $author$project$Update$parsing = function (model) {
	parsing:
	while (true) {
		var _v0 = model.state;
		_v0$2:
		while (true) {
			if (_v0.$ === 'Parsing') {
				if (!_v0.a) {
					if (!_v0.b) {
						return $author$project$Update$start(model);
					} else {
						break _v0$2;
					}
				} else {
					var templates_to_load = _v0.b;
					var _v1 = model.code;
					if (_v1.$ === 'Nothing') {
						var $temp$model = _Utils_update(
							model,
							{
								state: A2($author$project$Model$Parsing, false, templates_to_load)
							});
						model = $temp$model;
						continue parsing;
					} else {
						var code = _v1.a;
						var _v2 = A2($author$project$Lia$Script$parse_section, model.lia, code);
						var lia = _v2.a;
						var remaining_code = _v2.b;
						var new_model = _Utils_update(
							model,
							{code: remaining_code, lia: lia});
						if (!A2(
							$elm$core$Basics$modBy,
							4,
							$author$project$Lia$Script$pages(lia))) {
							return _Utils_Tuple2(
								new_model,
								$author$project$Update$message($author$project$Update$LiaParse));
						} else {
							var $temp$model = new_model;
							model = $temp$model;
							continue parsing;
						}
					}
				}
			} else {
				break _v0$2;
			}
		}
		return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
	}
};
var $author$project$Update$proxy = 'https://cors-anywhere.herokuapp.com/';
var $author$project$Session$setFragment = F2(
	function (slide, session) {
		var url = session.url;
		return _Utils_update(
			session,
			{
				url: _Utils_update(
					url,
					{
						fragment: $elm$core$Maybe$Just(
							$elm$core$String$fromInt(slide))
					})
			});
	});
var $author$project$Session$setScreen = F2(
	function (size, session) {
		return _Utils_update(
			session,
			{screen: size});
	});
var $author$project$Session$setUrl = F2(
	function (url, session) {
		return _Utils_update(
			session,
			{url: url});
	});
var $elm$core$Dict$filter = F2(
	function (isGood, dict) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, d) {
					return A2(isGood, k, v) ? A3($elm$core$Dict$insert, k, v, d) : d;
				}),
			$elm$core$Dict$empty,
			dict);
	});
var $author$project$Index$Update$activate = F3(
	function (course, version, list) {
		activate:
		while (true) {
			if (!list.b) {
				return _List_Nil;
			} else {
				var c = list.a;
				var cs = list.b;
				if (_Utils_eq(c.id, course)) {
					return A2(
						$elm$core$List$cons,
						_Utils_update(
							c,
							{
								active: function () {
									if (version.$ === 'Just') {
										var ver = version.a;
										return $elm$core$List$head(
											$elm$core$Dict$keys(
												A2(
													$elm$core$Dict$filter,
													F2(
														function (_v2, v) {
															return _Utils_eq(v.definition.version, ver);
														}),
													c.versions)));
									} else {
										return $elm$core$Maybe$Nothing;
									}
								}()
							}),
						cs);
				} else {
					var $temp$course = course,
						$temp$version = version,
						$temp$list = cs;
					course = $temp$course;
					version = $temp$version;
					list = $temp$list;
					continue activate;
				}
			}
		}
	});
var $author$project$Index$Update$IndexError = function (a) {
	return {$: 'IndexError', a: a};
};
var $author$project$Index$Update$IndexList = function (a) {
	return {$: 'IndexList', a: a};
};
var $author$project$Index$Update$decList = A2(
	$elm$json$Json$Decode$map,
	$author$project$Index$Update$IndexList,
	A2(
		$elm$json$Json$Decode$field,
		'list',
		$elm$json$Json$Decode$list($author$project$Index$Update$decCourse)));
var $author$project$Index$Update$decode = function (json) {
	var _v0 = A2($elm$json$Json$Decode$decodeValue, $author$project$Index$Update$decList, json);
	if (_v0.$ === 'Ok') {
		var rslt = _v0.a;
		return rslt;
	} else {
		return $author$project$Index$Update$IndexError('decode');
	}
};
var $author$project$Index$Update$delete = A2(
	$elm$core$Basics$composeR,
	$elm$json$Json$Encode$string,
	A2(
		$elm$core$Basics$composeR,
		A2($author$project$Port$Event$Event, 'delete', -1),
		$author$project$Index$Update$index));
var $author$project$Index$Update$reset = F2(
	function (course, version) {
		return $author$project$Index$Update$index(
			A3(
				$author$project$Port$Event$Event,
				'reset',
				version,
				$elm$json$Json$Encode$string(course)));
	});
var $author$project$Port$Share$share = F3(
	function (title, text, url) {
		return A3(
			$author$project$Port$Event$Event,
			'share',
			-1,
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'title',
						$elm$json$Json$Encode$string(title)),
						_Utils_Tuple2(
						'text',
						$elm$json$Json$Encode$string(text)),
						_Utils_Tuple2(
						'url',
						$elm$json$Json$Encode$string(url))
					])));
	});
var $author$project$Index$Update$update = F2(
	function (msg, model) {
		update:
		while (true) {
			switch (msg.$) {
				case 'IndexList':
					var list = msg.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{courses: list, initialized: true}),
						$elm$core$Platform$Cmd$none,
						_List_Nil);
				case 'IndexError':
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, _List_Nil);
				case 'Delete':
					var courseID = msg.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								courses: A2(
									$elm$core$List$filter,
									A2(
										$elm$core$Basics$composeR,
										function ($) {
											return $.id;
										},
										$elm$core$Basics$neq(courseID)),
									model.courses)
							}),
						$elm$core$Platform$Cmd$none,
						_List_fromArray(
							[
								$author$project$Index$Update$delete(courseID)
							]));
				case 'Reset':
					var courseID = msg.a;
					var version = msg.b;
					return _Utils_Tuple3(
						model,
						$elm$core$Platform$Cmd$none,
						_List_fromArray(
							[
								A2(
								$author$project$Index$Update$reset,
								courseID,
								A2(
									$elm$core$Maybe$withDefault,
									-1,
									function () {
										if (version.$ === 'Just') {
											var ver = version.a;
											return $elm$core$String$toInt(ver);
										} else {
											return A2(
												$elm$core$Maybe$map,
												function (c) {
													return A2(
														$elm$core$Maybe$withDefault,
														-1,
														$elm$core$List$maximum(
															A2(
																$elm$core$List$filterMap,
																$elm$core$String$toInt,
																$elm$core$Dict$keys(c.versions))));
												},
												$elm$core$List$head(
													A2(
														$elm$core$List$filter,
														A2(
															$elm$core$Basics$composeR,
															function ($) {
																return $.id;
															},
															$elm$core$Basics$eq(courseID)),
														model.courses)));
										}
									}()))
							]));
				case 'Handle':
					var json = msg.a;
					var $temp$msg = $author$project$Index$Update$decode(json),
						$temp$model = model;
					msg = $temp$msg;
					model = $temp$model;
					continue update;
				case 'Input':
					var url = msg.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{input: url}),
						$elm$core$Platform$Cmd$none,
						_List_Nil);
				case 'Restore':
					var course = msg.a;
					var version = msg.b;
					return _Utils_Tuple3(
						model,
						$elm$core$Platform$Cmd$none,
						_List_fromArray(
							[
								A2(
								$author$project$Index$Update$restore,
								A2($elm$core$Maybe$withDefault, '0.0.0', version),
								course)
							]));
				case 'Activate':
					var course = msg.a;
					var version = msg.b;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								courses: A3($author$project$Index$Update$activate, course, version, model.courses)
							}),
						$elm$core$Platform$Cmd$none,
						_List_Nil);
				case 'Share':
					var title = msg.a;
					var text = msg.b;
					var url = msg.c;
					return _Utils_Tuple3(
						model,
						$elm$core$Platform$Cmd$none,
						_List_fromArray(
							[
								A3($author$project$Port$Share$share, title, text, url)
							]));
				default:
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, _List_Nil);
			}
		}
	});
var $author$project$Lia$Script$update = $author$project$Lia$Update$update;
var $author$project$Update$update = F2(
	function (msg, model) {
		update:
		while (true) {
			switch (msg.$) {
				case 'LiaScript':
					var childMsg = msg.a;
					var _v1 = A3($author$project$Lia$Script$update, model.session, childMsg, model.lia);
					var lia = _v1.a;
					var cmd = _v1.b;
					var events = _v1.c;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{lia: lia}),
						A3($author$project$Update$batch, $author$project$Update$LiaScript, cmd, events));
				case 'Handle':
					var event = msg.a;
					var _v2 = event.topic;
					switch (_v2) {
						case 'index':
							var $temp$msg = $author$project$Update$UpdateIndex(
								$author$project$Index$Update$handle(event.message)),
								$temp$model = model;
							msg = $temp$msg;
							model = $temp$model;
							continue update;
						case 'getIndex':
							var _v3 = $author$project$Index$Update$decodeGet(event.message);
							var id = _v3.a;
							var course = _v3.b;
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{preload: course}),
								A2($author$project$Update$download, $author$project$Update$Load_ReadMe_Result, id));
						case 'restore':
							var _v4 = $author$project$Lia$Json$Decode$decode(event.message);
							if (_v4.$ === 'Ok') {
								var lia = _v4.a;
								return $author$project$Update$start(
									_Utils_update(
										model,
										{
											lia: A2(
												$author$project$Lia$Script$add_todos,
												lia.definition,
												_Utils_update(
													lia,
													{settings: model.lia.settings}))
										}));
							} else {
								return _Utils_Tuple2(
									_Utils_update(
										model,
										{preload: $elm$core$Maybe$Nothing}),
									A2($author$project$Update$download, $author$project$Update$Load_ReadMe_Result, model.lia.readme));
							}
						default:
							var $temp$msg = $author$project$Update$LiaScript(
								$author$project$Lia$Script$handle(event)),
								$temp$model = model;
							msg = $temp$msg;
							model = $temp$model;
							continue update;
					}
				case 'UpdateIndex':
					var childMsg = msg.a;
					var _v5 = A2($author$project$Index$Update$update, childMsg, model.index);
					var index = _v5.a;
					var cmd = _v5.b;
					var events = _v5.c;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{index: index}),
						A3($author$project$Update$batch, $author$project$Update$UpdateIndex, cmd, events));
				case 'LinkClicked':
					var urlRequest = msg.a;
					if (urlRequest.$ === 'Internal') {
						var url = urlRequest.a;
						return _Utils_Tuple2(
							model,
							$elm$browser$Browser$Navigation$load(
								$elm$url$Url$toString(url)));
					} else {
						var href = urlRequest.a;
						return _Utils_Tuple2(
							model,
							$elm$browser$Browser$Navigation$load(href));
					}
				case 'UrlChanged':
					var url = msg.a;
					if (!_Utils_eq(url, model.session.url)) {
						var _v7 = $author$project$Session$getType(url);
						if (_v7.$ === 'Index') {
							return $author$project$Update$initIndex(
								_Utils_update(
									model,
									{
										session: A2($author$project$Session$setUrl, url, model.session),
										state: $author$project$Model$Idle
									}));
						} else {
							var fragment = _v7.b;
							var slide = A2(
								$elm$core$Maybe$withDefault,
								0,
								A2(
									$elm$core$Maybe$andThen,
									$author$project$Lia$Script$getSectionNumberFrom(model.lia.search_index),
									fragment));
							var session = A2(
								$author$project$Session$setFragment,
								slide + 1,
								A2($author$project$Session$setUrl, url, model.session));
							var _v8 = A4($author$project$Lia$Script$load_slide, session, true, slide, model.lia);
							var lia = _v8.a;
							var cmd = _v8.b;
							var events = _v8.c;
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{lia: lia, session: session}),
								A3($author$project$Update$batch, $author$project$Update$LiaScript, cmd, events));
						}
					} else {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					}
				case 'Resize':
					var screen = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								session: A2($author$project$Session$setScreen, screen, model.session)
							}),
						$elm$core$Platform$Cmd$none);
				case 'LiaParse':
					return $author$project$Update$parsing(model);
				case 'Load_ReadMe_Result':
					if (msg.b.$ === 'Ok') {
						var readme = msg.b.a;
						return A2($author$project$Update$load_readme, readme, model);
					} else {
						var url = msg.a;
						var info = msg.b.a;
						return A2($elm$core$String$startsWith, $author$project$Update$proxy, url) ? _Utils_Tuple2(
							_Utils_update(
								model,
								{
									state: $author$project$Model$Error(
										$author$project$Update$parse_error(info))
								}),
							$author$project$Update$event2js(
								A3(
									$author$project$Port$Event$Event,
									'offline',
									-1,
									$elm$json$Json$Encode$string(url)))) : _Utils_Tuple2(
							model,
							$author$project$Session$load(
								A2(
									$author$project$Session$setQuery,
									_Utils_ap($author$project$Update$proxy, url),
									model.session).url));
					}
				default:
					if (msg.b.$ === 'Ok') {
						var template = msg.b.a;
						return $author$project$Update$parsing(
							_Utils_update(
								model,
								{
									lia: A2(
										$author$project$Lia$Script$add_imports,
										model.lia,
										$author$project$Update$removeCR(template)),
									state: function () {
										var _v9 = model.state;
										if (_v9.$ === 'Parsing') {
											var b = _v9.a;
											var templates = _v9.b;
											return A2($author$project$Model$Parsing, b, templates - 1);
										} else {
											return model.state;
										}
									}()
								}));
					} else {
						var url = msg.a;
						var info = msg.b.a;
						return A2($elm$core$String$startsWith, $author$project$Update$proxy, url) ? _Utils_Tuple2(
							_Utils_update(
								model,
								{
									state: $author$project$Model$Error(
										$author$project$Update$parse_error(info))
								}),
							$elm$core$Platform$Cmd$none) : _Utils_Tuple2(
							model,
							A2(
								$author$project$Update$download,
								$author$project$Update$Load_Template_Result,
								_Utils_ap($author$project$Update$proxy, url)));
					}
			}
		}
	});
var $author$project$View$base_div = $elm$html$Html$div(
	_List_fromArray(
		[
			A2($elm$html$Html$Attributes$style, 'width', '100%'),
			A2($elm$html$Html$Attributes$style, 'text-align', 'center'),
			A2($elm$html$Html$Attributes$style, 'top', '25%'),
			A2($elm$html$Html$Attributes$style, 'position', 'absolute')
		]));
var $elm$html$Html$br = _VirtualDom_node('br');
var $elm$html$Html$h1 = _VirtualDom_node('h1');
var $elm$html$Html$h6 = _VirtualDom_node('h6');
var $elm$html$Html$progress = _VirtualDom_node('progress');
var $author$project$Index$Update$Delete = function (a) {
	return {$: 'Delete', a: a};
};
var $author$project$Index$Update$Reset = F2(
	function (a, b) {
		return {$: 'Reset', a: a, b: b};
	});
var $author$project$Index$Update$Restore = F2(
	function (a, b) {
		return {$: 'Restore', a: a, b: b};
	});
var $author$project$Index$Update$Share = F3(
	function (a, b, c) {
		return {$: 'Share', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$AlignX = function (a) {
	return {$: 'AlignX', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Right = {$: 'Right'};
var $mdgriffith$elm_ui$Element$alignRight = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$Right);
var $mdgriffith$elm_ui$Internal$Model$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$classes = {above: 'a', active: 'atv', alignBottom: 'ab', alignCenterX: 'cx', alignCenterY: 'cy', alignContainerBottom: 'acb', alignContainerCenterX: 'accx', alignContainerCenterY: 'accy', alignContainerRight: 'acr', alignLeft: 'al', alignRight: 'ar', alignTop: 'at', alignedHorizontally: 'ah', alignedVertically: 'av', any: 's', behind: 'bh', below: 'b', bold: 'w7', borderDashed: 'bd', borderDotted: 'bdt', borderNone: 'bn', borderSolid: 'bs', capturePointerEvents: 'cpe', clip: 'cp', clipX: 'cpx', clipY: 'cpy', column: 'c', container: 'ctr', contentBottom: 'cb', contentCenterX: 'ccx', contentCenterY: 'ccy', contentLeft: 'cl', contentRight: 'cr', contentTop: 'ct', cursorPointer: 'cptr', cursorText: 'ctxt', focus: 'fcs', focusedWithin: 'focus-within', fullSize: 'fs', grid: 'g', hasBehind: 'hbh', heightContent: 'hc', heightExact: 'he', heightFill: 'hf', heightFillPortion: 'hfp', hover: 'hv', imageContainer: 'ic', inFront: 'fr', inputLabel: 'lbl', inputMultiline: 'iml', inputMultilineFiller: 'imlf', inputMultilineParent: 'imlp', inputMultilineWrapper: 'implw', inputText: 'it', italic: 'i', link: 'lnk', nearby: 'nb', noTextSelection: 'notxt', onLeft: 'ol', onRight: 'or', opaque: 'oq', overflowHidden: 'oh', page: 'pg', paragraph: 'p', passPointerEvents: 'ppe', root: 'ui', row: 'r', scrollbars: 'sb', scrollbarsX: 'sbx', scrollbarsY: 'sby', seButton: 'sbt', single: 'e', sizeByCapital: 'cap', spaceEvenly: 'sev', strike: 'sk', text: 't', textCenter: 'tc', textExtraBold: 'w8', textExtraLight: 'w2', textHeavy: 'w9', textJustify: 'tj', textJustifyAll: 'tja', textLeft: 'tl', textLight: 'w3', textMedium: 'w5', textNormalWeight: 'w4', textRight: 'tr', textSemiBold: 'w6', textThin: 'w1', textUnitalicized: 'tun', transition: 'ts', transparent: 'clr', underline: 'u', widthContent: 'wc', widthExact: 'we', widthFill: 'wf', widthFillPortion: 'wfp', wrapped: 'wrp'};
var $mdgriffith$elm_ui$Internal$Flag$Flag = function (a) {
	return {$: 'Flag', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Second = function (a) {
	return {$: 'Second', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$flag = function (i) {
	return (i > 31) ? $mdgriffith$elm_ui$Internal$Flag$Second(1 << (i - 32)) : $mdgriffith$elm_ui$Internal$Flag$Flag(1 << i);
};
var $mdgriffith$elm_ui$Internal$Flag$fontWeight = $mdgriffith$elm_ui$Internal$Flag$flag(13);
var $mdgriffith$elm_ui$Element$Font$bold = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.bold);
var $mdgriffith$elm_ui$Internal$Model$Colored = F3(
	function (a, b, c) {
		return {$: 'Colored', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$StyleClass = F2(
	function (a, b) {
		return {$: 'StyleClass', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$bgColor = $mdgriffith$elm_ui$Internal$Flag$flag(8);
var $elm$core$Basics$round = _Basics_round;
var $mdgriffith$elm_ui$Internal$Model$floatClass = function (x) {
	return $elm$core$String$fromInt(
		$elm$core$Basics$round(x * 255));
};
var $mdgriffith$elm_ui$Internal$Model$formatColorClass = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return $mdgriffith$elm_ui$Internal$Model$floatClass(red) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(green) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(blue) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(alpha))))));
};
var $mdgriffith$elm_ui$Element$Background$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$bgColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'background-color',
			clr));
};
var $mdgriffith$elm_ui$Internal$Model$Unkeyed = function (a) {
	return {$: 'Unkeyed', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$AsEl = {$: 'AsEl'};
var $mdgriffith$elm_ui$Internal$Model$asEl = $mdgriffith$elm_ui$Internal$Model$AsEl;
var $mdgriffith$elm_ui$Internal$Model$Generic = {$: 'Generic'};
var $mdgriffith$elm_ui$Internal$Model$div = $mdgriffith$elm_ui$Internal$Model$Generic;
var $mdgriffith$elm_ui$Internal$Model$NoNearbyChildren = {$: 'NoNearbyChildren'};
var $mdgriffith$elm_ui$Internal$Model$columnClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.column);
var $mdgriffith$elm_ui$Internal$Model$gridClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.grid);
var $mdgriffith$elm_ui$Internal$Model$pageClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.page);
var $mdgriffith$elm_ui$Internal$Model$paragraphClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.paragraph);
var $mdgriffith$elm_ui$Internal$Model$rowClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.row);
var $mdgriffith$elm_ui$Internal$Model$singleClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.single);
var $mdgriffith$elm_ui$Internal$Model$contextClasses = function (context) {
	switch (context.$) {
		case 'AsRow':
			return $mdgriffith$elm_ui$Internal$Model$rowClass;
		case 'AsColumn':
			return $mdgriffith$elm_ui$Internal$Model$columnClass;
		case 'AsEl':
			return $mdgriffith$elm_ui$Internal$Model$singleClass;
		case 'AsGrid':
			return $mdgriffith$elm_ui$Internal$Model$gridClass;
		case 'AsParagraph':
			return $mdgriffith$elm_ui$Internal$Model$paragraphClass;
		default:
			return $mdgriffith$elm_ui$Internal$Model$pageClass;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Keyed = function (a) {
	return {$: 'Keyed', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$NoStyleSheet = {$: 'NoStyleSheet'};
var $mdgriffith$elm_ui$Internal$Model$Styled = function (a) {
	return {$: 'Styled', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Unstyled = function (a) {
	return {$: 'Unstyled', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addChildren = F2(
	function (existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(behind, existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(existing, inFront);
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					behind,
					_Utils_ap(existing, inFront));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$addKeyedChildren = F3(
	function (key, existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(
					existing,
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						inFront));
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					_Utils_ap(
						existing,
						A2(
							$elm$core$List$map,
							function (x) {
								return _Utils_Tuple2(key, x);
							},
							inFront)));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$AsParagraph = {$: 'AsParagraph'};
var $mdgriffith$elm_ui$Internal$Model$asParagraph = $mdgriffith$elm_ui$Internal$Model$AsParagraph;
var $mdgriffith$elm_ui$Internal$Flag$alignBottom = $mdgriffith$elm_ui$Internal$Flag$flag(41);
var $mdgriffith$elm_ui$Internal$Flag$alignRight = $mdgriffith$elm_ui$Internal$Flag$flag(40);
var $mdgriffith$elm_ui$Internal$Flag$centerX = $mdgriffith$elm_ui$Internal$Flag$flag(42);
var $mdgriffith$elm_ui$Internal$Flag$centerY = $mdgriffith$elm_ui$Internal$Flag$flag(43);
var $mdgriffith$elm_ui$Internal$Model$lengthClassName = function (x) {
	switch (x.$) {
		case 'Px':
			var px = x.a;
			return $elm$core$String$fromInt(px) + 'px';
		case 'Content':
			return 'auto';
		case 'Fill':
			var i = x.a;
			return $elm$core$String$fromInt(i) + 'fr';
		case 'Min':
			var min = x.a;
			var len = x.b;
			return 'min' + ($elm$core$String$fromInt(min) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
		default:
			var max = x.a;
			var len = x.b;
			return 'max' + ($elm$core$String$fromInt(max) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformClass = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return $elm$core$Maybe$Nothing;
		case 'Moved':
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'mv-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(x) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(y) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(z))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			return $elm$core$Maybe$Just(
				'tfrm-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ty) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ox) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oz) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(angle))))))))))))))))))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$getStyleName = function (style) {
	switch (style.$) {
		case 'Shadows':
			var name = style.a;
			return name;
		case 'Transparency':
			var name = style.a;
			var o = style.b;
			return name;
		case 'Style':
			var _class = style.a;
			return _class;
		case 'FontFamily':
			var name = style.a;
			return name;
		case 'FontSize':
			var i = style.a;
			return 'font-size-' + $elm$core$String$fromInt(i);
		case 'Single':
			var _class = style.a;
			return _class;
		case 'Colored':
			var _class = style.a;
			return _class;
		case 'SpacingStyle':
			var cls = style.a;
			var x = style.b;
			var y = style.c;
			return cls;
		case 'PaddingStyle':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'BorderWidth':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'GridTemplateStyle':
			var template = style.a;
			return 'grid-rows-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
		case 'GridPosition':
			var pos = style.a;
			return 'gp grid-pos-' + ($elm$core$String$fromInt(pos.row) + ('-' + ($elm$core$String$fromInt(pos.col) + ('-' + ($elm$core$String$fromInt(pos.width) + ('-' + $elm$core$String$fromInt(pos.height)))))));
		case 'PseudoSelector':
			var selector = style.a;
			var subStyle = style.b;
			var name = function () {
				switch (selector.$) {
					case 'Focus':
						return 'fs';
					case 'Hover':
						return 'hv';
					default:
						return 'act';
				}
			}();
			return A2(
				$elm$core$String$join,
				' ',
				A2(
					$elm$core$List$map,
					function (sty) {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$getStyleName(sty);
						if (_v1 === '') {
							return '';
						} else {
							var styleName = _v1;
							return styleName + ('-' + name);
						}
					},
					subStyle));
		default:
			var x = style.a;
			return A2(
				$elm$core$Maybe$withDefault,
				'',
				$mdgriffith$elm_ui$Internal$Model$transformClass(x));
	}
};
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (_v0.$ === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return A2($elm$core$Dict$member, key, dict);
	});
var $mdgriffith$elm_ui$Internal$Model$reduceStyles = F2(
	function (style, nevermind) {
		var cache = nevermind.a;
		var existing = nevermind.b;
		var styleName = $mdgriffith$elm_ui$Internal$Model$getStyleName(style);
		return A2($elm$core$Set$member, styleName, cache) ? nevermind : _Utils_Tuple2(
			A2($elm$core$Set$insert, styleName, cache),
			A2($elm$core$List$cons, style, existing));
	});
var $mdgriffith$elm_ui$Internal$Model$Property = F2(
	function (a, b) {
		return {$: 'Property', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Style = F2(
	function (a, b) {
		return {$: 'Style', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$dot = function (c) {
	return '.' + c;
};
var $mdgriffith$elm_ui$Internal$Model$formatColor = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return 'rgba(' + ($elm$core$String$fromInt(
		$elm$core$Basics$round(red * 255)) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(green * 255))) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(blue * 255))) + (',' + ($elm$core$String$fromFloat(alpha) + ')')))));
};
var $mdgriffith$elm_ui$Internal$Model$formatBoxShadow = function (shadow) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					shadow.inset ? $elm$core$Maybe$Just('inset') : $elm$core$Maybe$Nothing,
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.offset.a) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.offset.b) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.blur) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.size) + 'px'),
					$elm$core$Maybe$Just(
					$mdgriffith$elm_ui$Internal$Model$formatColor(shadow.color))
				])));
};
var $mdgriffith$elm_ui$Internal$Model$renderFocusStyle = function (focus) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin) + ':focus-within',
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.borderColor),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.backgroundColor),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										blur: shadow.blur,
										color: shadow.color,
										inset: false,
										offset: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
										size: shadow.size
									}));
						},
						focus.shadow),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					]))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (':focus .focusable, ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + '.focusable:focus')),
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.borderColor),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.backgroundColor),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										blur: shadow.blur,
										color: shadow.color,
										inset: false,
										offset: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
										size: shadow.size
									}));
						},
						focus.shadow),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					])))
		]);
};
var $elm$virtual_dom$VirtualDom$property = F2(
	function (key, value) {
		return A2(
			_VirtualDom_property,
			_VirtualDom_noInnerHtmlOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $mdgriffith$elm_ui$Internal$Style$AllChildren = F2(
	function (a, b) {
		return {$: 'AllChildren', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Batch = function (a) {
	return {$: 'Batch', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Child = F2(
	function (a, b) {
		return {$: 'Child', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Descriptor = F2(
	function (a, b) {
		return {$: 'Descriptor', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Left = {$: 'Left'};
var $mdgriffith$elm_ui$Internal$Style$Prop = F2(
	function (a, b) {
		return {$: 'Prop', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Right = {$: 'Right'};
var $mdgriffith$elm_ui$Internal$Style$Self = function (a) {
	return {$: 'Self', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Supports = F2(
	function (a, b) {
		return {$: 'Supports', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Content = function (a) {
	return {$: 'Content', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Bottom = {$: 'Bottom'};
var $mdgriffith$elm_ui$Internal$Style$CenterX = {$: 'CenterX'};
var $mdgriffith$elm_ui$Internal$Style$CenterY = {$: 'CenterY'};
var $mdgriffith$elm_ui$Internal$Style$Top = {$: 'Top'};
var $mdgriffith$elm_ui$Internal$Style$alignments = _List_fromArray(
	[$mdgriffith$elm_ui$Internal$Style$Top, $mdgriffith$elm_ui$Internal$Style$Bottom, $mdgriffith$elm_ui$Internal$Style$Right, $mdgriffith$elm_ui$Internal$Style$Left, $mdgriffith$elm_ui$Internal$Style$CenterX, $mdgriffith$elm_ui$Internal$Style$CenterY]);
var $mdgriffith$elm_ui$Internal$Style$contentName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _v1 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentTop);
		case 'Bottom':
			var _v2 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentBottom);
		case 'Right':
			var _v3 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentRight);
		case 'Left':
			var _v4 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentLeft);
		case 'CenterX':
			var _v5 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX);
		default:
			var _v6 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Style$selfName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _v1 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			var _v2 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		case 'Right':
			var _v3 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		case 'Left':
			var _v4 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'CenterX':
			var _v5 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
		default:
			var _v6 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Style$describeAlignment = function (values) {
	var createDescription = function (alignment) {
		var _v0 = values(alignment);
		var content = _v0.a;
		var indiv = _v0.b;
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$contentName(
					$mdgriffith$elm_ui$Internal$Style$Content(alignment)),
				content),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(
							$mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						indiv)
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$elDescription = _List_fromArray(
	[
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.seButton),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'auto !important')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightContent),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
			])),
		$mdgriffith$elm_ui$Internal$Style$describeAlignment(
		function (alignment) {
			switch (alignment.$) {
				case 'Top':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
							]));
				case 'Bottom':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
							]));
				case 'Right':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
							]));
				case 'Left':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							]));
				case 'CenterX':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
							]));
				default:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
									]))
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
							]));
			}
		})
	]);
var $mdgriffith$elm_ui$Internal$Style$gridAlignments = function (values) {
	var createDescription = function (alignment) {
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(
							$mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						values(alignment))
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$Above = {$: 'Above'};
var $mdgriffith$elm_ui$Internal$Style$Behind = {$: 'Behind'};
var $mdgriffith$elm_ui$Internal$Style$Below = {$: 'Below'};
var $mdgriffith$elm_ui$Internal$Style$OnLeft = {$: 'OnLeft'};
var $mdgriffith$elm_ui$Internal$Style$OnRight = {$: 'OnRight'};
var $mdgriffith$elm_ui$Internal$Style$Within = {$: 'Within'};
var $mdgriffith$elm_ui$Internal$Style$locations = function () {
	var loc = $mdgriffith$elm_ui$Internal$Style$Above;
	var _v0 = function () {
		switch (loc.$) {
			case 'Above':
				return _Utils_Tuple0;
			case 'Below':
				return _Utils_Tuple0;
			case 'OnRight':
				return _Utils_Tuple0;
			case 'OnLeft':
				return _Utils_Tuple0;
			case 'Within':
				return _Utils_Tuple0;
			default:
				return _Utils_Tuple0;
		}
	}();
	return _List_fromArray(
		[$mdgriffith$elm_ui$Internal$Style$Above, $mdgriffith$elm_ui$Internal$Style$Below, $mdgriffith$elm_ui$Internal$Style$OnRight, $mdgriffith$elm_ui$Internal$Style$OnLeft, $mdgriffith$elm_ui$Internal$Style$Within, $mdgriffith$elm_ui$Internal$Style$Behind]);
}();
var $mdgriffith$elm_ui$Internal$Style$baseSheet = _List_fromArray(
	[
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		'html,body',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		_Utils_ap(
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
			_Utils_ap(
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.imageContainer))),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-height', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ':focus',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'outline', 'none')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.root),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				$mdgriffith$elm_ui$Internal$Style$Batch(
				function (fn) {
					return A2($elm$core$List$map, fn, $mdgriffith$elm_ui$Internal$Style$locations);
				}(
					function (loc) {
						switch (loc.$) {
							case 'Above':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
												])),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Below':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												]))
										]));
							case 'OnRight':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'OnLeft':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'right', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Within':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							default:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
						}
					}))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'resize', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'box-sizing', 'border-box'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-size', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-family', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'inherit'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.wrapped),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-wrap', 'wrap')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.noTextSelection),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-moz-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-webkit-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-ms-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'user-select', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorPointer),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'pointer')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorText),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.passPointerEvents),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.capturePointerEvents),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transparent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.opaque),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transition),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Prop,
						'transition',
						A2(
							$elm$core$String$join,
							', ',
							A2(
								$elm$core$List$map,
								function (x) {
									return x + ' 160ms';
								},
								_List_fromArray(
									['transform', 'opacity', 'filter', 'background-color', 'color', 'font-size']))))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbars),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clip),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', 'auto')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderNone),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDashed),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dashed')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDotted),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dotted')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderSolid),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputText),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1.05'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background', 'transparent'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'inherit')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0%'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.link),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-left', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-right', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_Nil);
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_Nil);
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'baseline')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', '-ms-grid'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'.gp',
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Supports,
						_Utils_Tuple2('display', 'grid'),
						_List_fromArray(
							[
								_Utils_Tuple2('display', 'grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$gridAlignments(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
										]);
								case 'Bottom':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
										]);
								case 'Right':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
										]);
								case 'Left':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
										]);
								case 'CenterX':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
										]);
								default:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
										]);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.page),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any + ':first-child'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName(
								$mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Left)) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName(
								$mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Right)) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultiline),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background-color', 'transparent')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineWrapper),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineParent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineFiller),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'transparent')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.paragraph),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-wrap', 'break-word'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.paragraph),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::after',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::before',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-flex')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left')
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.hidden',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textThin),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '100')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraLight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '200')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '300')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textNormalWeight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '400')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textMedium),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '500')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textSemiBold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '600')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '700')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraBold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '800')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textHeavy),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '900')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.italic),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'italic')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textUnitalicized),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'normal')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustify),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustifyAll),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify-all')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textCenter),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'center')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textRight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'right')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLeft),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'left')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.modal',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none')
					]))
			]))
	]);
var $mdgriffith$elm_ui$Internal$Style$fontVariant = function (_var) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + _var,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\"'))
				])),
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + (_var + '-off'),
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\" 0'))
				]))
		]);
};
var $mdgriffith$elm_ui$Internal$Style$commonValues = $elm$core$List$concat(
	_List_fromArray(
		[
			A2(
			$elm$core$List$map,
			function (x) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.border-' + $elm$core$String$fromInt(x),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'border-width',
							$elm$core$String$fromInt(x) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 6)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 8, 32)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.p-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'padding',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 24)),
			_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'small-caps')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp-off',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'normal')
					]))
			]),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('zero'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('onum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('liga'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('dlig'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('ordn'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('tnum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('afrc'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('frac')
		]));
var $mdgriffith$elm_ui$Internal$Style$explainer = '\n.explain {\n    border: 6px solid rgb(174, 121, 15) !important;\n}\n.explain > .' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n.ctr {\n    border: none !important;\n}\n.explain > .ctr > .' + ($mdgriffith$elm_ui$Internal$Style$classes.any + ' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n')));
var $mdgriffith$elm_ui$Internal$Style$inputTextReset = '\ninput[type="search"],\ninput[type="search"]::-webkit-search-decoration,\ninput[type="search"]::-webkit-search-cancel-button,\ninput[type="search"]::-webkit-search-results-button,\ninput[type="search"]::-webkit-search-results-decoration {\n  -webkit-appearance:none;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$sliderReset = '\ninput[type=range] {\n  -webkit-appearance: none; \n  background: transparent;\n  position:absolute;\n  left:0;\n  top:0;\n  z-index:10;\n  width: 100%;\n  outline: dashed 1px;\n  height: 100%;\n  opacity: 0;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$thumbReset = '\ninput[type=range]::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-moz-range-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-ms-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range][orient=vertical]{\n    writing-mode: bt-lr; /* IE */\n    -webkit-appearance: slider-vertical;  /* WebKit */\n}\n';
var $mdgriffith$elm_ui$Internal$Style$trackReset = '\ninput[type=range]::-moz-range-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-ms-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-webkit-slider-runnable-track {\n    background: transparent;\n    cursor: pointer;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$overrides = '@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (' { flex-basis: auto !important; } ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container) + (' { flex-basis: auto !important; }}' + ($mdgriffith$elm_ui$Internal$Style$inputTextReset + ($mdgriffith$elm_ui$Internal$Style$sliderReset + ($mdgriffith$elm_ui$Internal$Style$trackReset + ($mdgriffith$elm_ui$Internal$Style$thumbReset + $mdgriffith$elm_ui$Internal$Style$explainer)))))))))))))));
var $mdgriffith$elm_ui$Internal$Style$Intermediate = function (a) {
	return {$: 'Intermediate', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$emptyIntermediate = F2(
	function (selector, closing) {
		return $mdgriffith$elm_ui$Internal$Style$Intermediate(
			{closing: closing, others: _List_Nil, props: _List_Nil, selector: selector});
	});
var $mdgriffith$elm_ui$Internal$Style$renderRules = F2(
	function (_v0, rulesToRender) {
		var parent = _v0.a;
		var generateIntermediates = F2(
			function (rule, rendered) {
				switch (rule.$) {
					case 'Prop':
						var name = rule.a;
						var val = rule.b;
						return _Utils_update(
							rendered,
							{
								props: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(name, val),
									rendered.props)
							});
					case 'Supports':
						var _v2 = rule.a;
						var prop = _v2.a;
						var value = _v2.b;
						var props = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Style$Intermediate(
										{closing: '\n}', others: _List_Nil, props: props, selector: '@supports (' + (prop + (':' + (value + (') {' + parent.selector))))}),
									rendered.others)
							});
					case 'Adjacent':
						var selector = rule.a;
						var adjRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' + ' + selector), ''),
										adjRules),
									rendered.others)
							});
					case 'Child':
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' > ' + child), ''),
										childRules),
									rendered.others)
							});
					case 'AllChildren':
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' ' + child), ''),
										childRules),
									rendered.others)
							});
					case 'Descriptor':
						var descriptor = rule.a;
						var descriptorRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2(
											$mdgriffith$elm_ui$Internal$Style$emptyIntermediate,
											_Utils_ap(parent.selector, descriptor),
											''),
										descriptorRules),
									rendered.others)
							});
					default:
						var batched = rule.a;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector, ''),
										batched),
									rendered.others)
							});
				}
			});
		return $mdgriffith$elm_ui$Internal$Style$Intermediate(
			A3($elm$core$List$foldr, generateIntermediates, parent, rulesToRender));
	});
var $mdgriffith$elm_ui$Internal$Style$renderCompact = function (styleClasses) {
	var renderValues = function (values) {
		return $elm$core$String$concat(
			A2(
				$elm$core$List$map,
				function (_v3) {
					var x = _v3.a;
					var y = _v3.b;
					return x + (':' + (y + ';'));
				},
				values));
	};
	var renderClass = function (rule) {
		var _v2 = rule.props;
		if (!_v2.b) {
			return '';
		} else {
			return rule.selector + ('{' + (renderValues(rule.props) + (rule.closing + '}')));
		}
	};
	var renderIntermediate = function (_v0) {
		var rule = _v0.a;
		return _Utils_ap(
			renderClass(rule),
			$elm$core$String$concat(
				A2($elm$core$List$map, renderIntermediate, rule.others)));
	};
	return $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			renderIntermediate,
			A3(
				$elm$core$List$foldr,
				F2(
					function (_v1, existing) {
						var name = _v1.a;
						var styleRules = _v1.b;
						return A2(
							$elm$core$List$cons,
							A2(
								$mdgriffith$elm_ui$Internal$Style$renderRules,
								A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, name, ''),
								styleRules),
							existing);
					}),
				_List_Nil,
				styleClasses)));
};
var $mdgriffith$elm_ui$Internal$Style$rules = _Utils_ap(
	$mdgriffith$elm_ui$Internal$Style$overrides,
	$mdgriffith$elm_ui$Internal$Style$renderCompact(
		_Utils_ap($mdgriffith$elm_ui$Internal$Style$baseSheet, $mdgriffith$elm_ui$Internal$Style$commonValues)));
var $mdgriffith$elm_ui$Internal$Model$staticRoot = function (opts) {
	var _v0 = opts.mode;
	switch (_v0.$) {
		case 'Layout':
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'div',
				_List_Nil,
				_List_fromArray(
					[
						A3(
						$elm$virtual_dom$VirtualDom$node,
						'style',
						_List_Nil,
						_List_fromArray(
							[
								$elm$virtual_dom$VirtualDom$text($mdgriffith$elm_ui$Internal$Style$rules)
							]))
					]));
		case 'NoStaticStyleSheet':
			return $elm$virtual_dom$VirtualDom$text('');
		default:
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'elm-ui-static-rules',
				_List_fromArray(
					[
						A2(
						$elm$virtual_dom$VirtualDom$property,
						'rules',
						$elm$json$Json$Encode$string($mdgriffith$elm_ui$Internal$Style$rules))
					]),
				_List_Nil);
	}
};
var $mdgriffith$elm_ui$Internal$Model$fontName = function (font) {
	switch (font.$) {
		case 'Serif':
			return 'serif';
		case 'SansSerif':
			return 'sans-serif';
		case 'Monospace':
			return 'monospace';
		case 'Typeface':
			var name = font.a;
			return '\"' + (name + '\"');
		case 'ImportFont':
			var name = font.a;
			var url = font.b;
			return '\"' + (name + '\"');
		default:
			var name = font.a.name;
			return '\"' + (name + '\"');
	}
};
var $mdgriffith$elm_ui$Internal$Model$isSmallCaps = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return name === 'smcp';
		case 'VariantOff':
			var name = _var.a;
			return false;
		default:
			var name = _var.a;
			var index = _var.b;
			return (name === 'smcp') && (index === 1);
	}
};
var $mdgriffith$elm_ui$Internal$Model$hasSmallCaps = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$isSmallCaps, font.variants);
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderProps = F3(
	function (force, _v0, existing) {
		var key = _v0.a;
		var val = _v0.b;
		return force ? (existing + ('\n  ' + (key + (': ' + (val + ' !important;'))))) : (existing + ('\n  ' + (key + (': ' + (val + ';')))));
	});
var $mdgriffith$elm_ui$Internal$Model$renderStyle = F4(
	function (options, maybePseudo, selector, props) {
		if (maybePseudo.$ === 'Nothing') {
			return _List_fromArray(
				[
					selector + ('{' + (A3(
					$elm$core$List$foldl,
					$mdgriffith$elm_ui$Internal$Model$renderProps(false),
					'',
					props) + '\n}'))
				]);
		} else {
			var pseudo = maybePseudo.a;
			switch (pseudo.$) {
				case 'Hover':
					var _v2 = options.hover;
					switch (_v2.$) {
						case 'NoHover':
							return _List_Nil;
						case 'ForceHover':
							return _List_fromArray(
								[
									selector + ('-hv {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(true),
									'',
									props) + '\n}'))
								]);
						default:
							return _List_fromArray(
								[
									selector + ('-hv:hover {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(false),
									'',
									props) + '\n}'))
								]);
					}
				case 'Focus':
					var renderedProps = A3(
						$elm$core$List$foldl,
						$mdgriffith$elm_ui$Internal$Model$renderProps(false),
						'',
						props);
					return _List_fromArray(
						[selector + ('-fs:focus {' + (renderedProps + '\n}')), ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (':focus ' + (selector + '-fs  {')))) + (renderedProps + '\n}'), (selector + '-fs:focus-within {') + (renderedProps + '\n}'), ('.focusable-parent:focus ~ ' + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + (selector + '-fs {'))))) + (renderedProps + '\n}')]);
				default:
					return _List_fromArray(
						[
							selector + ('-act:active {' + (A3(
							$elm$core$List$foldl,
							$mdgriffith$elm_ui$Internal$Model$renderProps(false),
							'',
							props) + '\n}'))
						]);
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderVariant = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return '\"' + (name + '\"');
		case 'VariantOff':
			var name = _var.a;
			return '\"' + (name + '\" 0');
		default:
			var name = _var.a;
			var index = _var.b;
			return '\"' + (name + ('\" ' + $elm$core$String$fromInt(index)));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderVariants = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return $elm$core$Maybe$Just(
			A2(
				$elm$core$String$join,
				', ',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$renderVariant, font.variants)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformValue = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return $elm$core$Maybe$Nothing;
		case 'Moved':
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'translate3d(' + ($elm$core$String$fromFloat(x) + ('px, ' + ($elm$core$String$fromFloat(y) + ('px, ' + ($elm$core$String$fromFloat(z) + 'px)'))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			var translate = 'translate3d(' + ($elm$core$String$fromFloat(tx) + ('px, ' + ($elm$core$String$fromFloat(ty) + ('px, ' + ($elm$core$String$fromFloat(tz) + 'px)')))));
			var scale = 'scale3d(' + ($elm$core$String$fromFloat(sx) + (', ' + ($elm$core$String$fromFloat(sy) + (', ' + ($elm$core$String$fromFloat(sz) + ')')))));
			var rotate = 'rotate3d(' + ($elm$core$String$fromFloat(ox) + (', ' + ($elm$core$String$fromFloat(oy) + (', ' + ($elm$core$String$fromFloat(oz) + (', ' + ($elm$core$String$fromFloat(angle) + 'rad)')))))));
			return $elm$core$Maybe$Just(translate + (' ' + (scale + (' ' + rotate))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderStyleRule = F3(
	function (options, rule, maybePseudo) {
		switch (rule.$) {
			case 'Style':
				var selector = rule.a;
				var props = rule.b;
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, selector, props);
			case 'Shadows':
				var name = rule.a;
				var prop = rule.b;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, 'box-shadow', prop)
						]));
			case 'Transparency':
				var name = rule.a;
				var transparency = rule.b;
				var opacity = A2(
					$elm$core$Basics$max,
					0,
					A2($elm$core$Basics$min, 1, 1 - transparency));
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'opacity',
							$elm$core$String$fromFloat(opacity))
						]));
			case 'FontSize':
				var i = rule.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			case 'FontFamily':
				var name = rule.a;
				var typefaces = rule.b;
				var features = A2(
					$elm$core$String$join,
					', ',
					A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Internal$Model$renderVariants, typefaces));
				var families = _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-family',
						A2(
							$elm$core$String$join,
							', ',
							A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$fontName, typefaces))),
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'font-feature-settings', features),
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-variant',
						A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$hasSmallCaps, typefaces) ? 'small-caps' : 'normal')
					]);
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, '.' + name, families);
			case 'Single':
				var _class = rule.a;
				var prop = rule.b;
				var val = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, prop, val)
						]));
			case 'Colored':
				var _class = rule.a;
				var prop = rule.b;
				var color = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							prop,
							$mdgriffith$elm_ui$Internal$Model$formatColor(color))
						]));
			case 'SpacingStyle':
				var cls = rule.a;
				var x = rule.b;
				var y = rule.c;
				var yPx = $elm$core$String$fromInt(y) + 'px';
				var xPx = $elm$core$String$fromInt(x) + 'px';
				var single = '.' + $mdgriffith$elm_ui$Internal$Style$classes.single;
				var row = '.' + $mdgriffith$elm_ui$Internal$Style$classes.row;
				var wrappedRow = '.' + ($mdgriffith$elm_ui$Internal$Style$classes.wrapped + row);
				var right = '.' + $mdgriffith$elm_ui$Internal$Style$classes.alignRight;
				var paragraph = '.' + $mdgriffith$elm_ui$Internal$Style$classes.paragraph;
				var page = '.' + $mdgriffith$elm_ui$Internal$Style$classes.page;
				var left = '.' + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft;
				var halfY = $elm$core$String$fromFloat(y / 2) + 'px';
				var halfX = $elm$core$String$fromFloat(x / 2) + 'px';
				var column = '.' + $mdgriffith$elm_ui$Internal$Style$classes.column;
				var _class = '.' + cls;
				var any = '.' + $mdgriffith$elm_ui$Internal$Style$classes.any;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (row + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (wrappedRow + (' > ' + any)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin', halfY + (' ' + halfX))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (column + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_Utils_ap(_class, paragraph),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							'textarea' + (any + _class),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)')),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'height',
									'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::after'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-top',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::before'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-bottom',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								]))
						]));
			case 'PaddingStyle':
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'padding',
							$elm$core$String$fromFloat(top) + ('px ' + ($elm$core$String$fromFloat(right) + ('px ' + ($elm$core$String$fromFloat(bottom) + ('px ' + ($elm$core$String$fromFloat(left) + 'px')))))))
						]));
			case 'BorderWidth':
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'border-width',
							$elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px')))))))
						]));
			case 'GridTemplateStyle':
				var template = rule.a;
				var toGridLengthHelper = F3(
					function (minimum, maximum, x) {
						toGridLengthHelper:
						while (true) {
							switch (x.$) {
								case 'Px':
									var px = x.a;
									return $elm$core$String$fromInt(px) + 'px';
								case 'Content':
									var _v2 = _Utils_Tuple2(minimum, maximum);
									if (_v2.a.$ === 'Nothing') {
										if (_v2.b.$ === 'Nothing') {
											var _v3 = _v2.a;
											var _v4 = _v2.b;
											return 'max-content';
										} else {
											var _v6 = _v2.a;
											var maxSize = _v2.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v2.b.$ === 'Nothing') {
											var minSize = _v2.a.a;
											var _v5 = _v2.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + 'max-content)'));
										} else {
											var minSize = _v2.a.a;
											var maxSize = _v2.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 'Fill':
									var i = x.a;
									var _v7 = _Utils_Tuple2(minimum, maximum);
									if (_v7.a.$ === 'Nothing') {
										if (_v7.b.$ === 'Nothing') {
											var _v8 = _v7.a;
											var _v9 = _v7.b;
											return $elm$core$String$fromInt(i) + 'fr';
										} else {
											var _v11 = _v7.a;
											var maxSize = _v7.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v7.b.$ === 'Nothing') {
											var minSize = _v7.a.a;
											var _v10 = _v7.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(i) + ('fr' + 'fr)'))));
										} else {
											var minSize = _v7.a.a;
											var maxSize = _v7.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 'Min':
									var m = x.a;
									var len = x.b;
									var $temp$minimum = $elm$core$Maybe$Just(m),
										$temp$maximum = maximum,
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
								default:
									var m = x.a;
									var len = x.b;
									var $temp$minimum = minimum,
										$temp$maximum = $elm$core$Maybe$Just(m),
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
							}
						}
					});
				var toGridLength = function (x) {
					return A3(toGridLengthHelper, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, x);
				};
				var xSpacing = toGridLength(template.spacing.a);
				var ySpacing = toGridLength(template.spacing.b);
				var rows = function (x) {
					return 'grid-template-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.rows)));
				var msRows = function (x) {
					return '-ms-grid-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.columns)));
				var msColumns = function (x) {
					return '-ms-grid-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.columns)));
				var gapY = 'grid-row-gap:' + (toGridLength(template.spacing.b) + ';');
				var gapX = 'grid-column-gap:' + (toGridLength(template.spacing.a) + ';');
				var columns = function (x) {
					return 'grid-template-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.columns)));
				var _class = '.grid-rows-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
				var modernGrid = _class + ('{' + (columns + (rows + (gapX + (gapY + '}')))));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msColumns + (msRows + '}')));
				return _List_fromArray(
					[base, supports]);
			case 'GridPosition':
				var position = rule.a;
				var msPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'-ms-grid-row: ' + ($elm$core$String$fromInt(position.row) + ';'),
							'-ms-grid-row-span: ' + ($elm$core$String$fromInt(position.height) + ';'),
							'-ms-grid-column: ' + ($elm$core$String$fromInt(position.col) + ';'),
							'-ms-grid-column-span: ' + ($elm$core$String$fromInt(position.width) + ';')
						]));
				var modernPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'grid-row: ' + ($elm$core$String$fromInt(position.row) + (' / ' + ($elm$core$String$fromInt(position.row + position.height) + ';'))),
							'grid-column: ' + ($elm$core$String$fromInt(position.col) + (' / ' + ($elm$core$String$fromInt(position.col + position.width) + ';')))
						]));
				var _class = '.grid-pos-' + ($elm$core$String$fromInt(position.row) + ('-' + ($elm$core$String$fromInt(position.col) + ('-' + ($elm$core$String$fromInt(position.width) + ('-' + $elm$core$String$fromInt(position.height)))))));
				var modernGrid = _class + ('{' + (modernPosition + '}'));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msPosition + '}'));
				return _List_fromArray(
					[base, supports]);
			case 'PseudoSelector':
				var _class = rule.a;
				var styles = rule.b;
				var renderPseudoRule = function (style) {
					return A3(
						$mdgriffith$elm_ui$Internal$Model$renderStyleRule,
						options,
						style,
						$elm$core$Maybe$Just(_class));
				};
				return A2($elm$core$List$concatMap, renderPseudoRule, styles);
			default:
				var transform = rule.a;
				var val = $mdgriffith$elm_ui$Internal$Model$transformValue(transform);
				var _class = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				var _v12 = _Utils_Tuple2(_class, val);
				if ((_v12.a.$ === 'Just') && (_v12.b.$ === 'Just')) {
					var cls = _v12.a.a;
					var v = _v12.b.a;
					return A4(
						$mdgriffith$elm_ui$Internal$Model$renderStyle,
						options,
						maybePseudo,
						'.' + cls,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Model$Property, 'transform', v)
							]));
				} else {
					return _List_Nil;
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$encodeStyles = F2(
	function (options, stylesheet) {
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$map,
				function (style) {
					var styled = A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing);
					return _Utils_Tuple2(
						$mdgriffith$elm_ui$Internal$Model$getStyleName(style),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, styled));
				},
				stylesheet));
	});
var $mdgriffith$elm_ui$Internal$Model$bracket = F2(
	function (selector, rules) {
		var renderPair = function (_v0) {
			var name = _v0.a;
			var val = _v0.b;
			return name + (': ' + (val + ';'));
		};
		return selector + (' {' + (A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$map, renderPair, rules)) + '}'));
	});
var $mdgriffith$elm_ui$Internal$Model$fontRule = F3(
	function (name, modifier, _v0) {
		var parentAdj = _v0.a;
		var textAdjustment = _v0.b;
		return _List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + (', ' + ('.' + (name + (' .' + modifier))))))), parentAdj),
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + (modifier + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))), textAdjustment)
			]);
	});
var $mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule = F3(
	function (fontToAdjust, _v0, otherFontName) {
		var full = _v0.a;
		var capital = _v0.b;
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_Utils_ap(
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital, capital),
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.fullSize, full)));
	});
var $mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule = F2(
	function (fontToAdjust, otherFontName) {
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (', ' + ('.' + (name + (' .' + $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('line-height', '1')
						])),
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('vertical-align', '0'),
							_Utils_Tuple2('line-height', '1')
						]))
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$adjust = F3(
	function (size, height, vertical) {
		return {height: height / size, size: size, vertical: vertical};
	});
var $mdgriffith$elm_ui$Internal$Model$convertAdjustment = function (adjustment) {
	var lines = _List_fromArray(
		[adjustment.capital, adjustment.baseline, adjustment.descender, adjustment.lowercase]);
	var lineHeight = 1.5;
	var normalDescender = (lineHeight - 1) / 2;
	var oldMiddle = lineHeight / 2;
	var descender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.descender,
		$elm$core$List$minimum(lines));
	var newBaseline = A2(
		$elm$core$Maybe$withDefault,
		adjustment.baseline,
		$elm$core$List$minimum(
			A2(
				$elm$core$List$filter,
				function (x) {
					return !_Utils_eq(x, descender);
				},
				lines)));
	var base = lineHeight;
	var ascender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.capital,
		$elm$core$List$maximum(lines));
	var capitalSize = 1 / (ascender - newBaseline);
	var capitalVertical = 1 - ascender;
	var fullSize = 1 / (ascender - descender);
	var fullVertical = 1 - ascender;
	var newCapitalMiddle = ((ascender - newBaseline) / 2) + newBaseline;
	var newFullMiddle = ((ascender - descender) / 2) + descender;
	return {
		capital: A3($mdgriffith$elm_ui$Internal$Model$adjust, capitalSize, ascender - newBaseline, capitalVertical),
		full: A3($mdgriffith$elm_ui$Internal$Model$adjust, fullSize, ascender - descender, fullVertical)
	};
};
var $mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules = function (converted) {
	return _Utils_Tuple2(
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'block')
			]),
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'inline-block'),
				_Utils_Tuple2(
				'line-height',
				$elm$core$String$fromFloat(converted.height)),
				_Utils_Tuple2(
				'vertical-align',
				$elm$core$String$fromFloat(converted.vertical) + 'em'),
				_Utils_Tuple2(
				'font-size',
				$elm$core$String$fromFloat(converted.size) + 'em')
			]));
};
var $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment = function (typefaces) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (face, found) {
				if (found.$ === 'Nothing') {
					if (face.$ === 'FontWith') {
						var _with = face.a;
						var _v2 = _with.adjustment;
						if (_v2.$ === 'Nothing') {
							return found;
						} else {
							var adjustment = _v2.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.full;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment))),
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.capital;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment)))));
						}
					} else {
						return found;
					}
				} else {
					return found;
				}
			}),
		$elm$core$Maybe$Nothing,
		typefaces);
};
var $mdgriffith$elm_ui$Internal$Model$renderTopLevelValues = function (rules) {
	var withImport = function (font) {
		if (font.$ === 'ImportFont') {
			var url = font.b;
			return $elm$core$Maybe$Just('@import url(\'' + (url + '\');'));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var fontImports = function (_v2) {
		var name = _v2.a;
		var typefaces = _v2.b;
		var imports = A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$filterMap, withImport, typefaces));
		return imports;
	};
	var allNames = A2($elm$core$List$map, $elm$core$Tuple$first, rules);
	var fontAdjustments = function (_v1) {
		var name = _v1.a;
		var typefaces = _v1.b;
		var _v0 = $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment(typefaces);
		if (_v0.$ === 'Nothing') {
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					$mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule(name),
					allNames));
		} else {
			var adjustment = _v0.a;
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					A2($mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule, name, adjustment),
					allNames));
		}
	};
	return _Utils_ap(
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontImports, rules)),
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontAdjustments, rules)));
};
var $mdgriffith$elm_ui$Internal$Model$topLevelValue = function (rule) {
	if (rule.$ === 'FontFamily') {
		var name = rule.a;
		var typefaces = rule.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(name, typefaces));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$toStyleSheetString = F2(
	function (options, stylesheet) {
		var combine = F2(
			function (style, rendered) {
				return {
					rules: _Utils_ap(
						rendered.rules,
						A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing)),
					topLevel: function () {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$topLevelValue(style);
						if (_v1.$ === 'Nothing') {
							return rendered.topLevel;
						} else {
							var topLevel = _v1.a;
							return A2($elm$core$List$cons, topLevel, rendered.topLevel);
						}
					}()
				};
			});
		var _v0 = A3(
			$elm$core$List$foldl,
			combine,
			{rules: _List_Nil, topLevel: _List_Nil},
			stylesheet);
		var topLevel = _v0.topLevel;
		var rules = _v0.rules;
		return _Utils_ap(
			$mdgriffith$elm_ui$Internal$Model$renderTopLevelValues(topLevel),
			$elm$core$String$concat(rules));
	});
var $mdgriffith$elm_ui$Internal$Model$toStyleSheet = F2(
	function (options, styleSheet) {
		var _v0 = options.mode;
		switch (_v0.$) {
			case 'Layout':
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			case 'NoStaticStyleSheet':
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			default:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'elm-ui-rules',
					_List_fromArray(
						[
							A2(
							$elm$virtual_dom$VirtualDom$property,
							'rules',
							A2($mdgriffith$elm_ui$Internal$Model$encodeStyles, options, styleSheet))
						]),
					_List_Nil);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$embedKeyed = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			_Utils_Tuple2(
				'static-stylesheet',
				$mdgriffith$elm_ui$Internal$Model$staticRoot(opts)),
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
				children)) : A2(
			$elm$core$List$cons,
			_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
			children);
	});
var $mdgriffith$elm_ui$Internal$Model$embedWith = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Internal$Model$staticRoot(opts),
			A2($elm$core$List$cons, dynamicStyleSheet, children)) : A2($elm$core$List$cons, dynamicStyleSheet, children);
	});
var $mdgriffith$elm_ui$Internal$Flag$heightBetween = $mdgriffith$elm_ui$Internal$Flag$flag(45);
var $mdgriffith$elm_ui$Internal$Flag$heightFill = $mdgriffith$elm_ui$Internal$Flag$flag(37);
var $mdgriffith$elm_ui$Internal$Flag$present = F2(
	function (myFlag, _v0) {
		var fieldOne = _v0.a;
		var fieldTwo = _v0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return _Utils_eq(first & fieldOne, first);
		} else {
			var second = myFlag.a;
			return _Utils_eq(second & fieldTwo, second);
		}
	});
var $elm$html$Html$s = _VirtualDom_node('s');
var $elm$html$Html$u = _VirtualDom_node('u');
var $mdgriffith$elm_ui$Internal$Flag$widthBetween = $mdgriffith$elm_ui$Internal$Flag$flag(44);
var $mdgriffith$elm_ui$Internal$Flag$widthFill = $mdgriffith$elm_ui$Internal$Flag$flag(39);
var $mdgriffith$elm_ui$Internal$Model$finalizeNode = F6(
	function (has, node, attributes, children, embedMode, parentContext) {
		var createNode = F2(
			function (nodeName, attrs) {
				if (children.$ === 'Keyed') {
					var keyed = children.a;
					return A3(
						$elm$virtual_dom$VirtualDom$keyedNode,
						nodeName,
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return keyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, false, opts, styles, keyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, true, opts, styles, keyed);
							}
						}());
				} else {
					var unkeyed = children.a;
					return A2(
						function () {
							switch (nodeName) {
								case 'div':
									return $elm$html$Html$div;
								case 'p':
									return $elm$html$Html$p;
								default:
									return $elm$virtual_dom$VirtualDom$node(nodeName);
							}
						}(),
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return unkeyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, false, opts, styles, unkeyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, true, opts, styles, unkeyed);
							}
						}());
				}
			});
		var html = function () {
			switch (node.$) {
				case 'Generic':
					return A2(createNode, 'div', attributes);
				case 'NodeName':
					var nodeName = node.a;
					return A2(createNode, nodeName, attributes);
				default:
					var nodeName = node.a;
					var internal = node.b;
					return A3(
						$elm$virtual_dom$VirtualDom$node,
						nodeName,
						attributes,
						_List_fromArray(
							[
								A2(
								createNode,
								internal,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.single))
									]))
							]));
			}
		}();
		switch (parentContext.$) {
			case 'AsRow':
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignRight, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerX, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX])))
						]),
					_List_fromArray(
						[html])) : html));
			case 'AsColumn':
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerY, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignBottom, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom])))
						]),
					_List_fromArray(
						[html])) : html));
			default:
				return html;
		}
	});
var $mdgriffith$elm_ui$Internal$Model$textElementClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthContent + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.heightContent)))));
var $mdgriffith$elm_ui$Internal$Model$textElement = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$textElementFillClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthFill + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.heightFill)))));
var $mdgriffith$elm_ui$Internal$Model$textElementFill = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementFillClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$createElement = F3(
	function (context, children, rendered) {
		var gatherKeyed = F2(
			function (_v8, _v9) {
				var key = _v8.a;
				var child = _v8.b;
				var htmls = _v9.a;
				var existingStyles = _v9.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str)),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		var gather = F2(
			function (child, _v6) {
				var htmls = _v6.a;
				var existingStyles = _v6.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		if (children.$ === 'Keyed') {
			var keyedChildren = children.a;
			var _v1 = A3(
				$elm$core$List$foldr,
				gatherKeyed,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				keyedChildren);
			var keyed = _v1.a;
			var styles = _v1.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						$mdgriffith$elm_ui$Internal$Model$Keyed(
							A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							$mdgriffith$elm_ui$Internal$Model$Keyed(
								A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children))),
						styles: allStyles
					});
			}
		} else {
			var unkeyedChildren = children.a;
			var _v3 = A3(
				$elm$core$List$foldr,
				gather,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				unkeyedChildren);
			var unkeyed = _v3.a;
			var styles = _v3.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							$mdgriffith$elm_ui$Internal$Model$Unkeyed(
								A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children))),
						styles: allStyles
					});
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Single = F3(
	function (a, b, c) {
		return {$: 'Single', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$Transform = function (a) {
	return {$: 'Transform', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$add = F2(
	function (myFlag, _v0) {
		var one = _v0.a;
		var two = _v0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, first | one, two);
		} else {
			var second = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, one, second | two);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehind = function (a) {
	return {$: 'ChildrenBehind', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront = F2(
	function (a, b) {
		return {$: 'ChildrenBehindAndInFront', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenInFront = function (a) {
	return {$: 'ChildrenInFront', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$nearbyElement = F2(
	function (location, elem) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class(
					function () {
						switch (location.$) {
							case 'Above':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.above]));
							case 'Below':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.below]));
							case 'OnRight':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.onRight]));
							case 'OnLeft':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.onLeft]));
							case 'InFront':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.inFront]));
							default:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.behind]));
						}
					}())
				]),
			_List_fromArray(
				[
					function () {
					switch (elem.$) {
						case 'Empty':
							return $elm$virtual_dom$VirtualDom$text('');
						case 'Text':
							var str = elem.a;
							return $mdgriffith$elm_ui$Internal$Model$textElement(str);
						case 'Unstyled':
							var html = elem.a;
							return html($mdgriffith$elm_ui$Internal$Model$asEl);
						default:
							var styled = elem.a;
							return A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, $mdgriffith$elm_ui$Internal$Model$asEl);
					}
				}()
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$addNearbyElement = F3(
	function (location, elem, existing) {
		var nearby = A2($mdgriffith$elm_ui$Internal$Model$nearbyElement, location, elem);
		switch (existing.$) {
			case 'NoNearbyChildren':
				if (location.$ === 'Behind') {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						_List_fromArray(
							[nearby]));
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenBehind':
				var existingBehind = existing.a;
				if (location.$ === 'Behind') {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						A2($elm$core$List$cons, nearby, existingBehind));
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenInFront':
				var existingInFront = existing.a;
				if (location.$ === 'Behind') {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						_List_fromArray(
							[nearby]),
						existingInFront);
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						A2($elm$core$List$cons, nearby, existingInFront));
				}
			default:
				var existingBehind = existing.a;
				var existingInFront = existing.b;
				if (location.$ === 'Behind') {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						A2($elm$core$List$cons, nearby, existingBehind),
						existingInFront);
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						A2($elm$core$List$cons, nearby, existingInFront));
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Embedded = F2(
	function (a, b) {
		return {$: 'Embedded', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NodeName = function (a) {
	return {$: 'NodeName', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addNodeName = F2(
	function (newNode, old) {
		switch (old.$) {
			case 'Generic':
				return $mdgriffith$elm_ui$Internal$Model$NodeName(newNode);
			case 'NodeName':
				var name = old.a;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, name, newNode);
			default:
				var x = old.a;
				var y = old.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, x, y);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$alignXName = function (align) {
	switch (align.$) {
		case 'Left':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'Right':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
	}
};
var $mdgriffith$elm_ui$Internal$Model$alignYName = function (align) {
	switch (align.$) {
		case 'Top':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Model$FullTransform = F4(
	function (a, b, c, d) {
		return {$: 'FullTransform', a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Internal$Model$Moved = function (a) {
	return {$: 'Moved', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$composeTransformation = F2(
	function (transform, component) {
		switch (transform.$) {
			case 'Untransformed':
				switch (component.$) {
					case 'MoveX':
						var x = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, 0, 0));
					case 'MoveY':
						var y = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, y, 0));
					case 'MoveZ':
						var z = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, 0, z));
					case 'MoveXYZ':
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var xyz = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							xyz,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			case 'Moved':
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(newX, y, z));
					case 'MoveY':
						var newY = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, newY, z));
					case 'MoveZ':
						var newZ = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, y, newZ));
					case 'MoveXYZ':
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var scale = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							scale,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			default:
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				var scaled = transform.b;
				var origin = transform.c;
				var angle = transform.d;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(newX, y, z),
							scaled,
							origin,
							angle);
					case 'MoveY':
						var newY = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, newY, z),
							scaled,
							origin,
							angle);
					case 'MoveZ':
						var newZ = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, y, newZ),
							scaled,
							origin,
							angle);
					case 'MoveXYZ':
						var newMove = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, newMove, scaled, origin, angle);
					case 'Rotate':
						var newOrigin = component.a;
						var newAngle = component.b;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, scaled, newOrigin, newAngle);
					default:
						var newScale = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, newScale, origin, angle);
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$height = $mdgriffith$elm_ui$Internal$Flag$flag(7);
var $mdgriffith$elm_ui$Internal$Flag$heightContent = $mdgriffith$elm_ui$Internal$Flag$flag(36);
var $mdgriffith$elm_ui$Internal$Flag$merge = F2(
	function (_v0, _v1) {
		var one = _v0.a;
		var two = _v0.b;
		var three = _v1.a;
		var four = _v1.b;
		return A2($mdgriffith$elm_ui$Internal$Flag$Field, one | three, two | four);
	});
var $mdgriffith$elm_ui$Internal$Flag$none = A2($mdgriffith$elm_ui$Internal$Flag$Field, 0, 0);
var $mdgriffith$elm_ui$Internal$Model$renderHeight = function (h) {
	switch (h.$) {
		case 'Px':
			var px = h.a;
			var val = $elm$core$String$fromInt(px);
			var name = 'height-px-' + val;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.heightExact + (' ' + name),
				_List_fromArray(
					[
						A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height', val + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightContent,
				_List_Nil);
		case 'Fill':
			var portion = h.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightFill,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.column + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'height-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = h.a;
			var len = h.b;
			var cls = 'min-height-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-height',
				$elm$core$String$fromInt(minSize) + 'px');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = h.a;
			var len = h.b;
			var cls = 'max-height-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-height',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$widthContent = $mdgriffith$elm_ui$Internal$Flag$flag(38);
var $mdgriffith$elm_ui$Internal$Model$renderWidth = function (w) {
	switch (w.$) {
		case 'Px':
			var px = w.a;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + $elm$core$String$fromInt(px)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						'width-px-' + $elm$core$String$fromInt(px),
						'width',
						$elm$core$String$fromInt(px) + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthContent,
				_List_Nil);
		case 'Fill':
			var portion = w.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthFill,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'width-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = w.a;
			var len = w.b;
			var cls = 'min-width-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-width',
				$elm$core$String$fromInt(minSize) + 'px');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = w.a;
			var len = w.b;
			var cls = 'max-width-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-width',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$borderWidth = $mdgriffith$elm_ui$Internal$Flag$flag(27);
var $mdgriffith$elm_ui$Internal$Model$skippable = F2(
	function (flag, style) {
		if (_Utils_eq(flag, $mdgriffith$elm_ui$Internal$Flag$borderWidth)) {
			if (style.$ === 'Single') {
				var val = style.c;
				switch (val) {
					case '0px':
						return true;
					case '1px':
						return true;
					case '2px':
						return true;
					case '3px':
						return true;
					case '4px':
						return true;
					case '5px':
						return true;
					case '6px':
						return true;
					default:
						return false;
				}
			} else {
				return false;
			}
		} else {
			switch (style.$) {
				case 'FontSize':
					var i = style.a;
					return (i >= 8) && (i <= 32);
				case 'PaddingStyle':
					var name = style.a;
					var t = style.b;
					var r = style.c;
					var b = style.d;
					var l = style.e;
					return _Utils_eq(t, b) && (_Utils_eq(t, r) && (_Utils_eq(t, l) && ((t >= 0) && (t <= 24))));
				default:
					return false;
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$width = $mdgriffith$elm_ui$Internal$Flag$flag(6);
var $mdgriffith$elm_ui$Internal$Flag$xAlign = $mdgriffith$elm_ui$Internal$Flag$flag(30);
var $mdgriffith$elm_ui$Internal$Flag$yAlign = $mdgriffith$elm_ui$Internal$Flag$flag(29);
var $mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive = F8(
	function (classes, node, has, transform, styles, attrs, children, elementAttrs) {
		gatherAttrRecursive:
		while (true) {
			if (!elementAttrs.b) {
				var _v1 = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				if (_v1.$ === 'Nothing') {
					return {
						attributes: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: styles
					};
				} else {
					var _class = _v1.a;
					return {
						attributes: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes + (' ' + _class)),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$Transform(transform),
							styles)
					};
				}
			} else {
				var attribute = elementAttrs.a;
				var remaining = elementAttrs.b;
				switch (attribute.$) {
					case 'NoAttribute':
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Class':
						var flag = attribute.a;
						var exactClassName = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = exactClassName + (' ' + classes),
								$temp$node = node,
								$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					case 'Attr':
						var actualAttribute = attribute.a;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = A2($elm$core$List$cons, actualAttribute, attrs),
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'StyleClass':
						var flag = attribute.a;
						var style = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							if (A2($mdgriffith$elm_ui$Internal$Model$skippable, flag, style)) {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							} else {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = A2($elm$core$List$cons, style, styles),
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							}
						}
					case 'TransformComponent':
						var flag = attribute.a;
						var component = attribute.b;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
							$temp$transform = A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, transform, component),
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Width':
						var width = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$width, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (width.$) {
								case 'Px':
									var px = width.a;
									var $temp$classes = ($mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + $elm$core$String$fromInt(px))) + (' ' + classes),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3(
											$mdgriffith$elm_ui$Internal$Model$Single,
											'width-px-' + $elm$core$String$fromInt(px),
											'width',
											$elm$core$String$fromInt(px) + 'px'),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.widthContent),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$widthContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = width.a;
									if (portion === 1) {
										var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'width-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v4 = $mdgriffith$elm_ui$Internal$Model$renderWidth(width);
									var addToFlags = _v4.a;
									var newClass = _v4.b;
									var newStyles = _v4.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Height':
						var height = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$height, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (height.$) {
								case 'Px':
									var px = height.a;
									var val = $elm$core$String$fromInt(px) + 'px';
									var name = 'height-px-' + val;
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightExact + (' ' + (name + (' ' + classes))),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height ', val),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightContent + (' ' + classes),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$heightContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = height.a;
									if (portion === 1) {
										var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightFill + (' ' + classes),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.column + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'height-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v6 = $mdgriffith$elm_ui$Internal$Model$renderHeight(height);
									var addToFlags = _v6.a;
									var newClass = _v6.b;
									var newStyles = _v6.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Describe':
						var description = attribute.a;
						switch (description.$) {
							case 'Main':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'main', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Navigation':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'nav', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'ContentInfo':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'footer', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Complementary':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'aside', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Heading':
								var i = description.a;
								if (i <= 1) {
									var $temp$classes = classes,
										$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h1', node),
										$temp$has = has,
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								} else {
									if (i < 7) {
										var $temp$classes = classes,
											$temp$node = A2(
											$mdgriffith$elm_ui$Internal$Model$addNodeName,
											'h' + $elm$core$String$fromInt(i),
											node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes,
											$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h6', node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								}
							case 'Paragraph':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Button':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'role', 'button'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Label':
								var label = description.a;
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-label', label),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'LivePolite':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'polite'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							default:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'assertive'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
						}
					case 'Nearby':
						var location = attribute.a;
						var elem = attribute.b;
						var newStyles = function () {
							switch (elem.$) {
								case 'Empty':
									return styles;
								case 'Text':
									var str = elem.a;
									return styles;
								case 'Unstyled':
									var html = elem.a;
									return styles;
								default:
									var styled = elem.a;
									return _Utils_ap(styles, styled.styles);
							}
						}();
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = newStyles,
							$temp$attrs = attrs,
							$temp$children = A3($mdgriffith$elm_ui$Internal$Model$addNearbyElement, location, elem, children),
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'AlignX':
						var x = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignXName(x) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (x.$) {
									case 'CenterX':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerX, flags);
									case 'Right':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignRight, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					default:
						var y = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignYName(y) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (y.$) {
									case 'CenterY':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerY, flags);
									case 'Bottom':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignBottom, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
				}
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Untransformed = {$: 'Untransformed'};
var $mdgriffith$elm_ui$Internal$Model$untransformed = $mdgriffith$elm_ui$Internal$Model$Untransformed;
var $mdgriffith$elm_ui$Internal$Model$element = F4(
	function (context, node, attributes, children) {
		return A3(
			$mdgriffith$elm_ui$Internal$Model$createElement,
			context,
			children,
			A8(
				$mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive,
				$mdgriffith$elm_ui$Internal$Model$contextClasses(context),
				node,
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Model$untransformed,
				_List_Nil,
				_List_Nil,
				$mdgriffith$elm_ui$Internal$Model$NoNearbyChildren,
				$elm$core$List$reverse(attributes)));
	});
var $mdgriffith$elm_ui$Internal$Model$Height = function (a) {
	return {$: 'Height', a: a};
};
var $mdgriffith$elm_ui$Element$height = $mdgriffith$elm_ui$Internal$Model$Height;
var $mdgriffith$elm_ui$Internal$Model$Content = {$: 'Content'};
var $mdgriffith$elm_ui$Element$shrink = $mdgriffith$elm_ui$Internal$Model$Content;
var $mdgriffith$elm_ui$Internal$Model$Width = function (a) {
	return {$: 'Width', a: a};
};
var $mdgriffith$elm_ui$Element$width = $mdgriffith$elm_ui$Internal$Model$Width;
var $mdgriffith$elm_ui$Element$el = F2(
	function (attrs, child) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					attrs)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[child])));
	});
var $mdgriffith$elm_ui$Internal$Model$Fill = function (a) {
	return {$: 'Fill', a: a};
};
var $mdgriffith$elm_ui$Element$fill = $mdgriffith$elm_ui$Internal$Model$Fill(1);
var $mdgriffith$elm_ui$Internal$Model$PaddingStyle = F5(
	function (a, b, c, d, e) {
		return {$: 'PaddingStyle', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Flag$padding = $mdgriffith$elm_ui$Internal$Flag$flag(2);
var $mdgriffith$elm_ui$Element$padding = function (x) {
	var f = x;
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$padding,
		A5(
			$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
			'p-' + $elm$core$String$fromInt(x),
			f,
			f,
			f,
			f));
};
var $mdgriffith$elm_ui$Internal$Model$Rgba = F4(
	function (a, b, c, d) {
		return {$: 'Rgba', a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Element$rgba = $mdgriffith$elm_ui$Internal$Model$Rgba;
var $mdgriffith$elm_ui$Internal$Model$FontSize = function (a) {
	return {$: 'FontSize', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$fontSize = $mdgriffith$elm_ui$Internal$Flag$flag(4);
var $mdgriffith$elm_ui$Element$Font$size = function (i) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontSize,
		$mdgriffith$elm_ui$Internal$Model$FontSize(i));
};
var $mdgriffith$elm_ui$Internal$Model$Text = function (a) {
	return {$: 'Text', a: a};
};
var $mdgriffith$elm_ui$Element$text = function (content) {
	return $mdgriffith$elm_ui$Internal$Model$Text(content);
};
var $author$project$Index$View$author = F2(
	function (scale, str) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(
					scale(5)),
					$mdgriffith$elm_ui$Element$Font$size(
					scale(12)),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Font$bold,
					$mdgriffith$elm_ui$Element$Background$color(
					A4($mdgriffith$elm_ui$Element$rgba, 0.95, 0.95, 0.95, 0.6))
				]),
			$mdgriffith$elm_ui$Element$text(
				(str === '') ? 'by Annonymous' : ('by ' + str)));
	});
var $mdgriffith$elm_ui$Internal$Flag$fontColor = $mdgriffith$elm_ui$Internal$Flag$flag(14);
var $mdgriffith$elm_ui$Element$Font$color = function (fontColor) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(fontColor),
			'color',
			fontColor));
};
var $mdgriffith$elm_ui$Element$paddingXY = F2(
	function (x, y) {
		if (_Utils_eq(x, y)) {
			var f = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + $elm$core$String$fromInt(x),
					f,
					f,
					f,
					f));
		} else {
			var yFloat = y;
			var xFloat = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
					yFloat,
					xFloat,
					yFloat,
					xFloat));
		}
	});
var $mdgriffith$elm_ui$Element$rgb = F3(
	function (r, g, b) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, r, g, b, 1);
	});
var $mdgriffith$elm_ui$Internal$Flag$borderRound = $mdgriffith$elm_ui$Internal$Flag$flag(17);
var $mdgriffith$elm_ui$Element$Border$rounded = function (radius) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + $elm$core$String$fromInt(radius),
			'border-radius',
			$elm$core$String$fromInt(radius) + 'px'));
};
var $mdgriffith$elm_ui$Internal$Model$boxShadowClass = function (shadow) {
	return $elm$core$String$concat(
		_List_fromArray(
			[
				shadow.inset ? 'box-inset' : 'box-',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.offset.a) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.offset.b) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.blur) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.size) + 'px',
				$mdgriffith$elm_ui$Internal$Model$formatColorClass(shadow.color)
			]));
};
var $mdgriffith$elm_ui$Internal$Flag$shadows = $mdgriffith$elm_ui$Internal$Flag$flag(19);
var $mdgriffith$elm_ui$Element$Border$shadow = function (almostShade) {
	var shade = {blur: almostShade.blur, color: almostShade.color, inset: false, offset: almostShade.offset, size: almostShade.size};
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$shadows,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			$mdgriffith$elm_ui$Internal$Model$boxShadowClass(shade),
			'box-shadow',
			$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(shade)));
};
var $author$project$Index$View$btn = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Font$color(
		A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.7)),
		$mdgriffith$elm_ui$Element$Border$shadow(
		{
			blur: 1,
			color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.2),
			offset: _Utils_Tuple2(2, 2),
			size: 1
		}),
		A2($mdgriffith$elm_ui$Element$paddingXY, 5, 4),
		$mdgriffith$elm_ui$Element$Border$rounded(5),
		$mdgriffith$elm_ui$Element$Background$color(
		A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1))
	]);
var $mdgriffith$elm_ui$Internal$Model$Attr = function (a) {
	return {$: 'Attr', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Button = {$: 'Button'};
var $mdgriffith$elm_ui$Internal$Model$Describe = function (a) {
	return {$: 'Describe', a: a};
};
var $elm$html$Html$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$bool(bool));
	});
var $elm$html$Html$Attributes$disabled = $elm$html$Html$Attributes$boolProperty('disabled');
var $mdgriffith$elm_ui$Internal$Model$NoAttribute = {$: 'NoAttribute'};
var $mdgriffith$elm_ui$Element$Input$hasFocusStyle = function (attr) {
	if (((attr.$ === 'StyleClass') && (attr.b.$ === 'PseudoSelector')) && (attr.b.a.$ === 'Focus')) {
		var _v1 = attr.b;
		var _v2 = _v1.a;
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Internal$Model$htmlClass = function (cls) {
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		$elm$html$Html$Attributes$class(cls));
};
var $mdgriffith$elm_ui$Element$Input$focusDefault = function (attrs) {
	return A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, attrs) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass('focusable');
};
var $mdgriffith$elm_ui$Element$Events$onClick = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onClick);
var $mdgriffith$elm_ui$Element$Input$enter = 'Enter';
var $elm$virtual_dom$VirtualDom$MayPreventDefault = function (a) {
	return {$: 'MayPreventDefault', a: a};
};
var $elm$html$Html$Events$preventDefaultOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayPreventDefault(decoder));
	});
var $mdgriffith$elm_ui$Element$Input$onKey = F2(
	function (desiredCode, msg) {
		var decode = function (code) {
			return _Utils_eq(code, desiredCode) ? $elm$json$Json$Decode$succeed(msg) : $elm$json$Json$Decode$fail('Not the enter key');
		};
		var isKey = A2(
			$elm$json$Json$Decode$andThen,
			decode,
			A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string));
		return $mdgriffith$elm_ui$Internal$Model$Attr(
			A2(
				$elm$html$Html$Events$preventDefaultOn,
				'keyup',
				A2(
					$elm$json$Json$Decode$map,
					function (fired) {
						return _Utils_Tuple2(fired, true);
					},
					isKey)));
	});
var $mdgriffith$elm_ui$Element$Input$onEnter = function (msg) {
	return A2($mdgriffith$elm_ui$Element$Input$onKey, $mdgriffith$elm_ui$Element$Input$enter, msg);
};
var $mdgriffith$elm_ui$Internal$Flag$cursor = $mdgriffith$elm_ui$Internal$Flag$flag(21);
var $mdgriffith$elm_ui$Element$pointer = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.cursorPointer);
var $elm$html$Html$Attributes$tabindex = function (n) {
	return A2(
		_VirtualDom_attribute,
		'tabIndex',
		$elm$core$String$fromInt(n));
};
var $mdgriffith$elm_ui$Element$Input$button = F2(
	function (attrs, _v0) {
		var onPress = _v0.onPress;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.seButton + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.noTextSelection)))))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$pointer,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$Input$focusDefault(attrs),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Button),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											$elm$html$Html$Attributes$tabindex(0)),
										function () {
											if (onPress.$ === 'Nothing') {
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Internal$Model$Attr(
														$elm$html$Html$Attributes$disabled(true)),
													attrs);
											} else {
												var msg = onPress.a;
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Element$Events$onClick(msg),
													A2(
														$elm$core$List$cons,
														$mdgriffith$elm_ui$Element$Input$onEnter(msg),
														attrs));
											}
										}()))))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $mdgriffith$elm_ui$Internal$Flag$overflow = $mdgriffith$elm_ui$Internal$Flag$flag(20);
var $mdgriffith$elm_ui$Element$clip = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.clip);
var $mdgriffith$elm_ui$Internal$Flag$borderColor = $mdgriffith$elm_ui$Internal$Flag$flag(28);
var $mdgriffith$elm_ui$Element$Border$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'border-color',
			clr));
};
var $mdgriffith$elm_ui$Internal$Model$AsColumn = {$: 'AsColumn'};
var $mdgriffith$elm_ui$Internal$Model$asColumn = $mdgriffith$elm_ui$Internal$Model$AsColumn;
var $mdgriffith$elm_ui$Element$column = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentTop + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentLeft)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $author$project$Index$View$get_active = function (course) {
	var _v0 = course.active;
	if (_v0.$ === 'Nothing') {
		return A2(
			$elm$core$Maybe$map,
			$elm$core$Tuple$second,
			$elm$core$List$head(
				A2(
					$elm$core$List$sortBy,
					$elm$core$Tuple$first,
					$elm$core$Dict$toList(course.versions))));
	} else {
		var id = _v0.a;
		return A2($elm$core$Dict$get, id, course.versions);
	}
};
var $author$project$Index$View$href = A2(
	$elm$core$Basics$composeR,
	$author$project$Lia$Parser$PatReplace$link,
	$elm$core$Basics$append('./?'));
var $mdgriffith$elm_ui$Internal$Model$unstyled = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Unstyled, $elm$core$Basics$always);
var $mdgriffith$elm_ui$Element$html = $mdgriffith$elm_ui$Internal$Model$unstyled;
var $mdgriffith$elm_ui$Element$Background$image = function (src) {
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		A2($elm$virtual_dom$VirtualDom$style, 'background', 'url(\"' + (src + '\") center / cover no-repeat')));
};
var $mdgriffith$elm_ui$Internal$Model$InFront = {$: 'InFront'};
var $mdgriffith$elm_ui$Internal$Model$Nearby = F2(
	function (a, b) {
		return {$: 'Nearby', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$createNearby = F2(
	function (loc, element) {
		if (element.$ === 'Empty') {
			return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
		} else {
			return A2($mdgriffith$elm_ui$Internal$Model$Nearby, loc, element);
		}
	});
var $mdgriffith$elm_ui$Element$inFront = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$InFront, element);
};
var $author$project$Index$Update$NoOp = {$: 'NoOp'};
var $author$project$Lia$Markdown$Inline$Config$Config = F7(
	function (view, slide, visible, speaking, lang, theme, scripts) {
		return {lang: lang, scripts: scripts, slide: slide, speaking: speaking, theme: theme, view: view, visible: visible};
	});
var $author$project$Lia$Markdown$Inline$Config$init = F7(
	function (slide, mode, visible, speaking, effects, theme, lang) {
		return A7(
			$author$project$Lia$Markdown$Inline$Config$Config,
			$elm$core$Maybe$Nothing,
			slide,
			_Utils_eq(mode, $author$project$Lia$Settings$Types$Textbook) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(visible),
			speaking,
			theme,
			lang,
			effects);
	});
var $elm$html$Html$Attributes$alt = $elm$html$Html$Attributes$stringProperty('alt');
var $author$project$Lia$Markdown$Inline$View$stringFrom = function (config) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$Maybe$map(
			A2($author$project$Lia$Markdown$Inline$Stringify$stringify_, config.scripts, config.visible)),
		$elm$core$Maybe$withDefault(''));
};
var $author$project$Lia$Markdown$Inline$View$alt = function (config) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$Maybe$Just,
		A2(
			$elm$core$Basics$composeR,
			$author$project$Lia$Markdown$Inline$View$stringFrom(config),
			$elm$html$Html$Attributes$alt));
};
var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
var $author$project$Lia$Markdown$HTML$Attributes$toAttribute = $elm$core$List$map(
	function (_v0) {
		var key = _v0.a;
		var value = _v0.b;
		return A2($elm$html$Html$Attributes$attribute, key, value);
	});
var $author$project$Lia$Markdown$HTML$Attributes$annotation = function (cls) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$List$cons(
			_Utils_Tuple2('class', cls)),
		$author$project$Lia$Markdown$HTML$Attributes$toAttribute);
};
var $elm$html$Html$audio = _VirtualDom_node('audio');
var $elm$html$Html$b = _VirtualDom_node('b');
var $elm$html$Html$Attributes$controls = $elm$html$Html$Attributes$boolProperty('controls');
var $elm$html$Html$em = _VirtualDom_node('em');
var $elm$html$Html$figcaption = _VirtualDom_node('figcaption');
var $elm$html$Html$figure = _VirtualDom_node('figure');
var $pablohirafuji$elm_qrcode$QRCode$Quartile = {$: 'Quartile'};
var $pablohirafuji$elm_qrcode$QRCode$QRCode = function (a) {
	return {$: 'QRCode', a: a};
};
var $elm$core$Result$andThen = F2(
	function (callback, result) {
		if (result.$ === 'Ok') {
			var value = result.a;
			return callback(value);
		} else {
			var msg = result.a;
			return $elm$core$Result$Err(msg);
		}
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$getIndex = F3(
	function (size, row, col) {
		return (size * row) + col;
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$isOccupy = F4(
	function (row, col, size, matrix) {
		var _v0 = A2(
			$elm$core$Array$get,
			A3($pablohirafuji$elm_qrcode$QRCode$Matrix$getIndex, size, row, col),
			matrix);
		if ((_v0.$ === 'Just') && (_v0.a.$ === 'Just')) {
			return true;
		} else {
			return false;
		}
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$nextModule = function (placement) {
	var row = placement.row;
	var col = placement.col;
	var isRight = placement.isRight;
	var isUp = placement.isUp;
	return isRight ? _Utils_update(
		placement,
		{col: col - 1, isRight: false}) : (isUp ? _Utils_update(
		placement,
		{col: col + 1, isRight: true, row: row - 1}) : _Utils_update(
		placement,
		{col: col + 1, isRight: true, row: row + 1}));
};
var $pablohirafuji$elm_qrcode$QRCode$Matrix$bitToColor = F2(
	function (_byte, offset) {
		return (1 & (_byte >> (7 - offset))) === 1;
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$setDataModule = F3(
	function (_v0, _byte, offset) {
		var size = _v0.size;
		var row = _v0.row;
		var col = _v0.col;
		return A2(
			$elm$core$Array$set,
			A3($pablohirafuji$elm_qrcode$QRCode$Matrix$getIndex, size, row, col),
			$elm$core$Maybe$Just(
				_Utils_Tuple2(
					false,
					A2($pablohirafuji$elm_qrcode$QRCode$Matrix$bitToColor, _byte, offset))));
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$addDataModule = F4(
	function (placement, bytes, offset, matrix) {
		addDataModule:
		while (true) {
			var size = placement.size;
			var row = placement.row;
			var col = placement.col;
			if (!bytes.b) {
				return matrix;
			} else {
				var head = bytes.a;
				var tail = bytes.b;
				if (offset >= 8) {
					var $temp$placement = placement,
						$temp$bytes = tail,
						$temp$offset = 0,
						$temp$matrix = matrix;
					placement = $temp$placement;
					bytes = $temp$bytes;
					offset = $temp$offset;
					matrix = $temp$matrix;
					continue addDataModule;
				} else {
					if (col === 6) {
						var $temp$placement = _Utils_update(
							placement,
							{col: col - 1, isRight: true}),
							$temp$bytes = bytes,
							$temp$offset = offset,
							$temp$matrix = matrix;
						placement = $temp$placement;
						bytes = $temp$bytes;
						offset = $temp$offset;
						matrix = $temp$matrix;
						continue addDataModule;
					} else {
						if (row < 0) {
							var $temp$placement = _Utils_update(
								placement,
								{col: col - 2, isRight: true, isUp: false, row: 0}),
								$temp$bytes = bytes,
								$temp$offset = offset,
								$temp$matrix = matrix;
							placement = $temp$placement;
							bytes = $temp$bytes;
							offset = $temp$offset;
							matrix = $temp$matrix;
							continue addDataModule;
						} else {
							if (_Utils_cmp(row, size) > -1) {
								var $temp$placement = _Utils_update(
									placement,
									{col: col - 2, isRight: true, isUp: true, row: size - 1}),
									$temp$bytes = bytes,
									$temp$offset = offset,
									$temp$matrix = matrix;
								placement = $temp$placement;
								bytes = $temp$bytes;
								offset = $temp$offset;
								matrix = $temp$matrix;
								continue addDataModule;
							} else {
								if (A4($pablohirafuji$elm_qrcode$QRCode$Matrix$isOccupy, row, col, size, matrix)) {
									var $temp$placement = $pablohirafuji$elm_qrcode$QRCode$Matrix$nextModule(placement),
										$temp$bytes = bytes,
										$temp$offset = offset,
										$temp$matrix = matrix;
									placement = $temp$placement;
									bytes = $temp$bytes;
									offset = $temp$offset;
									matrix = $temp$matrix;
									continue addDataModule;
								} else {
									var $temp$placement = $pablohirafuji$elm_qrcode$QRCode$Matrix$nextModule(placement),
										$temp$bytes = bytes,
										$temp$offset = offset + 1,
										$temp$matrix = A4($pablohirafuji$elm_qrcode$QRCode$Matrix$setDataModule, placement, head, offset, matrix);
									placement = $temp$placement;
									bytes = $temp$bytes;
									offset = $temp$offset;
									matrix = $temp$matrix;
									continue addDataModule;
								}
							}
						}
					}
				}
			}
		}
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$initPlacement = function (size) {
	return {col: size + 1, isRight: true, isUp: true, row: size + 1, size: size};
};
var $pablohirafuji$elm_qrcode$QRCode$Matrix$addData = F3(
	function (size, bytes, matrix) {
		return A4(
			$pablohirafuji$elm_qrcode$QRCode$Matrix$addDataModule,
			$pablohirafuji$elm_qrcode$QRCode$Matrix$initPlacement(size),
			bytes,
			0,
			matrix);
	});
var $pablohirafuji$elm_qrcode$QRCode$Error$AlignmentPatternNotFound = {$: 'AlignmentPatternNotFound'};
var $pablohirafuji$elm_qrcode$QRCode$Matrix$alignmentPatternData = $elm$core$Array$fromList(
	_List_fromArray(
		[
			_List_Nil,
			_List_fromArray(
			[6, 18]),
			_List_fromArray(
			[6, 22]),
			_List_fromArray(
			[6, 26]),
			_List_fromArray(
			[6, 30]),
			_List_fromArray(
			[6, 34]),
			_List_fromArray(
			[6, 22, 38]),
			_List_fromArray(
			[6, 24, 42]),
			_List_fromArray(
			[6, 26, 46]),
			_List_fromArray(
			[6, 28, 50]),
			_List_fromArray(
			[6, 30, 54]),
			_List_fromArray(
			[6, 32, 58]),
			_List_fromArray(
			[6, 34, 62]),
			_List_fromArray(
			[6, 26, 46, 66]),
			_List_fromArray(
			[6, 26, 48, 70]),
			_List_fromArray(
			[6, 26, 50, 74]),
			_List_fromArray(
			[6, 30, 54, 78]),
			_List_fromArray(
			[6, 30, 56, 82]),
			_List_fromArray(
			[6, 30, 58, 86]),
			_List_fromArray(
			[6, 34, 62, 90]),
			_List_fromArray(
			[6, 28, 50, 72, 94]),
			_List_fromArray(
			[6, 26, 50, 74, 98]),
			_List_fromArray(
			[6, 30, 54, 78, 102]),
			_List_fromArray(
			[6, 28, 54, 80, 106]),
			_List_fromArray(
			[6, 32, 58, 84, 110]),
			_List_fromArray(
			[6, 30, 58, 86, 114]),
			_List_fromArray(
			[6, 34, 62, 90, 118]),
			_List_fromArray(
			[6, 26, 50, 74, 98, 122]),
			_List_fromArray(
			[6, 30, 54, 78, 102, 126]),
			_List_fromArray(
			[6, 26, 52, 78, 104, 130]),
			_List_fromArray(
			[6, 30, 56, 82, 108, 134]),
			_List_fromArray(
			[6, 34, 60, 86, 112, 138]),
			_List_fromArray(
			[6, 30, 58, 86, 114, 142]),
			_List_fromArray(
			[6, 34, 62, 90, 118, 146]),
			_List_fromArray(
			[6, 30, 54, 78, 102, 126, 150]),
			_List_fromArray(
			[6, 24, 50, 76, 102, 128, 154]),
			_List_fromArray(
			[6, 28, 54, 80, 106, 132, 158]),
			_List_fromArray(
			[6, 32, 58, 84, 110, 136, 162]),
			_List_fromArray(
			[6, 26, 54, 82, 110, 138, 166]),
			_List_fromArray(
			[6, 30, 58, 86, 114, 142, 170])
		]));
var $elm$core$Result$fromMaybe = F2(
	function (err, maybe) {
		if (maybe.$ === 'Just') {
			var v = maybe.a;
			return $elm$core$Result$Ok(v);
		} else {
			return $elm$core$Result$Err(err);
		}
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$getAreaCoord = F2(
	function (rows, cols) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (row, list) {
					return A3(
						$elm$core$List$foldl,
						F2(
							function (col, list_) {
								return A2(
									$elm$core$List$cons,
									_Utils_Tuple2(row, col),
									list_);
							}),
						list,
						cols);
				}),
			_List_Nil,
			rows);
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$isValidAlign = F2(
	function (size, _v0) {
		var row = _v0.a;
		var col = _v0.b;
		return ((row > 10) || ((10 < col) && (_Utils_cmp(col, size - 10) < 0))) && ((_Utils_cmp(row, size - 10) < 0) || (col > 10));
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$alignmentRange = A2($elm$core$List$range, -2, 2);
var $pablohirafuji$elm_qrcode$QRCode$Matrix$alignmentColor = F2(
	function (row, col) {
		return (_Utils_eq(row, -2) || ((row === 2) || (_Utils_eq(col, -2) || ((col === 2) || ((!row) && (!col)))))) ? $elm$core$Maybe$Just(
			_Utils_Tuple2(true, true)) : $elm$core$Maybe$Just(
			_Utils_Tuple2(true, false));
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$setAlignModule = F4(
	function (size, rowPos, colPos, _v0) {
		var row = _v0.a;
		var col = _v0.b;
		return A2(
			$elm$core$Array$set,
			A3($pablohirafuji$elm_qrcode$QRCode$Matrix$getIndex, size, row + rowPos, col + colPos),
			A2($pablohirafuji$elm_qrcode$QRCode$Matrix$alignmentColor, row, col));
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$setAlignment = F3(
	function (size, _v0, matrix) {
		var row = _v0.a;
		var col = _v0.b;
		return A3(
			$elm$core$List$foldl,
			A3($pablohirafuji$elm_qrcode$QRCode$Matrix$setAlignModule, size, row, col),
			matrix,
			A2($pablohirafuji$elm_qrcode$QRCode$Matrix$getAreaCoord, $pablohirafuji$elm_qrcode$QRCode$Matrix$alignmentRange, $pablohirafuji$elm_qrcode$QRCode$Matrix$alignmentRange));
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$setAlignments = F3(
	function (size, locations, matrix) {
		return A3(
			$elm$core$List$foldl,
			$pablohirafuji$elm_qrcode$QRCode$Matrix$setAlignment(size),
			matrix,
			A2(
				$elm$core$List$filter,
				$pablohirafuji$elm_qrcode$QRCode$Matrix$isValidAlign(size),
				A2($pablohirafuji$elm_qrcode$QRCode$Matrix$getAreaCoord, locations, locations)));
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$alignmentPattern = F3(
	function (version, size, matrix) {
		return A2(
			$elm$core$Result$map,
			function (a) {
				return A3($pablohirafuji$elm_qrcode$QRCode$Matrix$setAlignments, size, a, matrix);
			},
			A2(
				$elm$core$Result$fromMaybe,
				$pablohirafuji$elm_qrcode$QRCode$Error$AlignmentPatternNotFound,
				A2($elm$core$Array$get, version - 1, $pablohirafuji$elm_qrcode$QRCode$Matrix$alignmentPatternData)));
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$darkModule = F2(
	function (version, size) {
		return A2(
			$elm$core$Array$set,
			A3($pablohirafuji$elm_qrcode$QRCode$Matrix$getIndex, size, (4 * version) + 9, 8),
			$elm$core$Maybe$Just(
				_Utils_Tuple2(true, true)));
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$finderRange = A2($elm$core$List$range, 0, 8);
var $pablohirafuji$elm_qrcode$QRCode$Matrix$finderColor = F2(
	function (row, col) {
		return ((1 <= row) && ((row <= 7) && ((col === 1) || (col === 7)))) || (((1 <= col) && ((col <= 7) && ((row === 1) || (row === 7)))) || ((3 <= row) && ((row <= 5) && ((3 <= col) && (col <= 5)))));
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$setFinder = F5(
	function (size, rowOffset, colOffset, _v0, matrix) {
		var row = _v0.a;
		var col = _v0.b;
		var finalRow = row + rowOffset;
		var finalCol = col + colOffset;
		return ((finalRow < 0) || ((finalCol < 0) || ((_Utils_cmp(finalRow, size) > -1) || (_Utils_cmp(finalCol, size) > -1)))) ? matrix : A3(
			$elm$core$Array$set,
			A3($pablohirafuji$elm_qrcode$QRCode$Matrix$getIndex, size, finalRow, finalCol),
			$elm$core$Maybe$Just(
				_Utils_Tuple2(
					true,
					A2($pablohirafuji$elm_qrcode$QRCode$Matrix$finderColor, row, col))),
			matrix);
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$finderPattern = F4(
	function (size, rowOffset, colOffset, matrix) {
		return A3(
			$elm$core$List$foldl,
			A3($pablohirafuji$elm_qrcode$QRCode$Matrix$setFinder, size, rowOffset, colOffset),
			matrix,
			A2($pablohirafuji$elm_qrcode$QRCode$Matrix$getAreaCoord, $pablohirafuji$elm_qrcode$QRCode$Matrix$finderRange, $pablohirafuji$elm_qrcode$QRCode$Matrix$finderRange));
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$applyMaskColor = F2(
	function (maybeModule, isChange) {
		if (isChange) {
			if ((maybeModule.$ === 'Just') && (!maybeModule.a.a)) {
				var _v1 = maybeModule.a;
				var isDark = _v1.b;
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(false, !isDark));
			} else {
				return maybeModule;
			}
		} else {
			return maybeModule;
		}
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$getCoord = F2(
	function (size, index) {
		return _Utils_Tuple2(
			(index / size) | 0,
			A2($elm$core$Basics$modBy, size, index));
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$applyMaskFunction = F4(
	function (_function, size, index, maybeModule) {
		return A2(
			$pablohirafuji$elm_qrcode$QRCode$Matrix$applyMaskColor,
			maybeModule,
			_function(
				A2($pablohirafuji$elm_qrcode$QRCode$Matrix$getCoord, size, index)));
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$maskFunction = function (mask) {
	switch (mask.$) {
		case 'Pattern0':
			return function (_v1) {
				var row = _v1.a;
				var col = _v1.b;
				return !A2($elm$core$Basics$modBy, 2, row + col);
			};
		case 'Pattern1':
			return function (_v2) {
				var row = _v2.a;
				return !A2($elm$core$Basics$modBy, 2, row);
			};
		case 'Pattern2':
			return function (_v3) {
				var col = _v3.b;
				return !A2($elm$core$Basics$modBy, 3, col);
			};
		case 'Pattern3':
			return function (_v4) {
				var row = _v4.a;
				var col = _v4.b;
				return !A2($elm$core$Basics$modBy, 3, row + col);
			};
		case 'Pattern4':
			return function (_v5) {
				var row = _v5.a;
				var col = _v5.b;
				return !A2(
					$elm$core$Basics$modBy,
					2,
					$elm$core$Basics$floor(row / 2) + $elm$core$Basics$floor(col / 3));
			};
		case 'Pattern5':
			return function (_v6) {
				var row = _v6.a;
				var col = _v6.b;
				return !(A2($elm$core$Basics$modBy, 2, row * col) + A2($elm$core$Basics$modBy, 3, row * col));
			};
		case 'Pattern6':
			return function (_v7) {
				var row = _v7.a;
				var col = _v7.b;
				return !A2(
					$elm$core$Basics$modBy,
					2,
					A2($elm$core$Basics$modBy, 2, row * col) + A2($elm$core$Basics$modBy, 3, row * col));
			};
		default:
			return function (_v8) {
				var row = _v8.a;
				var col = _v8.b;
				return !A2(
					$elm$core$Basics$modBy,
					2,
					A2($elm$core$Basics$modBy, 3, row * col) + A2($elm$core$Basics$modBy, 2, row + col));
			};
	}
};
var $pablohirafuji$elm_qrcode$QRCode$Matrix$applyMask = F3(
	function (size, mask, matrix) {
		return A2(
			$elm$core$Array$indexedMap,
			A2(
				$pablohirafuji$elm_qrcode$QRCode$Matrix$applyMaskFunction,
				$pablohirafuji$elm_qrcode$QRCode$Matrix$maskFunction(mask),
				size),
			matrix);
	});
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(
	function (n, list) {
		return A3($elm$core$List$takeFast, 0, n, list);
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$breakList = F3(
	function (width, list, acc) {
		breakList:
		while (true) {
			if (!list.b) {
				return $elm$core$List$reverse(acc);
			} else {
				var $temp$width = width,
					$temp$list = A2($elm$core$List$drop, width, list),
					$temp$acc = A2(
					$elm$core$List$cons,
					A2($elm$core$List$take, width, list),
					acc);
				width = $temp$width;
				list = $temp$list;
				acc = $temp$acc;
				continue breakList;
			}
		}
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$isDarkModule = A2(
	$elm$core$Basics$composeR,
	$elm$core$Maybe$map($elm$core$Tuple$second),
	$elm$core$Maybe$withDefault(false));
var $pablohirafuji$elm_qrcode$QRCode$Matrix$rule1Score_ = F2(
	function (simplifiedList, _v0) {
		rule1Score_:
		while (true) {
			var last = _v0.a;
			var partialScore = _v0.b;
			var score = _v0.c;
			if (!simplifiedList.b) {
				return (partialScore >= 5) ? ((score + partialScore) - 2) : score;
			} else {
				var head = simplifiedList.a;
				var tail = simplifiedList.b;
				if (_Utils_eq(last, head)) {
					var $temp$simplifiedList = tail,
						$temp$_v0 = _Utils_Tuple3(last, partialScore + 1, score);
					simplifiedList = $temp$simplifiedList;
					_v0 = $temp$_v0;
					continue rule1Score_;
				} else {
					if (partialScore >= 5) {
						var $temp$simplifiedList = tail,
							$temp$_v0 = _Utils_Tuple3(head, 0, (score + partialScore) - 2);
						simplifiedList = $temp$simplifiedList;
						_v0 = $temp$_v0;
						continue rule1Score_;
					} else {
						var $temp$simplifiedList = tail,
							$temp$_v0 = _Utils_Tuple3(head, 0, score);
						simplifiedList = $temp$simplifiedList;
						_v0 = $temp$_v0;
						continue rule1Score_;
					}
				}
			}
		}
	});
var $elm$core$List$sum = function (numbers) {
	return A3($elm$core$List$foldl, $elm$core$Basics$add, 0, numbers);
};
var $pablohirafuji$elm_qrcode$QRCode$Matrix$rule1Score = A2(
	$elm$core$Basics$composeR,
	$elm$core$List$map(
		function (a) {
			return A2(
				$pablohirafuji$elm_qrcode$QRCode$Matrix$rule1Score_,
				a,
				_Utils_Tuple3(false, 0, 0));
		}),
	$elm$core$List$sum);
var $pablohirafuji$elm_qrcode$QRCode$Matrix$rule2Score_ = F4(
	function (row1, row2, maybeLast, score) {
		rule2Score_:
		while (true) {
			if (!row1.b) {
				return score;
			} else {
				var head = row1.a;
				var tail = row1.b;
				if (!row2.b) {
					return score;
				} else {
					var head2 = row2.a;
					var tail2 = row2.b;
					if (_Utils_eq(head, head2)) {
						if (_Utils_eq(
							$elm$core$Maybe$Just(head),
							maybeLast)) {
							var $temp$row1 = tail,
								$temp$row2 = tail2,
								$temp$maybeLast = $elm$core$Maybe$Just(head),
								$temp$score = score + 3;
							row1 = $temp$row1;
							row2 = $temp$row2;
							maybeLast = $temp$maybeLast;
							score = $temp$score;
							continue rule2Score_;
						} else {
							var $temp$row1 = tail,
								$temp$row2 = tail2,
								$temp$maybeLast = $elm$core$Maybe$Just(head),
								$temp$score = score;
							row1 = $temp$row1;
							row2 = $temp$row2;
							maybeLast = $temp$maybeLast;
							score = $temp$score;
							continue rule2Score_;
						}
					} else {
						var $temp$row1 = tail,
							$temp$row2 = tail2,
							$temp$maybeLast = $elm$core$Maybe$Nothing,
							$temp$score = score;
						row1 = $temp$row1;
						row2 = $temp$row2;
						maybeLast = $temp$maybeLast;
						score = $temp$score;
						continue rule2Score_;
					}
				}
			}
		}
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$rule2Score = F2(
	function (list, score) {
		rule2Score:
		while (true) {
			if (list.b && list.b.b) {
				var head1 = list.a;
				var _v1 = list.b;
				var head2 = _v1.a;
				var tail = _v1.b;
				var $temp$list = tail,
					$temp$score = score + A4($pablohirafuji$elm_qrcode$QRCode$Matrix$rule2Score_, head1, head2, $elm$core$Maybe$Nothing, 0);
				list = $temp$list;
				score = $temp$score;
				continue rule2Score;
			} else {
				return score;
			}
		}
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$rule3Score_ = F2(
	function (simplifiedList, score) {
		rule3Score_:
		while (true) {
			_v0$3:
			while (true) {
				if (!simplifiedList.b) {
					return score;
				} else {
					if (!simplifiedList.a) {
						if (((((((((((((((((((simplifiedList.b.b && (!simplifiedList.b.a)) && simplifiedList.b.b.b) && (!simplifiedList.b.b.a)) && simplifiedList.b.b.b.b) && (!simplifiedList.b.b.b.a)) && simplifiedList.b.b.b.b.b) && simplifiedList.b.b.b.b.a) && simplifiedList.b.b.b.b.b.b) && (!simplifiedList.b.b.b.b.b.a)) && simplifiedList.b.b.b.b.b.b.b) && simplifiedList.b.b.b.b.b.b.a) && simplifiedList.b.b.b.b.b.b.b.b) && simplifiedList.b.b.b.b.b.b.b.a) && simplifiedList.b.b.b.b.b.b.b.b.b) && simplifiedList.b.b.b.b.b.b.b.b.a) && simplifiedList.b.b.b.b.b.b.b.b.b.b) && (!simplifiedList.b.b.b.b.b.b.b.b.b.a)) && simplifiedList.b.b.b.b.b.b.b.b.b.b.b) && simplifiedList.b.b.b.b.b.b.b.b.b.b.a) {
							var _v1 = simplifiedList.b;
							var _v2 = _v1.b;
							var _v3 = _v2.b;
							var _v4 = _v3.b;
							var _v5 = _v4.b;
							var _v6 = _v5.b;
							var _v7 = _v6.b;
							var _v8 = _v7.b;
							var _v9 = _v8.b;
							var _v10 = _v9.b;
							var tail = _v10.b;
							var $temp$simplifiedList = tail,
								$temp$score = score + 40;
							simplifiedList = $temp$simplifiedList;
							score = $temp$score;
							continue rule3Score_;
						} else {
							break _v0$3;
						}
					} else {
						if (((((((((((((((((((simplifiedList.b.b && (!simplifiedList.b.a)) && simplifiedList.b.b.b) && simplifiedList.b.b.a) && simplifiedList.b.b.b.b) && simplifiedList.b.b.b.a) && simplifiedList.b.b.b.b.b) && simplifiedList.b.b.b.b.a) && simplifiedList.b.b.b.b.b.b) && (!simplifiedList.b.b.b.b.b.a)) && simplifiedList.b.b.b.b.b.b.b) && simplifiedList.b.b.b.b.b.b.a) && simplifiedList.b.b.b.b.b.b.b.b) && (!simplifiedList.b.b.b.b.b.b.b.a)) && simplifiedList.b.b.b.b.b.b.b.b.b) && (!simplifiedList.b.b.b.b.b.b.b.b.a)) && simplifiedList.b.b.b.b.b.b.b.b.b.b) && (!simplifiedList.b.b.b.b.b.b.b.b.b.a)) && simplifiedList.b.b.b.b.b.b.b.b.b.b.b) && (!simplifiedList.b.b.b.b.b.b.b.b.b.b.a)) {
							var _v11 = simplifiedList.b;
							var _v12 = _v11.b;
							var _v13 = _v12.b;
							var _v14 = _v13.b;
							var _v15 = _v14.b;
							var _v16 = _v15.b;
							var _v17 = _v16.b;
							var _v18 = _v17.b;
							var _v19 = _v18.b;
							var _v20 = _v19.b;
							var tail = _v20.b;
							var $temp$simplifiedList = tail,
								$temp$score = score + 40;
							simplifiedList = $temp$simplifiedList;
							score = $temp$score;
							continue rule3Score_;
						} else {
							break _v0$3;
						}
					}
				}
			}
			var head = simplifiedList.a;
			var tail = simplifiedList.b;
			var $temp$simplifiedList = tail,
				$temp$score = score;
			simplifiedList = $temp$simplifiedList;
			score = $temp$score;
			continue rule3Score_;
		}
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$rule3Score = A2($elm$core$List$foldl, $pablohirafuji$elm_qrcode$QRCode$Matrix$rule3Score_, 0);
var $pablohirafuji$elm_qrcode$QRCode$Matrix$rule4Score = F2(
	function (size, simplifiedList) {
		var moduleCount = size * size;
		var darkCount = $elm$core$List$length(
			A2($elm$core$List$filter, $elm$core$Basics$identity, simplifiedList));
		var darkPerc = $elm$core$Basics$round((100 * darkCount) / moduleCount);
		var remOf5 = darkPerc % 5;
		var nextMult5 = $elm$core$Basics$round(
			$elm$core$Basics$abs((darkPerc + (5 - remOf5)) - 50) / 5);
		var prevMult5 = $elm$core$Basics$round(
			$elm$core$Basics$abs((darkPerc - remOf5) - 50) / 5);
		return A2($elm$core$Basics$min, prevMult5, nextMult5) * 10;
	});
var $pablohirafuji$elm_qrcode$QRCode$Helpers$transpose = function (ll) {
	transpose:
	while (true) {
		if (!ll.b) {
			return _List_Nil;
		} else {
			if (!ll.a.b) {
				var xss = ll.b;
				var $temp$ll = xss;
				ll = $temp$ll;
				continue transpose;
			} else {
				var _v1 = ll.a;
				var x = _v1.a;
				var xs = _v1.b;
				var xss = ll.b;
				var tails = A2($elm$core$List$filterMap, $elm$core$List$tail, xss);
				var heads = A2($elm$core$List$filterMap, $elm$core$List$head, xss);
				return A2(
					$elm$core$List$cons,
					A2($elm$core$List$cons, x, heads),
					$pablohirafuji$elm_qrcode$QRCode$Helpers$transpose(
						A2($elm$core$List$cons, xs, tails)));
			}
		}
	}
};
var $pablohirafuji$elm_qrcode$QRCode$Matrix$getMaskScore = F2(
	function (size, matrix) {
		var list = A2(
			$elm$core$List$map,
			$pablohirafuji$elm_qrcode$QRCode$Matrix$isDarkModule,
			$elm$core$Array$toList(matrix));
		var rowList = A3($pablohirafuji$elm_qrcode$QRCode$Matrix$breakList, size, list, _List_Nil);
		var transposedRowList = $pablohirafuji$elm_qrcode$QRCode$Helpers$transpose(rowList);
		return function (b) {
			return _Utils_Tuple2(rowList, b);
		}(
			A2($pablohirafuji$elm_qrcode$QRCode$Matrix$rule4Score, size, list) + ($pablohirafuji$elm_qrcode$QRCode$Matrix$rule3Score(transposedRowList) + ($pablohirafuji$elm_qrcode$QRCode$Matrix$rule3Score(rowList) + (A2($pablohirafuji$elm_qrcode$QRCode$Matrix$rule2Score, rowList, 0) + ($pablohirafuji$elm_qrcode$QRCode$Matrix$rule1Score(transposedRowList) + $pablohirafuji$elm_qrcode$QRCode$Matrix$rule1Score(rowList))))));
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$ecLevelToInt = function (ecLevel) {
	switch (ecLevel.$) {
		case 'L':
			return 1;
		case 'M':
			return 0;
		case 'Q':
			return 3;
		default:
			return 2;
	}
};
var $pablohirafuji$elm_qrcode$QRCode$Matrix$getBCHDigit = function (_int) {
	var helper = F2(
		function (digit, int_) {
			helper:
			while (true) {
				if (!(!int_)) {
					var $temp$digit = digit + 1,
						$temp$int_ = int_ >>> 1;
					digit = $temp$digit;
					int_ = $temp$int_;
					continue helper;
				} else {
					return digit;
				}
			}
		});
	return A2(helper, 0, _int);
};
var $pablohirafuji$elm_qrcode$QRCode$Matrix$maskToInt = function (mask) {
	switch (mask.$) {
		case 'Pattern0':
			return 0;
		case 'Pattern1':
			return 1;
		case 'Pattern2':
			return 2;
		case 'Pattern3':
			return 3;
		case 'Pattern4':
			return 4;
		case 'Pattern5':
			return 5;
		case 'Pattern6':
			return 6;
		default:
			return 7;
	}
};
var $pablohirafuji$elm_qrcode$QRCode$Matrix$encodeFormatInfo = F2(
	function (ecLevel, mask) {
		var g15Mask = 21522;
		var g15Int = 1335;
		var g15Digit = $pablohirafuji$elm_qrcode$QRCode$Matrix$getBCHDigit(g15Int);
		var formatInfoInt = $pablohirafuji$elm_qrcode$QRCode$Matrix$maskToInt(mask) | ($pablohirafuji$elm_qrcode$QRCode$Matrix$ecLevelToInt(ecLevel) << 3);
		var helper = function (d_) {
			helper:
			while (true) {
				if (($pablohirafuji$elm_qrcode$QRCode$Matrix$getBCHDigit(d_) - g15Digit) >= 0) {
					var $temp$d_ = d_ ^ (g15Int << ($pablohirafuji$elm_qrcode$QRCode$Matrix$getBCHDigit(d_) - g15Digit));
					d_ = $temp$d_;
					continue helper;
				} else {
					return g15Mask ^ (d_ | (formatInfoInt << 10));
				}
			}
		};
		var d = formatInfoInt << 10;
		return helper(d);
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$formatInfoHorizontal = F2(
	function (size, count) {
		return (count < 8) ? _Utils_Tuple2(8, (size - count) - 1) : ((count < 9) ? _Utils_Tuple2(8, 15 - count) : _Utils_Tuple2(8, (15 - count) - 1));
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$formatInfoVertical = F2(
	function (size, count) {
		return (count < 6) ? _Utils_Tuple2(count, 8) : ((count < 8) ? _Utils_Tuple2(count + 1, 8) : _Utils_Tuple2((size - 15) + count, 8));
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$setFormatModule = F4(
	function (size, isBlack, row, col) {
		return A2(
			$elm$core$Array$set,
			A3($pablohirafuji$elm_qrcode$QRCode$Matrix$getIndex, size, row, col),
			$elm$core$Maybe$Just(
				_Utils_Tuple2(true, isBlack)));
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$setFormatInfo_ = F4(
	function (size, isBlackFn, count, matrix) {
		setFormatInfo_:
		while (true) {
			if (count < 15) {
				var isBlack = isBlackFn(count);
				var _v0 = A2($pablohirafuji$elm_qrcode$QRCode$Matrix$formatInfoVertical, size, count);
				var x2 = _v0.a;
				var y2 = _v0.b;
				var _v1 = A2($pablohirafuji$elm_qrcode$QRCode$Matrix$formatInfoHorizontal, size, count);
				var x1 = _v1.a;
				var y1 = _v1.b;
				var $temp$size = size,
					$temp$isBlackFn = isBlackFn,
					$temp$count = count + 1,
					$temp$matrix = A5(
					$pablohirafuji$elm_qrcode$QRCode$Matrix$setFormatModule,
					size,
					isBlack,
					x2,
					y2,
					A5($pablohirafuji$elm_qrcode$QRCode$Matrix$setFormatModule, size, isBlack, x1, y1, matrix));
				size = $temp$size;
				isBlackFn = $temp$isBlackFn;
				count = $temp$count;
				matrix = $temp$matrix;
				continue setFormatInfo_;
			} else {
				return matrix;
			}
		}
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$setFormatInfo = F4(
	function (ecLevel, size, mask, matrix) {
		var isBlack = F2(
			function (bits_, count) {
				return (1 & (bits_ >> count)) === 1;
			});
		var bits = A2($pablohirafuji$elm_qrcode$QRCode$Matrix$encodeFormatInfo, ecLevel, mask);
		return A4(
			$pablohirafuji$elm_qrcode$QRCode$Matrix$setFormatInfo_,
			size,
			isBlack(bits),
			0,
			matrix);
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$getBestMask_ = F5(
	function (ecLevel, size, matrix, mask, _v0) {
		var minSMatrix = _v0.a;
		var minScore = _v0.b;
		var maskedMatrix = A4(
			$pablohirafuji$elm_qrcode$QRCode$Matrix$setFormatInfo,
			ecLevel,
			size,
			mask,
			A3($pablohirafuji$elm_qrcode$QRCode$Matrix$applyMask, size, mask, matrix));
		var _v1 = A2($pablohirafuji$elm_qrcode$QRCode$Matrix$getMaskScore, size, maskedMatrix);
		var maskSMatrix = _v1.a;
		var maskScore = _v1.b;
		return ((_Utils_cmp(minScore, maskScore) < 0) && (!_Utils_eq(minScore, -1))) ? _Utils_Tuple2(minSMatrix, minScore) : _Utils_Tuple2(maskSMatrix, maskScore);
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern0 = {$: 'Pattern0'};
var $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern1 = {$: 'Pattern1'};
var $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern2 = {$: 'Pattern2'};
var $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern3 = {$: 'Pattern3'};
var $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern4 = {$: 'Pattern4'};
var $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern5 = {$: 'Pattern5'};
var $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern6 = {$: 'Pattern6'};
var $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern7 = {$: 'Pattern7'};
var $pablohirafuji$elm_qrcode$QRCode$Matrix$patternList = _List_fromArray(
	[$pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern0, $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern1, $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern2, $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern3, $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern4, $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern5, $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern6, $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern7]);
var $pablohirafuji$elm_qrcode$QRCode$Matrix$getBestMask = F3(
	function (ecLevel, size, matrix) {
		return A3(
			$elm$core$List$foldl,
			A3($pablohirafuji$elm_qrcode$QRCode$Matrix$getBestMask_, ecLevel, size, matrix),
			_Utils_Tuple2(_List_Nil, -1),
			$pablohirafuji$elm_qrcode$QRCode$Matrix$patternList).a;
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$reserveFormatInfo = F2(
	function (size, matrix) {
		return A4(
			$pablohirafuji$elm_qrcode$QRCode$Matrix$setFormatInfo_,
			size,
			$elm$core$Basics$always(true),
			0,
			matrix);
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$encodeVersionInfo = function (version) {
	var g18Int = 7973;
	var g18Digit = $pablohirafuji$elm_qrcode$QRCode$Matrix$getBCHDigit(g18Int);
	var helper = function (d_) {
		helper:
		while (true) {
			if (($pablohirafuji$elm_qrcode$QRCode$Matrix$getBCHDigit(d_) - g18Digit) >= 0) {
				var $temp$d_ = d_ ^ (g18Int << ($pablohirafuji$elm_qrcode$QRCode$Matrix$getBCHDigit(d_) - g18Digit));
				d_ = $temp$d_;
				continue helper;
			} else {
				return d_ | (version << 12);
			}
		}
	};
	var d = version << 12;
	return helper(d);
};
var $pablohirafuji$elm_qrcode$QRCode$Matrix$setVersionModule = F3(
	function (size, isBlack, _v0) {
		var row = _v0.a;
		var col = _v0.b;
		return A2(
			$elm$core$Array$set,
			A3($pablohirafuji$elm_qrcode$QRCode$Matrix$getIndex, size, row, col),
			$elm$core$Maybe$Just(
				_Utils_Tuple2(true, isBlack)));
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$setVersionInfo_ = F4(
	function (size, isBlackFn, count, matrix) {
		setVersionInfo_:
		while (true) {
			if (count < 18) {
				var topRight = _Utils_Tuple2(
					$elm$core$Basics$floor(count / 3),
					((A2($elm$core$Basics$modBy, 3, count) + size) - 8) - 3);
				var isBlack = isBlackFn(count);
				var bottomLeft = _Utils_Tuple2(
					((A2($elm$core$Basics$modBy, 3, count) + size) - 8) - 3,
					$elm$core$Basics$floor(count / 3));
				var $temp$size = size,
					$temp$isBlackFn = isBlackFn,
					$temp$count = count + 1,
					$temp$matrix = A4(
					$pablohirafuji$elm_qrcode$QRCode$Matrix$setVersionModule,
					size,
					isBlack,
					bottomLeft,
					A4($pablohirafuji$elm_qrcode$QRCode$Matrix$setVersionModule, size, isBlack, topRight, matrix));
				size = $temp$size;
				isBlackFn = $temp$isBlackFn;
				count = $temp$count;
				matrix = $temp$matrix;
				continue setVersionInfo_;
			} else {
				return matrix;
			}
		}
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$setVersionInfo = F3(
	function (version, size, matrix) {
		if (version >= 7) {
			var isBlack = F2(
				function (bits_, count) {
					return (1 & (bits_ >> count)) === 1;
				});
			var bits = $pablohirafuji$elm_qrcode$QRCode$Matrix$encodeVersionInfo(version);
			return A4(
				$pablohirafuji$elm_qrcode$QRCode$Matrix$setVersionInfo_,
				size,
				isBlack(bits),
				0,
				matrix);
		} else {
			return matrix;
		}
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$timingColor = F2(
	function (row, col) {
		return (!A2($elm$core$Basics$modBy, 2, row + col)) ? $elm$core$Maybe$Just(
			_Utils_Tuple2(true, true)) : $elm$core$Maybe$Just(
			_Utils_Tuple2(true, false));
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$setTiming = F3(
	function (size, row, col) {
		return A2(
			$elm$core$Array$set,
			A3($pablohirafuji$elm_qrcode$QRCode$Matrix$getIndex, size, row, col),
			A2($pablohirafuji$elm_qrcode$QRCode$Matrix$timingColor, row, col));
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$timingPattern = F2(
	function (size, matrix) {
		var range = A2($elm$core$List$range, 8, size - 9);
		return A3(
			$elm$core$List$foldl,
			function (b) {
				return A3($pablohirafuji$elm_qrcode$QRCode$Matrix$setTiming, size, b, 6);
			},
			A3(
				$elm$core$List$foldl,
				A2($pablohirafuji$elm_qrcode$QRCode$Matrix$setTiming, size, 6),
				matrix,
				range),
			range);
	});
var $pablohirafuji$elm_qrcode$QRCode$Matrix$apply = function (_v0) {
	var ecLevel = _v0.a.ecLevel;
	var groupInfo = _v0.a.groupInfo;
	var bytes = _v0.b;
	var version = groupInfo.version;
	var size = ((version - 1) * 4) + 21;
	return A2(
		$elm$core$Result$map,
		A2($pablohirafuji$elm_qrcode$QRCode$Matrix$getBestMask, ecLevel, size),
		A2(
			$elm$core$Result$map,
			A2($pablohirafuji$elm_qrcode$QRCode$Matrix$addData, size, bytes),
			A3(
				$pablohirafuji$elm_qrcode$QRCode$Matrix$alignmentPattern,
				version,
				size,
				A2(
					$pablohirafuji$elm_qrcode$QRCode$Matrix$timingPattern,
					size,
					A3(
						$pablohirafuji$elm_qrcode$QRCode$Matrix$darkModule,
						version,
						size,
						A3(
							$pablohirafuji$elm_qrcode$QRCode$Matrix$setVersionInfo,
							version,
							size,
							A2(
								$pablohirafuji$elm_qrcode$QRCode$Matrix$reserveFormatInfo,
								size,
								A4(
									$pablohirafuji$elm_qrcode$QRCode$Matrix$finderPattern,
									size,
									-1,
									size - 8,
									A4(
										$pablohirafuji$elm_qrcode$QRCode$Matrix$finderPattern,
										size,
										size - 8,
										-1,
										A4(
											$pablohirafuji$elm_qrcode$QRCode$Matrix$finderPattern,
											size,
											-1,
											-1,
											A2(
												$elm$core$Array$initialize,
												size * size,
												$elm$core$Basics$always($elm$core$Maybe$Nothing))))))))))));
};
var $pablohirafuji$elm_qrcode$QRCode$ECLevel$H = {$: 'H'};
var $pablohirafuji$elm_qrcode$QRCode$ECLevel$L = {$: 'L'};
var $pablohirafuji$elm_qrcode$QRCode$ECLevel$M = {$: 'M'};
var $pablohirafuji$elm_qrcode$QRCode$ECLevel$Q = {$: 'Q'};
var $pablohirafuji$elm_qrcode$QRCode$convertEC = function (ec) {
	switch (ec.$) {
		case 'Low':
			return $pablohirafuji$elm_qrcode$QRCode$ECLevel$L;
		case 'Medium':
			return $pablohirafuji$elm_qrcode$QRCode$ECLevel$M;
		case 'Quartile':
			return $pablohirafuji$elm_qrcode$QRCode$ECLevel$Q;
		default:
			return $pablohirafuji$elm_qrcode$QRCode$ECLevel$H;
	}
};
var $pablohirafuji$elm_qrcode$QRCode$AlignmentPatternNotFound = {$: 'AlignmentPatternNotFound'};
var $pablohirafuji$elm_qrcode$QRCode$InputLengthOverflow = {$: 'InputLengthOverflow'};
var $pablohirafuji$elm_qrcode$QRCode$InvalidAlphanumericChar = {$: 'InvalidAlphanumericChar'};
var $pablohirafuji$elm_qrcode$QRCode$InvalidNumericChar = {$: 'InvalidNumericChar'};
var $pablohirafuji$elm_qrcode$QRCode$InvalidUTF8Char = {$: 'InvalidUTF8Char'};
var $pablohirafuji$elm_qrcode$QRCode$LogTableException = function (a) {
	return {$: 'LogTableException', a: a};
};
var $pablohirafuji$elm_qrcode$QRCode$PolynomialModException = {$: 'PolynomialModException'};
var $pablohirafuji$elm_qrcode$QRCode$PolynomialMultiplyException = {$: 'PolynomialMultiplyException'};
var $pablohirafuji$elm_qrcode$QRCode$convertError = function (e) {
	switch (e.$) {
		case 'AlignmentPatternNotFound':
			return $pablohirafuji$elm_qrcode$QRCode$AlignmentPatternNotFound;
		case 'InvalidNumericChar':
			return $pablohirafuji$elm_qrcode$QRCode$InvalidNumericChar;
		case 'InvalidAlphanumericChar':
			return $pablohirafuji$elm_qrcode$QRCode$InvalidAlphanumericChar;
		case 'InvalidUTF8Char':
			return $pablohirafuji$elm_qrcode$QRCode$InvalidUTF8Char;
		case 'LogTableException':
			var n = e.a;
			return $pablohirafuji$elm_qrcode$QRCode$LogTableException(n);
		case 'PolynomialMultiplyException':
			return $pablohirafuji$elm_qrcode$QRCode$PolynomialMultiplyException;
		case 'PolynomialModException':
			return $pablohirafuji$elm_qrcode$QRCode$PolynomialModException;
		default:
			return $pablohirafuji$elm_qrcode$QRCode$InputLengthOverflow;
	}
};
var $pablohirafuji$elm_qrcode$QRCode$Encode$firstFillerByte = 236;
var $pablohirafuji$elm_qrcode$QRCode$Encode$secondFillerByte = 17;
var $pablohirafuji$elm_qrcode$QRCode$Encode$addFiller = F2(
	function (capacity, bytes) {
		var fillerLength = ((capacity / 8) | 0) - $elm$core$List$length(bytes);
		var ns = $elm$core$List$concat(
			A2(
				$elm$core$List$repeat,
				(fillerLength / 2) | 0,
				_List_fromArray(
					[$pablohirafuji$elm_qrcode$QRCode$Encode$firstFillerByte, $pablohirafuji$elm_qrcode$QRCode$Encode$secondFillerByte])));
		return (!A2($elm$core$Basics$modBy, 2, fillerLength)) ? _Utils_ap(bytes, ns) : _Utils_ap(
			bytes,
			_Utils_ap(
				ns,
				_List_fromArray(
					[$pablohirafuji$elm_qrcode$QRCode$Encode$firstFillerByte])));
	});
var $pablohirafuji$elm_qrcode$QRCode$Encode$addTerminator = F3(
	function (capacity, bitsCount, bits) {
		return _Utils_ap(
			bits,
			_List_fromArray(
				[
					_Utils_Tuple2(
					0,
					A2($elm$core$Basics$min, 4, capacity - bitsCount))
				]));
	});
var $pablohirafuji$elm_qrcode$QRCode$Encode$bitsToBytes3 = function (_v0) {
	bitsToBytes3:
	while (true) {
		var _v1 = _v0.a;
		var bits = _v1.a;
		var length = _v1.b;
		var bytes = _v0.b;
		if (length >= 8) {
			var remLength = length - 8;
			var remBits = bits & ((1 << remLength) - 1);
			var _byte = bits >> remLength;
			var $temp$_v0 = _Utils_Tuple2(
				_Utils_Tuple2(remBits, remLength),
				A2($elm$core$List$cons, _byte, bytes));
			_v0 = $temp$_v0;
			continue bitsToBytes3;
		} else {
			return _Utils_Tuple2(
				_Utils_Tuple2(bits, length),
				bytes);
		}
	}
};
var $pablohirafuji$elm_qrcode$QRCode$Encode$bitsToBytes2 = F2(
	function (_v0, _v1) {
		var curBits = _v0.a;
		var curLength = _v0.b;
		var _v2 = _v1.a;
		var remBits = _v2.a;
		var remLength = _v2.b;
		var bytes = _v1.b;
		var lengthSum = curLength + remLength;
		var bitsSum = curBits | (remBits << curLength);
		return $pablohirafuji$elm_qrcode$QRCode$Encode$bitsToBytes3(
			_Utils_Tuple2(
				_Utils_Tuple2(bitsSum, lengthSum),
				bytes));
	});
var $pablohirafuji$elm_qrcode$QRCode$Encode$bitsToBytes1 = F2(
	function (bits, _v0) {
		bitsToBytes1:
		while (true) {
			var _v1 = _v0.a;
			var remBits = _v1.a;
			var remLength = _v1.b;
			var bytes = _v0.b;
			if (bits.b) {
				var head = bits.a;
				var tail = bits.b;
				var $temp$bits = tail,
					$temp$_v0 = A2(
					$pablohirafuji$elm_qrcode$QRCode$Encode$bitsToBytes2,
					head,
					_Utils_Tuple2(
						_Utils_Tuple2(remBits, remLength),
						bytes));
				bits = $temp$bits;
				_v0 = $temp$_v0;
				continue bitsToBytes1;
			} else {
				return (!remLength) ? $elm$core$List$reverse(bytes) : $elm$core$List$reverse(
					A2($elm$core$List$cons, remBits << (8 - remLength), bytes));
			}
		}
	});
var $pablohirafuji$elm_qrcode$QRCode$Encode$bitsToBytes = function (bits) {
	return A2(
		$pablohirafuji$elm_qrcode$QRCode$Encode$bitsToBytes1,
		bits,
		_Utils_Tuple2(
			_Utils_Tuple2(0, 0),
			_List_Nil));
};
var $pablohirafuji$elm_qrcode$QRCode$Encode$UTF8 = {$: 'UTF8'};
var $pablohirafuji$elm_qrcode$QRCode$Encode$charCountIndicatorLength = F2(
	function (mode, version) {
		if (version <= 9) {
			switch (mode.$) {
				case 'Numeric':
					return 10;
				case 'Alphanumeric':
					return 9;
				case 'Byte':
					return 8;
				default:
					return 8;
			}
		} else {
			if (version <= 26) {
				switch (mode.$) {
					case 'Numeric':
						return 12;
					case 'Alphanumeric':
						return 11;
					case 'Byte':
						return 16;
					default:
						return 16;
				}
			} else {
				switch (mode.$) {
					case 'Numeric':
						return 14;
					case 'Alphanumeric':
						return 13;
					case 'Byte':
						return 16;
					default:
						return 16;
				}
			}
		}
	});
var $pablohirafuji$elm_qrcode$QRCode$Encode$charCountIndicator = F2(
	function (_v0, bits) {
		var groupInfo = _v0.groupInfo;
		var inputStr = _v0.inputStr;
		var mode = _v0.mode;
		var length = A2($pablohirafuji$elm_qrcode$QRCode$Encode$charCountIndicatorLength, mode, groupInfo.version);
		var charCount = _Utils_eq(mode, $pablohirafuji$elm_qrcode$QRCode$Encode$UTF8) ? $elm$core$List$length(bits) : $elm$core$String$length(inputStr);
		return _Utils_Tuple2(charCount, length);
	});
var $pablohirafuji$elm_qrcode$QRCode$Encode$modeIndicator = function (mode) {
	switch (mode.$) {
		case 'Numeric':
			return 1;
		case 'Alphanumeric':
			return 2;
		case 'Byte':
			return 4;
		default:
			return 4;
	}
};
var $pablohirafuji$elm_qrcode$QRCode$Encode$addInfoAndFinalBits = function (_v0) {
	var bits = _v0.a;
	var model = _v0.b;
	return _Utils_Tuple2(
		model,
		A2(
			$pablohirafuji$elm_qrcode$QRCode$Encode$addFiller,
			model.groupInfo.capacity,
			$pablohirafuji$elm_qrcode$QRCode$Encode$bitsToBytes(
				A3(
					$pablohirafuji$elm_qrcode$QRCode$Encode$addTerminator,
					model.groupInfo.capacity,
					model.bitsCount,
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(
							$pablohirafuji$elm_qrcode$QRCode$Encode$modeIndicator(model.mode),
							4),
						A2(
							$elm$core$List$cons,
							A2($pablohirafuji$elm_qrcode$QRCode$Encode$charCountIndicator, model, bits),
							bits))))));
};
var $pablohirafuji$elm_qrcode$QRCode$Encode$concatTranspose = function (_v0) {
	var model = _v0.a;
	var dataBlocks = _v0.b;
	var ecBlocks = _v0.c;
	return _Utils_Tuple2(
		model,
		$elm$core$List$concat(
			_Utils_ap(
				$pablohirafuji$elm_qrcode$QRCode$Helpers$transpose(dataBlocks),
				$pablohirafuji$elm_qrcode$QRCode$Helpers$transpose(ecBlocks))));
};
var $elm_community$list_extra$List$Extra$greedyGroupsOfWithStep = F3(
	function (size, step, xs) {
		var xs_ = A2($elm$core$List$drop, step, xs);
		var okayXs = $elm$core$List$length(xs) > 0;
		var okayArgs = (size > 0) && (step > 0);
		return (okayArgs && okayXs) ? A2(
			$elm$core$List$cons,
			A2($elm$core$List$take, size, xs),
			A3($elm_community$list_extra$List$Extra$greedyGroupsOfWithStep, size, step, xs_)) : _List_Nil;
	});
var $elm_community$list_extra$List$Extra$greedyGroupsOf = F2(
	function (size, xs) {
		return A3($elm_community$list_extra$List$Extra$greedyGroupsOfWithStep, size, size, xs);
	});
var $elm$core$Result$map2 = F3(
	function (func, ra, rb) {
		if (ra.$ === 'Err') {
			var x = ra.a;
			return $elm$core$Result$Err(x);
		} else {
			var a = ra.a;
			if (rb.$ === 'Err') {
				var x = rb.a;
				return $elm$core$Result$Err(x);
			} else {
				var b = rb.a;
				return $elm$core$Result$Ok(
					A2(func, a, b));
			}
		}
	});
var $pablohirafuji$elm_qrcode$QRCode$Error$InvalidAlphanumericChar = {$: 'InvalidAlphanumericChar'};
var $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$alphanumericCodes = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			_Utils_chr('0'),
			0),
			_Utils_Tuple2(
			_Utils_chr('1'),
			1),
			_Utils_Tuple2(
			_Utils_chr('2'),
			2),
			_Utils_Tuple2(
			_Utils_chr('3'),
			3),
			_Utils_Tuple2(
			_Utils_chr('4'),
			4),
			_Utils_Tuple2(
			_Utils_chr('5'),
			5),
			_Utils_Tuple2(
			_Utils_chr('6'),
			6),
			_Utils_Tuple2(
			_Utils_chr('7'),
			7),
			_Utils_Tuple2(
			_Utils_chr('8'),
			8),
			_Utils_Tuple2(
			_Utils_chr('9'),
			9),
			_Utils_Tuple2(
			_Utils_chr('A'),
			10),
			_Utils_Tuple2(
			_Utils_chr('B'),
			11),
			_Utils_Tuple2(
			_Utils_chr('C'),
			12),
			_Utils_Tuple2(
			_Utils_chr('D'),
			13),
			_Utils_Tuple2(
			_Utils_chr('E'),
			14),
			_Utils_Tuple2(
			_Utils_chr('F'),
			15),
			_Utils_Tuple2(
			_Utils_chr('G'),
			16),
			_Utils_Tuple2(
			_Utils_chr('H'),
			17),
			_Utils_Tuple2(
			_Utils_chr('I'),
			18),
			_Utils_Tuple2(
			_Utils_chr('J'),
			19),
			_Utils_Tuple2(
			_Utils_chr('K'),
			20),
			_Utils_Tuple2(
			_Utils_chr('L'),
			21),
			_Utils_Tuple2(
			_Utils_chr('M'),
			22),
			_Utils_Tuple2(
			_Utils_chr('N'),
			23),
			_Utils_Tuple2(
			_Utils_chr('O'),
			24),
			_Utils_Tuple2(
			_Utils_chr('P'),
			25),
			_Utils_Tuple2(
			_Utils_chr('Q'),
			26),
			_Utils_Tuple2(
			_Utils_chr('R'),
			27),
			_Utils_Tuple2(
			_Utils_chr('S'),
			28),
			_Utils_Tuple2(
			_Utils_chr('T'),
			29),
			_Utils_Tuple2(
			_Utils_chr('U'),
			30),
			_Utils_Tuple2(
			_Utils_chr('V'),
			31),
			_Utils_Tuple2(
			_Utils_chr('W'),
			32),
			_Utils_Tuple2(
			_Utils_chr('X'),
			33),
			_Utils_Tuple2(
			_Utils_chr('Y'),
			34),
			_Utils_Tuple2(
			_Utils_chr('Z'),
			35),
			_Utils_Tuple2(
			_Utils_chr(' '),
			36),
			_Utils_Tuple2(
			_Utils_chr('$'),
			37),
			_Utils_Tuple2(
			_Utils_chr('%'),
			38),
			_Utils_Tuple2(
			_Utils_chr('*'),
			39),
			_Utils_Tuple2(
			_Utils_chr('+'),
			40),
			_Utils_Tuple2(
			_Utils_chr('-'),
			41),
			_Utils_Tuple2(
			_Utils_chr('.'),
			42),
			_Utils_Tuple2(
			_Utils_chr('/'),
			43),
			_Utils_Tuple2(
			_Utils_chr(':'),
			44)
		]));
var $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$toAlphanumericCode = function (_char) {
	return A2(
		$elm$core$Result$fromMaybe,
		$pablohirafuji$elm_qrcode$QRCode$Error$InvalidAlphanumericChar,
		A2($elm$core$Dict$get, _char, $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$alphanumericCodes));
};
var $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$toBinary = function (chars) {
	_v0$2:
	while (true) {
		if (chars.b) {
			if (chars.b.b) {
				if (!chars.b.b.b) {
					var firstChar = chars.a;
					var _v1 = chars.b;
					var secondChar = _v1.a;
					return A3(
						$elm$core$Result$map2,
						F2(
							function (firstCode, secondCode) {
								return _Utils_Tuple2((firstCode * 45) + secondCode, 11);
							}),
						$pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$toAlphanumericCode(firstChar),
						$pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$toAlphanumericCode(secondChar));
				} else {
					break _v0$2;
				}
			} else {
				var _char = chars.a;
				return A2(
					$elm$core$Result$map,
					function (a) {
						return _Utils_Tuple2(a, 6);
					},
					$pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$toAlphanumericCode(_char));
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Result$Err($pablohirafuji$elm_qrcode$QRCode$Error$InvalidAlphanumericChar);
};
var $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$encode = function (str) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Result$map2($elm$core$List$cons),
		$elm$core$Result$Ok(_List_Nil),
		A2(
			$elm$core$List$map,
			$pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$toBinary,
			A2(
				$elm_community$list_extra$List$Extra$greedyGroupsOf,
				2,
				$elm$core$String$toList(str))));
};
var $pablohirafuji$elm_qrcode$QRCode$Encode$Byte$encode = function (str) {
	return $elm$core$Result$Ok(
		A2(
			$elm$core$List$map,
			function (a) {
				return _Utils_Tuple2(
					$elm$core$Char$toCode(a),
					8);
			},
			$elm$core$String$toList(str)));
};
var $pablohirafuji$elm_qrcode$QRCode$Error$InvalidNumericChar = {$: 'InvalidNumericChar'};
var $pablohirafuji$elm_qrcode$QRCode$Encode$Numeric$numericLength = function (str) {
	var _v0 = $elm$core$String$length(str);
	switch (_v0) {
		case 1:
			return 4;
		case 2:
			return 7;
		default:
			return 10;
	}
};
var $pablohirafuji$elm_qrcode$QRCode$Encode$Numeric$encodeHelp = function (chars) {
	var str = $elm$core$String$fromList(chars);
	return A2(
		$elm$core$Result$fromMaybe,
		$pablohirafuji$elm_qrcode$QRCode$Error$InvalidNumericChar,
		A2(
			$elm$core$Maybe$map,
			function (a) {
				return _Utils_Tuple2(
					a,
					$pablohirafuji$elm_qrcode$QRCode$Encode$Numeric$numericLength(str));
			},
			$elm$core$String$toInt(str)));
};
var $pablohirafuji$elm_qrcode$QRCode$Encode$Numeric$encode = function (str) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Result$map2($elm$core$List$cons),
		$elm$core$Result$Ok(_List_Nil),
		A2(
			$elm$core$List$map,
			$pablohirafuji$elm_qrcode$QRCode$Encode$Numeric$encodeHelp,
			A2(
				$elm_community$list_extra$List$Extra$greedyGroupsOf,
				3,
				$elm$core$String$toList(str))));
};
var $pablohirafuji$elm_qrcode$QRCode$Error$InvalidUTF8Char = {$: 'InvalidUTF8Char'};
var $elm$bytes$Bytes$Encode$getWidth = function (builder) {
	switch (builder.$) {
		case 'I8':
			return 1;
		case 'I16':
			return 2;
		case 'I32':
			return 4;
		case 'U8':
			return 1;
		case 'U16':
			return 2;
		case 'U32':
			return 4;
		case 'F32':
			return 4;
		case 'F64':
			return 8;
		case 'Seq':
			var w = builder.a;
			return w;
		case 'Utf8':
			var w = builder.a;
			return w;
		default:
			var bs = builder.a;
			return _Bytes_width(bs);
	}
};
var $elm$bytes$Bytes$LE = {$: 'LE'};
var $elm$bytes$Bytes$Encode$write = F3(
	function (builder, mb, offset) {
		switch (builder.$) {
			case 'I8':
				var n = builder.a;
				return A3(_Bytes_write_i8, mb, offset, n);
			case 'I16':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_i16,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'I32':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_i32,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'U8':
				var n = builder.a;
				return A3(_Bytes_write_u8, mb, offset, n);
			case 'U16':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_u16,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'U32':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_u32,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'F32':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_f32,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'F64':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_f64,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'Seq':
				var bs = builder.b;
				return A3($elm$bytes$Bytes$Encode$writeSequence, bs, mb, offset);
			case 'Utf8':
				var s = builder.b;
				return A3(_Bytes_write_string, mb, offset, s);
			default:
				var bs = builder.a;
				return A3(_Bytes_write_bytes, mb, offset, bs);
		}
	});
var $elm$bytes$Bytes$Encode$writeSequence = F3(
	function (builders, mb, offset) {
		writeSequence:
		while (true) {
			if (!builders.b) {
				return offset;
			} else {
				var b = builders.a;
				var bs = builders.b;
				var $temp$builders = bs,
					$temp$mb = mb,
					$temp$offset = A3($elm$bytes$Bytes$Encode$write, b, mb, offset);
				builders = $temp$builders;
				mb = $temp$mb;
				offset = $temp$offset;
				continue writeSequence;
			}
		}
	});
var $elm$bytes$Bytes$Decode$decode = F2(
	function (_v0, bs) {
		var decoder = _v0.a;
		return A2(_Bytes_decode, decoder, bs);
	});
var $elm$bytes$Bytes$Encode$encode = _Bytes_encode;
var $elm$bytes$Bytes$Encode$getStringWidth = _Bytes_getStringWidth;
var $elm$bytes$Bytes$Decode$Decoder = function (a) {
	return {$: 'Decoder', a: a};
};
var $elm$bytes$Bytes$Decode$loopHelp = F4(
	function (state, callback, bites, offset) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var decoder = _v0.a;
			var _v1 = A2(decoder, bites, offset);
			var newOffset = _v1.a;
			var step = _v1.b;
			if (step.$ === 'Loop') {
				var newState = step.a;
				var $temp$state = newState,
					$temp$callback = callback,
					$temp$bites = bites,
					$temp$offset = newOffset;
				state = $temp$state;
				callback = $temp$callback;
				bites = $temp$bites;
				offset = $temp$offset;
				continue loopHelp;
			} else {
				var result = step.a;
				return _Utils_Tuple2(newOffset, result);
			}
		}
	});
var $elm$bytes$Bytes$Decode$loop = F2(
	function (state, callback) {
		return $elm$bytes$Bytes$Decode$Decoder(
			A2($elm$bytes$Bytes$Decode$loopHelp, state, callback));
	});
var $elm$bytes$Bytes$Decode$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$bytes$Bytes$Decode$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $elm$bytes$Bytes$Decode$map = F2(
	function (func, _v0) {
		var decodeA = _v0.a;
		return $elm$bytes$Bytes$Decode$Decoder(
			F2(
				function (bites, offset) {
					var _v1 = A2(decodeA, bites, offset);
					var aOffset = _v1.a;
					var a = _v1.b;
					return _Utils_Tuple2(
						aOffset,
						func(a));
				}));
	});
var $elm$bytes$Bytes$Decode$succeed = function (a) {
	return $elm$bytes$Bytes$Decode$Decoder(
		F2(
			function (_v0, offset) {
				return _Utils_Tuple2(offset, a);
			}));
};
var $elm$bytes$Bytes$Decode$unsignedInt8 = $elm$bytes$Bytes$Decode$Decoder(_Bytes_read_u8);
var $pablohirafuji$elm_qrcode$QRCode$Encode$UTF8$step = function (_v0) {
	var n = _v0.a;
	var xs = _v0.b;
	return (n <= 0) ? $elm$bytes$Bytes$Decode$succeed(
		$elm$bytes$Bytes$Decode$Done(
			$elm$core$List$reverse(xs))) : A2(
		$elm$bytes$Bytes$Decode$map,
		function (x) {
			return $elm$bytes$Bytes$Decode$Loop(
				_Utils_Tuple2(
					n - 1,
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(x, 8),
						xs)));
		},
		$elm$bytes$Bytes$Decode$unsignedInt8);
};
var $elm$bytes$Bytes$Encode$Utf8 = F2(
	function (a, b) {
		return {$: 'Utf8', a: a, b: b};
	});
var $elm$bytes$Bytes$Encode$string = function (str) {
	return A2(
		$elm$bytes$Bytes$Encode$Utf8,
		_Bytes_getStringWidth(str),
		str);
};
var $pablohirafuji$elm_qrcode$QRCode$Encode$UTF8$encode = function (str) {
	var utf8BytesWidth = $elm$bytes$Bytes$Encode$getStringWidth(str);
	var decoder = A2(
		$elm$bytes$Bytes$Decode$loop,
		_Utils_Tuple2(utf8BytesWidth, _List_Nil),
		$pablohirafuji$elm_qrcode$QRCode$Encode$UTF8$step);
	return A2(
		$elm$core$Result$fromMaybe,
		$pablohirafuji$elm_qrcode$QRCode$Error$InvalidUTF8Char,
		A2(
			$elm$bytes$Bytes$Decode$decode,
			decoder,
			$elm$bytes$Bytes$Encode$encode(
				$elm$bytes$Bytes$Encode$string(str))));
};
var $pablohirafuji$elm_qrcode$QRCode$Encode$encoder = function (mode) {
	switch (mode.$) {
		case 'Numeric':
			return $pablohirafuji$elm_qrcode$QRCode$Encode$Numeric$encode;
		case 'Alphanumeric':
			return $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$encode;
		case 'Byte':
			return $pablohirafuji$elm_qrcode$QRCode$Encode$Byte$encode;
		default:
			return $pablohirafuji$elm_qrcode$QRCode$Encode$UTF8$encode;
	}
};
var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$expTable = $elm$core$Array$fromList(
	_List_fromArray(
		[1, 2, 4, 8, 16, 32, 64, 128, 29, 58, 116, 232, 205, 135, 19, 38, 76, 152, 45, 90, 180, 117, 234, 201, 143, 3, 6, 12, 24, 48, 96, 192, 157, 39, 78, 156, 37, 74, 148, 53, 106, 212, 181, 119, 238, 193, 159, 35, 70, 140, 5, 10, 20, 40, 80, 160, 93, 186, 105, 210, 185, 111, 222, 161, 95, 190, 97, 194, 153, 47, 94, 188, 101, 202, 137, 15, 30, 60, 120, 240, 253, 231, 211, 187, 107, 214, 177, 127, 254, 225, 223, 163, 91, 182, 113, 226, 217, 175, 67, 134, 17, 34, 68, 136, 13, 26, 52, 104, 208, 189, 103, 206, 129, 31, 62, 124, 248, 237, 199, 147, 59, 118, 236, 197, 151, 51, 102, 204, 133, 23, 46, 92, 184, 109, 218, 169, 79, 158, 33, 66, 132, 21, 42, 84, 168, 77, 154, 41, 82, 164, 85, 170, 73, 146, 57, 114, 228, 213, 183, 115, 230, 209, 191, 99, 198, 145, 63, 126, 252, 229, 215, 179, 123, 246, 241, 255, 227, 219, 171, 75, 150, 49, 98, 196, 149, 55, 110, 220, 165, 87, 174, 65, 130, 25, 50, 100, 200, 141, 7, 14, 28, 56, 112, 224, 221, 167, 83, 166, 81, 162, 89, 178, 121, 242, 249, 239, 195, 155, 43, 86, 172, 69, 138, 9, 18, 36, 72, 144, 61, 122, 244, 245, 247, 243, 251, 235, 203, 139, 11, 22, 44, 88, 176, 125, 250, 233, 207, 131, 27, 54, 108, 216, 173, 71, 142, 1]));
var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getExp = function (index) {
	return A2(
		$elm$core$Maybe$withDefault,
		0,
		A2(
			$elm$core$Array$get,
			A2($elm$core$Basics$modBy, 255, index),
			$pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$expTable));
};
var $pablohirafuji$elm_qrcode$QRCode$Error$PolynomialMultiplyException = {$: 'PolynomialMultiplyException'};
var $pablohirafuji$elm_qrcode$QRCode$Error$LogTableException = function (a) {
	return {$: 'LogTableException', a: a};
};
var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$logTable = $elm$core$Array$fromList(
	_List_fromArray(
		[0, 1, 25, 2, 50, 26, 198, 3, 223, 51, 238, 27, 104, 199, 75, 4, 100, 224, 14, 52, 141, 239, 129, 28, 193, 105, 248, 200, 8, 76, 113, 5, 138, 101, 47, 225, 36, 15, 33, 53, 147, 142, 218, 240, 18, 130, 69, 29, 181, 194, 125, 106, 39, 249, 185, 201, 154, 9, 120, 77, 228, 114, 166, 6, 191, 139, 98, 102, 221, 48, 253, 226, 152, 37, 179, 16, 145, 34, 136, 54, 208, 148, 206, 143, 150, 219, 189, 241, 210, 19, 92, 131, 56, 70, 64, 30, 66, 182, 163, 195, 72, 126, 110, 107, 58, 40, 84, 250, 133, 186, 61, 202, 94, 155, 159, 10, 21, 121, 43, 78, 212, 229, 172, 115, 243, 167, 87, 7, 112, 192, 247, 140, 128, 99, 13, 103, 74, 222, 237, 49, 197, 254, 24, 227, 165, 153, 119, 38, 184, 180, 124, 17, 68, 146, 217, 35, 32, 137, 46, 55, 63, 209, 91, 149, 188, 207, 205, 144, 135, 151, 178, 220, 252, 190, 97, 242, 86, 211, 171, 20, 42, 93, 158, 132, 60, 57, 83, 71, 109, 65, 162, 31, 45, 67, 216, 183, 123, 164, 118, 196, 23, 73, 236, 127, 12, 111, 246, 108, 161, 59, 82, 41, 157, 85, 170, 251, 96, 134, 177, 187, 204, 62, 90, 203, 89, 95, 176, 156, 169, 160, 81, 11, 245, 22, 235, 122, 117, 44, 215, 79, 174, 213, 233, 230, 231, 173, 232, 116, 214, 244, 234, 168, 80, 88, 175]));
var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getLog = function (index) {
	return (index < 1) ? $elm$core$Result$Err(
		$pablohirafuji$elm_qrcode$QRCode$Error$LogTableException(index)) : A2(
		$elm$core$Result$fromMaybe,
		$pablohirafuji$elm_qrcode$QRCode$Error$LogTableException(index),
		A2($elm$core$Array$get, index - 1, $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$logTable));
};
var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getOffset = function (_v0) {
	getOffset:
	while (true) {
		var num = _v0.a;
		var offset = _v0.b;
		if (num.b) {
			var head = num.a;
			var tail = num.b;
			if (!head) {
				var $temp$_v0 = _Utils_Tuple2(tail, offset + 1);
				_v0 = $temp$_v0;
				continue getOffset;
			} else {
				return offset;
			}
		} else {
			return offset;
		}
	}
};
var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$newPolynomial = F2(
	function (num, shift) {
		var offset = $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getOffset(
			_Utils_Tuple2(num, 0));
		var numArray = $elm$core$Array$fromList(num);
		return A2(
			$elm$core$Array$initialize,
			($elm$core$List$length(num) - offset) + shift,
			function (index) {
				return A2(
					$elm$core$Maybe$withDefault,
					0,
					A2($elm$core$Array$get, index + offset, numArray));
			});
	});
var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$multiply = F2(
	function (poly1, poly2) {
		var valuesArray = A2(
			$elm$core$List$indexedMap,
			F2(
				function (index1, value1) {
					return A2(
						$elm$core$List$indexedMap,
						F2(
							function (index2, value2) {
								return _Utils_Tuple3(index1 + index2, value1, value2);
							}),
						$elm$core$Array$toList(poly2));
				}),
			$elm$core$Array$toList(poly1));
		var process__ = F3(
			function (indexSum, num_, exp) {
				return A2(
					$elm$core$Result$fromMaybe,
					$pablohirafuji$elm_qrcode$QRCode$Error$PolynomialMultiplyException,
					A2(
						$elm$core$Maybe$map,
						$elm$core$Bitwise$xor(exp),
						A2($elm$core$Array$get, indexSum, num_)));
			});
		var process_ = F2(
			function (_v0, num_) {
				var indexSum = _v0.a;
				var value1 = _v0.b;
				var value2 = _v0.c;
				return A2(
					$elm$core$Result$map,
					function (r) {
						return A3($elm$core$Array$set, indexSum, r, num_);
					},
					A2(
						$elm$core$Result$andThen,
						A2(process__, indexSum, num_),
						A2(
							$elm$core$Result$map,
							$pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getExp,
							A3(
								$elm$core$Result$map2,
								$elm$core$Basics$add,
								$pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getLog(value1),
								$pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getLog(value2)))));
			});
		var process = F2(
			function (args, numResult) {
				return A2(
					$elm$core$Result$andThen,
					process_(args),
					numResult);
			});
		var num = A2(
			$elm$core$Array$initialize,
			($elm$core$Array$length(poly1) + $elm$core$Array$length(poly2)) - 1,
			$elm$core$Basics$always(0));
		return A2(
			$elm$core$Result$map,
			function (a) {
				return A2($pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$newPolynomial, a, 0);
			},
			A2(
				$elm$core$Result$map,
				$elm$core$Array$toList,
				A3(
					$elm$core$List$foldl,
					process,
					$elm$core$Result$Ok(num),
					$elm$core$List$concat(valuesArray))));
	});
var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getECPolynomial = function (ecLength) {
	var generate = F2(
		function (count, polyResult) {
			generate:
			while (true) {
				if (_Utils_cmp(count, ecLength) < 0) {
					var $temp$count = count + 1,
						$temp$polyResult = A2(
						$elm$core$Result$andThen,
						function (a) {
							return A2(
								$pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$multiply,
								a,
								A2(
									$pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$newPolynomial,
									_List_fromArray(
										[
											1,
											$pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getExp(count)
										]),
									0));
						},
						polyResult);
					count = $temp$count;
					polyResult = $temp$polyResult;
					continue generate;
				} else {
					return polyResult;
				}
			}
		});
	return A2(
		generate,
		0,
		$elm$core$Result$Ok(
			A2(
				$pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$newPolynomial,
				_List_fromArray(
					[1]),
				0)));
};
var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$get___ = F2(
	function (ecLength, modPoly) {
		return $elm$core$Array$toList(
			A2(
				$elm$core$Array$initialize,
				ecLength,
				function (index) {
					var modIndex = (index + $elm$core$Array$length(modPoly)) - ecLength;
					return (modIndex >= 0) ? A2(
						$elm$core$Maybe$withDefault,
						0,
						A2($elm$core$Array$get, modIndex, modPoly)) : 0;
				}));
	});
var $pablohirafuji$elm_qrcode$QRCode$Error$PolynomialModException = {$: 'PolynomialModException'};
var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$mod = F2(
	function (poly1, poly2) {
		if (($elm$core$Array$length(poly1) - $elm$core$Array$length(poly2)) < 0) {
			return $elm$core$Result$Ok(poly1);
		} else {
			var helper_ = F3(
				function (index2, poly1_, exp) {
					return A2(
						$elm$core$Result$fromMaybe,
						$pablohirafuji$elm_qrcode$QRCode$Error$PolynomialModException,
						A2(
							$elm$core$Maybe$map,
							$elm$core$Bitwise$xor(exp),
							A2($elm$core$Array$get, index2, poly1_)));
				});
			var getHead = function (poly) {
				return A2(
					$elm$core$Result$andThen,
					$pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getLog,
					A2(
						$elm$core$Result$fromMaybe,
						$pablohirafuji$elm_qrcode$QRCode$Error$PolynomialModException,
						A2($elm$core$Array$get, 0, poly)));
			};
			var ratio = A3(
				$elm$core$Result$map2,
				$elm$core$Basics$sub,
				getHead(poly1),
				getHead(poly2));
			var helper = F2(
				function (_v0, poly1_) {
					var index2 = _v0.a;
					var value2 = _v0.b;
					return A2(
						$elm$core$Result$map,
						function (r) {
							return A3($elm$core$Array$set, index2, r, poly1_);
						},
						A2(
							$elm$core$Result$andThen,
							A2(helper_, index2, poly1_),
							A2(
								$elm$core$Result$map,
								$pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getExp,
								A3(
									$elm$core$Result$map2,
									$elm$core$Basics$add,
									ratio,
									$pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getLog(value2)))));
				});
			var numFold = F2(
				function (args, poly1Result) {
					return A2(
						$elm$core$Result$andThen,
						helper(args),
						poly1Result);
				});
			var numResult = A3(
				$elm$core$Array$foldl,
				numFold,
				$elm$core$Result$Ok(poly1),
				A2(
					$elm$core$Array$indexedMap,
					F2(
						function (a, b) {
							return _Utils_Tuple2(a, b);
						}),
					poly2));
			return A2(
				$elm$core$Result$andThen,
				function (a) {
					return A2($pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$mod, a, poly2);
				},
				A2(
					$elm$core$Result$map,
					function (a) {
						return A2($pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$newPolynomial, a, 0);
					},
					A2($elm$core$Result$map, $elm$core$Array$toList, numResult)));
		}
	});
var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$get__ = F2(
	function (rsPoly, dataCodewords) {
		return A2(
			$elm$core$Result$map,
			$pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$get___(
				$elm$core$Array$length(rsPoly) - 1),
			A2(
				$pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$mod,
				A2(
					$pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$newPolynomial,
					dataCodewords,
					$elm$core$Array$length(rsPoly) - 1),
				rsPoly));
	});
var $pablohirafuji$elm_qrcode$QRCode$Helpers$listResult = F3(
	function (fun, listb, lista) {
		if (lista.b) {
			var head = lista.a;
			var tail = lista.b;
			return A2(
				$elm$core$Result$andThen,
				function (a) {
					return A3($pablohirafuji$elm_qrcode$QRCode$Helpers$listResult, fun, a, tail);
				},
				A2(
					$elm$core$Result$map,
					function (r) {
						return A2($elm$core$List$cons, r, listb);
					},
					fun(head)));
		} else {
			return $elm$core$Result$Ok(
				$elm$core$List$reverse(listb));
		}
	});
var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$get_ = F2(
	function (byteBlocks, rsPoly) {
		return A3(
			$pablohirafuji$elm_qrcode$QRCode$Helpers$listResult,
			$pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$get__(rsPoly),
			_List_Nil,
			byteBlocks);
	});
var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$get = F2(
	function (ecPerBlock, byteBlocks) {
		return A2(
			$elm$core$Result$andThen,
			$pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$get_(byteBlocks),
			$pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getECPolynomial(ecPerBlock));
	});
var $pablohirafuji$elm_qrcode$QRCode$Encode$getErrorCorrection = function (_v0) {
	var model = _v0.a;
	var dataBlocks = _v0.b;
	return A2(
		$elm$core$Result$map,
		function (c) {
			return _Utils_Tuple3(model, dataBlocks, c);
		},
		A2($pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$get, model.groupInfo.ecPerBlock, dataBlocks));
};
var $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric = {$: 'Alphanumeric'};
var $pablohirafuji$elm_qrcode$QRCode$Encode$Byte = {$: 'Byte'};
var $pablohirafuji$elm_qrcode$QRCode$Encode$Numeric = {$: 'Numeric'};
var $elm$regex$Regex$contains = _Regex_contains;
var $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$onlyAlphanumeric = A2(
	$elm$regex$Regex$fromStringWith,
	{caseInsensitive: false, multiline: false},
	'^[0-9A-Z $%*+\\-.\\/:]+$');
var $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$isValid = function (input) {
	return A2(
		$elm$core$Maybe$withDefault,
		false,
		A2(
			$elm$core$Maybe$map,
			function (r) {
				return A2($elm$regex$Regex$contains, r, input);
			},
			$pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$onlyAlphanumeric));
};
var $pablohirafuji$elm_qrcode$QRCode$Encode$Byte$only8Bit = A2(
	$elm$regex$Regex$fromStringWith,
	{caseInsensitive: false, multiline: false},
	'^[\\u0000-\\u00ff]+$');
var $pablohirafuji$elm_qrcode$QRCode$Encode$Byte$isValid = function (input) {
	return A2(
		$elm$core$Maybe$withDefault,
		false,
		A2(
			$elm$core$Maybe$map,
			function (r) {
				return A2($elm$regex$Regex$contains, r, input);
			},
			$pablohirafuji$elm_qrcode$QRCode$Encode$Byte$only8Bit));
};
var $pablohirafuji$elm_qrcode$QRCode$Encode$Numeric$onlyNumber = A2(
	$elm$regex$Regex$fromStringWith,
	{caseInsensitive: false, multiline: false},
	'^[0-9]+$');
var $pablohirafuji$elm_qrcode$QRCode$Encode$Numeric$isValid = function (input) {
	return A2(
		$elm$core$Maybe$withDefault,
		false,
		A2(
			$elm$core$Maybe$map,
			function (r) {
				return A2($elm$regex$Regex$contains, r, input);
			},
			$pablohirafuji$elm_qrcode$QRCode$Encode$Numeric$onlyNumber));
};
var $pablohirafuji$elm_qrcode$QRCode$Encode$selectMode = function (input) {
	return $pablohirafuji$elm_qrcode$QRCode$Encode$Numeric$isValid(input) ? $pablohirafuji$elm_qrcode$QRCode$Encode$Numeric : ($pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$isValid(input) ? $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric : ($pablohirafuji$elm_qrcode$QRCode$Encode$Byte$isValid(input) ? $pablohirafuji$elm_qrcode$QRCode$Encode$Byte : $pablohirafuji$elm_qrcode$QRCode$Encode$UTF8));
};
var $pablohirafuji$elm_qrcode$QRCode$Error$InputLengthOverflow = {$: 'InputLengthOverflow'};
var $pablohirafuji$elm_qrcode$QRCode$Encode$filterCapacity = F3(
	function (mode, dataLength, _v0) {
		var version = _v0.version;
		var capacity = _v0.capacity;
		return _Utils_cmp(
			A2($pablohirafuji$elm_qrcode$QRCode$Encode$charCountIndicatorLength, mode, version) + dataLength,
			capacity) < 1;
	});
var $pablohirafuji$elm_qrcode$QRCode$GroupInfo$blockByteCapacity = function (_v0) {
	var blockCount = _v0.a;
	var bytePerBlock = _v0.b;
	return blockCount * bytePerBlock;
};
var $pablohirafuji$elm_qrcode$QRCode$GroupInfo$byteCapacity = F2(
	function (group1, maybeGroup2) {
		if (maybeGroup2.$ === 'Just') {
			var block2 = maybeGroup2.a;
			return $pablohirafuji$elm_qrcode$QRCode$GroupInfo$blockByteCapacity(group1) + $pablohirafuji$elm_qrcode$QRCode$GroupInfo$blockByteCapacity(block2);
		} else {
			return $pablohirafuji$elm_qrcode$QRCode$GroupInfo$blockByteCapacity(group1);
		}
	});
var $pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo = F4(
	function (version, ecPerBlock, group1, maybeGroup2) {
		return {
			capacity: A2($pablohirafuji$elm_qrcode$QRCode$GroupInfo$byteCapacity, group1, maybeGroup2) * 8,
			ecPerBlock: ecPerBlock,
			group1: group1,
			maybeGroup2: maybeGroup2,
			version: version
		};
	});
var $pablohirafuji$elm_qrcode$QRCode$GroupInfo$dataH = _List_fromArray(
	[
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		1,
		17,
		_Utils_Tuple2(1, 9),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		2,
		28,
		_Utils_Tuple2(1, 16),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		3,
		22,
		_Utils_Tuple2(2, 13),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		4,
		16,
		_Utils_Tuple2(4, 9),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		5,
		22,
		_Utils_Tuple2(2, 11),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(2, 12))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		6,
		28,
		_Utils_Tuple2(4, 15),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		7,
		26,
		_Utils_Tuple2(4, 13),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(1, 14))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		8,
		26,
		_Utils_Tuple2(4, 14),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(2, 15))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		9,
		24,
		_Utils_Tuple2(4, 12),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(4, 13))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		10,
		28,
		_Utils_Tuple2(6, 15),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(2, 16))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		11,
		24,
		_Utils_Tuple2(3, 12),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(8, 13))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		12,
		28,
		_Utils_Tuple2(7, 14),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(4, 15))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		13,
		22,
		_Utils_Tuple2(12, 11),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(4, 12))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		14,
		24,
		_Utils_Tuple2(11, 12),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(5, 13))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		15,
		24,
		_Utils_Tuple2(11, 12),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(7, 13))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		16,
		30,
		_Utils_Tuple2(3, 15),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(13, 16))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		17,
		28,
		_Utils_Tuple2(2, 14),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(17, 15))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		18,
		28,
		_Utils_Tuple2(2, 14),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(19, 15))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		19,
		26,
		_Utils_Tuple2(9, 13),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(16, 14))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		20,
		28,
		_Utils_Tuple2(15, 15),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(10, 16))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		21,
		30,
		_Utils_Tuple2(19, 16),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(6, 17))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		22,
		24,
		_Utils_Tuple2(34, 13),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		23,
		30,
		_Utils_Tuple2(16, 15),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(14, 16))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		24,
		30,
		_Utils_Tuple2(30, 16),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(2, 17))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		25,
		30,
		_Utils_Tuple2(22, 15),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(13, 16))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		26,
		30,
		_Utils_Tuple2(33, 16),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(4, 17))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		27,
		30,
		_Utils_Tuple2(12, 15),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(28, 16))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		28,
		30,
		_Utils_Tuple2(11, 15),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(31, 16))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		29,
		30,
		_Utils_Tuple2(19, 15),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(26, 16))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		30,
		30,
		_Utils_Tuple2(23, 15),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(25, 16))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		31,
		30,
		_Utils_Tuple2(23, 15),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(28, 16))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		32,
		30,
		_Utils_Tuple2(19, 15),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(35, 16))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		33,
		30,
		_Utils_Tuple2(11, 15),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(46, 16))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		34,
		30,
		_Utils_Tuple2(59, 16),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(1, 17))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		35,
		30,
		_Utils_Tuple2(22, 15),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(41, 16))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		36,
		30,
		_Utils_Tuple2(2, 15),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(64, 16))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		37,
		30,
		_Utils_Tuple2(24, 15),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(46, 16))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		38,
		30,
		_Utils_Tuple2(42, 15),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(32, 16))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		39,
		30,
		_Utils_Tuple2(10, 15),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(67, 16))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		40,
		30,
		_Utils_Tuple2(20, 15),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(61, 16)))
	]);
var $pablohirafuji$elm_qrcode$QRCode$GroupInfo$dataL = _List_fromArray(
	[
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		1,
		7,
		_Utils_Tuple2(1, 19),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		2,
		10,
		_Utils_Tuple2(1, 34),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		3,
		15,
		_Utils_Tuple2(1, 55),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		4,
		20,
		_Utils_Tuple2(1, 80),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		5,
		26,
		_Utils_Tuple2(1, 108),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		6,
		18,
		_Utils_Tuple2(2, 68),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		7,
		20,
		_Utils_Tuple2(2, 78),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		8,
		24,
		_Utils_Tuple2(2, 97),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		9,
		30,
		_Utils_Tuple2(2, 116),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		10,
		18,
		_Utils_Tuple2(2, 68),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(2, 69))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		11,
		20,
		_Utils_Tuple2(4, 81),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		12,
		24,
		_Utils_Tuple2(2, 92),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(2, 93))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		13,
		26,
		_Utils_Tuple2(4, 107),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		14,
		30,
		_Utils_Tuple2(3, 115),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(1, 116))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		15,
		22,
		_Utils_Tuple2(5, 87),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(1, 88))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		16,
		24,
		_Utils_Tuple2(5, 98),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(1, 99))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		17,
		28,
		_Utils_Tuple2(1, 107),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(5, 108))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		18,
		30,
		_Utils_Tuple2(5, 120),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(1, 121))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		19,
		28,
		_Utils_Tuple2(3, 113),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(4, 114))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		20,
		28,
		_Utils_Tuple2(3, 107),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(5, 108))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		21,
		28,
		_Utils_Tuple2(4, 116),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(4, 117))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		22,
		28,
		_Utils_Tuple2(2, 111),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(7, 112))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		23,
		30,
		_Utils_Tuple2(4, 121),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(5, 122))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		24,
		30,
		_Utils_Tuple2(6, 117),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(4, 118))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		25,
		26,
		_Utils_Tuple2(8, 106),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(4, 107))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		26,
		28,
		_Utils_Tuple2(10, 114),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(2, 115))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		27,
		30,
		_Utils_Tuple2(8, 122),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(4, 123))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		28,
		30,
		_Utils_Tuple2(3, 117),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(10, 118))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		29,
		30,
		_Utils_Tuple2(7, 116),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(7, 117))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		30,
		30,
		_Utils_Tuple2(5, 115),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(10, 116))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		31,
		30,
		_Utils_Tuple2(13, 115),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(3, 116))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		32,
		30,
		_Utils_Tuple2(17, 115),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		33,
		30,
		_Utils_Tuple2(17, 115),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(1, 116))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		34,
		30,
		_Utils_Tuple2(13, 115),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(6, 116))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		35,
		30,
		_Utils_Tuple2(12, 121),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(7, 122))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		36,
		30,
		_Utils_Tuple2(6, 121),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(14, 122))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		37,
		30,
		_Utils_Tuple2(17, 122),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(4, 123))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		38,
		30,
		_Utils_Tuple2(4, 122),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(18, 123))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		39,
		30,
		_Utils_Tuple2(20, 117),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(4, 118))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		40,
		30,
		_Utils_Tuple2(19, 118),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(6, 119)))
	]);
var $pablohirafuji$elm_qrcode$QRCode$GroupInfo$dataM = _List_fromArray(
	[
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		1,
		10,
		_Utils_Tuple2(1, 16),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		2,
		16,
		_Utils_Tuple2(1, 28),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		3,
		26,
		_Utils_Tuple2(1, 44),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		4,
		18,
		_Utils_Tuple2(2, 32),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		5,
		24,
		_Utils_Tuple2(2, 43),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		6,
		16,
		_Utils_Tuple2(4, 27),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		7,
		18,
		_Utils_Tuple2(4, 31),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		8,
		22,
		_Utils_Tuple2(2, 38),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(2, 39))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		9,
		22,
		_Utils_Tuple2(3, 36),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(2, 37))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		10,
		26,
		_Utils_Tuple2(4, 43),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(1, 44))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		11,
		30,
		_Utils_Tuple2(1, 50),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(4, 51))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		12,
		22,
		_Utils_Tuple2(6, 36),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(2, 37))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		13,
		22,
		_Utils_Tuple2(8, 37),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(1, 38))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		14,
		24,
		_Utils_Tuple2(4, 40),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(5, 41))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		15,
		24,
		_Utils_Tuple2(5, 41),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(5, 42))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		16,
		28,
		_Utils_Tuple2(7, 45),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(3, 46))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		17,
		28,
		_Utils_Tuple2(10, 46),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(1, 47))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		18,
		26,
		_Utils_Tuple2(9, 43),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(4, 44))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		19,
		26,
		_Utils_Tuple2(3, 44),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(11, 45))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		20,
		26,
		_Utils_Tuple2(3, 41),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(13, 42))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		21,
		26,
		_Utils_Tuple2(17, 42),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		22,
		28,
		_Utils_Tuple2(17, 46),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		23,
		28,
		_Utils_Tuple2(4, 47),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(14, 48))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		24,
		28,
		_Utils_Tuple2(6, 45),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(14, 46))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		25,
		28,
		_Utils_Tuple2(8, 47),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(13, 48))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		26,
		28,
		_Utils_Tuple2(19, 46),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(4, 47))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		27,
		28,
		_Utils_Tuple2(22, 45),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(3, 46))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		28,
		28,
		_Utils_Tuple2(3, 45),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(23, 46))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		29,
		28,
		_Utils_Tuple2(21, 45),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(7, 46))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		30,
		28,
		_Utils_Tuple2(19, 47),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(10, 48))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		31,
		28,
		_Utils_Tuple2(2, 46),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(29, 47))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		32,
		28,
		_Utils_Tuple2(10, 46),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(23, 47))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		33,
		28,
		_Utils_Tuple2(14, 46),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(21, 47))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		34,
		28,
		_Utils_Tuple2(14, 46),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(23, 47))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		35,
		28,
		_Utils_Tuple2(12, 47),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(26, 48))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		36,
		28,
		_Utils_Tuple2(6, 47),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(34, 48))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		37,
		28,
		_Utils_Tuple2(29, 46),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(14, 47))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		38,
		28,
		_Utils_Tuple2(13, 46),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(32, 47))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		39,
		28,
		_Utils_Tuple2(40, 47),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(7, 48))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		40,
		28,
		_Utils_Tuple2(18, 47),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(31, 48)))
	]);
var $pablohirafuji$elm_qrcode$QRCode$GroupInfo$dataQ = _List_fromArray(
	[
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		1,
		13,
		_Utils_Tuple2(1, 13),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		2,
		22,
		_Utils_Tuple2(1, 22),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		3,
		18,
		_Utils_Tuple2(2, 17),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		4,
		26,
		_Utils_Tuple2(2, 24),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		5,
		18,
		_Utils_Tuple2(2, 15),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(2, 16))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		6,
		24,
		_Utils_Tuple2(4, 19),
		$elm$core$Maybe$Nothing),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		7,
		18,
		_Utils_Tuple2(2, 14),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(4, 15))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		8,
		22,
		_Utils_Tuple2(4, 18),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(2, 19))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		9,
		20,
		_Utils_Tuple2(4, 16),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(4, 17))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		10,
		24,
		_Utils_Tuple2(6, 19),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(2, 20))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		11,
		28,
		_Utils_Tuple2(4, 22),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(4, 23))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		12,
		26,
		_Utils_Tuple2(4, 20),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(6, 21))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		13,
		24,
		_Utils_Tuple2(8, 20),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(4, 21))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		14,
		20,
		_Utils_Tuple2(11, 16),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(5, 17))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		15,
		30,
		_Utils_Tuple2(5, 24),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(7, 25))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		16,
		24,
		_Utils_Tuple2(15, 19),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(2, 20))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		17,
		28,
		_Utils_Tuple2(1, 22),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(15, 23))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		18,
		28,
		_Utils_Tuple2(17, 22),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(1, 23))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		19,
		26,
		_Utils_Tuple2(17, 21),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(4, 22))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		20,
		30,
		_Utils_Tuple2(15, 24),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(5, 25))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		21,
		28,
		_Utils_Tuple2(17, 22),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(6, 23))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		22,
		30,
		_Utils_Tuple2(7, 24),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(16, 25))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		23,
		30,
		_Utils_Tuple2(11, 24),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(14, 25))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		24,
		30,
		_Utils_Tuple2(11, 24),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(16, 25))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		25,
		30,
		_Utils_Tuple2(7, 24),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(22, 25))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		26,
		28,
		_Utils_Tuple2(28, 22),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(6, 23))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		27,
		30,
		_Utils_Tuple2(8, 23),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(26, 24))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		28,
		30,
		_Utils_Tuple2(4, 24),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(31, 25))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		29,
		30,
		_Utils_Tuple2(1, 23),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(37, 24))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		30,
		30,
		_Utils_Tuple2(15, 24),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(25, 25))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		31,
		30,
		_Utils_Tuple2(42, 24),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(1, 25))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		32,
		30,
		_Utils_Tuple2(10, 24),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(35, 25))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		33,
		30,
		_Utils_Tuple2(29, 24),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(19, 25))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		34,
		30,
		_Utils_Tuple2(44, 24),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(7, 25))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		35,
		30,
		_Utils_Tuple2(39, 24),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(14, 25))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		36,
		30,
		_Utils_Tuple2(46, 24),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(10, 25))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		37,
		30,
		_Utils_Tuple2(49, 24),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(10, 25))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		38,
		30,
		_Utils_Tuple2(48, 24),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(14, 25))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		39,
		30,
		_Utils_Tuple2(43, 24),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(22, 25))),
		A4(
		$pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo,
		40,
		30,
		_Utils_Tuple2(34, 24),
		$elm$core$Maybe$Just(
			_Utils_Tuple2(34, 25)))
	]);
var $pablohirafuji$elm_qrcode$QRCode$GroupInfo$getGroupData = function (ecLevel) {
	switch (ecLevel.$) {
		case 'L':
			return $pablohirafuji$elm_qrcode$QRCode$GroupInfo$dataL;
		case 'M':
			return $pablohirafuji$elm_qrcode$QRCode$GroupInfo$dataM;
		case 'Q':
			return $pablohirafuji$elm_qrcode$QRCode$GroupInfo$dataQ;
		default:
			return $pablohirafuji$elm_qrcode$QRCode$GroupInfo$dataH;
	}
};
var $pablohirafuji$elm_qrcode$QRCode$Encode$getVersion = F3(
	function (ecLevel, mode, dataLength) {
		return A2(
			$elm$core$Result$fromMaybe,
			$pablohirafuji$elm_qrcode$QRCode$Error$InputLengthOverflow,
			$elm$core$List$head(
				A2(
					$elm$core$List$sortBy,
					function ($) {
						return $.capacity;
					},
					A2(
						$elm$core$List$filter,
						A2($pablohirafuji$elm_qrcode$QRCode$Encode$filterCapacity, mode, dataLength),
						$pablohirafuji$elm_qrcode$QRCode$GroupInfo$getGroupData(ecLevel)))));
	});
var $pablohirafuji$elm_qrcode$QRCode$Encode$versionToModel = F5(
	function (inputStr, ecLevel, mode, partialBitsCount, groupInfo) {
		return {
			bitsCount: partialBitsCount + A2($pablohirafuji$elm_qrcode$QRCode$Encode$charCountIndicatorLength, mode, groupInfo.version),
			ecLevel: ecLevel,
			groupInfo: groupInfo,
			inputStr: inputStr,
			mode: mode
		};
	});
var $pablohirafuji$elm_qrcode$QRCode$Encode$selectVersion = F4(
	function (inputStr, ecLevel, mode, encodedStr) {
		var partialBitsCount = 4 + A3(
			$elm$core$List$foldl,
			F2(
				function (a, b) {
					return a.b + b;
				}),
			0,
			encodedStr);
		return A2(
			$elm$core$Result$map,
			function (b) {
				return _Utils_Tuple2(encodedStr, b);
			},
			A2(
				$elm$core$Result$map,
				A4($pablohirafuji$elm_qrcode$QRCode$Encode$versionToModel, inputStr, ecLevel, mode, partialBitsCount),
				A3($pablohirafuji$elm_qrcode$QRCode$Encode$getVersion, ecLevel, mode, partialBitsCount)));
	});
var $pablohirafuji$elm_qrcode$QRCode$Encode$breakList = F3(
	function (checkFinish, _v0, _v1) {
		breakList:
		while (true) {
			var times = _v0.a;
			var itemCount = _v0.b;
			var byteList = _v1.a;
			var progress = _v1.b;
			if (times > 0) {
				var remainList = A2($elm$core$List$drop, itemCount, byteList);
				var block = A2($elm$core$List$take, itemCount, byteList);
				var $temp$checkFinish = checkFinish,
					$temp$_v0 = _Utils_Tuple2(times - 1, itemCount),
					$temp$_v1 = _Utils_Tuple2(
					remainList,
					A2($elm$core$List$cons, block, progress));
				checkFinish = $temp$checkFinish;
				_v0 = $temp$_v0;
				_v1 = $temp$_v1;
				continue breakList;
			} else {
				if (checkFinish && ($elm$core$List$length(byteList) > 0)) {
					return $elm$core$Result$Err($pablohirafuji$elm_qrcode$QRCode$Error$InputLengthOverflow);
				} else {
					return $elm$core$Result$Ok(
						_Utils_Tuple2(byteList, progress));
				}
			}
		}
	});
var $pablohirafuji$elm_qrcode$QRCode$Encode$toBlocks = function (_v0) {
	var model = _v0.a;
	var groupInfo = model.groupInfo;
	var byteList = _v0.b;
	var _v1 = groupInfo.maybeGroup2;
	if (_v1.$ === 'Just') {
		var group2 = _v1.a;
		return A2(
			$elm$core$Result$map,
			function (b) {
				return _Utils_Tuple2(model, b);
			},
			A2(
				$elm$core$Result$map,
				A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $elm$core$List$reverse),
				A2(
					$elm$core$Result$andThen,
					A2($pablohirafuji$elm_qrcode$QRCode$Encode$breakList, true, group2),
					A3(
						$pablohirafuji$elm_qrcode$QRCode$Encode$breakList,
						false,
						groupInfo.group1,
						_Utils_Tuple2(byteList, _List_Nil)))));
	} else {
		return A2(
			$elm$core$Result$map,
			function (b) {
				return _Utils_Tuple2(model, b);
			},
			A2(
				$elm$core$Result$map,
				A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $elm$core$List$reverse),
				A3(
					$pablohirafuji$elm_qrcode$QRCode$Encode$breakList,
					true,
					groupInfo.group1,
					_Utils_Tuple2(byteList, _List_Nil))));
	}
};
var $pablohirafuji$elm_qrcode$QRCode$Encode$encode = F2(
	function (inputStr, ecLevel) {
		var mode = $pablohirafuji$elm_qrcode$QRCode$Encode$selectMode(inputStr);
		return A2(
			$elm$core$Result$map,
			$pablohirafuji$elm_qrcode$QRCode$Encode$concatTranspose,
			A2(
				$elm$core$Result$andThen,
				$pablohirafuji$elm_qrcode$QRCode$Encode$getErrorCorrection,
				A2(
					$elm$core$Result$andThen,
					$pablohirafuji$elm_qrcode$QRCode$Encode$toBlocks,
					A2(
						$elm$core$Result$map,
						$pablohirafuji$elm_qrcode$QRCode$Encode$addInfoAndFinalBits,
						A2(
							$elm$core$Result$andThen,
							A3($pablohirafuji$elm_qrcode$QRCode$Encode$selectVersion, inputStr, ecLevel, mode),
							A2($pablohirafuji$elm_qrcode$QRCode$Encode$encoder, mode, inputStr))))));
	});
var $pablohirafuji$elm_qrcode$QRCode$fromStringWith = F2(
	function (ecLevel, input) {
		return A2(
			$elm$core$Result$mapError,
			$pablohirafuji$elm_qrcode$QRCode$convertError,
			A2(
				$elm$core$Result$andThen,
				function (_v0) {
					var encodeModel = _v0.a;
					var encodedData = _v0.b;
					return A2(
						$elm$core$Result$map,
						function (matrix) {
							return $pablohirafuji$elm_qrcode$QRCode$QRCode(
								{matrix: matrix, version: encodeModel.groupInfo.version});
						},
						$pablohirafuji$elm_qrcode$QRCode$Matrix$apply(
							_Utils_Tuple2(encodeModel, encodedData)));
				},
				A2(
					$pablohirafuji$elm_qrcode$QRCode$Encode$encode,
					input,
					$pablohirafuji$elm_qrcode$QRCode$convertEC(ecLevel))));
	});
var $pablohirafuji$elm_qrcode$QRCode$fromString = $pablohirafuji$elm_qrcode$QRCode$fromStringWith($pablohirafuji$elm_qrcode$QRCode$Quartile);
var $elm$html$Html$iframe = _VirtualDom_node('iframe');
var $elm$html$Html$img = _VirtualDom_node('img');
var $elm$html$Html$Attributes$src = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'src',
		_VirtualDom_noJavaScriptOrHtmlUri(url));
};
var $author$project$Lia$Markdown$Inline$View$title = function (config) {
	return A2(
		$elm$core$Basics$composeR,
		$author$project$Lia$Markdown$Inline$View$stringFrom(config),
		$elm$html$Html$Attributes$title);
};
var $author$project$Lia$Markdown$Inline$View$img = F5(
	function (config, attr, alt_, url_, title_) {
		return A2(
			$elm$html$Html$img,
			A2(
				$elm$core$List$cons,
				$elm$html$Html$Attributes$src(url_),
				A2(
					$elm$core$List$cons,
					A2($author$project$Lia$Markdown$Inline$View$title, config, title_),
					A2(
						$elm$core$List$cons,
						A2($author$project$Lia$Markdown$Inline$View$alt, config, alt_),
						A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-image', attr)))),
			_List_Nil);
	});
var $author$project$Lia$Markdown$Effect$View$circle_ = function (idx) {
	return A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('lia-effect-circle-inline')
			]),
		$elm$core$List$singleton(
			$elm$html$Html$text(
				$elm$core$String$fromInt(idx))));
};
var $author$project$Lia$Markdown$Effect$Types$Animation = {$: 'Animation'};
var $author$project$Lia$Markdown$Effect$Types$PlayBack = {$: 'PlayBack'};
var $author$project$Lia$Markdown$Effect$Types$PlayBackAnimation = {$: 'PlayBackAnimation'};
var $author$project$Lia$Markdown$Effect$Types$class = function (effect) {
	return effect.playback ? ((effect.begin < 0) ? $author$project$Lia$Markdown$Effect$Types$PlayBack : $author$project$Lia$Markdown$Effect$Types$PlayBackAnimation) : $author$project$Lia$Markdown$Effect$Types$Animation;
};
var $elm$html$Html$Attributes$hidden = $elm$html$Html$Attributes$boolProperty('hidden');
var $author$project$Lia$Markdown$Effect$View$inline_playback = F2(
	function (config, e) {
		return _Utils_eq(
			config.speaking,
			$elm$core$Maybe$Just(e.id)) ? A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('lia-btn lia-icon'),
					A2($elm$html$Html$Attributes$style, 'scale', '0.65'),
					A2($elm$html$Html$Attributes$style, 'margin', '0px'),
					A2(
					$elm$html$Html$Attributes$attribute,
					'onclick',
					function (event) {
						return 'playback(' + (event + ')');
					}(
						A2(
							$elm$json$Json$Encode$encode,
							0,
							$author$project$Port$Event$encode(
								A3(
									$author$project$Port$Event$Event,
									'effect',
									config.slide,
									$author$project$Port$Event$encode(
										$author$project$Port$TTS$mute(e.id)))))))
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('stop')
				])) : A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('lia-btn lia-icon'),
					A2($elm$html$Html$Attributes$style, 'scale', '0.65'),
					A2($elm$html$Html$Attributes$style, 'margin', '0px'),
					A2(
					$elm$html$Html$Attributes$attribute,
					'onclick',
					function (event) {
						return 'playback(' + (event + ')');
					}(
						A2(
							$elm$json$Json$Encode$encode,
							0,
							$author$project$Port$Event$encode(
								A3(
									$author$project$Port$Event$Event,
									'effect',
									config.slide,
									$author$project$Port$Event$encode(
										A3(
											$author$project$Port$TTS$playback,
											e.id,
											e.voice,
											$author$project$Lia$Markdown$Inline$Stringify$stringify(e.content))))))))
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('play_arrow')
				]));
	});
var $author$project$Lia$Markdown$Effect$View$inline = F4(
	function (config, attr, e, body) {
		if (_Utils_eq(config.visible, $elm$core$Maybe$Nothing)) {
			var _v0 = $author$project$Lia$Markdown$Effect$Types$class(e);
			switch (_v0.$) {
				case 'Animation':
					return A2(
						$elm$html$Html$span,
						A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$id(
								$elm$core$String$fromInt(e.begin)),
							A2($author$project$Lia$Markdown$HTML$Attributes$annotation, '', _List_Nil)),
						A2(
							$elm$core$List$cons,
							$author$project$Lia$Markdown$Effect$View$circle_(e.begin),
							A2(
								$elm$core$List$cons,
								$elm$html$Html$text(' '),
								body)));
				case 'PlayBack':
					return A2(
						$elm$html$Html$span,
						A2($author$project$Lia$Markdown$HTML$Attributes$annotation, '', attr),
						A2(
							$elm$core$List$cons,
							A2($author$project$Lia$Markdown$Effect$View$inline_playback, config, e),
							body));
				default:
					return A2(
						$elm$html$Html$span,
						A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$id(
								$elm$core$String$fromInt(e.begin)),
							A2($author$project$Lia$Markdown$HTML$Attributes$annotation, '', _List_Nil)),
						A2(
							$elm$core$List$cons,
							$author$project$Lia$Markdown$Effect$View$circle_(e.begin),
							A2(
								$elm$core$List$cons,
								A2($author$project$Lia$Markdown$Effect$View$inline_playback, config, e),
								body)));
			}
		} else {
			var _v1 = $author$project$Lia$Markdown$Effect$Types$class(e);
			switch (_v1.$) {
				case 'Animation':
					return A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								A2($author$project$Lia$Markdown$Effect$Types$isIn, config.visible, e) ? $elm$html$Html$Attributes$hidden(false) : $elm$html$Html$Attributes$hidden(true)
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$span,
								A2(
									$elm$core$List$cons,
									$elm$html$Html$Attributes$id(
										$elm$core$String$fromInt(e.begin)),
									A2(
										$author$project$Lia$Markdown$HTML$Attributes$annotation,
										_Utils_eq(attr, _List_Nil) ? 'lia-effect' : '',
										attr)),
								A2(
									$elm$core$List$cons,
									$author$project$Lia$Markdown$Effect$View$circle_(e.begin),
									A2(
										$elm$core$List$cons,
										$elm$html$Html$text(' '),
										body)))
							]));
				case 'PlayBack':
					return A2(
						$elm$html$Html$span,
						A2($author$project$Lia$Markdown$HTML$Attributes$annotation, '', attr),
						A2(
							$elm$core$List$cons,
							A2($author$project$Lia$Markdown$Effect$View$inline_playback, config, e),
							body));
				default:
					return A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								A2($author$project$Lia$Markdown$Effect$Types$isIn, config.visible, e) ? $elm$html$Html$Attributes$hidden(false) : $elm$html$Html$Attributes$hidden(true)
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$span,
								A2(
									$elm$core$List$cons,
									$elm$html$Html$Attributes$id(
										$elm$core$String$fromInt(e.begin)),
									A2(
										$author$project$Lia$Markdown$HTML$Attributes$annotation,
										_Utils_eq(attr, _List_Nil) ? 'lia-effect' : '',
										attr)),
								A2(
									$elm$core$List$cons,
									$author$project$Lia$Markdown$Effect$View$circle_(e.begin),
									A2(
										$elm$core$List$cons,
										A2($author$project$Lia$Markdown$Effect$View$inline_playback, config, e),
										body)))
							]));
			}
		}
	});
var $author$project$Lia$Markdown$Footnote$View$braces = function (key) {
	return $elm$html$Html$text('[' + (key + ']'));
};
var $elm$html$Html$sup = _VirtualDom_node('sup');
var $author$project$Lia$Markdown$Footnote$View$inline = F2(
	function (key, attr) {
		return A2(
			$elm$html$Html$sup,
			A2(
				$elm$core$List$cons,
				A2($elm$html$Html$Attributes$attribute, 'onclick', 'showFootnote(\"' + (key + '\");')),
				A2(
					$elm$core$List$cons,
					A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
					attr)),
			_List_fromArray(
				[
					$author$project$Lia$Markdown$Footnote$View$braces(key)
				]));
	});
var $author$project$Lia$Markdown$Inline$View$customProviders = _List_Nil;
var $dillonkearns$elm_oembed$Oembed$Provider$regex = function (string) {
	return A2(
		$elm$core$Maybe$withDefault,
		$elm$regex$Regex$never,
		$elm$regex$Regex$fromString(string));
};
var $dillonkearns$elm_oembed$Oembed$Provider$all = _List_fromArray(
	[
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.23hq\\.com/.*/photo/.*')
			]),
		url: 'http://www.23hq.com/23/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://play\\.adpaths\\.com/experience/.*')
			]),
		url: 'http://play.adpaths.com/oembed/*'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://alpha\\.app\\.net/.*/post/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://photos\\.app\\.net/.*/.*')
			]),
		url: 'https://alpha-api.app.net/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://app\\.altrulabs\\.com/.*/.*\\?answer_id=.*')
			]),
		url: 'https://api.altrulabs.com/social/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://live\\.amcharts\\.com/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://live\\.amcharts\\.com/.*')
			]),
		url: 'https://live.amcharts.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.animatron\\.com/project/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://animatron\\.com/project/.*')
			]),
		url: 'https://animatron.com/oembed/json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://animoto\\.com/play/.*')
			]),
		url: 'http://animoto.com/oembeds/create'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://renderer\\.apester\\.com/v2/.*\\?preview=true&iframe_preview=true')
			]),
		url: 'https://display.apester.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://app\\.archivos\\.digital/app/view/.*')
			]),
		url: 'https://app.archivos.digital/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://audioclip\\.naver\\.com/channels/.*/clips/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://audioclip\\.naver\\.com/audiobooks/.*')
			]),
		url: 'https://audioclip.naver.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.audiomack\\.com/song/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.audiomack\\.com/album/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.audiomack\\.com/playlist/.*')
			]),
		url: 'https://www.audiomack.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://audiosnaps\\.com/k/.*')
			]),
		url: 'http://audiosnaps.com/service/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://backtracks\\.fm/.*/.*/e/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://backtracks\\.fm/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://backtracks\\.fm/.*')
			]),
		url: 'https://backtracks.fm/oembed'
	},
		{schemes: _List_Nil, url: 'https://www.beautiful.ai/api/oembed'},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://blackfire\\.io/profiles/.*/graph'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://blackfire\\.io/profiles/compare/.*/graph')
			]),
		url: 'https://blackfire.io/oembed'
	},
		{schemes: _List_Nil, url: 'http://boxofficebuz.com/oembed'},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://view\\.briovr\\.com/api/v1/worlds/oembed/.*')
			]),
		url: 'https://view.briovr.com/api/v1/worlds/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://buttondown\\.email/.*')
			]),
		url: 'https://buttondown.email/embed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://cmc\\.byzart\\.eu/files/.*')
			]),
		url: 'https://cmc.byzart.eu/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://cacoo\\.com/diagrams/.*')
			]),
		url: 'http://cacoo.com/oembed.json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://carbonhealth\\.com/practice/.*')
			]),
		url: 'http://carbonhealth.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://img\\.catbo\\.at/.*')
			]),
		url: 'http://img.catbo.at/oembed.json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://view\\.ceros\\.com/.*')
			]),
		url: 'http://view.ceros.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://public\\.chartblocks\\.com/c/.*')
			]),
		url: 'http://embed.chartblocks.com/1.0/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://chirb\\.it/.*')
			]),
		url: 'http://chirb.it/oembed.json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.circuitlab\\.com/circuit/.*')
			]),
		url: 'https://www.circuitlab.com/circuit/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.clipland\\.com/v/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.clipland\\.com/v/.*')
			]),
		url: 'https://www.clipland.com/api/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://clyp\\.it/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://clyp\\.it/playlist/.*')
			]),
		url: 'http://api.clyp.it/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://codehs\\.com/editor/share_abacus/.*')
			]),
		url: 'https://codehs.com/api/sharedprogram/*/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://codepen\\.io/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://codepen\\.io/.*')
			]),
		url: 'http://codepen.io/api/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://codepoints\\.net/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://codepoints\\.net/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.codepoints\\.net/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.codepoints\\.net/.*')
			]),
		url: 'https://codepoints.net/api/v1/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://codesandbox\\.io/s/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://codesandbox\\.io/embed/.*')
			]),
		url: 'https://codesandbox.io/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.collegehumor\\.com/video/.*')
			]),
		url: 'http://www.collegehumor.com/oembed.json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://commaful\\.com/play/.*')
			]),
		url: 'https://commaful.com/api/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://coub\\.com/view/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://coub\\.com/embed/.*')
			]),
		url: 'http://coub.com/api/oembed.json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://crowdranking\\.com/.*/.*')
			]),
		url: 'http://crowdranking.com/api/oembed.json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://staging\\.cyranosystems\\.com/msg/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://app\\.cyranosystems\\.com/msg/.*')
			]),
		url: 'https://staging.cyranosystems.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.dailymile\\.com/people/.*/entries/.*')
			]),
		url: 'http://api.dailymile.com/oembed?format=json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.dailymotion\\.com/video/.*')
			]),
		url: 'https://www.dailymotion.com/services/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.deseretnews\\.com/.*')
			]),
		url: 'https://embed.deseretnews.com/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.deviantart\\.com/art/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.deviantart\\.com/.*#/d.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://fav\\.me/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://sta\\.sh/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.deviantart\\.com/art/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.deviantart\\.com/.*/art/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://sta\\.sh/.*\",'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.deviantart\\.com/.*#/d.*\"')
			]),
		url: 'http://backend.deviantart.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.didacte\\.com/a/course/.*')
			]),
		url: 'https://*.didacte.com/cards/oembed\''
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.ultimedia\\.com/central/video/edit/id/.*/topic_id/.*/'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.ultimedia\\.com/default/index/videogeneric/id/.*/showtitle/1/viewnc/1'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.ultimedia\\.com/default/index/videogeneric/id/.*')
			]),
		url: 'https://www.ultimedia.com/api/search/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.dipity\\.com/.*/.*/')
			]),
		url: 'http://www.dipity.com/oembed/timeline/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.docdroid\\.net/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.docdroid\\.net/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://docdro\\.id/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://docdro\\.id/.*')
			]),
		url: 'https://www.docdroid.net/api/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://dotsub\\.com/view/.*')
			]),
		url: 'http://dotsub.com/services/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://d\\.tube/v/.*')
			]),
		url: 'https://api.d.tube/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://edocr\\.com/docs/.*')
			]),
		url: 'http://edocr.com/api/oembed'
	},
		{schemes: _List_Nil, url: 'https://www.edumedia-sciences.com/oembed.json'},
		{schemes: _List_Nil, url: 'https://www.edumedia-sciences.com/oembed.xml'},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://egliseinfo\\.catholique\\.fr/.*')
			]),
		url: 'http://egliseinfo.catholique.fr/api/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://embedarticles\\.com/.*')
			]),
		url: 'http://embedarticles.com/oembed/'
	},
		{schemes: _List_Nil, url: 'http://api.embed.ly/1/oembed'},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://ethfiddle\\.com/.*')
			]),
		url: 'https://ethfiddle.com/services/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://eyrie\\.io/board/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://eyrie\\.io/sparkfun/.*')
			]),
		url: 'https://eyrie.io/v1/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.facebook\\.com/.*/posts/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.facebook\\.com/photos/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.facebook\\.com/.*/photos/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.facebook\\.com/photo\\.php.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.facebook\\.com/photo\\.php'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.facebook\\.com/.*/activity/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.facebook\\.com/permalink\\.php'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.facebook\\.com/media/set\\?set=.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.facebook\\.com/questions/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.facebook\\.com/notes/.*/.*/.*')
			]),
		url: 'https://www.facebook.com/plugins/post/oembed.json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.facebook\\.com/.*/videos/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.facebook\\.com/video\\.php')
			]),
		url: 'https://www.facebook.com/plugins/video/oembed.json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://app\\.getfader\\.com/projects/.*/publish')
			]),
		url: 'https://app.getfader.com/api/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://faithlifetv\\.com/items/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://faithlifetv\\.com/items/resource/.*/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://faithlifetv\\.com/media/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://faithlifetv\\.com/media/assets/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://faithlifetv\\.com/media/resource/.*/.*')
			]),
		url: 'https://faithlifetv.com/api/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.fite\\.tv/watch/.*')
			]),
		url: 'https://www.fite.tv/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://flat\\.io/score/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.flat\\.io/score/.*')
			]),
		url: 'https://flat.io/services/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.flickr\\.com/photos/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://flic\\.kr/p/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.flickr\\.com/photos/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://flic\\.kr/p/.*')
			]),
		url: 'https://www.flickr.com/services/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://public\\.flourish\\.studio/visualisation/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://public\\.flourish\\.studio/story/.*')
			]),
		url: 'https://app.flourish.studio/api/v1/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://catapult\\.fontself\\.com/.*')
			]),
		url: 'https://oembed.fontself.com/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://fiso\\.foxsports\\.com\\.au/isomorphic-widget/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://fiso\\.foxsports\\.com\\.au/isomorphic-widget/.*')
			]),
		url: 'https://fiso.foxsports.com.au/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://framebuzz\\.com/v/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://framebuzz\\.com/v/.*')
			]),
		url: 'https://framebuzz.com/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.funnyordie\\.com/videos/.*')
			]),
		url: 'http://www.funnyordie.com/oembed.json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.geograph\\.org\\.uk/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.geograph\\.co\\.uk/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.geograph\\.ie/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.wikimedia\\.org/.*_geograph\\.org\\.uk_.*')
			]),
		url: 'http://api.geograph.org.uk/api/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.geograph\\.org\\.gg/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.geograph\\.org\\.je/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://channel-islands\\.geograph\\.org/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://channel-islands\\.geographs\\.org/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.channel\\.geographs\\.org/.*')
			]),
		url: 'http://www.geograph.org.gg/api/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://geo-en\\.hlipp\\.de/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://geo\\.hlipp\\.de/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://germany\\.geograph\\.org/.*')
			]),
		url: 'http://geo.hlipp.de/restapi.php/api/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://gty\\.im/.*')
			]),
		url: 'http://embed.gettyimages.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://gfycat\\.com/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.gfycat\\.com/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://gfycat\\.com/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.gfycat\\.com/.*')
			]),
		url: 'https://api.gfycat.com/v1/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.gifnote\\.com/play/.*')
			]),
		url: 'https://www.gifnote.com/services/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://giphy\\.com/gifs/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://gph\\.is/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://media\\.giphy\\.com/media/.*/giphy\\.gif')
			]),
		url: 'https://giphy.com/services/oembed'
	},
		{schemes: _List_Nil, url: 'https://gloria.tv/oembed/'},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://gtchannel\\.com/watch/.*')
			]),
		url: 'https://api.luminery.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://gyazo\\.com/.*')
			]),
		url: 'https://api.gyazo.com/api/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://hearthis\\.at/.*/.*/')
			]),
		url: 'https://hearthis.at/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://huffduffer\\.com/.*/.*')
			]),
		url: 'http://huffduffer.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.hulu\\.com/watch/.*')
			]),
		url: 'http://www.hulu.com/api/oembed.json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.ifixit\\.com/Guide/View/.*')
			]),
		url: 'http://www.ifixit.com/Embed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://ifttt\\.com/recipes/.*')
			]),
		url: 'http://www.ifttt.com/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://player\\.indacolive\\.com/player/jwp/clients/.*')
			]),
		url: 'https://player.indacolive.com/services/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://infogr\\.am/.*')
			]),
		url: 'https://infogr.am/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.infoveave\\.net/E/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.infoveave\\.net/P/.*')
			]),
		url: 'https://infoveave.net/services/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.injurymap\\.com/exercises/.*')
			]),
		url: 'https://www.injurymap.com/services/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.inoreader\\.com/oembed/')
			]),
		url: 'https://www.inoreader.com/oembed/api/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.inphood\\.com/.*')
			]),
		url: 'http://api.inphood.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://instagram\\.com/p/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://instagr\\.am/p/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.instagram\\.com/p/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.instagr\\.am/p/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://instagram\\.com/p/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://instagr\\.am/p/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.instagram\\.com/p/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.instagr\\.am/p/.*')
			]),
		url: 'https://api.instagram.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.isnare\\.com/.*')
			]),
		url: 'https://www.isnare.com/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://issuu\\.com/.*/docs/.*')
			]),
		url: 'https://issuu.com/oembed'
	},
		{schemes: _List_Nil, url: 'https://music.ivlis.kr/oembed'},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://tv\\.kakao\\.com/channel/.*/cliplink/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://tv\\.kakao\\.com/channel/v/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://tv\\.kakao\\.com/channel/.*/livelink/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://tv\\.kakao\\.com/channel/l/.*')
			]),
		url: 'https://tv.kakao.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.kickstarter\\.com/projects/.*')
			]),
		url: 'http://www.kickstarter.com/services/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.kidoju\\.com/en/x/.*/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.kidoju\\.com/fr/x/.*/.*')
			]),
		url: 'https://www.kidoju.com/api/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://kit\\.com/.*/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://kit\\.com/.*/.*')
			]),
		url: 'https://embed.kit.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.kitchenbowl\\.com/recipe/.*')
			]),
		url: 'http://www.kitchenbowl.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://jdr\\.knacki\\.info/meuh/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://jdr\\.knacki\\.info/meuh/.*')
			]),
		url: 'https://jdr.knacki.info/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://learningapps\\.org/.*')
			]),
		url: 'http://learningapps.org/oembed.php'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://pod\\.univ-lille\\.fr/video/.*')
			]),
		url: 'https://pod.univ-lille.fr/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://livestream\\.com/accounts/.*/events/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://livestream\\.com/accounts/.*/events/.*/videos/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://livestream\\.com/.*/events/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://livestream\\.com/.*/events/.*/videos/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://livestream\\.com/.*/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://livestream\\.com/.*/.*/videos/.*')
			]),
		url: 'https://livestream.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://app\\.ludus\\.one/.*')
			]),
		url: 'https://app.ludus.one/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://mathembed\\.com/latex\\?inputText=.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://mathembed\\.com/latex\\?inputText=.*')
			]),
		url: 'http://mathembed.com/oembed'
	},
		{schemes: _List_Nil, url: 'https://my.matterport.com/api/v1/models/oembed/'},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://me\\.me/i/.*')
			]),
		url: 'https://me.me/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://medienarchiv\\.zhdk\\.ch/entries/.*')
			]),
		url: 'https://medienarchiv.zhdk.ch/oembed.json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://meetup\\.com/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.meetup\\.com/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://meetup\\.com/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://meetu\\.ps/.*')
			]),
		url: 'https://api.meetup.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.mixcloud\\.com/.*/.*/'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.mixcloud\\.com/.*/.*/')
			]),
		url: 'https://www.mixcloud.com/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.mobypicture\\.com/user/.*/view/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://moby\\.to/.*')
			]),
		url: 'http://api.mobypicture.com/oEmbed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://beta\\.modelo\\.io/embedded/.*')
			]),
		url: 'https://portal.modelo.io/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://m-roll\\.morphcast\\.com/mroll/.*')
			]),
		url: 'https://m-roll.morphcast.com/service/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://musicboxmaniacs\\.com/explore/melody/.*')
			]),
		url: 'https://musicboxmaniacs.com/embed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://mybeweeg\\.com/w/.*')
			]),
		url: 'https://mybeweeg.com/services/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://namchey\\.com/embeds/.*')
			]),
		url: 'https://namchey.com/api/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.nanoo\\.tv/link/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://nanoo\\.tv/link/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.nanoo\\.pro/link/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://nanoo\\.pro/link/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.nanoo\\.tv/link/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://nanoo\\.tv/link/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.nanoo\\.pro/link/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://nanoo\\.pro/link/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://media\\.zhdk\\.ch/signatur/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://new\\.media\\.zhdk\\.ch/signatur/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://media\\.zhdk\\.ch/signatur/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://new\\.media\\.zhdk\\.ch/signatur/.*')
			]),
		url: 'https://www.nanoo.tv/services/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.nb\\.no/items/.*')
			]),
		url: 'https://api.nb.no/catalog/v1/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://naturalatlas\\.com/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://naturalatlas\\.com/.*/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://naturalatlas\\.com/.*/.*/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://naturalatlas\\.com/.*/.*/.*/.*')
			]),
		url: 'https://naturalatlas.com/oembed.json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.nfb\\.ca/film/.*')
			]),
		url: 'http://www.nfb.ca/remote/services/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.odds\\.com\\.au/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://odds\\.com\\.au/.*')
			]),
		url: 'https://www.odds.com.au/api/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://official\\.fm/tracks/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://official\\.fm/playlists/.*')
			]),
		url: 'http://official.fm/services/oembed.json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://omniscope\\.me/.*')
			]),
		url: 'https://omniscope.me/_global_/oembed/json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://on\\.aol\\.com/video/.*')
			]),
		url: 'http://on.aol.com/api'
	},
		{schemes: _List_Nil, url: 'https://www.ora.tv/oembed/*?format=json'},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://orbitvu\\.co/001/.*/ov3601/view'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://orbitvu\\.co/001/.*/ov3601/.*/view'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://orbitvu\\.co/001/.*/ov3602/.*/view'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://orbitvu\\.co/001/.*/2/orbittour/.*/view'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://orbitvu\\.co/001/.*/1/2/orbittour/.*/view'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://orbitvu\\.co/001/.*/ov3601/view'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://orbitvu\\.co/001/.*/ov3601/.*/view'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://orbitvu\\.co/001/.*/ov3602/.*/view'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://orbitvu\\.co/001/.*/2/orbittour/.*/view'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://orbitvu\\.co/001/.*/1/2/orbittour/.*/view')
			]),
		url: 'http://orbitvu.co/service/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.oumy\\.com/v/.*')
			]),
		url: 'https://www.oumy.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://outplayed\\.tv/media/.*')
			]),
		url: 'https://outplayed.tv/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://overflow\\.io/s/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://overflow\\.io/embed/.*')
			]),
		url: 'https://overflow.io/services/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://pastery\\.net/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://pastery\\.net/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.pastery\\.net/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.pastery\\.net/.*')
			]),
		url: 'https://www.pastery.net/oembed'
	},
		{schemes: _List_Nil, url: 'https://beta.pingvp.com.kpnis.nl/p/oembed.php'},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://store\\.pixdor\\.com/place-marker-widget/.*/show'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://store\\.pixdor\\.com/map/.*/show')
			]),
		url: 'https://store.pixdor.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.podbean\\.com/e/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.podbean\\.com/e/.*')
			]),
		url: 'https://api.podbean.com/v1/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.polldaddy\\.com/s/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.polldaddy\\.com/poll/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.polldaddy\\.com/ratings/.*')
			]),
		url: 'http://polldaddy.com/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://app\\.sellwithport\\.com/#/buyer/.*')
			]),
		url: 'https://api.sellwithport.com/v1.0/buyer/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://portfolium\\.com/entry/.*')
			]),
		url: 'https://api.portfolium.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://posixion\\.com/question/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://posixion\\.com/.*/question/.*')
			]),
		url: 'http://posixion.com/services/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.quiz\\.biz/quizz-.*\\.html')
			]),
		url: 'http://www.quiz.biz/api/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.quizz\\.biz/quizz-.*\\.html')
			]),
		url: 'http://www.quizz.biz/api/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://rapidengage\\.com/s/.*')
			]),
		url: 'https://rapidengage.com/api/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://reddit\\.com/r/.*/comments/.*/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.reddit\\.com/r/.*/comments/.*/.*')
			]),
		url: 'https://www.reddit.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://rwire\\.com/.*')
			]),
		url: 'http://publisher.releasewire.com/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://repl\\.it/@.*/.*')
			]),
		url: 'https://repl.it/data/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://repubhub\\.icopyright\\.net/freePost\\.act\\?.*')
			]),
		url: 'http://repubhub.icopyright.net/oembed.act'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.reverbnation\\.com/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.reverbnation\\.com/.*/songs/.*')
			]),
		url: 'https://www.reverbnation.com/oembed'
	},
		{schemes: _List_Nil, url: 'https://www.riffreporter.de/service/oembed'},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://roomshare\\.jp/post/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://roomshare\\.jp/en/post/.*')
			]),
		url: 'http://roomshare.jp/en/oembed.json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://roosterteeth\\.com/.*')
			]),
		url: 'https://roosterteeth.com/oembed'
	},
		{schemes: _List_Nil, url: 'https://rumble.com/api/Media/oembed.json'},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://videos\\.sapo\\.pt/.*')
			]),
		url: 'http://videos.sapo.pt/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://console\\.screen9\\.com/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.screen9\\.tv/.*')
			]),
		url: 'https://api.screen9.com/oembed'
	},
		{schemes: _List_Nil, url: 'https://api.screencast.com/external/oembed'},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.screenr\\.com/.*/')
			]),
		url: 'http://www.screenr.com/api/oembed.json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.scribblemaps\\.com/maps/view/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.scribblemaps\\.com/maps/view/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://scribblemaps\\.com/maps/view/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://scribblemaps\\.com/maps/view/.*')
			]),
		url: 'https://scribblemaps.com/api/services/oembed.json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.scribd\\.com/doc/.*')
			]),
		url: 'http://www.scribd.com/services/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://embed\\.sendtonews\\.com/oembed/.*')
			]),
		url: 'https://embed.sendtonews.com/services/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.shortnote\\.jp/view/notes/.*')
			]),
		url: 'https://www.shortnote.jp/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://shoudio\\.com/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://shoud\\.io/.*')
			]),
		url: 'http://shoudio.com/api/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://showtheway\\.io/to/.*')
			]),
		url: 'https://showtheway.io/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://simplecast\\.com/s/.*')
			]),
		url: 'https://simplecast.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://onsizzle\\.com/i/.*')
			]),
		url: 'https://onsizzle.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://sketchfab\\.com/models/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://sketchfab\\.com/models/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://sketchfab\\.com/.*/folders/.*')
			]),
		url: 'http://sketchfab.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.slideshare\\.net/.*/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://fr\\.slideshare\\.net/.*/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://de\\.slideshare\\.net/.*/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://es\\.slideshare\\.net/.*/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://pt\\.slideshare\\.net/.*/.*')
			]),
		url: 'http://www.slideshare.net/api/oembed/2'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://smashnotes\\.com/p/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://smashnotes\\.com/p/.*/e/.* - https://smashnotes\\.com/p/.*/e/.*/s/.*')
			]),
		url: 'https://smashnotes.com/services/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.smugmug\\.com/.*')
			]),
		url: 'http://api.smugmug.com/services/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.socialexplorer\\.com/.*/explore'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.socialexplorer\\.com/.*/view'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.socialexplorer\\.com/.*/edit'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.socialexplorer\\.com/.*/embed')
			]),
		url: 'https://www.socialexplorer.com/services/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://song\\.link/.*')
			]),
		url: 'https://song.link/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://soundcloud\\.com/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://soundcloud\\.com/.*')
			]),
		url: 'https://soundcloud.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://play\\.soundsgood\\.co/playlist/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://soundsgood\\.co/playlist/.*')
			]),
		url: 'https://play.soundsgood.co/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://speakerdeck\\.com/.*/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://speakerdeck\\.com/.*/.*')
			]),
		url: 'https://speakerdeck.com/oembed.json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://play\\.bespotful\\.com/.*')
			]),
		url: 'https://api.bespotful.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.spotify\\.com/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('spotify:.*')
			]),
		url: 'https://embed.spotify.com/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.spreaker\\.com/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.spreaker\\.com/.*')
			]),
		url: 'https://api.spreaker.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://purl\\.stanford\\.edu/.*')
			]),
		url: 'https://purl.stanford.edu/embed.json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://streamable\\.com/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://streamable\\.com/.*')
			]),
		url: 'https://api.streamable.com/oembed.json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://content\\.streamonecloud\\.net/embed/.*')
			]),
		url: 'https://content.streamonecloud.net/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.sutori\\.com/story/.*')
			]),
		url: 'https://www.sutori.com/api/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://sway\\.com/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.sway\\.com/.*')
			]),
		url: 'https://sway.com/api/v1.0/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://ted\\.com/talks/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://ted\\.com/talks/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.ted\\.com/talks/.*')
			]),
		url: 'https://www.ted.com/talks/oembed.json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.nytimes\\.com/svc/oembed'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://nytimes\\.com/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.nytimes\\.com/.*')
			]),
		url: 'https://www.nytimes.com/svc/oembed/json/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://theysaidso\\.com/image/.*')
			]),
		url: 'https://theysaidso.com/extensions/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.tickcounter\\.com/countdown/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.tickcounter\\.com/countup/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.tickcounter\\.com/ticker/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.tickcounter\\.com/worldclock/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.tickcounter\\.com/countdown/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.tickcounter\\.com/countup/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.tickcounter\\.com/ticker/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.tickcounter\\.com/worldclock/.*')
			]),
		url: 'https://www.tickcounter.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.toornament\\.com/tournaments/.*/information'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.toornament\\.com/tournaments/.*/registration/'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.toornament\\.com/tournaments/.*/matches/schedule'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.toornament\\.com/tournaments/.*/stages/.*/')
			]),
		url: 'https://widget.toornament.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.topy\\.se/image/.*')
			]),
		url: 'http://www.topy.se/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.tuxx\\.be/.*')
			]),
		url: 'https://www.tuxx.be/services/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.tvcf\\.co\\.kr/v/.*')
			]),
		url: 'http://www.tvcf.co.kr/services/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://clips\\.twitch\\.tv/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://clips\\.twitch\\.tv/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.twitch\\.tv/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.twitch\\.tv/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://twitch\\.tv/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://twitch\\.tv/.*')
			]),
		url: 'https://api.twitch.tv/v4/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://twitter\\.com/.*/status/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.twitter\\.com/.*/status/.*')
			]),
		url: 'https://publish.twitter.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://play\\.typecast\\.ai/s/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://play\\.typecast\\.ai/e/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://play\\.typecast\\.ai/.*')
			]),
		url: 'https://play.typecast.ai/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://player\\.ubideo\\.com/.*')
			]),
		url: 'https://player.ubideo.com/api/oembed.json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://map\\.cam\\.ac\\.uk/.*')
			]),
		url: 'https://map.cam.ac.uk/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.uol\\.com\\.br/view/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.uol\\.com\\.br/video/.*')
			]),
		url: 'https://mais.uol.com.br/apiuol/v3/oembed/view'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.ustream\\.tv/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.ustream\\.com/.*')
			]),
		url: 'http://www.ustream.tv/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.utposts\\.com/products/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.utposts\\.com/products/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://utposts\\.com/products/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://utposts\\.com/products/.*')
			]),
		url: 'https://www.utposts.com/api/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://uttles\\.com/uttle/.*')
			]),
		url: 'http://uttles.com/api/reply/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://veer\\.tv/videos/.*')
			]),
		url: 'https://api.veer.tv/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://veervr\\.tv/videos/.*')
			]),
		url: 'https://api.veervr.tv/oembed'
	},
		{schemes: _List_Nil, url: 'http://verse.com/services/oembed/'},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.vevo\\.com/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.vevo\\.com/.*')
			]),
		url: 'https://www.vevo.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.videojug\\.com/film/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.videojug\\.com/interview/.*')
			]),
		url: 'http://www.videojug.com/oembed.json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://vidl\\.it/.*')
			]),
		url: 'https://api.vidl.it/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://players\\.vidmizer\\.com/.*')
			]),
		url: 'https://app-v2.vidmizer.com/api/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://embed\\.vidyard\\.com/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://play\\.vidyard\\.com/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://share\\.vidyard\\.com/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.hubs\\.vidyard\\.com/.*')
			]),
		url: 'https://api.vidyard.com/dashboard/v1.1/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://vimeo\\.com/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://vimeo\\.com/album/.*/video/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://vimeo\\.com/channels/.*/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://vimeo\\.com/groups/.*/videos/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://vimeo\\.com/ondemand/.*/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://player\\.vimeo\\.com/video/.*')
			]),
		url: 'https://vimeo.com/api/oembed.json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://viziosphere\\.com/3dphoto.*')
			]),
		url: 'http://viziosphere.com/services/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://vlipsy\\.com/.*')
			]),
		url: 'https://vlipsy.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://www\\.vlive\\.tv/video/.*')
			]),
		url: 'https://www.vlive.tv/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://vlurb\\.co/video/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://vlurb\\.co/video/.*')
			]),
		url: 'https://vlurb.co/oembed.json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://article\\.voxsnap\\.com/.*/.*')
			]),
		url: 'https://data.voxsnap.com/oembed'
	},
		{schemes: _List_Nil, url: 'http://play.wecandeo.com/oembed'},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.wiredrive\\.com/.*')
			]),
		url: 'http://*.wiredrive.com/present-oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://fast\\.wistia\\.com/embed/iframe/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://fast\\.wistia\\.com/embed/playlists/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.wistia\\.com/medias/.*')
			]),
		url: 'https://fast.wistia.com/oembed.json'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.wizer\\.me/learn/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.wizer\\.me/learn/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.wizer\\.me/preview/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.wizer\\.me/preview/.*')
			]),
		url: 'http://app.wizer.me/api/oembed.json'
	},
		{schemes: _List_Nil, url: 'http://www.wootled.com/oembed'},
		{schemes: _List_Nil, url: 'http://public-api.wordpress.com/oembed/'},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://yesik\\.it/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://www\\.yesik\\.it/.*')
			]),
		url: 'http://yesik.it/s/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://.*\\.yfrog\\.com/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('http://yfrog\\.us/.*')
			]),
		url: 'http://www.yfrog.com/api/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.youtube\\.com/watch.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.youtube\\.com/v/.*'),
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://youtu\\.be/.*')
			]),
		url: 'https://www.youtube.com/oembed'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://.*\\.znipe\\.tv/.*')
			]),
		url: 'https://api.znipe.tv/v3/oembed/'
	},
		{
		schemes: _List_fromArray(
			[
				$dillonkearns$elm_oembed$Oembed$Provider$regex('https://reports\\.zoho\\.com/ZDBDataSheetView\\.cc\\?OBJID=1432535000000003002&STANDALONE=true&INTERVAL=120&DATATYPESYMBOL=false&REMTOOLBAR=false&SEARCHBOX=true&INCLUDETITLE=true&INCLUDEDESC=true&SHOWHIDEOPT=true')
			]),
		url: 'http://api.provider.com/oembed.json'
	}
	]);
var $elm_community$list_extra$List$Extra$find = F2(
	function (predicate, list) {
		find:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var first = list.a;
				var rest = list.b;
				if (predicate(first)) {
					return $elm$core$Maybe$Just(first);
				} else {
					var $temp$predicate = predicate,
						$temp$list = rest;
					predicate = $temp$predicate;
					list = $temp$list;
					continue find;
				}
			}
		}
	});
var $dillonkearns$elm_oembed$Oembed$Provider$lookup = F2(
	function (customProviders, inputUrl) {
		return A2(
			$elm$core$Maybe$map,
			function ($) {
				return $.url;
			},
			A2(
				$elm_community$list_extra$List$Extra$find,
				function (provider) {
					return A2(
						$elm$core$List$any,
						function (scheme) {
							return A2($elm$regex$Regex$contains, scheme, inputUrl);
						},
						provider.schemes);
				},
				_Utils_ap(customProviders, $dillonkearns$elm_oembed$Oembed$Provider$all)));
	});
var $dillonkearns$elm_oembed$Oembed$urlToIframe = F3(
	function (options, resourceUrl, oembedProviderUrl) {
		return A3(
			$elm$html$Html$node,
			'oembed-element',
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$core$Maybe$Just(
						A2($elm$html$Html$Attributes$attribute, 'url', oembedProviderUrl + ('?url=' + resourceUrl))),
						A2(
						$elm$core$Maybe$map,
						$elm$html$Html$Attributes$attribute('maxwidth'),
						A2(
							$elm$core$Maybe$map,
							$elm$core$String$fromInt,
							A2(
								$elm$core$Maybe$map,
								function ($) {
									return $.maxWidth;
								},
								options))),
						A2(
						$elm$core$Maybe$map,
						$elm$html$Html$Attributes$attribute('maxheight'),
						A2(
							$elm$core$Maybe$map,
							$elm$core$String$fromInt,
							A2(
								$elm$core$Maybe$map,
								function ($) {
									return $.maxHeight;
								},
								options)))
					])),
			_List_Nil);
	});
var $dillonkearns$elm_oembed$Oembed$view = F3(
	function (customProviders, options, resourceUrl) {
		return A2(
			$elm$core$Maybe$map,
			A2($dillonkearns$elm_oembed$Oembed$urlToIframe, options, resourceUrl),
			A2($dillonkearns$elm_oembed$Oembed$Provider$lookup, customProviders, resourceUrl));
	});
var $author$project$Lia$Markdown$Inline$View$oembed = F2(
	function (options, url) {
		return A2(
			$elm$core$Maybe$withDefault,
			$elm$html$Html$text('Couldn\'t find oembed provider for url ' + url),
			A3($dillonkearns$elm_oembed$Oembed$view, $author$project$Lia$Markdown$Inline$View$customProviders, options, url));
	});
var $elm$html$Html$Attributes$property = $elm$virtual_dom$VirtualDom$property;
var $elm$html$Html$source = _VirtualDom_node('source');
var $pablohirafuji$elm_qrcode$QRCode$Render$Svg$moduleSize = 5;
var $pablohirafuji$elm_qrcode$QRCode$Render$Svg$appendLastRect = function (_v0) {
	var lastRect = _v0.a;
	var rowLines = _v0.b;
	return A2(
		$elm$core$List$cons,
		'h' + $elm$core$String$fromInt(lastRect.width * $pablohirafuji$elm_qrcode$QRCode$Render$Svg$moduleSize),
		rowLines);
};
var $elm$svg$Svg$Attributes$d = _VirtualDom_attribute('d');
var $elm$svg$Svg$trustedNode = _VirtualDom_nodeNS('http://www.w3.org/2000/svg');
var $elm$svg$Svg$path = $elm$svg$Svg$trustedNode('path');
var $elm$svg$Svg$Attributes$shapeRendering = _VirtualDom_attribute('shape-rendering');
var $elm$svg$Svg$Attributes$stroke = _VirtualDom_attribute('stroke');
var $elm$svg$Svg$Attributes$strokeWidth = _VirtualDom_attribute('stroke-width');
var $elm$svg$Svg$Attributes$style = _VirtualDom_attribute('style');
var $elm$svg$Svg$svg = $elm$svg$Svg$trustedNode('svg');
var $pablohirafuji$elm_qrcode$QRCode$Render$Svg$toRowLines = F2(
	function (isDark, _v0) {
		var lastRect = _v0.a;
		var rowLines = _v0.b;
		return isDark ? ((!lastRect.space) ? _Utils_Tuple2(
			_Utils_update(
				lastRect,
				{width: lastRect.width + 1}),
			rowLines) : _Utils_Tuple2(
			{space: 0, width: 1},
			A2(
				$elm$core$List$cons,
				$elm$core$String$concat(
					_List_fromArray(
						[
							(lastRect.width > 0) ? ('h' + $elm$core$String$fromInt(lastRect.width * $pablohirafuji$elm_qrcode$QRCode$Render$Svg$moduleSize)) : '',
							'm',
							$elm$core$String$fromInt(lastRect.space * $pablohirafuji$elm_qrcode$QRCode$Render$Svg$moduleSize),
							' 0'
						])),
				rowLines))) : _Utils_Tuple2(
			_Utils_update(
				lastRect,
				{space: lastRect.space + 1}),
			rowLines);
	});
var $elm$svg$Svg$Attributes$transform = _VirtualDom_attribute('transform');
var $elm$svg$Svg$Attributes$viewBox = _VirtualDom_attribute('viewBox');
var $pablohirafuji$elm_qrcode$QRCode$Render$Svg$viewRow = F3(
	function (quietZoneSize, rowIndex, rowLines) {
		return A2(
			$elm$core$List$cons,
			'M0 ',
			A2(
				$elm$core$List$cons,
				$elm$core$String$fromInt(rowIndex * $pablohirafuji$elm_qrcode$QRCode$Render$Svg$moduleSize),
				rowLines));
	});
var $pablohirafuji$elm_qrcode$QRCode$Render$Svg$viewBase = F3(
	function (quietZoneSize, extraAttrs, matrix) {
		var quietZonePx = quietZoneSize * $pablohirafuji$elm_qrcode$QRCode$Render$Svg$moduleSize;
		var sizePx = $elm$core$String$fromInt(
			($elm$core$List$length(matrix) * $pablohirafuji$elm_qrcode$QRCode$Render$Svg$moduleSize) + (2 * quietZonePx));
		return A2(
			$elm$svg$Svg$svg,
			_Utils_ap(
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$viewBox('0 0 ' + (sizePx + (' ' + sizePx))),
						$elm$svg$Svg$Attributes$shapeRendering('crispEdges'),
						$elm$svg$Svg$Attributes$stroke('#000'),
						$elm$svg$Svg$Attributes$strokeWidth(
						$elm$core$String$fromInt($pablohirafuji$elm_qrcode$QRCode$Render$Svg$moduleSize) + 'px')
					]),
				extraAttrs),
			function (d) {
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								d,
								$elm$svg$Svg$Attributes$transform(
								'translate(' + ($elm$core$String$fromInt(quietZonePx) + (', ' + ($elm$core$String$fromFloat(quietZonePx + ($pablohirafuji$elm_qrcode$QRCode$Render$Svg$moduleSize / 2)) + ')')))),
								$elm$svg$Svg$Attributes$style('stroke-width: 5px')
							]),
						_List_Nil)
					]);
			}(
				$elm$svg$Svg$Attributes$d(
					$elm$core$String$concat(
						$elm$core$List$concat(
							A2(
								$elm$core$List$indexedMap,
								$pablohirafuji$elm_qrcode$QRCode$Render$Svg$viewRow(quietZoneSize),
								A2(
									$elm$core$List$map,
									A2(
										$elm$core$Basics$composeR,
										A2(
											$elm$core$List$foldl,
											$pablohirafuji$elm_qrcode$QRCode$Render$Svg$toRowLines,
											_Utils_Tuple2(
												{space: 0, width: 0},
												_List_Nil)),
										A2($elm$core$Basics$composeR, $pablohirafuji$elm_qrcode$QRCode$Render$Svg$appendLastRect, $elm$core$List$reverse)),
									matrix)))))));
	});
var $pablohirafuji$elm_qrcode$QRCode$Render$Svg$view = $pablohirafuji$elm_qrcode$QRCode$Render$Svg$viewBase(4);
var $pablohirafuji$elm_qrcode$QRCode$toSvg = F2(
	function (extraAttrs, _v0) {
		var matrix = _v0.a.matrix;
		return A2($pablohirafuji$elm_qrcode$QRCode$Render$Svg$view, extraAttrs, matrix);
	});
var $elm$html$Html$video = _VirtualDom_node('video');
var $author$project$Lia$Markdown$Effect$Script$Update$Edit = F2(
	function (a, b) {
		return {$: 'Edit', a: a, b: b};
	});
var $author$project$Lia$Markdown$Effect$Script$Update$EditCode = F2(
	function (a, b) {
		return {$: 'EditCode', a: a, b: b};
	});
var $author$project$Lia$Markdown$Code$Editor$editor = function (attr) {
	return A2(
		$elm$html$Html$node,
		'lia-editor',
		A2(
			$elm$core$List$cons,
			A2($elm$html$Html$Attributes$style, 'display', 'block'),
			attr));
};
var $author$project$Lia$Markdown$Code$Editor$boolean = function (prop) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$json$Json$Encode$bool,
		$elm$html$Html$Attributes$property(prop));
};
var $author$project$Lia$Markdown$Code$Editor$enableBasicAutocompletion = $author$project$Lia$Markdown$Code$Editor$boolean('enableBasicAutocompletion');
var $author$project$Lia$Markdown$Code$Editor$enableLiveAutocompletion = $author$project$Lia$Markdown$Code$Editor$boolean('enableLiveAutocompletion');
var $author$project$Lia$Markdown$Code$Editor$enableSnippets = $author$project$Lia$Markdown$Code$Editor$boolean('enableSnippets');
var $author$project$Lia$Markdown$Code$Editor$extensions = A2(
	$elm$core$Basics$composeR,
	$elm$json$Json$Encode$list($elm$json$Json$Encode$string),
	$elm$html$Html$Attributes$property('extensions'));
var $author$project$Lia$Markdown$Code$Editor$focusing = A2($author$project$Lia$Markdown$Code$Editor$boolean, 'focusing', true);
var $author$project$Lia$Markdown$Code$Editor$maxLines = A2(
	$elm$core$Basics$composeR,
	$elm$json$Json$Encode$int,
	$elm$html$Html$Attributes$property('maxLines'));
var $author$project$Lia$Markdown$Code$Editor$mode = A2(
	$elm$core$Basics$composeR,
	$elm$json$Json$Encode$string,
	$elm$html$Html$Attributes$property('mode'));
var $author$project$Lia$Markdown$Code$Editor$onBlur = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'editorFocus',
		A2(
			$elm$json$Json$Decode$andThen,
			function (b) {
				return b ? $elm$json$Json$Decode$fail('no blur') : $elm$json$Json$Decode$succeed(msg);
			},
			A2(
				$elm$json$Json$Decode$at,
				_List_fromArray(
					['target', 'focusing']),
				$elm$json$Json$Decode$bool)));
};
var $author$project$Lia$Markdown$Code$Editor$onChange = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'editorChanged',
		A2(
			$elm$json$Json$Decode$map,
			msg,
			A2(
				$elm$json$Json$Decode$at,
				_List_fromArray(
					['target', 'value']),
				$elm$json$Json$Decode$string)));
};
var $author$project$Lia$Markdown$Code$Editor$showGutter = $author$project$Lia$Markdown$Code$Editor$boolean('showGutter');
var $author$project$Lia$Markdown$Code$Editor$theme = A2(
	$elm$core$Basics$composeR,
	$elm$json$Json$Encode$string,
	$elm$html$Html$Attributes$property('theme'));
var $author$project$Lia$Markdown$Code$Editor$useSoftTabs = $author$project$Lia$Markdown$Code$Editor$boolean('useSoftTabs');
var $author$project$Lia$Markdown$Code$Editor$value = A2(
	$elm$core$Basics$composeR,
	$elm$json$Json$Encode$string,
	$elm$html$Html$Attributes$property('value'));
var $author$project$Lia$Markdown$Effect$Script$View$editor = F3(
	function (theme, id, code) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'position', 'fixed'),
					A2($elm$html$Html$Attributes$style, 'display', 'block'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'height', '100%'),
					A2($elm$html$Html$Attributes$style, 'top', '0'),
					A2($elm$html$Html$Attributes$style, 'left', '0'),
					A2($elm$html$Html$Attributes$style, 'right', '0'),
					A2($elm$html$Html$Attributes$style, 'bottom', '0'),
					A2($elm$html$Html$Attributes$style, 'background-color', 'rgba(0,0,0,0.6)'),
					A2($elm$html$Html$Attributes$style, 'z-index', '2'),
					A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
					A2($elm$html$Html$Attributes$style, 'overflow', 'auto')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
							A2($elm$html$Html$Attributes$style, 'top', '90px'),
							A2($elm$html$Html$Attributes$style, 'left', '50%'),
							A2($elm$html$Html$Attributes$style, 'width', '90%'),
							A2($elm$html$Html$Attributes$style, 'max-width', '800px'),
							A2($elm$html$Html$Attributes$style, 'transform', 'translate(-50%,0%)'),
							A2($elm$html$Html$Attributes$style, '-ms-transform', 'translate(-50%,0%)')
						]),
					_List_fromArray(
						[
							A2(
							$author$project$Lia$Markdown$Code$Editor$editor,
							_List_fromArray(
								[
									$author$project$Lia$Markdown$Code$Editor$onChange(
									$author$project$Lia$Markdown$Effect$Script$Update$EditCode(id)),
									$author$project$Lia$Markdown$Code$Editor$value(code),
									$author$project$Lia$Markdown$Code$Editor$theme(
									A2($elm$core$Maybe$withDefault, 'crimson_editor', theme)),
									$author$project$Lia$Markdown$Code$Editor$onBlur(
									A2($author$project$Lia$Markdown$Effect$Script$Update$Edit, false, id)),
									$author$project$Lia$Markdown$Code$Editor$focusing,
									$author$project$Lia$Markdown$Code$Editor$mode('javascript'),
									$author$project$Lia$Markdown$Code$Editor$maxLines(16),
									$author$project$Lia$Markdown$Code$Editor$showGutter(true),
									$author$project$Lia$Markdown$Code$Editor$useSoftTabs(false),
									$author$project$Lia$Markdown$Code$Editor$enableBasicAutocompletion(true),
									$author$project$Lia$Markdown$Code$Editor$enableLiveAutocompletion(true),
									$author$project$Lia$Markdown$Code$Editor$enableSnippets(true),
									$author$project$Lia$Markdown$Code$Editor$extensions(
									_List_fromArray(
										['language_tools']))
								]),
							_List_Nil)
						]))
				]));
	});
var $author$project$Lia$Markdown$Effect$Script$Update$Value = F3(
	function (a, b, c) {
		return {$: 'Value', a: a, b: b, c: c};
	});
var $author$project$Lia$Markdown$Effect$Script$Update$Activate = F2(
	function (a, b) {
		return {$: 'Activate', a: a, b: b};
	});
var $author$project$Lia$Utils$stopPropagationOn = F2(
	function (name, msg) {
		return A2(
			$elm$html$Html$Events$stopPropagationOn,
			name,
			$elm$json$Json$Decode$succeed(
				_Utils_Tuple2(msg, true)));
	});
var $author$project$Lia$Utils$blockKeydown = $author$project$Lia$Utils$stopPropagationOn('keydown');
var $author$project$Lia$Markdown$Effect$Script$Update$Delay = F2(
	function (a, b) {
		return {$: 'Delay', a: a, b: b};
	});
var $elm$html$Html$Events$onBlur = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'blur',
		$elm$json$Json$Decode$succeed(msg));
};
var $author$project$Lia$Markdown$Effect$Script$View$onActivate = function (bool) {
	return A2(
		$elm$core$Basics$composeR,
		$author$project$Lia$Markdown$Effect$Script$Update$Activate(bool),
		A2(
			$elm$core$Basics$composeR,
			$author$project$Lia$Markdown$Effect$Script$Update$Delay(200),
			bool ? $elm$html$Html$Events$onClick : $elm$html$Html$Events$onBlur));
};
var $author$project$Lia$Utils$isEnter = F2(
	function (msg, code) {
		return (code === 13) ? $elm$json$Json$Decode$succeed(msg) : $elm$json$Json$Decode$fail('not ENTER');
	});
var $elm$html$Html$Events$keyCode = A2($elm$json$Json$Decode$field, 'keyCode', $elm$json$Json$Decode$int);
var $author$project$Lia$Utils$onEnter = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'keyup',
		A2(
			$elm$json$Json$Decode$andThen,
			$author$project$Lia$Utils$isEnter(msg),
			$elm$html$Html$Events$keyCode));
};
var $author$project$Lia$Markdown$Effect$Script$Input$type_ = function (t) {
	switch (t.$) {
		case 'Button_':
			return 'button';
		case 'Checkbox_':
			return 'checkbox';
		case 'Color_':
			return 'color';
		case 'Date_':
			return 'date';
		case 'DatetimeLocal_':
			return 'datetime-local';
		case 'Email_':
			return 'email';
		case 'File_':
			return 'file';
		case 'Hidden_':
			return 'hidden';
		case 'Image_':
			return 'image';
		case 'Month_':
			return 'month';
		case 'Number_':
			return 'number';
		case 'Password_':
			return 'password';
		case 'Radio_':
			return 'radio';
		case 'Range_':
			return 'range';
		case 'Search_':
			return 'search';
		case 'Select_':
			return 'select';
		case 'Tel_':
			return 'tel';
		case 'Text_':
			return 'text';
		case 'Textarea_':
			return 'textarea';
		case 'Time_':
			return 'time';
		case 'Url_':
			return 'url';
		default:
			return 'week';
	}
};
var $author$project$Lia$Markdown$Effect$Script$View$base = F4(
	function (input_, id, attr, value) {
		return A2(
			$elm$html$Html$span,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$input,
					A2(
						$elm$core$List$append,
						_List_fromArray(
							[
								$elm$html$Html$Events$onInput(
								A2($author$project$Lia$Markdown$Effect$Script$Update$Value, id, input_.updateOnChange)),
								$elm$html$Html$Attributes$type_(
								A2(
									$elm$core$Maybe$withDefault,
									'text',
									A2($elm$core$Maybe$map, $author$project$Lia$Markdown$Effect$Script$Input$type_, input_.type_))),
								$elm$html$Html$Attributes$value(value),
								A2($author$project$Lia$Markdown$Effect$Script$View$onActivate, false, id),
								$elm$html$Html$Attributes$id('lia-focus'),
								$author$project$Lia$Utils$blockKeydown($author$project$Lia$Markdown$Effect$Script$Update$NoOp),
								$author$project$Lia$Utils$onEnter(
								A2($author$project$Lia$Markdown$Effect$Script$Update$Activate, false, id))
							]),
						A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-script', attr)),
					_List_Nil),
					$elm$html$Html$text(' ')
				]));
	});
var $author$project$Lia$Markdown$Effect$Script$Update$Checkbox = F3(
	function (a, b, c) {
		return {$: 'Checkbox', a: a, b: b, c: c};
	});
var $elm$html$Html$Attributes$autofocus = $elm$html$Html$Attributes$boolProperty('autofocus');
var $elm$html$Html$Attributes$checked = $elm$html$Html$Attributes$boolProperty('checked');
var $elm$html$Html$Events$targetChecked = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'checked']),
	$elm$json$Json$Decode$bool);
var $elm$html$Html$Events$onCheck = function (tagger) {
	return A2(
		$elm$html$Html$Events$on,
		'change',
		A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetChecked));
};
var $author$project$Lia$Markdown$Effect$Script$View$checkbox = F4(
	function (updateOnChange, id, value, _v0) {
		var list = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			$author$project$Lia$Markdown$Effect$Script$Input$decodeList(value));
		return A2(
			$elm$core$Basics$composeR,
			$elm$core$List$concatMap(
				function (o) {
					return _List_fromArray(
						[
							$elm$html$Html$text(' ' + (o + ' ')),
							A2(
							$elm$html$Html$input,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$value(o),
									$elm$html$Html$Attributes$type_('checkbox'),
									$elm$html$Html$Events$onCheck(
									$elm$core$Basics$always(
										A3($author$project$Lia$Markdown$Effect$Script$Update$Checkbox, id, updateOnChange, o))),
									$elm$html$Html$Attributes$checked(
									A2($elm$core$List$member, o, list)),
									A2($author$project$Lia$Markdown$Effect$Script$View$onActivate, false, id),
									$elm$html$Html$Attributes$autofocus(true)
								]),
							_List_Nil),
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('lia-check-btn')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('check')
								]))
						]);
				}),
			$elm$html$Html$span(_List_Nil));
	});
var $author$project$Lia$Markdown$Effect$Script$Update$Radio = F3(
	function (a, b, c) {
		return {$: 'Radio', a: a, b: b, c: c};
	});
var $author$project$Lia$Markdown$Effect$Script$View$radio = F4(
	function (updateOnChange, id, value, _v0) {
		return A2(
			$elm$core$Basics$composeR,
			$elm$core$List$concatMap(
				function (o) {
					return _List_fromArray(
						[
							$elm$html$Html$text(' ' + (o + ' ')),
							A2(
							$elm$html$Html$input,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$value(o),
									$elm$html$Html$Attributes$type_('radio'),
									$elm$html$Html$Events$onCheck(
									$elm$core$Basics$always(
										A3($author$project$Lia$Markdown$Effect$Script$Update$Radio, id, updateOnChange, o))),
									$elm$html$Html$Attributes$checked(
									_Utils_eq(o, value)),
									A2($author$project$Lia$Markdown$Effect$Script$View$onActivate, false, id),
									$elm$html$Html$Attributes$autofocus(true)
								]),
							_List_Nil),
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('lia-radio-btn')
								]),
							_List_Nil)
						]);
				}),
			$elm$html$Html$span(_List_Nil));
	});
var $author$project$Lia$Markdown$Effect$Script$Update$Click = function (a) {
	return {$: 'Click', a: a};
};
var $andre_dietrich$elm_conditional$Conditional$apply2If = F4(
	function (_function, conditionMet, a, b) {
		return conditionMet ? A2(_function, a, b) : b;
	});
var $andre_dietrich$elm_conditional$Conditional$List$addIf = $andre_dietrich$elm_conditional$Conditional$apply2If($elm$core$List$cons);
var $author$project$Lia$Markdown$Effect$Script$View$class = function (node) {
	return ((!_Utils_eq(node.input.type_, $elm$core$Maybe$Nothing)) && node.modify) ? 'lia-script-with-border' : ((!_Utils_eq(node.input.type_, $elm$core$Maybe$Nothing)) ? 'lia-script-border' : (node.modify ? 'lia-script' : ''));
};
var $author$project$Lia$Markdown$Effect$Script$Types$isError = function (stdout) {
	if (stdout.$ === 'Error') {
		return true;
	} else {
		return false;
	}
};
var $elm$html$Html$Events$onDoubleClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'dblclick',
		$elm$json$Json$Decode$succeed(msg));
};
var $author$project$Lia$Markdown$Effect$Script$View$onEdit = function (bool) {
	return A2(
		$elm$core$Basics$composeR,
		$author$project$Lia$Markdown$Effect$Script$Update$Edit(bool),
		bool ? $elm$html$Html$Events$onDoubleClick : A2(
			$elm$core$Basics$composeR,
			$author$project$Lia$Markdown$Effect$Script$Update$Delay(300),
			$elm$html$Html$Events$onBlur));
};
var $author$project$Lia$Markdown$Effect$Script$Intl$node = F2(
	function (attr, value) {
		return A3(
			$elm$html$Html$node,
			'lia-format',
			A2(
				$elm$core$List$cons,
				A2(
					$elm$html$Html$Attributes$property,
					'value',
					$elm$json$Json$Encode$string(value)),
				$author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr)),
			_List_fromArray(
				[
					$elm$html$Html$text(value)
				]));
	});
var $author$project$Lia$Markdown$Effect$Script$Intl$view = function (intl) {
	if (intl.$ === 'Nothing') {
		return $elm$html$Html$text;
	} else {
		var attr = intl.a;
		return $author$project$Lia$Markdown$Effect$Script$Intl$node(attr);
	}
};
var $author$project$Lia$Markdown$Effect$Script$View$script = F5(
	function (config, withStyling, attr, id, node) {
		var _v0 = node.result;
		if (_v0.$ === 'Nothing') {
			return $elm$html$Html$text('');
		} else {
			var result = _v0.a;
			return A2(
				$elm$html$Html$span,
				A3(
					$andre_dietrich$elm_conditional$Conditional$List$addIf,
					(!_Utils_eq(
						node.input.type_,
						$elm$core$Maybe$Just($author$project$Lia$Markdown$Effect$Script$Input$Button_))) && (!_Utils_eq(node.input.type_, $elm$core$Maybe$Nothing)),
					A2($author$project$Lia$Markdown$Effect$Script$View$onActivate, true, id),
					A3(
						$andre_dietrich$elm_conditional$Conditional$List$addIf,
						$author$project$Lia$Markdown$Effect$Script$Types$isError(result),
						A2($elm$html$Html$Attributes$style, 'color', 'red'),
						A3(
							$andre_dietrich$elm_conditional$Conditional$List$addIf,
							node.modify,
							A2($author$project$Lia$Markdown$Effect$Script$View$onEdit, true, id),
							A2(
								$elm$core$List$append,
								function () {
									var _v1 = node.input.type_;
									if (_v1.$ === 'Just') {
										if (_v1.a.$ === 'Button_') {
											var _v2 = _v1.a;
											return _List_fromArray(
												[
													$elm$html$Html$Events$onClick(
													$author$project$Lia$Markdown$Effect$Script$Update$Click(id)),
													A2($elm$html$Html$Attributes$style, 'cursor', 'pointer')
												]);
										} else {
											return _List_fromArray(
												[
													A2($elm$html$Html$Attributes$style, 'cursor', 'cell')
												]);
										}
									} else {
										return _List_Nil;
									}
								}(),
								A3(
									$andre_dietrich$elm_conditional$Conditional$List$addIf,
									!withStyling,
									A2($elm$html$Html$Attributes$style, 'margin', '5px'),
									A2(
										$author$project$Lia$Markdown$HTML$Attributes$annotation,
										withStyling ? $author$project$Lia$Markdown$Effect$Script$View$class(node) : '',
										attr)))))),
				_List_fromArray(
					[
						function () {
						switch (result.$) {
							case 'Text':
								var str = result.a;
								return A2($author$project$Lia$Markdown$Effect$Script$Intl$view, node.intl, str);
							case 'Error':
								var str = result.a;
								return $elm$html$Html$text(str);
							case 'HTML':
								var str = result.a;
								return A2(
									$elm$html$Html$span,
									_List_fromArray(
										[
											A2(
											$elm$html$Html$Attributes$property,
											'innerHTML',
											$elm$json$Json$Encode$string(str))
										]),
									_List_Nil);
							default:
								var lia = result.a;
								var _v4 = config.view;
								if (_v4.$ === 'Just') {
									var inline = _v4.a;
									return A2(
										$elm$html$Html$span,
										_List_Nil,
										A2(inline, id, lia));
								} else {
									return $elm$html$Html$text('todo');
								}
						}
					}()
					]));
		}
	});
var $author$project$Lia$Markdown$Effect$Script$View$attributes = F3(
	function (updateOnChange, id, value) {
		return A2(
			$elm$core$Basics$composeR,
			$author$project$Lia$Markdown$HTML$Attributes$annotation(''),
			$elm$core$List$append(
				_List_fromArray(
					[
						$elm$html$Html$Events$onInput(
						A2($author$project$Lia$Markdown$Effect$Script$Update$Value, id, updateOnChange)),
						A2($author$project$Lia$Markdown$Effect$Script$View$onActivate, false, id),
						$elm$html$Html$Attributes$value(value),
						$elm$html$Html$Attributes$id('lia-focus'),
						$author$project$Lia$Utils$blockKeydown($author$project$Lia$Markdown$Effect$Script$Update$NoOp)
					])));
	});
var $elm$html$Html$option = _VirtualDom_node('option');
var $elm$html$Html$select = _VirtualDom_node('select');
var $author$project$Lia$Markdown$Effect$Script$View$select = F3(
	function (id, value, attr) {
		return A2(
			$elm$core$Basics$composeR,
			$elm$core$List$map(
				function (o) {
					return A2(
						$elm$html$Html$option,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$value(o)
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(o)
							]));
				}),
			$elm$html$Html$select(
				A4($author$project$Lia$Markdown$Effect$Script$View$attributes, true, id, value, attr)));
	});
var $author$project$Lia$Markdown$Effect$Script$Update$Reset = function (a) {
	return {$: 'Reset', a: a};
};
var $author$project$Lia$Markdown$Effect$Script$View$reset = function (id) {
	return A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('lia-btn--hint'),
				A2($elm$html$Html$Attributes$style, 'position', 'relative'),
				A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
				$elm$html$Html$Events$onClick(
				$author$project$Lia$Markdown$Effect$Script$Update$Reset(id))
			]),
		_List_fromArray(
			[
				$elm$html$Html$text('clear')
			]));
};
var $author$project$Lia$Markdown$Effect$Script$View$span = F5(
	function (config, attr, id, node, control) {
		return A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class(
					$author$project$Lia$Markdown$Effect$Script$View$class(node))
				]),
			_List_fromArray(
				[
					$author$project$Lia$Markdown$Effect$Script$View$reset(id),
					control,
					A5($author$project$Lia$Markdown$Effect$Script$View$script, config, false, attr, id, node)
				]));
	});
var $elm$html$Html$textarea = _VirtualDom_node('textarea');
var $author$project$Lia$Markdown$Effect$Script$View$textarea = F4(
	function (id, value, attr, updateOnChange) {
		return A2(
			$elm$html$Html$textarea,
			A4($author$project$Lia$Markdown$Effect$Script$View$attributes, updateOnChange, id, value, attr),
			_List_Nil);
	});
var $author$project$Lia$Markdown$Effect$Script$View$input = F4(
	function (config, attr, id, node) {
		var _v0 = node.input.type_;
		if (_v0.$ === 'Just') {
			switch (_v0.a.$) {
				case 'Button_':
					var _v1 = _v0.a;
					return A5($author$project$Lia$Markdown$Effect$Script$View$script, config, true, attr, id, node);
				case 'Checkbox_':
					if (!_v0.a.a.b) {
						return A5(
							$author$project$Lia$Markdown$Effect$Script$View$span,
							config,
							attr,
							id,
							node,
							A2(
								$elm$html$Html$span,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$elm$html$Html$input,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$checked(node.input.value === 'true'),
												$elm$html$Html$Attributes$type_('checkbox'),
												A2($author$project$Lia$Markdown$Effect$Script$View$onActivate, false, id),
												$elm$html$Html$Attributes$id('lia-focus'),
												$elm$html$Html$Events$onCheck(
												function (b) {
													return A3(
														$author$project$Lia$Markdown$Effect$Script$Update$Value,
														id,
														node.input.updateOnChange,
														b ? 'true' : 'false');
												})
											]),
										_List_Nil),
										A2(
										$elm$html$Html$span,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('lia-check-btn'),
												A2($elm$html$Html$Attributes$style, 'margin', '0px 4px 0px 4px')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text('check')
											]))
									])));
					} else {
						var options = _v0.a.a;
						return A5(
							$author$project$Lia$Markdown$Effect$Script$View$span,
							config,
							attr,
							id,
							node,
							A5($author$project$Lia$Markdown$Effect$Script$View$checkbox, node.input.updateOnChange, id, node.input.value, attr, options));
					}
				case 'Radio_':
					var options = _v0.a.a;
					return A5(
						$author$project$Lia$Markdown$Effect$Script$View$span,
						config,
						attr,
						id,
						node,
						A5($author$project$Lia$Markdown$Effect$Script$View$radio, node.input.updateOnChange, id, node.input.value, attr, options));
				case 'Select_':
					var options = _v0.a.a;
					return A5(
						$author$project$Lia$Markdown$Effect$Script$View$span,
						config,
						attr,
						id,
						node,
						A4($author$project$Lia$Markdown$Effect$Script$View$select, id, node.input.value, attr, options));
				case 'Textarea_':
					var _v2 = _v0.a;
					return A5(
						$author$project$Lia$Markdown$Effect$Script$View$span,
						config,
						attr,
						id,
						node,
						A4($author$project$Lia$Markdown$Effect$Script$View$textarea, id, node.input.value, attr, node.input.updateOnChange));
				default:
					return A5(
						$author$project$Lia$Markdown$Effect$Script$View$span,
						config,
						attr,
						id,
						node,
						A4($author$project$Lia$Markdown$Effect$Script$View$base, node.input, id, attr, node.input.value));
			}
		} else {
			return A5($author$project$Lia$Markdown$Effect$Script$View$script, config, true, attr, id, node);
		}
	});
var $author$project$Lia$Markdown$Effect$Script$Input$isHidden = A2(
	$elm$core$Basics$composeR,
	function ($) {
		return $.type_;
	},
	$elm$core$Basics$eq(
		$elm$core$Maybe$Just($author$project$Lia$Markdown$Effect$Script$Input$Hidden_)));
var $author$project$Lia$Markdown$Effect$Script$View$view = F3(
	function (config, id, attr) {
		var _v0 = A2($elm$core$Array$get, id, config.scripts);
		if (_v0.$ === 'Just') {
			var node = _v0.a;
			var _v1 = node.result;
			if (_v1.$ === 'Just') {
				return node.edit ? A2(
					$elm$html$Html$span,
					_List_Nil,
					_List_fromArray(
						[
							A3($author$project$Lia$Markdown$Effect$Script$View$editor, config.theme, id, node.script),
							$author$project$Lia$Markdown$Effect$Script$Input$isHidden(node.input) ? $elm$html$Html$text('') : A5($author$project$Lia$Markdown$Effect$Script$View$script, config, true, attr, id, node)
						])) : ($author$project$Lia$Markdown$Effect$Script$Input$isHidden(node.input) ? $elm$html$Html$text('') : (node.input.active ? A4($author$project$Lia$Markdown$Effect$Script$View$input, config, attr, id, node) : A5($author$project$Lia$Markdown$Effect$Script$View$script, config, true, attr, id, node)));
			} else {
				return $elm$html$Html$text('');
			}
		} else {
			return $elm$html$Html$text('');
		}
	});
var $author$project$Lia$Markdown$HTML$View$view = F4(
	function (containerX, fn, attr, obj) {
		if (obj.$ === 'Node') {
			var name = obj.a;
			var attrs = obj.b;
			var children = obj.c;
			return A3(
				$elm$html$Html$node,
				name,
				$author$project$Lia$Markdown$HTML$Attributes$toAttribute(
					A2($elm$core$List$append, attrs, attr)),
				A2($elm$core$List$map, fn, children));
		} else {
			var content = obj.a;
			return A2(
				containerX,
				_List_fromArray(
					[
						A2(
						$elm$html$Html$Attributes$property,
						'innerHTML',
						$elm$json$Json$Encode$string(content))
					]),
				_List_Nil);
		}
	});
var $author$project$Lia$Markdown$Inline$View$figure = F3(
	function (config, title_, element) {
		if (title_.$ === 'Nothing') {
			return element;
		} else {
			var caption = title_.a;
			return A2(
				$elm$html$Html$figure,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'margin', '0px'),
						A2($elm$html$Html$Attributes$style, 'display', 'inline-table')
					]),
				_List_fromArray(
					[
						element,
						A2(
						$elm$html$Html$figcaption,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'display', 'table-caption'),
								A2($elm$html$Html$Attributes$style, 'caption-side', 'bottom')
							]),
						A2($author$project$Lia$Markdown$Inline$View$viewer, config, caption))
					]));
		}
	});
var $author$project$Lia$Markdown$Inline$View$reference = F3(
	function (config, ref, attr) {
		switch (ref.$) {
			case 'Link':
				var alt_ = ref.a;
				var url_ = ref.b;
				var title_ = ref.c;
				return A5($author$project$Lia$Markdown$Inline$View$view_url, config, alt_, url_, title_, attr);
			case 'Mail':
				var alt_ = ref.a;
				var url_ = ref.b;
				var title_ = ref.c;
				return A5($author$project$Lia$Markdown$Inline$View$view_url, config, alt_, url_, title_, attr);
			case 'Image':
				var alt_ = ref.a;
				var url_ = ref.b;
				var title_ = ref.c;
				return A3(
					$author$project$Lia$Markdown$Inline$View$figure,
					config,
					title_,
					A5($author$project$Lia$Markdown$Inline$View$img, config, attr, alt_, url_, title_));
			case 'Audio':
				var alt_ = ref.a;
				var _v2 = ref.b;
				var tube = _v2.a;
				var url_ = _v2.b;
				var title_ = ref.c;
				return A3(
					$author$project$Lia$Markdown$Inline$View$figure,
					config,
					title_,
					tube ? A2(
						$elm$html$Html$iframe,
						A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$src(url_),
							A2(
								$elm$core$List$cons,
								A2($elm$html$Html$Attributes$attribute, 'allowfullscreen', ''),
								A2(
									$elm$core$List$cons,
									A2($author$project$Lia$Markdown$Inline$View$alt, config, alt_),
									A2(
										$elm$core$List$cons,
										A2($elm$html$Html$Attributes$attribute, 'allow', 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture'),
										A2(
											$elm$core$List$cons,
											A2($author$project$Lia$Markdown$Inline$View$title, config, title_),
											A2(
												$elm$core$List$cons,
												A2($elm$html$Html$Attributes$style, 'width', '100%'),
												A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-audio', attr))))))),
						_List_Nil) : A2(
						$elm$html$Html$audio,
						A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$controls(true),
							A2(
								$elm$core$List$cons,
								A2($author$project$Lia$Markdown$Inline$View$title, config, title_),
								A2(
									$elm$core$List$cons,
									A2($author$project$Lia$Markdown$Inline$View$alt, config, alt_),
									A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-audio', attr)))),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$source,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$src(url_)
									]),
								_List_Nil)
							])));
			case 'Movie':
				var alt_ = ref.a;
				var _v3 = ref.b;
				var tube = _v3.a;
				var url_ = _v3.b;
				var title_ = ref.c;
				return A3(
					$author$project$Lia$Markdown$Inline$View$figure,
					config,
					title_,
					tube ? A2(
						$elm$html$Html$iframe,
						A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$src(url_),
							A2(
								$elm$core$List$cons,
								A2($elm$html$Html$Attributes$attribute, 'allowfullscreen', ''),
								A2(
									$elm$core$List$cons,
									A2($author$project$Lia$Markdown$Inline$View$alt, config, alt_),
									A2(
										$elm$core$List$cons,
										A2($elm$html$Html$Attributes$attribute, 'allow', 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture'),
										A2(
											$elm$core$List$cons,
											A2($author$project$Lia$Markdown$Inline$View$title, config, title_),
											A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-movie', attr)))))),
						A2($author$project$Lia$Markdown$Inline$View$viewer, config, alt_)) : A2(
						$elm$html$Html$video,
						A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$controls(true),
							A2(
								$elm$core$List$cons,
								A2($author$project$Lia$Markdown$Inline$View$alt, config, alt_),
								A2(
									$elm$core$List$cons,
									A2($author$project$Lia$Markdown$Inline$View$title, config, title_),
									A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-movie', attr)))),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$source,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$src(url_)
									]),
								_List_Nil)
							])));
			case 'Embed':
				var url = ref.b;
				return A2($author$project$Lia$Markdown$Inline$View$oembed, $elm$core$Maybe$Nothing, url);
			case 'Preview_Lia':
				var url = ref.a;
				return A3(
					$elm$html$Html$node,
					'preview-lia',
					A2(
						$elm$core$List$cons,
						A2($elm$html$Html$Attributes$attribute, 'src', url),
						A2($author$project$Lia$Markdown$HTML$Attributes$annotation, '', attr)),
					_List_Nil);
			case 'Preview_Link':
				var url = ref.a;
				return A3(
					$elm$html$Html$node,
					'preview-link',
					A2(
						$elm$core$List$cons,
						A2($elm$html$Html$Attributes$attribute, 'src', url),
						A2($author$project$Lia$Markdown$HTML$Attributes$annotation, '', attr)),
					_List_Nil);
			default:
				var url = ref.a;
				var title_ = ref.b;
				return A3(
					$author$project$Lia$Markdown$Inline$View$figure,
					config,
					title_,
					A2(
						$elm$html$Html$a,
						A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$href(url),
							A2(
								$elm$core$List$cons,
								A2($author$project$Lia$Markdown$Inline$View$title, config, title_),
								A2(
									$elm$core$List$cons,
									A2($elm$html$Html$Attributes$style, 'width', '300px'),
									A2(
										$elm$core$List$cons,
										A2($elm$html$Html$Attributes$style, 'display', 'inline-block'),
										A2(
											$elm$core$List$cons,
											A2($elm$html$Html$Attributes$style, 'background-color', 'white'),
											A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-link', attr)))))),
						_List_fromArray(
							[
								A2(
								$elm$core$Result$withDefault,
								$elm$html$Html$text('Error while encoding to QRCode.'),
								A2(
									$elm$core$Result$map,
									$pablohirafuji$elm_qrcode$QRCode$toSvg(_List_Nil),
									$pablohirafuji$elm_qrcode$QRCode$fromString(url)))
							])));
		}
	});
var $author$project$Lia$Markdown$Inline$View$view = F2(
	function (config, element) {
		view:
		while (true) {
			switch (element.$) {
				case 'Bold':
					var e = element.a;
					var attr = element.b;
					return A2(
						$elm$html$Html$b,
						A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-bold', attr),
						_List_fromArray(
							[
								A2($author$project$Lia$Markdown$Inline$View$view, config, e)
							]));
				case 'Italic':
					var e = element.a;
					var attr = element.b;
					return A2(
						$elm$html$Html$em,
						A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-italic', attr),
						_List_fromArray(
							[
								A2($author$project$Lia$Markdown$Inline$View$view, config, e)
							]));
				case 'Strike':
					var e = element.a;
					var attr = element.b;
					return A2(
						$elm$html$Html$s,
						A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-strike', attr),
						_List_fromArray(
							[
								A2($author$project$Lia$Markdown$Inline$View$view, config, e)
							]));
				case 'Underline':
					var e = element.a;
					var attr = element.b;
					return A2(
						$elm$html$Html$u,
						A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-underline', attr),
						_List_fromArray(
							[
								A2($author$project$Lia$Markdown$Inline$View$view, config, e)
							]));
				case 'Superscript':
					var e = element.a;
					var attr = element.b;
					return A2(
						$elm$html$Html$sup,
						A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-superscript', attr),
						_List_fromArray(
							[
								A2($author$project$Lia$Markdown$Inline$View$view, config, e)
							]));
				case 'Verbatim':
					var e = element.a;
					var attr = element.b;
					return A2(
						$elm$html$Html$code,
						A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-code lia-inline', attr),
						_List_fromArray(
							[
								$elm$html$Html$text(e)
							]));
				case 'Ref':
					var e = element.a;
					var attr = element.b;
					return A3($author$project$Lia$Markdown$Inline$View$reference, config, e, attr);
				case 'FootnoteMark':
					var e = element.a;
					var attr = element.b;
					return A2(
						$author$project$Lia$Markdown$Footnote$View$inline,
						e,
						$author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr));
				case 'Container':
					var list = element.a;
					var attr = element.b;
					return A2(
						$elm$html$Html$span,
						A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-container', attr),
						A2(
							$elm$core$List$map,
							$author$project$Lia$Markdown$Inline$View$view(config),
							list));
				case 'IHTML':
					var node = element.a;
					var attr = element.b;
					return A4(
						$author$project$Lia$Markdown$HTML$View$view,
						$elm$html$Html$span,
						$author$project$Lia$Markdown$Inline$View$view(config),
						attr,
						node);
				case 'EInline':
					var e = element.a;
					var attr = element.b;
					return A4(
						$author$project$Lia$Markdown$Effect$View$inline,
						config,
						attr,
						e,
						A2($author$project$Lia$Markdown$Inline$View$viewer, config, e.content));
				case 'Script':
					var id = element.a;
					var attr = element.b;
					return A3($author$project$Lia$Markdown$Effect$Script$View$view, config, id, attr);
				case 'Symbol':
					if (!element.b.b) {
						var e = element.a;
						return $elm$html$Html$text(e);
					} else {
						var e = element.a;
						var attr = element.b;
						var $temp$config = config,
							$temp$element = A2(
							$author$project$Lia$Markdown$Inline$Types$Container,
							_List_fromArray(
								[
									A2($author$project$Lia$Markdown$Inline$Types$Symbol, e, _List_Nil)
								]),
							attr);
						config = $temp$config;
						element = $temp$element;
						continue view;
					}
				case 'Chars':
					if (!element.b.b) {
						var e = element.a;
						return $elm$html$Html$text(e);
					} else {
						var e = element.a;
						var attr = element.b;
						var $temp$config = config,
							$temp$element = A2(
							$author$project$Lia$Markdown$Inline$Types$Container,
							_List_fromArray(
								[
									A2($author$project$Lia$Markdown$Inline$Types$Chars, e, _List_Nil)
								]),
							attr);
						config = $temp$config;
						element = $temp$element;
						continue view;
					}
				default:
					if (!element.c.b) {
						var mode_ = element.a;
						var e = element.b;
						return A3(
							$elm$html$Html$node,
							'lia-formula',
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$attribute, 'displayMode', mode_),
									A2(
									$elm$html$Html$Attributes$property,
									'formula',
									$elm$json$Json$Encode$string(e))
								]),
							_List_Nil);
					} else {
						var mode_ = element.a;
						var e = element.b;
						var attr = element.c;
						var $temp$config = config,
							$temp$element = A2(
							$author$project$Lia$Markdown$Inline$Types$Container,
							_List_fromArray(
								[
									A3($author$project$Lia$Markdown$Inline$Types$Formula, mode_, e, _List_Nil)
								]),
							attr);
						config = $temp$config;
						element = $temp$element;
						continue view;
					}
			}
		}
	});
var $author$project$Lia$Markdown$Inline$View$view_url = F5(
	function (config, alt_, url_, title_, attr) {
		return function (a) {
			return a(
				A2($author$project$Lia$Markdown$Inline$View$viewer, config, alt_));
		}(
			$elm$html$Html$a(
				A2(
					$elm$core$List$append,
					A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-link', attr),
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href(url_),
							A2($author$project$Lia$Markdown$Inline$View$title, config, title_)
						]))));
	});
var $author$project$Lia$Markdown$Inline$View$viewer = function (config) {
	return $elm$core$List$map(
		$author$project$Lia$Markdown$Inline$View$view(config));
};
var $author$project$Lia$Markdown$Inline$View$view_inf = F2(
	function (scripts, lang) {
		return $author$project$Lia$Markdown$Inline$View$view(
			A7($author$project$Lia$Markdown$Inline$Config$init, -1, $author$project$Lia$Settings$Types$Textbook, 0, $elm$core$Maybe$Nothing, scripts, lang, $elm$core$Maybe$Nothing));
	});
var $author$project$Index$View$inlines = $elm$core$List$map(
	A2(
		$elm$core$Basics$composeR,
		A2($author$project$Lia$Markdown$Inline$View$view_inf, $elm$core$Array$empty, $author$project$Translations$En),
		$elm$html$Html$map(
			$elm$core$Basics$always($author$project$Index$Update$NoOp))));
var $elm$html$Html$Attributes$rel = _VirtualDom_attribute('rel');
var $mdgriffith$elm_ui$Element$link = F2(
	function (attrs, _v0) {
		var url = _v0.url;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.link)))),
								attrs))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $mdgriffith$elm_ui$Internal$Model$Empty = {$: 'Empty'};
var $mdgriffith$elm_ui$Element$none = $mdgriffith$elm_ui$Internal$Model$Empty;
var $mdgriffith$elm_ui$Internal$Model$Paragraph = {$: 'Paragraph'};
var $mdgriffith$elm_ui$Internal$Model$SpacingStyle = F3(
	function (a, b, c) {
		return {$: 'SpacingStyle', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Flag$spacing = $mdgriffith$elm_ui$Internal$Flag$flag(3);
var $mdgriffith$elm_ui$Internal$Model$spacingName = F2(
	function (x, y) {
		return 'spacing-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y)));
	});
var $mdgriffith$elm_ui$Element$spacing = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$spacing,
		A3(
			$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
			A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, x),
			x,
			x));
};
var $mdgriffith$elm_ui$Element$paragraph = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asParagraph,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Paragraph),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$spacing(5),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Internal$Model$Px = function (a) {
	return {$: 'Px', a: a};
};
var $mdgriffith$elm_ui$Element$px = $mdgriffith$elm_ui$Internal$Model$Px;
var $mdgriffith$elm_ui$Internal$Model$AsRow = {$: 'AsRow'};
var $mdgriffith$elm_ui$Internal$Model$asRow = $mdgriffith$elm_ui$Internal$Model$AsRow;
var $mdgriffith$elm_ui$Element$row = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Element$scrollbarY = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.scrollbarsY);
var $author$project$Index$View$greedyGroupsOfWithStep = F3(
	function (size, step, xs) {
		var xs_ = A2($elm$core$List$drop, step, xs);
		var okayXs = $elm$core$List$length(xs) > 0;
		var okayArgs = (size > 0) && (step > 0);
		var group = A2($elm$core$List$take, size, xs);
		return (okayArgs && okayXs) ? A2(
			$elm$core$List$cons,
			group,
			A3($author$project$Index$View$greedyGroupsOfWithStep, size, step, xs_)) : _List_Nil;
	});
var $author$project$Index$View$greedyGroupsOf = F2(
	function (size, xs) {
		return A3($author$project$Index$View$greedyGroupsOfWithStep, size, size, xs);
	});
var $author$project$Index$View$url2Color = function (url) {
	return function (_v5) {
		var r = _v5.a;
		var g = _v5.b;
		var b = _v5.c;
		return A3(
			$mdgriffith$elm_ui$Element$rgb,
			A2($elm$core$Basics$modBy, 100, r) / 100,
			A2($elm$core$Basics$modBy, 100, g) / 100,
			A2($elm$core$Basics$modBy, 100, b) / 100);
	}(
		A3(
			$elm$core$List$foldl,
			F2(
				function (rgb, _v0) {
					var r = _v0.a;
					var g = _v0.b;
					var b = _v0.c;
					_v1$3:
					while (true) {
						if (rgb.b) {
							if (rgb.b.b) {
								if (rgb.b.b.b) {
									if (!rgb.b.b.b.b) {
										var r_ = rgb.a;
										var _v2 = rgb.b;
										var g_ = _v2.a;
										var _v3 = _v2.b;
										var b_ = _v3.a;
										return _Utils_Tuple3(r + r_, g + g_, b + b_);
									} else {
										break _v1$3;
									}
								} else {
									var r_ = rgb.a;
									var _v4 = rgb.b;
									var g_ = _v4.a;
									return _Utils_Tuple3(r_ + r, g_ + g, b);
								}
							} else {
								var r_ = rgb.a;
								return _Utils_Tuple3(r_ + r, g, b);
							}
						} else {
							break _v1$3;
						}
					}
					return _Utils_Tuple3(r, g, b);
				}),
			_Utils_Tuple3(11111, 99, 12),
			A2(
				$author$project$Index$View$greedyGroupsOf,
				3,
				A2(
					$elm$core$List$map,
					$elm$core$Char$toCode,
					$elm$core$String$toList(url)))));
};
var $author$project$Index$Update$Activate = F2(
	function (a, b) {
		return {$: 'Activate', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$scrollbarX = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.scrollbarsX);
var $mdgriffith$elm_ui$Internal$Model$BorderWidth = F5(
	function (a, b, c, d, e) {
		return {$: 'BorderWidth', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Element$Border$width = function (v) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + $elm$core$String$fromInt(v),
			v,
			v,
			v,
			v));
};
var $author$project$Index$View$viewVersions = F2(
	function (scale, course) {
		var last = $elm$core$Dict$size(course.versions) - 1;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(
					scale(10)),
					$mdgriffith$elm_ui$Element$scrollbarX,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (i, _v1) {
						var key = _v1.a;
						var value = _v1.b;
						var color = function () {
							var _v2 = course.active;
							if (_v2.$ === 'Just') {
								var active = _v2.a;
								return _Utils_eq(active, key) ? A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0) : A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.5);
							} else {
								return _Utils_eq(last, i) ? A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0) : A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.5);
							}
						}();
						return A2(
							$mdgriffith$elm_ui$Element$Input$button,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$color(color),
									$mdgriffith$elm_ui$Element$Border$width(1),
									$mdgriffith$elm_ui$Element$Font$size(
									scale(10)),
									A2(
									$mdgriffith$elm_ui$Element$paddingXY,
									scale(5),
									2),
									$mdgriffith$elm_ui$Element$Border$rounded(5),
									$mdgriffith$elm_ui$Element$Background$color(
									A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1))
								]),
							{
								label: $mdgriffith$elm_ui$Element$text('V ' + value),
								onPress: $elm$core$Maybe$Just(
									A2(
										$author$project$Index$Update$Activate,
										course.id,
										_Utils_eq(last, i) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(value)))
							});
					}),
				A2(
					$elm$core$List$sortBy,
					$elm$core$Tuple$first,
					A2(
						$elm$core$List$map,
						function (_v0) {
							var key = _v0.a;
							var value = _v0.b;
							return _Utils_Tuple2(key, value.definition.version);
						},
						$elm$core$Dict$toList(course.versions)))));
	});
var $author$project$Index$View$card = F3(
	function (scale, share, course) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Border$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0)),
					$mdgriffith$elm_ui$Element$clip,
					$mdgriffith$elm_ui$Element$Border$rounded(10),
					$mdgriffith$elm_ui$Element$Border$shadow(
					{
						blur: 6,
						color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.2),
						offset: _Utils_Tuple2(2, 2),
						size: 2
					}),
					$mdgriffith$elm_ui$Element$Background$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95))
				]),
			function () {
				var _v0 = $author$project$Index$View$get_active(course);
				if (_v0.$ === 'Just') {
					var title = _v0.a.title;
					var definition = _v0.a.definition;
					return _List_fromArray(
						[
							function () {
							var _v1 = _Utils_Tuple2(
								$elm$core$String$trim(definition.author),
								$elm$core$String$trim(definition.logo));
							if (_v1.b === '') {
								var str_a = _v1.a;
								return A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$Background$color(
											$author$project$Index$View$url2Color(course.id)),
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(
												scale(90))),
											$mdgriffith$elm_ui$Element$inFront(
											A2($author$project$Index$View$author, scale, str_a))
										]),
									$mdgriffith$elm_ui$Element$none);
							} else {
								var str_a = _v1.a;
								var str_l = _v1.b;
								return A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$Background$color(
											A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0)),
											$mdgriffith$elm_ui$Element$Background$image(str_l),
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(
												scale(90))),
											$mdgriffith$elm_ui$Element$inFront(
											A2($author$project$Index$View$author, scale, str_a))
										]),
									$mdgriffith$elm_ui$Element$none);
							}
						}(),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$spacing(
									scale(10)),
									$mdgriffith$elm_ui$Element$padding(
									scale(10))
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$size(
											scale(16)),
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$Font$bold,
											$mdgriffith$elm_ui$Element$Font$color(
											A3($mdgriffith$elm_ui$Element$rgb, 0.6, 0, 0))
										]),
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$html(
											A2(
												$elm$html$Html$div,
												_List_fromArray(
													[
														A2($elm$html$Html$Attributes$style, 'white-space', 'nowrap'),
														A2($elm$html$Html$Attributes$style, 'overflow', 'hidden'),
														A2($elm$html$Html$Attributes$style, 'text-overflow', 'ellipsis')
													]),
												$author$project$Index$View$inlines(title)))
										])),
									A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$size(
											scale(12)),
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(
												scale(48))),
											$mdgriffith$elm_ui$Element$scrollbarY
										]),
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$html(
											A2(
												$elm$html$Html$div,
												_List_Nil,
												$author$project$Index$View$inlines(definition.comment)))
										])),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(1)),
											$mdgriffith$elm_ui$Element$Background$color(
											A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.5))
										]),
									$mdgriffith$elm_ui$Element$none),
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
										]),
									_List_fromArray(
										[
											A2($author$project$Index$View$viewVersions, scale, course),
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$Font$size(
													scale(10)),
													$mdgriffith$elm_ui$Element$alignRight
												]),
											$mdgriffith$elm_ui$Element$text(course.last_visit))
										])),
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$spacing(
											scale(10)),
											$mdgriffith$elm_ui$Element$Font$size(
											scale(12))
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$Input$button,
											$author$project$Index$View$btn,
											{
												label: A2(
													$mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$Font$color(
															A3($mdgriffith$elm_ui$Element$rgb, 1, 0, 0))
														]),
													$mdgriffith$elm_ui$Element$text('Delete')),
												onPress: $elm$core$Maybe$Just(
													$author$project$Index$Update$Delete(course.id))
											}),
											A2(
											$mdgriffith$elm_ui$Element$Input$button,
											$author$project$Index$View$btn,
											{
												label: A2(
													$mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$Font$color(
															A3($mdgriffith$elm_ui$Element$rgb, 1, 0, 0))
														]),
													$mdgriffith$elm_ui$Element$text('Reset')),
												onPress: $elm$core$Maybe$Just(
													A2($author$project$Index$Update$Reset, course.id, course.active))
											}),
											share ? A2(
											$mdgriffith$elm_ui$Element$Input$button,
											A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignRight, $author$project$Index$View$btn),
											{
												label: $mdgriffith$elm_ui$Element$text('Share'),
												onPress: $elm$core$Maybe$Just(
													A3(
														$author$project$Index$Update$Share,
														$author$project$Lia$Markdown$Inline$Stringify$stringify(title),
														$author$project$Lia$Markdown$Inline$Stringify$stringify(definition.comment) + '\n',
														'https://LiaScript.github.io/course/?' + course.id))
											}) : $mdgriffith$elm_ui$Element$none,
											function () {
											var _v2 = course.active;
											if (_v2.$ === 'Nothing') {
												return A2(
													$mdgriffith$elm_ui$Element$link,
													A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignRight, $author$project$Index$View$btn),
													{
														label: $mdgriffith$elm_ui$Element$text('Open'),
														url: $author$project$Index$View$href(course.id)
													});
											} else {
												return A2(
													$mdgriffith$elm_ui$Element$Input$button,
													A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignRight, $author$project$Index$View$btn),
													{
														label: $mdgriffith$elm_ui$Element$text('Open'),
														onPress: $elm$core$Maybe$Just(
															A2($author$project$Index$Update$Restore, course.id, course.active))
													});
											}
										}()
										]))
								]))
						]);
				} else {
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('something went wrong')
						]);
				}
			}());
	});
var $mdgriffith$elm_ui$Internal$Model$CenterX = {$: 'CenterX'};
var $mdgriffith$elm_ui$Element$centerX = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$CenterX);
var $mdgriffith$elm_ui$Internal$Flag$fontAlignment = $mdgriffith$elm_ui$Internal$Flag$flag(12);
var $mdgriffith$elm_ui$Element$Font$justify = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontAlignment, $mdgriffith$elm_ui$Internal$Style$classes.textJustify);
var $mdgriffith$elm_ui$Internal$Model$FocusStyleOption = function (a) {
	return {$: 'FocusStyleOption', a: a};
};
var $mdgriffith$elm_ui$Element$focusStyle = $mdgriffith$elm_ui$Internal$Model$FocusStyleOption;
var $mdgriffith$elm_ui$Internal$Model$OnlyDynamic = F2(
	function (a, b) {
		return {$: 'OnlyDynamic', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic = F2(
	function (a, b) {
		return {$: 'StaticRootAndDynamic', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$AllowHover = {$: 'AllowHover'};
var $mdgriffith$elm_ui$Internal$Model$Layout = {$: 'Layout'};
var $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle = {
	backgroundColor: $elm$core$Maybe$Nothing,
	borderColor: $elm$core$Maybe$Nothing,
	shadow: $elm$core$Maybe$Just(
		{
			blur: 0,
			color: A4($mdgriffith$elm_ui$Internal$Model$Rgba, 155 / 255, 203 / 255, 1, 1),
			offset: _Utils_Tuple2(0, 0),
			size: 3
		})
};
var $mdgriffith$elm_ui$Internal$Model$optionsToRecord = function (options) {
	var combine = F2(
		function (opt, record) {
			switch (opt.$) {
				case 'HoverOption':
					var hoverable = opt.a;
					var _v4 = record.hover;
					if (_v4.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								hover: $elm$core$Maybe$Just(hoverable)
							});
					} else {
						return record;
					}
				case 'FocusStyleOption':
					var focusStyle = opt.a;
					var _v5 = record.focus;
					if (_v5.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								focus: $elm$core$Maybe$Just(focusStyle)
							});
					} else {
						return record;
					}
				default:
					var renderMode = opt.a;
					var _v6 = record.mode;
					if (_v6.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								mode: $elm$core$Maybe$Just(renderMode)
							});
					} else {
						return record;
					}
			}
		});
	var andFinally = function (record) {
		return {
			focus: function () {
				var _v0 = record.focus;
				if (_v0.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle;
				} else {
					var focusable = _v0.a;
					return focusable;
				}
			}(),
			hover: function () {
				var _v1 = record.hover;
				if (_v1.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$AllowHover;
				} else {
					var hoverable = _v1.a;
					return hoverable;
				}
			}(),
			mode: function () {
				var _v2 = record.mode;
				if (_v2.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$Layout;
				} else {
					var actualMode = _v2.a;
					return actualMode;
				}
			}()
		};
	};
	return andFinally(
		A3(
			$elm$core$List$foldr,
			combine,
			{focus: $elm$core$Maybe$Nothing, hover: $elm$core$Maybe$Nothing, mode: $elm$core$Maybe$Nothing},
			options));
};
var $mdgriffith$elm_ui$Internal$Model$toHtml = F2(
	function (mode, el) {
		switch (el.$) {
			case 'Unstyled':
				var html = el.a;
				return html($mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Styled':
				var styles = el.a.styles;
				var html = el.a.html;
				return A2(
					html,
					mode(styles),
					$mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Text':
				var text = el.a;
				return $mdgriffith$elm_ui$Internal$Model$textElement(text);
			default:
				return $mdgriffith$elm_ui$Internal$Model$textElement('');
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderRoot = F3(
	function (optionList, attributes, child) {
		var options = $mdgriffith$elm_ui$Internal$Model$optionsToRecord(optionList);
		var embedStyle = function () {
			var _v0 = options.mode;
			if (_v0.$ === 'NoStaticStyleSheet') {
				return $mdgriffith$elm_ui$Internal$Model$OnlyDynamic(options);
			} else {
				return $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic(options);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Internal$Model$toHtml,
			embedStyle,
			A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				attributes,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[child]))));
	});
var $mdgriffith$elm_ui$Internal$Model$FontFamily = F2(
	function (a, b) {
		return {$: 'FontFamily', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$SansSerif = {$: 'SansSerif'};
var $mdgriffith$elm_ui$Internal$Model$Typeface = function (a) {
	return {$: 'Typeface', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$fontFamily = $mdgriffith$elm_ui$Internal$Flag$flag(5);
var $mdgriffith$elm_ui$Internal$Model$renderFontClassName = F2(
	function (font, current) {
		return _Utils_ap(
			current,
			function () {
				switch (font.$) {
					case 'Serif':
						return 'serif';
					case 'SansSerif':
						return 'sans-serif';
					case 'Monospace':
						return 'monospace';
					case 'Typeface':
						var name = font.a;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					case 'ImportFont':
						var name = font.a;
						var url = font.b;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					default:
						var name = font.a.name;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
				}
			}());
	});
var $mdgriffith$elm_ui$Internal$Model$rootStyle = function () {
	var families = _List_fromArray(
		[
			$mdgriffith$elm_ui$Internal$Model$Typeface('Open Sans'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Helvetica'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Verdana'),
			$mdgriffith$elm_ui$Internal$Model$SansSerif
		]);
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$bgColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0)),
				'background-color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1)),
				'color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontSize,
			$mdgriffith$elm_ui$Internal$Model$FontSize(20)),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontFamily,
			A2(
				$mdgriffith$elm_ui$Internal$Model$FontFamily,
				A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'font-', families),
				families))
		]);
}();
var $mdgriffith$elm_ui$Element$layoutWith = F3(
	function (_v0, attrs, child) {
		var options = _v0.options;
		return A3(
			$mdgriffith$elm_ui$Internal$Model$renderRoot,
			options,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass(
					A2(
						$elm$core$String$join,
						' ',
						_List_fromArray(
							[$mdgriffith$elm_ui$Internal$Style$classes.root, $mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single]))),
				_Utils_ap($mdgriffith$elm_ui$Internal$Model$rootStyle, attrs)),
			child);
	});
var $author$project$Index$View$renderElmUi = A2(
	$mdgriffith$elm_ui$Element$layoutWith,
	{
		options: _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$focusStyle(
				{backgroundColor: $elm$core$Maybe$Nothing, borderColor: $elm$core$Maybe$Nothing, shadow: $elm$core$Maybe$Nothing})
			])
	},
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$Background$color(
			A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9))
		]));
var $mdgriffith$elm_ui$Element$modular = F3(
	function (normal, ratio, rescale) {
		return (!rescale) ? normal : ((rescale < 0) ? (normal * A2($elm$core$Basics$pow, ratio, rescale)) : (normal * A2($elm$core$Basics$pow, ratio, rescale - 1)));
	});
var $author$project$Index$View$scaled = F2(
	function (w, start) {
		return $elm$core$Basics$round(
			A3(
				$mdgriffith$elm_ui$Element$modular,
				start,
				1.05,
				$elm$core$Basics$round(w / 250.0)));
	});
var $author$project$Index$Update$Input = function (a) {
	return {$: 'Input', a: a};
};
var $mdgriffith$elm_ui$Element$Input$HiddenLabel = function (a) {
	return {$: 'HiddenLabel', a: a};
};
var $mdgriffith$elm_ui$Element$Input$labelHidden = $mdgriffith$elm_ui$Element$Input$HiddenLabel;
var $mdgriffith$elm_ui$Element$Input$Placeholder = F2(
	function (a, b) {
		return {$: 'Placeholder', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$Input$placeholder = $mdgriffith$elm_ui$Element$Input$Placeholder;
var $mdgriffith$elm_ui$Element$Input$TextInputNode = function (a) {
	return {$: 'TextInputNode', a: a};
};
var $mdgriffith$elm_ui$Element$Input$TextArea = {$: 'TextArea'};
var $mdgriffith$elm_ui$Internal$Model$LivePolite = {$: 'LivePolite'};
var $mdgriffith$elm_ui$Element$Region$announce = $mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$LivePolite);
var $mdgriffith$elm_ui$Element$Input$applyLabel = F3(
	function (attrs, label, input) {
		if (label.$ === 'HiddenLabel') {
			var labelText = label.a;
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asColumn,
				$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
				attrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[input])));
		} else {
			var position = label.a;
			var labelAttrs = label.b;
			var labelChild = label.c;
			var labelElement = A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				labelAttrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[labelChild])));
			switch (position.$) {
				case 'Above':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
				case 'Below':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				case 'OnRight':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				default:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
			}
		}
	});
var $mdgriffith$elm_ui$Element$Input$autofill = A2(
	$elm$core$Basics$composeL,
	$mdgriffith$elm_ui$Internal$Model$Attr,
	$elm$html$Html$Attributes$attribute('autocomplete'));
var $mdgriffith$elm_ui$Internal$Model$Behind = {$: 'Behind'};
var $mdgriffith$elm_ui$Element$behindContent = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$Behind, element);
};
var $mdgriffith$elm_ui$Internal$Model$MoveY = function (a) {
	return {$: 'MoveY', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$TransformComponent = F2(
	function (a, b) {
		return {$: 'TransformComponent', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$moveY = $mdgriffith$elm_ui$Internal$Flag$flag(26);
var $mdgriffith$elm_ui$Element$moveUp = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(-y));
};
var $mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding = function (attrs) {
	var gatherSpacing = F2(
		function (attr, found) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
				var _v2 = attr.b;
				var x = _v2.b;
				var y = _v2.c;
				if (found.$ === 'Nothing') {
					return $elm$core$Maybe$Just(y);
				} else {
					return found;
				}
			} else {
				return found;
			}
		});
	var _v0 = A3($elm$core$List$foldr, gatherSpacing, $elm$core$Maybe$Nothing, attrs);
	if (_v0.$ === 'Nothing') {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	} else {
		var vSpace = _v0.a;
		return $mdgriffith$elm_ui$Element$moveUp(
			$elm$core$Basics$floor(vSpace / 2));
	}
};
var $mdgriffith$elm_ui$Element$Input$darkGrey = A3($mdgriffith$elm_ui$Element$rgb, 186 / 255, 189 / 255, 182 / 255);
var $mdgriffith$elm_ui$Element$Input$defaultTextPadding = A2($mdgriffith$elm_ui$Element$paddingXY, 12, 12);
var $mdgriffith$elm_ui$Element$Input$white = A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
var $mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Input$defaultTextPadding,
		$mdgriffith$elm_ui$Element$Border$rounded(3),
		$mdgriffith$elm_ui$Element$Border$color($mdgriffith$elm_ui$Element$Input$darkGrey),
		$mdgriffith$elm_ui$Element$Background$color($mdgriffith$elm_ui$Element$Input$white),
		$mdgriffith$elm_ui$Element$Border$width(1),
		$mdgriffith$elm_ui$Element$spacing(5),
		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
		$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink)
	]);
var $mdgriffith$elm_ui$Element$Input$getHeight = function (attr) {
	if (attr.$ === 'Height') {
		var h = attr.a;
		return $elm$core$Maybe$Just(h);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Label = function (a) {
	return {$: 'Label', a: a};
};
var $mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute = function (label) {
	if (label.$ === 'HiddenLabel') {
		var textLabel = label.a;
		return $mdgriffith$elm_ui$Internal$Model$Describe(
			$mdgriffith$elm_ui$Internal$Model$Label(textLabel));
	} else {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	}
};
var $mdgriffith$elm_ui$Element$Input$isConstrained = function (len) {
	isConstrained:
	while (true) {
		switch (len.$) {
			case 'Content':
				return false;
			case 'Px':
				return true;
			case 'Fill':
				return true;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isConstrained;
			default:
				var l = len.b;
				return true;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isHiddenLabel = function (label) {
	if (label.$ === 'HiddenLabel') {
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$Input$isStacked = function (label) {
	if (label.$ === 'Label') {
		var loc = label.a;
		switch (loc.$) {
			case 'OnRight':
				return false;
			case 'OnLeft':
				return false;
			case 'Above':
				return true;
			default:
				return true;
		}
	} else {
		return true;
	}
};
var $mdgriffith$elm_ui$Element$Input$negateBox = function (box) {
	return {bottom: -box.bottom, left: -box.left, right: -box.right, top: -box.top};
};
var $mdgriffith$elm_ui$Internal$Model$paddingName = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left)))))));
	});
var $mdgriffith$elm_ui$Element$paddingEach = function (_v0) {
	var top = _v0.top;
	var right = _v0.right;
	var bottom = _v0.bottom;
	var left = _v0.left;
	if (_Utils_eq(top, right) && (_Utils_eq(top, bottom) && _Utils_eq(top, left))) {
		var topFloat = top;
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				'p-' + $elm$core$String$fromInt(top),
				topFloat,
				topFloat,
				topFloat,
				topFloat));
	} else {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				A4($mdgriffith$elm_ui$Internal$Model$paddingName, top, right, bottom, left),
				top,
				right,
				bottom,
				left));
	}
};
var $mdgriffith$elm_ui$Element$htmlAttribute = $mdgriffith$elm_ui$Internal$Model$Attr;
var $mdgriffith$elm_ui$Element$Input$isFill = function (len) {
	isFill:
	while (true) {
		switch (len.$) {
			case 'Fill':
				return true;
			case 'Content':
				return false;
			case 'Px':
				return false;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isPixel = function (len) {
	isPixel:
	while (true) {
		switch (len.$) {
			case 'Content':
				return false;
			case 'Px':
				return true;
			case 'Fill':
				return false;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
		}
	}
};
var $mdgriffith$elm_ui$Internal$Model$paddingNameFloat = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(top) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(right) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(bottom) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(left)))))));
	});
var $mdgriffith$elm_ui$Element$Input$redistributeOver = F4(
	function (isMultiline, stacked, attr, els) {
		switch (attr.$) {
			case 'Nearby':
				return _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					});
			case 'Width':
				var width = attr.a;
				return $mdgriffith$elm_ui$Element$Input$isFill(width) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						input: A2($elm$core$List$cons, attr, els.input),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : (stacked ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					}) : _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					}));
			case 'Height':
				var height = attr.a;
				return (!stacked) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : ($mdgriffith$elm_ui$Element$Input$isFill(height) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : ($mdgriffith$elm_ui$Element$Input$isPixel(height) ? _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					})));
			case 'AlignX':
				return _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					});
			case 'AlignY':
				return _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					});
			case 'StyleClass':
				switch (attr.b.$) {
					case 'SpacingStyle':
						var _v1 = attr.b;
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent),
								input: A2($elm$core$List$cons, attr, els.input),
								parent: A2($elm$core$List$cons, attr, els.parent),
								wrapper: A2($elm$core$List$cons, attr, els.wrapper)
							});
					case 'PaddingStyle':
						var cls = attr.a;
						var _v2 = attr.b;
						var pad = _v2.a;
						var t = _v2.b;
						var r = _v2.c;
						var b = _v2.d;
						var l = _v2.e;
						if (isMultiline) {
							return _Utils_update(
								els,
								{
									cover: A2($elm$core$List$cons, attr, els.cover),
									parent: A2($elm$core$List$cons, attr, els.parent)
								});
						} else {
							var newTop = t - A2($elm$core$Basics$min, t, b);
							var newLineHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'line-height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newBottom = b - A2($elm$core$Basics$min, t, b);
							var reducedVerticalPadding = A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$padding,
								A5(
									$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
									A4($mdgriffith$elm_ui$Internal$Model$paddingNameFloat, newTop, r, newBottom, l),
									newTop,
									r,
									newBottom,
									l));
							return _Utils_update(
								els,
								{
									cover: A2($elm$core$List$cons, attr, els.cover),
									input: A2(
										$elm$core$List$cons,
										newHeight,
										A2($elm$core$List$cons, newLineHeight, els.input)),
									parent: A2($elm$core$List$cons, reducedVerticalPadding, els.parent)
								});
						}
					case 'BorderWidth':
						var _v3 = attr.b;
						return _Utils_update(
							els,
							{
								cover: A2($elm$core$List$cons, attr, els.cover),
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
					case 'Transform':
						return _Utils_update(
							els,
							{
								cover: A2($elm$core$List$cons, attr, els.cover),
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
					case 'FontSize':
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent)
							});
					case 'FontFamily':
						var _v4 = attr.b;
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent)
							});
					default:
						var flag = attr.a;
						var cls = attr.b;
						return _Utils_update(
							els,
							{
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
				}
			case 'NoAttribute':
				return els;
			case 'Attr':
				var a = attr.a;
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
			case 'Describe':
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
			case 'Class':
				return _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					});
			default:
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
		}
	});
var $mdgriffith$elm_ui$Element$Input$redistribute = F3(
	function (isMultiline, stacked, attrs) {
		return function (redist) {
			return {
				cover: $elm$core$List$reverse(redist.cover),
				fullParent: $elm$core$List$reverse(redist.fullParent),
				input: $elm$core$List$reverse(redist.input),
				parent: $elm$core$List$reverse(redist.parent),
				wrapper: $elm$core$List$reverse(redist.wrapper)
			};
		}(
			A3(
				$elm$core$List$foldl,
				A2($mdgriffith$elm_ui$Element$Input$redistributeOver, isMultiline, stacked),
				{cover: _List_Nil, fullParent: _List_Nil, input: _List_Nil, parent: _List_Nil, wrapper: _List_Nil},
				attrs));
	});
var $mdgriffith$elm_ui$Element$Input$renderBox = function (_v0) {
	var top = _v0.top;
	var right = _v0.right;
	var bottom = _v0.bottom;
	var left = _v0.left;
	return $elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px'))))));
};
var $mdgriffith$elm_ui$Internal$Model$Transparency = F2(
	function (a, b) {
		return {$: 'Transparency', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$transparency = $mdgriffith$elm_ui$Internal$Flag$flag(0);
var $mdgriffith$elm_ui$Element$alpha = function (o) {
	var transparency = function (x) {
		return 1 - x;
	}(
		A2(
			$elm$core$Basics$min,
			1.0,
			A2($elm$core$Basics$max, 0.0, o)));
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2(
			$mdgriffith$elm_ui$Internal$Model$Transparency,
			'transparency-' + $mdgriffith$elm_ui$Internal$Model$floatClass(transparency),
			transparency));
};
var $mdgriffith$elm_ui$Element$Input$charcoal = A3($mdgriffith$elm_ui$Element$rgb, 136 / 255, 138 / 255, 133 / 255);
var $mdgriffith$elm_ui$Element$Input$renderPlaceholder = F3(
	function (_v0, forPlaceholder, on) {
		var placeholderAttrs = _v0.a;
		var placeholderEl = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_Utils_ap(
				forPlaceholder,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($mdgriffith$elm_ui$Element$Input$charcoal),
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.noTextSelection + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.passPointerEvents)),
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$Border$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$Background$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$alpha(
							on ? 1 : 0)
						]),
					placeholderAttrs)),
			placeholderEl);
	});
var $elm$html$Html$Attributes$spellcheck = $elm$html$Html$Attributes$boolProperty('spellcheck');
var $mdgriffith$elm_ui$Element$Input$spellcheck = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$spellcheck);
var $mdgriffith$elm_ui$Element$Input$value = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$value);
var $mdgriffith$elm_ui$Element$Input$textHelper = F3(
	function (textInput, attrs, textOptions) {
		var withDefaults = _Utils_ap($mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle, attrs);
		var redistributed = A3(
			$mdgriffith$elm_ui$Element$Input$redistribute,
			_Utils_eq(textInput.type_, $mdgriffith$elm_ui$Element$Input$TextArea),
			$mdgriffith$elm_ui$Element$Input$isStacked(textOptions.label),
			withDefaults);
		var onlySpacing = function (attr) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
				var _v9 = attr.b;
				return true;
			} else {
				return false;
			}
		};
		var heightConstrained = function () {
			var _v7 = textInput.type_;
			if (_v7.$ === 'TextInputNode') {
				var inputType = _v7.a;
				return false;
			} else {
				return A2(
					$elm$core$Maybe$withDefault,
					false,
					A2(
						$elm$core$Maybe$map,
						$mdgriffith$elm_ui$Element$Input$isConstrained,
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Element$Input$getHeight, withDefaults)))));
			}
		}();
		var getPadding = function (attr) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'PaddingStyle')) {
				var cls = attr.a;
				var _v6 = attr.b;
				var pad = _v6.a;
				var t = _v6.b;
				var r = _v6.c;
				var b = _v6.d;
				var l = _v6.e;
				return $elm$core$Maybe$Just(
					{
						bottom: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(b - 3)),
						left: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(l - 3)),
						right: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(r - 3)),
						top: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(t - 3))
					});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		};
		var parentPadding = A2(
			$elm$core$Maybe$withDefault,
			{bottom: 0, left: 0, right: 0, top: 0},
			$elm$core$List$head(
				$elm$core$List$reverse(
					A2($elm$core$List$filterMap, getPadding, withDefaults))));
		var inputElement = A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			function () {
				var _v3 = textInput.type_;
				if (_v3.$ === 'TextInputNode') {
					var inputType = _v3.a;
					return $mdgriffith$elm_ui$Internal$Model$NodeName('input');
				} else {
					return $mdgriffith$elm_ui$Internal$Model$NodeName('textarea');
				}
			}(),
			_Utils_ap(
				function () {
					var _v4 = textInput.type_;
					if (_v4.$ === 'TextInputNode') {
						var inputType = _v4.a;
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$type_(inputType)),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputText)
							]);
					} else {
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$clip,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultiline),
								$mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding(withDefaults),
								$mdgriffith$elm_ui$Element$paddingEach(parentPadding),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2(
									$elm$html$Html$Attributes$style,
									'margin',
									$mdgriffith$elm_ui$Element$Input$renderBox(
										$mdgriffith$elm_ui$Element$Input$negateBox(parentPadding)))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$style, 'box-sizing', 'content-box'))
							]);
					}
				}(),
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Input$value(textOptions.text),
							$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Events$onInput(textOptions.onChange)),
							$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(textOptions.label),
							$mdgriffith$elm_ui$Element$Input$spellcheck(textInput.spellchecked),
							A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Internal$Model$NoAttribute,
							A2($elm$core$Maybe$map, $mdgriffith$elm_ui$Element$Input$autofill, textInput.autofill))
						]),
					redistributed.input)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil));
		var wrappedInput = function () {
			var _v0 = textInput.type_;
			if (_v0.$ === 'TextArea') {
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					_Utils_ap(
						(heightConstrained ? $elm$core$List$cons($mdgriffith$elm_ui$Element$scrollbarY) : $elm$core$Basics$identity)(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin),
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineWrapper)
								])),
						redistributed.parent),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asParagraph,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Element$inFront(inputElement),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineParent),
												redistributed.wrapper)))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(
									function () {
										if (textOptions.text === '') {
											var _v1 = textOptions.placeholder;
											if (_v1.$ === 'Nothing') {
												return _List_fromArray(
													[
														$mdgriffith$elm_ui$Element$text('\u00A0')
													]);
											} else {
												var place = _v1.a;
												return _List_fromArray(
													[
														A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, _List_Nil, textOptions.text === '')
													]);
											}
										} else {
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Internal$Model$unstyled(
													A2(
														$elm$html$Html$span,
														_List_fromArray(
															[
																$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineFiller)
															]),
														_List_fromArray(
															[
																$elm$html$Html$text(textOptions.text + '\u00A0')
															])))
												]);
										}
									}()))
							])));
			} else {
				var inputType = _v0.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						A2(
							$elm$core$List$cons,
							A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin),
							$elm$core$List$concat(
								_List_fromArray(
									[
										redistributed.parent,
										function () {
										var _v2 = textOptions.placeholder;
										if (_v2.$ === 'Nothing') {
											return _List_Nil;
										} else {
											var place = _v2.a;
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Element$behindContent(
													A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, redistributed.cover, textOptions.text === ''))
												]);
										}
									}()
									])))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[inputElement])));
			}
		}();
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			A2(
				$elm$core$List$cons,
				A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.cursorText),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$Input$isHiddenLabel(textOptions.label) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Element$spacing(5),
					A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$Region$announce, redistributed.fullParent))),
			textOptions.label,
			wrappedInput);
	});
var $mdgriffith$elm_ui$Element$Input$text = $mdgriffith$elm_ui$Element$Input$textHelper(
	{
		autofill: $elm$core$Maybe$Nothing,
		spellchecked: false,
		type_: $mdgriffith$elm_ui$Element$Input$TextInputNode('text')
	});
var $mdgriffith$elm_ui$Internal$Model$Padding = F5(
	function (a, b, c, d, e) {
		return {$: 'Padding', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Model$Spaced = F3(
	function (a, b, c) {
		return {$: 'Spaced', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$extractSpacingAndPadding = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (attr, _v0) {
				var pad = _v0.a;
				var spacing = _v0.b;
				return _Utils_Tuple2(
					function () {
						if (pad.$ === 'Just') {
							var x = pad.a;
							return pad;
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'PaddingStyle')) {
								var _v3 = attr.b;
								var name = _v3.a;
								var t = _v3.b;
								var r = _v3.c;
								var b = _v3.d;
								var l = _v3.e;
								return $elm$core$Maybe$Just(
									A5($mdgriffith$elm_ui$Internal$Model$Padding, name, t, r, b, l));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}(),
					function () {
						if (spacing.$ === 'Just') {
							var x = spacing.a;
							return spacing;
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
								var _v6 = attr.b;
								var name = _v6.a;
								var x = _v6.b;
								var y = _v6.c;
								return $elm$core$Maybe$Just(
									A3($mdgriffith$elm_ui$Internal$Model$Spaced, name, x, y));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}());
			}),
		_Utils_Tuple2($elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing),
		attrs);
};
var $mdgriffith$elm_ui$Element$wrappedRow = F2(
	function (attrs, children) {
		var _v0 = $mdgriffith$elm_ui$Internal$Model$extractSpacingAndPadding(attrs);
		var padded = _v0.a;
		var spaced = _v0.b;
		if (spaced.$ === 'Nothing') {
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asRow,
				$mdgriffith$elm_ui$Internal$Model$div,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							attrs))),
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
		} else {
			var _v2 = spaced.a;
			var spaceName = _v2.a;
			var x = _v2.b;
			var y = _v2.c;
			var newPadding = function () {
				if (padded.$ === 'Just') {
					var _v5 = padded.a;
					var name = _v5.a;
					var t = _v5.b;
					var r = _v5.c;
					var b = _v5.d;
					var l = _v5.e;
					if ((_Utils_cmp(r, x / 2) > -1) && (_Utils_cmp(b, y / 2) > -1)) {
						var newTop = t - (y / 2);
						var newRight = r - (x / 2);
						var newLeft = l - (x / 2);
						var newBottom = b - (y / 2);
						return $elm$core$Maybe$Just(
							A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$padding,
								A5(
									$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
									A4($mdgriffith$elm_ui$Internal$Model$paddingNameFloat, newTop, newRight, newBottom, newLeft),
									newTop,
									newRight,
									newBottom,
									newLeft)));
					} else {
						return $elm$core$Maybe$Nothing;
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}();
			if (newPadding.$ === 'Just') {
				var pad = newPadding.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asRow,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
								_Utils_ap(
									attrs,
									_List_fromArray(
										[pad]))))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
			} else {
				var halfY = -(y / 2);
				var halfX = -(x / 2);
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					attrs,
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asRow,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											A2(
												$elm$html$Html$Attributes$style,
												'margin',
												$elm$core$String$fromFloat(halfY) + ('px' + (' ' + ($elm$core$String$fromFloat(halfX) + 'px'))))),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Internal$Model$Attr(
												A2(
													$elm$html$Html$Attributes$style,
													'width',
													'calc(100% + ' + ($elm$core$String$fromInt(x) + 'px)'))),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$Attr(
													A2(
														$elm$html$Html$Attributes$style,
														'height',
														'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))),
												A2(
													$elm$core$List$cons,
													A2(
														$mdgriffith$elm_ui$Internal$Model$StyleClass,
														$mdgriffith$elm_ui$Internal$Flag$spacing,
														A3($mdgriffith$elm_ui$Internal$Model$SpacingStyle, spaceName, x, y)),
													_List_Nil))))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(children))
							])));
			}
		}
	});
var $author$project$Index$View$searchBar = F3(
	function (scale, wid_, url) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$size(
					scale(12)),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2(
					$mdgriffith$elm_ui$Element$paddingXY,
					scale(10),
					0),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
				]),
			((wid_ > 400) ? $mdgriffith$elm_ui$Element$wrappedRow(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(
						scale(10)),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					])) : $mdgriffith$elm_ui$Element$column(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(
						scale(10)),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					])))(
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$text,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						{
							label: $mdgriffith$elm_ui$Element$Input$labelHidden('search input field'),
							onChange: $author$project$Index$Update$Input,
							placeholder: $elm$core$Maybe$Just(
								A2(
									$mdgriffith$elm_ui$Element$Input$placeholder,
									_List_Nil,
									$mdgriffith$elm_ui$Element$text('course-url'))),
							text: url
						}),
						A2(
						$mdgriffith$elm_ui$Element$link,
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Border$shadow(
									{
										blur: 6,
										color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.2),
										offset: _Utils_Tuple2(0, 0),
										size: 1
									}),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(
										scale(28))),
									$mdgriffith$elm_ui$Element$Background$color(
									A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1))
								]),
							(wid_ > 400) ? _List_Nil : _List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								])),
						{
							label: A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Element$paddingXY, 20, 0),
										$mdgriffith$elm_ui$Element$centerX
									]),
								$mdgriffith$elm_ui$Element$text('load course')),
							url: $author$project$Index$View$href(url)
						})
					])));
	});
var $mdgriffith$elm_ui$Element$Font$underline = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.underline);
var $author$project$Index$View$view = F2(
	function (session, model) {
		var scale = $author$project$Index$View$scaled(session.screen.width);
		return $author$project$Index$View$renderElmUi(
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(
						scale(10)),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$Font$size(
								scale(20)),
								$mdgriffith$elm_ui$Element$padding(
								scale(10)),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(
									scale(30)))
							]),
						$mdgriffith$elm_ui$Element$text('Lia: Open-courSes')),
						A3($author$project$Index$View$searchBar, scale, session.screen.width, model.input),
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$padding(
								scale(10)),
								$mdgriffith$elm_ui$Element$spacing(
								scale(16)),
								$mdgriffith$elm_ui$Element$scrollbarY
							]),
						($elm$core$List$isEmpty(model.courses) && model.initialized) ? _List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$Font$justify]),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text('If you cannot see any courses in this list, try out one of the following links, to get more information about this project and to visit some examples and free interactive books.')
									])),
								A2(
								$mdgriffith$elm_ui$Element$link,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$Font$color(
										A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 1)),
										$mdgriffith$elm_ui$Element$Font$underline
									]),
								{
									label: $mdgriffith$elm_ui$Element$text('Project-Website'),
									url: 'https://LiaScript.github.io'
								}),
								A2(
								$mdgriffith$elm_ui$Element$link,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$Font$color(
										A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 1)),
										$mdgriffith$elm_ui$Element$Font$underline
									]),
								{
									label: $mdgriffith$elm_ui$Element$text('Project-Description'),
									url: $author$project$Index$View$href('https://raw.githubusercontent.com/liaScript/docs/master/README.md')
								}),
								A2(
								$mdgriffith$elm_ui$Element$link,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$Font$color(
										A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 1)),
										$mdgriffith$elm_ui$Element$Font$underline
									]),
								{
									label: $mdgriffith$elm_ui$Element$text('Index'),
									url: $author$project$Index$View$href('https://raw.githubusercontent.com/liaScript/index/master/README.md')
								}),
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$Font$justify]),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text('At the end, I hope to see some of your courses in my list.')
									])),
								$mdgriffith$elm_ui$Element$text('Have a nice one ;-) ...')
							]) : (model.initialized ? A2(
							$elm$core$List$map,
							$mdgriffith$elm_ui$Element$row(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(
										scale(16)),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									])),
							A2(
								$author$project$Index$View$greedyGroupsOf,
								$elm$core$Basics$round(session.screen.width / 380),
								A2(
									$elm$core$List$map,
									A2($author$project$Index$View$card, scale, session.share),
									model.courses))) : _List_Nil))
					])));
	});
var $author$project$Lia$Settings$View$design = function (model) {
	var _float = $elm$core$String$fromFloat(model.font_size / 100.0);
	return _List_fromArray(
		[
			$elm$html$Html$Attributes$class(
			'lia-canvas lia-theme-' + (model.theme + (' lia-variant-' + (model.light ? 'light' : 'dark')))),
			A2($elm$html$Html$Attributes$style, 'height', 'calc(100vh / ' + (_float + ')')),
			A2($elm$html$Html$Attributes$style, 'width', 'calc(100vw / ' + (_float + ')')),
			A2($elm$html$Html$Attributes$style, 'transform', 'scale(' + (_float + ')')),
			A2($elm$html$Html$Attributes$style, '-webkit-transform-origin', 'top left'),
			A2($elm$html$Html$Attributes$style, '-moz-transform-origin', 'top left'),
			A2($elm$html$Html$Attributes$style, 'transform-origin', 'top left'),
			A2($elm$html$Html$Attributes$style, 'position', 'absolute')
		]);
};
var $author$project$Lia$Update$Home = {$: 'Home'};
var $author$project$Lia$Update$Script = function (a) {
	return {$: 'Script', a: a};
};
var $author$project$Lia$Update$UpdateIndex = function (a) {
	return {$: 'UpdateIndex', a: a};
};
var $author$project$Lia$Index$View$bottom = function (msg) {
	return A2(
		$elm$html$Html$button,
		_List_fromArray(
			[
				$elm$html$Html$Events$onClick(msg),
				$elm$html$Html$Attributes$title('home'),
				$elm$html$Html$Attributes$class('lia-btn lia-control lia-slide-control lia-left'),
				$elm$html$Html$Attributes$id('lia-btn-home')
			]),
		_List_fromArray(
			[
				$elm$html$Html$text('home')
			]));
};
var $andre_dietrich$elm_conditional$Conditional$List$appendIf = $andre_dietrich$elm_conditional$Conditional$apply2If($elm$core$List$append);
var $author$project$Lia$Index$View$itemLink = F2(
	function (active, id) {
		return $elm$html$Html$a(
			A3(
				$andre_dietrich$elm_conditional$Conditional$List$appendIf,
				_Utils_eq(active, id),
				_List_fromArray(
					[
						$elm$html$Html$Attributes$id('focusedToc'),
						$elm$html$Html$Attributes$class('lia-active')
					]),
				_List_fromArray(
					[
						$elm$html$Html$Attributes$href(
						'#' + $elm$core$String$fromInt(id + 1))
					])));
	});
var $author$project$Lia$Index$View$item = F4(
	function (lang, active, msg, section) {
		return section.visible ? $elm$core$Maybe$Just(
			A2(
				$elm$html$Html$map,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$Tuple$pair(section.id),
					msg),
				A3(
					$author$project$Lia$Index$View$itemLink,
					active,
					section.id,
					A2(
						$elm$core$List$map,
						A2($author$project$Lia$Markdown$Inline$View$view_inf, $elm$core$Array$empty, lang),
						section.title)))) : $elm$core$Maybe$Nothing;
	});
var $author$project$Lia$Index$View$content = F3(
	function (lang, active, msg) {
		return A2(
			$elm$core$Basics$composeR,
			$elm$core$Array$toList,
			$elm$core$List$filterMap(
				A3($author$project$Lia$Index$View$item, lang, active, msg)));
	});
var $elm$html$Html$nav = _VirtualDom_node('nav');
var $author$project$Lia$Index$Update$ScanIndex = function (a) {
	return {$: 'ScanIndex', a: a};
};
var $author$project$Translations$baseSearch = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Търсене';
		case 'De':
			return 'Suche';
		case 'En':
			return 'Search';
		case 'Es':
			return 'buscar';
		case 'Fa':
			return 'جستجو';
		case 'Hy':
			return 'փնտրել';
		case 'Nl':
			return 'zoek';
		case 'Ru':
			return 'поиск';
		case 'Tw':
			return '搜尋';
		case 'Ua':
			return 'пошук';
		default:
			return '搜尋';
	}
};
var $elm$html$Html$Attributes$placeholder = $elm$html$Html$Attributes$stringProperty('placeholder');
var $author$project$Lia$Index$View$search = F2(
	function (lang, model) {
		return _List_fromArray(
			[
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'height', '100%')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$input,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$type_('search'),
								$elm$html$Html$Attributes$value(model),
								$elm$html$Html$Attributes$class('lia-input lia-left'),
								$elm$html$Html$Attributes$placeholder(
								$author$project$Translations$baseSearch(lang)),
								A2($elm$html$Html$Attributes$style, 'width', 'calc(100% - 35px)'),
								$elm$html$Html$Events$onInput($author$project$Lia$Index$Update$ScanIndex),
								$author$project$Lia$Utils$blockKeydown(
								$author$project$Lia$Index$Update$ScanIndex(model)),
								$elm$html$Html$Attributes$id('lia-input-search')
							]),
						_List_Nil)
					])),
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'height', '100%')
					]),
				_List_fromArray(
					[
						$elm$core$String$isEmpty(model) ? A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('lia-icon lia-right'),
								A2($elm$html$Html$Attributes$style, 'padding', '16px 0px')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('')
							])) : A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('lia-icon lia-right'),
								$elm$html$Html$Events$onClick(
								$author$project$Lia$Index$Update$ScanIndex('')),
								A2($elm$html$Html$Attributes$style, 'padding', '16px 0px'),
								A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
								A2($elm$html$Html$Attributes$style, 'width', '5%')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('close')
							]))
					]))
			]);
	});
var $author$project$Lia$View$viewIndex = F2(
	function (hasIndex, model) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('lia-toc'),
					A2(
					$elm$html$Html$Attributes$style,
					'max-width',
					model.settings.table_of_contents ? '280px' : '0px')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$map,
					$author$project$Lia$Update$UpdateIndex,
					A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'width', '100%'),
								A2($elm$html$Html$Attributes$style, 'height', '100%')
							]),
						A2($author$project$Lia$Index$View$search, model.translation, model.index_model))),
					A2(
					$elm$html$Html$nav,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('lia-content')
						]),
					A4($author$project$Lia$Index$View$content, model.translation, model.section_active, $author$project$Lia$Update$Script, model.sections)),
					hasIndex ? $author$project$Lia$Index$View$bottom($author$project$Lia$Update$Home) : $elm$html$Html$text('')
				]));
	});
var $author$project$Lia$Markdown$Config$Config = F7(
	function (mode, view, section, ace_theme, light, screen, main) {
		return {ace_theme: ace_theme, light: light, main: main, mode: mode, screen: screen, section: section, view: view};
	});
var $author$project$Lia$Markdown$Update$Script = function (a) {
	return {$: 'Script', a: a};
};
var $author$project$Lia$Markdown$Config$inline = F4(
	function (lang, settings, effect, id) {
		return A7(
			$author$project$Lia$Markdown$Inline$Config$init,
			id,
			settings.mode,
			effect.visible,
			effect.speaking,
			effect.javascript,
			lang,
			$elm$core$Maybe$Just(settings.theme));
	});
var $author$project$Lia$Markdown$Config$init = F5(
	function (lang, settings, screen, section, id) {
		var config = A4($author$project$Lia$Markdown$Config$inline, lang, settings, section.effect_model, id);
		return A7(
			$author$project$Lia$Markdown$Config$Config,
			settings.mode,
			A2(
				$elm$core$Basics$composeR,
				$author$project$Lia$Markdown$Inline$View$viewer(config),
				$elm$core$List$map(
					$elm$html$Html$map($author$project$Lia$Markdown$Update$Script))),
			section,
			settings.theme,
			settings.light,
			settings.table_of_contents ? _Utils_update(
				screen,
				{width: screen.width - 260}) : screen,
			config);
	});
var $elm$html$Html$aside = _VirtualDom_node('aside');
var $author$project$Lia$Markdown$Effect$Model$current_paragraphs = function (model) {
	var _v0 = A2($elm$core$Dict$get, model.visible, model.comments);
	if (_v0.$ === 'Just') {
		var e = _v0.a;
		return $elm$core$Array$toList(e.paragraphs);
	} else {
		return _List_Nil;
	}
};
var $author$project$Lia$View$slideA11y = F4(
	function (lang, mode, effect, id) {
		if (mode.$ === 'Slides') {
			return A2(
				$elm$html$Html$aside,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('lia-footer')
					]),
				A2(
					$elm$core$List$map,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Tuple$second,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$List$map(
								A2($author$project$Lia$Markdown$Inline$View$view_inf, effect.javascript, lang)),
							A2(
								$elm$core$Basics$composeR,
								$elm$html$Html$p(_List_Nil),
								$elm$html$Html$map(
									A2(
										$elm$core$Basics$composeR,
										$elm$core$Tuple$pair(id),
										$author$project$Lia$Update$Script))))),
					$author$project$Lia$Markdown$Effect$Model$current_paragraphs(effect)));
		} else {
			return $elm$html$Html$text('');
		}
	});
var $elm$html$Html$footer = _VirtualDom_node('footer');
var $elm$html$Html$Attributes$height = function (n) {
	return A2(
		_VirtualDom_attribute,
		'height',
		$elm$core$String$fromInt(n));
};
var $author$project$Translations$soundOff = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Звук вкл.';
		case 'De':
			return 'Sprecher aus';
		case 'En':
			return 'Sound off';
		case 'Es':
			return 'Sonido apagado';
		case 'Fa':
			return 'صدا خاموش';
		case 'Hy':
			return 'առանց ձայն';
		case 'Nl':
			return 'Luidspreker uit';
		case 'Ru':
			return 'звук выключен';
		case 'Tw':
			return '聲音關閉';
		case 'Ua':
			return 'вимкнений';
		default:
			return '聲音關閉';
	}
};
var $author$project$Translations$soundOn = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Звук изкл.';
		case 'De':
			return 'Sprecher an';
		case 'En':
			return 'Sound on';
		case 'Es':
			return 'Sonido encendido';
		case 'Fa':
			return 'صدا روشن';
		case 'Hy':
			return 'ձայնով';
		case 'Nl':
			return 'Luidspreker aan';
		case 'Ru':
			return 'звук включён';
		case 'Tw':
			return '聲音開啟';
		case 'Ua':
			return 'увімкнений';
		default:
			return '聲音開啟';
	}
};
var $elm$html$Html$Attributes$width = function (n) {
	return A2(
		_VirtualDom_attribute,
		'width',
		$elm$core$String$fromInt(n));
};
var $author$project$Lia$Markdown$Effect$View$responsive = F3(
	function (lang, sound, msg) {
		return A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$id('lia-span-responsive')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href('https://responsivevoice.org')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('ResponsiveVoice-NonCommercial')
						])),
					$elm$html$Html$text(' licensed under '),
					A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href('https://creativecommons.org/licenses/by-nc-nd/4.0/')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$img,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$title('ResponsiveVoice Text To Speech'),
									$elm$html$Html$Attributes$src('https://responsivevoice.org/wp-content/uploads/2014/08/95x15.png'),
									$elm$html$Html$Attributes$alt('95x15'),
									$elm$html$Html$Attributes$width(95),
									$elm$html$Html$Attributes$height(15)
								]),
							_List_Nil)
						])),
					A2(
					$elm$html$Html$button,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('lia-btn lia-icon'),
							$elm$html$Html$Attributes$id('lia-btn-sound'),
							$elm$html$Html$Events$onClick(msg),
							$elm$html$Html$Attributes$title(
							sound ? $author$project$Translations$soundOn(lang) : $author$project$Translations$soundOff(lang))
						]),
					_List_fromArray(
						[
							sound ? $elm$html$Html$text('volume_up') : $elm$html$Html$text('volume_off')
						]))
				]));
	});
var $author$project$Translations$baseNext = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Следващ';
		case 'De':
			return 'weiter';
		case 'En':
			return 'next';
		case 'Es':
			return 'siguente';
		case 'Fa':
			return 'بعدی';
		case 'Hy':
			return 'հաջորդը';
		case 'Nl':
			return 'verder';
		case 'Ru':
			return 'вперёд';
		case 'Tw':
			return '繼續';
		case 'Ua':
			return 'далі';
		default:
			return '繼續';
	}
};
var $author$project$Translations$basePrev = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Предишен';
		case 'De':
			return 'zurück';
		case 'En':
			return 'previous';
		case 'Es':
			return 'anterior';
		case 'Fa':
			return 'قبلی';
		case 'Hy':
			return 'նախորդը';
		case 'Nl':
			return 'terug';
		case 'Ru':
			return 'назад';
		case 'Tw':
			return '返回';
		case 'Ua':
			return 'назад';
		default:
			return '返回';
	}
};
var $author$project$Lia$View$navButton = F4(
	function (str, title, id, msg) {
		return A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					$elm$html$Html$Events$onClick(msg),
					$elm$html$Html$Attributes$title(title),
					$elm$html$Html$Attributes$class('lia-btn lia-control lia-slide-control lia-left'),
					$elm$html$Html$Attributes$id(id)
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(str)
				]));
	});
var $author$project$Lia$Markdown$Effect$View$state = function (model) {
	return (!model.effects) ? '' : (' (' + ($elm$core$String$fromInt(model.visible + 1) + ('/' + ($elm$core$String$fromInt(model.effects + 1) + ')'))));
};
var $author$project$Lia$View$slideNavigation = F4(
	function (lang, mode, slide, effect) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A4(
					$author$project$Lia$View$navButton,
					'navigate_before',
					$author$project$Translations$basePrev(lang),
					'lia-btn-prev',
					$author$project$Lia$Update$PrevSection),
					A2(
					$elm$html$Html$div,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(
							$elm$core$String$fromInt(slide + 1)),
							$elm$html$Html$text(
							function () {
								if (mode.$ === 'Textbook') {
									return '';
								} else {
									return $author$project$Lia$Markdown$Effect$View$state(effect);
								}
							}())
						])),
					A4(
					$author$project$Lia$View$navButton,
					'navigate_next',
					$author$project$Translations$baseNext(lang),
					'lia-btn-next',
					$author$project$Lia$Update$NextSection)
				]));
	});
var $author$project$Lia$Settings$Update$Sound = {$: 'Sound'};
var $author$project$Lia$Settings$Update$Toggle = function (a) {
	return {$: 'Toggle', a: a};
};
var $author$project$Lia$Settings$Update$toggle_sound = $author$project$Lia$Settings$Update$Toggle($author$project$Lia$Settings$Update$Sound);
var $author$project$Lia$View$slideBottom = F4(
	function (lang, settings, slide, effects) {
		return A2(
			$elm$html$Html$footer,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('lia-footer')
				]),
			_List_fromArray(
				[
					A4($author$project$Lia$View$slideNavigation, lang, settings.mode, slide, effects),
					function () {
					var _v0 = settings.mode;
					if (_v0.$ === 'Textbook') {
						return $elm$html$Html$text('');
					} else {
						return A2(
							$elm$html$Html$div,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$elm$html$Html$button,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('lia-btn lia-icon')
										]),
									_List_fromArray(
										[
											settings.speaking ? $elm$html$Html$text('pan_tool') : $elm$html$Html$text('play_circle_outline')
										])),
									A3(
									$author$project$Lia$Markdown$Effect$View$responsive,
									lang,
									settings.sound,
									$author$project$Lia$Update$UpdateSettings($author$project$Lia$Settings$Update$toggle_sound))
								]));
					}
				}()
				]));
	});
var $author$project$Lia$Settings$Update$TableOfContents = {$: 'TableOfContents'};
var $author$project$Translations$baseToc = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Съдържание (показване/скриване)';
		case 'De':
			return 'Inhaltsverzeichnis (zeigen/verbergen)';
		case 'En':
			return 'Table of Contents (show/hide)';
		case 'Es':
			return 'índice (mostrar/ocultar)';
		case 'Fa':
			return 'فهرست مطالب) نمایش/عدم نمایش)';
		case 'Hy':
			return 'բովանդակություն (ցույց տալ / թաքցնել)';
		case 'Nl':
			return 'Inhoudsopgave (tonen/verbergen)';
		case 'Ru':
			return 'оглавление (показать/скрыть)';
		case 'Tw':
			return '目錄(顯示/隱藏)';
		case 'Ua':
			return 'зміст (показати/приховати)';
		default:
			return '目錄(顯示/隱藏)';
	}
};
var $author$project$Lia$Settings$View$btnIndex = function (lang) {
	return A2(
		$elm$html$Html$button,
		_List_fromArray(
			[
				$elm$html$Html$Events$onClick(
				$author$project$Lia$Settings$Update$Toggle($author$project$Lia$Settings$Update$TableOfContents)),
				$elm$html$Html$Attributes$title(
				$author$project$Translations$baseToc(lang)),
				$elm$html$Html$Attributes$class('lia-btn lia-toc-control lia-left'),
				$elm$html$Html$Attributes$id('lia-btn-toc')
			]),
		_List_fromArray(
			[
				$elm$html$Html$text('toc')
			]));
};
var $author$project$Lia$Settings$Types$ShowInformation = {$: 'ShowInformation'};
var $author$project$Lia$Settings$Update$Action = function (a) {
	return {$: 'Action', a: a};
};
var $author$project$Lia$Settings$View$doAction = A2(
	$elm$core$Basics$composeR,
	$author$project$Lia$Settings$Update$Action,
	A2($elm$core$Basics$composeR, $author$project$Lia$Settings$Update$Toggle, $elm$html$Html$Events$onClick));
var $author$project$Lia$Settings$View$actionBtn = F2(
	function (msg, title) {
		return A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					$author$project$Lia$Settings$View$doAction(msg)
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(title)
				]));
	});
var $author$project$Translations$confInformation = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Информация';
		case 'De':
			return 'Informationen';
		case 'En':
			return 'Information';
		case 'Es':
			return 'informaciones';
		case 'Fa':
			return 'اطلاعات';
		case 'Hy':
			return 'ինֆորմացիա';
		case 'Nl':
			return 'Informatie';
		case 'Ru':
			return 'информация';
		case 'Tw':
			return '關於';
		case 'Ua':
			return 'інформація';
		default:
			return '關於';
	}
};
var $author$project$Lia$Settings$View$btnInformation = A2(
	$elm$core$Basics$composeR,
	$author$project$Translations$confInformation,
	$author$project$Lia$Settings$View$actionBtn($author$project$Lia$Settings$Types$ShowInformation));
var $author$project$Lia$Settings$Types$ShowModes = {$: 'ShowModes'};
var $author$project$Lia$Settings$View$btnMode = function (_v0) {
	return A2($author$project$Lia$Settings$View$actionBtn, $author$project$Lia$Settings$Types$ShowModes, 'Mode');
};
var $author$project$Lia$Settings$Types$ShowSettings = {$: 'ShowSettings'};
var $author$project$Translations$confSettings = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Настройки';
		case 'De':
			return 'Einstellungen';
		case 'En':
			return 'Settings';
		case 'Es':
			return 'configuración';
		case 'Fa':
			return 'تنظیمات';
		case 'Hy':
			return 'կարգավորումներ';
		case 'Nl':
			return 'Instellingen';
		case 'Ru':
			return 'настройки';
		case 'Tw':
			return '設定';
		case 'Ua':
			return 'налаштування';
		default:
			return '設定';
	}
};
var $author$project$Lia$Settings$View$btnSettings = A2(
	$elm$core$Basics$composeR,
	$author$project$Translations$confSettings,
	$author$project$Lia$Settings$View$actionBtn($author$project$Lia$Settings$Types$ShowSettings));
var $author$project$Lia$Settings$Types$Share = {$: 'Share'};
var $author$project$Translations$confShare = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Споделяне';
		case 'De':
			return 'Teilen';
		case 'En':
			return 'Share';
		case 'Es':
			return 'compartir';
		case 'Fa':
			return 'اشتراک';
		case 'Hy':
			return 'կիսվել';
		case 'Nl':
			return 'Delen';
		case 'Ru':
			return 'поделиться';
		case 'Tw':
			return '分享';
		case 'Ua':
			return 'поділитися';
		default:
			return '分享';
	}
};
var $author$project$Lia$Settings$View$btnShare = A2(
	$elm$core$Basics$composeR,
	$author$project$Translations$confShare,
	$author$project$Lia$Settings$View$actionBtn($author$project$Lia$Settings$Types$Share));
var $author$project$Lia$Settings$Types$ShowTranslations = {$: 'ShowTranslations'};
var $author$project$Translations$confTranslations = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Транслации';
		case 'De':
			return 'Übersetzungen';
		case 'En':
			return 'Translations';
		case 'Es':
			return 'traducciones';
		case 'Fa':
			return 'ترجمه ها';
		case 'Hy':
			return 'թարգմանություններ';
		case 'Nl':
			return 'Vertalingen';
		case 'Ru':
			return 'на других языках';
		case 'Tw':
			return '翻譯';
		case 'Ua':
			return 'переклади';
		default:
			return '翻譯';
	}
};
var $author$project$Lia$Settings$View$btnTranslations = F2(
	function (lang, hide) {
		return hide ? $elm$html$Html$text('') : A2(
			$author$project$Lia$Settings$View$actionBtn,
			$author$project$Lia$Settings$Types$ShowTranslations,
			$author$project$Translations$confTranslations(lang));
	});
var $elm$html$Html$header = _VirtualDom_node('header');
var $author$project$Lia$View$navItem = A2(
	$elm$core$Basics$composeR,
	$elm$core$List$singleton,
	$elm$html$Html$li(
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('nav-item'),
				A2($elm$html$Html$Attributes$style, 'display', 'inline')
			])));
var $pablohirafuji$elm_qrcode$QRCode$Render$Svg$viewWithoutQuietZone = $pablohirafuji$elm_qrcode$QRCode$Render$Svg$viewBase(0);
var $pablohirafuji$elm_qrcode$QRCode$toSvgWithoutQuietZone = F2(
	function (extraAttrs, _v0) {
		var matrix = _v0.a.matrix;
		return A2($pablohirafuji$elm_qrcode$QRCode$Render$Svg$viewWithoutQuietZone, extraAttrs, matrix);
	});
var $author$project$Lia$Settings$View$qrCodeView = A2(
	$elm$core$Basics$composeR,
	$pablohirafuji$elm_qrcode$QRCode$fromString,
	A2(
		$elm$core$Basics$composeR,
		$elm$core$Result$map(
			$pablohirafuji$elm_qrcode$QRCode$toSvgWithoutQuietZone(_List_Nil)),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$Result$withDefault(
				$elm$html$Html$text('Error while encoding to QRCode.')),
			A2(
				$elm$core$Basics$composeR,
				$elm$core$List$singleton,
				$elm$html$Html$div(_List_Nil)))));
var $author$project$Lia$Settings$View$bold = A2(
	$elm$core$Basics$composeR,
	$elm$html$Html$text,
	A2(
		$elm$core$Basics$composeR,
		$elm$core$List$singleton,
		$elm$html$Html$b(_List_Nil)));
var $author$project$Translations$infoAuthor = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Автор: ';
		case 'De':
			return 'Autor: ';
		case 'En':
			return 'Author: ';
		case 'Es':
			return 'Autor';
		case 'Fa':
			return 'نویسنده: ';
		case 'Hy':
			return 'հեղինակ: ';
		case 'Nl':
			return 'Auteur: ';
		case 'Ru':
			return 'автор: ';
		case 'Tw':
			return '作者: ';
		case 'Ua':
			return 'автор: ';
		default:
			return '作者: ';
	}
};
var $author$project$Translations$infoDate = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Дата: ';
		case 'De':
			return 'Datum: ';
		case 'En':
			return 'Date: ';
		case 'Es':
			return 'fecha';
		case 'Fa':
			return 'تاریخ: ';
		case 'Hy':
			return 'ամսաթիվ: ';
		case 'Nl':
			return 'Datum: ';
		case 'Ru':
			return 'дата: ';
		case 'Tw':
			return '日期: ';
		case 'Ua':
			return 'дата: ';
		default:
			return '日期: ';
	}
};
var $author$project$Translations$infoEmail = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'eMail: ';
		case 'De':
			return 'e-Mail: ';
		case 'En':
			return 'eMail: ';
		case 'Es':
			return 'email';
		case 'Fa':
			return 'ایمیل: ';
		case 'Hy':
			return 'էլ․ փոստ: ';
		case 'Nl':
			return 'e-email: ';
		case 'Ru':
			return 'эл. почта: ';
		case 'Tw':
			return '電郵: ';
		case 'Ua':
			return 'електронна пошта: ';
		default:
			return '電郵: ';
	}
};
var $author$project$Translations$infoVersion = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Версия: ';
		case 'De':
			return 'Version: ';
		case 'En':
			return 'Version: ';
		case 'Es':
			return 'versión';
		case 'Fa':
			return 'نسخه: ';
		case 'Hy':
			return 'տարբերակ: ';
		case 'Nl':
			return 'Versie: ';
		case 'Ru':
			return 'версия: ';
		case 'Tw':
			return '版本: ';
		case 'Ua':
			return 'версія: ';
		default:
			return '版本: ';
	}
};
var $author$project$Lia$Settings$Update$Ignore = {$: 'Ignore'};
var $elm$html$Html$hr = _VirtualDom_node('hr');
var $author$project$Lia$Settings$View$thanks = F2(
	function (lang, to) {
		return A2(
			$elm$html$Html$map,
			function (_v0) {
				return $author$project$Lia$Settings$Update$Ignore;
			},
			A2(
				$elm$html$Html$span,
				_List_Nil,
				_List_fromArray(
					[
						A2($elm$html$Html$hr, _List_Nil, _List_Nil),
						A2(
						$elm$html$Html$div,
						_List_Nil,
						A2(
							$elm$core$List$map,
							A2($author$project$Lia$Markdown$Inline$View$view_inf, $elm$core$Array$empty, lang),
							to))
					])));
	});
var $author$project$Lia$Settings$View$viewAttributes = function (lang) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$List$map(
			$author$project$Lia$Settings$View$thanks(lang)),
		$elm$html$Html$span(_List_Nil));
};
var $author$project$Lia$Settings$View$viewInformation = F2(
	function (lang, definition) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
					A2($elm$html$Html$Attributes$style, 'top', '50px'),
					A2($elm$html$Html$Attributes$style, 'zIndex', '1000'),
					A2($elm$html$Html$Attributes$style, 'color', 'red')
				]),
			A2(
				$elm$core$List$map,
				$elm$html$Html$div(_List_Nil),
				A3(
					$andre_dietrich$elm_conditional$Conditional$List$addIf,
					definition.author !== '',
					_List_fromArray(
						[
							$author$project$Lia$Settings$View$bold(
							$author$project$Translations$infoAuthor(lang)),
							$elm$html$Html$text(definition.author)
						]),
					A3(
						$andre_dietrich$elm_conditional$Conditional$List$addIf,
						definition.email !== '',
						_List_fromArray(
							[
								$author$project$Lia$Settings$View$bold(
								$author$project$Translations$infoEmail(lang)),
								A2(
								$elm$html$Html$a,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$href(definition.email),
										$elm$html$Html$Attributes$class('lia-link')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(definition.email)
									]))
							]),
						A3(
							$andre_dietrich$elm_conditional$Conditional$List$addIf,
							definition.version !== '',
							_List_fromArray(
								[
									$author$project$Lia$Settings$View$bold(
									$author$project$Translations$infoVersion(lang)),
									$elm$html$Html$text(definition.version)
								]),
							A3(
								$andre_dietrich$elm_conditional$Conditional$List$addIf,
								definition.date !== '',
								_List_fromArray(
									[
										$author$project$Lia$Settings$View$bold(
										$author$project$Translations$infoDate(lang)),
										$elm$html$Html$text(definition.date)
									]),
								A3(
									$andre_dietrich$elm_conditional$Conditional$List$addIf,
									!_Utils_eq(definition.attributes, _List_Nil),
									_List_fromArray(
										[
											$author$project$Lia$Settings$View$bold('Attributes:'),
											A2($elm$html$Html$br, _List_Nil, _List_Nil),
											A2($author$project$Lia$Settings$View$viewAttributes, lang, definition.attributes)
										]),
									_List_Nil)))))));
	});
var $author$project$Lia$Settings$Update$SwitchMode = function (a) {
	return {$: 'SwitchMode', a: a};
};
var $elm$html$Html$label = _VirtualDom_node('label');
var $author$project$Translations$modePresentation = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Режим: Презентация';
		case 'De':
			return 'Modus: Präsentation';
		case 'En':
			return 'Mode: Presentation';
		case 'Es':
			return 'Modo: Presentación';
		case 'Fa':
			return 'سبک: ارائه';
		case 'Hy':
			return 'կերպ: ներկայացում';
		case 'Nl':
			return 'Modus: Presentatie';
		case 'Ru':
			return 'режим презентации';
		case 'Tw':
			return '模式: 報告';
		case 'Ua':
			return 'режим: презентація';
		default:
			return '模式: 報告';
	}
};
var $author$project$Translations$modeSlides = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Режим: Слайдове';
		case 'De':
			return 'Modus: Folien';
		case 'En':
			return 'Mode: Slides';
		case 'Es':
			return 'Modo: Imagen';
		case 'Fa':
			return 'سبک: اسلایدها';
		case 'Hy':
			return 'կերպ: սլայդներ';
		case 'Nl':
			return 'Modus: Folies';
		case 'Ru':
			return 'слайды';
		case 'Tw':
			return '模式: 幻燈片';
		case 'Ua':
			return 'режим: слайди';
		default:
			return '模式: 幻燈片';
	}
};
var $author$project$Translations$modeTextbook = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Режим: Текст';
		case 'De':
			return 'Modus: Lehrbuch';
		case 'En':
			return 'Mode: Textbook';
		case 'Es':
			return 'Modo: Manual';
		case 'Fa':
			return 'سبک: کتاب';
		case 'Hy':
			return 'կերպ: գիրք';
		case 'Nl':
			return 'Modus: Studieboek';
		case 'Ru':
			return 'режим чтения';
		case 'Tw':
			return '模式: 教科書';
		case 'Ua':
			return 'режим: навчальна книга';
		default:
			return '模式: 教科書';
	}
};
var $author$project$Lia$Settings$View$modeToString = function (show) {
	switch (show.$) {
		case 'Presentation':
			return $author$project$Translations$modePresentation;
		case 'Slides':
			return $author$project$Translations$modeSlides;
		default:
			return $author$project$Translations$modeTextbook;
	}
};
var $author$project$Lia$Settings$View$viewMode = F3(
	function (lang, mode, activeMode) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$input,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$type_('radio'),
							$elm$html$Html$Attributes$checked(
							_Utils_eq(mode, activeMode)),
							$elm$html$Html$Events$onClick(
							$author$project$Lia$Settings$Update$SwitchMode(mode))
						]),
					_List_Nil),
					A2(
					$elm$html$Html$label,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(
							A2($author$project$Lia$Settings$View$modeToString, mode, lang))
						]))
				]));
	});
var $author$project$Lia$Settings$View$viewModes = F2(
	function (lang, settings) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
					A2($elm$html$Html$Attributes$style, 'top', '50px'),
					A2($elm$html$Html$Attributes$style, 'zIndex', '1000'),
					A2($elm$html$Html$Attributes$style, 'color', 'red')
				]),
			_List_fromArray(
				[
					A3($author$project$Lia$Settings$View$viewMode, lang, $author$project$Lia$Settings$Types$Textbook, settings.mode),
					A2($elm$html$Html$hr, _List_Nil, _List_Nil),
					A3($author$project$Lia$Settings$View$viewMode, lang, $author$project$Lia$Settings$Types$Presentation, settings.mode),
					A2($elm$html$Html$hr, _List_Nil, _List_Nil),
					A3($author$project$Lia$Settings$View$viewMode, lang, $author$project$Lia$Settings$Types$Slides, settings.mode)
				]));
	});
var $author$project$Lia$Settings$Update$ChangeEditor = function (a) {
	return {$: 'ChangeEditor', a: a};
};
var $author$project$Translations$cBright = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Светло';
		case 'De':
			return 'Hell';
		case 'En':
			return 'Bright';
		case 'Es':
			return 'luminoso';
		case 'Fa':
			return 'روشن';
		case 'Hy':
			return 'բաց';
		case 'Nl':
			return 'licht';
		case 'Ru':
			return 'светлый';
		case 'Tw':
			return '淺';
		case 'Ua':
			return 'світлий';
		default:
			return '淺';
	}
};
var $author$project$Translations$cDark = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Тъмно';
		case 'De':
			return 'Dunkel';
		case 'En':
			return 'Dark';
		case 'Es':
			return 'oscuro';
		case 'Fa':
			return 'تیره';
		case 'Hy':
			return 'մուգ';
		case 'Nl':
			return 'donker';
		case 'Ru':
			return 'тёмный';
		case 'Tw':
			return '深';
		case 'Ua':
			return 'темний';
		default:
			return '深';
	}
};
var $elm$html$Html$optgroup = _VirtualDom_node('optgroup');
var $elm$html$Html$Attributes$selected = $elm$html$Html$Attributes$boolProperty('selected');
var $author$project$Lia$Settings$View$option = F2(
	function (current, _v0) {
		var val = _v0.a;
		var text = _v0.b;
		return A2(
			$elm$html$Html$option,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$value(val),
					$elm$html$Html$Attributes$selected(
					_Utils_eq(val, current))
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(text)
				]));
	});
var $author$project$Lia$Settings$View$viewEditorTheme = F2(
	function (lang, theme) {
		var op = $author$project$Lia$Settings$View$option(theme);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'display', 'inline-flex'),
					A2($elm$html$Html$Attributes$style, 'width', '99%')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('Editor'),
					A2(
					$elm$html$Html$select,
					_List_fromArray(
						[
							$elm$html$Html$Events$onInput($author$project$Lia$Settings$Update$ChangeEditor)
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$optgroup,
							_List_fromArray(
								[
									A2(
									$elm$html$Html$Attributes$attribute,
									'label',
									$author$project$Translations$cBright(lang))
								]),
							A2(
								$elm$core$List$map,
								op,
								_List_fromArray(
									[
										_Utils_Tuple2('chrome', 'Chrome'),
										_Utils_Tuple2('clouds', 'Clouds'),
										_Utils_Tuple2('crimson_editor', 'Crimson Editor'),
										_Utils_Tuple2('dawn', 'Dawn'),
										_Utils_Tuple2('dreamweaver', 'Dreamweaver'),
										_Utils_Tuple2('eclipse', 'Eclipse'),
										_Utils_Tuple2('github', 'Github'),
										_Utils_Tuple2('iplastic', 'IPlastic'),
										_Utils_Tuple2('katzenmilch', 'KatzenMilch'),
										_Utils_Tuple2('kuroir', 'Kuroir'),
										_Utils_Tuple2('solarized_light', 'Solarized Light'),
										_Utils_Tuple2('sqlserver', 'SQL Server'),
										_Utils_Tuple2('textmate', 'TextMate'),
										_Utils_Tuple2('tomorrow', 'Tomorrow'),
										_Utils_Tuple2('xcode', 'XCode')
									]))),
							A2(
							$elm$html$Html$optgroup,
							_List_fromArray(
								[
									A2(
									$elm$html$Html$Attributes$attribute,
									'label',
									$author$project$Translations$cDark(lang))
								]),
							A2(
								$elm$core$List$map,
								op,
								_List_fromArray(
									[
										_Utils_Tuple2('ambiance', 'Ambiance'),
										_Utils_Tuple2('chaos', 'Chaos'),
										_Utils_Tuple2('clouds_midnight', 'Clouds Midnight'),
										_Utils_Tuple2('cobalt', 'Cobalt'),
										_Utils_Tuple2('dracula', 'Dracula'),
										_Utils_Tuple2('gob', 'Green on Black'),
										_Utils_Tuple2('gruvbox', 'Gruvbox'),
										_Utils_Tuple2('idle_fingers', 'idle Fingers'),
										_Utils_Tuple2('kr_theme', 'krTheme'),
										_Utils_Tuple2('merbivore', 'Merbivore'),
										_Utils_Tuple2('merbivore_soft', 'Merbivore Soft'),
										_Utils_Tuple2('mono_industrial', 'Mono Industrial'),
										_Utils_Tuple2('monokai', 'Monokai'),
										_Utils_Tuple2('nord_dark', 'Nord Dark'),
										_Utils_Tuple2('pastel_on_dark', 'Pastel on dark'),
										_Utils_Tuple2('solarized_dark', 'Solarized Dark'),
										_Utils_Tuple2('terminal', 'Terminal'),
										_Utils_Tuple2('tomorrow_night', 'Tomorrow Night'),
										_Utils_Tuple2('tomorrow_night_blue', 'Tomorrow Night Blue'),
										_Utils_Tuple2('tomorrow_night_bright', 'Tomorrow Night Bright'),
										_Utils_Tuple2('tomorrow_night_eighties', 'Tomorrow Night 80s'),
										_Utils_Tuple2('twilight', 'Twilight'),
										_Utils_Tuple2('vibrant_ink', 'Vibrant Ink')
									])))
						]))
				]));
	});
var $author$project$Lia$Settings$Update$Light = {$: 'Light'};
var $author$project$Lia$Settings$View$viewLightMode = F2(
	function (_v0, isLight) {
		return A2(
			$elm$html$Html$span,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$input,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$type_('checkbox'),
							$elm$html$Html$Attributes$checked(isLight),
							$elm$html$Html$Events$onClick(
							$author$project$Lia$Settings$Update$Toggle($author$project$Lia$Settings$Update$Light))
						]),
					_List_Nil),
					A2(
					$elm$html$Html$label,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(
							isLight ? 'Dark-Mode' : 'Light-Mode')
						]))
				]));
	});
var $author$project$Lia$Settings$Update$ChangeFontSize = function (a) {
	return {$: 'ChangeFontSize', a: a};
};
var $author$project$Translations$baseDec = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Увеличаване';
		case 'De':
			return 'verkleinern';
		case 'En':
			return 'decrease';
		case 'Es':
			return 'reducir';
		case 'Fa':
			return 'افزودن';
		case 'Hy':
			return 'նվազել';
		case 'Nl':
			return 'verkleinen';
		case 'Ru':
			return 'уменьшить';
		case 'Tw':
			return '減少';
		case 'Ua':
			return 'зменшити';
		default:
			return '減少';
	}
};
var $author$project$Translations$baseFont = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Шрифт';
		case 'De':
			return 'Schrift';
		case 'En':
			return 'Font';
		case 'Es':
			return 'fuente';
		case 'Fa':
			return 'فونت';
		case 'Hy':
			return 'տառատեսակ';
		case 'Nl':
			return 'font';
		case 'Ru':
			return 'шрифт';
		case 'Tw':
			return '字體';
		case 'Ua':
			return 'шрифт';
		default:
			return '字體';
	}
};
var $author$project$Translations$baseInc = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Намаляване';
		case 'De':
			return 'vergrößern';
		case 'En':
			return 'increase';
		case 'Es':
			return 'aumentar';
		case 'Fa':
			return 'کاستن';
		case 'Hy':
			return 'աճել';
		case 'Nl':
			return 'vergroten';
		case 'Ru':
			return 'увеличить';
		case 'Tw':
			return '增加';
		case 'Ua':
			return 'збільшити';
		default:
			return '增加';
	}
};
var $author$project$Lia$Settings$View$btnFont = F3(
	function (str, title, msg) {
		return A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					$elm$html$Html$Events$onClick(msg),
					$elm$html$Html$Attributes$title(title),
					$elm$html$Html$Attributes$class('lia-btn lia-slide-control lia-left')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(str)
				]));
	});
var $author$project$Lia$Settings$View$viewSizing = F2(
	function (lang, _int) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text(
					$author$project$Translations$baseFont(lang) + ':'),
					A3(
					$author$project$Lia$Settings$View$btnFont,
					'-',
					$author$project$Translations$baseDec(lang),
					$author$project$Lia$Settings$Update$ChangeFontSize(false)),
					$elm$html$Html$text(
					$elm$core$String$fromInt(_int) + '%'),
					A3(
					$author$project$Lia$Settings$View$btnFont,
					'+',
					$author$project$Translations$baseInc(lang),
					$author$project$Lia$Settings$Update$ChangeFontSize(true))
				]));
	});
var $author$project$Lia$Settings$Update$ChangeTheme = function (a) {
	return {$: 'ChangeTheme', a: a};
};
var $author$project$Translations$cBlue = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Синьо';
		case 'De':
			return 'Blau';
		case 'En':
			return 'Blue';
		case 'Es':
			return 'azul';
		case 'Fa':
			return 'آبی';
		case 'Hy':
			return 'կապույտ';
		case 'Nl':
			return 'blauw';
		case 'Ru':
			return 'синий';
		case 'Tw':
			return '藍色';
		case 'Ua':
			return 'синій';
		default:
			return '藍色';
	}
};
var $author$project$Lia$Settings$View$viewTheme = F2(
	function (lang, theme) {
		return A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('lia-settings__theme-colors')
				]),
			$elm$core$List$concat(
				A2(
					$elm$core$List$map,
					function (_v0) {
						var color = _v0.a;
						var name = _v0.b;
						return _List_fromArray(
							[
								A2(
								$elm$html$Html$input,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$type_('radio'),
										$elm$html$Html$Attributes$checked(
										_Utils_eq(theme, color)),
										$elm$html$Html$Events$onClick(
										$author$project$Lia$Settings$Update$ChangeTheme(color))
									]),
								_List_Nil),
								A2(
								$elm$html$Html$label,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text(name)
									]))
							]);
					},
					_List_fromArray(
						[
							_Utils_Tuple2('turquoise', 'Türkis'),
							_Utils_Tuple2(
							'blue',
							$author$project$Translations$cBlue(lang)),
							_Utils_Tuple2('red', 'Rot'),
							_Utils_Tuple2('yellow', 'Gelb')
						]))));
	});
var $author$project$Lia$Settings$View$viewSettings = F2(
	function (lang, settings) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
					A2($elm$html$Html$Attributes$style, 'top', '50px'),
					A2($elm$html$Html$Attributes$style, 'zIndex', '1000'),
					A2($elm$html$Html$Attributes$style, 'color', 'red')
				]),
			_List_fromArray(
				[
					A2($author$project$Lia$Settings$View$viewLightMode, lang, settings.light),
					A2($elm$html$Html$hr, _List_Nil, _List_Nil),
					A2($author$project$Lia$Settings$View$viewTheme, lang, settings.theme),
					A2($elm$html$Html$hr, _List_Nil, _List_Nil),
					A2($author$project$Lia$Settings$View$viewEditorTheme, lang, settings.editor),
					A2($elm$html$Html$hr, _List_Nil, _List_Nil),
					A2($author$project$Lia$Settings$View$viewSizing, lang, settings.font_size)
				]));
	});
var $author$project$Lia$Settings$View$viewTranslations = A2(
	$elm$core$Basics$composeR,
	$elm$core$Dict$toList,
	A2(
		$elm$core$Basics$composeR,
		$elm$core$List$map(
			function (_v0) {
				var title = _v0.a;
				var url = _v0.b;
				return A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href(url),
							$elm$html$Html$Attributes$class('lia-link')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(title),
							A2($elm$html$Html$br, _List_Nil, _List_Nil)
						]));
			}),
		$elm$html$Html$div(_List_Nil)));
var $author$project$Lia$Settings$View$view = F4(
	function (lang, url, definition, settings) {
		var _v0 = settings.action;
		if (_v0.$ === 'Nothing') {
			return $elm$html$Html$text('');
		} else {
			switch (_v0.a.$) {
				case 'ShowModes':
					var _v1 = _v0.a;
					return A2($author$project$Lia$Settings$View$viewModes, lang, settings);
				case 'ShowSettings':
					var _v2 = _v0.a;
					return A2($author$project$Lia$Settings$View$viewSettings, lang, settings);
				case 'Share':
					var _v3 = _v0.a;
					return $author$project$Lia$Settings$View$qrCodeView(url);
				case 'ShowTranslations':
					var _v4 = _v0.a;
					return $author$project$Lia$Settings$View$viewTranslations(definition.translation);
				default:
					var _v5 = _v0.a;
					return A2($author$project$Lia$Settings$View$viewInformation, lang, definition);
			}
		}
	});
var $author$project$Lia$View$slideTopBar = F4(
	function (lang, url, settings, def) {
		return A2(
			$elm$html$Html$map,
			$author$project$Lia$Update$UpdateSettings,
			A2(
				$elm$html$Html$header,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('lia-toolbar'),
						$elm$html$Html$Attributes$id('lia-toolbar-nav')
					]),
				_List_fromArray(
					[
						$author$project$Lia$Settings$View$btnIndex(lang),
						A2(
						$elm$html$Html$span,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text('icon')
							])),
						A2(
						$elm$html$Html$nav,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('navbar'),
								A2($elm$html$Html$Attributes$style, 'float', 'right')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$button,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('navbar-toggler'),
										$elm$html$Html$Attributes$type_('button')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('...')
									])),
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('navbar-collapse')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$ul,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('navbar-nav'),
												A2($elm$html$Html$Attributes$style, 'display', 'inline')
											]),
										A2(
											$elm$core$List$map,
											$author$project$Lia$View$navItem,
											_List_fromArray(
												[
													$author$project$Lia$Settings$View$btnMode(lang),
													$author$project$Lia$Settings$View$btnSettings(lang),
													A2(
													$author$project$Lia$Settings$View$btnTranslations,
													lang,
													$elm$core$Dict$isEmpty(def.translation)),
													$author$project$Lia$Settings$View$btnShare(lang),
													$author$project$Lia$Settings$View$btnInformation(lang)
												])))
									])),
								A4($author$project$Lia$Settings$View$view, lang, url, def, settings)
							]))
					])));
	});
var $elm$html$Html$main_ = _VirtualDom_node('main');
var $author$project$Lia$Markdown$Inline$Config$setViewer = F2(
	function (fn, config) {
		return _Utils_update(
			config,
			{
				view: $elm$core$Maybe$Just(fn)
			});
	});
var $author$project$Lia$Markdown$Config$setSubViewer = F2(
	function (_function, config) {
		return _Utils_update(
			config,
			{
				view: A2(
					$elm$core$Basics$composeR,
					$author$project$Lia$Markdown$Inline$View$viewer(
						A2($author$project$Lia$Markdown$Inline$Config$setViewer, _function, config.main)),
					$elm$core$List$map(
						$elm$html$Html$map($author$project$Lia$Markdown$Update$Script)))
			});
	});
var $author$project$Lia$Markdown$Effect$Update$Mute = function (a) {
	return {$: 'Mute', a: a};
};
var $author$project$Lia$Markdown$Effect$Update$Speak = F3(
	function (a, b, c) {
		return {$: 'Speak', a: a, b: b, c: c};
	});
var $author$project$Lia$Markdown$HTML$Types$getContent = function (node) {
	if (node.$ === 'Node') {
		var content = node.c;
		return content;
	} else {
		return _List_Nil;
	}
};
var $author$project$Lia$Markdown$Stringify$block = F2(
	function (scripts, id) {
		return A2(
			$elm$core$Basics$composeR,
			$elm$core$List$map(
				A2($author$project$Lia$Markdown$Stringify$stringify, scripts, id)),
			A2(
				$elm$core$Basics$composeR,
				$elm$core$List$intersperse('\n'),
				$elm$core$String$concat));
	});
var $author$project$Lia$Markdown$Stringify$stringify = F3(
	function (scripts, id, markdown) {
		switch (markdown.$) {
			case 'Paragraph':
				var inlines = markdown.b;
				return A3($author$project$Lia$Markdown$Inline$Stringify$stringify_, scripts, id, inlines);
			case 'Quote':
				var md = markdown.b;
				return A3($author$project$Lia$Markdown$Stringify$block, scripts, id, md);
			case 'BulletList':
				var mds = markdown.b;
				return $elm$core$String$concat(
					A2(
						$elm$core$List$map,
						A2($author$project$Lia$Markdown$Stringify$block, scripts, id),
						mds));
			case 'OrderedList':
				var mds = markdown.b;
				return $elm$core$String$concat(
					A2(
						$elm$core$List$map,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Tuple$second,
							A2($author$project$Lia$Markdown$Stringify$block, scripts, id)),
						mds));
			case 'Effect':
				var e = markdown.b;
				return A2($author$project$Lia$Markdown$Effect$Types$isIn, id, e) ? A3($author$project$Lia$Markdown$Stringify$block, scripts, id, e.content) : '\n';
			case 'Table':
				var table = markdown.b;
				var head = $elm$core$String$concat(
					A2(
						$elm$core$List$map,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Tuple$second,
							A2($author$project$Lia$Markdown$Inline$Stringify$stringify_, scripts, id)),
						table.head));
				var body = $elm$core$String$concat(
					A2(
						$elm$core$List$map,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$List$map(
								A2(
									$elm$core$Basics$composeR,
									$elm$core$Tuple$second,
									A2($author$project$Lia$Markdown$Inline$Stringify$stringify_, scripts, id))),
							$elm$core$String$concat),
						table.body));
				return head + (' ' + body);
			case 'HTML':
				var node = markdown.b;
				return A3(
					$author$project$Lia$Markdown$Stringify$block,
					scripts,
					id,
					$author$project$Lia$Markdown$HTML$Types$getContent(node));
			case 'Header':
				var _v1 = markdown.b;
				var title = _v1.a;
				return A3($author$project$Lia$Markdown$Inline$Stringify$stringify_, scripts, id, title);
			default:
				return '';
		}
	});
var $author$project$Lia$Markdown$Effect$View$block_playback = F2(
	function (config, e) {
		return _Utils_eq(
			config.speaking,
			$elm$core$Maybe$Just(e.id)) ? A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('lia-btn lia-icon'),
					A2($elm$html$Html$Attributes$style, 'margin-left', '49%'),
					$elm$html$Html$Events$onClick(
					A2(
						$author$project$Lia$Markdown$Update$UpdateEffect,
						true,
						$author$project$Lia$Markdown$Effect$Update$Mute(e.id)))
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('stop')
				])) : A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('lia-btn lia-icon'),
					A2($elm$html$Html$Attributes$style, 'margin-left', '49%'),
					$elm$html$Html$Events$onClick(
					A2(
						$author$project$Lia$Markdown$Update$UpdateEffect,
						true,
						A3(
							$author$project$Lia$Markdown$Effect$Update$Speak,
							e.id,
							e.voice,
							$elm$core$String$concat(
								A2(
									$elm$core$List$intersperse,
									'\n',
									A2(
										$elm$core$List$map,
										A2($author$project$Lia$Markdown$Stringify$stringify, config.scripts, config.visible),
										e.content))))))
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('play_arrow')
				]));
	});
var $author$project$Lia$Markdown$Effect$View$circle = function (id) {
	return A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('lia-effect-circle')
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(
				$elm$core$String$fromInt(id))
			]));
};
var $author$project$Lia$Markdown$Effect$View$block = F5(
	function (config, model, attr, e, body) {
		if (_Utils_eq(config.visible, $elm$core$Maybe$Nothing)) {
			return A2(
				$elm$html$Html$div,
				_List_Nil,
				function () {
					var _v0 = $author$project$Lia$Markdown$Effect$Types$class(e);
					switch (_v0.$) {
						case 'Animation':
							return _List_fromArray(
								[
									$author$project$Lia$Markdown$Effect$View$circle(e.begin),
									A2(
									$elm$html$Html$div,
									A2($author$project$Lia$Markdown$HTML$Attributes$annotation, '', _List_Nil),
									body)
								]);
						case 'PlayBack':
							return _List_fromArray(
								[
									A2($author$project$Lia$Markdown$Effect$View$block_playback, config, e),
									A2(
									$elm$html$Html$div,
									A2($author$project$Lia$Markdown$HTML$Attributes$annotation, '', _List_Nil),
									body)
								]);
						default:
							return _List_fromArray(
								[
									A2($author$project$Lia$Markdown$Effect$View$block_playback, config, e),
									A2(
									$elm$html$Html$div,
									_List_Nil,
									_List_fromArray(
										[
											$author$project$Lia$Markdown$Effect$View$circle(e.begin),
											A2(
											$elm$html$Html$div,
											A2($author$project$Lia$Markdown$HTML$Attributes$annotation, '', _List_Nil),
											body)
										]))
								]);
					}
				}());
		} else {
			var visible = A2(
				$author$project$Lia$Markdown$Effect$Types$isIn,
				$elm$core$Maybe$Just(model.visible),
				e);
			var _v1 = $author$project$Lia$Markdown$Effect$Types$class(e);
			switch (_v1.$) {
				case 'Animation':
					return (!visible) ? $elm$html$Html$text('') : A2(
						$elm$html$Html$div,
						_List_Nil,
						_List_fromArray(
							[
								$author$project$Lia$Markdown$Effect$View$circle(e.begin),
								A2(
								$elm$html$Html$div,
								A2(
									$elm$core$List$cons,
									$elm$html$Html$Attributes$id(
										_Utils_eq(e.begin, model.visible) ? 'focused' : $elm$core$String$fromInt(e.begin)),
									A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-effect', attr)),
								body)
							]));
				case 'PlayBack':
					return A2(
						$elm$html$Html$div,
						_List_Nil,
						_List_fromArray(
							[
								A2($author$project$Lia$Markdown$Effect$View$block_playback, config, e),
								A2(
								$elm$html$Html$div,
								A2($author$project$Lia$Markdown$HTML$Attributes$annotation, '', _List_Nil),
								body)
							]));
				default:
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$hidden(!visible)
							]),
						_List_fromArray(
							[
								A2($author$project$Lia$Markdown$Effect$View$block_playback, config, e),
								A2(
								$elm$html$Html$div,
								_List_Nil,
								_List_fromArray(
									[
										$author$project$Lia$Markdown$Effect$View$circle(e.begin),
										A2(
										$elm$html$Html$div,
										A2(
											$elm$core$List$cons,
											$elm$html$Html$Attributes$id(
												_Utils_eq(e.begin, model.visible) ? 'focused' : $elm$core$String$fromInt(e.begin)),
											A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-effect', attr)),
										body)
									]))
							]));
			}
		}
	});
var $elm$html$Html$blockquote = _VirtualDom_node('blockquote');
var $author$project$Lia$Markdown$Quiz$Types$getState = F2(
	function (vector, idx) {
		return A2($elm$core$Array$get, idx, vector);
	});
var $author$project$Lia$Markdown$Quiz$View$class = F2(
	function (id, vector) {
		var _v0 = A2(
			$elm$core$Maybe$map,
			function ($) {
				return $.solved;
			},
			A2($author$project$Lia$Markdown$Quiz$Types$getState, vector, id));
		_v0$2:
		while (true) {
			if (_v0.$ === 'Just') {
				switch (_v0.a.$) {
					case 'Solved':
						var _v1 = _v0.a;
						return 'lia-quiz lia-card solved';
					case 'ReSolved':
						var _v2 = _v0.a;
						return 'lia-quiz lia-card resolved';
					default:
						break _v0$2;
				}
			} else {
				break _v0$2;
			}
		}
		return 'lia-quiz lia-card open';
	});
var $elm$svg$Svg$Attributes$fill = _VirtualDom_attribute('fill');
var $elm$svg$Svg$Attributes$id = _VirtualDom_attribute('id');
var $elm$svg$Svg$marker = $elm$svg$Svg$trustedNode('marker');
var $elm$svg$Svg$Attributes$markerHeight = _VirtualDom_attribute('markerHeight');
var $elm$svg$Svg$Attributes$markerUnits = _VirtualDom_attribute('markerUnits');
var $elm$svg$Svg$Attributes$markerWidth = _VirtualDom_attribute('markerWidth');
var $elm$svg$Svg$Attributes$orient = _VirtualDom_attribute('orient');
var $elm$svg$Svg$Attributes$refX = _VirtualDom_attribute('refX');
var $elm$svg$Svg$Attributes$refY = _VirtualDom_attribute('refY');
var $andre_dietrich$elm_svgbob$SvgBob$Grid$vectorEffect = A2($elm$html$Html$Attributes$attribute, 'vector-effect', 'none');
var $andre_dietrich$elm_svgbob$SvgBob$Grid$arrowMarker = function (c) {
	return A2(
		$elm$svg$Svg$marker,
		_List_fromArray(
			[
				$elm$svg$Svg$Attributes$id('triangle'),
				$elm$svg$Svg$Attributes$viewBox('0 0 14 14'),
				$elm$svg$Svg$Attributes$refX('0'),
				$elm$svg$Svg$Attributes$refY('5'),
				$elm$svg$Svg$Attributes$markerUnits('strokeWidth'),
				$elm$svg$Svg$Attributes$markerWidth('10'),
				$elm$svg$Svg$Attributes$markerHeight('10'),
				$elm$svg$Svg$Attributes$orient('auto'),
				$elm$svg$Svg$Attributes$stroke(c),
				$elm$svg$Svg$Attributes$fill(c)
			]),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M 0 0 L 10 5 L 0 10 z'),
						$andre_dietrich$elm_svgbob$SvgBob$Grid$vectorEffect
					]),
				_List_Nil)
			]));
};
var $andre_dietrich$elm_svgbob$SvgBob$Grid$bgColor = function (bg) {
	return $elm$svg$Svg$Attributes$style('background-color:' + (bg + ';'));
};
var $elm$svg$Svg$defs = $elm$svg$Svg$trustedNode('defs');
var $elm$svg$Svg$circle = $elm$svg$Svg$trustedNode('circle');
var $elm$svg$Svg$Attributes$cx = _VirtualDom_attribute('cx');
var $elm$svg$Svg$Attributes$cy = _VirtualDom_attribute('cy');
var $andre_dietrich$elm_svgbob$SvgBob$Grid$moveExt = F2(
	function (n, dir) {
		switch (dir.$) {
			case 'South':
				return $andre_dietrich$elm_svgbob$SvgBob$Types$South_(n);
			case 'South_':
				var m = dir.a;
				return $andre_dietrich$elm_svgbob$SvgBob$Types$South_(n * m);
			case 'North':
				return $andre_dietrich$elm_svgbob$SvgBob$Types$North_(n);
			case 'North_':
				var m = dir.a;
				return $andre_dietrich$elm_svgbob$SvgBob$Types$North_(n * m);
			case 'East':
				return $andre_dietrich$elm_svgbob$SvgBob$Types$East_(n);
			case 'East_':
				var m = dir.a;
				return $andre_dietrich$elm_svgbob$SvgBob$Types$East_(n * m);
			case 'West':
				return $andre_dietrich$elm_svgbob$SvgBob$Types$West_(n);
			case 'West_':
				var m = dir.a;
				return $andre_dietrich$elm_svgbob$SvgBob$Types$West_(n * m);
			case 'Ext':
				var dir1 = dir.a;
				var dir2 = dir.b;
				return A2(
					$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
					A2($andre_dietrich$elm_svgbob$SvgBob$Grid$moveExt, n, dir1),
					A2($andre_dietrich$elm_svgbob$SvgBob$Grid$moveExt, n, dir2));
			case 'Ext_':
				var m = dir.a;
				var dir1 = dir.b;
				var dir2 = dir.c;
				return A2(
					$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
					A2($andre_dietrich$elm_svgbob$SvgBob$Grid$moveExt, n * m, dir1),
					A2($andre_dietrich$elm_svgbob$SvgBob$Grid$moveExt, n * m, dir2));
			default:
				return $andre_dietrich$elm_svgbob$SvgBob$Types$Center;
		}
	});
var $andre_dietrich$elm_svgbob$SvgBob$Grid$move = F2(
	function (dir, pt) {
		switch (dir.$) {
			case 'South':
				return _Utils_update(
					pt,
					{y: pt.y + ($andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2)});
			case 'South_':
				var n = dir.a;
				return _Utils_update(
					pt,
					{y: pt.y + (($andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2) * n)});
			case 'North':
				return _Utils_update(
					pt,
					{y: pt.y - ($andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2)});
			case 'North_':
				var n = dir.a;
				return _Utils_update(
					pt,
					{y: pt.y - (($andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2) * n)});
			case 'East':
				return _Utils_update(
					pt,
					{x: pt.x + ($andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2)});
			case 'East_':
				var n = dir.a;
				return _Utils_update(
					pt,
					{x: pt.x + (($andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2) * n)});
			case 'West':
				return _Utils_update(
					pt,
					{x: pt.x - ($andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2)});
			case 'West_':
				var n = dir.a;
				return _Utils_update(
					pt,
					{x: pt.x - (($andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2) * n)});
			case 'Ext':
				var dir1 = dir.a;
				var dir2 = dir.b;
				return A2(
					$andre_dietrich$elm_svgbob$SvgBob$Grid$move,
					dir2,
					A2($andre_dietrich$elm_svgbob$SvgBob$Grid$move, dir1, pt));
			case 'Ext_':
				var n = dir.a;
				var dir1 = dir.b;
				var dir2 = dir.c;
				return A2(
					$andre_dietrich$elm_svgbob$SvgBob$Grid$move,
					A2($andre_dietrich$elm_svgbob$SvgBob$Grid$moveExt, n, dir2),
					A2(
						$andre_dietrich$elm_svgbob$SvgBob$Grid$move,
						A2($andre_dietrich$elm_svgbob$SvgBob$Grid$moveExt, n, dir1),
						pt));
			default:
				return pt;
		}
	});
var $andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc = F4(
	function (s, faktor, pos, dir) {
		var radius = s.arcRadius * faktor;
		var pos2 = A2($andre_dietrich$elm_svgbob$SvgBob$Grid$move, dir, pos);
		return A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d(
					A2(
						$elm$core$String$join,
						' ',
						_List_fromArray(
							[
								'M',
								$elm$core$String$fromFloat(pos.x),
								$elm$core$String$fromFloat(pos.y),
								'A',
								$elm$core$String$fromFloat(radius),
								$elm$core$String$fromFloat(radius),
								'0',
								'0',
								'0',
								$elm$core$String$fromFloat(pos2.x),
								$elm$core$String$fromFloat(pos2.y)
							]))),
					$elm$svg$Svg$Attributes$stroke(s.strokeColor),
					$elm$svg$Svg$Attributes$strokeWidth(
					$elm$core$String$fromFloat(s.lineWidth)),
					$elm$svg$Svg$Attributes$fill('transparent'),
					$andre_dietrich$elm_svgbob$SvgBob$Grid$vectorEffect
				]),
			_List_Nil);
	});
var $elm$svg$Svg$Attributes$markerEnd = _VirtualDom_attribute('marker-end');
var $andre_dietrich$elm_svgbob$SvgBob$Grid$opposite = function (dir) {
	switch (dir.$) {
		case 'East':
			return $andre_dietrich$elm_svgbob$SvgBob$Types$West;
		case 'East_':
			var n = dir.a;
			return $andre_dietrich$elm_svgbob$SvgBob$Types$West_(n);
		case 'West':
			return $andre_dietrich$elm_svgbob$SvgBob$Types$East;
		case 'West_':
			var n = dir.a;
			return $andre_dietrich$elm_svgbob$SvgBob$Types$East_(n);
		case 'North':
			return $andre_dietrich$elm_svgbob$SvgBob$Types$South;
		case 'North_':
			var n = dir.a;
			return $andre_dietrich$elm_svgbob$SvgBob$Types$South_(n);
		case 'South':
			return $andre_dietrich$elm_svgbob$SvgBob$Types$North;
		case 'South_':
			var n = dir.a;
			return $andre_dietrich$elm_svgbob$SvgBob$Types$North_(n);
		case 'Ext':
			var dir1 = dir.a;
			var dir2 = dir.b;
			return A2(
				$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
				$andre_dietrich$elm_svgbob$SvgBob$Grid$opposite(dir1),
				$andre_dietrich$elm_svgbob$SvgBob$Grid$opposite(dir2));
		case 'Ext_':
			var n = dir.a;
			var dir1 = dir.b;
			var dir2 = dir.c;
			return A3(
				$andre_dietrich$elm_svgbob$SvgBob$Types$Ext_,
				n,
				$andre_dietrich$elm_svgbob$SvgBob$Grid$opposite(dir1),
				$andre_dietrich$elm_svgbob$SvgBob$Grid$opposite(dir2));
		default:
			return dir;
	}
};
var $elm$svg$Svg$line = $elm$svg$Svg$trustedNode('line');
var $elm$svg$Svg$Attributes$x1 = _VirtualDom_attribute('x1');
var $elm$svg$Svg$Attributes$x2 = _VirtualDom_attribute('x2');
var $elm$svg$Svg$Attributes$y1 = _VirtualDom_attribute('y1');
var $elm$svg$Svg$Attributes$y2 = _VirtualDom_attribute('y2');
var $andre_dietrich$elm_svgbob$SvgBob$Grid$toLine = F3(
	function (misc, pos, dir) {
		var pos2 = A2($andre_dietrich$elm_svgbob$SvgBob$Grid$move, dir, pos);
		return A2(
			$elm$svg$Svg$line,
			A2(
				$elm$core$List$append,
				misc,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1(
						$elm$core$String$fromFloat(pos.x)),
						$elm$svg$Svg$Attributes$x2(
						$elm$core$String$fromFloat(pos2.x)),
						$elm$svg$Svg$Attributes$y1(
						$elm$core$String$fromFloat(pos.y)),
						$elm$svg$Svg$Attributes$y2(
						$elm$core$String$fromFloat(pos2.y))
					])),
			_List_Nil);
	});
var $andre_dietrich$elm_svgbob$SvgBob$Grid$drawArrow = F3(
	function (settings, pos, dir) {
		return A3(
			$andre_dietrich$elm_svgbob$SvgBob$Grid$toLine,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$style(
					'stroke: ' + (settings.strokeColor + (';stroke-width:' + $elm$core$String$fromFloat(settings.lineWidth)))),
					$elm$svg$Svg$Attributes$markerEnd('url(#triangle)'),
					$andre_dietrich$elm_svgbob$SvgBob$Grid$vectorEffect
				]),
			A2($andre_dietrich$elm_svgbob$SvgBob$Grid$move, dir, pos),
			$andre_dietrich$elm_svgbob$SvgBob$Grid$opposite(dir));
	});
var $elm$svg$Svg$foreignObject = $elm$svg$Svg$trustedNode('foreignObject');
var $elm$svg$Svg$Attributes$height = _VirtualDom_attribute('height');
var $elm$svg$Svg$Attributes$width = _VirtualDom_attribute('width');
var $elm$svg$Svg$Attributes$x = _VirtualDom_attribute('x');
var $elm$svg$Svg$Attributes$y = _VirtualDom_attribute('y');
var $andre_dietrich$elm_svgbob$SvgBob$Grid$drawCustomObject = F5(
	function (verbatim, s, pos, _v0, obj) {
		var rows = _v0.a;
		var columns = _v0.b;
		var pos2 = A2(
			$andre_dietrich$elm_svgbob$SvgBob$Grid$move,
			A2(
				$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
				$andre_dietrich$elm_svgbob$SvgBob$Types$North_(1.1),
				$andre_dietrich$elm_svgbob$SvgBob$Types$West),
			pos);
		return A2(
			$elm$svg$Svg$foreignObject,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x(
					$elm$core$String$fromFloat(pos2.x)),
					$elm$svg$Svg$Attributes$y(
					$elm$core$String$fromFloat(pos2.y)),
					$elm$svg$Svg$Attributes$width(
					A2(
						$elm$core$Maybe$withDefault,
						$elm$core$String$fromFloat(
							1 + $andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(columns)),
						s.widthVerbatim)),
					$elm$svg$Svg$Attributes$height(
					A2(
						$elm$core$Maybe$withDefault,
						$elm$core$String$fromFloat(
							$andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(rows)),
						s.heightVerbatim)),
					$elm$svg$Svg$Attributes$style(
					'font-size:' + ($elm$core$String$fromFloat(s.fontSize) + 'px;font-family:monospace')),
					$elm$svg$Svg$Attributes$fill(s.textColor)
				]),
			_List_fromArray(
				[
					verbatim(obj)
				]));
	});
var $elm$svg$Svg$node = $elm$virtual_dom$VirtualDom$nodeNS('http://www.w3.org/2000/svg');
var $elm$svg$Svg$text = $elm$virtual_dom$VirtualDom$text;
var $andre_dietrich$elm_svgbob$SvgBob$Grid$drawForeignObject = F5(
	function (withVerbatim, s, pos, _v0, str) {
		var rows = _v0.a;
		var columns = _v0.b;
		if (withVerbatim.$ === 'Nothing') {
			var pos2 = A2(
				$andre_dietrich$elm_svgbob$SvgBob$Grid$move,
				A2(
					$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
					$andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5),
					$andre_dietrich$elm_svgbob$SvgBob$Types$West),
				pos);
			return A3(
				$elm$svg$Svg$node,
				'text',
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x(
						$elm$core$String$fromFloat(pos2.x)),
						$elm$svg$Svg$Attributes$y(
						$elm$core$String$fromFloat(pos2.y)),
						$elm$svg$Svg$Attributes$style(
						'font-size:' + ($elm$core$String$fromFloat(s.fontSize) + 'px;font-family:monospace')),
						$elm$svg$Svg$Attributes$fill(s.textColor)
					]),
				_List_fromArray(
					[
						$elm$svg$Svg$text(str)
					]));
		} else {
			var verbatim = withVerbatim.a;
			return A5(
				$andre_dietrich$elm_svgbob$SvgBob$Grid$drawCustomObject,
				verbatim,
				s,
				pos,
				_Utils_Tuple2(rows, columns),
				str);
		}
	});
var $elm$svg$Svg$Attributes$strokeLinecap = _VirtualDom_attribute('stroke-linecap');
var $elm$svg$Svg$Attributes$strokeLinejoin = _VirtualDom_attribute('stroke-linejoin');
var $andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine = function (s) {
	return $andre_dietrich$elm_svgbob$SvgBob$Grid$toLine(
		_List_fromArray(
			[
				$elm$svg$Svg$Attributes$stroke(s.strokeColor),
				$elm$svg$Svg$Attributes$strokeWidth(
				$elm$core$String$fromFloat(s.lineWidth)),
				$elm$svg$Svg$Attributes$strokeLinecap('round'),
				$elm$svg$Svg$Attributes$strokeLinejoin('mitter'),
				$andre_dietrich$elm_svgbob$SvgBob$Grid$vectorEffect
			]));
};
var $elm$svg$Svg$rect = $elm$svg$Svg$trustedNode('rect');
var $andre_dietrich$elm_svgbob$SvgBob$Grid$drawSquare = F2(
	function (settings, pos) {
		return A2(
			$elm$svg$Svg$rect,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x(
					$elm$core$String$fromFloat(pos.x - 4)),
					$elm$svg$Svg$Attributes$y(
					$elm$core$String$fromFloat(pos.y - 4)),
					$elm$svg$Svg$Attributes$stroke(settings.strokeColor),
					$elm$svg$Svg$Attributes$fill(settings.strokeColor),
					$elm$svg$Svg$Attributes$width('8'),
					$elm$svg$Svg$Attributes$height('8')
				]),
			_List_Nil);
	});
var $andre_dietrich$elm_svgbob$SvgBob$Grid$drawText = F3(
	function (s, pos, _char) {
		var pos2 = A2(
			$andre_dietrich$elm_svgbob$SvgBob$Grid$move,
			A2(
				$andre_dietrich$elm_svgbob$SvgBob$Types$Ext,
				$andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5),
				$andre_dietrich$elm_svgbob$SvgBob$Types$West),
			pos);
		return A3(
			$elm$svg$Svg$node,
			'text',
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x(
					$elm$core$String$fromFloat(pos2.x)),
					$elm$svg$Svg$Attributes$y(
					$elm$core$String$fromFloat(pos2.y)),
					$elm$svg$Svg$Attributes$style(
					'font-size:' + ($elm$core$String$fromFloat(s.fontSize) + 'px;font-family:monospace;')),
					$elm$svg$Svg$Attributes$fill(s.textColor)
				]),
			_List_fromArray(
				[
					$elm$svg$Svg$text(
					$elm$core$String$fromChar(_char))
				]));
	});
var $elm$svg$Svg$Attributes$r = _VirtualDom_attribute('r');
var $andre_dietrich$elm_svgbob$SvgBob$Grid$draw = F4(
	function (withVerbatim, settings, pos, element) {
		switch (element.$) {
			case 'Triangle':
				var dir = element.a;
				return _List_fromArray(
					[
						A3($andre_dietrich$elm_svgbob$SvgBob$Grid$drawArrow, settings, pos, dir)
					]);
			case 'Text':
				var _char = element.a;
				return _List_fromArray(
					[
						A3($andre_dietrich$elm_svgbob$SvgBob$Grid$drawText, settings, pos, _char)
					]);
			case 'Line':
				var start = element.a;
				var stop = element.b;
				return _List_fromArray(
					[
						A3(
						$andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine,
						settings,
						A2($andre_dietrich$elm_svgbob$SvgBob$Grid$move, start, pos),
						stop)
					]);
			case 'Curve':
				var faktor = element.a;
				var start = element.b;
				var stop = element.c;
				return _List_fromArray(
					[
						A4(
						$andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc,
						settings,
						faktor,
						A2($andre_dietrich$elm_svgbob$SvgBob$Grid$move, start, pos),
						stop)
					]);
			case 'Sequence':
				var elements = element.a;
				return $elm$core$List$concat(
					A2(
						$elm$core$List$map,
						A3($andre_dietrich$elm_svgbob$SvgBob$Grid$draw, withVerbatim, settings, pos),
						elements));
			case 'Box':
				return _List_fromArray(
					[
						A2($andre_dietrich$elm_svgbob$SvgBob$Grid$drawSquare, settings, pos)
					]);
			case 'Circle':
				var filled = element.a;
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx(
								$elm$core$String$fromFloat(pos.x)),
								$elm$svg$Svg$Attributes$cy(
								$elm$core$String$fromFloat(pos.y)),
								$elm$svg$Svg$Attributes$r(
								$elm$core$String$fromFloat(settings.arcRadius)),
								$elm$svg$Svg$Attributes$fill(
								filled ? settings.strokeColor : settings.backgroundColor),
								$elm$svg$Svg$Attributes$stroke(settings.strokeColor),
								$elm$svg$Svg$Attributes$strokeWidth(
								$elm$core$String$fromFloat(settings.lineWidth))
							]),
						_List_Nil)
					]);
			case 'ForeignObject':
				var str = element.a;
				var dim = element.b;
				return _List_fromArray(
					[
						A5($andre_dietrich$elm_svgbob$SvgBob$Grid$drawForeignObject, withVerbatim, settings, pos, dim, str)
					]);
			default:
				return _List_Nil;
		}
	});
var $andre_dietrich$elm_svgbob$SvgBob$Grid$viewBox = F2(
	function (rows, columns) {
		return $elm$svg$Svg$Attributes$viewBox(
			'0 0 ' + ($elm$core$String$fromFloat(
				$andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(columns) + 10) + (' ' + $elm$core$String$fromFloat(
				$andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(rows) + 10))));
	});
var $andre_dietrich$elm_svgbob$SvgBob$Grid$drawElements = F3(
	function (attributes, verbatim, config) {
		var fnSVG = A2($andre_dietrich$elm_svgbob$SvgBob$Grid$draw, $elm$core$Maybe$Nothing, config.settings);
		var fnCustom = A2($andre_dietrich$elm_svgbob$SvgBob$Grid$drawCustomObject, verbatim, config.settings);
		return A2(
			$elm$svg$Svg$svg,
			A2(
				$elm$core$List$cons,
				A2($andre_dietrich$elm_svgbob$SvgBob$Grid$viewBox, config.rows, config.columns),
				A2(
					$elm$core$List$cons,
					$andre_dietrich$elm_svgbob$SvgBob$Grid$bgColor(config.settings.backgroundColor),
					attributes)),
			A2(
				$elm$core$List$append,
				A2(
					$elm$core$List$concatMap,
					function (_v2) {
						var p = _v2.a;
						var e = _v2.b;
						return A2(fnSVG, p, e);
					},
					config.svg),
				A2(
					$elm$core$List$cons,
					A2(
						$elm$svg$Svg$defs,
						_List_Nil,
						_List_fromArray(
							[
								$andre_dietrich$elm_svgbob$SvgBob$Grid$arrowMarker(config.settings.strokeColor)
							])),
					A2(
						$elm$core$List$map,
						function (_v0) {
							var a = _v0.a;
							var _v1 = _v0.b;
							var point = _v1.a;
							var dim = _v1.b;
							return A3(fnCustom, point, dim, a);
						},
						config.foreign))));
	});
var $andre_dietrich$elm_svgbob$SvgBob$drawElements = $andre_dietrich$elm_svgbob$SvgBob$Grid$drawElements;
var $author$project$Lia$Markdown$Effect$Model$get_paragraph = F3(
	function (id1, id2, model) {
		var _v0 = A2(
			$elm$core$Maybe$map,
			$elm$core$Array$get(id2),
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.paragraphs;
				},
				A2($elm$core$Dict$get, id1, model.comments)));
		if (_v0.$ === 'Just') {
			var a = _v0.a;
			return a;
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$html$Html$h2 = _VirtualDom_node('h2');
var $elm$html$Html$h3 = _VirtualDom_node('h3');
var $elm$html$Html$h4 = _VirtualDom_node('h4');
var $elm$html$Html$h5 = _VirtualDom_node('h5');
var $author$project$Lia$Markdown$View$header = F3(
	function (config, i, attr) {
		return A2(
			$elm$core$Basics$composeR,
			config.view,
			function () {
				switch (i) {
					case 1:
						return $elm$html$Html$h1(
							A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-inline lia-h1', attr));
					case 2:
						return $elm$html$Html$h2(
							A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-inline lia-h2', attr));
					case 3:
						return $elm$html$Html$h3(
							A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-inline lia-h3', attr));
					case 4:
						return $elm$html$Html$h4(
							A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-inline lia-h4', attr));
					case 5:
						return $elm$html$Html$h5(
							A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-inline lia-h5', attr));
					default:
						return $elm$html$Html$h6(
							A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-inline lia-h6', attr));
				}
			}());
	});
var $author$project$Lia$Markdown$Inline$Types$htmlBlock = function (inline) {
	if ((inline.$ === 'IHTML') && (inline.a.$ === 'Node')) {
		var _v1 = inline.a;
		var name = _v1.a;
		var attributes = _v1.b;
		var content = _v1.c;
		var attr = inline.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple3(
				name,
				attributes,
				_List_fromArray(
					[
						A2($author$project$Lia$Markdown$Inline$Types$Container, content, attr)
					])));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$html$Html$ol = _VirtualDom_node('ol');
var $author$project$Lia$Markdown$Chart$View$eCharts = F4(
	function (attr, light, json, option) {
		return A3(
			$elm$html$Html$node,
			'lia-chart',
			A2(
				$elm$core$List$append,
				_List_fromArray(
					[
						A2(
						$elm$html$Html$Attributes$attribute,
						'mode',
						light ? '' : 'dark'),
						A2($elm$html$Html$Attributes$property, 'option', option),
						A2(
						$elm$html$Html$Attributes$attribute,
						'json',
						A2($elm$core$Maybe$withDefault, '', json))
					]),
				A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-chart', attr)),
			_List_Nil);
	});
var $author$project$Lia$Markdown$Chart$View$minMax = function (list) {
	if (!list.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var l = list.a;
		var ls = list.b;
		return $elm$core$Maybe$Just(
			A3(
				$elm$core$List$foldl,
				F2(
					function (value, _v1) {
						var min = _v1.a;
						var max = _v1.b;
						return _Utils_Tuple2(
							(_Utils_cmp(value, min) < 0) ? value : min,
							(_Utils_cmp(value, max) > 0) ? value : max);
					}),
				_Utils_Tuple2(l, l),
				ls));
	}
};
var $author$project$Lia$Markdown$Chart$View$colors = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			_Utils_chr('*'),
			'#000000'),
			_Utils_Tuple2(
			_Utils_chr('+'),
			'#000000'),
			_Utils_Tuple2(
			_Utils_chr('x'),
			'#000000'),
			_Utils_Tuple2(
			_Utils_chr('a'),
			'#FFBF00'),
			_Utils_Tuple2(
			_Utils_chr('b'),
			'#0000FF'),
			_Utils_Tuple2(
			_Utils_chr('c'),
			'#00FFFF'),
			_Utils_Tuple2(
			_Utils_chr('d'),
			'#8B0000'),
			_Utils_Tuple2(
			_Utils_chr('e'),
			'#555D50'),
			_Utils_Tuple2(
			_Utils_chr('f'),
			'#014421'),
			_Utils_Tuple2(
			_Utils_chr('g'),
			'#008000'),
			_Utils_Tuple2(
			_Utils_chr('h'),
			'#DF73FF'),
			_Utils_Tuple2(
			_Utils_chr('i'),
			'#4B0082'),
			_Utils_Tuple2(
			_Utils_chr('j'),
			'#00A86B'),
			_Utils_Tuple2(
			_Utils_chr('k'),
			'#C3B091'),
			_Utils_Tuple2(
			_Utils_chr('l'),
			'#00FF00'),
			_Utils_Tuple2(
			_Utils_chr('m'),
			'#3EB489'),
			_Utils_Tuple2(
			_Utils_chr('n'),
			'#88540B'),
			_Utils_Tuple2(
			_Utils_chr('o'),
			'#FF7F00'),
			_Utils_Tuple2(
			_Utils_chr('p'),
			'#FFC0CB'),
			_Utils_Tuple2(
			_Utils_chr('q'),
			'#436B95'),
			_Utils_Tuple2(
			_Utils_chr('r'),
			'#FF0000'),
			_Utils_Tuple2(
			_Utils_chr('s'),
			'#C0C0C0'),
			_Utils_Tuple2(
			_Utils_chr('t'),
			'#008080'),
			_Utils_Tuple2(
			_Utils_chr('u'),
			'#3F00FF'),
			_Utils_Tuple2(
			_Utils_chr('v'),
			'#EE82EE'),
			_Utils_Tuple2(
			_Utils_chr('w'),
			'#FFFFFF'),
			_Utils_Tuple2(
			_Utils_chr('y'),
			'#FFFF00'),
			_Utils_Tuple2(
			_Utils_chr('z'),
			'#39A78E')
		]));
var $elm$core$Char$toLower = _Char_toLower;
var $author$project$Lia$Markdown$Chart$View$color = function (_char) {
	return _Utils_Tuple2(
		'itemStyle',
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'color',
					$elm$json$Json$Encode$string(
						A2(
							$elm$core$Maybe$withDefault,
							'#000000',
							A2(
								$elm$core$Dict$get,
								$elm$core$Char$toLower(_char),
								$author$project$Lia$Markdown$Chart$View$colors))))
				])));
};
var $elm$json$Json$Encode$float = _Json_wrap;
var $author$project$Lia$Markdown$Chart$View$label = _Utils_Tuple2(
	'label',
	$elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'normal',
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'show',
							$elm$json$Json$Encode$bool(false)),
							_Utils_Tuple2(
							'position',
							$elm$json$Json$Encode$string('top'))
						])))
			])));
var $author$project$Lia$Markdown$Chart$View$name = function (label_) {
	if (label_.$ === 'Nothing') {
		return _List_Nil;
	} else {
		var str = label_.a;
		return _List_fromArray(
			[
				_Utils_Tuple2(
				'name',
				$elm$json$Json$Encode$string(str))
			]);
	}
};
var $author$project$Lia$Markdown$Chart$View$smooth = F2(
	function (withColor, _char) {
		return _Utils_Tuple2(
			'smooth',
			withColor ? $elm$json$Json$Encode$bool(
				!A2(
					$elm$core$Basics$modBy,
					2,
					$elm$core$Char$toCode(_char))) : $elm$json$Json$Encode$bool(false));
	});
var $author$project$Lia$Markdown$Chart$View$style = F2(
	function (withColor, _char) {
		return _Utils_Tuple2(
			'lineStyle',
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'type',
						$elm$json$Json$Encode$string(
							withColor ? ((!A2(
								$elm$core$Basics$modBy,
								7,
								$elm$core$Char$toCode(_char))) ? 'dashed' : ((!A2(
								$elm$core$Basics$modBy,
								5,
								$elm$core$Char$toCode(_char))) ? 'dotted' : 'solid')) : 'solid'))
					])));
	});
var $author$project$Lia$Markdown$Chart$View$symbol = function (c) {
	return _Utils_Tuple2(
		'symbol',
		$elm$json$Json$Encode$string(
			function () {
				switch (c.valueOf()) {
					case 'd':
						return 'diamond';
					case 'D':
						return 'diamond';
					case 't':
						return 'triangle';
					case 'T':
						return 'triangle';
					case 'A':
						return 'arrow';
					case 'v':
						return 'triangle';
					case 'V':
						return 'triangle';
					case '#':
						return 'rect';
					case 'H':
						return 'rect';
					case 'B':
						return 'roundRect';
					case 'N':
						return 'roundRect';
					case 'p':
						return 'pin';
					case 'P':
						return 'pin';
					case '+':
						return 'diamond';
					case 'x':
						return 'rect';
					case 'X':
						return 'rect';
					default:
						return 'circle';
				}
			}()));
};
var $author$project$Lia$Markdown$Chart$View$symbolSize = function (c) {
	return _Utils_Tuple2(
		'symbolSize',
		$elm$json$Json$Encode$int(
			$elm$core$Char$isLower(c) ? 5 : 10));
};
var $author$project$Lia$Markdown$Chart$View$series = F2(
	function (withColor, _v0) {
		var _char = _v0.a;
		var diagram = _v0.b;
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$append,
				A3(
					$andre_dietrich$elm_conditional$Conditional$List$addIf,
					withColor,
					$author$project$Lia$Markdown$Chart$View$color(_char),
					_List_fromArray(
						[
							$author$project$Lia$Markdown$Chart$View$symbol(_char),
							$author$project$Lia$Markdown$Chart$View$symbolSize(_char),
							$author$project$Lia$Markdown$Chart$View$label
						])),
				function () {
					if (diagram.$ === 'Lines') {
						var list = diagram.a;
						var label_ = diagram.b;
						return _Utils_ap(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'data',
									A2(
										$elm$json$Json$Encode$list,
										$elm$core$Basics$identity,
										A2(
											$elm$core$List$map,
											function (point) {
												return A2(
													$elm$json$Json$Encode$list,
													$elm$json$Json$Encode$float,
													_List_fromArray(
														[point.x, point.y]));
											},
											list))),
									_Utils_Tuple2(
									'type',
									$elm$json$Json$Encode$string('line')),
									_Utils_Tuple2(
									'barGap',
									$elm$json$Json$Encode$int(0)),
									A2($author$project$Lia$Markdown$Chart$View$style, withColor, _char),
									A2($author$project$Lia$Markdown$Chart$View$smooth, withColor, _char)
								]),
							$author$project$Lia$Markdown$Chart$View$name(label_));
					} else {
						var list = diagram.a;
						var label_ = diagram.b;
						return _Utils_ap(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'data',
									A2(
										$elm$json$Json$Encode$list,
										$elm$json$Json$Encode$list($elm$json$Json$Encode$float),
										A2(
											$elm$core$List$map,
											function (point) {
												return _List_fromArray(
													[point.x, point.y]);
											},
											list))),
									_Utils_Tuple2(
									'barGap',
									$elm$json$Json$Encode$int(0)),
									_Utils_Tuple2(
									'type',
									$elm$json$Json$Encode$string('scatter'))
								]),
							$author$project$Lia$Markdown$Chart$View$name(label_));
					}
				}()));
	});
var $author$project$Lia$Markdown$Chart$View$toolbox = F2(
	function (position, config) {
		return _Utils_Tuple2(
			'toolbox',
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'bottom',
						$elm$json$Json$Encode$int(8)),
						_Utils_Tuple2(
						'left',
						$elm$json$Json$Encode$string(
							A2($elm$core$Maybe$withDefault, 'center', position))),
						_Utils_Tuple2(
						'feature',
						$elm$json$Json$Encode$object(
							A3(
								$andre_dietrich$elm_conditional$Conditional$List$addIf,
								config.magicType,
								_Utils_Tuple2(
									'magicType',
									$elm$json$Json$Encode$object(
										_List_fromArray(
											[
												_Utils_Tuple2(
												'type',
												A2(
													$elm$json$Json$Encode$list,
													$elm$json$Json$Encode$string,
													_List_fromArray(
														['tiled', 'line', 'bar']))),
												_Utils_Tuple2(
												'title',
												$elm$json$Json$Encode$object(
													_List_fromArray(
														[
															_Utils_Tuple2(
															'stack',
															$elm$json$Json$Encode$string('stack')),
															_Utils_Tuple2(
															'tiled',
															$elm$json$Json$Encode$string('tiled')),
															_Utils_Tuple2(
															'line',
															$elm$json$Json$Encode$string('line')),
															_Utils_Tuple2(
															'bar',
															$elm$json$Json$Encode$string('bar'))
														])))
											]))),
								A3(
									$andre_dietrich$elm_conditional$Conditional$List$addIf,
									config.dataZoom,
									_Utils_Tuple2(
										'dataZoom',
										$elm$json$Json$Encode$object(
											_List_fromArray(
												[
													_Utils_Tuple2(
													'title',
													$elm$json$Json$Encode$object(
														_List_fromArray(
															[
																_Utils_Tuple2(
																'zoom',
																$elm$json$Json$Encode$string('zoom')),
																_Utils_Tuple2(
																'back',
																$elm$json$Json$Encode$string('back'))
															])))
												]))),
									A3(
										$andre_dietrich$elm_conditional$Conditional$List$addIf,
										config.dataView,
										_Utils_Tuple2(
											'dataView',
											$elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'title',
														$elm$json$Json$Encode$string('edit')),
														_Utils_Tuple2(
														'lang',
														A2(
															$elm$json$Json$Encode$list,
															$elm$json$Json$Encode$string,
															_List_fromArray(
																['data view', 'turn off', 'refresh'])))
													]))),
										A3(
											$andre_dietrich$elm_conditional$Conditional$List$addIf,
											config.restore,
											_Utils_Tuple2(
												'restore',
												$elm$json$Json$Encode$object(_List_Nil)),
											A3(
												$andre_dietrich$elm_conditional$Conditional$List$addIf,
												config.saveAsImage,
												_Utils_Tuple2(
													'saveAsImage',
													$elm$json$Json$Encode$object(
														_List_fromArray(
															[
																_Utils_Tuple2(
																'title',
																$elm$json$Json$Encode$string('store'))
															]))),
												_List_Nil)))))))
					])));
	});
var $author$project$Lia$Markdown$Chart$View$add = F3(
	function (transform, to, list) {
		if (to.$ === 'Just') {
			var data = to.a;
			return A2(
				$elm$core$List$cons,
				transform(data),
				list);
		} else {
			return list;
		}
	});
var $author$project$Lia$Markdown$Chart$View$axis = F5(
	function (x, min_max, type_, title, data) {
		return _Utils_Tuple2(
			x ? 'xAxis' : 'yAxis',
			$elm$json$Json$Encode$object(
				A2(
					$elm$core$List$append,
					_Utils_eq(data, _List_Nil) ? _List_Nil : _List_fromArray(
						[
							_Utils_Tuple2(
							'data',
							A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, data)),
							_Utils_Tuple2(
							'splitArea',
							$elm$json$Json$Encode$object(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'show',
										$elm$json$Json$Encode$bool(true))
									])))
						]),
					A3(
						$author$project$Lia$Markdown$Chart$View$add,
						A2(
							$elm$core$Basics$composeR,
							$elm$json$Json$Encode$string,
							$elm$core$Tuple$pair('name')),
						title,
						A3(
							$author$project$Lia$Markdown$Chart$View$add,
							A2(
								$elm$core$Basics$composeR,
								$elm$core$Tuple$second,
								A2(
									$elm$core$Basics$composeR,
									$elm$json$Json$Encode$float,
									$elm$core$Tuple$pair('max'))),
							min_max,
							A3(
								$author$project$Lia$Markdown$Chart$View$add,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$Tuple$first,
									A2(
										$elm$core$Basics$composeR,
										$elm$json$Json$Encode$float,
										$elm$core$Tuple$pair('min'))),
								min_max,
								_List_fromArray(
									[
										_Utils_Tuple2(
										'type',
										$elm$json$Json$Encode$string(type_))
									])))))));
	});
var $author$project$Lia$Markdown$Chart$View$xAxis = $author$project$Lia$Markdown$Chart$View$axis(true);
var $author$project$Lia$Markdown$Chart$View$yAxis = A2($author$project$Lia$Markdown$Chart$View$axis, false, $elm$core$Maybe$Nothing);
var $author$project$Lia$Markdown$Chart$View$encode = F2(
	function (withColor, chart) {
		var _v0 = A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2(0, 0),
			$author$project$Lia$Markdown$Chart$View$minMax(
				A2(
					$elm$core$List$concatMap,
					function (diagram) {
						return A2(
							$elm$core$List$map,
							function ($) {
								return $.x;
							},
							function () {
								if (diagram.$ === 'Lines') {
									var points = diagram.a;
									return points;
								} else {
									var points = diagram.a;
									return points;
								}
							}());
					},
					A2(
						$elm$core$List$map,
						$elm$core$Tuple$second,
						$elm$core$Dict$toList(chart.diagrams)))));
		var min = _v0.a;
		var max = _v0.b;
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'textStyle',
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'fontFamily',
								$elm$json$Json$Encode$string('Roboto'))
							]))),
					A4(
					$author$project$Lia$Markdown$Chart$View$xAxis,
					$elm$core$Maybe$Just(
						_Utils_Tuple2(min, max)),
					'value',
					$elm$core$Maybe$Just(chart.xLabel),
					_List_Nil),
					A3(
					$author$project$Lia$Markdown$Chart$View$yAxis,
					'value',
					$elm$core$Maybe$Just(chart.yLabel),
					_List_Nil),
					_Utils_Tuple2(
					'title',
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'text',
								$elm$json$Json$Encode$string(chart.title))
							]))),
					_Utils_Tuple2(
					'legend',
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'data',
								A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, chart.legend)),
								_Utils_Tuple2(
								'top',
								$elm$json$Json$Encode$int(28))
							]))),
					A2(
					$author$project$Lia$Markdown$Chart$View$toolbox,
					$elm$core$Maybe$Nothing,
					{dataView: true, dataZoom: true, magicType: true, restore: false, saveAsImage: true}),
					_Utils_Tuple2(
					'tooltip',
					$elm$json$Json$Encode$object(_List_Nil)),
					_Utils_Tuple2(
					'series',
					A2(
						$elm$json$Json$Encode$list,
						$author$project$Lia$Markdown$Chart$View$series(withColor),
						$elm$core$Dict$toList(chart.diagrams)))
				]));
	});
var $author$project$Lia$Markdown$Chart$View$view = F2(
	function (attr, light) {
		return A2(
			$elm$core$Basics$composeR,
			$author$project$Lia$Markdown$Chart$View$encode(true),
			A3($author$project$Lia$Markdown$Chart$View$eCharts, attr, light, $elm$core$Maybe$Nothing));
	});
var $author$project$Lia$Markdown$Code$Update$UpdateTerminal = F2(
	function (a, b) {
		return {$: 'UpdateTerminal', a: a, b: b};
	});
var $author$project$Lia$Markdown$Code$View$div_ = $elm$html$Html$div(
	_List_fromArray(
		[
			A2($elm$html$Html$Attributes$style, 'margin-top', '16px'),
			A2($elm$html$Html$Attributes$style, 'margin-bottom', '16px')
		]));
var $author$project$Lia$Markdown$Code$View$list_get = F2(
	function (idx, list) {
		list_get:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var x = list.a;
				var xs = list.b;
				if (!idx) {
					return $elm$core$Maybe$Just(x);
				} else {
					var $temp$idx = idx - 1,
						$temp$list = xs;
					idx = $temp$idx;
					list = $temp$list;
					continue list_get;
				}
			}
		}
	});
var $author$project$Lia$Markdown$Code$View$get_annotations = F2(
	function (log, file_id) {
		return A2(
			$elm$core$Maybe$withDefault,
			$elm$json$Json$Encode$null,
			A2($author$project$Lia$Markdown$Code$View$list_get, file_id, log.details));
	});
var $author$project$Lia$Markdown$Code$Terminal$Input = function (a) {
	return {$: 'Input', a: a};
};
var $author$project$Lia$Markdown$Code$Terminal$KeyDown = function (a) {
	return {$: 'KeyDown', a: a};
};
var $author$project$Lia$Markdown$Code$Terminal$onKeyDown = function (tagger) {
	return A2(
		$elm$html$Html$Events$stopPropagationOn,
		'keydown',
		A2(
			$elm$json$Json$Decode$map,
			function (x) {
				return _Utils_Tuple2(x, true);
			},
			A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$keyCode)));
};
var $author$project$Lia$Markdown$Code$Terminal$view = function (terminal) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('lia-code-stdout'),
				A2($elm$html$Html$Attributes$style, 'margin-top', '-10px')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$code,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('>> ')
					])),
				A2(
				$elm$html$Html$input,
				_List_fromArray(
					[
						$elm$html$Html$Events$onInput($author$project$Lia$Markdown$Code$Terminal$Input),
						$author$project$Lia$Markdown$Code$Terminal$onKeyDown($author$project$Lia$Markdown$Code$Terminal$KeyDown),
						$elm$html$Html$Attributes$value(terminal.input),
						A2($elm$html$Html$Attributes$style, 'background-color', 'black'),
						A2($elm$html$Html$Attributes$style, 'color', 'white'),
						A2($elm$html$Html$Attributes$style, 'border', '0'),
						A2($elm$html$Html$Attributes$style, 'width', 'calc(100% - 30px)')
					]),
				_List_Nil)
			]));
};
var $author$project$Lia$Markdown$Code$Editor$firstLineNumber = A2(
	$elm$core$Basics$composeR,
	$elm$json$Json$Encode$int,
	$elm$html$Html$Attributes$property('firstLineNumber'));
var $author$project$Lia$Markdown$Code$Editor$fontSize = A2(
	$elm$core$Basics$composeR,
	$elm$json$Json$Encode$string,
	$elm$html$Html$Attributes$property('fontSize'));
var $author$project$Lia$Markdown$Code$Editor$highlightActiveLine = $author$project$Lia$Markdown$Code$Editor$boolean('highlightActiveLine');
var $author$project$Lia$Markdown$Code$Editor$marker = A2(
	$elm$core$Basics$composeR,
	$elm$json$Json$Encode$string,
	$elm$html$Html$Attributes$property('marker'));
var $author$project$Lia$Markdown$Code$Editor$readOnly = $author$project$Lia$Markdown$Code$Editor$boolean('readOnly');
var $author$project$Lia$Markdown$Code$Editor$showCursor = $author$project$Lia$Markdown$Code$Editor$boolean('showCursor');
var $author$project$Lia$Markdown$Code$Editor$showPrintMargin = $author$project$Lia$Markdown$Code$Editor$boolean('showPrintMargin');
var $author$project$Lia$Markdown$Code$Editor$tabSize = A2(
	$elm$core$Basics$composeR,
	$elm$json$Json$Encode$int,
	$elm$html$Html$Attributes$property('tabSize'));
var $author$project$Lia$Markdown$Code$View$highlight = F5(
	function (theme, attr, lang, code, headless) {
		var top_border = headless ? '4px' : '0px';
		var readOnly = _Utils_eq(
			A2($author$project$Lia$Markdown$HTML$Attributes$get, 'data-readonly', attr),
			$elm$core$Maybe$Nothing) ? true : A2($author$project$Lia$Markdown$HTML$Attributes$isSet, 'data-readonly', attr);
		return A2(
			$author$project$Lia$Markdown$Code$Editor$editor,
			A2(
				$elm$core$List$append,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'border-bottom-left-radius', '4px'),
						A2($elm$html$Html$Attributes$style, 'border-bottom-right-radius', '4px'),
						A2($elm$html$Html$Attributes$style, 'border-top-left-radius', top_border),
						A2($elm$html$Html$Attributes$style, 'border-top-right-radius', top_border),
						A2($elm$html$Html$Attributes$style, 'border', '1px solid gray'),
						$author$project$Lia$Markdown$Code$Editor$value(code),
						$author$project$Lia$Markdown$Code$Editor$mode(lang),
						$author$project$Lia$Markdown$Code$Editor$theme(
						A2(
							$elm$core$Maybe$withDefault,
							theme,
							A2($author$project$Lia$Markdown$HTML$Attributes$get, 'data-theme', attr))),
						$author$project$Lia$Markdown$Code$Editor$tabSize(
						A2(
							$elm$core$Maybe$withDefault,
							2,
							A2(
								$elm$core$Maybe$andThen,
								$elm$core$String$toInt,
								A2($author$project$Lia$Markdown$HTML$Attributes$get, 'data-tabsize', attr)))),
						$author$project$Lia$Markdown$Code$Editor$marker(
						A2(
							$elm$core$Maybe$withDefault,
							'',
							A2($author$project$Lia$Markdown$HTML$Attributes$get, 'data-marker', attr))),
						$author$project$Lia$Markdown$Code$Editor$firstLineNumber(
						A2(
							$elm$core$Maybe$withDefault,
							1,
							A2(
								$elm$core$Maybe$andThen,
								$elm$core$String$toInt,
								A2($author$project$Lia$Markdown$HTML$Attributes$get, 'data-firstlinenumber', attr)))),
						$author$project$Lia$Markdown$Code$Editor$useSoftTabs(false),
						$author$project$Lia$Markdown$Code$Editor$readOnly(readOnly),
						$author$project$Lia$Markdown$Code$Editor$showCursor(!readOnly),
						$author$project$Lia$Markdown$Code$Editor$highlightActiveLine(false),
						$author$project$Lia$Markdown$Code$Editor$showGutter(
						A2($author$project$Lia$Markdown$HTML$Attributes$isSet, 'data-showgutter', attr)),
						$author$project$Lia$Markdown$Code$Editor$showPrintMargin(false),
						$author$project$Lia$Markdown$Code$Editor$fontSize(
						A2(
							$elm$core$Maybe$withDefault,
							'12pt',
							A2($author$project$Lia$Markdown$HTML$Attributes$get, 'data-fontsize', attr)))
					]),
				$author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr)),
			_List_Nil);
	});
var $author$project$Lia$Markdown$Code$View$view_code = F2(
	function (theme, snippet) {
		var headless = snippet.name === '';
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					headless ? $elm$html$Html$text('') : A2(
					$elm$html$Html$button,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('lia-accordion-dummy')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(snippet.name)
						])),
					A5($author$project$Lia$Markdown$Code$View$highlight, theme, snippet.attr, snippet.lang, snippet.code, headless)
				]));
	});
var $author$project$Lia$Markdown$Code$Update$Eval = function (a) {
	return {$: 'Eval', a: a};
};
var $author$project$Lia$Markdown$Code$Update$First = function (a) {
	return {$: 'First', a: a};
};
var $author$project$Lia$Markdown$Code$Update$Last = function (a) {
	return {$: 'Last', a: a};
};
var $author$project$Lia$Markdown$Code$Update$Load = F2(
	function (a, b) {
		return {$: 'Load', a: a, b: b};
	});
var $author$project$Lia$Markdown$Code$Update$Stop = function (a) {
	return {$: 'Stop', a: a};
};
var $author$project$Translations$codeExecute = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Изпълни';
		case 'De':
			return 'Ausführen';
		case 'En':
			return 'Execute';
		case 'Es':
			return 'ejecutar';
		case 'Fa':
			return 'اجرا';
		case 'Hy':
			return 'իրականացնել';
		case 'Nl':
			return 'uitvoeren';
		case 'Ru':
			return 'выполнить';
		case 'Tw':
			return '開始執行';
		case 'Ua':
			return 'запустити';
		default:
			return '開始執行';
	}
};
var $author$project$Translations$codeFirst = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Първа версия';
		case 'De':
			return 'erste Version';
		case 'En':
			return 'first version';
		case 'Es':
			return 'primera versión';
		case 'Fa':
			return 'نسخه اولیه';
		case 'Hy':
			return 'առաջին տարբերակը';
		case 'Nl':
			return 'eerste versie';
		case 'Ru':
			return 'первая версия';
		case 'Tw':
			return '最初版';
		case 'Ua':
			return 'перша версія';
		default:
			return '最初版';
	}
};
var $author$project$Translations$codeLast = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Последна версия';
		case 'De':
			return 'letzte Version';
		case 'En':
			return 'last version';
		case 'Es':
			return 'última versión';
		case 'Fa':
			return 'آخرین نسخه';
		case 'Hy':
			return 'վերջին տարբերակը';
		case 'Nl':
			return 'laatste versie';
		case 'Ru':
			return 'последняя версия';
		case 'Tw':
			return '最終版';
		case 'Ua':
			return 'остання версія';
		default:
			return '最終版';
	}
};
var $author$project$Translations$codeNext = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'следваща версия';
		case 'De':
			return 'eine Version vor';
		case 'En':
			return 'next version';
		case 'Es':
			return 'versión siguiente';
		case 'Fa':
			return 'نسخه بعدی';
		case 'Hy':
			return 'հաջորդ տարբերակը';
		case 'Nl':
			return 'een versie vooruit';
		case 'Ru':
			return 'следующая версия';
		case 'Tw':
			return '下一版';
		case 'Ua':
			return 'наступна версія';
		default:
			return '下一版';
	}
};
var $author$project$Translations$codePrev = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Предишна версия';
		case 'De':
			return 'eine Version zurück';
		case 'En':
			return 'previous version';
		case 'Es':
			return 'versión anterior';
		case 'Fa':
			return 'نسخه قبلی';
		case 'Hy':
			return 'նախորդ տարբերակը';
		case 'Nl':
			return 'een versie terug';
		case 'Ru':
			return 'предыдущая версия';
		case 'Tw':
			return '上一版';
		case 'Ua':
			return 'попередня версія';
		default:
			return '上一版';
	}
};
var $author$project$Translations$codeRunning = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Работещ';
		case 'De':
			return 'wird ausgeführt';
		case 'En':
			return 'is running';
		case 'Es':
			return 'en funcionamiento';
		case 'Fa':
			return 'در حال اجرا';
		case 'Hy':
			return 'ընթանում է';
		case 'Nl':
			return 'wordt uitgevoerd';
		case 'Ru':
			return 'выполняется';
		case 'Tw':
			return '執行中';
		case 'Ua':
			return 'виконується';
		default:
			return '執行中';
	}
};
var $author$project$Lia$Markdown$Code$View$control_style = _List_fromArray(
	[
		A2($elm$html$Html$Attributes$style, 'padding-left', '5px'),
		A2($elm$html$Html$Attributes$style, 'padding-right', '5px'),
		A2($elm$html$Html$Attributes$style, 'float', 'right'),
		A2($elm$html$Html$Attributes$style, 'margin-right', '2px'),
		A2($elm$html$Html$Attributes$style, 'margin-left', '2px')
	]);
var $author$project$Lia$Markdown$Code$View$view_control = F6(
	function (lang, idx, version_active, version_count, running, terminal) {
		var forward = running || (!version_active);
		var backward = running || _Utils_eq(version_active, version_count - 1);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'padding', '0px'),
					A2($elm$html$Html$Attributes$style, 'width', '100%')
				]),
			_List_fromArray(
				[
					function () {
					var _v0 = _Utils_Tuple2(running, terminal);
					if (_v0.a) {
						if (!_v0.b) {
							return A2(
								$elm$html$Html$span,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('lia-btn lia-icon'),
										A2($elm$html$Html$Attributes$style, 'margin-left', '0px'),
										$elm$html$Html$Attributes$title(
										$author$project$Translations$codeRunning(lang)),
										$elm$html$Html$Attributes$disabled(true),
										A2($elm$html$Html$Attributes$style, 'zIndex', '100')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$span,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('lia-icon rotating')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text('sync')
											]))
									]));
						} else {
							return A2(
								$elm$html$Html$span,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('lia-btn lia-icon'),
										A2($elm$html$Html$Attributes$style, 'margin-left', '0px'),
										$elm$html$Html$Attributes$title(
										$author$project$Translations$codeRunning(lang)),
										$elm$html$Html$Events$onClick(
										$author$project$Lia$Markdown$Code$Update$Stop(idx)),
										A2($elm$html$Html$Attributes$style, 'zIndex', '100')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('stop')
									]));
						}
					} else {
						return A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('lia-btn lia-icon'),
									$elm$html$Html$Events$onClick(
									$author$project$Lia$Markdown$Code$Update$Eval(idx)),
									A2($elm$html$Html$Attributes$style, 'margin-left', '0px'),
									$elm$html$Html$Attributes$title(
									$author$project$Translations$codeExecute(lang)),
									A2($elm$html$Html$Attributes$style, 'zIndex', '100')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('play_circle_filled')
								]));
					}
				}(),
					A2(
					$elm$html$Html$button,
					A2(
						$elm$core$List$append,
						$author$project$Lia$Markdown$Code$View$control_style,
						_List_fromArray(
							[
								$elm$html$Html$Events$onClick(
								$author$project$Lia$Markdown$Code$Update$Last(idx)),
								$elm$html$Html$Attributes$class('lia-btn lia-icon'),
								$elm$html$Html$Attributes$title(
								$author$project$Translations$codeLast(lang)),
								$elm$html$Html$Attributes$disabled(backward)
							])),
					_List_fromArray(
						[
							$elm$html$Html$text('last_page')
						])),
					A2(
					$elm$html$Html$button,
					A2(
						$elm$core$List$append,
						$author$project$Lia$Markdown$Code$View$control_style,
						_List_fromArray(
							[
								$elm$html$Html$Events$onClick(
								A2($author$project$Lia$Markdown$Code$Update$Load, idx, version_active + 1)),
								$elm$html$Html$Attributes$class('lia-btn lia-icon'),
								$elm$html$Html$Attributes$title(
								$author$project$Translations$codeNext(lang)),
								$elm$html$Html$Attributes$disabled(backward)
							])),
					_List_fromArray(
						[
							$elm$html$Html$text('navigate_next')
						])),
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('lia-label'),
							A2($elm$html$Html$Attributes$style, 'float', 'right'),
							A2($elm$html$Html$Attributes$style, 'margin-top', '11px')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							$elm$core$String$fromInt(version_active))
						])),
					A2(
					$elm$html$Html$button,
					A2(
						$elm$core$List$append,
						$author$project$Lia$Markdown$Code$View$control_style,
						_List_fromArray(
							[
								$elm$html$Html$Events$onClick(
								A2($author$project$Lia$Markdown$Code$Update$Load, idx, version_active - 1)),
								$elm$html$Html$Attributes$class('lia-btn lia-icon'),
								$elm$html$Html$Attributes$title(
								$author$project$Translations$codePrev(lang)),
								$elm$html$Html$Attributes$disabled(forward)
							])),
					_List_fromArray(
						[
							$elm$html$Html$text('navigate_before')
						])),
					A2(
					$elm$html$Html$button,
					A2(
						$elm$core$List$append,
						$author$project$Lia$Markdown$Code$View$control_style,
						_List_fromArray(
							[
								$elm$html$Html$Events$onClick(
								$author$project$Lia$Markdown$Code$Update$First(idx)),
								$elm$html$Html$Attributes$class('lia-btn lia-icon'),
								$elm$html$Html$Attributes$title(
								$author$project$Translations$codeFirst(lang)),
								$elm$html$Html$Attributes$disabled(forward)
							])),
					_List_fromArray(
						[
							$elm$html$Html$text('first_page')
						]))
				]));
	});
var $author$project$Lia$Markdown$Code$Update$FlipFullscreen = F2(
	function (a, b) {
		return {$: 'FlipFullscreen', a: a, b: b};
	});
var $author$project$Lia$Markdown$Code$Update$FlipView = F2(
	function (a, b) {
		return {$: 'FlipView', a: a, b: b};
	});
var $elm$html$Html$Attributes$classList = function (classes) {
	return $elm$html$Html$Attributes$class(
		A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$first,
				A2($elm$core$List$filter, $elm$core$Tuple$second, classes))));
};
var $author$project$Translations$codeMaximize = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Максимизиране';
		case 'De':
			return 'Darstellung maximieren';
		case 'En':
			return 'maximize view';
		case 'Es':
			return 'maximinzar vista';
		case 'Fa':
			return 'بزرگ کردن پنجره';
		case 'Hy':
			return 'բարձրագունել տեսքը';
		case 'Nl':
			return 'weergave maximaliseren';
		case 'Ru':
			return 'показать полностью';
		case 'Tw':
			return '極大視窗';
		case 'Ua':
			return 'зображення збільшити';
		default:
			return '極大視窗';
	}
};
var $author$project$Translations$codeMinimize = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Минимизиране';
		case 'De':
			return 'Darstellung minimieren';
		case 'En':
			return 'minimize view';
		case 'Es':
			return 'minimizar vista';
		case 'Fa':
			return 'کوچک کردن پنجره';
		case 'Hy':
			return 'նվազեցնել տեսքը';
		case 'Nl':
			return 'weergave verkleinen';
		case 'Ru':
			return 'свернуть';
		case 'Tw':
			return '極小視窗';
		case 'Ua':
			return 'зображення зменшити';
		default:
			return '極小視窗';
	}
};
var $author$project$Lia$Markdown$Code$Update$Update = F3(
	function (a, b, c) {
		return {$: 'Update', a: a, b: b, c: c};
	});
var $author$project$Lia$Markdown$Code$Editor$annotations = $elm$html$Html$Attributes$property('annotations');
var $author$project$Lia$Markdown$Code$View$lines = function (code) {
	return $elm$core$List$length(
		$elm$core$String$lines(code));
};
var $author$project$Lia$Markdown$Code$View$pixel = function (from_lines) {
	return (from_lines * 21) + 16;
};
var $author$project$Lia$Markdown$Code$View$toStyle = F3(
	function (visible, headless, pix) {
		var top_border = headless ? '4px' : '0px';
		return _List_fromArray(
			[
				A2(
				$elm$html$Html$Attributes$style,
				'max-height',
				visible ? ($elm$core$String$fromInt(pix) + 'px') : '0px'),
				A2($elm$html$Html$Attributes$style, 'transition', 'max-height 0.25s ease-out'),
				A2($elm$html$Html$Attributes$style, 'border-bottom-left-radius', '4px'),
				A2($elm$html$Html$Attributes$style, 'border-bottom-right-radius', '4px'),
				A2($elm$html$Html$Attributes$style, 'border-top-left-radius', top_border),
				A2($elm$html$Html$Attributes$style, 'border-top-right-radius', top_border),
				A2($elm$html$Html$Attributes$style, 'border', '1px solid gray')
			]);
	});
var $author$project$Lia$Markdown$Code$View$evaluate = F7(
	function (theme, attr, running, _v0, file, headless, errors) {
		var id_1 = _v0.a;
		var id_2 = _v0.b;
		var total_lines = $author$project$Lia$Markdown$Code$View$lines(file.code);
		var readOnly = running ? running : A2($author$project$Lia$Markdown$HTML$Attributes$isSet, 'data-readonly', attr);
		var max_lines = file.fullscreen ? total_lines : ((total_lines > 16) ? 16 : total_lines);
		return A2(
			$author$project$Lia$Markdown$Code$Editor$editor,
			A2(
				$elm$core$List$append,
				_List_fromArray(
					[
						$author$project$Lia$Markdown$Code$Editor$onChange(
						A2($author$project$Lia$Markdown$Code$Update$Update, id_1, id_2)),
						$author$project$Lia$Markdown$Code$Editor$value(file.code),
						$author$project$Lia$Markdown$Code$Editor$mode(file.lang),
						$author$project$Lia$Markdown$Code$Editor$theme(
						A2(
							$elm$core$Maybe$withDefault,
							theme,
							A2($author$project$Lia$Markdown$HTML$Attributes$get, 'data-theme', attr))),
						$author$project$Lia$Markdown$Code$Editor$maxLines(
						(max_lines > 16) ? (-1) : max_lines),
						$author$project$Lia$Markdown$Code$Editor$readOnly(readOnly),
						$author$project$Lia$Markdown$Code$Editor$tabSize(
						A2(
							$elm$core$Maybe$withDefault,
							2,
							A2(
								$elm$core$Maybe$andThen,
								$elm$core$String$toInt,
								A2($author$project$Lia$Markdown$HTML$Attributes$get, 'data-tabsize', attr)))),
						$author$project$Lia$Markdown$Code$Editor$fontSize(
						A2(
							$elm$core$Maybe$withDefault,
							'12pt',
							A2($author$project$Lia$Markdown$HTML$Attributes$get, 'data-fontsize', attr))),
						$author$project$Lia$Markdown$Code$Editor$marker(
						A2(
							$elm$core$Maybe$withDefault,
							'',
							A2($author$project$Lia$Markdown$HTML$Attributes$get, 'data-marker', attr))),
						$author$project$Lia$Markdown$Code$Editor$firstLineNumber(
						A2(
							$elm$core$Maybe$withDefault,
							1,
							A2(
								$elm$core$Maybe$andThen,
								$elm$core$String$toInt,
								A2($author$project$Lia$Markdown$HTML$Attributes$get, 'data-firstlinenumber', attr)))),
						(!_Utils_eq(
						A2($author$project$Lia$Markdown$HTML$Attributes$get, 'data-showgutter', attr),
						$elm$core$Maybe$Nothing)) ? $author$project$Lia$Markdown$Code$Editor$showGutter(
						A2($author$project$Lia$Markdown$HTML$Attributes$isSet, 'data-showgutter', attr)) : $author$project$Lia$Markdown$Code$Editor$showGutter(true),
						$author$project$Lia$Markdown$Code$Editor$useSoftTabs(false),
						$author$project$Lia$Markdown$Code$Editor$annotations(errors),
						$author$project$Lia$Markdown$Code$Editor$enableBasicAutocompletion(true),
						$author$project$Lia$Markdown$Code$Editor$enableLiveAutocompletion(true),
						$author$project$Lia$Markdown$Code$Editor$enableSnippets(true),
						$author$project$Lia$Markdown$Code$Editor$extensions(
						_List_fromArray(
							['language_tools']))
					]),
				A2(
					$elm$core$List$append,
					A3(
						$author$project$Lia$Markdown$Code$View$toStyle,
						file.visible,
						headless,
						$author$project$Lia$Markdown$Code$View$pixel(max_lines)),
					$author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr))),
			_List_Nil);
	});
var $author$project$Lia$Markdown$Code$View$view_eval = F8(
	function (lang, theme, running, errors, id_1, id_2, file, attr) {
		var headless = file.name === '';
		return A2(
			$elm$html$Html$div,
			$author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr),
			_List_fromArray(
				[
					headless ? $elm$html$Html$text('') : A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$classList(
							_List_fromArray(
								[
									_Utils_Tuple2('lia-accordion', true),
									_Utils_Tuple2('active', file.visible)
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Events$onClick(
									A2($author$project$Lia$Markdown$Code$Update$FlipView, id_1, id_2)),
									A2($elm$html$Html$Attributes$style, 'width', 'calc(100% - 20px)'),
									A2($elm$html$Html$Attributes$style, 'display', 'inline-block')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$b,
									_List_Nil,
									_List_fromArray(
										[
											file.visible ? $elm$html$Html$text(' + ') : $elm$html$Html$text(' - ')
										])),
									$elm$html$Html$text(file.name)
								])),
							file.visible ? A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('lia-accordion-min-max'),
									$elm$html$Html$Events$onClick(
									A2($author$project$Lia$Markdown$Code$Update$FlipFullscreen, id_1, id_2)),
									$elm$html$Html$Attributes$title(
									file.fullscreen ? $author$project$Translations$codeMinimize(lang) : $author$project$Translations$codeMaximize(lang))
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$b,
									_List_Nil,
									_List_fromArray(
										[
											file.fullscreen ? $elm$html$Html$text('↥') : $elm$html$Html$text('↧')
										]))
								])) : $elm$html$Html$text('')
						])),
					A7(
					$author$project$Lia$Markdown$Code$View$evaluate,
					theme,
					attr,
					running,
					_Utils_Tuple2(id_1, id_2),
					file,
					headless,
					errors(id_2))
				]));
	});
var $author$project$Lia$Markdown$Code$Log$len = A2(
	$elm$core$Basics$composeR,
	function ($) {
		return $.text;
	},
	A2(
		$elm$core$Basics$composeR,
		$elm$core$String$indexes('\n'),
		$elm$core$List$length));
var $author$project$Lia$Markdown$Code$Log$length = A2(
	$elm$core$Basics$composeR,
	$elm$core$Array$map($author$project$Lia$Markdown$Code$Log$len),
	A2($elm$core$Array$foldl, $elm$core$Basics$add, 0));
var $author$project$Lia$Markdown$Code$View$scroll_to_end = function (lines_) {
	return A2(
		$elm$html$Html$Attributes$property,
		'scrollTop',
		$elm$json$Json$Encode$string(
			$elm$core$String$fromInt(14 + (14 * lines_))));
};
var $author$project$Lia$Markdown$Code$Log$view_message = function (_v0) {
	var level = _v0.level;
	var text = _v0.text;
	return _Utils_Tuple2(
		text,
		function () {
			switch (level.$) {
				case 'Debug':
					return A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'color', 'lightblue')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(text)
							]));
				case 'Info':
					return A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'color', 'white')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(text)
							]));
				case 'Warn':
					return A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'color', 'yellow')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(text)
							]));
				case 'Error':
					return A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'color', 'red')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(text)
							]));
				default:
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								A2(
								$elm$html$Html$Attributes$property,
								'innerHTML',
								$elm$json$Json$Encode$string(text))
							]),
						_List_Nil);
			}
		}());
};
var $author$project$Lia$Markdown$Code$Log$view = function (log) {
	return A2(
		$elm$core$List$map,
		$author$project$Lia$Markdown$Code$Log$view_message,
		$elm$core$Array$toList(log.messages));
};
var $author$project$Lia$Markdown$Code$View$view_result = function (log) {
	return $elm$core$Array$isEmpty(log.messages) ? A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'margin-top', '8px')
			]),
		_List_Nil) : A3(
		$elm$html$Html$Keyed$node,
		'pre',
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('lia-code-stdout'),
				$author$project$Lia$Markdown$Code$View$scroll_to_end(
				2 * $author$project$Lia$Markdown$Code$Log$length(log.messages))
			]),
		$author$project$Lia$Markdown$Code$Log$view(log));
};
var $author$project$Lia$Markdown$Code$View$view = F4(
	function (lang, theme, model, code) {
		if (code.$ === 'Highlight') {
			var lang_title_code = code.a;
			return $author$project$Lia$Markdown$Code$View$div_(
				A2(
					$elm$core$List$map,
					$author$project$Lia$Markdown$Code$View$view_code(theme),
					lang_title_code));
		} else {
			var id_1 = code.a;
			var _v1 = A2($elm$core$Array$get, id_1, model);
			if (_v1.$ === 'Just') {
				var project = _v1.a;
				var errors = $author$project$Lia$Markdown$Code$View$get_annotations(project.log);
				return $author$project$Lia$Markdown$Code$View$div_(
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_Nil,
							A3(
								$elm$core$List$map2,
								F2(
									function (a, e) {
										return e(a);
									}),
								project.attr,
								A2(
									$elm$core$List$indexedMap,
									A5($author$project$Lia$Markdown$Code$View$view_eval, lang, theme, project.running, errors, id_1),
									$elm$core$Array$toList(project.file)))),
							A6(
							$author$project$Lia$Markdown$Code$View$view_control,
							lang,
							id_1,
							project.version_active,
							$elm$core$Array$length(project.version),
							project.running,
							!_Utils_eq(project.terminal, $elm$core$Maybe$Nothing)),
							$author$project$Lia$Markdown$Code$View$view_result(project.log),
							function () {
							var _v2 = project.terminal;
							if (_v2.$ === 'Nothing') {
								return $elm$html$Html$text('');
							} else {
								var term = _v2.a;
								return A2(
									$elm$html$Html$map,
									$author$project$Lia$Markdown$Code$Update$UpdateTerminal(id_1),
									$author$project$Lia$Markdown$Code$Terminal$view(term));
							}
						}()
						]));
			} else {
				return $elm$html$Html$text('');
			}
		}
	});
var $author$project$Lia$Markdown$Quiz$Types$solved = function (e) {
	return !_Utils_eq(e.solved, $author$project$Lia$Markdown$Quiz$Types$Open);
};
var $author$project$Lia$Markdown$Quiz$Update$Block_Update = F2(
	function (a, b) {
		return {$: 'Block_Update', a: a, b: b};
	});
var $author$project$Lia$Markdown$Quiz$Update$Matrix_Update = F2(
	function (a, b) {
		return {$: 'Matrix_Update', a: a, b: b};
	});
var $author$project$Lia$Markdown$Quiz$Update$Vector_Update = F2(
	function (a, b) {
		return {$: 'Vector_Update', a: a, b: b};
	});
var $author$project$Lia$Markdown$Quiz$Block$Update$Toggle = {$: 'Toggle'};
var $author$project$Lia$Markdown$Quiz$Block$Update$Script = function (a) {
	return {$: 'Script', a: a};
};
var $author$project$Lia$Markdown$Quiz$Block$View$get_option = F3(
	function (config, id, list) {
		var _v0 = _Utils_Tuple2(id, list);
		if (_v0.b.b) {
			if (!_v0.a) {
				var _v1 = _v0.b;
				var x = _v1.a;
				return A2(
					$elm$html$Html$map,
					$author$project$Lia$Markdown$Quiz$Block$Update$Script,
					A2(
						$elm$html$Html$span,
						_List_Nil,
						A2($author$project$Lia$Markdown$Inline$View$viewer, config, x)));
			} else {
				var i = _v0.a;
				var _v2 = _v0.b;
				var xs = _v2.b;
				return A3($author$project$Lia$Markdown$Quiz$Block$View$get_option, config, i - 1, xs);
			}
		} else {
			return $elm$html$Html$text('choose');
		}
	});
var $author$project$Lia$Markdown$Quiz$Block$Update$Choose = function (a) {
	return {$: 'Choose', a: a};
};
var $author$project$Lia$Markdown$Quiz$Block$View$option = F2(
	function (config, id) {
		return A2(
			$elm$core$Basics$composeR,
			$author$project$Lia$Markdown$Inline$View$viewer(config),
			A2(
				$elm$core$Basics$composeR,
				$elm$html$Html$div(_List_Nil),
				A2(
					$elm$core$Basics$composeR,
					$elm$html$Html$map($author$project$Lia$Markdown$Quiz$Block$Update$Script),
					A2(
						$elm$core$Basics$composeR,
						$elm$core$List$singleton,
						$elm$html$Html$div(
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('lia-dropdown-option'),
									$elm$html$Html$Events$onClick(
									$author$project$Lia$Markdown$Quiz$Block$Update$Choose(id))
								]))))));
	});
var $author$project$Lia$Markdown$Quiz$Block$View$select = F5(
	function (config, solved, open, options, i) {
		return A2(
			$elm$html$Html$span,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('lia-dropdown'),
							solved ? $elm$html$Html$Attributes$disabled(true) : $elm$html$Html$Events$onClick($author$project$Lia$Markdown$Quiz$Block$Update$Toggle)
						]),
					_List_fromArray(
						[
							A3($author$project$Lia$Markdown$Quiz$Block$View$get_option, config, i, options),
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('lia-icon'),
									A2($elm$html$Html$Attributes$style, 'float', 'right')
								]),
							_List_fromArray(
								[
									open ? $elm$html$Html$text('arrow_drop_down') : $elm$html$Html$text('arrow_drop_up')
								]))
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('lia-dropdown-options'),
							A2(
							$elm$html$Html$Attributes$style,
							'max-height',
							open ? '2000px' : '0px')
						]),
					A2(
						$elm$core$List$indexedMap,
						$author$project$Lia$Markdown$Quiz$Block$View$option(config),
						options))
				]));
	});
var $author$project$Lia$Markdown$Quiz$Block$Update$Input = function (a) {
	return {$: 'Input', a: a};
};
var $author$project$Lia$Markdown$Quiz$Block$View$text = F2(
	function (solved, state) {
		return A2(
			$elm$html$Html$input,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$type_('input'),
					$elm$html$Html$Attributes$class('lia-input'),
					$elm$html$Html$Attributes$value(state),
					$elm$html$Html$Attributes$disabled(solved),
					$elm$html$Html$Events$onInput($author$project$Lia$Markdown$Quiz$Block$Update$Input),
					$author$project$Lia$Utils$blockKeydown(
					$author$project$Lia$Markdown$Quiz$Block$Update$Input(state))
				]),
			_List_Nil);
	});
var $author$project$Lia$Markdown$Quiz$Block$View$view = F4(
	function (config, solved, quiz, state) {
		if (state.$ === 'Text') {
			var str = state.a;
			return A2($author$project$Lia$Markdown$Quiz$Block$View$text, solved, str);
		} else {
			var open = state.a;
			var value = state.b;
			return A5(
				$author$project$Lia$Markdown$Quiz$Block$View$select,
				config,
				solved,
				open,
				quiz.options,
				A2(
					$elm$core$Maybe$withDefault,
					-1,
					$elm$core$List$head(value)));
		}
	});
var $author$project$Lia$Markdown$Quiz$Matrix$Update$Script = function (a) {
	return {$: 'Script', a: a};
};
var $elm$html$Html$td = _VirtualDom_node('td');
var $elm$html$Html$tr = _VirtualDom_node('tr');
var $author$project$Lia$Markdown$Quiz$Matrix$View$add_text = F3(
	function (config, inline, toRow) {
		return A2(
			$elm$html$Html$tr,
			_List_Nil,
			A2(
				$elm$core$List$append,
				toRow,
				$elm$core$List$singleton(
					A2(
						$elm$html$Html$map,
						$author$project$Lia$Markdown$Quiz$Matrix$Update$Script,
						A2(
							$elm$html$Html$td,
							_List_Nil,
							A2($author$project$Lia$Markdown$Inline$View$viewer, config, inline))))));
	});
var $elm$html$Html$Attributes$align = $elm$html$Html$Attributes$stringProperty('align');
var $elm$html$Html$th = _VirtualDom_node('th');
var $author$project$Lia$Markdown$Quiz$Matrix$View$th = function (config) {
	return A2(
		$elm$core$Basics$composeR,
		$author$project$Lia$Markdown$Inline$View$viewer(config),
		A2(
			$elm$core$Basics$composeR,
			$elm$html$Html$th(
				_List_fromArray(
					[
						$elm$html$Html$Attributes$align('center')
					])),
			$elm$html$Html$map($author$project$Lia$Markdown$Quiz$Matrix$Update$Script)));
};
var $author$project$Lia$Markdown$Quiz$Matrix$View$header = F2(
	function (config, inlines) {
		return A2(
			$elm$html$Html$tr,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('lia-label')
				]),
			A2(
				$elm$core$List$map,
				$author$project$Lia$Markdown$Quiz$Matrix$View$th(config),
				inlines));
	});
var $elm$html$Html$table = _VirtualDom_node('table');
var $author$project$Lia$Markdown$Quiz$Matrix$Update$Toggle = F2(
	function (a, b) {
		return {$: 'Toggle', a: a, b: b};
	});
var $author$project$Lia$Markdown$Quiz$Matrix$View$check = F4(
	function (solved, row_id, column_id, value) {
		return A2(
			$elm$html$Html$td,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$align('center')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('lia-check-item')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$input,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$type_('checkbox'),
									$elm$html$Html$Attributes$checked(value),
									solved ? $elm$html$Html$Attributes$disabled(true) : $elm$html$Html$Events$onClick(
									A2($author$project$Lia$Markdown$Quiz$Matrix$Update$Toggle, row_id, column_id))
								]),
							_List_Nil),
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('lia-check-btn')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('check')
								]))
						]))
				]));
	});
var $author$project$Lia$Markdown$Quiz$Matrix$View$radio = F4(
	function (solved, row_id, column_id, value) {
		return A2(
			$elm$html$Html$td,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$align('center')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('lia-radio-item')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$input,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$type_('radio'),
									$elm$html$Html$Attributes$checked(value),
									solved ? $elm$html$Html$Attributes$disabled(true) : $elm$html$Html$Events$onClick(
									A2($author$project$Lia$Markdown$Quiz$Matrix$Update$Toggle, row_id, column_id))
								]),
							_List_Nil),
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('lia-radio-btn')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('')
								]))
						]))
				]));
	});
var $author$project$Lia$Markdown$Quiz$Matrix$View$tr = F3(
	function (solved, id, state) {
		if (state.$ === 'SingleChoice') {
			var list = state.a;
			return A2(
				$elm$core$List$indexedMap,
				A2($author$project$Lia$Markdown$Quiz$Matrix$View$radio, solved, id),
				list);
		} else {
			var list = state.a;
			return A2(
				$elm$core$List$indexedMap,
				A2($author$project$Lia$Markdown$Quiz$Matrix$View$check, solved, id),
				list);
		}
	});
var $author$project$Lia$Markdown$Quiz$Matrix$View$view = F4(
	function (config, solved, quiz, state) {
		return A2(
			$elm$html$Html$table,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('lia-survey-matrix')
				]),
			A2(
				$elm$core$List$cons,
				A2($author$project$Lia$Markdown$Quiz$Matrix$View$header, config, quiz.headers),
				A3(
					$elm$core$List$map2,
					$author$project$Lia$Markdown$Quiz$Matrix$View$add_text(config),
					quiz.options,
					A2(
						$elm$core$List$indexedMap,
						$author$project$Lia$Markdown$Quiz$Matrix$View$tr(solved),
						$elm$core$Array$toList(state)))));
	});
var $author$project$Lia$Markdown$Quiz$Vector$Update$Script = function (a) {
	return {$: 'Script', a: a};
};
var $author$project$Lia$Markdown$Quiz$Vector$Update$Toggle = function (a) {
	return {$: 'Toggle', a: a};
};
var $author$project$Lia$Markdown$Quiz$Vector$View$check = F4(
	function (config, solved, checked, _v0) {
		var id = _v0.a;
		var line = _v0.b;
		return A2(
			$elm$html$Html$tr,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('lia-check-item')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$td,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$attribute, 'valign', 'top'),
							$elm$html$Html$Attributes$class('lia-label')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$input,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$type_('checkbox'),
									$elm$html$Html$Attributes$checked(checked),
									solved ? $elm$html$Html$Attributes$disabled(true) : $elm$html$Html$Events$onClick(
									$author$project$Lia$Markdown$Quiz$Vector$Update$Toggle(id))
								]),
							_List_Nil),
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('lia-check-btn')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('check')
								]))
						])),
					A2(
					$elm$html$Html$map,
					$author$project$Lia$Markdown$Quiz$Vector$Update$Script,
					A2(
						$elm$html$Html$td,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('lia-label')
							]),
						A2($author$project$Lia$Markdown$Inline$View$viewer, config, line)))
				]));
	});
var $author$project$Lia$Markdown$Quiz$Vector$View$radio = F4(
	function (config, solved, checked, _v0) {
		var id = _v0.a;
		var line = _v0.b;
		return A2(
			$elm$html$Html$tr,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('lia-radio-item')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$td,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$attribute, 'valign', 'top'),
							$elm$html$Html$Attributes$class('lia-label')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$input,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$type_('radio'),
									$elm$html$Html$Attributes$checked(checked),
									solved ? $elm$html$Html$Attributes$disabled(true) : $elm$html$Html$Events$onClick(
									$author$project$Lia$Markdown$Quiz$Vector$Update$Toggle(id))
								]),
							_List_Nil),
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('lia-radio-btn')
								]),
							_List_Nil)
						])),
					A2(
					$elm$html$Html$map,
					$author$project$Lia$Markdown$Quiz$Vector$Update$Script,
					A2(
						$elm$html$Html$td,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('lia-label')
							]),
						A2($author$project$Lia$Markdown$Inline$View$viewer, config, line)))
				]));
	});
var $author$project$Lia$Markdown$Quiz$Vector$View$table = F3(
	function (fn, inlines, bools) {
		return A2(
			$elm$html$Html$table,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$attribute, 'cellspacing', '8')
				]),
			A3(
				$elm$core$List$map2,
				fn,
				bools,
				A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, inlines)));
	});
var $author$project$Lia$Markdown$Quiz$Vector$View$view = F4(
	function (config, solved, quiz, state) {
		var _v0 = _Utils_Tuple2(quiz.solution, state);
		_v0$2:
		while (true) {
			if (_v0.a.$ === 'SingleChoice') {
				if (_v0.b.$ === 'SingleChoice') {
					var list = _v0.b.a;
					return A3(
						$author$project$Lia$Markdown$Quiz$Vector$View$table,
						A2($author$project$Lia$Markdown$Quiz$Vector$View$radio, config, solved),
						quiz.options,
						list);
				} else {
					break _v0$2;
				}
			} else {
				if (_v0.b.$ === 'MultipleChoice') {
					var list = _v0.b.a;
					return A3(
						$author$project$Lia$Markdown$Quiz$Vector$View$table,
						A2($author$project$Lia$Markdown$Quiz$Vector$View$check, config, solved),
						quiz.options,
						list);
				} else {
					break _v0$2;
				}
			}
		}
		return $elm$html$Html$text('');
	});
var $author$project$Lia$Markdown$Quiz$View$state_view = F4(
	function (config, solved, state, quiz) {
		var _v0 = _Utils_Tuple2(state, quiz.quiz);
		_v0$3:
		while (true) {
			switch (_v0.a.$) {
				case 'Block_State':
					if (_v0.b.$ === 'Block_Type') {
						var s = _v0.a.a;
						var q = _v0.b.a;
						return A2(
							$elm$html$Html$map,
							$author$project$Lia$Markdown$Quiz$Update$Block_Update(quiz.id),
							A4($author$project$Lia$Markdown$Quiz$Block$View$view, config, solved, q, s));
					} else {
						break _v0$3;
					}
				case 'Vector_State':
					if (_v0.b.$ === 'Vector_Type') {
						var s = _v0.a.a;
						var q = _v0.b.a;
						return A2(
							$elm$html$Html$map,
							$author$project$Lia$Markdown$Quiz$Update$Vector_Update(quiz.id),
							A4($author$project$Lia$Markdown$Quiz$Vector$View$view, config, solved, q, s));
					} else {
						break _v0$3;
					}
				case 'Matrix_State':
					if (_v0.b.$ === 'Matrix_Type') {
						var s = _v0.a.a;
						var q = _v0.b.a;
						return A2(
							$elm$html$Html$map,
							$author$project$Lia$Markdown$Quiz$Update$Matrix_Update(quiz.id),
							A4($author$project$Lia$Markdown$Quiz$Matrix$View$view, config, solved, q, s));
					} else {
						break _v0$3;
					}
				default:
					break _v0$3;
			}
		}
		return $elm$html$Html$text('');
	});
var $author$project$Lia$Markdown$Quiz$Update$Check = F3(
	function (a, b, c) {
		return {$: 'Check', a: a, b: b, c: c};
	});
var $author$project$Lia$Markdown$Quiz$Update$ShowSolution = F2(
	function (a, b) {
		return {$: 'ShowSolution', a: a, b: b};
	});
var $author$project$Translations$quizCheck = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Проверка';
		case 'De':
			return 'Prüfen';
		case 'En':
			return 'Check';
		case 'Es':
			return 'verificar';
		case 'Fa':
			return 'بررسی';
		case 'Hy':
			return 'ստուգել';
		case 'Nl':
			return 'bekijk';
		case 'Ru':
			return 'проверить';
		case 'Tw':
			return '選取';
		case 'Ua':
			return 'перевірити';
		default:
			return '選取';
	}
};
var $author$project$Translations$quizChecked = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Проверено';
		case 'De':
			return 'Gelöst';
		case 'En':
			return 'Checked';
		case 'Es':
			return 'verificado';
		case 'Fa':
			return 'بررسی شده';
		case 'Hy':
			return 'ստուգված';
		case 'Nl':
			return 'bekeken';
		case 'Ru':
			return 'проверено';
		case 'Tw':
			return '已選取';
		case 'Ua':
			return 'перевірено';
		default:
			return '已選取';
	}
};
var $author$project$Translations$quizResolved = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Решено';
		case 'De':
			return 'Aufgelöst';
		case 'En':
			return 'Resolved';
		case 'Es':
			return 'resuelto';
		case 'Fa':
			return 'حل شده';
		case 'Hy':
			return 'լուծված է ';
		case 'Nl':
			return 'opgelost';
		case 'Ru':
			return 'решено';
		case 'Tw':
			return '以解答';
		case 'Ua':
			return 'розв\'язано';
		default:
			return '以解答';
	}
};
var $author$project$Lia$Markdown$Quiz$View$view_button = F4(
	function (config, trials, solved, msg) {
		switch (solved.$) {
			case 'Open':
				return (!trials) ? A2(
					$elm$html$Html$button,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('lia-btn'),
							$elm$html$Html$Events$onClick(msg)
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							$author$project$Translations$quizCheck(config.lang))
						])) : A2(
					$elm$html$Html$button,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('lia-btn'),
							$elm$html$Html$Attributes$class('lia-failure'),
							$elm$html$Html$Events$onClick(msg)
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							$author$project$Translations$quizCheck(config.lang) + (' ' + $elm$core$String$fromInt(trials)))
						]));
			case 'Solved':
				return A2(
					$elm$html$Html$button,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('lia-btn'),
							$elm$html$Html$Attributes$class('lia-success'),
							$elm$html$Html$Attributes$disabled(true)
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							$author$project$Translations$quizChecked(config.lang) + (' ' + $elm$core$String$fromInt(trials)))
						]));
			default:
				return A2(
					$elm$html$Html$button,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('lia-btn'),
							$elm$html$Html$Attributes$class('lia-warning'),
							$elm$html$Html$Attributes$disabled(true)
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							$author$project$Translations$quizResolved(config.lang))
						]));
		}
	});
var $author$project$Translations$quizSolution = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Отговор';
		case 'De':
			return 'zeige Lösung';
		case 'En':
			return 'show solution';
		case 'Es':
			return 'mostrar solución';
		case 'Fa':
			return 'نمایش راهکار';
		case 'Hy':
			return 'ցույց տալ լուծումը';
		case 'Nl':
			return 'toon oplossing';
		case 'Ru':
			return 'показать решение';
		case 'Tw':
			return '顯示解答';
		case 'Ua':
			return 'показати розв\'язок';
		default:
			return '顯示解答';
	}
};
var $author$project$Lia$Markdown$Quiz$View$view_button_solution = F3(
	function (config, solution, msg) {
		return _Utils_eq(solution, $author$project$Lia$Markdown$Quiz$Types$Open) ? A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('lia-btn--hint'),
					$elm$html$Html$Events$onClick(msg),
					$elm$html$Html$Attributes$title(
					$author$project$Translations$quizSolution(config.lang)),
					A2($elm$html$Html$Attributes$style, 'cursor', 'pointer')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('info')
				])) : $elm$html$Html$text('');
	});
var $author$project$Lia$Markdown$Quiz$Update$Script = function (a) {
	return {$: 'Script', a: a};
};
var $author$project$Lia$Markdown$Quiz$Update$ShowHint = function (a) {
	return {$: 'ShowHint', a: a};
};
var $author$project$Lia$Markdown$Quiz$View$view_hints = F4(
	function (config, idx, counter, hints) {
		var v_hints = F2(
			function (h, c) {
				var _v0 = _Utils_Tuple2(h, c);
				if (!_v0.a.b) {
					return _List_Nil;
				} else {
					if (!_v0.b) {
						return _List_Nil;
					} else {
						var _v1 = _v0.a;
						var x = _v1.a;
						var xs = _v1.b;
						return A2(
							$elm$core$List$cons,
							A2(
								$elm$html$Html$p,
								_List_Nil,
								A2(
									$elm$core$List$cons,
									A2(
										$elm$html$Html$span,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('lia-icon')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text('lightbulb_outline')
											])),
									A2($author$project$Lia$Markdown$Inline$View$viewer, config, x))),
							A2(v_hints, xs, c - 1));
					}
				}
			});
		return (_Utils_cmp(
			counter,
			$elm$core$List$length(hints)) < 0) ? A2(
			$elm$html$Html$span,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text(' '),
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('lia-btn--hint'),
							$elm$html$Html$Events$onClick(
							$author$project$Lia$Markdown$Quiz$Update$ShowHint(idx)),
							$elm$html$Html$Attributes$title('show hint'),
							A2($elm$html$Html$Attributes$style, 'cursor', 'pointer')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('help')
						])),
					A2(
					$elm$html$Html$map,
					$author$project$Lia$Markdown$Quiz$Update$Script,
					A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('lia-hints')
							]),
						A2(v_hints, hints, counter)))
				])) : A2(
			$elm$html$Html$map,
			$author$project$Lia$Markdown$Quiz$Update$Script,
			A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('lia-hints')
					]),
				A2(v_hints, hints, counter)));
	});
var $author$project$Lia$Markdown$Quiz$View$view_quiz = F4(
	function (config, state, quiz, fn) {
		return A2(
			$elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					(state.error_msg === '') ? $elm$html$Html$text('') : A2($elm$html$Html$br, _List_Nil, _List_Nil),
					(state.error_msg === '') ? $elm$html$Html$text('') : $elm$html$Html$text(state.error_msg),
					fn,
					A4(
					$author$project$Lia$Markdown$Quiz$View$view_button,
					config,
					state.trial,
					state.solved,
					A3($author$project$Lia$Markdown$Quiz$Update$Check, quiz.id, quiz.quiz, quiz.javascript)),
					A3(
					$author$project$Lia$Markdown$Quiz$View$view_button_solution,
					config,
					state.solved,
					A2($author$project$Lia$Markdown$Quiz$Update$ShowSolution, quiz.id, quiz.quiz)),
					A4($author$project$Lia$Markdown$Quiz$View$view_hints, config, quiz.id, state.hint, quiz.hints)
				]));
	});
var $author$project$Lia$Markdown$Quiz$View$view = F3(
	function (config, quiz, vector) {
		var _v0 = A2($author$project$Lia$Markdown$Quiz$Types$getState, vector, quiz.id);
		if (_v0.$ === 'Just') {
			var elem = _v0.a;
			return A4(
				$author$project$Lia$Markdown$Quiz$View$view_quiz,
				config,
				elem,
				quiz,
				A4(
					$author$project$Lia$Markdown$Quiz$View$state_view,
					config,
					$author$project$Lia$Markdown$Quiz$Types$solved(elem),
					elem.state,
					quiz));
		} else {
			return $elm$html$Html$text('');
		}
	});
var $author$project$Lia$Markdown$Survey$Update$MatrixUpdate = F3(
	function (a, b, c) {
		return {$: 'MatrixUpdate', a: a, b: b, c: c};
	});
var $author$project$Lia$Markdown$Survey$Update$VectorUpdate = F2(
	function (a, b) {
		return {$: 'VectorUpdate', a: a, b: b};
	});
var $author$project$Lia$Markdown$Survey$Model$get_matrix_state = F4(
	function (vector, idx, row, _var) {
		var _v0 = A2($elm$core$Array$get, idx, vector);
		if ((_v0.$ === 'Just') && (_v0.a.b.$ === 'Matrix_State')) {
			var _v1 = _v0.a;
			var _v2 = _v1.b;
			var matrix = _v2.b;
			return A2(
				$elm$core$Maybe$withDefault,
				false,
				A2(
					$elm$core$Maybe$andThen,
					function (d) {
						return A2($elm$core$Dict$get, _var, d);
					},
					A2($elm$core$Array$get, row, matrix)));
		} else {
			return false;
		}
	});
var $author$project$Lia$Markdown$Survey$Model$get_select_state = F2(
	function (vector, id) {
		var _v0 = A2($elm$core$Array$get, id, vector);
		if ((_v0.$ === 'Just') && (_v0.a.b.$ === 'Select_State')) {
			var _v1 = _v0.a;
			var _v2 = _v1.b;
			var open = _v2.a;
			var value = _v2.b;
			return _Utils_Tuple2(open, value);
		} else {
			return _Utils_Tuple2(false, -1);
		}
	});
var $author$project$Lia$Markdown$Survey$Model$get_text_state = F2(
	function (vector, idx) {
		var _v0 = A2($elm$core$Array$get, idx, vector);
		if ((_v0.$ === 'Just') && (_v0.a.b.$ === 'Text_State')) {
			var _v1 = _v0.a;
			var str = _v1.b.a;
			return str;
		} else {
			return '';
		}
	});
var $author$project$Lia$Markdown$Survey$Model$get_vector_state = F3(
	function (vector, idx, _var) {
		var _v0 = A2($elm$core$Array$get, idx, vector);
		if ((_v0.$ === 'Just') && (_v0.a.b.$ === 'Vector_State')) {
			var _v1 = _v0.a;
			var _v2 = _v1.b;
			var state = _v2.b;
			return A2(
				$elm$core$Maybe$withDefault,
				false,
				A2($elm$core$Dict$get, _var, state));
		} else {
			return false;
		}
	});
var $author$project$Lia$Markdown$Survey$Update$Script = function (a) {
	return {$: 'Script', a: a};
};
var $author$project$Lia$Markdown$Survey$View$inline = F2(
	function (config, elements) {
		return A2(
			$elm$html$Html$span,
			_List_Nil,
			A2(
				$elm$core$Basics$composeR,
				$author$project$Lia$Markdown$Inline$View$viewer(config),
				$elm$core$List$map(
					$elm$html$Html$map($author$project$Lia$Markdown$Survey$Update$Script)))(elements));
	});
var $author$project$Lia$Markdown$Survey$View$input = F4(
	function (button, msg, checked, submitted) {
		return A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class(
					button ? 'lia-check-item' : 'lia-radio-item')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$input,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$type_(
							button ? 'checkbox' : 'radio'),
							$elm$html$Html$Attributes$checked(checked),
							submitted ? $elm$html$Html$Attributes$disabled(true) : $elm$html$Html$Events$onClick(msg)
						]),
					_List_Nil),
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							button ? 'lia-check-btn' : 'lia-radio-btn')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							button ? 'check' : '')
						]))
				]));
	});
var $author$project$Lia$Markdown$Survey$View$matrix = F7(
	function (config, button, msg, fn, vars, submitted, _v0) {
		var row = _v0.a;
		var elements = _v0.b;
		var msgX = msg(row);
		var fnX = fn(row);
		return A2(
			$elm$html$Html$tr,
			_List_Nil,
			A2(
				$elm$core$List$append,
				A2(
					$elm$core$List$map,
					function (_var) {
						return A2(
							$elm$html$Html$td,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$align('center')
								]),
							_List_fromArray(
								[
									A4(
									$author$project$Lia$Markdown$Survey$View$input,
									button,
									msgX(_var),
									fnX(_var),
									submitted)
								]));
					},
					vars),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$td,
						_List_Nil,
						_List_fromArray(
							[
								A2($author$project$Lia$Markdown$Survey$View$inline, config, elements)
							]))
					])));
	});
var $author$project$Lia$Markdown$Survey$View$vector = F6(
	function (config, button, msg, fn, submitted, _v0) {
		var _var = _v0.a;
		var elements = _v0.b;
		return A2(
			$elm$html$Html$table,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$attribute, 'cellspacing', '8')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$td,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$attribute, 'valign', 'top'),
							$elm$html$Html$Attributes$class('lia-label')
						]),
					_List_fromArray(
						[
							A4(
							$author$project$Lia$Markdown$Survey$View$input,
							button,
							msg(_var),
							fn(_var),
							submitted)
						])),
					A2(
					$elm$html$Html$td,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('lia-label')
						]),
					_List_fromArray(
						[
							A2($author$project$Lia$Markdown$Survey$View$inline, config, elements)
						]))
				]));
	});
var $elm$html$Html$thead = _VirtualDom_node('thead');
var $author$project$Lia$Markdown$Survey$View$view_matrix = F5(
	function (config, header, questions, fn, submitted) {
		var th = A2(
			$elm$html$Html$thead,
			_List_Nil,
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					A2(
						$elm$core$Basics$composeR,
						$author$project$Lia$Markdown$Inline$View$viewer(config),
						$elm$core$List$map(
							$elm$html$Html$map($author$project$Lia$Markdown$Survey$Update$Script))),
					$elm$html$Html$th(
						_List_fromArray(
							[
								$elm$html$Html$Attributes$align('center')
							]))),
				header));
		var fnX = fn(submitted);
		return A2(
			$elm$html$Html$table,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('lia-survey-matrix')
				]),
			A2(
				$elm$core$List$cons,
				th,
				A2(
					$elm$core$List$map,
					fnX,
					A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, questions))));
	});
var $author$project$Lia$Markdown$Survey$Update$SelectChose = function (a) {
	return {$: 'SelectChose', a: a};
};
var $author$project$Lia$Markdown$Survey$View$get_option = F3(
	function (config, id, list) {
		get_option:
		while (true) {
			var _v0 = _Utils_Tuple2(id, list);
			if (_v0.b.b) {
				if (!_v0.a) {
					var _v1 = _v0.b;
					var x = _v1.a;
					return A2(
						$elm$html$Html$span,
						_List_Nil,
						A3(
							$elm$core$Basics$composeR,
							$author$project$Lia$Markdown$Inline$View$viewer(config),
							$elm$core$List$map(
								$elm$html$Html$map($author$project$Lia$Markdown$Survey$Update$Script)),
							x));
				} else {
					var i = _v0.a;
					var _v2 = _v0.b;
					var xs = _v2.b;
					var $temp$config = config,
						$temp$id = i - 1,
						$temp$list = xs;
					config = $temp$config;
					id = $temp$id;
					list = $temp$list;
					continue get_option;
				}
			} else {
				return $elm$html$Html$text('choose');
			}
		}
	});
var $author$project$Lia$Markdown$Survey$Update$SelectUpdate = F2(
	function (a, b) {
		return {$: 'SelectUpdate', a: a, b: b};
	});
var $author$project$Lia$Markdown$Survey$View$option = F4(
	function (config, id1, id2, opt) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('lia-dropdown-option'),
					$elm$html$Html$Events$onClick(
					A2($author$project$Lia$Markdown$Survey$Update$SelectUpdate, id1, id2))
				]),
			A3(
				$elm$core$Basics$composeR,
				$author$project$Lia$Markdown$Inline$View$viewer(config),
				$elm$core$List$map(
					$elm$html$Html$map($author$project$Lia$Markdown$Survey$Update$Script)),
				opt));
	});
var $author$project$Lia$Markdown$Survey$View$view_select = F5(
	function (config, options, _v0, id, submitted) {
		var open = _v0.a;
		var value = _v0.b;
		return A2(
			$elm$html$Html$span,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('lia-dropdown'),
							submitted ? $elm$html$Html$Attributes$disabled(true) : $elm$html$Html$Events$onClick(
							$author$project$Lia$Markdown$Survey$Update$SelectChose(id))
						]),
					_List_fromArray(
						[
							A3($author$project$Lia$Markdown$Survey$View$get_option, config, value, options),
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('lia-icon'),
									A2($elm$html$Html$Attributes$style, 'float', 'right')
								]),
							_List_fromArray(
								[
									open ? $elm$html$Html$text('arrow_drop_down') : $elm$html$Html$text('arrow_drop_up')
								]))
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('lia-dropdown-options'),
							A2(
							$elm$html$Html$Attributes$style,
							'max-height',
							open ? '2000px' : '0px')
						]),
					A2(
						$elm$core$List$indexedMap,
						A2($author$project$Lia$Markdown$Survey$View$option, config, id),
						options))
				]));
	});
var $author$project$Lia$Markdown$Survey$Model$get_submission_state = F2(
	function (vector, idx) {
		var _v0 = A2($elm$core$Array$get, idx, vector);
		if ((_v0.$ === 'Just') && _v0.a.a) {
			var _v1 = _v0.a;
			return true;
		} else {
			return false;
		}
	});
var $author$project$Translations$surveySubmit = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Изпрати';
		case 'De':
			return 'Abschicken';
		case 'En':
			return 'Submit';
		case 'Es':
			return 'enviar';
		case 'Fa':
			return 'ارسال';
		case 'Hy':
			return 'ներկայացնել';
		case 'Nl':
			return 'Verzenden';
		case 'Ru':
			return 'отправить';
		case 'Tw':
			return '遞交';
		case 'Ua':
			return 'відіслати';
		default:
			return '遞交';
	}
};
var $author$project$Translations$surveySubmitted = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Благодаря';
		case 'De':
			return 'Dankeshön';
		case 'En':
			return 'Thanks';
		case 'Es':
			return 'enviado';
		case 'Fa':
			return 'تشکر';
		case 'Hy':
			return 'շնորհակալություն';
		case 'Nl':
			return 'Vriendelijk bedankt';
		case 'Ru':
			return 'отправлено';
		case 'Tw':
			return '感謝';
		case 'Ua':
			return 'дякую';
		default:
			return '感謝';
	}
};
var $author$project$Lia$Markdown$Survey$View$submit_button = F4(
	function (config, submitted, idx, javascript) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					submitted ? A2(
					$elm$html$Html$button,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('lia-btn'),
							$elm$html$Html$Attributes$disabled(true)
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							$author$project$Translations$surveySubmitted(config.lang))
						])) : A2(
					$elm$html$Html$button,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('lia-btn'),
							$elm$html$Html$Events$onClick(
							A2($author$project$Lia$Markdown$Survey$Update$Submit, idx, javascript))
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							$author$project$Translations$surveySubmit(config.lang))
						]))
				]));
	});
var $author$project$Lia$Markdown$Survey$View$view_survey = F5(
	function (config, model, idx, javascript, fn) {
		var submitted = A2($author$project$Lia$Markdown$Survey$Model$get_submission_state, model, idx);
		return _List_fromArray(
			[
				fn(submitted),
				A4($author$project$Lia$Markdown$Survey$View$submit_button, config, submitted, idx, javascript)
			]);
	});
var $author$project$Lia$Markdown$Survey$Update$TextUpdate = F2(
	function (a, b) {
		return {$: 'TextUpdate', a: a, b: b};
	});
var $elm$html$Html$Attributes$rows = function (n) {
	return A2(
		_VirtualDom_attribute,
		'rows',
		$elm$core$String$fromInt(n));
};
var $author$project$Translations$surveyText = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Въведете текст...';
		case 'De':
			return 'Texteingabe ...';
		case 'En':
			return 'Enter some text...';
		case 'Es':
			return 'introducir texto';
		case 'Fa':
			return 'لطفا متن وارد کنید';
		case 'Hy':
			return 'Մուտքագրեք որոշ տեքստ';
		case 'Nl':
			return 'Tekstinvoer ...';
		case 'Ru':
			return 'ввод текста';
		case 'Tw':
			return '輸入文字...';
		case 'Ua':
			return 'Ввід тексту ...';
		default:
			return '輸入文字...';
	}
};
var $author$project$Lia$Markdown$Survey$View$view_text = F5(
	function (config, str, lines, idx, submitted) {
		var attr = _List_fromArray(
			[
				$elm$html$Html$Events$onInput(
				$author$project$Lia$Markdown$Survey$Update$TextUpdate(idx)),
				$author$project$Lia$Utils$blockKeydown(
				A2($author$project$Lia$Markdown$Survey$Update$TextUpdate, idx, str)),
				$elm$html$Html$Attributes$class('lia-textarea'),
				$elm$html$Html$Attributes$placeholder(
				$author$project$Translations$surveyText(config.lang)),
				$elm$html$Html$Attributes$value(str),
				$elm$html$Html$Attributes$disabled(submitted)
			]);
		if (lines === 1) {
			return A2($elm$html$Html$input, attr, _List_Nil);
		} else {
			return A2(
				$elm$html$Html$textarea,
				A2(
					$elm$core$List$cons,
					$elm$html$Html$Attributes$rows(lines),
					attr),
				_List_Nil);
		}
	});
var $author$project$Lia$Markdown$Survey$View$view_vector = F3(
	function (questions, fn, submitted) {
		var fnX = fn(submitted);
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			A2($elm$core$List$map, fnX, questions));
	});
var $author$project$Lia$Markdown$Survey$View$view = F4(
	function (config, attr, survey, model) {
		return A2(
			$elm$html$Html$p,
			A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-quiz lia-card', attr),
			function () {
				var _v0 = survey.survey;
				switch (_v0.$) {
					case 'Text':
						var lines = _v0.a;
						return A5(
							$author$project$Lia$Markdown$Survey$View$view_survey,
							config,
							model,
							survey.id,
							survey.javascript,
							A4(
								$author$project$Lia$Markdown$Survey$View$view_text,
								config,
								A2($author$project$Lia$Markdown$Survey$Model$get_text_state, model, survey.id),
								lines,
								survey.id));
					case 'Select':
						var inlines = _v0.a;
						return A5(
							$author$project$Lia$Markdown$Survey$View$view_survey,
							config,
							model,
							survey.id,
							survey.javascript,
							A4(
								$author$project$Lia$Markdown$Survey$View$view_select,
								config,
								inlines,
								A2($author$project$Lia$Markdown$Survey$Model$get_select_state, model, survey.id),
								survey.id));
					case 'Vector':
						var button = _v0.a;
						var questions = _v0.b;
						return A5(
							$author$project$Lia$Markdown$Survey$View$view_survey,
							config,
							model,
							survey.id,
							survey.javascript,
							A2(
								$author$project$Lia$Markdown$Survey$View$view_vector,
								questions,
								A4(
									$author$project$Lia$Markdown$Survey$View$vector,
									config,
									button,
									$author$project$Lia$Markdown$Survey$Update$VectorUpdate(survey.id),
									A2($author$project$Lia$Markdown$Survey$Model$get_vector_state, model, survey.id))));
					default:
						var button = _v0.a;
						var header = _v0.b;
						var vars = _v0.c;
						var questions = _v0.d;
						return A5(
							$author$project$Lia$Markdown$Survey$View$view_survey,
							config,
							model,
							survey.id,
							survey.javascript,
							A4(
								$author$project$Lia$Markdown$Survey$View$view_matrix,
								config,
								header,
								questions,
								A5(
									$author$project$Lia$Markdown$Survey$View$matrix,
									config,
									button,
									$author$project$Lia$Markdown$Survey$Update$MatrixUpdate(survey.id),
									A2($author$project$Lia$Markdown$Survey$Model$get_matrix_state, model, survey.id),
									vars)));
				}
			}());
	});
var $author$project$Lia$Markdown$Table$View$diagramShow = F2(
	function (attr, active) {
		return A2($author$project$Lia$Markdown$HTML$Attributes$isSet, 'data-show', attr) ? (!active) : active;
	});
var $author$project$Lia$Markdown$Table$View$get = function (i) {
	return (!i) ? $elm$core$List$head : A2(
		$elm$core$Basics$composeR,
		$elm$core$List$tail,
		$elm$core$Maybe$andThen(
			$author$project$Lia$Markdown$Table$View$get(i - 1)));
};
var $author$project$Lia$Markdown$Table$View$sort = F2(
	function (state, matrix) {
		if (!_Utils_eq(state.column, -1)) {
			var sorted = A2(
				$elm$core$Maybe$withDefault,
				false,
				A2(
					$elm$core$Maybe$map,
					$elm$core$List$all($author$project$Lia$Markdown$Table$Types$isNumber),
					A2($author$project$Lia$Markdown$Table$Matrix$column, state.column, matrix))) ? A2(
				$elm$core$List$sortBy,
				A2(
					$elm$core$Basics$composeR,
					$author$project$Lia$Markdown$Table$View$get(state.column),
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Maybe$andThen(
							function ($) {
								return $._float;
							}),
						$elm$core$Maybe$withDefault(0))),
				matrix) : A2(
				$elm$core$List$sortBy,
				A2(
					$elm$core$Basics$composeR,
					$author$project$Lia$Markdown$Table$View$get(state.column),
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Maybe$map(
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.string;
								},
								$elm$core$String$toLower)),
						$elm$core$Maybe$withDefault(''))),
				matrix);
			return state.dir ? sorted : $elm$core$List$reverse(sorted);
		} else {
			return matrix;
		}
	});
var $author$project$Lia$Markdown$Table$Update$Sort = F2(
	function (a, b) {
		return {$: 'Sort', a: a, b: b};
	});
var $author$project$Lia$Markdown$Update$UpdateTable = function (a) {
	return {$: 'UpdateTable', a: a};
};
var $author$project$Lia$Markdown$Table$View$header = F6(
	function (viewer, id, format, state, i, r) {
		return _List_fromArray(
			[
				A2(
				$elm$html$Html$span,
				(format !== 'right') ? _List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'float', format),
						A2($elm$html$Html$Attributes$style, 'height', '100%')
					]) : _List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'height', '100%')
					]),
				viewer(r)),
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('lia-icon'),
						A2($elm$html$Html$Attributes$style, 'float', 'right'),
						A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
						A2($elm$html$Html$Attributes$style, 'margin-right', '-17px'),
						A2($elm$html$Html$Attributes$style, 'margin-top', '-10px'),
						$elm$html$Html$Events$onClick(
						$author$project$Lia$Markdown$Update$UpdateTable(
							A2($author$project$Lia$Markdown$Table$Update$Sort, id, i)))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'height', '6px'),
								A2(
								$elm$html$Html$Attributes$style,
								'color',
								(_Utils_eq(state.column, i) && state.dir) ? 'red' : 'gray')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('arrow_drop_up')
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'height', '6px'),
								A2(
								$elm$html$Html$Attributes$style,
								'color',
								(_Utils_eq(state.column, i) && (!state.dir)) ? 'red' : 'gray')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('arrow_drop_down')
							]))
					]))
			]);
	});
var $author$project$Lia$Markdown$Table$View$view_head2 = F4(
	function (viewer, id, format, state) {
		return A2(
			$elm$core$Basics$composeR,
			A2($elm$core$List$map2, $elm$core$Tuple$pair, format),
			$elm$core$List$indexedMap(
				F2(
					function (i, _v0) {
						var f = _v0.a;
						var _v1 = _v0.b;
						var a = _v1.a;
						var r = _v1.b;
						return A2(
							$elm$html$Html$th,
							A2(
								$elm$core$List$cons,
								$elm$html$Html$Attributes$align(f),
								A2(
									$elm$core$List$cons,
									A2($elm$html$Html$Attributes$style, 'height', '100%'),
									$author$project$Lia$Markdown$HTML$Attributes$toAttribute(a))),
							A6($author$project$Lia$Markdown$Table$View$header, viewer, id, f, state, i, r));
					})));
	});
var $author$project$Lia$Markdown$Table$View$formatted = F6(
	function (viewer, head, format, rows, id, state) {
		return A2(
			$elm$core$List$cons,
			A2(
				$elm$html$Html$thead,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('lia-inline lia-table-head')
					]),
				A5($author$project$Lia$Markdown$Table$View$view_head2, viewer, id, format, state, head)),
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					A2(
						$elm$core$List$map2,
						F2(
							function (f, e) {
								return A2(
									$elm$html$Html$td,
									A2(
										$elm$core$List$cons,
										$elm$html$Html$Attributes$align(f),
										$author$project$Lia$Markdown$HTML$Attributes$toAttribute(e.attr)),
									viewer(e.inlines));
							}),
						format),
					$elm$html$Html$tr(
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('lia-inline lia-table-row')
							]))),
				A2($author$project$Lia$Markdown$Table$View$sort, state, rows)));
	});
var $author$project$Lia$Markdown$Table$View$getState = function (id) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$Array$get(id),
		$elm$core$Maybe$withDefault(
			A3($author$project$Lia$Markdown$Table$Types$State, -1, false, false)));
};
var $elm$virtual_dom$VirtualDom$lazy7 = _VirtualDom_lazy7;
var $elm$html$Html$Lazy$lazy7 = $elm$virtual_dom$VirtualDom$lazy7;
var $author$project$Lia$Markdown$Table$Update$Toggle = function (a) {
	return {$: 'Toggle', a: a};
};
var $author$project$Lia$Markdown$Table$View$toggleBtn = F2(
	function (id, icon) {
		return A2(
			$elm$html$Html$img,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
					A2($elm$html$Html$Attributes$style, 'height', '16px'),
					$elm$html$Html$Attributes$height(16),
					$elm$html$Html$Attributes$width(16),
					A2($elm$html$Html$Attributes$style, 'width', '16px'),
					$elm$html$Html$Events$onClick(
					$author$project$Lia$Markdown$Update$UpdateTable(
						$author$project$Lia$Markdown$Table$Update$Toggle(id))),
					$elm$html$Html$Attributes$src('img/' + (icon + '.png')),
					A2($elm$html$Html$Attributes$style, 'z-index', '100')
				]),
			_List_Nil);
	});
var $author$project$Lia$Markdown$Table$View$toTable = F4(
	function (id, attr, _class, body) {
		return _Utils_eq(_class, $author$project$Lia$Markdown$Table$Types$None) ? A2(
			$elm$html$Html$table,
			A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-table', attr),
			body) : A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$author$project$Lia$Markdown$Table$View$toggleBtn,
					id,
					function () {
						switch (_class.$) {
							case 'BarChart':
								return 'barchart';
							case 'PieChart':
								return 'piechart';
							case 'LinePlot':
								return 'lineplot';
							case 'HeatMap':
								return 'heatmap';
							case 'Radar':
								return 'radar';
							case 'Parallel':
								return 'parallel';
							case 'Graph':
								return 'graph';
							case 'Map':
								return 'map';
							case 'Sankey':
								return 'sankey';
							case 'ScatterPlot':
								return 'scatterplot';
							case 'BoxPlot':
								return 'boxplot';
							case 'Funnel':
								return 'funnel';
							default:
								return '';
						}
					}()),
					A2(
					$elm$html$Html$table,
					A2(
						$elm$core$List$cons,
						A2($elm$html$Html$Attributes$style, 'margin-top', '-0.2em'),
						A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-table', attr)),
					body)
				]));
	});
var $author$project$Lia$Markdown$Table$View$view_head1 = F3(
	function (viewer, id, state) {
		return $elm$core$List$indexedMap(
			F2(
				function (i, r) {
					return A2(
						$elm$html$Html$td,
						A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$align('left'),
							$author$project$Lia$Markdown$HTML$Attributes$toAttribute(r.attr)),
						A6($author$project$Lia$Markdown$Table$View$header, viewer, id, 'left', state, i, r.inlines));
				}));
	});
var $author$project$Lia$Markdown$Table$View$unformatted = F4(
	function (viewer, rows, id, state) {
		var _v0 = A2($author$project$Lia$Markdown$Table$View$sort, state, rows);
		if (_v0.b) {
			var head = _v0.a;
			var tail = _v0.b;
			return A2(
				$elm$core$List$cons,
				A2(
					$elm$html$Html$tr,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('lia-inline lia-table-row')
						]),
					A4($author$project$Lia$Markdown$Table$View$view_head1, viewer, id, state, head)),
				A2(
					$elm$core$List$map,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$List$map(
							function (e) {
								return A2(
									$elm$html$Html$td,
									A2(
										$elm$core$List$cons,
										$elm$html$Html$Attributes$align('left'),
										$author$project$Lia$Markdown$HTML$Attributes$toAttribute(e.attr)),
									viewer(e.inlines));
							}),
						$elm$html$Html$tr(
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('lia-inline lia-table-row')
								]))),
					tail));
		} else {
			return _List_Nil;
		}
	});
var $author$project$Lia$Markdown$Table$Update$NoOp = {$: 'NoOp'};
var $author$project$Lia$Markdown$Chart$View$getColor = function (i) {
	return A2(
		$elm$core$Maybe$withDefault,
		_Utils_chr('~'),
		A2(
			$elm$core$Maybe$map,
			$elm$core$Tuple$first,
			$elm$core$String$uncons(
				A3($elm$core$String$slice, i, -1, '*abcdefghijklmnopqrstuvwxyz+ABCDEFGHIJKLMNOPQRSTUVWXYZ#1234567890!§$%&/()=?\'_.,;:<>|^°~'))));
};
var $author$project$Lia$Markdown$Table$Types$isEmpty = function (str) {
	return (str === '') ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(str);
};
var $author$project$Lia$Markdown$Table$View$getLabels = F2(
	function (attr, row) {
		return {
			main: function () {
				var _v0 = A2($author$project$Lia$Markdown$HTML$Attributes$get, 'data-title', attr);
				if (_v0.$ === 'Just') {
					var title = _v0.a;
					return $elm$core$Maybe$Just(title);
				} else {
					return A2(
						$elm$core$Maybe$andThen,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.string;
							},
							$author$project$Lia$Markdown$Table$Types$isEmpty),
						$elm$core$List$head(row));
				}
			}(),
			x: A2($author$project$Lia$Markdown$HTML$Attributes$get, 'data-xlabel', attr),
			y: A2($author$project$Lia$Markdown$HTML$Attributes$get, 'data-ylabel', attr)
		};
	});
var $elm$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		if (ma.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				return $elm$core$Maybe$Just(
					A2(func, a, b));
			}
		}
	});
var $author$project$Lia$Markdown$Table$Matrix$tail = A2(
	$elm$core$Basics$composeR,
	$elm$core$List$tail,
	$elm$core$Maybe$withDefault(_List_Nil));
var $author$project$Lia$Markdown$Chart$View$grid = _Utils_Tuple2(
	'grid',
	$elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'left',
				$elm$json$Json$Encode$string('1%')),
				_Utils_Tuple2(
				'right',
				$elm$json$Json$Encode$string('1%')),
				_Utils_Tuple2(
				'bottom',
				$elm$json$Json$Encode$string('12%')),
				_Utils_Tuple2(
				'containLabel',
				$elm$json$Json$Encode$bool(true))
			])));
var $author$project$Lia$Markdown$Chart$View$encodeBarChart = F3(
	function (labels, category, data) {
		var bars = A2(
			$elm$json$Json$Encode$list,
			$elm$core$Basics$identity,
			A3(
				$elm$core$List$foldl,
				F2(
					function (_v0, bs) {
						var label_ = _v0.a;
						var floats = _v0.b;
						return A2(
							$elm$core$List$all,
							$elm$core$Basics$eq($elm$core$Maybe$Nothing),
							floats) ? bs : A2(
							$elm$core$List$cons,
							$elm$json$Json$Encode$object(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'type',
										$elm$json$Json$Encode$string('bar')),
										_Utils_Tuple2(
										'name',
										A2(
											$elm$core$Maybe$withDefault,
											$elm$json$Json$Encode$null,
											A2($elm$core$Maybe$map, $elm$json$Json$Encode$string, label_))),
										_Utils_Tuple2(
										'barGap',
										$elm$json$Json$Encode$int(0)),
										$author$project$Lia$Markdown$Chart$View$label,
										_Utils_Tuple2(
										'data',
										A2(
											$elm$json$Json$Encode$list,
											$elm$core$Basics$identity,
											A2(
												$elm$core$List$map,
												A2(
													$elm$core$Basics$composeR,
													$elm$core$Maybe$map($elm$json$Json$Encode$float),
													$elm$core$Maybe$withDefault($elm$json$Json$Encode$null)),
												floats)))
									])),
							bs);
					}),
				_List_Nil,
				data));
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'xAxis',
					$elm$json$Json$Encode$object(
						_Utils_ap(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'type',
									$elm$json$Json$Encode$string('category')),
									_Utils_Tuple2(
									'data',
									A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, category))
								]),
							A2(
								$elm$core$Maybe$withDefault,
								_List_Nil,
								A2(
									$elm$core$Maybe$map,
									function (title) {
										return _List_fromArray(
											[
												_Utils_Tuple2(
												'name',
												$elm$json$Json$Encode$string(title))
											]);
									},
									labels.x))))),
					A3($author$project$Lia$Markdown$Chart$View$yAxis, 'value', labels.y, _List_Nil),
					$author$project$Lia$Markdown$Chart$View$grid,
					_Utils_Tuple2(
					'legend',
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'data',
								A2(
									$elm$json$Json$Encode$list,
									$elm$json$Json$Encode$string,
									A2(
										$elm$core$List$filterMap,
										$elm$core$Basics$identity,
										$elm$core$List$unzip(data).a)))
							]))),
					A2(
					$author$project$Lia$Markdown$Chart$View$toolbox,
					$elm$core$Maybe$Nothing,
					{dataView: true, dataZoom: true, magicType: true, restore: false, saveAsImage: true}),
					_Utils_Tuple2(
					'tooltip',
					$elm$json$Json$Encode$object(_List_Nil)),
					_Utils_Tuple2('series', bars)
				]));
	});
var $author$project$Lia$Markdown$Chart$View$viewBarChart = F5(
	function (attr, light, labels, category, data) {
		return A4(
			$author$project$Lia$Markdown$Chart$View$eCharts,
			attr,
			light,
			$elm$core$Maybe$Nothing,
			A3($author$project$Lia$Markdown$Chart$View$encodeBarChart, labels, category, data));
	});
var $author$project$Lia$Markdown$Chart$View$encodeTitle = F2(
	function (position, title) {
		return _Utils_Tuple2(
			'title',
			$elm$json$Json$Encode$object(
				A3(
					$author$project$Lia$Markdown$Chart$View$add,
					$elm$core$Tuple$mapSecond($elm$json$Json$Encode$string),
					position,
					_List_fromArray(
						[
							_Utils_Tuple2(
							'text',
							$elm$json$Json$Encode$string(title))
						]))));
	});
var $f0i$statistics$FStatistics$median = function (sorted) {
	var l = $elm$core$List$length(sorted);
	var rest = A2($elm$core$List$drop, ((l - 1) / 2) | 0, sorted);
	if (A2($elm$core$Basics$modBy, 2, l) === 1) {
		return $elm$core$List$head(rest);
	} else {
		if (rest.b && rest.b.b) {
			var a = rest.a;
			var _v1 = rest.b;
			var b = _v1.a;
			return $elm$core$Maybe$Just((a + b) / 2);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	}
};
var $f0i$statistics$FStatistics$minmax = function (list) {
	var min = $elm$core$List$minimum(list);
	var max = $elm$core$List$maximum(list);
	var _v0 = _Utils_Tuple2(min, max);
	if ((_v0.a.$ === 'Just') && (_v0.b.$ === 'Just')) {
		var a = _v0.a.a;
		var b = _v0.b.a;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(a, b));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$Basics$clamp = F3(
	function (low, high, number) {
		return (_Utils_cmp(number, low) < 0) ? low : ((_Utils_cmp(number, high) > 0) ? high : number);
	});
var $f0i$statistics$FStatistics$percentile = F2(
	function (p, sorted) {
		var l = $elm$core$List$length(sorted);
		var pos = (l - 1) * A3($elm$core$Basics$clamp, 0, 1, p);
		var rest = A2(
			$elm$core$List$drop,
			$elm$core$Basics$floor(pos),
			sorted);
		var weight = pos - $elm$core$Basics$floor(pos);
		if (rest.b) {
			if (rest.b.b) {
				var a = rest.a;
				var _v1 = rest.b;
				var b = _v1.a;
				return $elm$core$Maybe$Just((a * (1 - weight)) + (b * weight));
			} else {
				var a = rest.a;
				return $elm$core$Maybe$Just(a);
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$core$List$sort = function (xs) {
	return A2($elm$core$List$sortBy, $elm$core$Basics$identity, xs);
};
var $author$project$Lia$Markdown$Chart$View$encodeBoxPlot = F3(
	function (labels, category, data) {
		var boxplots = A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A3(
				$elm$core$List$map2,
				F2(
					function (c, data_) {
						var _v0 = _Utils_Tuple3(
							A2($f0i$statistics$FStatistics$percentile, 0.25, data_),
							$f0i$statistics$FStatistics$median(data_),
							A2($f0i$statistics$FStatistics$percentile, 0.75, data_));
						if (((_v0.a.$ === 'Just') && (_v0.b.$ === 'Just')) && (_v0.c.$ === 'Just')) {
							var q1 = _v0.a.a;
							var q2 = _v0.b.a;
							var q3 = _v0.c.a;
							var _v1 = A2(
								$elm$core$Maybe$withDefault,
								_Utils_Tuple2(q1, q3),
								A2(
									$elm$core$Maybe$map,
									function (_v2) {
										var min_ = _v2.a;
										var max_ = _v2.b;
										var whisker2 = q3 + (1.5 * (q3 - q1));
										var whisker1 = q1 - (1.5 * (q3 - q1));
										return _Utils_Tuple2(
											(_Utils_cmp(whisker1, min_) < 0) ? min_ : whisker1,
											(_Utils_cmp(whisker2, max_) > 0) ? max_ : whisker2);
									},
									$f0i$statistics$FStatistics$minmax(data_)));
							var min = _v1.a;
							var max = _v1.b;
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(
									c,
									_Utils_Tuple2(
										_List_fromArray(
											[min, q1, q2, q3, max]),
										A2(
											$elm$core$List$filter,
											function (x) {
												return (_Utils_cmp(x, max) > 0) || (_Utils_cmp(x, min) < 0);
											},
											data_))));
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}),
				category,
				A2(
					$elm$core$List$map,
					$elm$core$List$sort,
					A2(
						$elm$core$List$map,
						$elm$core$List$filterMap($elm$core$Basics$identity),
						data))));
		return $elm$json$Json$Encode$object(
			A3(
				$author$project$Lia$Markdown$Chart$View$add,
				$author$project$Lia$Markdown$Chart$View$encodeTitle(
					$elm$core$Maybe$Just(
						_Utils_Tuple2('left', 'center'))),
				labels.main,
				_List_fromArray(
					[
						_Utils_Tuple2(
						'xAxis',
						$elm$json$Json$Encode$object(
							_Utils_ap(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'type',
										$elm$json$Json$Encode$string('category')),
										_Utils_Tuple2(
										'data',
										A2(
											$elm$json$Json$Encode$list,
											$elm$json$Json$Encode$string,
											A2($elm$core$List$map, $elm$core$Tuple$first, boxplots)))
									]),
								A2(
									$elm$core$Maybe$withDefault,
									_List_Nil,
									A2(
										$elm$core$Maybe$map,
										function (title) {
											return _List_fromArray(
												[
													_Utils_Tuple2(
													'name',
													$elm$json$Json$Encode$string(title))
												]);
										},
										labels.x))))),
						A3($author$project$Lia$Markdown$Chart$View$yAxis, 'value', labels.y, _List_Nil),
						A2(
						$author$project$Lia$Markdown$Chart$View$toolbox,
						$elm$core$Maybe$Nothing,
						{dataView: true, dataZoom: true, magicType: false, restore: false, saveAsImage: true}),
						$author$project$Lia$Markdown$Chart$View$grid,
						_Utils_Tuple2(
						'tooltip',
						$elm$json$Json$Encode$object(_List_Nil)),
						_Utils_Tuple2(
						'series',
						A2(
							$elm$json$Json$Encode$list,
							$elm$json$Json$Encode$object,
							_List_fromArray(
								[
									_List_fromArray(
									[
										_Utils_Tuple2(
										'type',
										$elm$json$Json$Encode$string('boxplot')),
										_Utils_Tuple2(
										'data',
										A2(
											$elm$json$Json$Encode$list,
											$elm$core$Basics$identity,
											A2(
												$elm$core$List$map,
												A2(
													$elm$core$Basics$composeR,
													$elm$core$Tuple$second,
													A2(
														$elm$core$Basics$composeR,
														$elm$core$Tuple$first,
														$elm$json$Json$Encode$list($elm$json$Json$Encode$float))),
												boxplots)))
									]),
									_List_fromArray(
									[
										_Utils_Tuple2(
										'type',
										$elm$json$Json$Encode$string('scatter')),
										_Utils_Tuple2(
										'name',
										$elm$json$Json$Encode$string('outlier')),
										_Utils_Tuple2(
										'data',
										A2(
											$elm$json$Json$Encode$list,
											$elm$core$Basics$identity,
											A2(
												$elm$core$List$indexedMap,
												F2(
													function (i, data_) {
														return A2(
															$elm$json$Json$Encode$list,
															$elm$json$Json$Encode$float,
															A2($elm$core$List$cons, i, data_));
													}),
												A2(
													$elm$core$List$map,
													A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $elm$core$Tuple$second),
													boxplots))))
									])
								])))
					])));
	});
var $author$project$Lia$Markdown$Chart$View$viewBoxPlot = F5(
	function (attr, light, labels, category, data) {
		return A4(
			$author$project$Lia$Markdown$Chart$View$eCharts,
			attr,
			light,
			$elm$core$Maybe$Nothing,
			A3($author$project$Lia$Markdown$Chart$View$encodeBoxPlot, labels, category, data));
	});
var $author$project$Lia$Markdown$Chart$View$viewChart = F2(
	function (attr, light) {
		return A2(
			$elm$core$Basics$composeR,
			$author$project$Lia$Markdown$Chart$View$encode(false),
			A3($author$project$Lia$Markdown$Chart$View$eCharts, attr, light, $elm$core$Maybe$Nothing));
	});
var $author$project$Lia$Markdown$Chart$View$encodeLegend = F2(
	function (params, data) {
		return _Utils_Tuple2(
			'legend',
			$elm$json$Json$Encode$object(
				A2(
					$elm$core$List$cons,
					_Utils_Tuple2(
						'data',
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, data)),
					params)));
	});
var $author$project$Lia$Markdown$Chart$View$encodeFunnels = F3(
	function (title, subtitle, data) {
		var step = 100 / (2 * $elm$core$List$length(data));
		var relWidth = $elm$core$String$fromFloat(
			100 / $elm$core$List$length(data)) + '%';
		var pieces = A2(
			$elm$core$List$indexedMap,
			F2(
				function (i, x) {
					return $elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'type',
								$elm$json$Json$Encode$string('funnel')),
								_Utils_Tuple2(
								'width',
								$elm$json$Json$Encode$string(relWidth)),
								_Utils_Tuple2(
								'sort',
								$elm$json$Json$Encode$string('none')),
								_Utils_Tuple2(
								'left',
								$elm$json$Json$Encode$string(
									$elm$core$String$fromFloat((2 * i) * step) + '%')),
								_Utils_Tuple2(
								'label',
								$elm$json$Json$Encode$object(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'normal',
											$elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'formatter',
														$elm$json$Json$Encode$string('{c}')),
														_Utils_Tuple2(
														'position',
														$elm$json$Json$Encode$string('inside'))
													])))
										]))),
								_Utils_Tuple2(
								'selectedMode',
								$elm$json$Json$Encode$string('single')),
								_Utils_Tuple2(
								'data',
								A2(
									$elm$json$Json$Encode$list,
									$elm$core$Basics$identity,
									A2(
										$elm$core$List$map,
										function (_v0) {
											var name_ = _v0.a;
											var value_ = _v0.b;
											return $elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'name',
														$elm$json$Json$Encode$string(name_)),
														_Utils_Tuple2(
														'value',
														$elm$json$Json$Encode$float(value_))
													]));
										},
										x)))
							]));
				}),
			data);
		var head = ((!_Utils_eq(title, $elm$core$Maybe$Nothing)) || (!_Utils_eq(subtitle, $elm$core$Maybe$Nothing))) ? _List_fromArray(
			[
				_Utils_Tuple2(
				'title',
				A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					A2(
						$elm$core$List$cons,
						$elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'text',
									$elm$json$Json$Encode$string(
										A2($elm$core$Maybe$withDefault, '', title))),
									_Utils_Tuple2(
									'left',
									$elm$json$Json$Encode$string('center'))
								])),
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (i, sub) {
									return $elm$json$Json$Encode$object(
										_List_fromArray(
											[
												_Utils_Tuple2(
												'subtext',
												$elm$json$Json$Encode$string(sub)),
												_Utils_Tuple2(
												'bottom',
												$elm$json$Json$Encode$int(40)),
												_Utils_Tuple2(
												'textAlign',
												$elm$json$Json$Encode$string('center')),
												_Utils_Tuple2(
												'left',
												$elm$json$Json$Encode$string(
													$elm$core$String$fromFloat(((2 * i) * step) + step) + '%'))
											]));
								}),
							A2($elm$core$Maybe$withDefault, _List_Nil, subtitle)))))
			]) : _List_Nil;
		var categories = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Maybe$map,
				$elm$core$List$map($elm$core$Tuple$first),
				$elm$core$List$head(data)));
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$append,
				head,
				_List_fromArray(
					[
						_Utils_Tuple2(
						'series',
						A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, pieces)),
						A2(
						$author$project$Lia$Markdown$Chart$View$toolbox,
						$elm$core$Maybe$Nothing,
						{dataView: true, dataZoom: false, magicType: false, restore: false, saveAsImage: true}),
						A2(
						$author$project$Lia$Markdown$Chart$View$encodeLegend,
						_List_fromArray(
							[
								_Utils_Tuple2(
								'top',
								$elm$json$Json$Encode$string('30px'))
							]),
						categories),
						_Utils_Tuple2(
						'tooltip',
						$elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'trigger',
									$elm$json$Json$Encode$string('item')),
									_Utils_Tuple2(
									'formatter',
									$elm$json$Json$Encode$string('{b} : {c} ({d}%)'))
								])))
					])));
	});
var $author$project$Lia$Markdown$Chart$View$encodeFunnel = F3(
	function (labels, subtitle, data) {
		if ($elm$core$List$length(data) === 1) {
			var pieces = A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				A2(
					$elm$core$List$map,
					function (_v0) {
						var name_ = _v0.a;
						var value_ = _v0.b;
						return $elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'name',
									$elm$json$Json$Encode$string(name_)),
									_Utils_Tuple2(
									'value',
									$elm$json$Json$Encode$float(value_))
								]));
					},
					A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						$elm$core$List$head(data))));
			var head = ((!_Utils_eq(labels.main, $elm$core$Maybe$Nothing)) || (!_Utils_eq(subtitle, $elm$core$Maybe$Nothing))) ? _List_fromArray(
				[
					_Utils_Tuple2(
					'title',
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'text',
								$elm$json$Json$Encode$string(
									A2($elm$core$Maybe$withDefault, '', labels.main))),
								_Utils_Tuple2(
								'subtext',
								$elm$json$Json$Encode$string(
									A2(
										$elm$core$Maybe$withDefault,
										'',
										$elm$core$List$head(
											A2($elm$core$Maybe$withDefault, _List_Nil, subtitle))))),
								_Utils_Tuple2(
								'left',
								$elm$json$Json$Encode$string('center'))
							])))
				]) : _List_Nil;
			return $elm$json$Json$Encode$object(
				A2(
					$elm$core$List$append,
					head,
					_List_fromArray(
						[
							_Utils_Tuple2(
							'series',
							A2(
								$elm$json$Json$Encode$list,
								$elm$core$Basics$identity,
								_List_fromArray(
									[
										$elm$json$Json$Encode$object(
										_List_fromArray(
											[
												_Utils_Tuple2(
												'type',
												$elm$json$Json$Encode$string('funnel')),
												_Utils_Tuple2(
												'name',
												$elm$json$Json$Encode$string(
													A2(
														$elm$core$Maybe$withDefault,
														'',
														A2($elm$core$Maybe$andThen, $elm$core$List$head, subtitle)))),
												_Utils_Tuple2(
												'radius',
												$elm$json$Json$Encode$string(
													((!_Utils_eq(labels.main, $elm$core$Maybe$Nothing)) || (!_Utils_eq(subtitle, $elm$core$Maybe$Nothing))) ? '65%' : '75%')),
												_Utils_Tuple2(
												'center',
												$elm$json$Json$Encode$string('50%')),
												_Utils_Tuple2(
												'selectedMode',
												$elm$json$Json$Encode$string('single')),
												_Utils_Tuple2('data', pieces),
												_Utils_Tuple2(
												'sort',
												$elm$json$Json$Encode$string('none'))
											]))
									]))),
							A2(
							$author$project$Lia$Markdown$Chart$View$toolbox,
							$elm$core$Maybe$Nothing,
							{dataView: true, dataZoom: false, magicType: false, restore: false, saveAsImage: true}),
							_Utils_Tuple2(
							'tooltip',
							$elm$json$Json$Encode$object(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'trigger',
										$elm$json$Json$Encode$string('item')),
										_Utils_Tuple2(
										'formatter',
										$elm$json$Json$Encode$string('{b} : {c} ({d}%)'))
									])))
						])));
		} else {
			return A3($author$project$Lia$Markdown$Chart$View$encodeFunnels, labels.main, subtitle, data);
		}
	});
var $author$project$Lia$Markdown$Chart$View$viewFunnel = F6(
	function (_v0, attr, light, labels, subtitle, data) {
		return A4(
			$author$project$Lia$Markdown$Chart$View$eCharts,
			attr,
			light,
			$elm$core$Maybe$Nothing,
			A3($author$project$Lia$Markdown$Chart$View$encodeFunnel, labels, subtitle, data));
	});
var $author$project$Lia$Markdown$Chart$View$encodeGraph = F3(
	function (labels, nodes, edges) {
		var dict = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				function (_v4) {
					var source = _v4.a;
					var target = _v4.b;
					var val = _v4.c;
					return _Utils_Tuple2(
						_Utils_Tuple2(source, target),
						val);
				},
				edges));
		var directed = A2(
			$elm$core$List$all,
			$elm$core$Basics$identity,
			$elm$core$Dict$values(
				A2(
					$elm$core$Dict$map,
					F2(
						function (_v3, v) {
							var s = _v3.a;
							var t = _v3.b;
							return _Utils_eq(
								A2(
									$elm$core$Dict$get,
									_Utils_Tuple2(t, s),
									dict),
								$elm$core$Maybe$Just(v));
						}),
					dict)));
		var _v0 = A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2(0, 0),
			$author$project$Lia$Markdown$Chart$View$minMax(
				A2(
					$elm$core$List$map,
					function (_v1) {
						var v = _v1.c;
						return v;
					},
					edges)));
		var min = _v0.a;
		var max = _v0.b;
		var lineWidth = function (v) {
			return 1 + ((4 * $elm$core$Basics$abs(v)) / (max - min));
		};
		return $elm$json$Json$Encode$object(
			A3(
				$author$project$Lia$Markdown$Chart$View$add,
				$author$project$Lia$Markdown$Chart$View$encodeTitle(
					$elm$core$Maybe$Just(
						_Utils_Tuple2('left', 'center'))),
				labels.main,
				_List_fromArray(
					[
						A2(
						$author$project$Lia$Markdown$Chart$View$toolbox,
						$elm$core$Maybe$Nothing,
						{dataView: false, dataZoom: false, magicType: false, restore: false, saveAsImage: true}),
						_Utils_Tuple2(
						'tooltip',
						$elm$json$Json$Encode$object(_List_Nil)),
						_Utils_Tuple2(
						'series',
						A2(
							$elm$json$Json$Encode$list,
							$elm$json$Json$Encode$object,
							$elm$core$List$singleton(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'type',
										$elm$json$Json$Encode$string('graph')),
										_Utils_Tuple2(
										'layout',
										$elm$json$Json$Encode$string('force')),
										_Utils_Tuple2(
										'label',
										$elm$json$Json$Encode$object(
											_List_fromArray(
												[
													_Utils_Tuple2(
													'show',
													$elm$json$Json$Encode$bool(true))
												]))),
										_Utils_Tuple2(
										'symbolSize',
										$elm$json$Json$Encode$float(40)),
										_Utils_Tuple2(
										'roam',
										$elm$json$Json$Encode$bool(true)),
										_Utils_Tuple2(
										'animation',
										$elm$json$Json$Encode$bool(true)),
										_Utils_Tuple2(
										'edgeSymbol',
										A2(
											$elm$json$Json$Encode$list,
											$elm$json$Json$Encode$string,
											directed ? _List_Nil : _List_fromArray(
												['circle', 'arrow']))),
										_Utils_Tuple2(
										'force',
										$elm$json$Json$Encode$object(
											_List_fromArray(
												[
													_Utils_Tuple2(
													'repulsion',
													$elm$json$Json$Encode$int(300)),
													_Utils_Tuple2(
													'edgeLength',
													$elm$json$Json$Encode$int(100)),
													_Utils_Tuple2(
													'gravity',
													$elm$json$Json$Encode$float(0.1))
												]))),
										_Utils_Tuple2(
										'draggable',
										$elm$json$Json$Encode$bool(true)),
										_Utils_Tuple2(
										'data',
										A2(
											$elm$json$Json$Encode$list,
											$elm$json$Json$Encode$object,
											A2(
												$elm$core$List$map,
												function (node) {
													return _List_fromArray(
														[
															_Utils_Tuple2(
															'id',
															$elm$json$Json$Encode$string(node)),
															_Utils_Tuple2(
															'name',
															$elm$json$Json$Encode$string(node))
														]);
												},
												nodes))),
										_Utils_Tuple2(
										'edges',
										A2(
											$elm$json$Json$Encode$list,
											$elm$json$Json$Encode$object,
											A2(
												$elm$core$List$map,
												function (_v2) {
													var source = _v2.a;
													var target = _v2.b;
													var v = _v2.c;
													return _List_fromArray(
														[
															_Utils_Tuple2(
															'source',
															$elm$json$Json$Encode$string(source)),
															_Utils_Tuple2(
															'target',
															$elm$json$Json$Encode$string(target)),
															_Utils_Tuple2(
															'symbolSize',
															A2(
																$elm$json$Json$Encode$list,
																$elm$json$Json$Encode$int,
																_List_fromArray(
																	[5]))),
															_Utils_Tuple2(
															'value',
															$elm$json$Json$Encode$float(v)),
															_Utils_Tuple2(
															'lineStyle',
															$elm$json$Json$Encode$object(
																_List_fromArray(
																	[
																		_Utils_Tuple2(
																		'width',
																		$elm$json$Json$Encode$float(
																			lineWidth(v))),
																		_Utils_Tuple2(
																		'curveness',
																		$elm$json$Json$Encode$float(
																			directed ? 0 : (_Utils_eq(
																				A2(
																					$elm$core$Dict$get,
																					_Utils_Tuple2(target, source),
																					dict),
																				$elm$core$Maybe$Nothing) ? 0 : 0.25))),
																		_Utils_Tuple2(
																		'opacity',
																		$elm$json$Json$Encode$float(
																			(v > 0) ? 0.9 : 0.3))
																	])))
														]);
												},
												edges)))
									]))))
					])));
	});
var $author$project$Lia$Markdown$Chart$View$viewGraph = F5(
	function (attr, light, labels, nodes, edges) {
		return A4(
			$author$project$Lia$Markdown$Chart$View$eCharts,
			attr,
			light,
			$elm$core$Maybe$Nothing,
			A3($author$project$Lia$Markdown$Chart$View$encodeGraph, labels, nodes, edges));
	});
var $author$project$Lia$Markdown$Chart$View$encodeHeatMap = F4(
	function (labels, xLabels, yLabels, data) {
		var _v0 = A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2(0, 0),
			$author$project$Lia$Markdown$Chart$View$minMax(
				A2(
					$elm$core$List$filterMap,
					function (_v1) {
						var v = _v1.c;
						return v;
					},
					$elm$core$List$concat(data))));
		var min = _v0.a;
		var max = _v0.b;
		return $elm$json$Json$Encode$object(
			A3(
				$author$project$Lia$Markdown$Chart$View$add,
				$author$project$Lia$Markdown$Chart$View$encodeTitle(
					$elm$core$Maybe$Just(
						_Utils_Tuple2('left', 'center'))),
				labels.main,
				_List_fromArray(
					[
						A2(
						$author$project$Lia$Markdown$Chart$View$toolbox,
						$elm$core$Maybe$Just('7%'),
						{dataView: true, dataZoom: false, magicType: false, restore: false, saveAsImage: true}),
						_Utils_Tuple2(
						'tooltip',
						$elm$json$Json$Encode$object(_List_Nil)),
						_Utils_Tuple2(
						'grid',
						$elm$json$Json$Encode$object(
							_Utils_eq(labels.main, $elm$core$Maybe$Nothing) ? _List_fromArray(
								[
									_Utils_Tuple2(
									'height',
									$elm$json$Json$Encode$string('82%')),
									_Utils_Tuple2(
									'top',
									$elm$json$Json$Encode$string('0%'))
								]) : _List_fromArray(
								[
									_Utils_Tuple2(
									'height',
									$elm$json$Json$Encode$string('74%')),
									_Utils_Tuple2(
									'top',
									$elm$json$Json$Encode$string('7%'))
								]))),
						A4($author$project$Lia$Markdown$Chart$View$xAxis, $elm$core$Maybe$Nothing, 'category', labels.x, xLabels),
						A3($author$project$Lia$Markdown$Chart$View$yAxis, 'category', labels.y, yLabels),
						_Utils_Tuple2(
						'visualMap',
						$elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'min',
									$elm$json$Json$Encode$float(min)),
									_Utils_Tuple2(
									'max',
									$elm$json$Json$Encode$float(max)),
									_Utils_Tuple2(
									'calculable',
									$elm$json$Json$Encode$bool(true)),
									_Utils_Tuple2(
									'itemHeight',
									$elm$json$Json$Encode$string('150px')),
									_Utils_Tuple2(
									'right',
									$elm$json$Json$Encode$string('7%')),
									_Utils_Tuple2(
									'bottom',
									$elm$json$Json$Encode$string('9')),
									_Utils_Tuple2(
									'orient',
									$elm$json$Json$Encode$string('horizontal'))
								]))),
						_Utils_Tuple2(
						'series',
						A2(
							$elm$json$Json$Encode$list,
							$elm$core$Basics$identity,
							_List_fromArray(
								[
									$elm$json$Json$Encode$object(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'type',
											$elm$json$Json$Encode$string('heatmap')),
											_Utils_Tuple2(
											'label',
											$elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'show',
														$elm$json$Json$Encode$bool(true))
													]))),
											_Utils_Tuple2(
											'data',
											A2(
												$elm$json$Json$Encode$list,
												$elm$core$Basics$identity,
												A2(
													$elm$core$List$map,
													function (_v2) {
														var x = _v2.a;
														var y = _v2.b;
														var z = _v2.c;
														return A2(
															$elm$json$Json$Encode$list,
															$elm$core$Basics$identity,
															_List_fromArray(
																[
																	$elm$json$Json$Encode$int(x),
																	$elm$json$Json$Encode$int(y),
																	A2(
																	$elm$core$Maybe$withDefault,
																	$elm$json$Json$Encode$null,
																	A2($elm$core$Maybe$map, $elm$json$Json$Encode$float, z))
																]));
													},
													$elm$core$List$concat(data)))),
											_Utils_Tuple2(
											'emphasis',
											$elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'itemStyle',
														$elm$json$Json$Encode$object(
															_List_fromArray(
																[
																	_Utils_Tuple2(
																	'shadowBlur',
																	$elm$json$Json$Encode$int(10)),
																	_Utils_Tuple2(
																	'shadowColor',
																	$elm$json$Json$Encode$string('rgba(0, 0, 0, 0.5)'))
																])))
													])))
										]))
								])))
					])));
	});
var $author$project$Lia$Markdown$Chart$View$viewHeatMap = F6(
	function (attr, light, labels, x, y, data) {
		return A4(
			$author$project$Lia$Markdown$Chart$View$eCharts,
			attr,
			light,
			$elm$core$Maybe$Nothing,
			A4($author$project$Lia$Markdown$Chart$View$encodeHeatMap, labels, x, y, data));
	});
var $author$project$Lia$Markdown$Chart$View$encodeBasic = F4(
	function (type_, labels, category, data) {
		return $elm$json$Json$Encode$object(
			A3(
				$author$project$Lia$Markdown$Chart$View$add,
				$author$project$Lia$Markdown$Chart$View$encodeTitle($elm$core$Maybe$Nothing),
				labels.main,
				_List_fromArray(
					[
						A4($author$project$Lia$Markdown$Chart$View$xAxis, $elm$core$Maybe$Nothing, 'category', labels.x, category),
						A3($author$project$Lia$Markdown$Chart$View$yAxis, 'value', labels.y, _List_Nil),
						$author$project$Lia$Markdown$Chart$View$grid,
						A2(
						$author$project$Lia$Markdown$Chart$View$encodeLegend,
						_List_fromArray(
							[
								_Utils_Tuple2(
								'top',
								$elm$json$Json$Encode$string('30px'))
							]),
						A2($elm$core$List$map, $elm$core$Tuple$first, data)),
						_Utils_Tuple2(
						'tooltip',
						$elm$json$Json$Encode$object(_List_Nil)),
						A2(
						$author$project$Lia$Markdown$Chart$View$toolbox,
						$elm$core$Maybe$Nothing,
						{dataView: true, dataZoom: true, magicType: true, restore: false, saveAsImage: true}),
						_Utils_Tuple2(
						'series',
						A2(
							$elm$json$Json$Encode$list,
							function (_v0) {
								var name_ = _v0.a;
								var values = _v0.b;
								return $elm$json$Json$Encode$object(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'name',
											$elm$json$Json$Encode$string(name_)),
											_Utils_Tuple2(
											'type',
											$elm$json$Json$Encode$string(type_)),
											_Utils_Tuple2(
											'data',
											A2(
												$elm$json$Json$Encode$list,
												A2(
													$elm$core$Basics$composeR,
													$elm$core$Maybe$map($elm$json$Json$Encode$float),
													$elm$core$Maybe$withDefault($elm$json$Json$Encode$null)),
												values))
										]));
							},
							data))
					])));
	});
var $author$project$Lia$Markdown$Chart$View$viewLines = F5(
	function (attr, light, labels, category, data) {
		return A4(
			$author$project$Lia$Markdown$Chart$View$eCharts,
			attr,
			light,
			$elm$core$Maybe$Nothing,
			A4($author$project$Lia$Markdown$Chart$View$encodeBasic, 'line', labels, category, data));
	});
var $author$project$Lia$Markdown$Chart$View$encodeMapChart = F3(
	function (labels, data, json) {
		var _v0 = A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2(0, 0),
			$author$project$Lia$Markdown$Chart$View$minMax(
				A2($elm$core$List$filterMap, $elm$core$Tuple$second, data)));
		var min = _v0.a;
		var max = _v0.b;
		return $elm$json$Json$Encode$object(
			A3(
				$author$project$Lia$Markdown$Chart$View$add,
				$author$project$Lia$Markdown$Chart$View$encodeTitle($elm$core$Maybe$Nothing),
				labels.main,
				_List_fromArray(
					[
						_Utils_Tuple2(
						'series',
						A2(
							$elm$json$Json$Encode$list,
							$elm$core$Basics$identity,
							_List_fromArray(
								[
									$elm$json$Json$Encode$object(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'type',
											$elm$json$Json$Encode$string('map')),
											_Utils_Tuple2(
											'map',
											$elm$json$Json$Encode$string(
												A2($elm$core$Maybe$withDefault, '', json))),
											_Utils_Tuple2(
											'roam',
											$elm$json$Json$Encode$bool(true)),
											_Utils_Tuple2(
											'name',
											$elm$json$Json$Encode$string(
												A2($elm$core$Maybe$withDefault, 'data', labels.y))),
											_Utils_Tuple2(
											'data',
											A2(
												$elm$json$Json$Encode$list,
												$elm$core$Basics$identity,
												A2(
													$elm$core$List$filterMap,
													function (_v1) {
														var key = _v1.a;
														var value = _v1.b;
														if (value.$ === 'Just') {
															var num = value.a;
															return $elm$core$Maybe$Just(
																$elm$json$Json$Encode$object(
																	_List_fromArray(
																		[
																			_Utils_Tuple2(
																			'name',
																			$elm$json$Json$Encode$string(key)),
																			_Utils_Tuple2(
																			'value',
																			$elm$json$Json$Encode$float(num))
																		])));
														} else {
															return $elm$core$Maybe$Nothing;
														}
													},
													data)))
										]))
								]))),
						_Utils_Tuple2(
						'visualMap',
						$elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'min',
									$elm$json$Json$Encode$float(min)),
									_Utils_Tuple2(
									'max',
									$elm$json$Json$Encode$float(max)),
									_Utils_Tuple2(
									'calculable',
									$elm$json$Json$Encode$bool(true)),
									_Utils_Tuple2(
									'itemHeight',
									$elm$json$Json$Encode$string('150px')),
									_Utils_Tuple2(
									'right',
									$elm$json$Json$Encode$string('0')),
									_Utils_Tuple2(
									'bottom',
									$elm$json$Json$Encode$string('center')),
									_Utils_Tuple2(
									'orient',
									$elm$json$Json$Encode$string('vertical'))
								]))),
						$author$project$Lia$Markdown$Chart$View$grid,
						A2(
						$author$project$Lia$Markdown$Chart$View$toolbox,
						$elm$core$Maybe$Nothing,
						{dataView: true, dataZoom: false, magicType: false, restore: true, saveAsImage: true}),
						_Utils_Tuple2(
						'tooltip',
						$elm$json$Json$Encode$object(_List_Nil))
					])));
	});
var $author$project$Lia$Markdown$Chart$View$viewMapChart = F5(
	function (attr, light, labels, data, json) {
		return A4(
			$author$project$Lia$Markdown$Chart$View$eCharts,
			attr,
			light,
			json,
			A3($author$project$Lia$Markdown$Chart$View$encodeMapChart, labels, data, json));
	});
var $author$project$Lia$Markdown$Chart$View$encodeParallel = F3(
	function (labels, category, data) {
		return $elm$json$Json$Encode$object(
			A3(
				$author$project$Lia$Markdown$Chart$View$add,
				$author$project$Lia$Markdown$Chart$View$encodeTitle($elm$core$Maybe$Nothing),
				labels.main,
				_List_fromArray(
					[
						_Utils_Tuple2(
						'parallelAxis',
						A2(
							$elm$json$Json$Encode$list,
							$elm$json$Json$Encode$object,
							A2(
								$elm$core$List$indexedMap,
								F2(
									function (i, cat) {
										return _List_fromArray(
											[
												_Utils_Tuple2(
												'dim',
												$elm$json$Json$Encode$int(i)),
												_Utils_Tuple2(
												'name',
												$elm$json$Json$Encode$string(cat))
											]);
									}),
								category))),
						_Utils_Tuple2(
						'parallel',
						$elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'axisExpandable',
									$elm$json$Json$Encode$bool(true)),
									_Utils_Tuple2(
									'axisExpandCenter',
									$elm$json$Json$Encode$int(15)),
									_Utils_Tuple2(
									'axisExpandCount',
									$elm$json$Json$Encode$int(10)),
									_Utils_Tuple2(
									'axisExpandWidth',
									$elm$json$Json$Encode$int(100)),
									_Utils_Tuple2(
									'axisExpandTriggerOn',
									$elm$json$Json$Encode$string('mousemove'))
								]))),
						_Utils_Tuple2(
						'series',
						$elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'type',
									$elm$json$Json$Encode$string('parallel')),
									_Utils_Tuple2(
									'data',
									A2(
										$elm$json$Json$Encode$list,
										$elm$core$Basics$identity,
										A2(
											$elm$core$List$map,
											A2(
												$elm$core$Basics$composeR,
												$elm$core$List$map(
													A2(
														$elm$core$Basics$composeR,
														$elm$core$Maybe$map($elm$json$Json$Encode$float),
														$elm$core$Maybe$withDefault($elm$json$Json$Encode$null))),
												$elm$json$Json$Encode$list($elm$core$Basics$identity)),
											data)))
								]))),
						A2(
						$author$project$Lia$Markdown$Chart$View$toolbox,
						$elm$core$Maybe$Nothing,
						{dataView: true, dataZoom: false, magicType: false, restore: false, saveAsImage: true}),
						_Utils_Tuple2(
						'tooltip',
						$elm$json$Json$Encode$object(_List_Nil))
					])));
	});
var $author$project$Lia$Markdown$Chart$View$viewParallel = F5(
	function (attr, light, labels, category, data) {
		return A4(
			$author$project$Lia$Markdown$Chart$View$eCharts,
			attr,
			light,
			$elm$core$Maybe$Nothing,
			A3($author$project$Lia$Markdown$Chart$View$encodeParallel, labels, category, data));
	});
var $author$project$Lia$Markdown$Chart$View$encodePieCharts = F4(
	function (width, title, subtitle, data) {
		var step = 100 / (2 * $elm$core$List$length(data));
		var relWidth = $elm$core$String$fromFloat(
			function (w) {
				return (w > 70) ? 70 : w;
			}(
				width / (6.1 * $elm$core$List$length(data)))) + '%';
		var pieces = A2(
			$elm$core$List$indexedMap,
			F2(
				function (i, x) {
					return $elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'type',
								$elm$json$Json$Encode$string('pie')),
								_Utils_Tuple2(
								'radius',
								$elm$json$Json$Encode$string(relWidth)),
								_Utils_Tuple2(
								'center',
								A2(
									$elm$json$Json$Encode$list,
									$elm$json$Json$Encode$string,
									_List_fromArray(
										[
											$elm$core$String$fromFloat(((2 * i) * step) + step) + '%',
											'50%'
										]))),
								_Utils_Tuple2(
								'label',
								$elm$json$Json$Encode$object(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'normal',
											$elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'formatter',
														$elm$json$Json$Encode$string('{c}')),
														_Utils_Tuple2(
														'position',
														$elm$json$Json$Encode$string('inside'))
													])))
										]))),
								_Utils_Tuple2(
								'selectedMode',
								$elm$json$Json$Encode$string('single')),
								_Utils_Tuple2(
								'data',
								A2(
									$elm$json$Json$Encode$list,
									$elm$core$Basics$identity,
									A2(
										$elm$core$List$map,
										function (_v0) {
											var name_ = _v0.a;
											var value_ = _v0.b;
											return $elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'name',
														$elm$json$Json$Encode$string(name_)),
														_Utils_Tuple2(
														'value',
														$elm$json$Json$Encode$float(value_))
													]));
										},
										x)))
							]));
				}),
			data);
		var head = ((!_Utils_eq(title, $elm$core$Maybe$Nothing)) || (!_Utils_eq(subtitle, $elm$core$Maybe$Nothing))) ? _List_fromArray(
			[
				_Utils_Tuple2(
				'title',
				A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					A2(
						$elm$core$List$cons,
						$elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'text',
									$elm$json$Json$Encode$string(
										A2($elm$core$Maybe$withDefault, '', title))),
									_Utils_Tuple2(
									'left',
									$elm$json$Json$Encode$string('center'))
								])),
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (i, sub) {
									return $elm$json$Json$Encode$object(
										_List_fromArray(
											[
												_Utils_Tuple2(
												'subtext',
												$elm$json$Json$Encode$string(sub)),
												_Utils_Tuple2(
												'bottom',
												$elm$json$Json$Encode$int(40)),
												_Utils_Tuple2(
												'textAlign',
												$elm$json$Json$Encode$string('center')),
												_Utils_Tuple2(
												'left',
												$elm$json$Json$Encode$string(
													$elm$core$String$fromFloat(((2 * i) * step) + step) + '%'))
											]));
								}),
							A2($elm$core$Maybe$withDefault, _List_Nil, subtitle)))))
			]) : _List_Nil;
		var categories = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Maybe$map,
				$elm$core$List$map($elm$core$Tuple$first),
				$elm$core$List$head(data)));
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$append,
				head,
				_List_fromArray(
					[
						_Utils_Tuple2(
						'series',
						A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, pieces)),
						A2(
						$author$project$Lia$Markdown$Chart$View$toolbox,
						$elm$core$Maybe$Nothing,
						{dataView: true, dataZoom: false, magicType: false, restore: false, saveAsImage: true}),
						A2(
						$author$project$Lia$Markdown$Chart$View$encodeLegend,
						_List_fromArray(
							[
								_Utils_Tuple2(
								'top',
								$elm$json$Json$Encode$string('30px'))
							]),
						categories),
						_Utils_Tuple2(
						'tooltip',
						$elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'trigger',
									$elm$json$Json$Encode$string('item')),
									_Utils_Tuple2(
									'formatter',
									$elm$json$Json$Encode$string('{b} : {c} ({d}%)'))
								])))
					])));
	});
var $author$project$Lia$Markdown$Chart$View$encodePieChart = F4(
	function (width, labels, subtitle, data) {
		if ($elm$core$List$length(data) === 1) {
			var pieces = A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				A2(
					$elm$core$List$map,
					function (_v0) {
						var name_ = _v0.a;
						var value_ = _v0.b;
						return $elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'name',
									$elm$json$Json$Encode$string(name_)),
									_Utils_Tuple2(
									'value',
									$elm$json$Json$Encode$float(value_))
								]));
					},
					A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						$elm$core$List$head(data))));
			var head = ((!_Utils_eq(labels.main, $elm$core$Maybe$Nothing)) || (!_Utils_eq(subtitle, $elm$core$Maybe$Nothing))) ? _List_fromArray(
				[
					_Utils_Tuple2(
					'title',
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'text',
								$elm$json$Json$Encode$string(
									A2($elm$core$Maybe$withDefault, '', labels.main))),
								_Utils_Tuple2(
								'subtext',
								$elm$json$Json$Encode$string(
									A2(
										$elm$core$Maybe$withDefault,
										'',
										$elm$core$List$head(
											A2($elm$core$Maybe$withDefault, _List_Nil, subtitle))))),
								_Utils_Tuple2(
								'left',
								$elm$json$Json$Encode$string('center'))
							])))
				]) : _List_Nil;
			return $elm$json$Json$Encode$object(
				A2(
					$elm$core$List$append,
					head,
					_List_fromArray(
						[
							_Utils_Tuple2(
							'series',
							A2(
								$elm$json$Json$Encode$list,
								$elm$core$Basics$identity,
								_List_fromArray(
									[
										$elm$json$Json$Encode$object(
										_List_fromArray(
											[
												_Utils_Tuple2(
												'type',
												$elm$json$Json$Encode$string('pie')),
												_Utils_Tuple2(
												'name',
												$elm$json$Json$Encode$string(
													A2(
														$elm$core$Maybe$withDefault,
														'',
														A2($elm$core$Maybe$andThen, $elm$core$List$head, subtitle)))),
												_Utils_Tuple2(
												'radius',
												$elm$json$Json$Encode$string(
													((!_Utils_eq(labels.main, $elm$core$Maybe$Nothing)) || (!_Utils_eq(subtitle, $elm$core$Maybe$Nothing))) ? '65%' : '75%')),
												_Utils_Tuple2(
												'center',
												$elm$json$Json$Encode$string('50%')),
												_Utils_Tuple2(
												'selectedMode',
												$elm$json$Json$Encode$string('single')),
												_Utils_Tuple2('data', pieces)
											]))
									]))),
							A2(
							$author$project$Lia$Markdown$Chart$View$toolbox,
							$elm$core$Maybe$Nothing,
							{dataView: true, dataZoom: false, magicType: false, restore: false, saveAsImage: true}),
							_Utils_Tuple2(
							'tooltip',
							$elm$json$Json$Encode$object(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'trigger',
										$elm$json$Json$Encode$string('item')),
										_Utils_Tuple2(
										'formatter',
										$elm$json$Json$Encode$string('{b} : {c} ({d}%)'))
									])))
						])));
		} else {
			return A4($author$project$Lia$Markdown$Chart$View$encodePieCharts, width, labels.main, subtitle, data);
		}
	});
var $author$project$Lia$Markdown$Chart$View$viewPieChart = F6(
	function (width, attr, light, labels, subtitle, data) {
		return A4(
			$author$project$Lia$Markdown$Chart$View$eCharts,
			attr,
			light,
			$elm$core$Maybe$Nothing,
			A4($author$project$Lia$Markdown$Chart$View$encodePieChart, width, labels, subtitle, data));
	});
var $author$project$Lia$Markdown$Chart$View$viewPoints = F5(
	function (attr, light, labels, category, data) {
		return A4(
			$author$project$Lia$Markdown$Chart$View$eCharts,
			attr,
			light,
			$elm$core$Maybe$Nothing,
			A4($author$project$Lia$Markdown$Chart$View$encodeBasic, 'scatter', labels, category, data));
	});
var $author$project$Lia$Markdown$Chart$View$calcMax = $elm$core$List$map2(
	F2(
		function (i, d) {
			var value = A2($elm$core$Maybe$withDefault, 0, d);
			return (_Utils_cmp(value, i.max) > 0) ? _Utils_update(
				i,
				{max: value}) : i;
		}));
var $author$project$Lia$Markdown$Chart$View$encodeRadarChart = F3(
	function (labels, category, data) {
		var values = A2(
			$elm$json$Json$Encode$list,
			$elm$json$Json$Encode$object,
			A2(
				$elm$core$List$map,
				function (_v0) {
					var name_ = _v0.a;
					var value = _v0.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'name',
							$elm$json$Json$Encode$string(name_)),
							_Utils_Tuple2(
							'value',
							A2(
								$elm$json$Json$Encode$list,
								$elm$core$Basics$identity,
								A2(
									$elm$core$List$map,
									A2(
										$elm$core$Basics$composeR,
										$elm$core$Maybe$withDefault(0),
										$elm$json$Json$Encode$float),
									value)))
						]);
				},
				data));
		var max_ = A2(
			$elm$core$List$map,
			function (c) {
				return {max: 0, name: c};
			},
			category);
		var indicator = A2(
			$elm$json$Json$Encode$list,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$map,
				function (i) {
					return $elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'name',
								$elm$json$Json$Encode$string(i.name)),
								_Utils_Tuple2(
								'max',
								$elm$json$Json$Encode$float(i.max))
							]));
				},
				A3(
					$elm$core$List$foldl,
					F2(
						function (d, i) {
							return A2($author$project$Lia$Markdown$Chart$View$calcMax, i, d);
						}),
					max_,
					A2($elm$core$List$map, $elm$core$Tuple$second, data))));
		return $elm$json$Json$Encode$object(
			A3(
				$author$project$Lia$Markdown$Chart$View$add,
				$author$project$Lia$Markdown$Chart$View$encodeTitle($elm$core$Maybe$Nothing),
				labels.main,
				_List_fromArray(
					[
						_Utils_Tuple2(
						'radar',
						$elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2('indicator', indicator),
									_Utils_Tuple2(
									'axisName',
									$elm$json$Json$Encode$object(
										_List_fromArray(
											[
												_Utils_Tuple2(
												'color',
												$elm$json$Json$Encode$string('#fff')),
												_Utils_Tuple2(
												'backgroundColor',
												$elm$json$Json$Encode$string('#999')),
												_Utils_Tuple2(
												'borderRadius',
												$elm$json$Json$Encode$int(3)),
												_Utils_Tuple2(
												'padding',
												A2(
													$elm$json$Json$Encode$list,
													$elm$json$Json$Encode$int,
													_List_fromArray(
														[3, 5])))
											])))
								]))),
						A2(
						$author$project$Lia$Markdown$Chart$View$toolbox,
						$elm$core$Maybe$Nothing,
						{dataView: true, dataZoom: false, magicType: false, restore: false, saveAsImage: true}),
						_Utils_Tuple2(
						'tooltip',
						$elm$json$Json$Encode$object(_List_Nil)),
						_Utils_Tuple2(
						'series',
						A2(
							$elm$json$Json$Encode$list,
							$elm$json$Json$Encode$object,
							_List_fromArray(
								[
									_List_fromArray(
									[
										_Utils_Tuple2(
										'type',
										$elm$json$Json$Encode$string('radar')),
										_Utils_Tuple2('data', values),
										_Utils_Tuple2(
										'emphasis',
										$elm$json$Json$Encode$object(
											_List_fromArray(
												[
													_Utils_Tuple2(
													'lineStyle',
													$elm$json$Json$Encode$object(
														_List_fromArray(
															[
																_Utils_Tuple2(
																'width',
																$elm$json$Json$Encode$int(4))
															])))
												])))
									])
								])))
					])));
	});
var $author$project$Lia$Markdown$Chart$View$viewRadarChart = F5(
	function (attr, light, labels, category, data) {
		return A4(
			$author$project$Lia$Markdown$Chart$View$eCharts,
			attr,
			light,
			$elm$core$Maybe$Nothing,
			A3($author$project$Lia$Markdown$Chart$View$encodeRadarChart, labels, category, data));
	});
var $author$project$Lia$Markdown$Chart$View$encodeSankey = F3(
	function (labels, nodes, edges) {
		var dict = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				function (_v4) {
					var source = _v4.a;
					var target = _v4.b;
					var val = _v4.c;
					return _Utils_Tuple2(
						_Utils_Tuple2(source, target),
						val);
				},
				edges));
		var cleared = $elm$core$Dict$toList(
			A3(
				$elm$core$List$foldl,
				F2(
					function (_v2, d) {
						var _v3 = _v2.a;
						var s = _v3.a;
						var t = _v3.b;
						return (!_Utils_eq(
							A2(
								$elm$core$Dict$get,
								_Utils_Tuple2(t, s),
								d),
							$elm$core$Maybe$Nothing)) ? A2(
							$elm$core$Dict$remove,
							_Utils_Tuple2(t, s),
							d) : d;
					}),
				dict,
				$elm$core$Dict$toList(dict)));
		return $elm$json$Json$Encode$object(
			A3(
				$author$project$Lia$Markdown$Chart$View$add,
				$author$project$Lia$Markdown$Chart$View$encodeTitle(
					$elm$core$Maybe$Just(
						_Utils_Tuple2('left', 'center'))),
				labels.main,
				_List_fromArray(
					[
						A2(
						$author$project$Lia$Markdown$Chart$View$toolbox,
						$elm$core$Maybe$Nothing,
						{dataView: false, dataZoom: false, magicType: false, restore: false, saveAsImage: true}),
						_Utils_Tuple2(
						'tooltip',
						$elm$json$Json$Encode$object(_List_Nil)),
						_Utils_Tuple2(
						'height',
						$elm$json$Json$Encode$string('80%')),
						_Utils_Tuple2(
						'width',
						$elm$json$Json$Encode$string('90%')),
						_Utils_Tuple2(
						'series',
						A2(
							$elm$json$Json$Encode$list,
							$elm$json$Json$Encode$object,
							$elm$core$List$singleton(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'type',
										$elm$json$Json$Encode$string('sankey')),
										_Utils_Tuple2(
										'layout',
										$elm$json$Json$Encode$string('none')),
										_Utils_Tuple2(
										'focusNodeAdjacency',
										$elm$json$Json$Encode$string('allEdges')),
										_Utils_Tuple2(
										'animation',
										$elm$json$Json$Encode$bool(true)),
										_Utils_Tuple2(
										'data',
										A2(
											$elm$json$Json$Encode$list,
											$elm$json$Json$Encode$object,
											A2(
												$elm$core$List$map,
												function (node) {
													return _List_fromArray(
														[
															_Utils_Tuple2(
															'name',
															$elm$json$Json$Encode$string(node))
														]);
												},
												nodes))),
										_Utils_Tuple2(
										'edges',
										A2(
											$elm$json$Json$Encode$list,
											$elm$json$Json$Encode$object,
											A2(
												$elm$core$List$map,
												function (_v0) {
													var _v1 = _v0.a;
													var source = _v1.a;
													var target = _v1.b;
													var v = _v0.b;
													return _List_fromArray(
														[
															_Utils_Tuple2(
															'source',
															$elm$json$Json$Encode$string(source)),
															_Utils_Tuple2(
															'target',
															$elm$json$Json$Encode$string(target)),
															_Utils_Tuple2(
															'value',
															$elm$json$Json$Encode$float(v))
														]);
												},
												cleared))),
										_Utils_Tuple2(
										'lineStyle',
										$elm$json$Json$Encode$object(
											_List_fromArray(
												[
													_Utils_Tuple2(
													'color',
													$elm$json$Json$Encode$string('source'))
												])))
									]))))
					])));
	});
var $author$project$Lia$Markdown$Chart$View$viewSankey = F5(
	function (attr, light, labels, nodes, edges) {
		return A4(
			$author$project$Lia$Markdown$Chart$View$eCharts,
			attr,
			light,
			$elm$core$Maybe$Nothing,
			A3($author$project$Lia$Markdown$Chart$View$encodeSankey, labels, nodes, edges));
	});
var $author$project$Lia$Markdown$Table$View$chart = F6(
	function (width, isFormated, attr, mode, _class, matrix) {
		var _v0 = $author$project$Lia$Markdown$Table$Matrix$split(matrix);
		var head = _v0.a;
		var body = _v0.b;
		var labels = A2($author$project$Lia$Markdown$Table$View$getLabels, attr, head);
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					function () {
					switch (_class.$) {
						case 'BarChart':
							var category = A2(
								$elm$core$List$map,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$List$head,
									A2(
										$elm$core$Basics$composeR,
										$elm$core$Maybe$map(
											function ($) {
												return $.string;
											}),
										$elm$core$Maybe$withDefault(''))),
								body);
							return A5(
								$author$project$Lia$Markdown$Chart$View$viewBarChart,
								attr,
								mode,
								labels,
								category,
								A2(
									$elm$core$List$map,
									function (row) {
										return _Utils_Tuple2(
											A2(
												$elm$core$Maybe$map,
												function ($) {
													return $.string;
												},
												$elm$core$List$head(row)),
											A2(
												$elm$core$Maybe$withDefault,
												_List_Nil,
												A2(
													$elm$core$Maybe$map,
													$elm$core$List$map(
														function ($) {
															return $._float;
														}),
													$elm$core$List$tail(row))));
									},
									$author$project$Lia$Markdown$Table$Matrix$tail(
										$author$project$Lia$Markdown$Table$Matrix$transpose(matrix))));
						case 'PieChart':
							if (A2(
								$elm$core$Maybe$withDefault,
								false,
								A2(
									$elm$core$Maybe$map,
									$elm$core$List$all($author$project$Lia$Markdown$Table$Types$isNumber),
									A2($author$project$Lia$Markdown$Table$Matrix$column, 0, body)))) {
								return A6(
									$author$project$Lia$Markdown$Chart$View$viewPieChart,
									width,
									attr,
									mode,
									labels,
									$elm$core$Maybe$Nothing,
									A2(
										$elm$core$List$map,
										A2(
											$elm$core$Basics$composeR,
											A2(
												$elm$core$List$map2,
												function (category) {
													return $elm$core$Maybe$map(
														$elm$core$Tuple$pair(category.string));
												},
												head),
											$elm$core$List$filterMap($elm$core$Basics$identity)),
										A2(
											$author$project$Lia$Markdown$Table$Matrix$map,
											function ($) {
												return $._float;
											},
											body)));
							} else {
								var sub = A2(
									$elm$core$Maybe$map,
									$elm$core$List$map(
										function ($) {
											return $.string;
										}),
									A2($author$project$Lia$Markdown$Table$Matrix$column, 0, body));
								var data = A2(
									$elm$core$List$filterMap,
									$elm$core$List$tail,
									A2(
										$author$project$Lia$Markdown$Table$Matrix$map,
										function ($) {
											return $._float;
										},
										body));
								var category = A2(
									$elm$core$List$map,
									function ($) {
										return $.string;
									},
									A2(
										$elm$core$Maybe$withDefault,
										_List_Nil,
										$elm$core$List$tail(head)));
								return A6(
									$author$project$Lia$Markdown$Chart$View$viewPieChart,
									width,
									attr,
									mode,
									labels,
									sub,
									A2(
										$elm$core$List$map,
										A2(
											$elm$core$Basics$composeR,
											A2(
												$elm$core$List$map2,
												function (c) {
													return $elm$core$Maybe$map(
														$elm$core$Tuple$pair(c));
												},
												category),
											$elm$core$List$filterMap($elm$core$Basics$identity)),
										data));
							}
						case 'Funnel':
							if (A2(
								$elm$core$Maybe$withDefault,
								false,
								A2(
									$elm$core$Maybe$map,
									$elm$core$List$all($author$project$Lia$Markdown$Table$Types$isNumber),
									A2($author$project$Lia$Markdown$Table$Matrix$column, 0, body)))) {
								return A6(
									$author$project$Lia$Markdown$Chart$View$viewFunnel,
									width,
									attr,
									mode,
									labels,
									$elm$core$Maybe$Nothing,
									A2(
										$elm$core$List$map,
										A2(
											$elm$core$Basics$composeR,
											A2(
												$elm$core$List$map2,
												function (category) {
													return $elm$core$Maybe$map(
														$elm$core$Tuple$pair(category.string));
												},
												head),
											$elm$core$List$filterMap($elm$core$Basics$identity)),
										A2(
											$author$project$Lia$Markdown$Table$Matrix$map,
											function ($) {
												return $._float;
											},
											body)));
							} else {
								var sub = A2(
									$elm$core$Maybe$map,
									$elm$core$List$map(
										function ($) {
											return $.string;
										}),
									A2($author$project$Lia$Markdown$Table$Matrix$column, 0, body));
								var data = A2(
									$elm$core$List$filterMap,
									$elm$core$List$tail,
									A2(
										$author$project$Lia$Markdown$Table$Matrix$map,
										function ($) {
											return $._float;
										},
										body));
								var category = A2(
									$elm$core$List$map,
									function ($) {
										return $.string;
									},
									A2(
										$elm$core$Maybe$withDefault,
										_List_Nil,
										$elm$core$List$tail(head)));
								return A6(
									$author$project$Lia$Markdown$Chart$View$viewFunnel,
									width,
									attr,
									mode,
									labels,
									sub,
									A2(
										$elm$core$List$map,
										A2(
											$elm$core$Basics$composeR,
											A2(
												$elm$core$List$map2,
												function (c) {
													return $elm$core$Maybe$map(
														$elm$core$Tuple$pair(c));
												},
												category),
											$elm$core$List$filterMap($elm$core$Basics$identity)),
										data));
							}
						case 'HeatMap':
							var y = A2(
								$elm$core$List$map,
								function ($) {
									return $.string;
								},
								A2(
									$elm$core$Maybe$withDefault,
									_List_Nil,
									A2($author$project$Lia$Markdown$Table$Matrix$column, 0, body)));
							var x = $elm$core$List$reverse(
								A2(
									$elm$core$List$map,
									function ($) {
										return $.string;
									},
									A2(
										$elm$core$Maybe$withDefault,
										_List_Nil,
										$elm$core$List$tail(head))));
							return A6(
								$author$project$Lia$Markdown$Chart$View$viewHeatMap,
								attr,
								mode,
								labels,
								y,
								x,
								A2(
									$elm$core$List$indexedMap,
									F2(
										function (y_, row) {
											return A2(
												$elm$core$List$indexedMap,
												F2(
													function (x_, cell) {
														return _Utils_Tuple3(x_, y_, cell._float);
													}),
												row);
										}),
									$author$project$Lia$Markdown$Table$Matrix$tail(
										$author$project$Lia$Markdown$Table$Matrix$transpose(body))));
						case 'Radar':
							var categories = A2(
								$elm$core$Maybe$withDefault,
								_List_Nil,
								A2(
									$elm$core$Maybe$map,
									$elm$core$List$map(
										function ($) {
											return $.string;
										}),
									$elm$core$List$tail(head)));
							return A5(
								$author$project$Lia$Markdown$Chart$View$viewRadarChart,
								attr,
								mode,
								labels,
								categories,
								A2(
									$elm$core$List$map,
									function (row) {
										return _Utils_Tuple2(
											A2(
												$elm$core$Maybe$withDefault,
												'',
												A2(
													$elm$core$Maybe$map,
													function ($) {
														return $.string;
													},
													$elm$core$List$head(row))),
											A2(
												$elm$core$Maybe$withDefault,
												_List_Nil,
												A2(
													$elm$core$Maybe$map,
													$elm$core$List$map(
														function ($) {
															return $._float;
														}),
													$elm$core$List$tail(row))));
									},
									body));
						case 'Parallel':
							var category = A2(
								$elm$core$List$map,
								function ($) {
									return $.string;
								},
								A2(
									$elm$core$Maybe$withDefault,
									_List_Nil,
									$elm$core$List$tail(head)));
							return A5(
								$author$project$Lia$Markdown$Chart$View$viewParallel,
								attr,
								mode,
								labels,
								category,
								$author$project$Lia$Markdown$Table$Matrix$transpose(
									A2(
										$author$project$Lia$Markdown$Table$Matrix$map,
										function ($) {
											return $._float;
										},
										$author$project$Lia$Markdown$Table$Matrix$tail(
											$author$project$Lia$Markdown$Table$Matrix$transpose(body)))));
						case 'BoxPlot':
							return A5(
								$author$project$Lia$Markdown$Chart$View$viewBoxPlot,
								attr,
								mode,
								labels,
								A2(
									$elm$core$List$map,
									function ($) {
										return $.string;
									},
									head),
								$author$project$Lia$Markdown$Table$Matrix$transpose(
									A2(
										$author$project$Lia$Markdown$Table$Matrix$map,
										function ($) {
											return $._float;
										},
										body)));
						case 'Graph':
							var nodesB = A2(
								$elm$core$List$map,
								function ($) {
									return $.string;
								},
								A2(
									$elm$core$Maybe$withDefault,
									_List_Nil,
									A2($author$project$Lia$Markdown$Table$Matrix$column, 0, body)));
							var nodesA = A2(
								$elm$core$List$map,
								function ($) {
									return $.string;
								},
								A2(
									$elm$core$Maybe$withDefault,
									_List_Nil,
									$elm$core$List$tail(head)));
							var nodes = A2(
								$elm$core$List$filter,
								$elm$core$Basics$neq(''),
								$elm$core$Set$toList(
									$elm$core$Set$fromList(
										_Utils_ap(nodesA, nodesB))));
							return A5(
								$author$project$Lia$Markdown$Chart$View$viewGraph,
								attr,
								mode,
								labels,
								nodes,
								A2(
									$elm$core$List$filter,
									function (_v4) {
										var a = _v4.a;
										var b = _v4.b;
										return (a !== '') || (b !== '');
									},
									A2(
										$elm$core$List$filterMap,
										$elm$core$Basics$identity,
										A2(
											$elm$core$List$concatMap,
											function (row) {
												if (!row.b) {
													return _List_Nil;
												} else {
													var b = row.a;
													var values = row.b;
													return A3(
														$elm$core$List$map2,
														F2(
															function (a, v) {
																var _v3 = v._float;
																if (_v3.$ === 'Just') {
																	var _float = _v3.a;
																	return (!_float) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
																		_Utils_Tuple3(a, b.string, _float));
																} else {
																	return $elm$core$Maybe$Nothing;
																}
															}),
														nodesA,
														values);
												}
											},
											body))));
						case 'Sankey':
							var nodesB = A2(
								$elm$core$List$map,
								function ($) {
									return $.string;
								},
								A2(
									$elm$core$Maybe$withDefault,
									_List_Nil,
									A2($author$project$Lia$Markdown$Table$Matrix$column, 0, body)));
							var nodesA = A2(
								$elm$core$List$map,
								function ($) {
									return $.string;
								},
								A2(
									$elm$core$Maybe$withDefault,
									_List_Nil,
									$elm$core$List$tail(head)));
							var nodes = A2(
								$elm$core$List$filter,
								$elm$core$Basics$neq(''),
								$elm$core$Set$toList(
									$elm$core$Set$fromList(
										_Utils_ap(nodesA, nodesB))));
							return A5(
								$author$project$Lia$Markdown$Chart$View$viewSankey,
								attr,
								mode,
								labels,
								nodes,
								A2(
									$elm$core$List$filter,
									function (_v7) {
										var a = _v7.a;
										var b = _v7.b;
										return (a !== '') || (b !== '');
									},
									A2(
										$elm$core$List$filterMap,
										$elm$core$Basics$identity,
										A2(
											$elm$core$List$concatMap,
											function (row) {
												if (!row.b) {
													return _List_Nil;
												} else {
													var b = row.a;
													var values = row.b;
													return A3(
														$elm$core$List$map2,
														F2(
															function (a, v) {
																var _v6 = v._float;
																if (_v6.$ === 'Just') {
																	var _float = _v6.a;
																	return (!_float) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
																		_Utils_Tuple3(a, b.string, _float));
																} else {
																	return $elm$core$Maybe$Nothing;
																}
															}),
														nodesA,
														values);
												}
											},
											body))));
						case 'Map':
							var data = isFormated ? body : matrix;
							var categories = A2(
								$elm$core$List$map,
								function ($) {
									return $.string;
								},
								A2(
									$elm$core$Maybe$withDefault,
									_List_Nil,
									A2($author$project$Lia$Markdown$Table$Matrix$column, 0, data)));
							var values = A3(
								$elm$core$List$map2,
								$elm$core$Tuple$pair,
								categories,
								A2(
									$elm$core$List$map,
									function ($) {
										return $._float;
									},
									A2(
										$elm$core$Maybe$withDefault,
										_List_Nil,
										A2($author$project$Lia$Markdown$Table$Matrix$column, 1, data))));
							return A5(
								$author$project$Lia$Markdown$Chart$View$viewMapChart,
								attr,
								mode,
								labels,
								values,
								A2($author$project$Lia$Markdown$HTML$Attributes$get, 'data-src', attr));
						default:
							var xs = A2(
								$elm$core$List$map,
								function ($) {
									return $._float;
								},
								A2(
									$elm$core$Maybe$withDefault,
									_List_Nil,
									A2($author$project$Lia$Markdown$Table$Matrix$column, 0, body)));
							var legend = A2(
								$elm$core$List$map,
								function ($) {
									return $.string;
								},
								A2(
									$elm$core$Maybe$withDefault,
									_List_Nil,
									$elm$core$List$tail(head)));
							if (_Utils_eq(
								$elm$core$List$length(xs),
								$elm$core$List$length(
									A2($elm$core$List$filterMap, $elm$core$Basics$identity, xs)))) {
								var type_ = F2(
									function (name, pts) {
										return _Utils_eq(_class, $author$project$Lia$Markdown$Table$Types$LinePlot) ? A2(
											$author$project$Lia$Markdown$Chart$Types$Lines,
											pts,
											$elm$core$Maybe$Just(name)) : A2(
											$author$project$Lia$Markdown$Chart$Types$Dots,
											pts,
											$elm$core$Maybe$Just(name));
									});
								var diagrams = A2(
									$elm$core$List$indexedMap,
									F2(
										function (i, diagram) {
											return _Utils_Tuple2(
												$author$project$Lia$Markdown$Chart$View$getColor(i),
												diagram);
										}),
									A3(
										$elm$core$List$map2,
										type_,
										legend,
										A2(
											$elm$core$List$map,
											A2(
												$elm$core$Basics$composeR,
												A2(
													$elm$core$List$map2,
													F2(
														function (x, y) {
															return A3($elm$core$Maybe$map2, $author$project$Lia$Markdown$Chart$Types$Point, x, y);
														}),
													xs),
												$elm$core$List$filterMap($elm$core$Basics$identity)),
											A2(
												$author$project$Lia$Markdown$Table$Matrix$map,
												function ($) {
													return $._float;
												},
												$author$project$Lia$Markdown$Table$Matrix$tail(
													$author$project$Lia$Markdown$Table$Matrix$transpose(body))))));
								return A3(
									$author$project$Lia$Markdown$Chart$View$viewChart,
									attr,
									mode,
									{
										diagrams: $elm$core$Dict$fromList(diagrams),
										legend: legend,
										title: A2($elm$core$Maybe$withDefault, '', labels.main),
										xLabel: A2($elm$core$Maybe$withDefault, '', labels.x),
										yLabel: A2($elm$core$Maybe$withDefault, '', labels.y)
									});
							} else {
								var xvalues = A2(
									$elm$core$List$map,
									function ($) {
										return $.string;
									},
									A2(
										$elm$core$Maybe$withDefault,
										_List_Nil,
										A2($author$project$Lia$Markdown$Table$Matrix$column, 0, body)));
								var xlabels = A2(
									$elm$core$List$map,
									function ($) {
										return $.string;
									},
									A2(
										$elm$core$Maybe$withDefault,
										_List_Nil,
										$elm$core$List$tail(head)));
								return A5(
									_Utils_eq(_class, $author$project$Lia$Markdown$Table$Types$LinePlot) ? $author$project$Lia$Markdown$Chart$View$viewLines : $author$project$Lia$Markdown$Chart$View$viewPoints,
									attr,
									mode,
									labels,
									xvalues,
									A3(
										$elm$core$List$map2,
										$elm$core$Tuple$pair,
										xlabels,
										A2(
											$author$project$Lia$Markdown$Table$Matrix$map,
											function ($) {
												return $._float;
											},
											$author$project$Lia$Markdown$Table$Matrix$tail(
												$author$project$Lia$Markdown$Table$Matrix$transpose(body)))));
							}
					}
				}()
				]));
	});
var $author$project$Lia$Markdown$Table$View$diagramTranspose = F2(
	function (attr, matrix) {
		return A2($author$project$Lia$Markdown$HTML$Attributes$isSet, 'data-transpose', attr) ? $author$project$Lia$Markdown$Table$Matrix$transpose(matrix) : matrix;
	});
var $author$project$Lia$Markdown$Table$View$viewDiagram = F7(
	function (table, state, effects, visible, width, light, attr) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Lia$Utils$blockKeydown(
					$author$project$Lia$Markdown$Update$UpdateTable($author$project$Lia$Markdown$Table$Update$NoOp))
				]),
			_List_fromArray(
				[
					A2($author$project$Lia$Markdown$Table$View$toggleBtn, table.id, 'table'),
					A6(
					$author$project$Lia$Markdown$Table$View$chart,
					width,
					!_Utils_eq(table.format, _List_Nil),
					attr,
					light,
					table._class,
					A2(
						$author$project$Lia$Markdown$Table$View$diagramTranspose,
						attr,
						A2(
							$elm$core$List$cons,
							A2(
								$elm$core$List$map,
								A2($author$project$Lia$Markdown$Table$Types$toCell, effects, visible),
								table.head),
							A2(
								$author$project$Lia$Markdown$Table$View$sort,
								state,
								A3($author$project$Lia$Markdown$Table$Types$toMatrix, effects, visible, table.body)))))
				]));
	});
var $author$project$Lia$Markdown$Table$View$view = F3(
	function (config, attr, table) {
		var state = A2($author$project$Lia$Markdown$Table$View$getState, table.id, config.section.table_vector);
		return A2($author$project$Lia$Markdown$Table$View$diagramShow, attr, state.diagram) ? A8($elm$html$Html$Lazy$lazy7, $author$project$Lia$Markdown$Table$View$viewDiagram, table, state, config.main.scripts, config.main.visible, config.screen.width, config.light, attr) : ((_Utils_eq(table.head, _List_Nil) && _Utils_eq(table.format, _List_Nil)) ? A4(
			$author$project$Lia$Markdown$Table$View$toTable,
			table.id,
			attr,
			table._class,
			A4(
				$author$project$Lia$Markdown$Table$View$unformatted,
				config.view,
				A3($author$project$Lia$Markdown$Table$Types$toMatrix, config.main.scripts, config.main.visible, table.body),
				table.id,
				state)) : A4(
			$author$project$Lia$Markdown$Table$View$toTable,
			table.id,
			attr,
			table._class,
			A6(
				$author$project$Lia$Markdown$Table$View$formatted,
				config.view,
				table.head,
				table.format,
				A3($author$project$Lia$Markdown$Table$Types$toMatrix, config.main.scripts, config.main.visible, table.body),
				table.id,
				state)));
	});
var $author$project$Lia$Markdown$Task$Update$Script = function (a) {
	return {$: 'Script', a: a};
};
var $author$project$Lia$Markdown$Task$Update$Toggle = F3(
	function (a, b, c) {
		return {$: 'Toggle', a: a, b: b, c: c};
	});
var $author$project$Lia$Markdown$Task$View$row = F5(
	function (config, x, code, inlines, _v0) {
		var y = _v0.a;
		var checked = _v0.b;
		return A2(
			$elm$html$Html$tr,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$td,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$attribute, 'valign', 'top'),
							$elm$html$Html$Attributes$class('lia-label')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$input,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$type_('checkbox'),
									$elm$html$Html$Attributes$checked(checked),
									$elm$html$Html$Events$onClick(
									A3($author$project$Lia$Markdown$Task$Update$Toggle, x, y, code))
								]),
							_List_Nil),
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('lia-check-btn')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('check')
								]))
						])),
					A2(
					$elm$html$Html$map,
					$author$project$Lia$Markdown$Task$Update$Script,
					A2(
						$elm$html$Html$td,
						_List_Nil,
						A2($author$project$Lia$Markdown$Inline$View$viewer, config, inlines)))
				]));
	});
var $author$project$Lia$Markdown$Task$View$view = F4(
	function (config, vector, attr, task) {
		var _v0 = A2($elm$core$Array$get, task.id, vector);
		if (_v0.$ === 'Just') {
			var states = _v0.a;
			return A2(
				$elm$html$Html$table,
				A2(
					$elm$core$List$cons,
					A2($elm$html$Html$Attributes$attribute, 'cellspacing', '8'),
					A2($author$project$Lia$Markdown$HTML$Attributes$annotation, '', attr)),
				A3(
					$elm$core$List$map2,
					A3($author$project$Lia$Markdown$Task$View$row, config, task.id, task.javascript),
					task.task,
					A2(
						$elm$core$List$indexedMap,
						$elm$core$Tuple$pair,
						$elm$core$Array$toList(states))));
		} else {
			return $elm$html$Html$text('');
		}
	});
var $author$project$Lia$Markdown$Quiz$View$view_solution = F2(
	function (vector, quiz) {
		return A2(
			$elm$core$Maybe$withDefault,
			false,
			A2(
				$elm$core$Maybe$map,
				$author$project$Lia$Markdown$Quiz$Types$solved,
				A2($author$project$Lia$Markdown$Quiz$Types$getState, vector, quiz.id)));
	});
var $author$project$Lia$Markdown$View$view_ascii = F2(
	function (config, attr) {
		return A2(
			$elm$core$Basics$composeR,
			A2(
				$andre_dietrich$elm_svgbob$SvgBob$drawElements,
				$author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr),
				function (list) {
					return A2(
						$elm$html$Html$div,
						_List_Nil,
						function () {
							_v12$2:
							while (true) {
								if (list.b) {
									switch (list.a.$) {
										case 'Paragraph':
											if ((!list.a.a.b) && (!list.b.b)) {
												var _v13 = list.a;
												var content = _v13.b;
												return config.view(content);
											} else {
												break _v12$2;
											}
										case 'Code':
											return _List_fromArray(
												[
													A2(
													$elm$html$Html$div,
													_List_fromArray(
														[
															A2($elm$html$Html$Attributes$style, 'margin-top', '-16px')
														]),
													A2(
														$elm$core$List$map,
														$author$project$Lia$Markdown$View$view_block(config),
														list))
												]);
										default:
											break _v12$2;
									}
								} else {
									break _v12$2;
								}
							}
							return A2(
								$elm$core$List$map,
								$author$project$Lia$Markdown$View$view_block(config),
								list);
						}());
				}),
			function (svg) {
				return config.light ? svg : A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, '-webkit-filter', 'invert(100%)'),
							A2($elm$html$Html$Attributes$style, 'filter', 'invert(100%)')
						]),
					_List_fromArray(
						[svg]));
			});
	});
var $author$project$Lia$Markdown$View$view_block = F2(
	function (config, block) {
		switch (block.$) {
			case 'HLine':
				var attr = block.a;
				return A2(
					$elm$html$Html$hr,
					A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-horiz-line', attr),
					_List_Nil);
			case 'Paragraph':
				if (block.b.b && (!block.b.b.b)) {
					var attr = block.a;
					var _v2 = block.b;
					var element = _v2.a;
					var _v3 = $author$project$Lia$Markdown$Inline$Types$htmlBlock(element);
					if (_v3.$ === 'Just') {
						var _v4 = _v3.a;
						var name = _v4.a;
						var attributes = _v4.b;
						var inlines = _v4.c;
						return A4(
							$author$project$Lia$Markdown$HTML$View$view,
							$elm$html$Html$div,
							A2(
								$elm$core$Basics$composeR,
								config.view,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$List$head,
									$elm$core$Maybe$withDefault(
										A2(
											$elm$html$Html$p,
											A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-paragraph', attr),
											config.view(
												_List_fromArray(
													[element])))))),
							attr,
							A3(
								$author$project$Lia$Markdown$HTML$Types$Node,
								name,
								attributes,
								_List_fromArray(
									[inlines])));
					} else {
						return A2(
							$elm$html$Html$p,
							A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-paragraph', attr),
							config.view(
								_List_fromArray(
									[element])));
					}
				} else {
					var attr = block.a;
					var elements = block.b;
					return A2(
						$elm$html$Html$p,
						A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-paragraph', attr),
						config.view(elements));
				}
			case 'Effect':
				var attr = block.a;
				var e = block.b;
				return A5(
					$author$project$Lia$Markdown$Effect$View$block,
					config.main,
					config.section.effect_model,
					attr,
					e,
					A2(
						$elm$core$List$map,
						$author$project$Lia$Markdown$View$view_block(config),
						e.content));
			case 'BulletList':
				var attr = block.a;
				var list = block.b;
				return A2(
					$elm$html$Html$ul,
					A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-list lia-unordered', attr),
					A2($author$project$Lia$Markdown$View$view_bulletlist, config, list));
			case 'OrderedList':
				var attr = block.a;
				var list = block.b;
				return A2(
					$elm$html$Html$ol,
					A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-list lia-ordered', attr),
					A2($author$project$Lia$Markdown$View$view_list, config, list));
			case 'Table':
				var attr = block.a;
				var table = block.b;
				return A3($author$project$Lia$Markdown$Table$View$view, config, attr, table);
			case 'Quote':
				var attr = block.a;
				var elements = block.b;
				return A2(
					$elm$html$Html$blockquote,
					A2($author$project$Lia$Markdown$HTML$Attributes$annotation, 'lia-quote', attr),
					A2(
						$elm$core$List$map,
						function (e) {
							return A2($author$project$Lia$Markdown$View$view_block, config, e);
						},
						elements));
			case 'HTML':
				var attr = block.a;
				var node = block.b;
				return A4(
					$author$project$Lia$Markdown$HTML$View$view,
					$elm$html$Html$div,
					$author$project$Lia$Markdown$View$view_block(config),
					attr,
					node);
			case 'Code':
				var code = block.a;
				return A2(
					$elm$html$Html$map,
					$author$project$Lia$Markdown$Update$UpdateCode,
					A4($author$project$Lia$Markdown$Code$View$view, config.main.lang, config.ace_theme, config.section.code_vector, code));
			case 'Quiz':
				if (block.c.$ === 'Nothing') {
					var attr = block.a;
					var quiz = block.b;
					var _v5 = block.c;
					return A2(
						$elm$html$Html$div,
						A2(
							$author$project$Lia$Markdown$HTML$Attributes$annotation,
							A2($author$project$Lia$Markdown$Quiz$View$class, quiz.id, config.section.quiz_vector),
							attr),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$map,
								$author$project$Lia$Markdown$Update$UpdateQuiz,
								A3($author$project$Lia$Markdown$Quiz$View$view, config.main, quiz, config.section.quiz_vector))
							]));
				} else {
					var attr = block.a;
					var quiz = block.b;
					var _v6 = block.c.a;
					var answer = _v6.a;
					var hidden_effects = _v6.b;
					return A2(
						$elm$html$Html$div,
						A2(
							$author$project$Lia$Markdown$HTML$Attributes$annotation,
							A2($author$project$Lia$Markdown$Quiz$View$class, quiz.id, config.section.quiz_vector),
							attr),
						A2($author$project$Lia$Markdown$Quiz$View$view_solution, config.section.quiz_vector, quiz) ? A2(
							$elm$core$List$append,
							_List_fromArray(
								[
									A2(
									$elm$html$Html$map,
									$author$project$Lia$Markdown$Update$UpdateQuiz,
									A3($author$project$Lia$Markdown$Quiz$View$view, config.main, quiz, config.section.quiz_vector))
								]),
							A2(
								$elm$core$List$cons,
								A2($elm$html$Html$hr, _List_Nil, _List_Nil),
								A2(
									$elm$core$List$map,
									$author$project$Lia$Markdown$View$view_block(config),
									answer))) : _List_fromArray(
							[
								A2(
								$elm$html$Html$map,
								$author$project$Lia$Markdown$Update$UpdateQuiz,
								A3($author$project$Lia$Markdown$Quiz$View$view, config.main, quiz, config.section.quiz_vector))
							]));
				}
			case 'Survey':
				var attr = block.a;
				var survey = block.b;
				return A2(
					$elm$html$Html$map,
					$author$project$Lia$Markdown$Update$UpdateSurvey,
					A4($author$project$Lia$Markdown$Survey$View$view, config.main, attr, survey, config.section.survey_vector));
			case 'Comment':
				var _v7 = block.a;
				var id1 = _v7.a;
				var id2 = _v7.b;
				var _v8 = _Utils_Tuple2(
					config.main.visible,
					A3($author$project$Lia$Markdown$Effect$Model$get_paragraph, id1, id2, config.section.effect_model));
				if ((_v8.a.$ === 'Nothing') && (_v8.b.$ === 'Just')) {
					var _v9 = _v8.a;
					var _v10 = _v8.b.a;
					var attr = _v10.a;
					var par = _v10.b;
					return A2(
						$author$project$Lia$Markdown$View$view_block,
						config,
						A2($author$project$Lia$Markdown$Types$Paragraph, attr, par));
				} else {
					return $elm$html$Html$text('');
				}
			case 'Header':
				var attr = block.a;
				var _v11 = block.b;
				var elements = _v11.a;
				var sub = _v11.b;
				return A4($author$project$Lia$Markdown$View$header, config, config.section.indentation + sub, attr, elements);
			case 'Chart':
				var attr = block.a;
				var chart = block.b;
				return A4($elm$html$Html$Lazy$lazy3, $author$project$Lia$Markdown$Chart$View$view, attr, config.light, chart);
			case 'ASCII':
				var attr = block.a;
				var bob = block.b;
				return A3($author$project$Lia$Markdown$View$view_ascii, config, attr, bob);
			default:
				var attr = block.a;
				var list = block.b;
				return A2(
					$elm$html$Html$map,
					$author$project$Lia$Markdown$Update$UpdateTask,
					A4($author$project$Lia$Markdown$Task$View$view, config.main, config.section.task_vector, attr, list));
		}
	});
var $author$project$Lia$Markdown$View$view_bulletlist = function (config) {
	var viewer = A2(
		$elm$core$Basics$composeR,
		$elm$core$List$map(
			$author$project$Lia$Markdown$View$view_block(config)),
		$elm$html$Html$li(_List_Nil));
	return $elm$core$List$map(viewer);
};
var $author$project$Lia$Markdown$View$view_list = function (config) {
	var viewer = function (_v0) {
		var value = _v0.a;
		var sub_list = _v0.b;
		return A2(
			$elm$html$Html$li,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$value(value)
				]),
			A2(
				$elm$core$List$map,
				$author$project$Lia$Markdown$View$view_block(config),
				sub_list));
	};
	return $elm$core$List$map(viewer);
};
var $author$project$Lia$Markdown$View$subView = F3(
	function (config, id, sub) {
		return A2(
			$elm$core$List$map,
			$elm$html$Html$map(
				$author$project$Lia$Markdown$Effect$Script$Update$Sub(id)),
			function () {
				if (sub.$ === 'SubSection') {
					var x = sub.a;
					var section = config.section;
					var main = config.main;
					var effects = config.section.effect_model;
					return A2(
						$elm$core$List$map,
						$author$project$Lia$Markdown$View$view_block(
							_Utils_update(
								config,
								{
									main: _Utils_update(
										main,
										{scripts: x.effect_model.javascript}),
									section: _Utils_update(
										section,
										{
											code_vector: x.code_vector,
											effect_model: _Utils_update(
												effects,
												{comments: x.effect_model.comments, javascript: x.effect_model.javascript}),
											quiz_vector: x.quiz_vector,
											survey_vector: x.survey_vector,
											table_vector: x.table_vector
										})
								})),
						x.body);
				} else {
					var x = sub.a;
					var main = config.main;
					return A2(
						$elm$core$List$map,
						$elm$html$Html$map($author$project$Lia$Markdown$Update$Script),
						A2(
							$author$project$Lia$Markdown$Inline$View$viewer,
							_Utils_update(
								main,
								{scripts: x.effect_model.javascript}),
							x.body));
				}
			}());
	});
var $author$project$Lia$Markdown$Footnote$View$definition = F2(
	function (fn, _v0) {
		var key = _v0.a;
		var val = _v0.b;
		return A2(
			$elm$html$Html$tr,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$td,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$attribute, 'valign', 'top'),
							A2($elm$html$Html$Attributes$style, 'padding-right', '10px')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$p,
							_List_Nil,
							_List_fromArray(
								[
									$author$project$Lia$Markdown$Footnote$View$braces(key)
								]))
						])),
					A2(
					$elm$html$Html$td,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$attribute, 'valign', 'top')
						]),
					A2($elm$core$List$map, fn, val))
				]));
	});
var $author$project$Lia$Markdown$Footnote$Model$empty = $elm$core$Dict$isEmpty;
var $author$project$Lia$Markdown$Footnote$Model$toList = $elm$core$Dict$toList;
var $author$project$Lia$Markdown$Footnote$View$block = F2(
	function (fn, model) {
		if ($author$project$Lia$Markdown$Footnote$Model$empty(model)) {
			return $elm$html$Html$text('');
		} else {
			var def = $author$project$Lia$Markdown$Footnote$View$definition(fn);
			return A2(
				$elm$html$Html$table,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'padding', '-10px'),
						A2($elm$html$Html$Attributes$style, 'border-top', '2px solid black'),
						A2($elm$html$Html$Attributes$style, '-ms-transform', 'scale(0.8, 0.8)'),
						A2($elm$html$Html$Attributes$style, '-ms-transform-origin', '0 50%'),
						A2($elm$html$Html$Attributes$style, '-webkit-transform', 'scale(0.8, 0.8)'),
						A2($elm$html$Html$Attributes$style, '-webkit-transform-origin-x', '0'),
						A2($elm$html$Html$Attributes$style, 'transform', 'scale(0.8, 0.8)'),
						A2($elm$html$Html$Attributes$style, 'transform-origin', '0 50%'),
						$elm$html$Html$Attributes$align('left')
					]),
				A2(
					$elm$core$List$map,
					def,
					$author$project$Lia$Markdown$Footnote$Model$toList(model)));
		}
	});
var $elm$html$Html$section = _VirtualDom_node('section');
var $author$project$Lia$Markdown$Update$FootnoteHide = {$: 'FootnoteHide'};
var $author$project$Lia$Markdown$Footnote$Model$getNote = F2(
	function (model, key) {
		return A2($elm$core$Dict$get, key, model);
	});
var $author$project$Lia$Markdown$View$view_footnote = F3(
	function (viewer, key, footnotes) {
		var _v0 = A2(
			$elm$core$Maybe$andThen,
			$author$project$Lia$Markdown$Footnote$Model$getNote(footnotes),
			key);
		if (_v0.$ === 'Just') {
			var notes = _v0.a;
			return A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Events$onClick($author$project$Lia$Markdown$Update$FootnoteHide),
						A2($elm$html$Html$Attributes$style, 'position', 'fixed'),
						A2($elm$html$Html$Attributes$style, 'display', 'block'),
						A2($elm$html$Html$Attributes$style, 'width', '100%'),
						A2($elm$html$Html$Attributes$style, 'height', '100%'),
						A2($elm$html$Html$Attributes$style, 'top', '0'),
						A2($elm$html$Html$Attributes$style, 'left', '0'),
						A2($elm$html$Html$Attributes$style, 'right', '0'),
						A2($elm$html$Html$Attributes$style, 'bottom', '0'),
						A2($elm$html$Html$Attributes$style, 'background-color', 'rgba(0,0,0,0.6)'),
						A2($elm$html$Html$Attributes$style, 'z-index', '2'),
						A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
						A2($elm$html$Html$Attributes$style, 'overflow', 'auto')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
								A2($elm$html$Html$Attributes$style, 'top', '50%'),
								A2($elm$html$Html$Attributes$style, 'left', '50%'),
								A2($elm$html$Html$Attributes$style, 'font-size', '20px'),
								A2($elm$html$Html$Attributes$style, 'color', 'white'),
								A2($elm$html$Html$Attributes$style, 'transform', 'translate(-50%,-50%)'),
								A2($elm$html$Html$Attributes$style, '-ms-transform', 'translate(-50%,-50%)')
							]),
						A2($elm$core$List$map, viewer, notes))
					]));
		} else {
			return $elm$html$Html$text('');
		}
	});
var $author$project$Lia$Markdown$View$view_header = function (config) {
	return A2(
		$elm$html$Html$header,
		_List_Nil,
		_List_fromArray(
			[
				A4($author$project$Lia$Markdown$View$header, config, config.section.indentation, _List_Nil, config.section.title)
			]));
};
var $author$project$Lia$Markdown$View$view_body = function (_v0) {
	var config = _v0.a;
	var footnote2show = _v0.b;
	var footnotes = _v0.c;
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$List$map(
			$author$project$Lia$Markdown$View$view_block(config)),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$List$cons(
				A3(
					$author$project$Lia$Markdown$View$view_footnote,
					$author$project$Lia$Markdown$View$view_block(config),
					footnote2show,
					footnotes)),
			A2(
				$elm$core$Basics$composeR,
				$elm$core$List$cons(
					$author$project$Lia$Markdown$View$view_header(config)),
				A2(
					$elm$core$Basics$composeR,
					function (s) {
						return _Utils_eq(config.main.visible, $elm$core$Maybe$Nothing) ? A2(
							$elm$core$List$append,
							s,
							_List_fromArray(
								[
									A2(
									$author$project$Lia$Markdown$Footnote$View$block,
									$author$project$Lia$Markdown$View$view_block(config),
									footnotes)
								])) : s;
					},
					$elm$html$Html$section(
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('lia-content')
							]))))));
};
var $author$project$Lia$Markdown$View$view = function (config) {
	var _v0 = config.section.error;
	if (_v0.$ === 'Nothing') {
		return A2(
			$author$project$Lia$Markdown$View$view_body,
			_Utils_Tuple3(
				A2(
					$author$project$Lia$Markdown$Config$setSubViewer,
					$author$project$Lia$Markdown$View$subView(config),
					config),
				config.section.footnote2show,
				config.section.footnotes),
			config.section.body);
	} else {
		var msg = _v0.a;
		return A2(
			$elm$html$Html$main_,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('lia-content')
				]),
			_List_fromArray(
				[
					$author$project$Lia$Markdown$View$view_header(config),
					$elm$html$Html$text(msg)
				]));
	}
};
var $author$project$Lia$View$viewSlide = F2(
	function (screen, model) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			function () {
				var _v0 = $author$project$Lia$Update$get_active_section(model);
				if (_v0.$ === 'Just') {
					var section = _v0.a;
					return _List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('lia-slide')
								]),
							_List_fromArray(
								[
									A4($author$project$Lia$View$slideTopBar, model.translation, model.url, model.settings, model.definition),
									A2(
									$elm$html$Html$map,
									$author$project$Lia$Update$UpdateMarkdown,
									$author$project$Lia$Markdown$View$view(
										A5($author$project$Lia$Markdown$Config$init, model.translation, model.settings, screen, section, model.section_active))),
									A4($author$project$Lia$View$slideBottom, model.translation, model.settings, model.section_active, section.effect_model)
								])),
							A4($author$project$Lia$View$slideA11y, model.translation, model.settings.mode, section.effect_model, model.section_active)
						]);
				} else {
					return _List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('lia-slide')
								]),
							_List_fromArray(
								[
									A4($author$project$Lia$View$slideTopBar, model.translation, model.url, model.settings, model.definition),
									$elm$html$Html$text('Ups, something went wrong')
								]))
						]);
				}
			}());
	});
var $author$project$Lia$View$view = F3(
	function (screen, hasIndex, model) {
		return A2(
			$elm$html$Html$div,
			$author$project$Lia$Settings$View$design(model.settings),
			_List_fromArray(
				[
					A2($author$project$Lia$View$viewIndex, hasIndex, model),
					A2($author$project$Lia$View$viewSlide, screen, model)
				]));
	});
var $author$project$Lia$Script$view = $author$project$Lia$View$view;
var $author$project$View$view = function (model) {
	return {
		body: function () {
			var _v0 = model.state;
			switch (_v0.$) {
				case 'Running':
					return _List_fromArray(
						[
							A2(
							$elm$html$Html$map,
							$author$project$Update$LiaScript,
							A3($author$project$Lia$Script$view, model.session.screen, model.hasIndex, model.lia))
						]);
				case 'Idle':
					return _List_fromArray(
						[
							A2(
							$elm$html$Html$map,
							$author$project$Update$UpdateIndex,
							A2($author$project$Index$View$view, model.session, model.index))
						]);
				case 'Loading':
					return _List_fromArray(
						[
							$author$project$View$base_div(
							_List_fromArray(
								[
									A2(
									$elm$html$Html$h1,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text('Loading')
										])),
									A2($elm$html$Html$br, _List_Nil, _List_Nil),
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('lds-dual-ring')
										]),
									_List_Nil)
								]))
						]);
				case 'Parsing':
					var percent = $elm$core$String$length(
						A2($elm$core$Maybe$withDefault, '', model.code));
					return _List_fromArray(
						[
							$author$project$View$base_div(
							_List_fromArray(
								[
									A2(
									$elm$html$Html$h1,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text(
											'Parsing : ' + (A3(
												$elm$core$String$slice,
												0,
												5,
												$elm$core$String$fromFloat(100 - ((percent / model.size) * 100))) + '%'))
										])),
									A2($elm$html$Html$br, _List_Nil, _List_Nil),
									A2(
									$elm$html$Html$progress,
									_List_fromArray(
										[
											A2($elm$html$Html$Attributes$style, 'width', '70%'),
											$elm$html$Html$Attributes$max('100'),
											$elm$html$Html$Attributes$value(
											A3(
												$elm$core$String$slice,
												0,
												5,
												$elm$core$String$fromFloat(100 - ((percent / model.size) * 100))))
										]),
									_List_Nil)
								]))
						]);
				default:
					var info = _v0.a;
					return _List_fromArray(
						[
							$author$project$View$base_div(
							_List_fromArray(
								[
									A2(
									$elm$html$Html$h1,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text('Load failed')
										])),
									A2(
									$elm$html$Html$h6,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text(model.lia.readme)
										])),
									A2(
									$elm$html$Html$p,
									_List_fromArray(
										[
											A2($elm$html$Html$Attributes$style, 'margin-left', '20%'),
											A2($elm$html$Html$Attributes$style, 'margin-right', '20%')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text(info)
										]))
								]))
						]);
			}
		}(),
		title: model.lia.title
	};
};
var $author$project$Main$main = $elm$browser$Browser$application(
	{init: $author$project$Main$init, onUrlChange: $author$project$Update$UrlChanged, onUrlRequest: $author$project$Update$LinkClicked, subscriptions: $author$project$Update$subscriptions, update: $author$project$Update$update, view: $author$project$View$view});
_Platform_export({'Main':{'init':$author$project$Main$main(
	A2(
		$elm$json$Json$Decode$andThen,
		function (settings) {
			return A2(
				$elm$json$Json$Decode$andThen,
				function (script) {
					return A2(
						$elm$json$Json$Decode$andThen,
						function (screen) {
							return A2(
								$elm$json$Json$Decode$andThen,
								function (hasShareAPI) {
									return A2(
										$elm$json$Json$Decode$andThen,
										function (hasIndex) {
											return A2(
												$elm$json$Json$Decode$andThen,
												function (courseUrl) {
													return $elm$json$Json$Decode$succeed(
														{courseUrl: courseUrl, hasIndex: hasIndex, hasShareAPI: hasShareAPI, screen: screen, script: script, settings: settings});
												},
												A2(
													$elm$json$Json$Decode$field,
													'courseUrl',
													$elm$json$Json$Decode$oneOf(
														_List_fromArray(
															[
																$elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
																A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, $elm$json$Json$Decode$string)
															]))));
										},
										A2($elm$json$Json$Decode$field, 'hasIndex', $elm$json$Json$Decode$bool));
								},
								A2($elm$json$Json$Decode$field, 'hasShareAPI', $elm$json$Json$Decode$bool));
						},
						A2(
							$elm$json$Json$Decode$field,
							'screen',
							A2(
								$elm$json$Json$Decode$andThen,
								function (width) {
									return A2(
										$elm$json$Json$Decode$andThen,
										function (height) {
											return $elm$json$Json$Decode$succeed(
												{height: height, width: width});
										},
										A2($elm$json$Json$Decode$field, 'height', $elm$json$Json$Decode$int));
								},
								A2($elm$json$Json$Decode$field, 'width', $elm$json$Json$Decode$int))));
				},
				A2(
					$elm$json$Json$Decode$field,
					'script',
					$elm$json$Json$Decode$oneOf(
						_List_fromArray(
							[
								$elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
								A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, $elm$json$Json$Decode$string)
							]))));
		},
		A2($elm$json$Json$Decode$field, 'settings', $elm$json$Json$Decode$value)))({"versions":{"elm":"0.19.1"},"types":{"message":"Update.Msg","aliases":{"Port.Event.Event":{"args":[],"type":"{ topic : String.String, section : Basics.Int, message : Json.Encode.Value }"},"Lia.Script.Msg":{"args":[],"type":"Lia.Update.Msg"},"Session.Screen":{"args":[],"type":"{ width : Basics.Int, height : Basics.Int }"},"Url.Url":{"args":[],"type":"{ protocol : Url.Protocol, host : String.String, port_ : Maybe.Maybe Basics.Int, path : String.String, query : Maybe.Maybe String.String, fragment : Maybe.Maybe String.String }"},"Index.Model.Course":{"args":[],"type":"{ id : String.String, versions : Dict.Dict String.String Index.Model.Release, active : Maybe.Maybe String.String, last_visit : String.String }"},"Lia.Definition.Types.Definition":{"args":[],"type":"{ author : String.String, date : String.String, email : String.String, language : String.String, logo : String.String, narrator : String.String, version : String.String, comment : Lia.Markdown.Inline.Types.Inlines, resources : List.List Lia.Definition.Types.Resource, base : String.String, translation : Dict.Dict String.String String.String, macro : Dict.Dict String.String String.String, imports : List.List String.String, attributes : List.List Lia.Markdown.Inline.Types.Inlines, section : Basics.Int, uid : Basics.Int, debug : Basics.Bool, onload : String.String, lightMode : Maybe.Maybe Basics.Bool, mode : Maybe.Maybe Lia.Settings.Types.Mode }"},"Lia.Markdown.Inline.Types.Inlines":{"args":[],"type":"List.List Lia.Markdown.Inline.Types.Inline"},"Index.Model.Release":{"args":[],"type":"{ title : Lia.Markdown.Inline.Types.Inlines, definition : Lia.Definition.Types.Definition }"},"Json.Decode.Value":{"args":[],"type":"Json.Encode.Value"},"Lia.Markdown.Effect.Types.Effect":{"args":["body"],"type":"{ content : List.List body, playback : Basics.Bool, begin : Basics.Int, end : Maybe.Maybe Basics.Int, voice : String.String, id : Basics.Int }"},"Lia.Markdown.HTML.Attributes.Parameters":{"args":[],"type":"List.List ( String.String, String.String )"},"Browser.Dom.Viewport":{"args":[],"type":"{ scene : { width : Basics.Float, height : Basics.Float }, viewport : { x : Basics.Float, y : Basics.Float, width : Basics.Float, height : Basics.Float } }"},"Lia.Markdown.Quiz.Block.Types.Quiz":{"args":[],"type":"{ options : List.List Lia.Markdown.Inline.Types.Inlines, solution : Lia.Markdown.Quiz.Block.Types.State }"},"Lia.Markdown.Quiz.Matrix.Types.Quiz":{"args":[],"type":"{ headers : List.List Lia.Markdown.Inline.Types.Inlines, options : List.List Lia.Markdown.Inline.Types.Inlines, solution : Lia.Markdown.Quiz.Matrix.Types.State }"},"Lia.Markdown.Quiz.Vector.Types.Quiz":{"args":[],"type":"{ options : List.List Lia.Markdown.Inline.Types.Inlines, solution : Lia.Markdown.Quiz.Vector.Types.State }"},"Lia.Markdown.Quiz.Matrix.Types.State":{"args":[],"type":"Array.Array Lia.Markdown.Quiz.Vector.Types.State"},"Array.Tree":{"args":["a"],"type":"Elm.JsArray.JsArray (Array.Node a)"}},"unions":{"Update.Msg":{"args":[],"tags":{"LiaScript":["Lia.Script.Msg"],"Handle":["Port.Event.Event"],"UpdateIndex":["Index.Update.Msg"],"Resize":["Session.Screen"],"LiaParse":[],"LinkClicked":["Browser.UrlRequest"],"UrlChanged":["Url.Url"],"Load_ReadMe_Result":["String.String","Result.Result Http.Error String.String"],"Load_Template_Result":["String.String","Result.Result Http.Error String.String"]}},"Http.Error":{"args":[],"tags":{"BadUrl":["String.String"],"Timeout":[],"NetworkError":[],"BadStatus":["Basics.Int"],"BadBody":["String.String"]}},"Basics.Int":{"args":[],"tags":{"Int":[]}},"Maybe.Maybe":{"args":["a"],"tags":{"Just":["a"],"Nothing":[]}},"Index.Update.Msg":{"args":[],"tags":{"IndexList":["List.List Index.Model.Course"],"IndexError":["String.String"],"Input":["String.String"],"Delete":["String.String"],"Reset":["String.String","Maybe.Maybe String.String"],"Restore":["String.String","Maybe.Maybe String.String"],"Share":["String.String","String.String","String.String"],"Handle":["Json.Decode.Value"],"Activate":["String.String","Maybe.Maybe String.String"],"NoOp":[]}},"Lia.Update.Msg":{"args":[],"tags":{"Load":["Basics.Bool","Basics.Int"],"InitSection":[],"PrevSection":[],"NextSection":[],"UpdateIndex":["Lia.Index.Update.Msg"],"UpdateSettings":["Lia.Settings.Update.Msg"],"UpdateMarkdown":["Lia.Markdown.Update.Msg"],"Handle":["Port.Event.Event"],"Home":[],"Script":["( Basics.Int, Lia.Markdown.Effect.Script.Update.Msg Lia.Markdown.Update.Msg )"]}},"Url.Protocol":{"args":[],"tags":{"Http":[],"Https":[]}},"Result.Result":{"args":["error","value"],"tags":{"Ok":["value"],"Err":["error"]}},"String.String":{"args":[],"tags":{"String":[]}},"Browser.UrlRequest":{"args":[],"tags":{"Internal":["Url.Url"],"External":["String.String"]}},"Json.Encode.Value":{"args":[],"tags":{"Value":[]}},"Basics.Bool":{"args":[],"tags":{"True":[],"False":[]}},"Dict.Dict":{"args":["k","v"],"tags":{"RBNode_elm_builtin":["Dict.NColor","k","v","Dict.Dict k v","Dict.Dict k v"],"RBEmpty_elm_builtin":[]}},"Lia.Markdown.Inline.Types.Inline":{"args":[],"tags":{"Chars":["String.String","Lia.Markdown.HTML.Attributes.Parameters"],"Symbol":["String.String","Lia.Markdown.HTML.Attributes.Parameters"],"Bold":["Lia.Markdown.Inline.Types.Inline","Lia.Markdown.HTML.Attributes.Parameters"],"Italic":["Lia.Markdown.Inline.Types.Inline","Lia.Markdown.HTML.Attributes.Parameters"],"Strike":["Lia.Markdown.Inline.Types.Inline","Lia.Markdown.HTML.Attributes.Parameters"],"Underline":["Lia.Markdown.Inline.Types.Inline","Lia.Markdown.HTML.Attributes.Parameters"],"Superscript":["Lia.Markdown.Inline.Types.Inline","Lia.Markdown.HTML.Attributes.Parameters"],"Verbatim":["String.String","Lia.Markdown.HTML.Attributes.Parameters"],"Formula":["String.String","String.String","Lia.Markdown.HTML.Attributes.Parameters"],"Ref":["Lia.Markdown.Inline.Types.Reference","Lia.Markdown.HTML.Attributes.Parameters"],"FootnoteMark":["String.String","Lia.Markdown.HTML.Attributes.Parameters"],"EInline":["Lia.Markdown.Effect.Types.Effect Lia.Markdown.Inline.Types.Inline","Lia.Markdown.HTML.Attributes.Parameters"],"Script":["Basics.Int","Lia.Markdown.HTML.Attributes.Parameters"],"IHTML":["Lia.Markdown.HTML.Types.Node Lia.Markdown.Inline.Types.Inline","Lia.Markdown.HTML.Attributes.Parameters"],"Container":["Lia.Markdown.Inline.Types.Inlines","Lia.Markdown.HTML.Attributes.Parameters"]}},"List.List":{"args":["a"],"tags":{}},"Lia.Settings.Types.Mode":{"args":[],"tags":{"Slides":[],"Presentation":[],"Textbook":[]}},"Lia.Index.Update.Msg":{"args":[],"tags":{"ScanIndex":["String.String"]}},"Lia.Markdown.Effect.Script.Update.Msg":{"args":["sub"],"tags":{"Click":["Basics.Int"],"Reset":["Basics.Int"],"Activate":["Basics.Bool","Basics.Int"],"Value":["Basics.Int","Basics.Bool","String.String"],"Radio":["Basics.Int","Basics.Bool","String.String"],"Checkbox":["Basics.Int","Basics.Bool","String.String"],"Edit":["Basics.Bool","Basics.Int"],"EditCode":["Basics.Int","String.String"],"NoOp":[],"Handle":["Port.Event.Event"],"Delay":["Basics.Float","Lia.Markdown.Effect.Script.Update.Msg sub"],"Sub":["Basics.Int","sub"]}},"Lia.Markdown.Update.Msg":{"args":[],"tags":{"UpdateEffect":["Basics.Bool","Lia.Markdown.Effect.Update.Msg Lia.Markdown.Update.Msg"],"UpdateCode":["Lia.Markdown.Code.Update.Msg"],"UpdateQuiz":["Lia.Markdown.Quiz.Update.Msg Lia.Markdown.Update.Msg"],"UpdateSurvey":["Lia.Markdown.Survey.Update.Msg Lia.Markdown.Update.Msg"],"UpdateTable":["Lia.Markdown.Table.Update.Msg Lia.Markdown.Update.Msg"],"UpdateTask":["Lia.Markdown.Task.Update.Msg Lia.Markdown.Update.Msg"],"FootnoteHide":[],"FootnoteShow":["String.String"],"Script":["Lia.Markdown.Effect.Script.Update.Msg Lia.Markdown.Update.Msg"]}},"Lia.Settings.Update.Msg":{"args":[],"tags":{"Toggle":["Lia.Settings.Update.Toggle"],"ChangeTheme":["String.String"],"ChangeEditor":["String.String"],"ChangeLang":["String.String"],"ChangeFontSize":["Basics.Bool"],"SwitchMode":["Lia.Settings.Types.Mode"],"Reset":[],"Handle":["Port.Event.Event"],"ShareCourse":["Port.Event.Event"],"Ignore":[]}},"Lia.Definition.Types.Resource":{"args":[],"tags":{"Link":["String.String"],"Script":["String.String"]}},"Basics.Float":{"args":[],"tags":{"Float":[]}},"Lia.Markdown.Code.Update.Msg":{"args":[],"tags":{"Eval":["Basics.Int"],"Stop":["Basics.Int"],"Update":["Basics.Int","Basics.Int","String.String"],"FlipView":["Basics.Int","Basics.Int"],"FlipFullscreen":["Basics.Int","Basics.Int"],"Load":["Basics.Int","Basics.Int"],"First":["Basics.Int"],"Last":["Basics.Int"],"UpdateTerminal":["Basics.Int","Lia.Markdown.Code.Terminal.Msg"],"Handle":["Port.Event.Event"]}},"Lia.Markdown.Effect.Update.Msg":{"args":["sub"],"tags":{"Init":["Basics.Bool"],"Next":[],"Previous":[],"Send":["List.List Port.Event.Event"],"Speak":["Basics.Int","String.String","String.String"],"Mute":["Basics.Int"],"Rendered":["Basics.Bool","Browser.Dom.Viewport"],"Handle":["Port.Event.Event"],"Script":["Lia.Markdown.Effect.Script.Update.Msg sub"]}},"Lia.Markdown.Quiz.Update.Msg":{"args":["sub"],"tags":{"Block_Update":["Basics.Int","Lia.Markdown.Quiz.Block.Update.Msg sub"],"Vector_Update":["Basics.Int","Lia.Markdown.Quiz.Vector.Update.Msg sub"],"Matrix_Update":["Basics.Int","Lia.Markdown.Quiz.Matrix.Update.Msg sub"],"Check":["Basics.Int","Lia.Markdown.Quiz.Types.Type","Maybe.Maybe String.String"],"ShowHint":["Basics.Int"],"ShowSolution":["Basics.Int","Lia.Markdown.Quiz.Types.Type"],"Handle":["Port.Event.Event"],"Script":["Lia.Markdown.Effect.Script.Update.Msg sub"]}},"Lia.Markdown.Survey.Update.Msg":{"args":["sub"],"tags":{"TextUpdate":["Basics.Int","String.String"],"SelectUpdate":["Basics.Int","Basics.Int"],"SelectChose":["Basics.Int"],"VectorUpdate":["Basics.Int","String.String"],"MatrixUpdate":["Basics.Int","Basics.Int","String.String"],"Submit":["Basics.Int","Maybe.Maybe String.String"],"Handle":["Port.Event.Event"],"Script":["Lia.Markdown.Effect.Script.Update.Msg sub"]}},"Lia.Markdown.Table.Update.Msg":{"args":["sub"],"tags":{"Sort":["Basics.Int","Basics.Int"],"Toggle":["Basics.Int"],"NoOp":[]}},"Lia.Markdown.Task.Update.Msg":{"args":["sub"],"tags":{"Toggle":["Basics.Int","Basics.Int","Maybe.Maybe String.String"],"Handle":["Port.Event.Event"],"Script":["Lia.Markdown.Effect.Script.Update.Msg sub"]}},"Dict.NColor":{"args":[],"tags":{"Red":[],"Black":[]}},"Lia.Markdown.HTML.Types.Node":{"args":["content"],"tags":{"Node":["String.String","Lia.Markdown.HTML.Attributes.Parameters","List.List content"],"InnerHtml":["String.String"]}},"Lia.Markdown.Inline.Types.Reference":{"args":[],"tags":{"Link":["Lia.Markdown.Inline.Types.Inlines","String.String","Maybe.Maybe Lia.Markdown.Inline.Types.Inlines"],"Mail":["Lia.Markdown.Inline.Types.Inlines","String.String","Maybe.Maybe Lia.Markdown.Inline.Types.Inlines"],"Image":["Lia.Markdown.Inline.Types.Inlines","String.String","Maybe.Maybe Lia.Markdown.Inline.Types.Inlines"],"Audio":["Lia.Markdown.Inline.Types.Inlines","( Basics.Bool, String.String )","Maybe.Maybe Lia.Markdown.Inline.Types.Inlines"],"Movie":["Lia.Markdown.Inline.Types.Inlines","( Basics.Bool, String.String )","Maybe.Maybe Lia.Markdown.Inline.Types.Inlines"],"Embed":["Lia.Markdown.Inline.Types.Inlines","String.String","Maybe.Maybe Lia.Markdown.Inline.Types.Inlines"],"Preview_Lia":["String.String"],"Preview_Link":["String.String"],"QR_Link":["String.String","Maybe.Maybe Lia.Markdown.Inline.Types.Inlines"]}},"Lia.Settings.Update.Toggle":{"args":[],"tags":{"TableOfContents":[],"Sound":[],"Light":[],"Action":["Lia.Settings.Types.Action"]}},"Lia.Settings.Types.Action":{"args":[],"tags":{"ShowInformation":[],"ShowTranslations":[],"ShowSettings":[],"ShowModes":[],"Share":[]}},"Lia.Markdown.Code.Terminal.Msg":{"args":[],"tags":{"KeyDown":["Basics.Int"],"Input":["String.String"]}},"Lia.Markdown.Quiz.Block.Update.Msg":{"args":["sub"],"tags":{"Toggle":[],"Choose":["Basics.Int"],"Input":["String.String"],"Script":["Lia.Markdown.Effect.Script.Update.Msg sub"]}},"Lia.Markdown.Quiz.Matrix.Update.Msg":{"args":["sub"],"tags":{"Toggle":["Basics.Int","Basics.Int"],"Script":["Lia.Markdown.Effect.Script.Update.Msg sub"]}},"Lia.Markdown.Quiz.Vector.Update.Msg":{"args":["sub"],"tags":{"Toggle":["Basics.Int"],"Script":["Lia.Markdown.Effect.Script.Update.Msg sub"]}},"Lia.Markdown.Quiz.Types.Type":{"args":[],"tags":{"Generic_Type":[],"Block_Type":["Lia.Markdown.Quiz.Block.Types.Quiz"],"Vector_Type":["Lia.Markdown.Quiz.Vector.Types.Quiz"],"Matrix_Type":["Lia.Markdown.Quiz.Matrix.Types.Quiz"]}},"Array.Array":{"args":["a"],"tags":{"Array_elm_builtin":["Basics.Int","Basics.Int","Array.Tree a","Elm.JsArray.JsArray a"]}},"Lia.Markdown.Quiz.Block.Types.State":{"args":[],"tags":{"Text":["String.String"],"Select":["Basics.Bool","List.List Basics.Int"]}},"Lia.Markdown.Quiz.Vector.Types.State":{"args":[],"tags":{"SingleChoice":["List.List Basics.Bool"],"MultipleChoice":["List.List Basics.Bool"]}},"Elm.JsArray.JsArray":{"args":["a"],"tags":{"JsArray":["a"]}},"Array.Node":{"args":["a"],"tags":{"SubTree":["Array.Tree a"],"Leaf":["Elm.JsArray.JsArray a"]}}}}})}});

//////////////////// HMR BEGIN ////////////////////

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Original Author: Flux Xu @fluxxu
*/

/*
    A note about the environment that this code runs in...

    assumed globals:
        - `module` (from Node.js module system and webpack)

    assumed in scope after injection into the Elm IIFE:
        - `scope` (has an 'Elm' property which contains the public Elm API)
        - various functions defined by Elm which we have to hook such as `_Platform_initialize` and `_Scheduler_binding`
 */

if (module.hot) {
    (function () {
        "use strict";

        //polyfill for IE: https://github.com/fluxxu/elm-hot-loader/issues/16
        if (typeof Object.assign != 'function') {
            Object.assign = function (target) {
                'use strict';
                if (target == null) {
                    throw new TypeError('Cannot convert undefined or null to object');
                }

                target = Object(target);
                for (var index = 1; index < arguments.length; index++) {
                    var source = arguments[index];
                    if (source != null) {
                        for (var key in source) {
                            if (Object.prototype.hasOwnProperty.call(source, key)) {
                                target[key] = source[key];
                            }
                        }
                    }
                }
                return target;
            };
        }

        // Elm 0.19.1 introduced a '$' prefix at the beginning of the symbols it emits,
        // and we check for `Maybe.Just` because we expect it to be present in all Elm programs.
        var elmVersion;
        if (typeof elm$core$Maybe$Just !== 'undefined')
            elmVersion = '0.19.0';
        else if (typeof $elm$core$Maybe$Just !== 'undefined')
            elmVersion = '0.19.1';
        else
            throw new Error("Could not determine Elm version");

        function elmSymbol(symbol) {
            try {
                switch (elmVersion) {
                    case '0.19.0':
                        return eval(symbol);
                    case '0.19.1':
                        return eval('$' + symbol);
                    default:
                        throw new Error('Cannot resolve ' + symbol + '. Elm version unknown!')
                }
            } catch (e) {
                if (e instanceof ReferenceError) {
                    return undefined;
                } else {
                    throw e;
                }
            }
        }

        var instances = module.hot.data
            ? module.hot.data.instances || {}
            : {};
        var uid = module.hot.data
            ? module.hot.data.uid || 0
            : 0;

        if (Object.keys(instances).length === 0) {
            log("[elm-hot] Enabled");
        }

        var cancellers = [];

        // These 2 variables act as dynamically-scoped variables which are set only when the
        // Elm module's hooked init function is called.
        var initializingInstance = null;
        var swappingInstance = null;

        module.hot.accept();
        module.hot.dispose(function (data) {
            data.instances = instances;
            data.uid = uid;

            // Cleanup pending async tasks

            // First, make sure that no new tasks can be started until we finish replacing the code
            _Scheduler_binding = function () {
                return _Scheduler_fail(new Error('[elm-hot] Inactive Elm instance.'))
            };

            // Second, kill pending tasks belonging to the old instance
            if (cancellers.length) {
                log('[elm-hot] Killing ' + cancellers.length + ' running processes...');
                try {
                    cancellers.forEach(function (cancel) {
                        cancel();
                    });
                } catch (e) {
                    console.warn('[elm-hot] Kill process error: ' + e.message);
                }
            }
        });

        function log(message) {
            if (module.hot.verbose) {
                console.log(message)
            }
        }

        function getId() {
            return ++uid;
        }

        function findPublicModules(parent, path) {
            var modules = [];
            for (var key in parent) {
                var child = parent[key];
                var currentPath = path ? path + '.' + key : key;
                if ('init' in child) {
                    modules.push({
                        path: currentPath,
                        module: child
                    });
                } else {
                    modules = modules.concat(findPublicModules(child, currentPath));
                }
            }
            return modules;
        }

        function registerInstance(domNode, flags, path, portSubscribes, portSends) {
            var id = getId();

            var instance = {
                id: id,
                path: path,
                domNode: domNode,
                flags: flags,
                portSubscribes: portSubscribes,
                portSends: portSends,
                lastState: null // last Elm app state (root model)
            };

            return instances[id] = instance
        }

        function isFullscreenApp() {
            // Returns true if the Elm app will take over the entire DOM body.
            return typeof elmSymbol("elm$browser$Browser$application") !== 'undefined'
                || typeof elmSymbol("elm$browser$Browser$document") !== 'undefined';
        }

        function wrapDomNode(node) {
            // When embedding an Elm app into a specific DOM node, Elm will replace the provided
            // DOM node with the Elm app's content. When the Elm app is compiled normally, the
            // original DOM node is reused (its attributes and content changes, but the object
            // in memory remains the same). But when compiled using `--debug`, Elm will completely
            // destroy the original DOM node and instead replace it with 2 brand new nodes: one
            // for your Elm app's content and the other for the Elm debugger UI. In this case,
            // if you held a reference to the DOM node provided for embedding, it would be orphaned
            // after Elm module initialization.
            //
            // So in order to make both cases consistent and isolate us from changes in how Elm
            // does this, we will insert a dummy node to wrap the node for embedding and hold
            // a reference to the dummy node.
            //
            // We will also put a tag on the dummy node so that the Elm developer knows who went
            // behind their back and rudely put stuff in their DOM.
            var dummyNode = document.createElement("div");
            dummyNode.setAttribute("data-elm-hot", "true");
            dummyNode.style.height = "inherit";
            var parentNode = node.parentNode;
            parentNode.replaceChild(dummyNode, node);
            dummyNode.appendChild(node);
            return dummyNode;
        }

        function wrapPublicModule(path, module) {
            var originalInit = module.init;
            if (originalInit) {
                module.init = function (args) {
                    var elm;
                    var portSubscribes = {};
                    var portSends = {};
                    var domNode = null;
                    var flags = null;
                    if (typeof args !== 'undefined') {
                        // normal case
                        domNode = args['node'] && !isFullscreenApp()
                            ? wrapDomNode(args['node'])
                            : document.body;
                        flags = args['flags'];
                    } else {
                        // rare case: Elm allows init to be called without any arguments at all
                        domNode = document.body;
                        flags = undefined
                    }
                    initializingInstance = registerInstance(domNode, flags, path, portSubscribes, portSends);
                    elm = originalInit(args);
                    wrapPorts(elm, portSubscribes, portSends);
                    initializingInstance = null;
                    return elm;
                };
            } else {
                console.error("Could not find a public module to wrap at path " + path)
            }
        }

        function swap(Elm, instance) {
            log('[elm-hot] Hot-swapping module: ' + instance.path);

            swappingInstance = instance;

            // remove from the DOM everything that had been created by the old Elm app
            var containerNode = instance.domNode;
            while (containerNode.lastChild) {
                containerNode.removeChild(containerNode.lastChild);
            }

            var m = getAt(instance.path.split('.'), Elm);
            var elm;
            if (m) {
                // prepare to initialize the new Elm module
                var args = {flags: instance.flags};
                if (containerNode === document.body) {
                    // fullscreen case: no additional args needed
                } else {
                    // embed case: provide a new node for Elm to use
                    var nodeForEmbed = document.createElement("div");
                    containerNode.appendChild(nodeForEmbed);
                    args['node'] = nodeForEmbed;
                }

                elm = m.init(args);

                Object.keys(instance.portSubscribes).forEach(function (portName) {
                    if (portName in elm.ports && 'subscribe' in elm.ports[portName]) {
                        var handlers = instance.portSubscribes[portName];
                        if (!handlers.length) {
                            return;
                        }
                        log('[elm-hot] Reconnect ' + handlers.length + ' handler(s) to port \''
                            + portName + '\' (' + instance.path + ').');
                        handlers.forEach(function (handler) {
                            elm.ports[portName].subscribe(handler);
                        });
                    } else {
                        delete instance.portSubscribes[portName];
                        log('[elm-hot] Port was removed: ' + portName);
                    }
                });

                Object.keys(instance.portSends).forEach(function (portName) {
                    if (portName in elm.ports && 'send' in elm.ports[portName]) {
                        log('[elm-hot] Replace old port send with the new send');
                        instance.portSends[portName] = elm.ports[portName].send;
                    } else {
                        delete instance.portSends[portName];
                        log('[elm-hot] Port was removed: ' + portName);
                    }
                });
            } else {
                log('[elm-hot] Module was removed: ' + instance.path);
            }

            swappingInstance = null;
        }

        function wrapPorts(elm, portSubscribes, portSends) {
            var portNames = Object.keys(elm.ports || {});
            //hook ports
            if (portNames.length) {
                // hook outgoing ports
                portNames
                    .filter(function (name) {
                        return 'subscribe' in elm.ports[name];
                    })
                    .forEach(function (portName) {
                        var port = elm.ports[portName];
                        var subscribe = port.subscribe;
                        var unsubscribe = port.unsubscribe;
                        elm.ports[portName] = Object.assign(port, {
                            subscribe: function (handler) {
                                log('[elm-hot] ports.' + portName + '.subscribe called.');
                                if (!portSubscribes[portName]) {
                                    portSubscribes[portName] = [handler];
                                } else {
                                    //TODO handle subscribing to single handler more than once?
                                    portSubscribes[portName].push(handler);
                                }
                                return subscribe.call(port, handler);
                            },
                            unsubscribe: function (handler) {
                                log('[elm-hot] ports.' + portName + '.unsubscribe called.');
                                var list = portSubscribes[portName];
                                if (list && list.indexOf(handler) !== -1) {
                                    list.splice(list.lastIndexOf(handler), 1);
                                } else {
                                    console.warn('[elm-hot] ports.' + portName + '.unsubscribe: handler not subscribed');
                                }
                                return unsubscribe.call(port, handler);
                            }
                        });
                    });

                // hook incoming ports
                portNames
                    .filter(function (name) {
                        return 'send' in elm.ports[name];
                    })
                    .forEach(function (portName) {
                        var port = elm.ports[portName];
                        portSends[portName] = port.send;
                        elm.ports[portName] = Object.assign(port, {
                            send: function (val) {
                                return portSends[portName].call(port, val);
                            }
                        });
                    });
            }
            return portSubscribes;
        }

        /*
        Breadth-first search for a `Browser.Navigation.Key` in the user's app model.
        Returns the key and keypath or null if not found.
        */
        function findNavKey(rootModel) {
            var queue = [];
            if (isDebuggerModel(rootModel)) {
                /*
                 Extract the user's app model from the Elm Debugger's model. The Elm debugger
                 can hold multiple references to the user's model (e.g. in its "history"). So
                 we must be careful to only search within the "state" part of the Debugger.
                */
                queue.push({value: rootModel['state'], keypath: ['state']});
            } else {
                queue.push({value: rootModel, keypath: []});
            }

            while (queue.length !== 0) {
                var item = queue.shift();

                if (typeof item.value === "undefined" || item.value === null) {
                    continue;
                }

                // The nav key is identified by a runtime tag added by the elm-hot injector.
                if (item.value.hasOwnProperty("elm-hot-nav-key")) {
                    // found it!
                    return item;
                }

                if (typeof item.value !== "object") {
                    continue;
                }

                for (var propName in item.value) {
                    if (!item.value.hasOwnProperty(propName)) continue;
                    var newKeypath = item.keypath.slice();
                    newKeypath.push(propName);
                    queue.push({value: item.value[propName], keypath: newKeypath})
                }
            }

            return null;
        }


        function isDebuggerModel(model) {
            // Up until elm/browser 1.0.2, the Elm debugger could be identified by a
            // property named "expando". But in version 1.0.2 that was renamed to "expandoModel"
            return model
                && (model.hasOwnProperty("expando") || model.hasOwnProperty("expandoModel"))
                && model.hasOwnProperty("state");
        }

        function getAt(keyPath, obj) {
            return keyPath.reduce(function (xs, x) {
                return (xs && xs[x]) ? xs[x] : null
            }, obj)
        }

        function removeNavKeyListeners(navKey) {
            window.removeEventListener('popstate', navKey.value);
            window.navigator.userAgent.indexOf('Trident') < 0 || window.removeEventListener('hashchange', navKey.value);
        }

        // hook program creation
        var initialize = _Platform_initialize;
        _Platform_initialize = function (flagDecoder, args, init, update, subscriptions, stepperBuilder) {
            var instance = initializingInstance || swappingInstance;
            var tryFirstRender = !!swappingInstance;

            var hookedInit = function (args) {
                var initialStateTuple = init(args);
                if (swappingInstance) {
                    var oldModel = swappingInstance.lastState;
                    var newModel = initialStateTuple.a;

                    if (typeof elmSymbol("elm$browser$Browser$application") !== 'undefined') {
                        var oldKeyLoc = findNavKey(oldModel);

                        // attempt to find the Browser.Navigation.Key in the newly-constructed model
                        // and bring it along with the rest of the old data.
                        var newKeyLoc = findNavKey(newModel);
                        var error = null;
                        if (newKeyLoc === null) {
                            error = "could not find Browser.Navigation.Key in the new app model";
                        } else if (oldKeyLoc === null) {
                            error = "could not find Browser.Navigation.Key in the old app model.";
                        } else if (newKeyLoc.keypath.toString() !== oldKeyLoc.keypath.toString()) {
                            error = "the location of the Browser.Navigation.Key in the model has changed.";
                        } else {
                            // remove event listeners attached to the old nav key
                            removeNavKeyListeners(oldKeyLoc.value);

                            // insert the new nav key into the old model in the exact same location
                            var parentKeyPath = oldKeyLoc.keypath.slice(0, -1);
                            var lastSegment = oldKeyLoc.keypath.slice(-1)[0];
                            var oldParent = getAt(parentKeyPath, oldModel);
                            oldParent[lastSegment] = newKeyLoc.value;
                        }

                        if (error !== null) {
                            console.error("[elm-hot] Hot-swapping " + instance.path + " not possible: " + error);
                            oldModel = newModel;
                        }
                    }

                    // the heart of the app state hot-swap
                    initialStateTuple.a = oldModel;

                    // ignore any Cmds returned by the init during hot-swap
                    initialStateTuple.b = elmSymbol("elm$core$Platform$Cmd$none");
                } else {
                    // capture the initial state for later
                    initializingInstance.lastState = initialStateTuple.a;
                }

                return initialStateTuple
            };

            var hookedStepperBuilder = function (sendToApp, model) {
                var result;
                // first render may fail if shape of model changed too much
                if (tryFirstRender) {
                    tryFirstRender = false;
                    try {
                        result = stepperBuilder(sendToApp, model)
                    } catch (e) {
                        throw new Error('[elm-hot] Hot-swapping ' + instance.path +
                            ' is not possible, please reload page. Error: ' + e.message)
                    }
                } else {
                    result = stepperBuilder(sendToApp, model)
                }

                return function (nextModel, isSync) {
                    if (instance) {
                        // capture the state after every step so that later we can restore from it during a hot-swap
                        instance.lastState = nextModel
                    }
                    return result(nextModel, isSync)
                }
            };

            return initialize(flagDecoder, args, hookedInit, update, subscriptions, hookedStepperBuilder)
        };

        // hook process creation
        var originalBinding = _Scheduler_binding;
        _Scheduler_binding = function (originalCallback) {
            return originalBinding(function () {
                // start the scheduled process, which may return a cancellation function.
                var cancel = originalCallback.apply(this, arguments);
                if (cancel) {
                    cancellers.push(cancel);
                    return function () {
                        cancellers.splice(cancellers.indexOf(cancel), 1);
                        return cancel();
                    };
                }
                return cancel;
            });
        };

        scope['_elm_hot_loader_init'] = function (Elm) {
            // swap instances
            var removedInstances = [];
            for (var id in instances) {
                var instance = instances[id];
                if (instance.domNode.parentNode) {
                    swap(Elm, instance);
                } else {
                    removedInstances.push(id);
                }
            }

            removedInstances.forEach(function (id) {
                delete instance[id];
            });

            // wrap all public modules
            var publicModules = findPublicModules(Elm);
            publicModules.forEach(function (m) {
                wrapPublicModule(m.path, m.module);
            });
        }
    })();

    scope['_elm_hot_loader_init'](scope['Elm']);
}
//////////////////// HMR END ////////////////////


}(this));
},{}],"3gLXs":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "LiaEvents", function () {
  return LiaEvents;
});
_parcelHelpers.export(exports, "lia_eval_event", function () {
  return lia_eval_event;
});
_parcelHelpers.export(exports, "lia_execute_event", function () {
  return lia_execute_event;
});
var _log = require('./log');
var _logDefault = _parcelHelpers.interopDefault(_log);
require('./types/globals');
var _typesPorts = require('./types/ports');
var _typesPortsDefault = _parcelHelpers.interopDefault(_typesPorts);
var JS;
(function (JS) {
  JS["exec"] = "exec";
  JS["eval"] = "eval";
})(JS || (JS = {}));
window.event_semaphore = 0;
let lia_queue = [];
// Basic class for handline Code-Errors
class LiaError extends Error {
  constructor(message, files, ...params) {
    super(...params);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, LiaError);
    }
    this.message = message;
    this.details = [];
    for (let i = 0; i < files; i++) {
      this.details.push([]);
    }
  }
  add_detail(fileId, msg, type, line, column) {
    this.details[fileId].push({
      row: line,
      column: column,
      text: msg,
      type: type
    });
  }
  get_detail(msg, type, line, column = 0) {
    return {
      row: line,
      column: column,
      text: msg,
      type: type
    };
  }
  // sometimes you need to adjust the compile messages to fit into the
  // editor ... use this function to adapt the row parameters ...
  // file_id with 0 will apply the correction value to all files
  correct_lines(fileId, by) {
    if (fileId == null) {
      for (let i = 0; i < this.details.length; i++) {
        this.correct_lines(i, by);
      }
    } else {
      this.details[fileId].map(e => {
        e.row = e.row + by;
      });
    }
  }
}
;
class LiaEvents {
  constructor() {
    this.event = {};
    this.input = {};
  }
  register(name, fn) {
    this.event[name] = fn;
  }
  register_input(id1, id2, name, fn) {
    if (this.input[id1] === undefined) {
      this.input[id1] = {};
    }
    if (this.input[id1][id2] === undefined) {
      this.input[id1][id2] = {};
    }
    this.input[id1][id2][name] = fn;
  }
  dispatch_input(event) {
    try {
      this.input[event.section][event.message.section][event.message.topic](event.message.message);
    } catch (e) {
      _logDefault.default.error('unable to dispatch message', event.message);
    }
  }
  dispatch(name, data) {
    if (this.event.hasOwnProperty(name)) {
      this.event[name](data);
    }
  }
  remove(name) {
    delete this.event[name];
  }
}
;
function getLineNumber(error) {
  if (error.stack) {
    // firefox
    const firefoxRegex = /<anonymous>:(\d+):\d+/;
    if (error.stack.match(firefoxRegex)) {
      const res = error.stack.match(firefoxRegex);
      return res ? parseInt(res[1], 10) : null;
    }
    // chrome
    const chromeRegex = /<anonymous>.+:(\d+):\d+/;
    if (error.stack && error.stack.match(chromeRegex)) {
      const res = error.stack.match(chromeRegex);
      return res ? parseInt(res[1], 10) : null;
    }
  }
  return null;
}
;
function lia_wait() {
  if (window.event_semaphore > 0) {
    setTimeout(lia_wait, 100);
  } else {
    let event;
    while (event = lia_queue.pop()) {
      switch (event.type) {
        case JS.eval:
          {
            lia_eval(event.code, event.send);
            break;
          }
        case JS.exec:
          {
            lia_execute_event(event.event, event.send, event.section);
            break;
          }
        default:
          _logDefault.default.warn('lia_queue => unknown event => ', JSON.stringify(event));
      }
    }
  }
}
function lia_eval(code, send) {
  if (window.event_semaphore > 0) {
    lia_queue.push({
      type: JS.eval,
      code: code,
      send: send
    });
    if (lia_queue.length === 1) {
      lia_wait();
    }
    return;
  }
  try {
    const console = {
      debug: (...args) => {
        return send.log('debug', '\n', args);
      },
      log: (...args) => {
        return send.log('info', '\n', args);
      },
      warn: (...args) => {
        return send.log('warn', '\n', args);
      },
      error: (...args) => {
        return send.log('error', '\n', args);
      },
      html: (...args) => {
        return send.log('html', '\n', args);
      },
      clear: () => send.lia('LIA: clear')
    };
    console.clear();
    send.lia(String(eval(code + '\n')));
  } catch (e) {
    if (e instanceof LiaError) {
      send.lia(e.message, e.details, false);
    } else {
      send.lia(e.message, [], false);
    }
  }
}
;
function lia_eval_event(send, handler, event) {
  lia_eval(event.message.message, {
    lia: (result, details = [], ok = true) => {
      event.message.topic = JS.eval;
      event.message.message = {
        result: result,
        details: details,
        ok: ok
      };
      send(event);
    },
    log: (topic, sep, ...args) => {
      event.message.topic = topic;
      event.message.message = list_to_string(sep, args);
      send(event);
    },
    // service: websocket(channel),
    handle: (name, fn) => {
      const e1 = event.section;
      const e2 = event.message.section;
      handler.register_input(e1, e2, name, fn);
    },
    register: (name, fn) => {
      handler.register(name, fn);
    },
    dispatch: (name, data) => {
      handler.dispatch(name, data);
    }
  });
}
;
function list_to_string(sep, list) {
  let str = '';
  for (let i = 0; i < list[0].length; i++) {
    str += list[0][i].toString() + ' ';
  }
  return str + sep;
}
;
function execute_response(topic, event_id, send, section) {
  return (msg, details = [], ok = true) => {
    if (typeof msg !== 'string') {
      msg = JSON.stringify(msg);
    }
    send({
      topic: _typesPortsDefault.default.EFFECT,
      section: section === undefined ? -1 : section,
      message: {
        topic: topic,
        section: event_id,
        message: {
          ok: ok,
          result: msg,
          details: details
        }
      }
    });
  };
}
function lia_execute_event(event, sender, section = -1) {
  if (window.event_semaphore > 0) {
    lia_queue.push({
      type: JS.exec,
      event: event,
      send: sender,
      section: section
    });
    if (lia_queue.length === 1) {
      lia_wait();
    }
    return;
  }
  setTimeout(() => {
    let send;
    if (sender && event.id != null && section >= 0) {
      const id = event.id;
      send = {
        lia: execute_response('code', id, sender, section),
        output: execute_response('codeX', id, sender, section),
        wait: () => {
          execute_response('code', id, sender, section)('LIA: wait');
        },
        stop: () => {
          execute_response('code', id, sender, section)('LIA: stop');
        },
        html: msg => {
          execute_response('code', id, sender, section)('HTML: ' + msg);
        },
        liascript: msg => {
          execute_response('code', id, sender, section)('LIASCRIPT: ' + msg);
        }
      };
    }
    try {
      const result = eval(event.code);
      if (send != undefined && section != null && typeof event.id === 'number') {
        send.lia(result === undefined ? 'LIA: stop' : result);
      }
    } catch (e) {
      _logDefault.default.error('exec => ', e.message);
      if (!!send) send.lia(e.message, [], false);
    }
  }, event.delay);
}
;
function websocket(channel) {
  if (channel) {
    return function (eventID, message) {
      return channel.push('lia', {
        event_id: eventID,
        message: message
      });
    };
  }
}
;

},{"./log":"45sqU","./types/globals":"24T8l","./types/ports":"3WoDr","@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"45sqU":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
require('./types/globals');
const log = {
  info: function (...args) {
    if (window.debug__) console.log('⭐', ...args);
  },
  warn: function (...args) {
    if (window.debug__) console.warn('⭐', ...args);
  },
  error: function (...args) {
    console.error('⭐', ...args);
  }
};
exports.default = log;

},{"./types/globals":"24T8l","@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"24T8l":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"5gA8y":[function(require,module,exports) {
"use strict";

exports.interopDefault = function (a) {
  return a && a.__esModule ? a : {
    default: a
  };
};

exports.defineInteropFlag = function (a) {
  Object.defineProperty(a, '__esModule', {
    value: true
  });
};

exports.exportAll = function (source, dest) {
  Object.keys(source).forEach(function (key) {
    if (key === 'default' || key === '__esModule') {
      return;
    } // Skip duplicate re-exports when they have the same value.


    if (key in dest && dest[key] === source[key]) {
      return;
    }

    Object.defineProperty(dest, key, {
      enumerable: true,
      get: function () {
        return source[key];
      }
    });
  });
  return dest;
};

exports.export = function (dest, destName, get) {
  Object.defineProperty(dest, destName, {
    enumerable: true,
    get: get
  });
};
},{}],"3WoDr":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var Port;
(function (Port) {
  Port["CODE"] = "code";
  Port["EFFECT"] = "effect";
  Port["INDEX"] = "index";
  Port["INIT"] = "init";
  Port["LOAD"] = "load";
  Port["PERSISTENT"] = "persistent";
  Port["QUIZ"] = "quiz";
  Port["RESET"] = "reset";
  Port["RESTORE"] = "restore";
  Port["RESOURCE"] = "resource";
  Port["SETTINGS"] = "settings";
  Port["SHARE"] = "share";
  Port["SLIDE"] = "slide";
  Port["SURVEY"] = "survey";
  Port["SWIPE"] = "swipe";
  Port["TASK"] = "task";
})(Port || (Port = {}));
exports.default = Port;

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"3GInx":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "detect", function () {
  return detect;
});
_parcelHelpers.export(exports, "Dir", function () {
  return Dir;
});
var Dir;
(function (Dir) {
  Dir["none"] = "none";
  Dir["left"] = "left";
  Dir["right"] = "right";
  Dir["up"] = "up";
  Dir["down"] = "down";
})(Dir || (Dir = {}));
function detect(el, callback) {
  let touchsurface = el;
  let swipedir;
  let startX;
  let startY;
  let distX;
  let distY;
  let threshold = 150;
  let restraint = 100;
  let allowedTime = 300;
  let elapsedTime;
  let startTime;
  let ismousedown = false;
  let detecttouch = !!(('ontouchstart' in window)) || !!(('ontouchstart' in document.documentElement)) || !!window.ontouchstart || !!window.Touch || !!window.onmsgesturechange;
  // || (window.DocumentTouch && window.document instanceof window.DocumentTouch)
  let handleswipe = callback || (function (_) {});
  function isContained(m, e) {
    if (!e) {
      e = window.event;
    }
    if (typeof e === 'undefined') return false;
    let c = (/(click)|(mousedown)|(mouseup)/i).test(e.type) ? e.target : e.relatedTarget || (e.type === 'mouseover' ? e.fromElement : e.toElement);
    while (c && c !== m) {
      try {
        c = c.parentNode;
      } catch (_) {
        c = m;
      }
    }
    return c === m;
  }
  touchsurface.addEventListener('touchstart', function (e) {
    let touchobj = e.changedTouches[0];
    swipedir = Dir.none;
    startX = touchobj.pageX;
    startY = touchobj.pageY;
    startTime = new Date().getTime();
  }, {
    passive: true
  });
  touchsurface.addEventListener('touchmove', function (_) {}, {
    passive: true
  });
  touchsurface.addEventListener('touchend', function (e) {
    let touchobj = e.changedTouches[0];
    distX = touchobj.pageX - startX;
    // get horizontal dist traveled by finger while in contact with surface
    distY = touchobj.pageY - startY;
    // get vertical dist traveled by finger while in contact with surface
    elapsedTime = new Date().getTime() - startTime;
    // get time elapsed
    if (elapsedTime <= allowedTime) {
      // first condition for awipe met
      if (Math.abs(distX) >= threshold && Math.abs(distY) <= restraint) {
        // 2nd condition for horizontal swipe met
        swipedir = distX < 0 ? Dir.left : Dir.right;
      } else if (Math.abs(distY) >= threshold && Math.abs(distX) <= restraint) {
        // 2nd condition for vertical swipe met
        swipedir = distY < 0 ? Dir.up : Dir.down;
      }
    }
    // check that elapsed time is within specified, horizontal dist traveled >= threshold, and vertical dist traveled <= 100
    if (swipedir !== Dir.none) handleswipe(swipedir);
  }, {
    passive: true
  });
  if (!detecttouch) {
    document.body.addEventListener('mousedown', function (e) {
      if (isContained(touchsurface, e)) {
        let touchobj = e;
        swipedir = Dir.none;
        startX = touchobj.pageX;
        startY = touchobj.pageY;
        startTime = new Date().getTime();
        // record time when finger first makes contact with surface
        ismousedown = true;
      }
    }, {
      passive: true
    });
    document.body.addEventListener('mousemove', function (_e) {}, {
      passive: true
    });
    document.body.addEventListener('mouseup', function (e) {
      if (ismousedown) {
        let touchobj = e;
        distX = touchobj.pageX - startX;
        // get horizontal dist traveled by finger while in contact with surface
        distY = touchobj.pageY - startY;
        // get vertical dist traveled by finger while in contact with surface
        elapsedTime = new Date().getTime() - startTime;
        // get time elapsed
        if (elapsedTime <= allowedTime) {
          // first condition for awipe met
          if (Math.abs(distX) >= threshold && Math.abs(distY) <= restraint) {
            // 2nd condition for horizontal swipe met
            swipedir = distX < 0 ? Dir.left : Dir.right;
          } else if (Math.abs(distY) >= threshold && Math.abs(distX) <= restraint) {
            // 2nd condition for vertical swipe met
            swipedir = distY < 0 ? Dir.up : Dir.down;
          }
        }
        // check that elapsed time is within specified, horizontal dist traveled >= threshold, and vertical dist traveled <= 100
        if (swipedir !== Dir.none) handleswipe(swipedir);
        ismousedown = false;
      }
    }, {
      passive: true
    });
  }
}
;

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"2weYa":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
require('./types/responsiveVoice');
const TTS = {
  inject: function (key) {
    if (typeof key === "string") {
      setTimeout(function () {
        const script = document.createElement("script");
        script.src = "https://code.responsivevoice.org/responsivevoice.js?key=" + key;
        script.async = true;
        script.defer = true;
        document.head.appendChild(script);
        script.onload = () => {
          window.responsiveVoice.init();
        };
      }, 250);
    }
  },
  cancel: function () {
    window.responsiveVoice.cancel();
  },
  speak: function (text, voice, onstart, onend, onerror) {
    window.responsiveVoice.speak(text, voice, {
      onstart: onstart,
      onend: onend,
      onerror: onerror
    });
  }
};
exports.default = TTS;

},{"./types/responsiveVoice":"5VUx5","@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"5VUx5":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"2WpIg":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "Connector", function () {
  return Connector;
});
var _liascriptTypesPorts = require('../../liascript/types/ports');
var _liascriptTypesPortsDefault = _parcelHelpers.interopDefault(_liascriptTypesPorts);
var _database = require('./database');
var _BaseIndex = require('../Base/index');
class Connector extends _BaseIndex.Connector {
  hasIndex() {
    return true;
  }
  connect(send) {
    if (send) {
      this.send = send;
    }
    this.database = new _database.LiaDB(this.send);
    this.initSettings(this.getSettings(), true);
  }
  open(uidDB, versionDB, slide, _data) {
    if (this.database) this.database.open(uidDB, versionDB, {
      topic: _liascriptTypesPortsDefault.default.CODE,
      section: slide,
      message: {
        topic: _liascriptTypesPortsDefault.default.RESTORE,
        section: -1,
        message: null
      }
    });
  }
  load(event) {
    if (this.database) this.database.load(event);
  }
  store(event) {
    if (this.database) this.database.store(event);
  }
  update(event, id) {
    if (this.database) this.database.update(event, id);
  }
  slide(id) {
    if (this.database) this.database.slide(id);
  }
  getIndex() {
    if (this.database) this.database.listIndex();
  }
  deleteFromIndex(uidDB) {
    if (this.database) this.database.deleteIndex(uidDB);
  }
  storeToIndex(json) {
    if (this.database) this.database.storeIndex(json);
  }
  restoreFromIndex(uidDB, versionDB) {
    if (this.database) this.database.restore(uidDB, versionDB);
  }
  reset(uidDB, versionDB) {
    if (this.database && uidDB && versionDB) this.database.reset(uidDB, versionDB);
  }
  getFromIndex(uidDB) {
    if (this.database) this.database.getIndex(uidDB);
  }
}

},{"../../liascript/types/ports":"3WoDr","./database":"7thgZ","../Base/index":"5xDiv","@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"7thgZ":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "LiaDB", function () {
  return LiaDB;
});
var _dexie = require('dexie');
var _dexieDefault = _parcelHelpers.interopDefault(_dexie);
var _liascriptTypesPorts = require('../../liascript/types/ports');
var _liascriptTypesPortsDefault = _parcelHelpers.interopDefault(_liascriptTypesPorts);
var _liascriptLog = require('../../liascript/log');
var _liascriptLogDefault = _parcelHelpers.interopDefault(_liascriptLog);
if ("development" === 'development') {
  _dexieDefault.default.debug = true;
}
class LiaDB {
  constructor(send) {
    this.send = send;
    this.dbIndex = new _dexieDefault.default('Index');
    this.dbIndex.version(1).stores({
      courses: '&id,updated,author,created,title'
    });
    this.version = 0;
  }
  open_(uidDB) {
    let db = new _dexieDefault.default(uidDB);
    db.version(1).stores({
      code: '[id+version], version',
      quiz: '[id+version], version',
      survey: '[id+version], version',
      task: '[id+version], version',
      offline: '[id+version], version'
    });
    return db;
  }
  async open(uidDB, versionDB, init) {
    this.version = versionDB;
    this.db = this.open_(uidDB);
    await this.db.open();
    if (init) {
      const item = await this.db[init.topic].get({
        id: init.section,
        version: versionDB
      });
      if (!!item) {
        if (item.data) {
          init.message.message = item.data;
        }
        this.send(init);
      }
    }
  }
  async store(event, versionDB) {
    if (!this.db || this.version === 0) return;
    _liascriptLogDefault.default.warn(`liaDB: event(store), table(${event.topic}), id(${event.section}), data(${event.message})`);
    await this.db[event.topic].put({
      id: event.section,
      version: versionDB != null ? versionDB : this.version,
      data: event.message,
      created: new Date().getTime()
    });
  }
  async load(event, versionDB) {
    if (!this.db) return;
    _liascriptLogDefault.default.info('loading => ', event.topic, event.section);
    const item = await this.db[event.topic].get({
      id: event.section,
      version: versionDB != undefined ? versionDB : this.version
    });
    if (item) {
      _liascriptLogDefault.default.info('restore table', event.topic);
      // , e._value.data)
      event.message = {
        topic: _liascriptTypesPortsDefault.default.RESTORE,
        section: -1,
        message: item.data
      };
      this.send(event);
    } else if (event.topic === _liascriptTypesPortsDefault.default.CODE) {
      event.message = {
        topic: _liascriptTypesPortsDefault.default.RESTORE,
        section: -1,
        message: null
      };
      this.send(event);
    }
  }
  del() {
    if (!this.db) return;
    const name = this.db.name;
    this.db.delete().then(() => {
      _liascriptLogDefault.default.info('database deleted: ', name);
    }).catch(err => {
      _liascriptLogDefault.default.error('error deleting database: ', name, err);
    });
  }
  async slide(id) {
    try {
      let data = await this.db.offline.get({
        id: 0,
        version: this.version
      });
      data.data.section_active = id;
      await this.db.offline.put(data);
    } catch (e) {}
  }
  async update(event, slide) {
    if (!this.db || this.version === 0) return;
    let db = this.db;
    await db.transaction('rw', db.code, async () => {
      const vector = await db.code.get({
        id: slide,
        version: this.version
      });
      if (vector.data) {
        let project = vector.data[event.section];
        switch (event.topic) {
          case 'flip':
            {
              if (event.message.topic === 'view') {
                project.file[event.message.section].visible = event.message.message;
              } else if (event.message.topic === 'fullscreen') {
                project.file[event.message.section].fullscreen = event.message.message;
              }
              break;
            }
          case 'load':
            {
              let e_ = event.message;
              project.version_active = e_.version_active;
              project.log = e_.log;
              project.file = e_.file;
              break;
            }
          case 'version_update':
            {
              let e_ = event.message;
              project.version_active = e_.version_active;
              project.log = e_.log;
              project.version[e_.version_active] = e_.version;
              break;
            }
          case 'version_append':
            {
              let e_ = event.message;
              project.version_active = e_.version_active;
              project.log = e_.log;
              project.file = e_.file;
              project.version.push(e_.version);
              project.repository = {
                ...project.repository,
                ...e_.repository
              };
              break;
            }
          default:
            {
              _liascriptLogDefault.default.warn('unknown update cmd: ', event);
            }
        }
        vector.data[event.section] = project;
        await db.code.put(vector);
      }
    });
  }
  async restore(uidDB, versionDB) {
    const course = await this.dbIndex.courses.get(uidDB);
    if (course) {
      // let latest = parseInt(Object.keys(course.data).sort().reverse())
      let db = this.open_(uidDB);
      const offline = await db.offline.get({
        id: 0,
        version: versionDB != null ? versionDB : this.version
      });
      this.send({
        topic: _liascriptTypesPortsDefault.default.RESTORE,
        message: offline === undefined ? null : offline.data,
        section: -1
      });
    }
  }
  async getIndex(uidDB) {
    const course = await this.dbIndex.courses.get(uidDB);
    this.send({
      topic: 'getIndex',
      message: {
        id: uidDB,
        course: course
      },
      section: -1
    });
  }
  async listIndex(order = 'updated', desc = false) {
    const courses = await this.dbIndex.courses.orderBy(order).toArray();
    if (!desc) {
      courses.reverse();
    }
    this.send({
      topic: _liascriptTypesPortsDefault.default.INDEX,
      section: -1,
      message: {
        list: courses
      }
    });
  }
  async storeIndex(data) {
    let date = new Date();
    let item = await this.dbIndex.courses.get(data.readme);
    if (!item) {
      item = {
        id: data.readme,
        title: data.definition.str_title,
        author: data.definition.author,
        data: {},
        created: date.getTime(),
        updated: null,
        updated_str: null
      };
    }
    item.updated = date.getTime();
    item.updated_str = date.toLocaleDateString();
    if (!item.data[data.version]) {
      item.data[data.version] = data.definition;
      item.data[data.version]['title'] = data.title;
      _liascriptLogDefault.default.info('storing new version to index', item);
      await this.db.offline.put({
        id: 0,
        version: data.version,
        data: data,
        created: date.getTime()
      });
    } else if (item.data[data.version].version !== data.definition.version) {
      item.data[data.version] = data.definition;
      item.data[data.version]['title'] = data.title;
      _liascriptLogDefault.default.info('storing new version to index', item);
      let db = this.open_(data.readme);
      await db.open();
      await db.offline.put({
        id: 0,
        version: data.version,
        data: data,
        created: date.getTime()
      });
    }
    this.dbIndex.courses.put(item);
  }
  async deleteIndex(uidDB) {
    await Promise.all([this.dbIndex.courses.delete(uidDB), _dexieDefault.default.delete(uidDB)]);
  }
  async reset(uidDB, versionDB) {
    let db = this.open_(uidDB);
    await db.open();
    await Promise.all([db.code.where('version').equals(versionDB).delete(), db.quiz.where('version').equals(versionDB).delete(), db.survey.where('version').equals(versionDB).delete()]);
  }
}
;

},{"dexie":"4sKdW","../../liascript/types/ports":"3WoDr","../../liascript/log":"45sqU","@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"4sKdW":[function(require,module,exports) {
var define;
var global = arguments[3];
/*
* Dexie.js - a minimalistic wrapper for IndexedDB
* ===============================================
*
* By David Fahlander, david.fahlander@gmail.com
*
* Version 2.0.4, Fri May 25 2018
*
* http://dexie.org
*
* Apache License Version 2.0, January 2004, http://www.apache.org/licenses/
*/
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.Dexie = factory();
})(this, function () {
  "use strict";
  var keys = Object.keys;
  var isArray = Array.isArray;
  var _global = typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : global;
  function extend(obj, extension) {
    if (typeof extension !== 'object') return obj;
    keys(extension).forEach(function (key) {
      obj[key] = extension[key];
    });
    return obj;
  }
  var getProto = Object.getPrototypeOf;
  var _hasOwn = ({}).hasOwnProperty;
  function hasOwn(obj, prop) {
    return _hasOwn.call(obj, prop);
  }
  function props(proto, extension) {
    if (typeof extension === 'function') extension = extension(getProto(proto));
    keys(extension).forEach(function (key) {
      setProp(proto, key, extension[key]);
    });
  }
  var defineProperty = Object.defineProperty;
  function setProp(obj, prop, functionOrGetSet, options) {
    defineProperty(obj, prop, extend(functionOrGetSet && hasOwn(functionOrGetSet, "get") && typeof functionOrGetSet.get === 'function' ? {
      get: functionOrGetSet.get,
      set: functionOrGetSet.set,
      configurable: true
    } : {
      value: functionOrGetSet,
      configurable: true,
      writable: true
    }, options));
  }
  function derive(Child) {
    return {
      from: function (Parent) {
        Child.prototype = Object.create(Parent.prototype);
        setProp(Child.prototype, "constructor", Child);
        return {
          extend: props.bind(null, Child.prototype)
        };
      }
    };
  }
  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  function getPropertyDescriptor(obj, prop) {
    var pd = getOwnPropertyDescriptor(obj, prop), proto;
    return pd || (proto = getProto(obj)) && getPropertyDescriptor(proto, prop);
  }
  var _slice = [].slice;
  function slice(args, start, end) {
    return _slice.call(args, start, end);
  }
  function override(origFunc, overridedFactory) {
    return overridedFactory(origFunc);
  }
  function assert(b) {
    if (!b) throw new Error("Assertion Failed");
  }
  function asap(fn) {
    if (_global.setImmediate) setImmediate(fn); else setTimeout(fn, 0);
  }
  /** Generate an object (hash map) based on given array.
  * @param extractor Function taking an array item and its index and returning an array of 2 items ([key, value]) to
  *        instert on the resulting object for each item in the array. If this function returns a falsy value, the
  *        current item wont affect the resulting object.
  */
  function arrayToObject(array, extractor) {
    return array.reduce(function (result, item, i) {
      var nameAndValue = extractor(item, i);
      if (nameAndValue) result[nameAndValue[0]] = nameAndValue[1];
      return result;
    }, {});
  }
  function trycatcher(fn, reject) {
    return function () {
      try {
        fn.apply(this, arguments);
      } catch (e) {
        reject(e);
      }
    };
  }
  function tryCatch(fn, onerror, args) {
    try {
      fn.apply(null, args);
    } catch (ex) {
      onerror && onerror(ex);
    }
  }
  function getByKeyPath(obj, keyPath) {
    // http://www.w3.org/TR/IndexedDB/#steps-for-extracting-a-key-from-a-value-using-a-key-path
    if (hasOwn(obj, keyPath)) return obj[keyPath];
    // This line is moved from last to first for optimization purpose.
    if (!keyPath) return obj;
    if (typeof keyPath !== 'string') {
      var rv = [];
      for (var i = 0, l = keyPath.length; i < l; ++i) {
        var val = getByKeyPath(obj, keyPath[i]);
        rv.push(val);
      }
      return rv;
    }
    var period = keyPath.indexOf('.');
    if (period !== -1) {
      var innerObj = obj[keyPath.substr(0, period)];
      return innerObj === undefined ? undefined : getByKeyPath(innerObj, keyPath.substr(period + 1));
    }
    return undefined;
  }
  function setByKeyPath(obj, keyPath, value) {
    if (!obj || keyPath === undefined) return;
    if (('isFrozen' in Object) && Object.isFrozen(obj)) return;
    if (typeof keyPath !== 'string' && ('length' in keyPath)) {
      assert(typeof value !== 'string' && ('length' in value));
      for (var i = 0, l = keyPath.length; i < l; ++i) {
        setByKeyPath(obj, keyPath[i], value[i]);
      }
    } else {
      var period = keyPath.indexOf('.');
      if (period !== -1) {
        var currentKeyPath = keyPath.substr(0, period);
        var remainingKeyPath = keyPath.substr(period + 1);
        if (remainingKeyPath === "") if (value === undefined) delete obj[currentKeyPath]; else obj[currentKeyPath] = value; else {
          var innerObj = obj[currentKeyPath];
          if (!innerObj) innerObj = obj[currentKeyPath] = {};
          setByKeyPath(innerObj, remainingKeyPath, value);
        }
      } else {
        if (value === undefined) delete obj[keyPath]; else obj[keyPath] = value;
      }
    }
  }
  function delByKeyPath(obj, keyPath) {
    if (typeof keyPath === 'string') setByKeyPath(obj, keyPath, undefined); else if (('length' in keyPath)) [].map.call(keyPath, function (kp) {
      setByKeyPath(obj, kp, undefined);
    });
  }
  function shallowClone(obj) {
    var rv = {};
    for (var m in obj) {
      if (hasOwn(obj, m)) rv[m] = obj[m];
    }
    return rv;
  }
  var concat = [].concat;
  function flatten(a) {
    return concat.apply([], a);
  }
  // https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm
  var intrinsicTypes = ("Boolean,String,Date,RegExp,Blob,File,FileList,ArrayBuffer,DataView,Uint8ClampedArray,ImageData,Map,Set").split(',').concat(flatten([8, 16, 32, 64].map(function (num) {
    return ["Int", "Uint", "Float"].map(function (t) {
      return t + num + "Array";
    });
  }))).filter(function (t) {
    return _global[t];
  }).map(function (t) {
    return _global[t];
  });
  function deepClone(any) {
    if (!any || typeof any !== 'object') return any;
    var rv;
    if (isArray(any)) {
      rv = [];
      for (var i = 0, l = any.length; i < l; ++i) {
        rv.push(deepClone(any[i]));
      }
    } else if (intrinsicTypes.indexOf(any.constructor) >= 0) {
      rv = any;
    } else {
      rv = any.constructor ? Object.create(any.constructor.prototype) : {};
      for (var prop in any) {
        if (hasOwn(any, prop)) {
          rv[prop] = deepClone(any[prop]);
        }
      }
    }
    return rv;
  }
  function getObjectDiff(a, b, rv, prfx) {
    // Compares objects a and b and produces a diff object.
    rv = rv || ({});
    prfx = prfx || '';
    keys(a).forEach(function (prop) {
      if (!hasOwn(b, prop)) rv[prfx + prop] = undefined; else // Property removed
      {
        var ap = a[prop], bp = b[prop];
        if (typeof ap === 'object' && typeof bp === 'object' && ap && bp && // Now compare constructors are same (not equal because wont work in Safari)
        '' + ap.constructor === '' + bp.constructor) // Same type of object but its properties may have changed
        getObjectDiff(ap, bp, rv, prfx + prop + "."); else if (ap !== bp) rv[prfx + prop] = b[prop];
      }
    });
    keys(b).forEach(function (prop) {
      if (!hasOwn(a, prop)) {
        rv[prfx + prop] = b[prop];
      }
    });
    return rv;
  }
  // If first argument is iterable or array-like, return it as an array
  var iteratorSymbol = typeof Symbol !== 'undefined' && Symbol.iterator;
  var getIteratorOf = iteratorSymbol ? function (x) {
    var i;
    return x != null && (i = x[iteratorSymbol]) && i.apply(x);
  } : function () {
    return null;
  };
  var NO_CHAR_ARRAY = {};
  // Takes one or several arguments and returns an array based on the following criteras:
  // * If several arguments provided, return arguments converted to an array in a way that
  // still allows javascript engine to optimize the code.
  // * If single argument is an array, return a clone of it.
  // * If this-pointer equals NO_CHAR_ARRAY, don't accept strings as valid iterables as a special
  // case to the two bullets below.
  // * If single argument is an iterable, convert it to an array and return the resulting array.
  // * If single argument is array-like (has length of type number), convert it to an array.
  function getArrayOf(arrayLike) {
    var i, a, x, it;
    if (arguments.length === 1) {
      if (isArray(arrayLike)) return arrayLike.slice();
      if (this === NO_CHAR_ARRAY && typeof arrayLike === 'string') return [arrayLike];
      if (it = getIteratorOf(arrayLike)) {
        a = [];
        while ((x = it.next(), !x.done)) a.push(x.value);
        return a;
      }
      if (arrayLike == null) return [arrayLike];
      i = arrayLike.length;
      if (typeof i === 'number') {
        a = new Array(i);
        while (i--) a[i] = arrayLike[i];
        return a;
      }
      return [arrayLike];
    }
    i = arguments.length;
    a = new Array(i);
    while (i--) a[i] = arguments[i];
    return a;
  }
  // By default, debug will be true only if platform is a web platform and its page is served from localhost.
  // When debug = true, error's stacks will contain asyncronic long stacks.
  var debug = typeof location !== 'undefined' && // By default, use debug mode if served from localhost.
  (/^(http|https):\/\/(localhost|127\.0\.0\.1)/).test(location.href);
  function setDebug(value, filter) {
    debug = value;
    libraryFilter = filter;
  }
  var libraryFilter = function () {
    return true;
  };
  var NEEDS_THROW_FOR_STACK = !new Error("").stack;
  function getErrorWithStack() {
    "use strict";
    if (NEEDS_THROW_FOR_STACK) try {
      // Doing something naughty in strict mode here to trigger a specific error
      // that can be explicitely ignored in debugger's exception settings.
      // If we'd just throw new Error() here, IE's debugger's exception settings
      // will just consider it as "exception thrown by javascript code" which is
      // something you wouldn't want it to ignore.
      getErrorWithStack.arguments;
      throw new Error();
    } catch (e) {
      return e;
    }
    return new Error();
  }
  function prettyStack(exception, numIgnoredFrames) {
    var stack = exception.stack;
    if (!stack) return "";
    numIgnoredFrames = numIgnoredFrames || 0;
    if (stack.indexOf(exception.name) === 0) numIgnoredFrames += (exception.name + exception.message).split('\n').length;
    return stack.split('\n').slice(numIgnoredFrames).filter(libraryFilter).map(function (frame) {
      return "\n" + frame;
    }).join('');
  }
  function deprecated(what, fn) {
    return function () {
      console.warn(what + " is deprecated. See https://github.com/dfahlander/Dexie.js/wiki/Deprecations. " + prettyStack(getErrorWithStack(), 1));
      return fn.apply(this, arguments);
    };
  }
  var dexieErrorNames = ['Modify', 'Bulk', 'OpenFailed', 'VersionChange', 'Schema', 'Upgrade', 'InvalidTable', 'MissingAPI', 'NoSuchDatabase', 'InvalidArgument', 'SubTransaction', 'Unsupported', 'Internal', 'DatabaseClosed', 'PrematureCommit', 'ForeignAwait'];
  var idbDomErrorNames = ['Unknown', 'Constraint', 'Data', 'TransactionInactive', 'ReadOnly', 'Version', 'NotFound', 'InvalidState', 'InvalidAccess', 'Abort', 'Timeout', 'QuotaExceeded', 'Syntax', 'DataClone'];
  var errorList = dexieErrorNames.concat(idbDomErrorNames);
  var defaultTexts = {
    VersionChanged: "Database version changed by other database connection",
    DatabaseClosed: "Database has been closed",
    Abort: "Transaction aborted",
    TransactionInactive: "Transaction has already completed or failed"
  };
  // 
  // DexieError - base class of all out exceptions.
  // 
  function DexieError(name, msg) {
    // Reason we don't use ES6 classes is because:
    // 1. It bloats transpiled code and increases size of minified code.
    // 2. It doesn't give us much in this case.
    // 3. It would require sub classes to call super(), which
    // is not needed when deriving from Error.
    this._e = getErrorWithStack();
    this.name = name;
    this.message = msg;
  }
  derive(DexieError).from(Error).extend({
    stack: {
      get: function () {
        return this._stack || (this._stack = this.name + ": " + this.message + prettyStack(this._e, 2));
      }
    },
    toString: function () {
      return this.name + ": " + this.message;
    }
  });
  function getMultiErrorMessage(msg, failures) {
    return msg + ". Errors: " + failures.map(function (f) {
      return f.toString();
    }).filter(function (v, i, s) {
      return s.indexOf(v) === i;
    }).// Only unique error strings
    join('\n');
  }
  // 
  // ModifyError - thrown in Collection.modify()
  // Specific constructor because it contains members failures and failedKeys.
  // 
  function ModifyError(msg, failures, successCount, failedKeys) {
    this._e = getErrorWithStack();
    this.failures = failures;
    this.failedKeys = failedKeys;
    this.successCount = successCount;
  }
  derive(ModifyError).from(DexieError);
  function BulkError(msg, failures) {
    this._e = getErrorWithStack();
    this.name = "BulkError";
    this.failures = failures;
    this.message = getMultiErrorMessage(msg, failures);
  }
  derive(BulkError).from(DexieError);
  // 
  // 
  // Dynamically generate error names and exception classes based
  // on the names in errorList.
  // 
  // 
  // Map of {ErrorName -> ErrorName + "Error"}
  var errnames = errorList.reduce(function (obj, name) {
    return (obj[name] = name + "Error", obj);
  }, {});
  // Need an alias for DexieError because we're gonna create subclasses with the same name.
  var BaseException = DexieError;
  // Map of {ErrorName -> exception constructor}
  var exceptions = errorList.reduce(function (obj, name) {
    // Let the name be "DexieError" because this name may
    // be shown in call stack and when debugging. DexieError is
    // the most true name because it derives from DexieError,
    // and we cannot change Function.name programatically without
    // dynamically create a Function object, which would be considered
    // 'eval-evil'.
    var fullName = name + "Error";
    function DexieError(msgOrInner, inner) {
      this._e = getErrorWithStack();
      this.name = fullName;
      if (!msgOrInner) {
        this.message = defaultTexts[name] || fullName;
        this.inner = null;
      } else if (typeof msgOrInner === 'string') {
        this.message = msgOrInner;
        this.inner = inner || null;
      } else if (typeof msgOrInner === 'object') {
        this.message = msgOrInner.name + " " + msgOrInner.message;
        this.inner = msgOrInner;
      }
    }
    derive(DexieError).from(BaseException);
    obj[name] = DexieError;
    return obj;
  }, {});
  // Use ECMASCRIPT standard exceptions where applicable:
  exceptions.Syntax = SyntaxError;
  exceptions.Type = TypeError;
  exceptions.Range = RangeError;
  var exceptionMap = idbDomErrorNames.reduce(function (obj, name) {
    obj[name + "Error"] = exceptions[name];
    return obj;
  }, {});
  function mapError(domError, message) {
    if (!domError || domError instanceof DexieError || domError instanceof TypeError || domError instanceof SyntaxError || !domError.name || !exceptionMap[domError.name]) return domError;
    var rv = new exceptionMap[domError.name](message || domError.message, domError);
    if (("stack" in domError)) {
      // Derive stack from inner exception if it has a stack
      setProp(rv, "stack", {
        get: function () {
          return this.inner.stack;
        }
      });
    }
    return rv;
  }
  var fullNameExceptions = errorList.reduce(function (obj, name) {
    if (["Syntax", "Type", "Range"].indexOf(name) === -1) obj[name + "Error"] = exceptions[name];
    return obj;
  }, {});
  fullNameExceptions.ModifyError = ModifyError;
  fullNameExceptions.DexieError = DexieError;
  fullNameExceptions.BulkError = BulkError;
  function nop() {}
  function mirror(val) {
    return val;
  }
  function pureFunctionChain(f1, f2) {
    // Enables chained events that takes ONE argument and returns it to the next function in chain.
    // This pattern is used in the hook("reading") event.
    if (f1 == null || f1 === mirror) return f2;
    return function (val) {
      return f2(f1(val));
    };
  }
  function callBoth(on1, on2) {
    return function () {
      on1.apply(this, arguments);
      on2.apply(this, arguments);
    };
  }
  function hookCreatingChain(f1, f2) {
    // Enables chained events that takes several arguments and may modify first argument by making a modification and then returning the same instance.
    // This pattern is used in the hook("creating") event.
    if (f1 === nop) return f2;
    return function () {
      var res = f1.apply(this, arguments);
      if (res !== undefined) arguments[0] = res;
      var onsuccess = this.onsuccess, // In case event listener has set this.onsuccess
      onerror = this.onerror;
      // In case event listener has set this.onerror
      this.onsuccess = null;
      this.onerror = null;
      var res2 = f2.apply(this, arguments);
      if (onsuccess) this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
      if (onerror) this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
      return res2 !== undefined ? res2 : res;
    };
  }
  function hookDeletingChain(f1, f2) {
    if (f1 === nop) return f2;
    return function () {
      f1.apply(this, arguments);
      var onsuccess = this.onsuccess, // In case event listener has set this.onsuccess
      onerror = this.onerror;
      // In case event listener has set this.onerror
      this.onsuccess = this.onerror = null;
      f2.apply(this, arguments);
      if (onsuccess) this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
      if (onerror) this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
    };
  }
  function hookUpdatingChain(f1, f2) {
    if (f1 === nop) return f2;
    return function (modifications) {
      var res = f1.apply(this, arguments);
      extend(modifications, res);
      // If f1 returns new modifications, extend caller's modifications with the result before calling next in chain.
      var onsuccess = this.onsuccess, // In case event listener has set this.onsuccess
      onerror = this.onerror;
      // In case event listener has set this.onerror
      this.onsuccess = null;
      this.onerror = null;
      var res2 = f2.apply(this, arguments);
      if (onsuccess) this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
      if (onerror) this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
      return res === undefined ? res2 === undefined ? undefined : res2 : extend(res, res2);
    };
  }
  function reverseStoppableEventChain(f1, f2) {
    if (f1 === nop) return f2;
    return function () {
      if (f2.apply(this, arguments) === false) return false;
      return f1.apply(this, arguments);
    };
  }
  function promisableChain(f1, f2) {
    if (f1 === nop) return f2;
    return function () {
      var res = f1.apply(this, arguments);
      if (res && typeof res.then === 'function') {
        var thiz = this, i = arguments.length, args = new Array(i);
        while (i--) args[i] = arguments[i];
        return res.then(function () {
          return f2.apply(thiz, args);
        });
      }
      return f2.apply(this, arguments);
    };
  }
  /*
  * Copyright (c) 2014-2017 David Fahlander
  * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/LICENSE-2.0
  */
  // 
  // Promise and Zone (PSD) for Dexie library
  // 
  // I started out writing this Promise class by copying promise-light (https://github.com/taylorhakes/promise-light) by
  // https://github.com/taylorhakes - an A+ and ECMASCRIPT 6 compliant Promise implementation.
  // 
  // In previous versions this was fixed by not calling setTimeout when knowing that the resolve() or reject() came from another
  // tick. In Dexie v1.4.0, I've rewritten the Promise class entirely. Just some fragments of promise-light is left. I use
  // another strategy now that simplifies everything a lot: to always execute callbacks in a new micro-task, but have an own micro-task
  // engine that is indexedDB compliant across all browsers.
  // Promise class has also been optimized a lot with inspiration from bluebird - to avoid closures as much as possible.
  // Also with inspiration from bluebird, asyncronic stacks in debug mode.
  // 
  // Specific non-standard features of this Promise class:
  // * Custom zone support (a.k.a. PSD) with ability to keep zones also when using native promises as well as
  // native async / await.
  // * Promise.follow() method built upon the custom zone engine, that allows user to track all promises created from current stack frame
  // and below + all promises that those promises creates or awaits.
  // * Detect any unhandled promise in a PSD-scope (PSD.onunhandled).
  // 
  // David Fahlander, https://github.com/dfahlander
  // 
  // Just a pointer that only this module knows about.
  // Used in Promise constructor to emulate a private constructor.
  var INTERNAL = {};
  // Async stacks (long stacks) must not grow infinitely.
  var LONG_STACKS_CLIP_LIMIT = 100;
  var MAX_LONG_STACKS = 20;
  var ZONE_ECHO_LIMIT = 7;
  var nativePromiseInstanceAndProto = (function () {
    try {
      // Be able to patch native async functions
      return new Function("let F=async ()=>{},p=F();return [p,Object.getPrototypeOf(p),Promise.resolve(),F.constructor];")();
    } catch (e) {
      var P = _global.Promise;
      return P ? [P.resolve(), P.prototype, P.resolve()] : [];
    }
  })();
  var resolvedNativePromise = nativePromiseInstanceAndProto[0];
  var nativePromiseProto = nativePromiseInstanceAndProto[1];
  var resolvedGlobalPromise = nativePromiseInstanceAndProto[2];
  var nativePromiseThen = nativePromiseProto && nativePromiseProto.then;
  var NativePromise = resolvedNativePromise && resolvedNativePromise.constructor;
  var AsyncFunction = nativePromiseInstanceAndProto[3];
  var patchGlobalPromise = !!resolvedGlobalPromise;
  var stack_being_generated = false;
  /*The default function used only for the very first promise in a promise chain.
  As soon as then promise is resolved or rejected, all next tasks will be executed in micro ticks
  emulated in this module. For indexedDB compatibility, this means that every method needs to
  execute at least one promise before doing an indexedDB operation. Dexie will always call
  db.ready().then() for every operation to make sure the indexedDB event is started in an
  indexedDB-compatible emulated micro task loop.
  */
  var schedulePhysicalTick = resolvedGlobalPromise ? function () {
    resolvedGlobalPromise.then(physicalTick);
  } : _global.setImmediate ? // setImmediate supported. Those modern platforms also supports Function.bind().
  setImmediate.bind(null, physicalTick) : _global.MutationObserver ? // MutationObserver supported
  function () {
    var hiddenDiv = document.createElement("div");
    new MutationObserver(function () {
      physicalTick();
      hiddenDiv = null;
    }).observe(hiddenDiv, {
      attributes: true
    });
    hiddenDiv.setAttribute('i', '1');
  } : // No support for setImmediate or MutationObserver. No worry, setTimeout is only called
  // once time. Every tick that follows will be our emulated micro tick.
  // Could have uses setTimeout.bind(null, 0, physicalTick) if it wasnt for that FF13 and below has a bug
  function () {
    setTimeout(physicalTick, 0);
  };
  // Configurable through Promise.scheduler.
  // Don't export because it would be unsafe to let unknown
  // code call it unless they do try..catch within their callback.
  // This function can be retrieved through getter of Promise.scheduler though,
  // but users must not do Promise.scheduler = myFuncThatThrowsException
  var asap$1 = function (callback, args) {
    microtickQueue.push([callback, args]);
    if (needsNewPhysicalTick) {
      schedulePhysicalTick();
      needsNewPhysicalTick = false;
    }
  };
  var isOutsideMicroTick = true;
  var needsNewPhysicalTick = true;
  var unhandledErrors = [];
  var rejectingErrors = [];
  var currentFulfiller = null;
  var rejectionMapper = mirror;
  // Remove in next major when removing error mapping of DOMErrors and DOMExceptions
  var globalPSD = {
    id: 'global',
    global: true,
    ref: 0,
    unhandleds: [],
    onunhandled: globalError,
    pgp: false,
    env: {},
    finalize: function () {
      this.unhandleds.forEach(function (uh) {
        try {
          globalError(uh[0], uh[1]);
        } catch (e) {}
      });
    }
  };
  var PSD = globalPSD;
  var microtickQueue = [];
  // Callbacks to call in this or next physical tick.
  var numScheduledCalls = 0;
  // Number of listener-calls left to do in this physical tick.
  var tickFinalizers = [];
  // Finalizers to call when there are no more async calls scheduled within current physical tick.
  function Promise(fn) {
    if (typeof this !== 'object') throw new TypeError('Promises must be constructed via new');
    this._listeners = [];
    this.onuncatched = nop;
    // Deprecate in next major. Not needed. Better to use global error handler.
    // A library may set `promise._lib = true;` after promise is created to make resolve() or reject()
    // execute the microtask engine implicitely within the call to resolve() or reject().
    // To remain A+ compliant, a library must only set `_lib=true` if it can guarantee that the stack
    // only contains library code when calling resolve() or reject().
    // RULE OF THUMB: ONLY set _lib = true for promises explicitely resolving/rejecting directly from
    // global scope (event handler, timer etc)!
    this._lib = false;
    // Current async scope
    var psd = this._PSD = PSD;
    if (debug) {
      this._stackHolder = getErrorWithStack();
      this._prev = null;
      this._numPrev = 0;
    }
    if (typeof fn !== 'function') {
      if (fn !== INTERNAL) throw new TypeError('Not a function');
      // Private constructor (INTERNAL, state, value).
      // Used internally by Promise.resolve() and Promise.reject().
      this._state = arguments[1];
      this._value = arguments[2];
      if (this._state === false) handleRejection(this, this._value);
      // Map error, set stack and addPossiblyUnhandledError().
      return;
    }
    this._state = null;
    // null (=pending), false (=rejected) or true (=resolved)
    this._value = null;
    // error or result
    ++psd.ref;
    // Refcounting current scope
    executePromiseTask(this, fn);
  }
  // Prepare a property descriptor to put onto Promise.prototype.then
  var thenProp = {
    get: function () {
      var psd = PSD, microTaskId = totalEchoes;
      function then(onFulfilled, onRejected) {
        var _this = this;
        var possibleAwait = !psd.global && (psd !== PSD || microTaskId !== totalEchoes);
        if (possibleAwait) decrementExpectedAwaits();
        var rv = new Promise(function (resolve, reject) {
          propagateToListener(_this, new Listener(nativeAwaitCompatibleWrap(onFulfilled, psd, possibleAwait), nativeAwaitCompatibleWrap(onRejected, psd, possibleAwait), resolve, reject, psd));
        });
        debug && linkToPreviousPromise(rv, this);
        return rv;
      }
      then.prototype = INTERNAL;
      // For idempotense, see setter below.
      return then;
    },
    // Be idempotent and allow another framework (such as zone.js or another instance of a Dexie.Promise module) to replace Promise.prototype.then
    // and when that framework wants to restore the original property, we must identify that and restore the original property descriptor.
    set: function (value) {
      setProp(this, 'then', value && value.prototype === INTERNAL ? thenProp : // Restore to original property descriptor.
      {
        get: function () {
          return value;
        },
        set: thenProp.set
      });
    }
  };
  props(Promise.prototype, {
    then: thenProp,
    _then: function (onFulfilled, onRejected) {
      // A little tinier version of then() that don't have to create a resulting promise.
      propagateToListener(this, new Listener(null, null, onFulfilled, onRejected, PSD));
    },
    catch: function (onRejected) {
      if (arguments.length === 1) return this.then(null, onRejected);
      // First argument is the Error type to catch
      var type = arguments[0], handler = arguments[1];
      return typeof type === 'function' ? this.then(null, function (err) {
        // Catching errors by its constructor type (similar to java / c++ / c#)
        // Sample: promise.catch(TypeError, function (e) { ... });
        return err instanceof type ? handler(err) : PromiseReject(err);
      }) : this.then(null, function (err) {
        // Catching errors by the error.name property. Makes sense for indexedDB where error type
        // is always DOMError but where e.name tells the actual error type.
        // Sample: promise.catch('ConstraintError', function (e) { ... });
        return err && err.name === type ? handler(err) : PromiseReject(err);
      });
    },
    finally: function (onFinally) {
      return this.then(function (value) {
        onFinally();
        return value;
      }, function (err) {
        onFinally();
        return PromiseReject(err);
      });
    },
    stack: {
      get: function () {
        if (this._stack) return this._stack;
        try {
          stack_being_generated = true;
          var stacks = getStack(this, [], MAX_LONG_STACKS);
          var stack = stacks.join("\nFrom previous: ");
          if (this._state !== null) this._stack = stack;
          // Stack may be updated on reject.
          return stack;
        } finally {
          stack_being_generated = false;
        }
      }
    },
    timeout: function (ms, msg) {
      var _this = this;
      return ms < Infinity ? new Promise(function (resolve, reject) {
        var handle = setTimeout(function () {
          return reject(new exceptions.Timeout(msg));
        }, ms);
        _this.then(resolve, reject).finally(clearTimeout.bind(null, handle));
      }) : this;
    }
  });
  if (typeof Symbol !== 'undefined' && Symbol.toStringTag) setProp(Promise.prototype, Symbol.toStringTag, 'Promise');
  // Now that Promise.prototype is defined, we have all it takes to set globalPSD.env.
  // Environment globals snapshotted on leaving global zone
  globalPSD.env = snapShot();
  function Listener(onFulfilled, onRejected, resolve, reject, zone) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.resolve = resolve;
    this.reject = reject;
    this.psd = zone;
  }
  // Promise Static Properties
  props(Promise, {
    all: function () {
      var values = getArrayOf.apply(null, arguments).// Supports iterables, implicit arguments and array-like.
      map(onPossibleParallellAsync);
      // Handle parallell async/awaits
      return new Promise(function (resolve, reject) {
        if (values.length === 0) resolve([]);
        var remaining = values.length;
        values.forEach(function (a, i) {
          return Promise.resolve(a).then(function (x) {
            values[i] = x;
            if (!--remaining) resolve(values);
          }, reject);
        });
      });
    },
    resolve: function (value) {
      if (value instanceof Promise) return value;
      if (value && typeof value.then === 'function') return new Promise(function (resolve, reject) {
        value.then(resolve, reject);
      });
      var rv = new Promise(INTERNAL, true, value);
      linkToPreviousPromise(rv, currentFulfiller);
      return rv;
    },
    reject: PromiseReject,
    race: function () {
      var values = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
      return new Promise(function (resolve, reject) {
        values.map(function (value) {
          return Promise.resolve(value).then(resolve, reject);
        });
      });
    },
    PSD: {
      get: function () {
        return PSD;
      },
      set: function (value) {
        return PSD = value;
      }
    },
    // totalEchoes: {get: ()=>totalEchoes},
    // task: {get: ()=>task},
    newPSD: newScope,
    usePSD: usePSD,
    scheduler: {
      get: function () {
        return asap$1;
      },
      set: function (value) {
        asap$1 = value;
      }
    },
    rejectionMapper: {
      get: function () {
        return rejectionMapper;
      },
      set: function (value) {
        rejectionMapper = value;
      }
    },
    follow: function (fn, zoneProps) {
      return new Promise(function (resolve, reject) {
        return newScope(function (resolve, reject) {
          var psd = PSD;
          psd.unhandleds = [];
          // For unhandled standard- or 3rd party Promises. Checked at psd.finalize()
          psd.onunhandled = reject;
          // Triggered directly on unhandled promises of this library.
          psd.finalize = callBoth(function () {
            var _this = this;
            // Unhandled standard or 3rd part promises are put in PSD.unhandleds and
            // examined upon scope completion while unhandled rejections in this Promise
            // will trigger directly through psd.onunhandled
            run_at_end_of_this_or_next_physical_tick(function () {
              _this.unhandleds.length === 0 ? resolve() : reject(_this.unhandleds[0]);
            });
          }, psd.finalize);
          fn();
        }, zoneProps, resolve, reject);
      });
    }
  });
  /**
  * Take a potentially misbehaving resolver function and make sure
  * onFulfilled and onRejected are only called once.
  *
  * Makes no guarantees about asynchrony.
  */
  function executePromiseTask(promise, fn) {
    // Promise Resolution Procedure:
    // https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
    try {
      fn(function (value) {
        if (promise._state !== null) return;
        // Already settled
        if (value === promise) throw new TypeError('A promise cannot be resolved with itself.');
        var shouldExecuteTick = promise._lib && beginMicroTickScope();
        if (value && typeof value.then === 'function') {
          executePromiseTask(promise, function (resolve, reject) {
            value instanceof Promise ? value._then(resolve, reject) : value.then(resolve, reject);
          });
        } else {
          promise._state = true;
          promise._value = value;
          propagateAllListeners(promise);
        }
        if (shouldExecuteTick) endMicroTickScope();
      }, handleRejection.bind(null, promise));
    } catch (ex) {
      handleRejection(promise, ex);
    }
  }
  function handleRejection(promise, reason) {
    rejectingErrors.push(reason);
    if (promise._state !== null) return;
    var shouldExecuteTick = promise._lib && beginMicroTickScope();
    reason = rejectionMapper(reason);
    promise._state = false;
    promise._value = reason;
    debug && reason !== null && typeof reason === 'object' && !reason._promise && tryCatch(function () {
      var origProp = getPropertyDescriptor(reason, "stack");
      reason._promise = promise;
      setProp(reason, "stack", {
        get: function () {
          return stack_being_generated ? origProp && (origProp.get ? origProp.get.apply(reason) : origProp.value) : promise.stack;
        }
      });
    });
    // Add the failure to a list of possibly uncaught errors
    addPossiblyUnhandledError(promise);
    propagateAllListeners(promise);
    if (shouldExecuteTick) endMicroTickScope();
  }
  function propagateAllListeners(promise) {
    // debug && linkToPreviousPromise(promise);
    var listeners = promise._listeners;
    promise._listeners = [];
    for (var i = 0, len = listeners.length; i < len; ++i) {
      propagateToListener(promise, listeners[i]);
    }
    var psd = promise._PSD;
    --psd.ref || psd.finalize();
    // if psd.ref reaches zero, call psd.finalize();
    if (numScheduledCalls === 0) {
      // If numScheduledCalls is 0, it means that our stack is not in a callback of a scheduled call,
      // and that no deferreds where listening to this rejection or success.
      // Since there is a risk that our stack can contain application code that may
      // do stuff after this code is finished that may generate new calls, we cannot
      // call finalizers here.
      ++numScheduledCalls;
      asap$1(function () {
        if (--numScheduledCalls === 0) finalizePhysicalTick();
      }, []);
    }
  }
  function propagateToListener(promise, listener) {
    if (promise._state === null) {
      promise._listeners.push(listener);
      return;
    }
    var cb = promise._state ? listener.onFulfilled : listener.onRejected;
    if (cb === null) {
      // This Listener doesnt have a listener for the event being triggered (onFulfilled or onReject) so lets forward the event to any eventual listeners on the Promise instance returned by then() or catch()
      return (promise._state ? listener.resolve : listener.reject)(promise._value);
    }
    ++listener.psd.ref;
    ++numScheduledCalls;
    asap$1(callListener, [cb, promise, listener]);
  }
  function callListener(cb, promise, listener) {
    try {
      // Set static variable currentFulfiller to the promise that is being fullfilled,
      // so that we connect the chain of promises (for long stacks support)
      currentFulfiller = promise;
      // Call callback and resolve our listener with it's return value.
      var ret, value = promise._value;
      if (promise._state) {
        // cb is onResolved
        ret = cb(value);
      } else {
        // cb is onRejected
        if (rejectingErrors.length) rejectingErrors = [];
        ret = cb(value);
        if (rejectingErrors.indexOf(value) === -1) markErrorAsHandled(promise);
      }
      listener.resolve(ret);
    } catch (e) {
      // Exception thrown in callback. Reject our listener.
      listener.reject(e);
    } finally {
      // Restore env and currentFulfiller.
      currentFulfiller = null;
      if (--numScheduledCalls === 0) finalizePhysicalTick();
      --listener.psd.ref || listener.psd.finalize();
    }
  }
  function getStack(promise, stacks, limit) {
    if (stacks.length === limit) return stacks;
    var stack = "";
    if (promise._state === false) {
      var failure = promise._value, errorName, message;
      if (failure != null) {
        errorName = failure.name || "Error";
        message = failure.message || failure;
        stack = prettyStack(failure, 0);
      } else {
        errorName = failure;
        // If error is undefined or null, show that.
        message = "";
      }
      stacks.push(errorName + (message ? ": " + message : "") + stack);
    }
    if (debug) {
      stack = prettyStack(promise._stackHolder, 2);
      if (stack && stacks.indexOf(stack) === -1) stacks.push(stack);
      if (promise._prev) getStack(promise._prev, stacks, limit);
    }
    return stacks;
  }
  function linkToPreviousPromise(promise, prev) {
    // Support long stacks by linking to previous completed promise.
    var numPrev = prev ? prev._numPrev + 1 : 0;
    if (numPrev < LONG_STACKS_CLIP_LIMIT) {
      promise._prev = prev;
      promise._numPrev = numPrev;
    }
  }
  /*The callback to schedule with setImmediate() or setTimeout().
  It runs a virtual microtick and executes any callback registered in microtickQueue.
  */
  function physicalTick() {
    beginMicroTickScope() && endMicroTickScope();
  }
  function beginMicroTickScope() {
    var wasRootExec = isOutsideMicroTick;
    isOutsideMicroTick = false;
    needsNewPhysicalTick = false;
    return wasRootExec;
  }
  /*Executes micro-ticks without doing try..catch.
  This can be possible because we only use this internally and
  the registered functions are exception-safe (they do try..catch
  internally before calling any external method). If registering
  functions in the microtickQueue that are not exception-safe, this
  would destroy the framework and make it instable. So we don't export
  our asap method.
  */
  function endMicroTickScope() {
    var callbacks, i, l;
    do {
      while (microtickQueue.length > 0) {
        callbacks = microtickQueue;
        microtickQueue = [];
        l = callbacks.length;
        for (i = 0; i < l; ++i) {
          var item = callbacks[i];
          item[0].apply(null, item[1]);
        }
      }
    } while (microtickQueue.length > 0);
    isOutsideMicroTick = true;
    needsNewPhysicalTick = true;
  }
  function finalizePhysicalTick() {
    var unhandledErrs = unhandledErrors;
    unhandledErrors = [];
    unhandledErrs.forEach(function (p) {
      p._PSD.onunhandled.call(null, p._value, p);
    });
    var finalizers = tickFinalizers.slice(0);
    // Clone first because finalizer may remove itself from list.
    var i = finalizers.length;
    while (i) finalizers[--i]();
  }
  function run_at_end_of_this_or_next_physical_tick(fn) {
    function finalizer() {
      fn();
      tickFinalizers.splice(tickFinalizers.indexOf(finalizer), 1);
    }
    tickFinalizers.push(finalizer);
    ++numScheduledCalls;
    asap$1(function () {
      if (--numScheduledCalls === 0) finalizePhysicalTick();
    }, []);
  }
  function addPossiblyUnhandledError(promise) {
    // Only add to unhandledErrors if not already there. The first one to add to this list
    // will be upon the first rejection so that the root cause (first promise in the
    // rejection chain) is the one listed.
    if (!unhandledErrors.some(function (p) {
      return p._value === promise._value;
    })) unhandledErrors.push(promise);
  }
  function markErrorAsHandled(promise) {
    // Called when a reject handled is actually being called.
    // Search in unhandledErrors for any promise whos _value is this promise_value (list
    // contains only rejected promises, and only one item per error)
    var i = unhandledErrors.length;
    while (i) if (unhandledErrors[--i]._value === promise._value) {
      // Found a promise that failed with this same error object pointer,
      // Remove that since there is a listener that actually takes care of it.
      unhandledErrors.splice(i, 1);
      return;
    }
  }
  function PromiseReject(reason) {
    return new Promise(INTERNAL, false, reason);
  }
  function wrap(fn, errorCatcher) {
    var psd = PSD;
    return function () {
      var wasRootExec = beginMicroTickScope(), outerScope = PSD;
      try {
        switchToZone(psd, true);
        return fn.apply(this, arguments);
      } catch (e) {
        errorCatcher && errorCatcher(e);
      } finally {
        switchToZone(outerScope, false);
        if (wasRootExec) endMicroTickScope();
      }
    };
  }
  // 
  // variables used for native await support
  // 
  var task = {
    awaits: 0,
    echoes: 0,
    id: 0
  };
  // The ongoing macro-task when using zone-echoing.
  var taskCounter = 0;
  // ID counter for macro tasks.
  var zoneStack = [];
  // Stack of left zones to restore asynchronically.
  var zoneEchoes = 0;
  // zoneEchoes is a must in order to persist zones between native await expressions.
  var totalEchoes = 0;
  // ID counter for micro-tasks. Used to detect possible native await in our Promise.prototype.then.
  var zone_id_counter = 0;
  function newScope(fn, props$$1, a1, a2) {
    var parent = PSD, psd = Object.create(parent);
    psd.parent = parent;
    psd.ref = 0;
    psd.global = false;
    psd.id = ++zone_id_counter;
    // Prepare for promise patching (done in usePSD):
    var globalEnv = globalPSD.env;
    psd.env = patchGlobalPromise ? {
      Promise: Promise,
      PromiseProp: {
        value: Promise,
        configurable: true,
        writable: true
      },
      all: Promise.all,
      race: Promise.race,
      resolve: Promise.resolve,
      reject: Promise.reject,
      nthen: getPatchedPromiseThen(globalEnv.nthen, psd),
      gthen: getPatchedPromiseThen(globalEnv.gthen, psd)
    } : {};
    if (props$$1) extend(psd, props$$1);
    // unhandleds and onunhandled should not be specifically set here.
    // Leave them on parent prototype.
    // unhandleds.push(err) will push to parent's prototype
    // onunhandled() will call parents onunhandled (with this scope's this-pointer though!)
    ++parent.ref;
    psd.finalize = function () {
      --this.parent.ref || this.parent.finalize();
    };
    var rv = usePSD(psd, fn, a1, a2);
    if (psd.ref === 0) psd.finalize();
    return rv;
  }
  // Function to call if scopeFunc returns NativePromise
  // Also for each NativePromise in the arguments to Promise.all()
  function incrementExpectedAwaits() {
    if (!task.id) task.id = ++taskCounter;
    ++task.awaits;
    task.echoes += ZONE_ECHO_LIMIT;
    return task.id;
  }
  // Function to call when 'then' calls back on a native promise where onAwaitExpected() had been called.
  // Also call this when a native await calls then method on a promise. In that case, don't supply
  // sourceTaskId because we already know it refers to current task.
  function decrementExpectedAwaits(sourceTaskId) {
    if (!task.awaits || sourceTaskId && sourceTaskId !== task.id) return;
    if (--task.awaits === 0) task.id = 0;
    task.echoes = task.awaits * ZONE_ECHO_LIMIT;
  }
  // Call from Promise.all() and Promise.race()
  function onPossibleParallellAsync(possiblePromise) {
    if (task.echoes && possiblePromise && possiblePromise.constructor === NativePromise) {
      incrementExpectedAwaits();
      return possiblePromise.then(function (x) {
        decrementExpectedAwaits();
        return x;
      }, function (e) {
        decrementExpectedAwaits();
        return rejection(e);
      });
    }
    return possiblePromise;
  }
  function zoneEnterEcho(targetZone) {
    ++totalEchoes;
    if (!task.echoes || --task.echoes === 0) {
      task.echoes = task.id = 0;
    }
    zoneStack.push(PSD);
    switchToZone(targetZone, true);
  }
  function zoneLeaveEcho() {
    var zone = zoneStack[zoneStack.length - 1];
    zoneStack.pop();
    switchToZone(zone, false);
  }
  function switchToZone(targetZone, bEnteringZone) {
    var currentZone = PSD;
    if (bEnteringZone ? task.echoes && (!zoneEchoes++ || targetZone !== PSD) : zoneEchoes && (!--zoneEchoes || targetZone !== PSD)) {
      // Enter or leave zone asynchronically as well, so that tasks initiated during current tick
      // will be surrounded by the zone when they are invoked.
      enqueueNativeMicroTask(bEnteringZone ? zoneEnterEcho.bind(null, targetZone) : zoneLeaveEcho);
    }
    if (targetZone === PSD) return;
    PSD = targetZone;
    // The actual zone switch occurs at this line.
    // Snapshot on every leave from global zone.
    if (currentZone === globalPSD) globalPSD.env = snapShot();
    if (patchGlobalPromise) {
      // Let's patch the global and native Promises (may be same or may be different)
      var GlobalPromise = globalPSD.env.Promise;
      // Swich environments (may be PSD-zone or the global zone. Both apply.)
      var targetEnv = targetZone.env;
      // Change Promise.prototype.then for native and global Promise (they MAY differ on polyfilled environments, but both can be accessed)
      // Must be done on each zone change because the patched method contains targetZone in its closure.
      nativePromiseProto.then = targetEnv.nthen;
      GlobalPromise.prototype.then = targetEnv.gthen;
      if (currentZone.global || targetZone.global) {
        // Leaving or entering global zone. It's time to patch / restore global Promise.
        // Set this Promise to window.Promise so that transiled async functions will work on Firefox, Safari and IE, as well as with Zonejs and angular.
        Object.defineProperty(_global, 'Promise', targetEnv.PromiseProp);
        // Support Promise.all() etc to work indexedDB-safe also when people are including es6-promise as a module (they might
        // not be accessing global.Promise but a local reference to it)
        GlobalPromise.all = targetEnv.all;
        GlobalPromise.race = targetEnv.race;
        GlobalPromise.resolve = targetEnv.resolve;
        GlobalPromise.reject = targetEnv.reject;
      }
    }
  }
  function snapShot() {
    var GlobalPromise = _global.Promise;
    return patchGlobalPromise ? {
      Promise: GlobalPromise,
      PromiseProp: Object.getOwnPropertyDescriptor(_global, "Promise"),
      all: GlobalPromise.all,
      race: GlobalPromise.race,
      resolve: GlobalPromise.resolve,
      reject: GlobalPromise.reject,
      nthen: nativePromiseProto.then,
      gthen: GlobalPromise.prototype.then
    } : {};
  }
  function usePSD(psd, fn, a1, a2, a3) {
    var outerScope = PSD;
    try {
      switchToZone(psd, true);
      return fn(a1, a2, a3);
    } finally {
      switchToZone(outerScope, false);
    }
  }
  function enqueueNativeMicroTask(job) {
    // 
    // Precondition: nativePromiseThen !== undefined
    // 
    nativePromiseThen.call(resolvedNativePromise, job);
  }
  function nativeAwaitCompatibleWrap(fn, zone, possibleAwait) {
    return typeof fn !== 'function' ? fn : function () {
      var outerZone = PSD;
      if (possibleAwait) incrementExpectedAwaits();
      switchToZone(zone, true);
      try {
        return fn.apply(this, arguments);
      } finally {
        switchToZone(outerZone, false);
      }
    };
  }
  function getPatchedPromiseThen(origThen, zone) {
    return function (onResolved, onRejected) {
      return origThen.call(this, nativeAwaitCompatibleWrap(onResolved, zone, false), nativeAwaitCompatibleWrap(onRejected, zone, false));
    };
  }
  var UNHANDLEDREJECTION = "unhandledrejection";
  function globalError(err, promise) {
    var rv;
    try {
      rv = promise.onuncatched(err);
    } catch (e) {}
    if (rv !== false) try {
      var event, eventData = {
        promise: promise,
        reason: err
      };
      if (_global.document && document.createEvent) {
        event = document.createEvent('Event');
        event.initEvent(UNHANDLEDREJECTION, true, true);
        extend(event, eventData);
      } else if (_global.CustomEvent) {
        event = new CustomEvent(UNHANDLEDREJECTION, {
          detail: eventData
        });
        extend(event, eventData);
      }
      if (event && _global.dispatchEvent) {
        dispatchEvent(event);
        if (!_global.PromiseRejectionEvent && _global.onunhandledrejection) // No native support for PromiseRejectionEvent but user has set window.onunhandledrejection. Manually call it.
        try {
          _global.onunhandledrejection(event);
        } catch (_) {}
      }
      if (!event.defaultPrevented) {
        console.warn("Unhandled rejection: " + (err.stack || err));
      }
    } catch (e) {}
  }
  var rejection = Promise.reject;
  function Events(ctx) {
    var evs = {};
    var rv = function (eventName, subscriber) {
      if (subscriber) {
        // Subscribe. If additional arguments than just the subscriber was provided, forward them as well.
        var i = arguments.length, args = new Array(i - 1);
        while (--i) args[i - 1] = arguments[i];
        evs[eventName].subscribe.apply(null, args);
        return ctx;
      } else if (typeof eventName === 'string') {
        // Return interface allowing to fire or unsubscribe from event
        return evs[eventName];
      }
    };
    rv.addEventType = add;
    for (var i = 1, l = arguments.length; i < l; ++i) {
      add(arguments[i]);
    }
    return rv;
    function add(eventName, chainFunction, defaultFunction) {
      if (typeof eventName === 'object') return addConfiguredEvents(eventName);
      if (!chainFunction) chainFunction = reverseStoppableEventChain;
      if (!defaultFunction) defaultFunction = nop;
      var context = {
        subscribers: [],
        fire: defaultFunction,
        subscribe: function (cb) {
          if (context.subscribers.indexOf(cb) === -1) {
            context.subscribers.push(cb);
            context.fire = chainFunction(context.fire, cb);
          }
        },
        unsubscribe: function (cb) {
          context.subscribers = context.subscribers.filter(function (fn) {
            return fn !== cb;
          });
          context.fire = context.subscribers.reduce(chainFunction, defaultFunction);
        }
      };
      evs[eventName] = rv[eventName] = context;
      return context;
    }
    function addConfiguredEvents(cfg) {
      // events(this, {reading: [functionChain, nop]});
      keys(cfg).forEach(function (eventName) {
        var args = cfg[eventName];
        if (isArray(args)) {
          add(eventName, cfg[eventName][0], cfg[eventName][1]);
        } else if (args === 'asap') {
          // Rather than approaching event subscription using a functional approach, we here do it in a for-loop where subscriber is executed in its own stack
          // enabling that any exception that occur wont disturb the initiator and also not nescessary be catched and forgotten.
          var context = add(eventName, mirror, function fire() {
            // Optimazation-safe cloning of arguments into args.
            var i = arguments.length, args = new Array(i);
            while (i--) args[i] = arguments[i];
            // All each subscriber:
            context.subscribers.forEach(function (fn) {
              asap(function fireEvent() {
                fn.apply(null, args);
              });
            });
          });
        } else throw new exceptions.InvalidArgument("Invalid event config");
      });
    }
  }
  /*
  * Dexie.js - a minimalistic wrapper for IndexedDB
  * ===============================================
  *
  * Copyright (c) 2014-2017 David Fahlander
  *
  * Version 2.0.4, Fri May 25 2018
  *
  * http://dexie.org
  *
  * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/LICENSE-2.0
  *
  */
  var DEXIE_VERSION = '2.0.4';
  var maxString = String.fromCharCode(65535);
  var maxKey = (function () {
    try {
      IDBKeyRange.only([[]]);
      return [[]];
    } catch (e) {
      return maxString;
    }
  })();
  var minKey = -Infinity;
  var INVALID_KEY_ARGUMENT = "Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.";
  var STRING_EXPECTED = "String expected.";
  var connections = [];
  var isIEOrEdge = typeof navigator !== 'undefined' && (/(MSIE|Trident|Edge)/).test(navigator.userAgent);
  var hasIEDeleteObjectStoreBug = isIEOrEdge;
  var hangsOnDeleteLargeKeyRange = isIEOrEdge;
  var dexieStackFrameFilter = function (frame) {
    return !(/(dexie\.js|dexie\.min\.js)/).test(frame);
  };
  var dbNamesDB;
  // Global database for backing Dexie.getDatabaseNames() on browser without indexedDB.webkitGetDatabaseNames()
  // Init debug
  setDebug(debug, dexieStackFrameFilter);
  function Dexie(dbName, options) {
    // / <param name="options" type="Object" optional="true">Specify only if you wich to control which addons that should run on this instance</param>
    var deps = Dexie.dependencies;
    var opts = extend({
      // Default Options
      addons: Dexie.addons,
      autoOpen: true,
      indexedDB: deps.indexedDB,
      IDBKeyRange: deps.IDBKeyRange
    }, options);
    var addons = opts.addons, autoOpen = opts.autoOpen, indexedDB = opts.indexedDB, IDBKeyRange = opts.IDBKeyRange;
    var globalSchema = this._dbSchema = {};
    var versions = [];
    var dbStoreNames = [];
    var allTables = {};
    // /<var type="IDBDatabase" />
    var idbdb = null;
    // Instance of IDBDatabase
    var dbOpenError = null;
    var isBeingOpened = false;
    var onReadyBeingFired = null;
    var openComplete = false;
    var READONLY = "readonly", READWRITE = "readwrite";
    var db = this;
    var dbReadyResolve, dbReadyPromise = new Promise(function (resolve) {
      dbReadyResolve = resolve;
    }), cancelOpen, openCanceller = new Promise(function (_, reject) {
      cancelOpen = reject;
    });
    var autoSchema = true;
    var hasNativeGetDatabaseNames = !!getNativeGetDatabaseNamesFn(indexedDB), hasGetAll;
    function init() {
      // Default subscribers to "versionchange" and "blocked".
      // Can be overridden by custom handlers. If custom handlers return false, these default
      // behaviours will be prevented.
      db.on("versionchange", function (ev) {
        // Default behavior for versionchange event is to close database connection.
        // Caller can override this behavior by doing db.on("versionchange", function(){ return false; });
        // Let's not block the other window from making it's delete() or open() call.
        // NOTE! This event is never fired in IE,Edge or Safari.
        if (ev.newVersion > 0) console.warn("Another connection wants to upgrade database '" + db.name + "'. Closing db now to resume the upgrade."); else console.warn("Another connection wants to delete database '" + db.name + "'. Closing db now to resume the delete request.");
        db.close();
      });
      db.on("blocked", function (ev) {
        if (!ev.newVersion || ev.newVersion < ev.oldVersion) console.warn("Dexie.delete('" + db.name + "') was blocked"); else console.warn("Upgrade '" + db.name + "' blocked by other connection holding version " + ev.oldVersion / 10);
      });
    }
    // 
    // 
    // 
    // ------------------------- Versioning Framework---------------------------
    // 
    // 
    // 
    this.version = function (versionNumber) {
      // / <param name="versionNumber" type="Number"></param>
      // / <returns type="Version"></returns>
      if (idbdb || isBeingOpened) throw new exceptions.Schema("Cannot add version when database is open");
      this.verno = Math.max(this.verno, versionNumber);
      var versionInstance = versions.filter(function (v) {
        return v._cfg.version === versionNumber;
      })[0];
      if (versionInstance) return versionInstance;
      versionInstance = new Version(versionNumber);
      versions.push(versionInstance);
      versions.sort(lowerVersionFirst);
      // Disable autoschema mode, as at least one version is specified.
      autoSchema = false;
      return versionInstance;
    };
    function Version(versionNumber) {
      this._cfg = {
        version: versionNumber,
        storesSource: null,
        dbschema: {},
        tables: {},
        contentUpgrade: null
      };
      this.stores({});
    }
    extend(Version.prototype, {
      stores: function (stores) {
        // / <summary>
        // /   Defines the schema for a particular version
        // / </summary>
        // / <param name="stores" type="Object">
        // / Example: <br/>
        // /   {users: "id++,first,last,&amp;username,*email", <br/>
        // /   passwords: "id++,&amp;username"}<br/>
        // / <br/>
        // / Syntax: {Table: "[primaryKey][++],[&amp;][*]index1,[&amp;][*]index2,..."}<br/><br/>
        // / Special characters:<br/>
        // /  "&amp;"  means unique key, <br/>
        // /  "*"  means value is multiEntry, <br/>
        // /  "++" means auto-increment and only applicable for primary key <br/>
        // / </param>
        this._cfg.storesSource = this._cfg.storesSource ? extend(this._cfg.storesSource, stores) : stores;
        // Derive stores from earlier versions if they are not explicitely specified as null or a new syntax.
        var storesSpec = {};
        versions.forEach(function (version) {
          extend(storesSpec, version._cfg.storesSource);
        });
        var dbschema = this._cfg.dbschema = {};
        this._parseStoresSpec(storesSpec, dbschema);
        // Update the latest schema to this version
        // Update API
        globalSchema = db._dbSchema = dbschema;
        removeTablesApi([allTables, db, Transaction.prototype]);
        // Keep Transaction.prototype even though it should be depr.
        setApiOnPlace([allTables, db, Transaction.prototype, this._cfg.tables], keys(dbschema), dbschema);
        dbStoreNames = keys(dbschema);
        return this;
      },
      upgrade: function (upgradeFunction) {
        this._cfg.contentUpgrade = upgradeFunction;
        return this;
      },
      _parseStoresSpec: function (stores, outSchema) {
        keys(stores).forEach(function (tableName) {
          if (stores[tableName] !== null) {
            var instanceTemplate = {};
            var indexes = parseIndexSyntax(stores[tableName]);
            var primKey = indexes.shift();
            if (primKey.multi) throw new exceptions.Schema("Primary key cannot be multi-valued");
            if (primKey.keyPath) setByKeyPath(instanceTemplate, primKey.keyPath, primKey.auto ? 0 : primKey.keyPath);
            indexes.forEach(function (idx) {
              if (idx.auto) throw new exceptions.Schema("Only primary key can be marked as autoIncrement (++)");
              if (!idx.keyPath) throw new exceptions.Schema("Index must have a name and cannot be an empty string");
              setByKeyPath(instanceTemplate, idx.keyPath, idx.compound ? idx.keyPath.map(function () {
                return "";
              }) : "");
            });
            outSchema[tableName] = new TableSchema(tableName, primKey, indexes, instanceTemplate);
          }
        });
      }
    });
    function runUpgraders(oldVersion, idbtrans, reject) {
      var trans = db._createTransaction(READWRITE, dbStoreNames, globalSchema);
      trans.create(idbtrans);
      trans._completion.catch(reject);
      var rejectTransaction = trans._reject.bind(trans);
      newScope(function () {
        PSD.trans = trans;
        if (oldVersion === 0) {
          // Create tables:
          keys(globalSchema).forEach(function (tableName) {
            createTable(idbtrans, tableName, globalSchema[tableName].primKey, globalSchema[tableName].indexes);
          });
          Promise.follow(function () {
            return db.on.populate.fire(trans);
          }).catch(rejectTransaction);
        } else updateTablesAndIndexes(oldVersion, trans, idbtrans).catch(rejectTransaction);
      });
    }
    function updateTablesAndIndexes(oldVersion, trans, idbtrans) {
      // Upgrade version to version, step-by-step from oldest to newest version.
      // Each transaction object will contain the table set that was current in that version (but also not-yet-deleted tables from its previous version)
      var queue = [];
      var oldVersionStruct = versions.filter(function (version) {
        return version._cfg.version === oldVersion;
      })[0];
      if (!oldVersionStruct) throw new exceptions.Upgrade("Dexie specification of currently installed DB version is missing");
      globalSchema = db._dbSchema = oldVersionStruct._cfg.dbschema;
      var anyContentUpgraderHasRun = false;
      var versToRun = versions.filter(function (v) {
        return v._cfg.version > oldVersion;
      });
      versToRun.forEach(function (version) {
        // / <param name="version" type="Version"></param>
        queue.push(function () {
          var oldSchema = globalSchema;
          var newSchema = version._cfg.dbschema;
          adjustToExistingIndexNames(oldSchema, idbtrans);
          adjustToExistingIndexNames(newSchema, idbtrans);
          globalSchema = db._dbSchema = newSchema;
          var diff = getSchemaDiff(oldSchema, newSchema);
          // Add tables
          diff.add.forEach(function (tuple) {
            createTable(idbtrans, tuple[0], tuple[1].primKey, tuple[1].indexes);
          });
          // Change tables
          diff.change.forEach(function (change) {
            if (change.recreate) {
              throw new exceptions.Upgrade("Not yet support for changing primary key");
            } else {
              var store = idbtrans.objectStore(change.name);
              // Add indexes
              change.add.forEach(function (idx) {
                addIndex(store, idx);
              });
              // Update indexes
              change.change.forEach(function (idx) {
                store.deleteIndex(idx.name);
                addIndex(store, idx);
              });
              // Delete indexes
              change.del.forEach(function (idxName) {
                store.deleteIndex(idxName);
              });
            }
          });
          if (version._cfg.contentUpgrade) {
            anyContentUpgraderHasRun = true;
            return Promise.follow(function () {
              version._cfg.contentUpgrade(trans);
            });
          }
        });
        queue.push(function (idbtrans) {
          if (!anyContentUpgraderHasRun || !hasIEDeleteObjectStoreBug) {
            var newSchema = version._cfg.dbschema;
            // Delete old tables
            deleteRemovedTables(newSchema, idbtrans);
          }
        });
      });
      // Now, create a queue execution engine
      function runQueue() {
        return queue.length ? Promise.resolve(queue.shift()(trans.idbtrans)).then(runQueue) : Promise.resolve();
      }
      return runQueue().then(function () {
        createMissingTables(globalSchema, idbtrans);
      });
    }
    function getSchemaDiff(oldSchema, newSchema) {
      var diff = {
        del: [],
        add: [],
        change: []
      };
      for (var table in oldSchema) {
        if (!newSchema[table]) diff.del.push(table);
      }
      for (table in newSchema) {
        var oldDef = oldSchema[table], newDef = newSchema[table];
        if (!oldDef) {
          diff.add.push([table, newDef]);
        } else {
          var change = {
            name: table,
            def: newDef,
            recreate: false,
            del: [],
            add: [],
            change: []
          };
          if (oldDef.primKey.src !== newDef.primKey.src) {
            // Primary key has changed. Remove and re-add table.
            change.recreate = true;
            diff.change.push(change);
          } else {
            // Same primary key. Just find out what differs:
            var oldIndexes = oldDef.idxByName;
            var newIndexes = newDef.idxByName;
            for (var idxName in oldIndexes) {
              if (!newIndexes[idxName]) change.del.push(idxName);
            }
            for (idxName in newIndexes) {
              var oldIdx = oldIndexes[idxName], newIdx = newIndexes[idxName];
              if (!oldIdx) change.add.push(newIdx); else if (oldIdx.src !== newIdx.src) change.change.push(newIdx);
            }
            if (change.del.length > 0 || change.add.length > 0 || change.change.length > 0) {
              diff.change.push(change);
            }
          }
        }
      }
      return diff;
    }
    function createTable(idbtrans, tableName, primKey, indexes) {
      // / <param name="idbtrans" type="IDBTransaction"></param>
      var store = idbtrans.db.createObjectStore(tableName, primKey.keyPath ? {
        keyPath: primKey.keyPath,
        autoIncrement: primKey.auto
      } : {
        autoIncrement: primKey.auto
      });
      indexes.forEach(function (idx) {
        addIndex(store, idx);
      });
      return store;
    }
    function createMissingTables(newSchema, idbtrans) {
      keys(newSchema).forEach(function (tableName) {
        if (!idbtrans.db.objectStoreNames.contains(tableName)) {
          createTable(idbtrans, tableName, newSchema[tableName].primKey, newSchema[tableName].indexes);
        }
      });
    }
    function deleteRemovedTables(newSchema, idbtrans) {
      for (var i = 0; i < idbtrans.db.objectStoreNames.length; ++i) {
        var storeName = idbtrans.db.objectStoreNames[i];
        if (newSchema[storeName] == null) {
          idbtrans.db.deleteObjectStore(storeName);
        }
      }
    }
    function addIndex(store, idx) {
      store.createIndex(idx.name, idx.keyPath, {
        unique: idx.unique,
        multiEntry: idx.multi
      });
    }
    // 
    // 
    // Dexie Protected API
    // 
    // 
    this._allTables = allTables;
    this._createTransaction = function (mode, storeNames, dbschema, parentTransaction) {
      return new Transaction(mode, storeNames, dbschema, parentTransaction);
    };
    /*Generate a temporary transaction when db operations are done outside a transaction scope.
    */
    function tempTransaction(mode, storeNames, fn) {
      if (!openComplete && !PSD.letThrough) {
        if (!isBeingOpened) {
          if (!autoOpen) return rejection(new exceptions.DatabaseClosed());
          db.open().catch(nop);
        }
        return dbReadyPromise.then(function () {
          return tempTransaction(mode, storeNames, fn);
        });
      } else {
        var trans = db._createTransaction(mode, storeNames, globalSchema);
        try {
          trans.create();
        } catch (ex) {
          return rejection(ex);
        }
        return trans._promise(mode, function (resolve, reject) {
          return newScope(function () {
            PSD.trans = trans;
            return fn(resolve, reject, trans);
          });
        }).then(function (result) {
          // Instead of resolving value directly, wait with resolving it until transaction has completed.
          // Otherwise the data would not be in the DB if requesting it in the then() operation.
          // Specifically, to ensure that the following expression will work:
          // 
          // db.friends.put({name: "Arne"}).then(function () {
          // db.friends.where("name").equals("Arne").count(function(count) {
          // assert (count === 1);
          // });
          // });
          // 
          return trans._completion.then(function () {
            return result;
          });
        });
      }
    }
    this._whenReady = function (fn) {
      return openComplete || PSD.letThrough ? fn() : new Promise(function (resolve, reject) {
        if (!isBeingOpened) {
          if (!autoOpen) {
            reject(new exceptions.DatabaseClosed());
            return;
          }
          db.open().catch(nop);
        }
        dbReadyPromise.then(resolve, reject);
      }).then(fn);
    };
    // 
    // 
    // 
    // 
    // Dexie API
    // 
    // 
    // 
    this.verno = 0;
    this.open = function () {
      if (isBeingOpened || idbdb) return dbReadyPromise.then(function () {
        return dbOpenError ? rejection(dbOpenError) : db;
      });
      debug && (openCanceller._stackHolder = getErrorWithStack());
      // Let stacks point to when open() was called rather than where new Dexie() was called.
      isBeingOpened = true;
      dbOpenError = null;
      openComplete = false;
      // Function pointers to call when the core opening process completes.
      var resolveDbReady = dbReadyResolve, // upgradeTransaction to abort on failure.
      upgradeTransaction = null;
      return Promise.race([openCanceller, new Promise(function (resolve, reject) {
        // Multiply db.verno with 10 will be needed to workaround upgrading bug in IE:
        // IE fails when deleting objectStore after reading from it.
        // A future version of Dexie.js will stopover an intermediate version to workaround this.
        // At that point, we want to be backward compatible. Could have been multiplied with 2, but by using 10, it is easier to map the number to the real version number.
        // If no API, throw!
        if (!indexedDB) throw new exceptions.MissingAPI("indexedDB API not found. If using IE10+, make sure to run your code on a server URL " + "(not locally). If using old Safari versions, make sure to include indexedDB polyfill.");
        var req = autoSchema ? indexedDB.open(dbName) : indexedDB.open(dbName, Math.round(db.verno * 10));
        if (!req) throw new exceptions.MissingAPI("IndexedDB API not available");
        // May happen in Safari private mode, see https://github.com/dfahlander/Dexie.js/issues/134
        req.onerror = eventRejectHandler(reject);
        req.onblocked = wrap(fireOnBlocked);
        req.onupgradeneeded = wrap(function (e) {
          upgradeTransaction = req.transaction;
          if (autoSchema && !db._allowEmptyDB) {
            // Caller did not specify a version or schema. Doing that is only acceptable for opening alread existing databases.
            // If onupgradeneeded is called it means database did not exist. Reject the open() promise and make sure that we
            // do not create a new database by accident here.
            req.onerror = preventDefault;
            // Prohibit onabort error from firing before we're done!
            upgradeTransaction.abort();
            // Abort transaction (would hope that this would make DB disappear but it doesnt.)
            // Close database and delete it.
            req.result.close();
            var delreq = indexedDB.deleteDatabase(dbName);
            // The upgrade transaction is atomic, and javascript is single threaded - meaning that there is no risk that we delete someone elses database here!
            delreq.onsuccess = delreq.onerror = wrap(function () {
              reject(new exceptions.NoSuchDatabase("Database " + dbName + " doesnt exist"));
            });
          } else {
            upgradeTransaction.onerror = eventRejectHandler(reject);
            var oldVer = e.oldVersion > Math.pow(2, 62) ? 0 : e.oldVersion;
            // Safari 8 fix.
            runUpgraders(oldVer / 10, upgradeTransaction, reject, req);
          }
        }, reject);
        req.onsuccess = wrap(function () {
          // Core opening procedure complete. Now let's just record some stuff.
          upgradeTransaction = null;
          idbdb = req.result;
          connections.push(db);
          // Used for emulating versionchange event on IE/Edge/Safari.
          if (autoSchema) readGlobalSchema(); else if (idbdb.objectStoreNames.length > 0) {
            try {
              adjustToExistingIndexNames(globalSchema, idbdb.transaction(safariMultiStoreFix(idbdb.objectStoreNames), READONLY));
            } catch (e) {}
          }
          idbdb.onversionchange = wrap(function (ev) {
            db._vcFired = true;
            // detect implementations that not support versionchange (IE/Edge/Safari)
            db.on("versionchange").fire(ev);
          });
          if (!hasNativeGetDatabaseNames && dbName !== '__dbnames') {
            dbNamesDB.dbnames.put({
              name: dbName
            }).catch(nop);
          }
          resolve();
        }, reject);
      })]).then(function () {
        // Before finally resolving the dbReadyPromise and this promise,
        // call and await all on('ready') subscribers:
        // Dexie.vip() makes subscribers able to use the database while being opened.
        // This is a must since these subscribers take part of the opening procedure.
        onReadyBeingFired = [];
        return Promise.resolve(Dexie.vip(db.on.ready.fire)).then(function fireRemainders() {
          if (onReadyBeingFired.length > 0) {
            // In case additional subscribers to db.on('ready') were added during the time db.on.ready.fire was executed.
            var remainders = onReadyBeingFired.reduce(promisableChain, nop);
            onReadyBeingFired = [];
            return Promise.resolve(Dexie.vip(remainders)).then(fireRemainders);
          }
        });
      }).finally(function () {
        onReadyBeingFired = null;
      }).then(function () {
        // Resolve the db.open() with the db instance.
        isBeingOpened = false;
        return db;
      }).catch(function (err) {
        try {
          // Did we fail within onupgradeneeded? Make sure to abort the upgrade transaction so it doesnt commit.
          upgradeTransaction && upgradeTransaction.abort();
        } catch (e) {}
        isBeingOpened = false;
        // Set before calling db.close() so that it doesnt reject openCanceller again (leads to unhandled rejection event).
        db.close();
        // Closes and resets idbdb, removes connections, resets dbReadyPromise and openCanceller so that a later db.open() is fresh.
        // A call to db.close() may have made on-ready subscribers fail. Use dbOpenError if set, since err could be a follow-up error on that.
        dbOpenError = err;
        // Record the error. It will be used to reject further promises of db operations.
        return rejection(dbOpenError);
      }).finally(function () {
        openComplete = true;
        resolveDbReady();
      });
    };
    this.close = function () {
      var idx = connections.indexOf(db);
      if (idx >= 0) connections.splice(idx, 1);
      if (idbdb) {
        try {
          idbdb.close();
        } catch (e) {}
        idbdb = null;
      }
      autoOpen = false;
      dbOpenError = new exceptions.DatabaseClosed();
      if (isBeingOpened) cancelOpen(dbOpenError);
      // Reset dbReadyPromise promise:
      dbReadyPromise = new Promise(function (resolve) {
        dbReadyResolve = resolve;
      });
      openCanceller = new Promise(function (_, reject) {
        cancelOpen = reject;
      });
    };
    this.delete = function () {
      var hasArguments = arguments.length > 0;
      return new Promise(function (resolve, reject) {
        if (hasArguments) throw new exceptions.InvalidArgument("Arguments not allowed in db.delete()");
        if (isBeingOpened) {
          dbReadyPromise.then(doDelete);
        } else {
          doDelete();
        }
        function doDelete() {
          db.close();
          var req = indexedDB.deleteDatabase(dbName);
          req.onsuccess = wrap(function () {
            if (!hasNativeGetDatabaseNames) {
              dbNamesDB.dbnames.delete(dbName).catch(nop);
            }
            resolve();
          });
          req.onerror = eventRejectHandler(reject);
          req.onblocked = fireOnBlocked;
        }
      });
    };
    this.backendDB = function () {
      return idbdb;
    };
    this.isOpen = function () {
      return idbdb !== null;
    };
    this.hasBeenClosed = function () {
      return dbOpenError && dbOpenError instanceof exceptions.DatabaseClosed;
    };
    this.hasFailed = function () {
      return dbOpenError !== null;
    };
    this.dynamicallyOpened = function () {
      return autoSchema;
    };
    // 
    // Properties
    // 
    this.name = dbName;
    // db.tables - an array of all Table instances.
    props(this, {
      tables: {
        get: function () {
          // / <returns type="Array" elementType="Table" />
          return keys(allTables).map(function (name) {
            return allTables[name];
          });
        }
      }
    });
    // 
    // Events
    // 
    this.on = Events(this, "populate", "blocked", "versionchange", {
      ready: [promisableChain, nop]
    });
    this.on.ready.subscribe = override(this.on.ready.subscribe, function (subscribe) {
      return function (subscriber, bSticky) {
        Dexie.vip(function () {
          if (openComplete) {
            // Database already open. Call subscriber asap.
            if (!dbOpenError) Promise.resolve().then(subscriber);
            // bSticky: Also subscribe to future open sucesses (after close / reopen)
            if (bSticky) subscribe(subscriber);
          } else if (onReadyBeingFired) {
            // db.on('ready') subscribers are currently being executed and have not yet resolved or rejected
            onReadyBeingFired.push(subscriber);
            if (bSticky) subscribe(subscriber);
          } else {
            // Database not yet open. Subscribe to it.
            subscribe(subscriber);
            // If bSticky is falsy, make sure to unsubscribe subscriber when fired once.
            if (!bSticky) subscribe(function unsubscribe() {
              db.on.ready.unsubscribe(subscriber);
              db.on.ready.unsubscribe(unsubscribe);
            });
          }
        });
      };
    });
    this.transaction = function () {
      // / <summary>
      // /
      // / </summary>
      // / <param name="mode" type="String">"r" for readonly, or "rw" for readwrite</param>
      // / <param name="tableInstances">Table instance, Array of Table instances, String or String Array of object stores to include in the transaction</param>
      // / <param name="scopeFunc" type="Function">Function to execute with transaction</param>
      var args = extractTransactionArgs.apply(this, arguments);
      return this._transaction.apply(this, args);
    };
    function extractTransactionArgs(mode, _tableArgs_, scopeFunc) {
      // Let table arguments be all arguments between mode and last argument.
      var i = arguments.length;
      if (i < 2) throw new exceptions.InvalidArgument("Too few arguments");
      // Prevent optimzation killer (https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments)
      // and clone arguments except the first one into local var 'args'.
      var args = new Array(i - 1);
      while (--i) args[i - 1] = arguments[i];
      // Let scopeFunc be the last argument and pop it so that args now only contain the table arguments.
      scopeFunc = args.pop();
      var tables = flatten(args);
      // Support using array as middle argument, or a mix of arrays and non-arrays.
      return [mode, tables, scopeFunc];
    }
    this._transaction = function (mode, tables, scopeFunc) {
      var parentTransaction = PSD.trans;
      // Check if parent transactions is bound to this db instance, and if caller wants to reuse it
      if (!parentTransaction || parentTransaction.db !== db || mode.indexOf('!') !== -1) parentTransaction = null;
      var onlyIfCompatible = mode.indexOf('?') !== -1;
      mode = mode.replace('!', '').replace('?', '');
      // Ok. Will change arguments[0] as well but we wont touch arguments henceforth.
      try {
        // 
        // Get storeNames from arguments. Either through given table instances, or through given table names.
        // 
        var storeNames = tables.map(function (table) {
          var storeName = table instanceof Table ? table.name : table;
          if (typeof storeName !== 'string') throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");
          return storeName;
        });
        // 
        // Resolve mode. Allow shortcuts "r" and "rw".
        // 
        if (mode == "r" || mode == READONLY) mode = READONLY; else if (mode == "rw" || mode == READWRITE) mode = READWRITE; else throw new exceptions.InvalidArgument("Invalid transaction mode: " + mode);
        if (parentTransaction) {
          // Basic checks
          if (parentTransaction.mode === READONLY && mode === READWRITE) {
            if (onlyIfCompatible) {
              // Spawn new transaction instead.
              parentTransaction = null;
            } else throw new exceptions.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");
          }
          if (parentTransaction) {
            storeNames.forEach(function (storeName) {
              if (parentTransaction && parentTransaction.storeNames.indexOf(storeName) === -1) {
                if (onlyIfCompatible) {
                  // Spawn new transaction instead.
                  parentTransaction = null;
                } else throw new exceptions.SubTransaction("Table " + storeName + " not included in parent transaction.");
              }
            });
          }
          if (onlyIfCompatible && parentTransaction && !parentTransaction.active) {
            // '?' mode should not keep using an inactive transaction.
            parentTransaction = null;
          }
        }
      } catch (e) {
        return parentTransaction ? parentTransaction._promise(null, function (_, reject) {
          reject(e);
        }) : rejection(e);
      }
      // If this is a sub-transaction, lock the parent and then launch the sub-transaction.
      return parentTransaction ? parentTransaction._promise(mode, enterTransactionScope, "lock") : PSD.trans ? // no parent transaction despite PSD.trans exists. Make sure also
      // that the zone we create is not a sub-zone of current, because
      // Promise.follow() should not wait for it if so.
      usePSD(PSD.transless, function () {
        return db._whenReady(enterTransactionScope);
      }) : db._whenReady(enterTransactionScope);
      function enterTransactionScope() {
        return Promise.resolve().then(function () {
          // Keep a pointer to last non-transactional PSD to use if someone calls Dexie.ignoreTransaction().
          var transless = PSD.transless || PSD;
          // Our transaction.
          // return new Promise((resolve, reject) => {
          var trans = db._createTransaction(mode, storeNames, globalSchema, parentTransaction);
          // Let the transaction instance be part of a Promise-specific data (PSD) value.
          var zoneProps = {
            trans: trans,
            transless: transless
          };
          if (parentTransaction) {
            // Emulate transaction commit awareness for inner transaction (must 'commit' when the inner transaction has no more operations ongoing)
            trans.idbtrans = parentTransaction.idbtrans;
          } else {
            trans.create();
          }
          // Support for native async await.
          if (scopeFunc.constructor === AsyncFunction) {
            incrementExpectedAwaits();
          }
          var returnValue;
          var promiseFollowed = Promise.follow(function () {
            // Finally, call the scope function with our table and transaction arguments.
            returnValue = scopeFunc.call(trans, trans);
            if (returnValue) {
              if (returnValue.constructor === NativePromise) {
                var decrementor = decrementExpectedAwaits.bind(null, null);
                returnValue.then(decrementor, decrementor);
              } else if (typeof returnValue.next === 'function' && typeof returnValue.throw === 'function') {
                // scopeFunc returned an iterator with throw-support. Handle yield as await.
                returnValue = awaitIterator(returnValue);
              }
            }
          }, zoneProps);
          return (returnValue && typeof returnValue.then === 'function' ? // Promise returned. User uses promise-style transactions.
          Promise.resolve(returnValue).then(function (x) {
            return trans.active ? x : // Transaction still active. Continue.
            rejection(new exceptions.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn"));
          }) : // No promise returned. Wait for all outstanding promises before continuing.
          promiseFollowed.then(function () {
            return returnValue;
          })).then(function (x) {
            // sub transactions don't react to idbtrans.oncomplete. We must trigger a completion:
            if (parentTransaction) trans._resolve();
            // wait for trans._completion
            // (if root transaction, this means 'complete' event. If sub-transaction, we've just fired it ourselves)
            return trans._completion.then(function () {
              return x;
            });
          }).catch(function (e) {
            trans._reject(e);
            // Yes, above then-handler were maybe not called because of an unhandled rejection in scopeFunc!
            return rejection(e);
          });
        });
      }
    };
    this.table = function (tableName) {
      // / <returns type="Table"></returns>
      if (!hasOwn(allTables, tableName)) {
        throw new exceptions.InvalidTable("Table " + tableName + " does not exist");
      }
      return allTables[tableName];
    };
    // 
    // 
    // 
    // Table Class
    // 
    // 
    // 
    function Table(name, tableSchema, optionalTrans) {
      // / <param name="name" type="String"></param>
      this.name = name;
      this.schema = tableSchema;
      this._tx = optionalTrans;
      this.hook = allTables[name] ? allTables[name].hook : Events(null, {
        "creating": [hookCreatingChain, nop],
        "reading": [pureFunctionChain, mirror],
        "updating": [hookUpdatingChain, nop],
        "deleting": [hookDeletingChain, nop]
      });
    }
    function BulkErrorHandlerCatchAll(errorList, done, supportHooks) {
      return (supportHooks ? hookedEventRejectHandler : eventRejectHandler)(function (e) {
        errorList.push(e);
        done && done();
      });
    }
    function bulkDelete(idbstore, trans, keysOrTuples, hasDeleteHook, deletingHook) {
      // If hasDeleteHook, keysOrTuples must be an array of tuples: [[key1, value2],[key2,value2],...],
      // else keysOrTuples must be just an array of keys: [key1, key2, ...].
      return new Promise(function (resolve, reject) {
        var len = keysOrTuples.length, lastItem = len - 1;
        if (len === 0) return resolve();
        if (!hasDeleteHook) {
          for (var i = 0; i < len; ++i) {
            var req = idbstore.delete(keysOrTuples[i]);
            req.onerror = eventRejectHandler(reject);
            if (i === lastItem) req.onsuccess = wrap(function () {
              return resolve();
            });
          }
        } else {
          var hookCtx, errorHandler = hookedEventRejectHandler(reject), successHandler = hookedEventSuccessHandler(null);
          tryCatch(function () {
            for (var i = 0; i < len; ++i) {
              hookCtx = {
                onsuccess: null,
                onerror: null
              };
              var tuple = keysOrTuples[i];
              deletingHook.call(hookCtx, tuple[0], tuple[1], trans);
              var req = idbstore.delete(tuple[0]);
              req._hookCtx = hookCtx;
              req.onerror = errorHandler;
              if (i === lastItem) req.onsuccess = hookedEventSuccessHandler(resolve); else req.onsuccess = successHandler;
            }
          }, function (err) {
            hookCtx.onerror && hookCtx.onerror(err);
            throw err;
          });
        }
      });
    }
    props(Table.prototype, {
      // 
      // Table Protected Methods
      // 
      _trans: function getTransaction(mode, fn, writeLocked) {
        var trans = this._tx || PSD.trans;
        return trans && trans.db === db ? trans === PSD.trans ? trans._promise(mode, fn, writeLocked) : newScope(function () {
          return trans._promise(mode, fn, writeLocked);
        }, {
          trans: trans,
          transless: PSD.transless || PSD
        }) : tempTransaction(mode, [this.name], fn);
      },
      _idbstore: function getIDBObjectStore(mode, fn, writeLocked) {
        var tableName = this.name;
        function supplyIdbStore(resolve, reject, trans) {
          if (trans.storeNames.indexOf(tableName) === -1) throw new exceptions.NotFound("Table" + tableName + " not part of transaction");
          return fn(resolve, reject, trans.idbtrans.objectStore(tableName), trans);
        }
        return this._trans(mode, supplyIdbStore, writeLocked);
      },
      // 
      // Table Public Methods
      // 
      get: function (keyOrCrit, cb) {
        if (keyOrCrit && keyOrCrit.constructor === Object) return this.where(keyOrCrit).first(cb);
        var self = this;
        return this._idbstore(READONLY, function (resolve, reject, idbstore) {
          var req = idbstore.get(keyOrCrit);
          req.onerror = eventRejectHandler(reject);
          req.onsuccess = wrap(function () {
            resolve(self.hook.reading.fire(req.result));
          }, reject);
        }).then(cb);
      },
      where: function (indexOrCrit) {
        if (typeof indexOrCrit === 'string') return new WhereClause(this, indexOrCrit);
        if (isArray(indexOrCrit)) return new WhereClause(this, "[" + indexOrCrit.join('+') + "]");
        // indexOrCrit is an object map of {[keyPath]:value}
        var keyPaths = keys(indexOrCrit);
        if (keyPaths.length === 1) // Only one critera. This was the easy case:
        return this.where(keyPaths[0]).equals(indexOrCrit[keyPaths[0]]);
        // Multiple criterias.
        // Let's try finding a compound index that matches all keyPaths in
        // arbritary order:
        var compoundIndex = this.schema.indexes.concat(this.schema.primKey).filter(function (ix) {
          return ix.compound && keyPaths.every(function (keyPath) {
            return ix.keyPath.indexOf(keyPath) >= 0;
          }) && ix.keyPath.every(function (keyPath) {
            return keyPaths.indexOf(keyPath) >= 0;
          });
        })[0];
        if (compoundIndex && maxKey !== maxString) // Cool! We found such compound index
        // and this browser supports compound indexes (maxKey !== maxString)!
        return this.where(compoundIndex.name).equals(compoundIndex.keyPath.map(function (kp) {
          return indexOrCrit[kp];
        }));
        if (!compoundIndex) console.warn("The query " + JSON.stringify(indexOrCrit) + " on " + this.name + " would benefit of a " + ("compound index [" + keyPaths.join('+') + "]"));
        // Ok, now let's fallback to finding at least one matching index
        // and filter the rest.
        var idxByName = this.schema.idxByName;
        var simpleIndex = keyPaths.reduce(function (r, keyPath) {
          return [r[0] || idxByName[keyPath], r[0] || !idxByName[keyPath] ? combine(r[1], function (x) {
            return '' + getByKeyPath(x, keyPath) == '' + indexOrCrit[keyPath];
          }) : r[1]];
        }, [null, null]);
        var idx = simpleIndex[0];
        return idx ? this.where(idx.name).equals(indexOrCrit[idx.keyPath]).filter(simpleIndex[1]) : compoundIndex ? this.filter(simpleIndex[1]) : // Has compound but browser bad. Allow filter.
        this.where(keyPaths).equals('');
      },
      count: function (cb) {
        return this.toCollection().count(cb);
      },
      offset: function (offset) {
        return this.toCollection().offset(offset);
      },
      limit: function (numRows) {
        return this.toCollection().limit(numRows);
      },
      reverse: function () {
        return this.toCollection().reverse();
      },
      filter: function (filterFunction) {
        return this.toCollection().and(filterFunction);
      },
      each: function (fn) {
        return this.toCollection().each(fn);
      },
      toArray: function (cb) {
        return this.toCollection().toArray(cb);
      },
      orderBy: function (index) {
        return new Collection(new WhereClause(this, isArray(index) ? "[" + index.join('+') + "]" : index));
      },
      toCollection: function () {
        return new Collection(new WhereClause(this));
      },
      mapToClass: function (constructor, structure) {
        // / <summary>
        // /     Map table to a javascript constructor function. Objects returned from the database will be instances of this class, making
        // /     it possible to the instanceOf operator as well as extending the class using constructor.prototype.method = function(){...}.
        // / </summary>
        // / <param name="constructor">Constructor function representing the class.</param>
        // / <param name="structure" optional="true">Helps IDE code completion by knowing the members that objects contain and not just the indexes. Also
        // / know what type each member has. Example: {name: String, emailAddresses: [String], password}</param>
        this.schema.mappedClass = constructor;
        var instanceTemplate = Object.create(constructor.prototype);
        if (structure) {
          // structure and instanceTemplate is for IDE code competion only while constructor.prototype is for actual inheritance.
          applyStructure(instanceTemplate, structure);
        }
        this.schema.instanceTemplate = instanceTemplate;
        // Now, subscribe to the when("reading") event to make all objects that come out from this table inherit from given class
        // no matter which method to use for reading (Table.get() or Table.where(...)... )
        var readHook = function (obj) {
          if (!obj) return obj;
          // No valid object. (Value is null). Return as is.
          // Create a new object that derives from constructor:
          var res = Object.create(constructor.prototype);
          // Clone members:
          for (var m in obj) if (hasOwn(obj, m)) try {
            res[m] = obj[m];
          } catch (_) {}
          return res;
        };
        if (this.schema.readHook) {
          this.hook.reading.unsubscribe(this.schema.readHook);
        }
        this.schema.readHook = readHook;
        this.hook("reading", readHook);
        return constructor;
      },
      defineClass: function (structure) {
        // / <summary>
        // /     Define all members of the class that represents the table. This will help code completion of when objects are read from the database
        // /     as well as making it possible to extend the prototype of the returned constructor function.
        // / </summary>
        // / <param name="structure">Helps IDE code completion by knowing the members that objects contain and not just the indexes. Also
        // / know what type each member has. Example: {name: String, emailAddresses: [String], properties: {shoeSize: Number}}</param>
        return this.mapToClass(Dexie.defineClass(structure), structure);
      },
      bulkDelete: function (keys$$1) {
        if (this.hook.deleting.fire === nop) {
          return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {
            resolve(bulkDelete(idbstore, trans, keys$$1, false, nop));
          });
        } else {
          return this.where(':id').anyOf(keys$$1).delete().then(function () {});
        }
      },
      bulkPut: function (objects, keys$$1) {
        var _this = this;
        return this._idbstore(READWRITE, function (resolve, reject, idbstore) {
          if (!idbstore.keyPath && !_this.schema.primKey.auto && !keys$$1) throw new exceptions.InvalidArgument("bulkPut() with non-inbound keys requires keys array in second argument");
          if (idbstore.keyPath && keys$$1) throw new exceptions.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");
          if (keys$$1 && keys$$1.length !== objects.length) throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");
          if (objects.length === 0) return resolve();
          // Caller provided empty list.
          var done = function (result) {
            if (errorList.length === 0) resolve(result); else reject(new BulkError(_this.name + ".bulkPut(): " + errorList.length + " of " + numObjs + " operations failed", errorList));
          };
          var req, errorList = [], errorHandler, numObjs = objects.length, table = _this;
          if (_this.hook.creating.fire === nop && _this.hook.updating.fire === nop) {
            // 
            // Standard Bulk (no 'creating' or 'updating' hooks to care about)
            // 
            errorHandler = BulkErrorHandlerCatchAll(errorList);
            for (var i = 0, l = objects.length; i < l; ++i) {
              req = keys$$1 ? idbstore.put(objects[i], keys$$1[i]) : idbstore.put(objects[i]);
              req.onerror = errorHandler;
            }
            // Only need to catch success or error on the last operation
            // according to the IDB spec.
            req.onerror = BulkErrorHandlerCatchAll(errorList, done);
            req.onsuccess = eventSuccessHandler(done);
          } else {
            var effectiveKeys = keys$$1 || idbstore.keyPath && objects.map(function (o) {
              return getByKeyPath(o, idbstore.keyPath);
            });
            // Generate map of {[key]: object}
            var objectLookup = effectiveKeys && arrayToObject(effectiveKeys, function (key, i) {
              return key != null && [key, objects[i]];
            });
            var promise = !effectiveKeys ? // Auto-incremented key-less objects only without any keys argument.
            table.bulkAdd(objects) : // Keys provided. Either as inbound in provided objects, or as a keys argument.
            // Begin with updating those that exists in DB:
            table.where(':id').anyOf(effectiveKeys.filter(function (key) {
              return key != null;
            })).modify(function () {
              this.value = objectLookup[this.primKey];
              objectLookup[this.primKey] = null;
            }).catch(ModifyError, function (e) {
              errorList = e.failures;
            }).then(function () {
              // Now, let's examine which items didnt exist so we can add them:
              var objsToAdd = [], keysToAdd = keys$$1 && [];
              // Iterate backwards. Why? Because if same key was used twice, just add the last one.
              for (var i = effectiveKeys.length - 1; i >= 0; --i) {
                var key = effectiveKeys[i];
                if (key == null || objectLookup[key]) {
                  objsToAdd.push(objects[i]);
                  keys$$1 && keysToAdd.push(key);
                  if (key != null) objectLookup[key] = null;
                }
              }
              // The items are in reverse order so reverse them before adding.
              // Could be important in order to get auto-incremented keys the way the caller
              // would expect. Could have used unshift instead of push()/reverse(),
              // but: http://jsperf.com/unshift-vs-reverse
              objsToAdd.reverse();
              keys$$1 && keysToAdd.reverse();
              return table.bulkAdd(objsToAdd, keysToAdd);
            }).then(function (lastAddedKey) {
              // Resolve with key of the last object in given arguments to bulkPut():
              var lastEffectiveKey = effectiveKeys[effectiveKeys.length - 1];
              // Key was provided.
              return lastEffectiveKey != null ? lastEffectiveKey : lastAddedKey;
            });
            promise.then(done).catch(BulkError, function (e) {
              // Concat failure from ModifyError and reject using our 'done' method.
              errorList = errorList.concat(e.failures);
              done();
            }).catch(reject);
          }
        }, "locked");
      },
      bulkAdd: function (objects, keys$$1) {
        var self = this, creatingHook = this.hook.creating.fire;
        return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {
          if (!idbstore.keyPath && !self.schema.primKey.auto && !keys$$1) throw new exceptions.InvalidArgument("bulkAdd() with non-inbound keys requires keys array in second argument");
          if (idbstore.keyPath && keys$$1) throw new exceptions.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");
          if (keys$$1 && keys$$1.length !== objects.length) throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");
          if (objects.length === 0) return resolve();
          // Caller provided empty list.
          function done(result) {
            if (errorList.length === 0) resolve(result); else reject(new BulkError(self.name + ".bulkAdd(): " + errorList.length + " of " + numObjs + " operations failed", errorList));
          }
          var req, errorList = [], errorHandler, successHandler, numObjs = objects.length;
          if (creatingHook !== nop) {
            // 
            // There are subscribers to hook('creating')
            // Must behave as documented.
            // 
            var keyPath = idbstore.keyPath, hookCtx;
            errorHandler = BulkErrorHandlerCatchAll(errorList, null, true);
            successHandler = hookedEventSuccessHandler(null);
            tryCatch(function () {
              for (var i = 0, l = objects.length; i < l; ++i) {
                hookCtx = {
                  onerror: null,
                  onsuccess: null
                };
                var key = keys$$1 && keys$$1[i];
                var obj = objects[i], effectiveKey = keys$$1 ? key : keyPath ? getByKeyPath(obj, keyPath) : undefined, keyToUse = creatingHook.call(hookCtx, effectiveKey, obj, trans);
                if (effectiveKey == null && keyToUse != null) {
                  if (keyPath) {
                    obj = deepClone(obj);
                    setByKeyPath(obj, keyPath, keyToUse);
                  } else {
                    key = keyToUse;
                  }
                }
                req = key != null ? idbstore.add(obj, key) : idbstore.add(obj);
                req._hookCtx = hookCtx;
                if (i < l - 1) {
                  req.onerror = errorHandler;
                  if (hookCtx.onsuccess) req.onsuccess = successHandler;
                }
              }
            }, function (err) {
              hookCtx.onerror && hookCtx.onerror(err);
              throw err;
            });
            req.onerror = BulkErrorHandlerCatchAll(errorList, done, true);
            req.onsuccess = hookedEventSuccessHandler(done);
          } else {
            // 
            // Standard Bulk (no 'creating' hook to care about)
            // 
            errorHandler = BulkErrorHandlerCatchAll(errorList);
            for (var i = 0, l = objects.length; i < l; ++i) {
              req = keys$$1 ? idbstore.add(objects[i], keys$$1[i]) : idbstore.add(objects[i]);
              req.onerror = errorHandler;
            }
            // Only need to catch success or error on the last operation
            // according to the IDB spec.
            req.onerror = BulkErrorHandlerCatchAll(errorList, done);
            req.onsuccess = eventSuccessHandler(done);
          }
        });
      },
      add: function (obj, key) {
        // / <summary>
        // /   Add an object to the database. In case an object with same primary key already exists, the object will not be added.
        // / </summary>
        // / <param name="obj" type="Object">A javascript object to insert</param>
        // / <param name="key" optional="true">Primary key</param>
        var creatingHook = this.hook.creating.fire;
        return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {
          var hookCtx = {
            onsuccess: null,
            onerror: null
          };
          if (creatingHook !== nop) {
            var effectiveKey = key != null ? key : idbstore.keyPath ? getByKeyPath(obj, idbstore.keyPath) : undefined;
            var keyToUse = creatingHook.call(hookCtx, effectiveKey, obj, trans);
            // Allow subscribers to when("creating") to generate the key.
            if (effectiveKey == null && keyToUse != null) {
              if (idbstore.keyPath) setByKeyPath(obj, idbstore.keyPath, keyToUse); else key = keyToUse;
            }
          }
          try {
            var req = key != null ? idbstore.add(obj, key) : idbstore.add(obj);
            req._hookCtx = hookCtx;
            req.onerror = hookedEventRejectHandler(reject);
            req.onsuccess = hookedEventSuccessHandler(function (result) {
              // TODO: Remove these two lines in next major release (2.0?)
              // It's no good practice to have side effects on provided parameters
              var keyPath = idbstore.keyPath;
              if (keyPath) setByKeyPath(obj, keyPath, result);
              resolve(result);
            });
          } catch (e) {
            if (hookCtx.onerror) hookCtx.onerror(e);
            throw e;
          }
        });
      },
      put: function (obj, key) {
        var _this = this;
        // / <summary>
        // /   Add an object to the database but in case an object with same primary key alread exists, the existing one will get updated.
        // / </summary>
        // / <param name="obj" type="Object">A javascript object to insert or update</param>
        // / <param name="key" optional="true">Primary key</param>
        var creatingHook = this.hook.creating.fire, updatingHook = this.hook.updating.fire;
        if (creatingHook !== nop || updatingHook !== nop) {
          // 
          // People listens to when("creating") or when("updating") events!
          // We must know whether the put operation results in an CREATE or UPDATE.
          // 
          var keyPath = this.schema.primKey.keyPath;
          var effectiveKey = key !== undefined ? key : keyPath && getByKeyPath(obj, keyPath);
          if (effectiveKey == null) return this.add(obj);
          // Since key is optional, make sure we get it from obj if not provided
          // Primary key exist. Lock transaction and try modifying existing. If nothing modified, call add().
          // clone obj before this async call. If caller modifies obj the line after put(), the IDB spec requires that it should not affect operation.
          obj = deepClone(obj);
          return this._trans(READWRITE, function () {
            return _this.where(":id").equals(effectiveKey).modify(function () {
              // Replace extisting value with our object
              // CRUD event firing handled in Collection.modify()
              this.value = obj;
            }).then(function (count) {
              return count === 0 ? _this.add(obj, key) : effectiveKey;
            });
          }, "locked");
        } else {
          // Use the standard IDB put() method.
          return this._idbstore(READWRITE, function (resolve, reject, idbstore) {
            var req = key !== undefined ? idbstore.put(obj, key) : idbstore.put(obj);
            req.onerror = eventRejectHandler(reject);
            req.onsuccess = wrap(function (ev) {
              var keyPath = idbstore.keyPath;
              if (keyPath) setByKeyPath(obj, keyPath, ev.target.result);
              resolve(req.result);
            });
          });
        }
      },
      'delete': function (key) {
        // / <param name="key">Primary key of the object to delete</param>
        if (this.hook.deleting.subscribers.length) {
          // People listens to when("deleting") event. Must implement delete using Collection.delete() that will
          // call the CRUD event. Only Collection.delete() will know whether an object was actually deleted.
          return this.where(":id").equals(key).delete();
        } else {
          // No one listens. Use standard IDB delete() method.
          return this._idbstore(READWRITE, function (resolve, reject, idbstore) {
            var req = idbstore.delete(key);
            req.onerror = eventRejectHandler(reject);
            req.onsuccess = wrap(function () {
              resolve(req.result);
            });
          });
        }
      },
      clear: function () {
        if (this.hook.deleting.subscribers.length) {
          // People listens to when("deleting") event. Must implement delete using Collection.delete() that will
          // call the CRUD event. Only Collection.delete() will knows which objects that are actually deleted.
          return this.toCollection().delete();
        } else {
          return this._idbstore(READWRITE, function (resolve, reject, idbstore) {
            var req = idbstore.clear();
            req.onerror = eventRejectHandler(reject);
            req.onsuccess = wrap(function () {
              resolve(req.result);
            });
          });
        }
      },
      update: function (keyOrObject, modifications) {
        if (typeof modifications !== 'object' || isArray(modifications)) throw new exceptions.InvalidArgument("Modifications must be an object.");
        if (typeof keyOrObject === 'object' && !isArray(keyOrObject)) {
          // object to modify. Also modify given object with the modifications:
          keys(modifications).forEach(function (keyPath) {
            setByKeyPath(keyOrObject, keyPath, modifications[keyPath]);
          });
          var key = getByKeyPath(keyOrObject, this.schema.primKey.keyPath);
          if (key === undefined) return rejection(new exceptions.InvalidArgument("Given object does not contain its primary key"));
          return this.where(":id").equals(key).modify(modifications);
        } else {
          // key to modify
          return this.where(":id").equals(keyOrObject).modify(modifications);
        }
      }
    });
    // 
    // 
    // 
    // Transaction Class
    // 
    // 
    // 
    function Transaction(mode, storeNames, dbschema, parent) {
      var _this = this;
      // / <summary>
      // /    Transaction class. Represents a database transaction. All operations on db goes through a Transaction.
      // / </summary>
      // / <param name="mode" type="String">Any of "readwrite" or "readonly"</param>
      // / <param name="storeNames" type="Array">Array of table names to operate on</param>
      this.db = db;
      this.mode = mode;
      this.storeNames = storeNames;
      this.idbtrans = null;
      this.on = Events(this, "complete", "error", "abort");
      this.parent = parent || null;
      this.active = true;
      this._reculock = 0;
      this._blockedFuncs = [];
      this._resolve = null;
      this._reject = null;
      this._waitingFor = null;
      this._waitingQueue = null;
      this._spinCount = 0;
      // Just for debugging waitFor()
      this._completion = new Promise(function (resolve, reject) {
        _this._resolve = resolve;
        _this._reject = reject;
      });
      this._completion.then(function () {
        _this.active = false;
        _this.on.complete.fire();
      }, function (e) {
        var wasActive = _this.active;
        _this.active = false;
        _this.on.error.fire(e);
        _this.parent ? _this.parent._reject(e) : wasActive && _this.idbtrans && _this.idbtrans.abort();
        return rejection(e);
      });
    }
    props(Transaction.prototype, {
      // 
      // Transaction Protected Methods (not required by API users, but needed internally and eventually by dexie extensions)
      // 
      _lock: function () {
        assert(!PSD.global);
        // Locking and unlocking reuires to be within a PSD scope.
        // Temporary set all requests into a pending queue if they are called before database is ready.
        ++this._reculock;
        // Recursive read/write lock pattern using PSD (Promise Specific Data) instead of TLS (Thread Local Storage)
        if (this._reculock === 1 && !PSD.global) PSD.lockOwnerFor = this;
        return this;
      },
      _unlock: function () {
        assert(!PSD.global);
        // Locking and unlocking reuires to be within a PSD scope.
        if (--this._reculock === 0) {
          if (!PSD.global) PSD.lockOwnerFor = null;
          while (this._blockedFuncs.length > 0 && !this._locked()) {
            var fnAndPSD = this._blockedFuncs.shift();
            try {
              usePSD(fnAndPSD[1], fnAndPSD[0]);
            } catch (e) {}
          }
        }
        return this;
      },
      _locked: function () {
        // Checks if any write-lock is applied on this transaction.
        // To simplify the Dexie API for extension implementations, we support recursive locks.
        // This is accomplished by using "Promise Specific Data" (PSD).
        // PSD data is bound to a Promise and any child Promise emitted through then() or resolve( new Promise() ).
        // PSD is local to code executing on top of the call stacks of any of any code executed by Promise():
        // * callback given to the Promise() constructor  (function (resolve, reject){...})
        // * callbacks given to then()/catch()/finally() methods (function (value){...})
        // If creating a new independant Promise instance from within a Promise call stack, the new Promise will derive the PSD from the call stack of the parent Promise.
        // Derivation is done so that the inner PSD __proto__ points to the outer PSD.
        // PSD.lockOwnerFor will point to current transaction object if the currently executing PSD scope owns the lock.
        return this._reculock && PSD.lockOwnerFor !== this;
      },
      create: function (idbtrans) {
        var _this = this;
        if (!this.mode) return this;
        assert(!this.idbtrans);
        if (!idbtrans && !idbdb) {
          switch (dbOpenError && dbOpenError.name) {
            case "DatabaseClosedError":
              // Errors where it is no difference whether it was caused by the user operation or an earlier call to db.open()
              throw new exceptions.DatabaseClosed(dbOpenError);
            case "MissingAPIError":
              // Errors where it is no difference whether it was caused by the user operation or an earlier call to db.open()
              throw new exceptions.MissingAPI(dbOpenError.message, dbOpenError);
            default:
              // Make it clear that the user operation was not what caused the error - the error had occurred earlier on db.open()!
              throw new exceptions.OpenFailed(dbOpenError);
          }
        }
        if (!this.active) throw new exceptions.TransactionInactive();
        assert(this._completion._state === null);
        idbtrans = this.idbtrans = idbtrans || idbdb.transaction(safariMultiStoreFix(this.storeNames), this.mode);
        idbtrans.onerror = wrap(function (ev) {
          preventDefault(ev);
          // Prohibit default bubbling to window.error
          _this._reject(idbtrans.error);
        });
        idbtrans.onabort = wrap(function (ev) {
          preventDefault(ev);
          _this.active && _this._reject(new exceptions.Abort(idbtrans.error));
          _this.active = false;
          _this.on("abort").fire(ev);
        });
        idbtrans.oncomplete = wrap(function () {
          _this.active = false;
          _this._resolve();
        });
        return this;
      },
      _promise: function (mode, fn, bWriteLock) {
        var _this = this;
        if (mode === READWRITE && this.mode !== READWRITE) return rejection(new exceptions.ReadOnly("Transaction is readonly"));
        if (!this.active) return rejection(new exceptions.TransactionInactive());
        if (this._locked()) {
          return new Promise(function (resolve, reject) {
            _this._blockedFuncs.push([function () {
              _this._promise(mode, fn, bWriteLock).then(resolve, reject);
            }, PSD]);
          });
        } else if (bWriteLock) {
          return newScope(function () {
            var p = new Promise(function (resolve, reject) {
              _this._lock();
              var rv = fn(resolve, reject, _this);
              if (rv && rv.then) rv.then(resolve, reject);
            });
            p.finally(function () {
              return _this._unlock();
            });
            p._lib = true;
            return p;
          });
        } else {
          var p = new Promise(function (resolve, reject) {
            var rv = fn(resolve, reject, _this);
            if (rv && rv.then) rv.then(resolve, reject);
          });
          p._lib = true;
          return p;
        }
      },
      _root: function () {
        return this.parent ? this.parent._root() : this;
      },
      waitFor: function (promise) {
        // Always operate on the root transaction (in case this is a sub stransaction)
        var root = this._root();
        // For stability reasons, convert parameter to promise no matter what type is passed to waitFor().
        // (We must be able to call .then() on it.)
        promise = Promise.resolve(promise);
        if (root._waitingFor) {
          // Already called waitFor(). Wait for both to complete.
          root._waitingFor = root._waitingFor.then(function () {
            return promise;
          });
        } else {
          // We're not in waiting state. Start waiting state.
          root._waitingFor = promise;
          root._waitingQueue = [];
          // Start interacting with indexedDB until promise completes:
          var store = root.idbtrans.objectStore(root.storeNames[0]);
          (function spin() {
            ++root._spinCount;
            // For debugging only
            while (root._waitingQueue.length) root._waitingQueue.shift()();
            if (root._waitingFor) store.get(-Infinity).onsuccess = spin;
          })();
        }
        var currentWaitPromise = root._waitingFor;
        return new Promise(function (resolve, reject) {
          promise.then(function (res) {
            return root._waitingQueue.push(wrap(resolve.bind(null, res)));
          }, function (err) {
            return root._waitingQueue.push(wrap(reject.bind(null, err)));
          }).finally(function () {
            if (root._waitingFor === currentWaitPromise) {
              // No one added a wait after us. Safe to stop the spinning.
              root._waitingFor = null;
            }
          });
        });
      },
      // 
      // Transaction Public Properties and Methods
      // 
      abort: function () {
        this.active && this._reject(new exceptions.Abort());
        this.active = false;
      },
      tables: {
        get: deprecated("Transaction.tables", function () {
          return allTables;
        })
      },
      table: function (name) {
        var table = db.table(name);
        // Don't check that table is part of transaction. It must fail lazily!
        return new Table(name, table.schema, this);
      }
    });
    // 
    // 
    // 
    // WhereClause
    // 
    // 
    // 
    function WhereClause(table, index, orCollection) {
      // / <param name="table" type="Table"></param>
      // / <param name="index" type="String" optional="true"></param>
      // / <param name="orCollection" type="Collection" optional="true"></param>
      this._ctx = {
        table: table,
        index: index === ":id" ? null : index,
        or: orCollection
      };
    }
    props(WhereClause.prototype, function () {
      // WhereClause private methods
      function fail(collectionOrWhereClause, err, T) {
        var collection = collectionOrWhereClause instanceof WhereClause ? new Collection(collectionOrWhereClause) : collectionOrWhereClause;
        collection._ctx.error = T ? new T(err) : new TypeError(err);
        return collection;
      }
      function emptyCollection(whereClause) {
        return new Collection(whereClause, function () {
          return IDBKeyRange.only("");
        }).limit(0);
      }
      function upperFactory(dir) {
        return dir === "next" ? function (s) {
          return s.toUpperCase();
        } : function (s) {
          return s.toLowerCase();
        };
      }
      function lowerFactory(dir) {
        return dir === "next" ? function (s) {
          return s.toLowerCase();
        } : function (s) {
          return s.toUpperCase();
        };
      }
      function nextCasing(key, lowerKey, upperNeedle, lowerNeedle, cmp, dir) {
        var length = Math.min(key.length, lowerNeedle.length);
        var llp = -1;
        for (var i = 0; i < length; ++i) {
          var lwrKeyChar = lowerKey[i];
          if (lwrKeyChar !== lowerNeedle[i]) {
            if (cmp(key[i], upperNeedle[i]) < 0) return key.substr(0, i) + upperNeedle[i] + upperNeedle.substr(i + 1);
            if (cmp(key[i], lowerNeedle[i]) < 0) return key.substr(0, i) + lowerNeedle[i] + upperNeedle.substr(i + 1);
            if (llp >= 0) return key.substr(0, llp) + lowerKey[llp] + upperNeedle.substr(llp + 1);
            return null;
          }
          if (cmp(key[i], lwrKeyChar) < 0) llp = i;
        }
        if (length < lowerNeedle.length && dir === "next") return key + upperNeedle.substr(key.length);
        if (length < key.length && dir === "prev") return key.substr(0, upperNeedle.length);
        return llp < 0 ? null : key.substr(0, llp) + lowerNeedle[llp] + upperNeedle.substr(llp + 1);
      }
      function addIgnoreCaseAlgorithm(whereClause, match, needles, suffix) {
        // / <param name="needles" type="Array" elementType="String"></param>
        var upper, lower, compare, upperNeedles, lowerNeedles, direction, nextKeySuffix, needlesLen = needles.length;
        if (!needles.every(function (s) {
          return typeof s === 'string';
        })) {
          return fail(whereClause, STRING_EXPECTED);
        }
        function initDirection(dir) {
          upper = upperFactory(dir);
          lower = lowerFactory(dir);
          compare = dir === "next" ? simpleCompare : simpleCompareReverse;
          var needleBounds = needles.map(function (needle) {
            return {
              lower: lower(needle),
              upper: upper(needle)
            };
          }).sort(function (a, b) {
            return compare(a.lower, b.lower);
          });
          upperNeedles = needleBounds.map(function (nb) {
            return nb.upper;
          });
          lowerNeedles = needleBounds.map(function (nb) {
            return nb.lower;
          });
          direction = dir;
          nextKeySuffix = dir === "next" ? "" : suffix;
        }
        initDirection("next");
        var c = new Collection(whereClause, function () {
          return IDBKeyRange.bound(upperNeedles[0], lowerNeedles[needlesLen - 1] + suffix);
        });
        c._ondirectionchange = function (direction) {
          // This event onlys occur before filter is called the first time.
          initDirection(direction);
        };
        var firstPossibleNeedle = 0;
        c._addAlgorithm(function (cursor, advance, resolve) {
          // / <param name="cursor" type="IDBCursor"></param>
          // / <param name="advance" type="Function"></param>
          // / <param name="resolve" type="Function"></param>
          var key = cursor.key;
          if (typeof key !== 'string') return false;
          var lowerKey = lower(key);
          if (match(lowerKey, lowerNeedles, firstPossibleNeedle)) {
            return true;
          } else {
            var lowestPossibleCasing = null;
            for (var i = firstPossibleNeedle; i < needlesLen; ++i) {
              var casing = nextCasing(key, lowerKey, upperNeedles[i], lowerNeedles[i], compare, direction);
              if (casing === null && lowestPossibleCasing === null) firstPossibleNeedle = i + 1; else if (lowestPossibleCasing === null || compare(lowestPossibleCasing, casing) > 0) {
                lowestPossibleCasing = casing;
              }
            }
            if (lowestPossibleCasing !== null) {
              advance(function () {
                cursor.continue(lowestPossibleCasing + nextKeySuffix);
              });
            } else {
              advance(resolve);
            }
            return false;
          }
        });
        return c;
      }
      // 
      // WhereClause public methods
      // 
      return {
        between: function (lower, upper, includeLower, includeUpper) {
          // / <summary>
          // /     Filter out records whose where-field lays between given lower and upper values. Applies to Strings, Numbers and Dates.
          // / </summary>
          // / <param name="lower"></param>
          // / <param name="upper"></param>
          // / <param name="includeLower" optional="true">Whether items that equals lower should be included. Default true.</param>
          // / <param name="includeUpper" optional="true">Whether items that equals upper should be included. Default false.</param>
          // / <returns type="Collection"></returns>
          includeLower = includeLower !== false;
          // Default to true
          includeUpper = includeUpper === true;
          // Default to false
          try {
            if (cmp(lower, upper) > 0 || cmp(lower, upper) === 0 && (includeLower || includeUpper) && !(includeLower && includeUpper)) return emptyCollection(this);
            // Workaround for idiotic W3C Specification that DataError must be thrown if lower > upper. The natural result would be to return an empty collection.
            return new Collection(this, function () {
              return IDBKeyRange.bound(lower, upper, !includeLower, !includeUpper);
            });
          } catch (e) {
            return fail(this, INVALID_KEY_ARGUMENT);
          }
        },
        equals: function (value) {
          return new Collection(this, function () {
            return IDBKeyRange.only(value);
          });
        },
        above: function (value) {
          return new Collection(this, function () {
            return IDBKeyRange.lowerBound(value, true);
          });
        },
        aboveOrEqual: function (value) {
          return new Collection(this, function () {
            return IDBKeyRange.lowerBound(value);
          });
        },
        below: function (value) {
          return new Collection(this, function () {
            return IDBKeyRange.upperBound(value, true);
          });
        },
        belowOrEqual: function (value) {
          return new Collection(this, function () {
            return IDBKeyRange.upperBound(value);
          });
        },
        startsWith: function (str) {
          // / <param name="str" type="String"></param>
          if (typeof str !== 'string') return fail(this, STRING_EXPECTED);
          return this.between(str, str + maxString, true, true);
        },
        startsWithIgnoreCase: function (str) {
          // / <param name="str" type="String"></param>
          if (str === "") return this.startsWith(str);
          return addIgnoreCaseAlgorithm(this, function (x, a) {
            return x.indexOf(a[0]) === 0;
          }, [str], maxString);
        },
        equalsIgnoreCase: function (str) {
          // / <param name="str" type="String"></param>
          return addIgnoreCaseAlgorithm(this, function (x, a) {
            return x === a[0];
          }, [str], "");
        },
        anyOfIgnoreCase: function () {
          var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
          if (set.length === 0) return emptyCollection(this);
          return addIgnoreCaseAlgorithm(this, function (x, a) {
            return a.indexOf(x) !== -1;
          }, set, "");
        },
        startsWithAnyOfIgnoreCase: function () {
          var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
          if (set.length === 0) return emptyCollection(this);
          return addIgnoreCaseAlgorithm(this, function (x, a) {
            return a.some(function (n) {
              return x.indexOf(n) === 0;
            });
          }, set, maxString);
        },
        anyOf: function () {
          var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
          var compare = ascending;
          try {
            set.sort(compare);
          } catch (e) {
            return fail(this, INVALID_KEY_ARGUMENT);
          }
          if (set.length === 0) return emptyCollection(this);
          var c = new Collection(this, function () {
            return IDBKeyRange.bound(set[0], set[set.length - 1]);
          });
          c._ondirectionchange = function (direction) {
            compare = direction === "next" ? ascending : descending;
            set.sort(compare);
          };
          var i = 0;
          c._addAlgorithm(function (cursor, advance, resolve) {
            var key = cursor.key;
            while (compare(key, set[i]) > 0) {
              // The cursor has passed beyond this key. Check next.
              ++i;
              if (i === set.length) {
                // There is no next. Stop searching.
                advance(resolve);
                return false;
              }
            }
            if (compare(key, set[i]) === 0) {
              // The current cursor value should be included and we should continue a single step in case next item has the same key or possibly our next key in set.
              return true;
            } else {
              // cursor.key not yet at set[i]. Forward cursor to the next key to hunt for.
              advance(function () {
                cursor.continue(set[i]);
              });
              return false;
            }
          });
          return c;
        },
        notEqual: function (value) {
          return this.inAnyRange([[minKey, value], [value, maxKey]], {
            includeLowers: false,
            includeUppers: false
          });
        },
        noneOf: function () {
          var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
          if (set.length === 0) return new Collection(this);
          // Return entire collection.
          try {
            set.sort(ascending);
          } catch (e) {
            return fail(this, INVALID_KEY_ARGUMENT);
          }
          // Transform ["a","b","c"] to a set of ranges for between/above/below: [[minKey,"a"], ["a","b"], ["b","c"], ["c",maxKey]]
          var ranges = set.reduce(function (res, val) {
            return res ? res.concat([[res[res.length - 1][1], val]]) : [[minKey, val]];
          }, null);
          ranges.push([set[set.length - 1], maxKey]);
          return this.inAnyRange(ranges, {
            includeLowers: false,
            includeUppers: false
          });
        },
        /** Filter out values withing given set of ranges.
        * Example, give children and elders a rebate of 50%:
        *
        *   db.friends.where('age').inAnyRange([[0,18],[65,Infinity]]).modify({Rebate: 1/2});
        *
        * @param {(string|number|Date|Array)[][]} ranges
        * @param {{includeLowers: boolean, includeUppers: boolean}} options
        */
        inAnyRange: function (ranges, options) {
          if (ranges.length === 0) return emptyCollection(this);
          if (!ranges.every(function (range) {
            return range[0] !== undefined && range[1] !== undefined && ascending(range[0], range[1]) <= 0;
          })) {
            return fail(this, "First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower", exceptions.InvalidArgument);
          }
          var includeLowers = !options || options.includeLowers !== false;
          // Default to true
          var includeUppers = options && options.includeUppers === true;
          // Default to false
          function addRange(ranges, newRange) {
            for (var i = 0, l = ranges.length; i < l; ++i) {
              var range = ranges[i];
              if (cmp(newRange[0], range[1]) < 0 && cmp(newRange[1], range[0]) > 0) {
                range[0] = min(range[0], newRange[0]);
                range[1] = max(range[1], newRange[1]);
                break;
              }
            }
            if (i === l) ranges.push(newRange);
            return ranges;
          }
          var sortDirection = ascending;
          function rangeSorter(a, b) {
            return sortDirection(a[0], b[0]);
          }
          // Join overlapping ranges
          var set;
          try {
            set = ranges.reduce(addRange, []);
            set.sort(rangeSorter);
          } catch (ex) {
            return fail(this, INVALID_KEY_ARGUMENT);
          }
          var i = 0;
          var keyIsBeyondCurrentEntry = includeUppers ? function (key) {
            return ascending(key, set[i][1]) > 0;
          } : function (key) {
            return ascending(key, set[i][1]) >= 0;
          };
          var keyIsBeforeCurrentEntry = includeLowers ? function (key) {
            return descending(key, set[i][0]) > 0;
          } : function (key) {
            return descending(key, set[i][0]) >= 0;
          };
          function keyWithinCurrentRange(key) {
            return !keyIsBeyondCurrentEntry(key) && !keyIsBeforeCurrentEntry(key);
          }
          var checkKey = keyIsBeyondCurrentEntry;
          var c = new Collection(this, function () {
            return IDBKeyRange.bound(set[0][0], set[set.length - 1][1], !includeLowers, !includeUppers);
          });
          c._ondirectionchange = function (direction) {
            if (direction === "next") {
              checkKey = keyIsBeyondCurrentEntry;
              sortDirection = ascending;
            } else {
              checkKey = keyIsBeforeCurrentEntry;
              sortDirection = descending;
            }
            set.sort(rangeSorter);
          };
          c._addAlgorithm(function (cursor, advance, resolve) {
            var key = cursor.key;
            while (checkKey(key)) {
              // The cursor has passed beyond this key. Check next.
              ++i;
              if (i === set.length) {
                // There is no next. Stop searching.
                advance(resolve);
                return false;
              }
            }
            if (keyWithinCurrentRange(key)) {
              // The current cursor value should be included and we should continue a single step in case next item has the same key or possibly our next key in set.
              return true;
            } else if (cmp(key, set[i][1]) === 0 || cmp(key, set[i][0]) === 0) {
              // includeUpper or includeLower is false so keyWithinCurrentRange() returns false even though we are at range border.
              // Continue to next key but don't include this one.
              return false;
            } else {
              // cursor.key not yet at set[i]. Forward cursor to the next key to hunt for.
              advance(function () {
                if (sortDirection === ascending) cursor.continue(set[i][0]); else cursor.continue(set[i][1]);
              });
              return false;
            }
          });
          return c;
        },
        startsWithAnyOf: function () {
          var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
          if (!set.every(function (s) {
            return typeof s === 'string';
          })) {
            return fail(this, "startsWithAnyOf() only works with strings");
          }
          if (set.length === 0) return emptyCollection(this);
          return this.inAnyRange(set.map(function (str) {
            return [str, str + maxString];
          }));
        }
      };
    });
    // 
    // 
    // 
    // Collection Class
    // 
    // 
    // 
    function Collection(whereClause, keyRangeGenerator) {
      // / <summary>
      // /
      // / </summary>
      // / <param name="whereClause" type="WhereClause">Where clause instance</param>
      // / <param name="keyRangeGenerator" value="function(){ return IDBKeyRange.bound(0,1);}" optional="true"></param>
      var keyRange = null, error = null;
      if (keyRangeGenerator) try {
        keyRange = keyRangeGenerator();
      } catch (ex) {
        error = ex;
      }
      var whereCtx = whereClause._ctx, table = whereCtx.table;
      this._ctx = {
        table: table,
        index: whereCtx.index,
        isPrimKey: !whereCtx.index || table.schema.primKey.keyPath && whereCtx.index === table.schema.primKey.name,
        range: keyRange,
        keysOnly: false,
        dir: "next",
        unique: "",
        algorithm: null,
        filter: null,
        replayFilter: null,
        justLimit: true,
        isMatch: null,
        offset: 0,
        limit: Infinity,
        error: error,
        or: whereCtx.or,
        valueMapper: table.hook.reading.fire
      };
    }
    function isPlainKeyRange(ctx, ignoreLimitFilter) {
      return !(ctx.filter || ctx.algorithm || ctx.or) && (ignoreLimitFilter ? ctx.justLimit : !ctx.replayFilter);
    }
    props(Collection.prototype, function () {
      // 
      // Collection Private Functions
      // 
      function addFilter(ctx, fn) {
        ctx.filter = combine(ctx.filter, fn);
      }
      function addReplayFilter(ctx, factory, isLimitFilter) {
        var curr = ctx.replayFilter;
        ctx.replayFilter = curr ? function () {
          return combine(curr(), factory());
        } : factory;
        ctx.justLimit = isLimitFilter && !curr;
      }
      function addMatchFilter(ctx, fn) {
        ctx.isMatch = combine(ctx.isMatch, fn);
      }
      /** @param ctx {
      *      isPrimKey: boolean,
      *      table: Table,
      *      index: string
      * }
      * @param store IDBObjectStore
      **/
      function getIndexOrStore(ctx, store) {
        if (ctx.isPrimKey) return store;
        var indexSpec = ctx.table.schema.idxByName[ctx.index];
        if (!indexSpec) throw new exceptions.Schema("KeyPath " + ctx.index + " on object store " + store.name + " is not indexed");
        return store.index(indexSpec.name);
      }
      /** @param ctx {
      *      isPrimKey: boolean,
      *      table: Table,
      *      index: string,
      *      keysOnly: boolean,
      *      range?: IDBKeyRange,
      *      dir: "next" | "prev"
      * }
      */
      function openCursor(ctx, store) {
        var idxOrStore = getIndexOrStore(ctx, store);
        return ctx.keysOnly && ('openKeyCursor' in idxOrStore) ? idxOrStore.openKeyCursor(ctx.range || null, ctx.dir + ctx.unique) : idxOrStore.openCursor(ctx.range || null, ctx.dir + ctx.unique);
      }
      function iter(ctx, fn, resolve, reject, idbstore) {
        var filter = ctx.replayFilter ? combine(ctx.filter, ctx.replayFilter()) : ctx.filter;
        if (!ctx.or) {
          iterate(openCursor(ctx, idbstore), combine(ctx.algorithm, filter), fn, resolve, reject, !ctx.keysOnly && ctx.valueMapper);
        } else (function () {
          var set = {};
          var resolved = 0;
          function resolveboth() {
            if (++resolved === 2) resolve();
          }
          function union(item, cursor, advance) {
            if (!filter || filter(cursor, advance, resolveboth, reject)) {
              var primaryKey = cursor.primaryKey;
              var key = '' + primaryKey;
              if (key === '[object ArrayBuffer]') key = '' + new Uint8Array(primaryKey);
              if (!hasOwn(set, key)) {
                set[key] = true;
                fn(item, cursor, advance);
              }
            }
          }
          ctx.or._iterate(union, resolveboth, reject, idbstore);
          iterate(openCursor(ctx, idbstore), ctx.algorithm, union, resolveboth, reject, !ctx.keysOnly && ctx.valueMapper);
        })();
      }
      return {
        // 
        // Collection Protected Functions
        // 
        _read: function (fn, cb) {
          var ctx = this._ctx;
          return ctx.error ? ctx.table._trans(null, rejection.bind(null, ctx.error)) : ctx.table._idbstore(READONLY, fn).then(cb);
        },
        _write: function (fn) {
          var ctx = this._ctx;
          return ctx.error ? ctx.table._trans(null, rejection.bind(null, ctx.error)) : ctx.table._idbstore(READWRITE, fn, "locked");
        },
        _addAlgorithm: function (fn) {
          var ctx = this._ctx;
          ctx.algorithm = combine(ctx.algorithm, fn);
        },
        _iterate: function (fn, resolve, reject, idbstore) {
          return iter(this._ctx, fn, resolve, reject, idbstore);
        },
        clone: function (props$$1) {
          var rv = Object.create(this.constructor.prototype), ctx = Object.create(this._ctx);
          if (props$$1) extend(ctx, props$$1);
          rv._ctx = ctx;
          return rv;
        },
        raw: function () {
          this._ctx.valueMapper = null;
          return this;
        },
        // 
        // Collection Public methods
        // 
        each: function (fn) {
          var ctx = this._ctx;
          return this._read(function (resolve, reject, idbstore) {
            iter(ctx, fn, resolve, reject, idbstore);
          });
        },
        count: function (cb) {
          var ctx = this._ctx;
          if (isPlainKeyRange(ctx, true)) {
            // This is a plain key range. We can use the count() method if the index.
            return this._read(function (resolve, reject, idbstore) {
              var idx = getIndexOrStore(ctx, idbstore);
              var req = ctx.range ? idx.count(ctx.range) : idx.count();
              req.onerror = eventRejectHandler(reject);
              req.onsuccess = function (e) {
                resolve(Math.min(e.target.result, ctx.limit));
              };
            }, cb);
          } else {
            // Algorithms, filters or expressions are applied. Need to count manually.
            var count = 0;
            return this._read(function (resolve, reject, idbstore) {
              iter(ctx, function () {
                ++count;
                return false;
              }, function () {
                resolve(count);
              }, reject, idbstore);
            }, cb);
          }
        },
        sortBy: function (keyPath, cb) {
          // / <param name="keyPath" type="String"></param>
          var parts = keyPath.split('.').reverse(), lastPart = parts[0], lastIndex = parts.length - 1;
          function getval(obj, i) {
            if (i) return getval(obj[parts[i]], i - 1);
            return obj[lastPart];
          }
          var order = this._ctx.dir === "next" ? 1 : -1;
          function sorter(a, b) {
            var aVal = getval(a, lastIndex), bVal = getval(b, lastIndex);
            return aVal < bVal ? -order : aVal > bVal ? order : 0;
          }
          return this.toArray(function (a) {
            return a.sort(sorter);
          }).then(cb);
        },
        toArray: function (cb) {
          var ctx = this._ctx;
          return this._read(function (resolve, reject, idbstore) {
            if (hasGetAll && ctx.dir === 'next' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {
              // Special optimation if we could use IDBObjectStore.getAll() or
              // IDBKeyRange.getAll():
              var readingHook = ctx.table.hook.reading.fire;
              var idxOrStore = getIndexOrStore(ctx, idbstore);
              var req = ctx.limit < Infinity ? idxOrStore.getAll(ctx.range, ctx.limit) : idxOrStore.getAll(ctx.range);
              req.onerror = eventRejectHandler(reject);
              req.onsuccess = readingHook === mirror ? eventSuccessHandler(resolve) : eventSuccessHandler(function (res) {
                try {
                  resolve(res.map(readingHook));
                } catch (e) {
                  reject(e);
                }
              });
            } else {
              // Getting array through a cursor.
              var a = [];
              iter(ctx, function (item) {
                a.push(item);
              }, function arrayComplete() {
                resolve(a);
              }, reject, idbstore);
            }
          }, cb);
        },
        offset: function (offset) {
          var ctx = this._ctx;
          if (offset <= 0) return this;
          ctx.offset += offset;
          // For count()
          if (isPlainKeyRange(ctx)) {
            addReplayFilter(ctx, function () {
              var offsetLeft = offset;
              return function (cursor, advance) {
                if (offsetLeft === 0) return true;
                if (offsetLeft === 1) {
                  --offsetLeft;
                  return false;
                }
                advance(function () {
                  cursor.advance(offsetLeft);
                  offsetLeft = 0;
                });
                return false;
              };
            });
          } else {
            addReplayFilter(ctx, function () {
              var offsetLeft = offset;
              return function () {
                return --offsetLeft < 0;
              };
            });
          }
          return this;
        },
        limit: function (numRows) {
          this._ctx.limit = Math.min(this._ctx.limit, numRows);
          // For count()
          addReplayFilter(this._ctx, function () {
            var rowsLeft = numRows;
            return function (cursor, advance, resolve) {
              if (--rowsLeft <= 0) advance(resolve);
              // Stop after this item has been included
              return rowsLeft >= 0;
            };
          }, true);
          return this;
        },
        until: function (filterFunction, bIncludeStopEntry) {
          addFilter(this._ctx, function (cursor, advance, resolve) {
            if (filterFunction(cursor.value)) {
              advance(resolve);
              return bIncludeStopEntry;
            } else {
              return true;
            }
          });
          return this;
        },
        first: function (cb) {
          return this.limit(1).toArray(function (a) {
            return a[0];
          }).then(cb);
        },
        last: function (cb) {
          return this.reverse().first(cb);
        },
        filter: function (filterFunction) {
          // / <param name="jsFunctionFilter" type="Function">function(val){return true/false}</param>
          addFilter(this._ctx, function (cursor) {
            return filterFunction(cursor.value);
          });
          // match filters not used in Dexie.js but can be used by 3rd part libraries to test a
          // collection for a match without querying DB. Used by Dexie.Observable.
          addMatchFilter(this._ctx, filterFunction);
          return this;
        },
        and: function (filterFunction) {
          return this.filter(filterFunction);
        },
        or: function (indexName) {
          return new WhereClause(this._ctx.table, indexName, this);
        },
        reverse: function () {
          this._ctx.dir = this._ctx.dir === "prev" ? "next" : "prev";
          if (this._ondirectionchange) this._ondirectionchange(this._ctx.dir);
          return this;
        },
        desc: function () {
          return this.reverse();
        },
        eachKey: function (cb) {
          var ctx = this._ctx;
          ctx.keysOnly = !ctx.isMatch;
          return this.each(function (val, cursor) {
            cb(cursor.key, cursor);
          });
        },
        eachUniqueKey: function (cb) {
          this._ctx.unique = "unique";
          return this.eachKey(cb);
        },
        eachPrimaryKey: function (cb) {
          var ctx = this._ctx;
          ctx.keysOnly = !ctx.isMatch;
          return this.each(function (val, cursor) {
            cb(cursor.primaryKey, cursor);
          });
        },
        keys: function (cb) {
          var ctx = this._ctx;
          ctx.keysOnly = !ctx.isMatch;
          var a = [];
          return this.each(function (item, cursor) {
            a.push(cursor.key);
          }).then(function () {
            return a;
          }).then(cb);
        },
        primaryKeys: function (cb) {
          var ctx = this._ctx;
          if (hasGetAll && ctx.dir === 'next' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {
            // Special optimation if we could use IDBObjectStore.getAllKeys() or
            // IDBKeyRange.getAllKeys():
            return this._read(function (resolve, reject, idbstore) {
              var idxOrStore = getIndexOrStore(ctx, idbstore);
              var req = ctx.limit < Infinity ? idxOrStore.getAllKeys(ctx.range, ctx.limit) : idxOrStore.getAllKeys(ctx.range);
              req.onerror = eventRejectHandler(reject);
              req.onsuccess = eventSuccessHandler(resolve);
            }).then(cb);
          }
          ctx.keysOnly = !ctx.isMatch;
          var a = [];
          return this.each(function (item, cursor) {
            a.push(cursor.primaryKey);
          }).then(function () {
            return a;
          }).then(cb);
        },
        uniqueKeys: function (cb) {
          this._ctx.unique = "unique";
          return this.keys(cb);
        },
        firstKey: function (cb) {
          return this.limit(1).keys(function (a) {
            return a[0];
          }).then(cb);
        },
        lastKey: function (cb) {
          return this.reverse().firstKey(cb);
        },
        distinct: function () {
          var ctx = this._ctx, idx = ctx.index && ctx.table.schema.idxByName[ctx.index];
          if (!idx || !idx.multi) return this;
          // distinct() only makes differencies on multiEntry indexes.
          var set = {};
          addFilter(this._ctx, function (cursor) {
            var strKey = cursor.primaryKey.toString();
            // Converts any Date to String, String to String, Number to String and Array to comma-separated string
            var found = hasOwn(set, strKey);
            set[strKey] = true;
            return !found;
          });
          return this;
        },
        // 
        // Methods that mutate storage
        // 
        modify: function (changes) {
          var self = this, ctx = this._ctx, hook = ctx.table.hook, updatingHook = hook.updating.fire, deletingHook = hook.deleting.fire;
          return this._write(function (resolve, reject, idbstore, trans) {
            var modifyer;
            if (typeof changes === 'function') {
              // Changes is a function that may update, add or delete propterties or even require a deletion the object itself (delete this.item)
              if (updatingHook === nop && deletingHook === nop) {
                // Noone cares about what is being changed. Just let the modifier function be the given argument as is.
                modifyer = changes;
              } else {
                // People want to know exactly what is being modified or deleted.
                // Let modifyer be a proxy function that finds out what changes the caller is actually doing
                // and call the hooks accordingly!
                modifyer = function (item) {
                  var origItem = deepClone(item);
                  // Clone the item first so we can compare laters.
                  if (changes.call(this, item, this) === false) return false;
                  // Call the real modifyer function (If it returns false explicitely, it means it dont want to modify anyting on this object)
                  if (!hasOwn(this, "value")) {
                    // The real modifyer function requests a deletion of the object. Inform the deletingHook that a deletion is taking place.
                    deletingHook.call(this, this.primKey, item, trans);
                  } else {
                    // No deletion. Check what was changed
                    var objectDiff = getObjectDiff(origItem, this.value);
                    var additionalChanges = updatingHook.call(this, objectDiff, this.primKey, origItem, trans);
                    if (additionalChanges) {
                      // Hook want to apply additional modifications. Make sure to fullfill the will of the hook.
                      item = this.value;
                      keys(additionalChanges).forEach(function (keyPath) {
                        setByKeyPath(item, keyPath, additionalChanges[keyPath]);
                      });
                    }
                  }
                };
              }
            } else if (updatingHook === nop) {
              // changes is a set of {keyPath: value} and no one is listening to the updating hook.
              var keyPaths = keys(changes);
              var numKeys = keyPaths.length;
              modifyer = function (item) {
                var anythingModified = false;
                for (var i = 0; i < numKeys; ++i) {
                  var keyPath = keyPaths[i], val = changes[keyPath];
                  if (getByKeyPath(item, keyPath) !== val) {
                    setByKeyPath(item, keyPath, val);
                    // Adding {keyPath: undefined} means that the keyPath should be deleted. Handled by setByKeyPath
                    anythingModified = true;
                  }
                }
                return anythingModified;
              };
            } else {
              // changes is a set of {keyPath: value} and people are listening to the updating hook so we need to call it and
              // allow it to add additional modifications to make.
              var origChanges = changes;
              changes = shallowClone(origChanges);
              // Let's work with a clone of the changes keyPath/value set so that we can restore it in case a hook extends it.
              modifyer = function (item) {
                var anythingModified = false;
                var additionalChanges = updatingHook.call(this, changes, this.primKey, deepClone(item), trans);
                if (additionalChanges) extend(changes, additionalChanges);
                keys(changes).forEach(function (keyPath) {
                  var val = changes[keyPath];
                  if (getByKeyPath(item, keyPath) !== val) {
                    setByKeyPath(item, keyPath, val);
                    anythingModified = true;
                  }
                });
                if (additionalChanges) changes = shallowClone(origChanges);
                // Restore original changes for next iteration
                return anythingModified;
              };
            }
            var count = 0;
            var successCount = 0;
            var iterationComplete = false;
            var failures = [];
            var failKeys = [];
            var currentKey = null;
            function modifyItem(item, cursor) {
              currentKey = cursor.primaryKey;
              var thisContext = {
                primKey: cursor.primaryKey,
                value: item,
                onsuccess: null,
                onerror: null
              };
              function onerror(e) {
                failures.push(e);
                failKeys.push(thisContext.primKey);
                checkFinished();
                return true;
              }
              if (modifyer.call(thisContext, item, thisContext) !== false) {
                var bDelete = !hasOwn(thisContext, "value");
                ++count;
                tryCatch(function () {
                  var req = bDelete ? cursor.delete() : cursor.update(thisContext.value);
                  req._hookCtx = thisContext;
                  req.onerror = hookedEventRejectHandler(onerror);
                  req.onsuccess = hookedEventSuccessHandler(function () {
                    ++successCount;
                    checkFinished();
                  });
                }, onerror);
              } else if (thisContext.onsuccess) {
                // Hook will expect either onerror or onsuccess to always be called!
                thisContext.onsuccess(thisContext.value);
              }
            }
            function doReject(e) {
              if (e) {
                failures.push(e);
                failKeys.push(currentKey);
              }
              return reject(new ModifyError("Error modifying one or more objects", failures, successCount, failKeys));
            }
            function checkFinished() {
              if (iterationComplete && successCount + failures.length === count) {
                if (failures.length > 0) doReject(); else resolve(successCount);
              }
            }
            self.clone().raw()._iterate(modifyItem, function () {
              iterationComplete = true;
              checkFinished();
            }, doReject, idbstore);
          });
        },
        'delete': function () {
          var _this = this;
          var ctx = this._ctx, range = ctx.range, deletingHook = ctx.table.hook.deleting.fire, hasDeleteHook = deletingHook !== nop;
          if (!hasDeleteHook && isPlainKeyRange(ctx) && (ctx.isPrimKey && !hangsOnDeleteLargeKeyRange || !range)) {
            // May use IDBObjectStore.delete(IDBKeyRange) in this case (Issue #208)
            // For chromium, this is the way most optimized version.
            // For IE/Edge, this could hang the indexedDB engine and make operating system instable
            // (https://gist.github.com/dfahlander/5a39328f029de18222cf2125d56c38f7)
            return this._write(function (resolve, reject, idbstore) {
              // Our API contract is to return a count of deleted items, so we have to count() before delete().
              var onerror = eventRejectHandler(reject), countReq = range ? idbstore.count(range) : idbstore.count();
              countReq.onerror = onerror;
              countReq.onsuccess = function () {
                var count = countReq.result;
                tryCatch(function () {
                  var delReq = range ? idbstore.delete(range) : idbstore.clear();
                  delReq.onerror = onerror;
                  delReq.onsuccess = function () {
                    return resolve(count);
                  };
                }, function (err) {
                  return reject(err);
                });
              };
            });
          }
          // Default version to use when collection is not a vanilla IDBKeyRange on the primary key.
          // Divide into chunks to not starve RAM.
          // If has delete hook, we will have to collect not just keys but also objects, so it will use
          // more memory and need lower chunk size.
          var CHUNKSIZE = hasDeleteHook ? 2000 : 10000;
          return this._write(function (resolve, reject, idbstore, trans) {
            var totalCount = 0;
            // Clone collection and change its table and set a limit of CHUNKSIZE on the cloned Collection instance.
            var collection = _this.clone({
              keysOnly: !ctx.isMatch && !hasDeleteHook
            }).// load just keys (unless filter() or and() or deleteHook has subscribers)
            distinct().// In case multiEntry is used, never delete same key twice because resulting count
            limit(CHUNKSIZE).raw();
            // Don't filter through reading-hooks (like mapped classes etc)
            var keysOrTuples = [];
            // We're gonna do things on as many chunks that are needed.
            // Use recursion of nextChunk function:
            var nextChunk = function () {
              return collection.each(hasDeleteHook ? function (val, cursor) {
                // Somebody subscribes to hook('deleting'). Collect all primary keys and their values,
                // so that the hook can be called with its values in bulkDelete().
                keysOrTuples.push([cursor.primaryKey, cursor.value]);
              } : function (val, cursor) {
                // No one subscribes to hook('deleting'). Collect only primary keys:
                keysOrTuples.push(cursor.primaryKey);
              }).then(function () {
                // Chromium deletes faster when doing it in sort order.
                hasDeleteHook ? keysOrTuples.sort(function (a, b) {
                  return ascending(a[0], b[0]);
                }) : keysOrTuples.sort(ascending);
                return bulkDelete(idbstore, trans, keysOrTuples, hasDeleteHook, deletingHook);
              }).then(function () {
                var count = keysOrTuples.length;
                totalCount += count;
                keysOrTuples = [];
                return count < CHUNKSIZE ? totalCount : nextChunk();
              });
            };
            resolve(nextChunk());
          });
        }
      };
    });
    // 
    // 
    // 
    // ------------------------- Help functions ---------------------------
    // 
    // 
    // 
    function lowerVersionFirst(a, b) {
      return a._cfg.version - b._cfg.version;
    }
    function setApiOnPlace(objs, tableNames, dbschema) {
      tableNames.forEach(function (tableName) {
        var schema = dbschema[tableName];
        objs.forEach(function (obj) {
          if (!((tableName in obj))) {
            if (obj === Transaction.prototype || obj instanceof Transaction) {
              // obj is a Transaction prototype (or prototype of a subclass to Transaction)
              // Make the API a getter that returns this.table(tableName)
              setProp(obj, tableName, {
                get: function () {
                  return this.table(tableName);
                }
              });
            } else {
              // Table will not be bound to a transaction (will use Dexie.currentTransaction)
              obj[tableName] = new Table(tableName, schema);
            }
          }
        });
      });
    }
    function removeTablesApi(objs) {
      objs.forEach(function (obj) {
        for (var key in obj) {
          if (obj[key] instanceof Table) delete obj[key];
        }
      });
    }
    function iterate(req, filter, fn, resolve, reject, valueMapper) {
      // Apply valueMapper (hook('reading') or mappped class)
      var mappedFn = valueMapper ? function (x, c, a) {
        return fn(valueMapper(x), c, a);
      } : fn;
      // Wrap fn with PSD and microtick stuff from Promise.
      var wrappedFn = wrap(mappedFn, reject);
      if (!req.onerror) req.onerror = eventRejectHandler(reject);
      if (filter) {
        req.onsuccess = trycatcher(function filter_record() {
          var cursor = req.result;
          if (cursor) {
            var c = function () {
              cursor.continue();
            };
            if (filter(cursor, function (advancer) {
              c = advancer;
            }, resolve, reject)) wrappedFn(cursor.value, cursor, function (advancer) {
              c = advancer;
            });
            c();
          } else {
            resolve();
          }
        }, reject);
      } else {
        req.onsuccess = trycatcher(function filter_record() {
          var cursor = req.result;
          if (cursor) {
            var c = function () {
              cursor.continue();
            };
            wrappedFn(cursor.value, cursor, function (advancer) {
              c = advancer;
            });
            c();
          } else {
            resolve();
          }
        }, reject);
      }
    }
    function parseIndexSyntax(indexes) {
      // / <param name="indexes" type="String"></param>
      // / <returns type="Array" elementType="IndexSpec"></returns>
      var rv = [];
      indexes.split(',').forEach(function (index) {
        index = index.trim();
        var name = index.replace(/([&*]|\+\+)/g, "");
        // Remove "&", "++" and "*"
        // Let keyPath of "[a+b]" be ["a","b"]:
        var keyPath = (/^\[/).test(name) ? name.match(/^\[(.*)\]$/)[1].split('+') : name;
        rv.push(new IndexSpec(name, keyPath || null, (/\&/).test(index), (/\*/).test(index), (/\+\+/).test(index), isArray(keyPath), (/\./).test(index)));
      });
      return rv;
    }
    function cmp(key1, key2) {
      return indexedDB.cmp(key1, key2);
    }
    function min(a, b) {
      return cmp(a, b) < 0 ? a : b;
    }
    function max(a, b) {
      return cmp(a, b) > 0 ? a : b;
    }
    function ascending(a, b) {
      return indexedDB.cmp(a, b);
    }
    function descending(a, b) {
      return indexedDB.cmp(b, a);
    }
    function simpleCompare(a, b) {
      return a < b ? -1 : a === b ? 0 : 1;
    }
    function simpleCompareReverse(a, b) {
      return a > b ? -1 : a === b ? 0 : 1;
    }
    function combine(filter1, filter2) {
      return filter1 ? filter2 ? function () {
        return filter1.apply(this, arguments) && filter2.apply(this, arguments);
      } : filter1 : filter2;
    }
    function readGlobalSchema() {
      db.verno = idbdb.version / 10;
      db._dbSchema = globalSchema = {};
      dbStoreNames = slice(idbdb.objectStoreNames, 0);
      if (dbStoreNames.length === 0) return;
      // Database contains no stores.
      var trans = idbdb.transaction(safariMultiStoreFix(dbStoreNames), 'readonly');
      dbStoreNames.forEach(function (storeName) {
        var store = trans.objectStore(storeName), keyPath = store.keyPath, dotted = keyPath && typeof keyPath === 'string' && keyPath.indexOf('.') !== -1;
        var primKey = new IndexSpec(keyPath, keyPath || "", false, false, !!store.autoIncrement, keyPath && typeof keyPath !== 'string', dotted);
        var indexes = [];
        for (var j = 0; j < store.indexNames.length; ++j) {
          var idbindex = store.index(store.indexNames[j]);
          keyPath = idbindex.keyPath;
          dotted = keyPath && typeof keyPath === 'string' && keyPath.indexOf('.') !== -1;
          var index = new IndexSpec(idbindex.name, keyPath, !!idbindex.unique, !!idbindex.multiEntry, false, keyPath && typeof keyPath !== 'string', dotted);
          indexes.push(index);
        }
        globalSchema[storeName] = new TableSchema(storeName, primKey, indexes, {});
      });
      setApiOnPlace([allTables], keys(globalSchema), globalSchema);
    }
    function adjustToExistingIndexNames(schema, idbtrans) {
      // / <summary>
      // / Issue #30 Problem with existing db - adjust to existing index names when migrating from non-dexie db
      // / </summary>
      // / <param name="schema" type="Object">Map between name and TableSchema</param>
      // / <param name="idbtrans" type="IDBTransaction"></param>
      var storeNames = idbtrans.db.objectStoreNames;
      for (var i = 0; i < storeNames.length; ++i) {
        var storeName = storeNames[i];
        var store = idbtrans.objectStore(storeName);
        hasGetAll = ('getAll' in store);
        for (var j = 0; j < store.indexNames.length; ++j) {
          var indexName = store.indexNames[j];
          var keyPath = store.index(indexName).keyPath;
          var dexieName = typeof keyPath === 'string' ? keyPath : "[" + slice(keyPath).join('+') + "]";
          if (schema[storeName]) {
            var indexSpec = schema[storeName].idxByName[dexieName];
            if (indexSpec) indexSpec.name = indexName;
          }
        }
      }
      // Bug with getAll() on Safari ver<604 on Workers only, see discussion following PR #579
      if ((/Safari/).test(navigator.userAgent) && !(/(Chrome\/|Edge\/)/).test(navigator.userAgent) && _global.WorkerGlobalScope && _global instanceof _global.WorkerGlobalScope && [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604) {
        hasGetAll = false;
      }
    }
    function fireOnBlocked(ev) {
      db.on("blocked").fire(ev);
      // Workaround (not fully*) for missing "versionchange" event in IE,Edge and Safari:
      connections.filter(function (c) {
        return c.name === db.name && c !== db && !c._vcFired;
      }).map(function (c) {
        return c.on("versionchange").fire(ev);
      });
    }
    extend(this, {
      Collection: Collection,
      Table: Table,
      Transaction: Transaction,
      Version: Version,
      WhereClause: WhereClause
    });
    init();
    addons.forEach(function (fn) {
      fn(db);
    });
  }
  function parseType(type) {
    if (typeof type === 'function') {
      return new type();
    } else if (isArray(type)) {
      return [parseType(type[0])];
    } else if (type && typeof type === 'object') {
      var rv = {};
      applyStructure(rv, type);
      return rv;
    } else {
      return type;
    }
  }
  function applyStructure(obj, structure) {
    keys(structure).forEach(function (member) {
      var value = parseType(structure[member]);
      obj[member] = value;
    });
    return obj;
  }
  function hookedEventSuccessHandler(resolve) {
    // wrap() is needed when calling hooks because the rare scenario of:
    // * hook does a db operation that fails immediately (IDB throws exception)
    // For calling db operations on correct transaction, wrap makes sure to set PSD correctly.
    // wrap() will also execute in a virtual tick.
    // * If not wrapped in a virtual tick, direct exception will launch a new physical tick.
    // * If this was the last event in the bulk, the promise will resolve after a physical tick
    // and the transaction will have committed already.
    // If no hook, the virtual tick will be executed in the reject()/resolve of the final promise,
    // because it is always marked with _lib = true when created using Transaction._promise().
    return wrap(function (event) {
      var req = event.target, ctx = req._hookCtx, // Contains the hook error handler. Put here instead of closure to boost performance.
      result = ctx.value || req.result, // Pass the object value on updates. The result from IDB is the primary key.
      hookSuccessHandler = ctx && ctx.onsuccess;
      hookSuccessHandler && hookSuccessHandler(result);
      resolve && resolve(result);
    }, resolve);
  }
  function eventRejectHandler(reject) {
    return wrap(function (event) {
      preventDefault(event);
      reject(event.target.error);
      return false;
    });
  }
  function eventSuccessHandler(resolve) {
    return wrap(function (event) {
      resolve(event.target.result);
    });
  }
  function hookedEventRejectHandler(reject) {
    return wrap(function (event) {
      // See comment on hookedEventSuccessHandler() why wrap() is needed only when supporting hooks.
      var req = event.target, err = req.error, ctx = req._hookCtx, // Contains the hook error handler. Put here instead of closure to boost performance.
      hookErrorHandler = ctx && ctx.onerror;
      hookErrorHandler && hookErrorHandler(err);
      preventDefault(event);
      reject(err);
      return false;
    });
  }
  function preventDefault(event) {
    if (event.stopPropagation) event.stopPropagation();
    if (event.preventDefault) event.preventDefault();
  }
  function awaitIterator(iterator) {
    var callNext = function (result) {
      return iterator.next(result);
    }, doThrow = function (error) {
      return iterator.throw(error);
    }, onSuccess = step(callNext), onError = step(doThrow);
    function step(getNext) {
      return function (val) {
        var next = getNext(val), value = next.value;
        return next.done ? value : !value || typeof value.then !== 'function' ? isArray(value) ? Promise.all(value).then(onSuccess, onError) : onSuccess(value) : value.then(onSuccess, onError);
      };
    }
    return step(callNext)();
  }
  // 
  // IndexSpec struct
  // 
  function IndexSpec(name, keyPath, unique, multi, auto, compound, dotted) {
    // / <param name="name" type="String"></param>
    // / <param name="keyPath" type="String"></param>
    // / <param name="unique" type="Boolean"></param>
    // / <param name="multi" type="Boolean"></param>
    // / <param name="auto" type="Boolean"></param>
    // / <param name="compound" type="Boolean"></param>
    // / <param name="dotted" type="Boolean"></param>
    this.name = name;
    this.keyPath = keyPath;
    this.unique = unique;
    this.multi = multi;
    this.auto = auto;
    this.compound = compound;
    this.dotted = dotted;
    var keyPathSrc = typeof keyPath === 'string' ? keyPath : keyPath && '[' + [].join.call(keyPath, '+') + ']';
    this.src = (unique ? '&' : '') + (multi ? '*' : '') + (auto ? "++" : "") + keyPathSrc;
  }
  // 
  // TableSchema struct
  // 
  function TableSchema(name, primKey, indexes, instanceTemplate) {
    // / <param name="name" type="String"></param>
    // / <param name="primKey" type="IndexSpec"></param>
    // / <param name="indexes" type="Array" elementType="IndexSpec"></param>
    // / <param name="instanceTemplate" type="Object"></param>
    this.name = name;
    this.primKey = primKey || new IndexSpec();
    this.indexes = indexes || [new IndexSpec()];
    this.instanceTemplate = instanceTemplate;
    this.mappedClass = null;
    this.idxByName = arrayToObject(indexes, function (index) {
      return [index.name, index];
    });
  }
  function safariMultiStoreFix(storeNames) {
    return storeNames.length === 1 ? storeNames[0] : storeNames;
  }
  function getNativeGetDatabaseNamesFn(indexedDB) {
    var fn = indexedDB && (indexedDB.getDatabaseNames || indexedDB.webkitGetDatabaseNames);
    return fn && fn.bind(indexedDB);
  }
  // Export Error classes
  props(Dexie, fullNameExceptions);
  // Dexie.XXXError = class XXXError {...};
  // 
  // Static methods and properties
  // 
  props(Dexie, {
    // 
    // Static delete() method.
    // 
    delete: function (databaseName) {
      var db = new Dexie(databaseName), promise = db.delete();
      promise.onblocked = function (fn) {
        db.on("blocked", fn);
        return this;
      };
      return promise;
    },
    // 
    // Static exists() method.
    // 
    exists: function (name) {
      return new Dexie(name).open().then(function (db) {
        db.close();
        return true;
      }).catch(Dexie.NoSuchDatabaseError, function () {
        return false;
      });
    },
    // 
    // Static method for retrieving a list of all existing databases at current host.
    // 
    getDatabaseNames: function (cb) {
      var getDatabaseNames = getNativeGetDatabaseNamesFn(Dexie.dependencies.indexedDB);
      return getDatabaseNames ? new Promise(function (resolve, reject) {
        var req = getDatabaseNames();
        req.onsuccess = function (event) {
          resolve(slice(event.target.result, 0));
        };
        req.onerror = eventRejectHandler(reject);
      }).then(cb) : dbNamesDB.dbnames.toCollection().primaryKeys(cb);
    },
    defineClass: function () {
      // Default constructor able to copy given properties into this object.
      function Class(properties) {
        // / <param name="properties" type="Object" optional="true">Properties to initialize object with.
        // / </param>
        if (properties) extend(this, properties);
      }
      return Class;
    },
    applyStructure: applyStructure,
    ignoreTransaction: function (scopeFunc) {
      // In case caller is within a transaction but needs to create a separate transaction.
      // Example of usage:
      // 
      // Let's say we have a logger function in our app. Other application-logic should be unaware of the
      // logger function and not need to include the 'logentries' table in all transaction it performs.
      // The logging should always be done in a separate transaction and not be dependant on the current
      // running transaction context. Then you could use Dexie.ignoreTransaction() to run code that starts a new transaction.
      // 
      // Dexie.ignoreTransaction(function() {
      // db.logentries.add(newLogEntry);
      // });
      // 
      // Unless using Dexie.ignoreTransaction(), the above example would try to reuse the current transaction
      // in current Promise-scope.
      // 
      // An alternative to Dexie.ignoreTransaction() would be setImmediate() or setTimeout(). The reason we still provide an
      // API for this because
      // 1) The intention of writing the statement could be unclear if using setImmediate() or setTimeout().
      // 2) setTimeout() would wait unnescessary until firing. This is however not the case with setImmediate().
      // 3) setImmediate() is not supported in the ES standard.
      // 4) You might want to keep other PSD state that was set in a parent PSD, such as PSD.letThrough.
      return PSD.trans ? usePSD(PSD.transless, scopeFunc) : // Use the closest parent that was non-transactional.
      scopeFunc();
    },
    vip: function (fn) {
      // To be used by subscribers to the on('ready') event.
      // This will let caller through to access DB even when it is blocked while the db.ready() subscribers are firing.
      // This would have worked automatically if we were certain that the Provider was using Dexie.Promise for all asyncronic operations. The promise PSD
      // from the provider.connect() call would then be derived all the way to when provider would call localDatabase.applyChanges(). But since
      // the provider more likely is using non-promise async APIs or other thenable implementations, we cannot assume that.
      // Note that this method is only useful for on('ready') subscribers that is returning a Promise from the event. If not using vip()
      // the database could deadlock since it wont open until the returned Promise is resolved, and any non-VIPed operation started by
      // the caller will not resolve until database is opened.
      return newScope(function () {
        PSD.letThrough = true;
        // Make sure we are let through if still blocking db due to onready is firing.
        return fn();
      });
    },
    async: function (generatorFn) {
      return function () {
        try {
          var rv = awaitIterator(generatorFn.apply(this, arguments));
          if (!rv || typeof rv.then !== 'function') return Promise.resolve(rv);
          return rv;
        } catch (e) {
          return rejection(e);
        }
      };
    },
    spawn: function (generatorFn, args, thiz) {
      try {
        var rv = awaitIterator(generatorFn.apply(thiz, args || []));
        if (!rv || typeof rv.then !== 'function') return Promise.resolve(rv);
        return rv;
      } catch (e) {
        return rejection(e);
      }
    },
    // Dexie.currentTransaction property
    currentTransaction: {
      get: function () {
        return PSD.trans || null;
      }
    },
    waitFor: function (promiseOrFunction, optionalTimeout) {
      // If a function is provided, invoke it and pass the returning value to Transaction.waitFor()
      var promise = Promise.resolve(typeof promiseOrFunction === 'function' ? Dexie.ignoreTransaction(promiseOrFunction) : promiseOrFunction).timeout(optionalTimeout || 60000);
      // Default the timeout to one minute. Caller may specify Infinity if required.
      // Run given promise on current transaction. If no current transaction, just return a Dexie promise based
      // on given value.
      return PSD.trans ? PSD.trans.waitFor(promise) : promise;
    },
    // Export our Promise implementation since it can be handy as a standalone Promise implementation
    Promise: Promise,
    // Dexie.debug proptery:
    // Dexie.debug = false
    // Dexie.debug = true
    // Dexie.debug = "dexie" - don't hide dexie's stack frames.
    debug: {
      get: function () {
        return debug;
      },
      set: function (value) {
        setDebug(value, value === 'dexie' ? function () {
          return true;
        } : dexieStackFrameFilter);
      }
    },
    // Export our derive/extend/override methodology
    derive: derive,
    extend: extend,
    props: props,
    override: override,
    // Export our Events() function - can be handy as a toolkit
    Events: Events,
    // Utilities
    getByKeyPath: getByKeyPath,
    setByKeyPath: setByKeyPath,
    delByKeyPath: delByKeyPath,
    shallowClone: shallowClone,
    deepClone: deepClone,
    getObjectDiff: getObjectDiff,
    asap: asap,
    maxKey: maxKey,
    minKey: minKey,
    // Addon registry
    addons: [],
    // Global DB connection list
    connections: connections,
    MultiModifyError: exceptions.Modify,
    errnames: errnames,
    // Export other static classes
    IndexSpec: IndexSpec,
    TableSchema: TableSchema,
    // 
    // Dependencies
    // 
    // These will automatically work in browsers with indexedDB support, or where an indexedDB polyfill has been included.
    // 
    // In node.js, however, these properties must be set "manually" before instansiating a new Dexie().
    // For node.js, you need to require indexeddb-js or similar and then set these deps.
    // 
    dependencies: (function () {
      try {
        return {
          // Required:
          indexedDB: _global.indexedDB || _global.mozIndexedDB || _global.webkitIndexedDB || _global.msIndexedDB,
          IDBKeyRange: _global.IDBKeyRange || _global.webkitIDBKeyRange
        };
      } catch (e) {
        return {
          indexedDB: null,
          IDBKeyRange: null
        };
      }
    })(),
    // API Version Number: Type Number, make sure to always set a version number that can be comparable correctly. Example: 0.9, 0.91, 0.92, 1.0, 1.01, 1.1, 1.2, 1.21, etc.
    semVer: DEXIE_VERSION,
    version: DEXIE_VERSION.split('.').map(function (n) {
      return parseInt(n);
    }).reduce(function (p, c, i) {
      return p + c / Math.pow(10, i * 2);
    }),
    // https://github.com/dfahlander/Dexie.js/issues/186
    // typescript compiler tsc in mode ts-->es5 & commonJS, will expect require() to return
    // x.default. Workaround: Set Dexie.default = Dexie.
    default: Dexie,
    // Make it possible to import {Dexie} (non-default import)
    // Reason 1: May switch to that in future.
    // Reason 2: We declare it both default and named exported in d.ts to make it possible
    // to let addons extend the Dexie interface with Typescript 2.1 (works only when explicitely
    // exporting the symbol, not just default exporting)
    Dexie: Dexie
  });
  // Map DOMErrors and DOMExceptions to corresponding Dexie errors. May change in Dexie v2.0.
  Promise.rejectionMapper = mapError;
  // Initialize dbNamesDB (won't ever be opened on chromium browsers')
  dbNamesDB = new Dexie('__dbnames');
  dbNamesDB.version(1).stores({
    dbnames: 'name'
  });
  (function () {
    // Migrate from Dexie 1.x database names stored in localStorage:
    var DBNAMES = 'Dexie.DatabaseNames';
    try {
      if (typeof localStorage !== undefined && _global.document !== undefined) {
        // Have localStorage and is not executing in a worker. Lets migrate from Dexie 1.x.
        JSON.parse(localStorage.getItem(DBNAMES) || "[]").forEach(function (name) {
          return dbNamesDB.dbnames.put({
            name: name
          }).catch(nop);
        });
        localStorage.removeItem(DBNAMES);
      }
    } catch (_e) {}
  })();
  return Dexie;
});

},{}],"5xDiv":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "Connector", function () {
  return Connector;
});
var _liascriptTypesPorts = require('../../liascript/types/ports');
var _liascriptTypesPortsDefault = _parcelHelpers.interopDefault(_liascriptTypesPorts);
var _storage = require('./storage');
var _settings = require('./settings');
class Connector {
  constructor() {
    this.send = _ => null;
  }
  hasIndex() {
    return false;
  }
  connect(send) {
    if (send) this.send = send;
  }
  storage() {
    return new _storage.LiaStorage();
  }
  initSettings(data, local = false) {
    _settings.initSettings(this.send, data ? data : undefined, local);
  }
  setSettings(data) {
    localStorage.setItem(_liascriptTypesPortsDefault.default.SETTINGS, JSON.stringify(data));
  }
  getSettings() {
    const data = localStorage.getItem(_liascriptTypesPortsDefault.default.SETTINGS);
    let json = null;
    if (typeof data === 'string') {
      try {
        json = JSON.parse(data);
      } catch (e) {
        console.warn('getSettings =>', e);
      }
      if (!json) {
        json = _settings.defaultSettings;
      }
      if (window.innerWidth <= 620) {
        json.table_of_contents = false;
      }
    }
    return json;
  }
  open(_uidDB, _versionDB, _slide, _data) {}
  load(_event) {}
  store(_event) {}
  update(_event, _id) {}
  slide(_id) {}
  getIndex() {}
  deleteFromIndex(_uidDB) {}
  storeToIndex(_json) {}
  restoreFromIndex(_uidDB, _versionDB) {}
  reset(_uidDB, _versionDB) {
    this.initSettings(null, true);
  }
  getFromIndex(_uidDB) {
    this.send({
      topic: _liascriptTypesPortsDefault.default.RESTORE,
      message: null,
      section: -1
    });
  }
}

},{"../../liascript/types/ports":"3WoDr","./storage":"7y0KZ","./settings":"64lCt","@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"7y0KZ":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "LiaStorage", function () {
  return LiaStorage;
});
class LiaStorage {
  constructor() {}
  getItems(key = []) {
    if (typeof key === 'string') key = [key];
    let rslt = {};
    for (let i = 0; i < key.length; i++) {
      let value = localStorage.getItem(key[i]);
      rslt[key[i]] = value ? JSON.parse(value) : value;
    }
    return rslt;
  }
  setItems(dict) {
    this._setLocal(dict);
  }
  _setLocal(dict) {
    if (typeof dict === 'object') {
      for (const [key, value] of Object.entries(dict)) {
        localStorage.setItem(key, JSON.stringify(value));
      }
    }
  }
}
;

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"64lCt":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "defaultSettings", function () {
  return defaultSettings;
});
_parcelHelpers.export(exports, "initSettings", function () {
  return initSettings;
});
var _liascriptTypesPorts = require('../../liascript/types/ports');
var _liascriptTypesPortsDefault = _parcelHelpers.interopDefault(_liascriptTypesPorts);
const defaultSettings = {
  table_of_contents: window.innerWidth > 620,
  mode: 'Slides',
  theme: 'default',
  light: true,
  editor: 'dreamweaver',
  font_size: 100,
  sound: true,
  lang: 'en'
};
function initSettings(send, data = defaultSettings, local = false) {
  if (local) {
    localStorage.setItem(_liascriptTypesPortsDefault.default.SETTINGS, JSON.stringify(data));
  }
  if (send) {
    send({
      topic: _liascriptTypesPortsDefault.default.SETTINGS,
      section: -1,
      message: {
        topic: 'init',
        section: -1,
        message: data
      }
    });
  }
}
;

},{"../../liascript/types/ports":"3WoDr","@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}]},["6JTod","Xnpma"], "Xnpma", "parcelRequirebcba")

//# sourceMappingURL=index.9c215ba3.js.map
