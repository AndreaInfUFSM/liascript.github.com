/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/javascript/webcomponents/katex.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@babel/runtime/helpers/typeof.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof3(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof3 = function _typeof3(obj) { return typeof obj; }; } else { _typeof3 = function _typeof3(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof3(obj); }

function _typeof2(obj) {
  if (typeof Symbol === "function" && _typeof3(Symbol.iterator) === "symbol") {
    _typeof2 = function _typeof2(obj) {
      return _typeof3(obj);
    };
  } else {
    _typeof2 = function _typeof2(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof3(obj);
    };
  }

  return _typeof2(obj);
}

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;

/***/ }),

/***/ "./node_modules/core-js/modules/_a-function.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_a-function.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_add-to-unscopables.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/_add-to-unscopables.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('unscopables');

var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")(ArrayProto, UNSCOPABLES, {});

module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_an-instance.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_an-instance.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
    throw TypeError(name + ': incorrect invocation!');
  }

  return it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_an-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_an-object.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_array-includes.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_array-includes.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");

var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");

module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value; // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare

    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++]; // eslint-disable-next-line no-self-compare

      if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
    } else for (; length > index; index++) {
      if (IS_INCLUDES || index in O) {
        if (O[index] === el) return IS_INCLUDES || index || 0;
      }
    }
    return !IS_INCLUDES && -1;
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_bind.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_bind.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var invoke = __webpack_require__(/*! ./_invoke */ "./node_modules/core-js/modules/_invoke.js");

var arraySlice = [].slice;
var factories = {};

var construct = function construct(F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) {
      n[i] = 'a[' + i + ']';
    } // eslint-disable-next-line no-new-func


    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  }

  return factories[len](F, args);
};

module.exports = Function.bind || function bind(that
/* , ...args */
) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);

  var bound = function bound()
  /* args... */
  {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };

  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_classof.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_classof.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");

var TAG = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('toStringTag'); // ES3 wrong here


var ARG = cof(function () {
  return arguments;
}()) == 'Arguments'; // fallback for IE11 Script Access Denied error

var tryGet = function tryGet(it, key) {
  try {
    return it[key];
  } catch (e) {
    /* empty */
  }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
  : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T // builtinTag case
  : ARG ? cof(O) // ES3 arguments fallback
  : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_cof.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_cof.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_collection-strong.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_collection-strong.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;

var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");

var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");

var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");

var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");

var $iterDefine = __webpack_require__(/*! ./_iter-define */ "./node_modules/core-js/modules/_iter-define.js");

var step = __webpack_require__(/*! ./_iter-step */ "./node_modules/core-js/modules/_iter-step.js");

var setSpecies = __webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js");

var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");

var fastKey = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").fastKey;

var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");

var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function getEntry(that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index]; // frozen object case

  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME; // collection type

      that._i = create(null); // index

      that._f = undefined; // first entry

      that._l = undefined; // last entry

      that[SIZE] = 0; // size

      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }

        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function _delete(key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);

        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        }

        return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn
      /* , that = undefined */
      ) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;

        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this); // revert to the last existing entry

          while (entry && entry.r) {
            entry = entry.p;
          }
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function get() {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function def(that, key, value) {
    var entry = getEntry(that, key);
    var prev, index; // change existing entry

    if (entry) {
      entry.v = value; // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true),
        // <- index
        k: key,
        // <- key
        v: value,
        // <- value
        p: prev = that._l,
        // <- previous entry
        n: undefined,
        // <- next entry
        r: false // <- removed

      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++; // add to index

      if (index !== 'F') that._i[index] = entry;
    }

    return that;
  },
  getEntry: getEntry,
  setStrong: function setStrong(C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target

      this._k = kind; // kind

      this._l = undefined; // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l; // revert to the last existing entry

      while (entry && entry.r) {
        entry = entry.p;
      } // get next entry


      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      } // return step by kind


      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true); // add [@@species], 23.1.2.2, 23.2.2.2

    setSpecies(NAME);
  }
};

/***/ }),

/***/ "./node_modules/core-js/modules/_collection.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_collection.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");

var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");

var meta = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js");

var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");

var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");

var $iterDetect = __webpack_require__(/*! ./_iter-detect */ "./node_modules/core-js/modules/_iter-detect.js");

var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");

var inheritIfRequired = __webpack_require__(/*! ./_inherit-if-required */ "./node_modules/core-js/modules/_inherit-if-required.js");

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};

  var fixMethod = function fixMethod(KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY, KEY == 'delete' ? function (a) {
      return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'has' ? function has(a) {
      return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'get' ? function get(a) {
      return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'add' ? function add(a) {
      fn.call(this, a === 0 ? 0 : a);
      return this;
    } : function set(a, b) {
      fn.call(this, a === 0 ? 0 : a, b);
      return this;
    });
  };

  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C(); // early implementations not supports chaining

    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance; // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false

    var THROWS_ON_PRIMITIVES = fails(function () {
      instance.has(1);
    }); // most early implementations doesn't supports iterables, most modern - not close it correctly

    var ACCEPT_ITERABLES = $iterDetect(function (iter) {
      new C(iter);
    }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same

    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;

      while (index--) {
        $instance[ADDER](index, index);
      }

      return !$instance.has(-0);
    });

    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }

    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }

    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER); // weak collections should not contains .clear method

    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);
  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);
  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
  return C;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_core.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_core.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var core = module.exports = {
  version: '2.6.10'
};
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

/***/ }),

/***/ "./node_modules/core-js/modules/_ctx.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_ctx.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");

module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;

  switch (length) {
    case 1:
      return function (a) {
        return fn.call(that, a);
      };

    case 2:
      return function (a, b) {
        return fn.call(that, a, b);
      };

    case 3:
      return function (a, b, c) {
        return fn.call(that, a, b, c);
      };
  }

  return function ()
  /* ...args */
  {
    return fn.apply(that, arguments);
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_defined.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_defined.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_descriptors.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_descriptors.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return Object.defineProperty({}, 'a', {
    get: function get() {
      return 7;
    }
  }).a != 7;
});

/***/ }),

/***/ "./node_modules/core-js/modules/_dom-create.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_dom-create.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var document = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").document; // typeof document.createElement is 'object' in old IE


var is = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

/***/ }),

/***/ "./node_modules/core-js/modules/_enum-bug-keys.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_enum-bug-keys.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

/***/ }),

/***/ "./node_modules/core-js/modules/_enum-keys.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_enum-keys.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");

var gOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/modules/_object-gops.js");

var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js");

module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;

  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;

    while (symbols.length > i) {
      if (isEnum.call(it, key = symbols[i++])) result.push(key);
    }
  }

  return result;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_export.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_export.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");

var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");

var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");

var PROTOTYPE = 'prototype';

var $export = function $export(type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;

  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined; // export native or passed

    out = (own ? target : source)[key]; // bind timers to global for call from export context

    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out; // extend global

    if (target) redefine(target, key, out, type & $export.U); // export

    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};

global.core = core; // type bitmap

$export.F = 1; // forced

$export.G = 2; // global

$export.S = 4; // static

$export.P = 8; // proto

$export.B = 16; // bind

$export.W = 32; // wrap

$export.U = 64; // safe

$export.R = 128; // real proto method for `library`

module.exports = $export;

/***/ }),

/***/ "./node_modules/core-js/modules/_fails.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/modules/_fails.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

/***/ }),

/***/ "./node_modules/core-js/modules/_flags.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/modules/_flags.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // 21.2.5.3 get RegExp.prototype.flags

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_for-of.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_for-of.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");

var call = __webpack_require__(/*! ./_iter-call */ "./node_modules/core-js/modules/_iter-call.js");

var isArrayIter = __webpack_require__(/*! ./_is-array-iter */ "./node_modules/core-js/modules/_is-array-iter.js");

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

var getIterFn = __webpack_require__(/*! ./core.get-iterator-method */ "./node_modules/core-js/modules/core.get-iterator-method.js");

var BREAK = {};
var RETURN = {};

var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () {
    return iterable;
  } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!'); // fast case for arrays with default iterator

  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};

exports.BREAK = BREAK;
exports.RETURN = RETURN;

/***/ }),

/***/ "./node_modules/core-js/modules/_function-to-string.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/_function-to-string.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('native-function-to-string', Function.toString);

/***/ }),

/***/ "./node_modules/core-js/modules/_global.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_global.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self // eslint-disable-next-line no-new-func
: Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

/***/ }),

/***/ "./node_modules/core-js/modules/_has.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_has.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;

module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_hide.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_hide.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");

var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");

module.exports = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_html.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_html.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").document;

module.exports = document && document.documentElement;

/***/ }),

/***/ "./node_modules/core-js/modules/_ie8-dom-define.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_ie8-dom-define.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return Object.defineProperty(__webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/modules/_dom-create.js")('div'), 'a', {
    get: function get() {
      return 7;
    }
  }).a != 7;
});

/***/ }),

/***/ "./node_modules/core-js/modules/_inherit-if-required.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_inherit-if-required.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var setPrototypeOf = __webpack_require__(/*! ./_set-proto */ "./node_modules/core-js/modules/_set-proto.js").set;

module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;

  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  }

  return that;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_invoke.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_invoke.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;

  switch (args.length) {
    case 0:
      return un ? fn() : fn.call(that);

    case 1:
      return un ? fn(args[0]) : fn.call(that, args[0]);

    case 2:
      return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);

    case 3:
      return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);

    case 4:
      return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
  }

  return fn.apply(that, args);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iobject.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_iobject.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js"); // eslint-disable-next-line no-prototype-builtins


module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_is-array-iter.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_is-array-iter.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");

var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');

var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_is-array.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_is-array.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");

module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

/***/ }),

/***/ "./node_modules/core-js/modules/_is-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_is-object.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = function (it) {
  return _typeof(it) === 'object' ? it !== null : typeof it === 'function';
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iter-call.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-call.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value); // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iter-create.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-create.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");

var descriptor = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");

var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");

var IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

__webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")(IteratorPrototype, __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator'), function () {
  return this;
});

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, {
    next: descriptor(1, next)
  });
  setToStringTag(Constructor, NAME + ' Iterator');
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iter-define.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-define.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");

var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");

var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");

var $iterCreate = __webpack_require__(/*! ./_iter-create */ "./node_modules/core-js/modules/_iter-create.js");

var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");

var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");

var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');

var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`

var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function returnThis() {
  return this;
};

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);

  var getMethod = function getMethod(kind) {
    if (!BUGGY && kind in proto) return proto[kind];

    switch (kind) {
      case KEYS:
        return function keys() {
          return new Constructor(this, kind);
        };

      case VALUES:
        return function values() {
          return new Constructor(this, kind);
        };
    }

    return function entries() {
      return new Constructor(this, kind);
    };
  };

  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype; // Fix native

  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));

    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true); // fix for some old engines

      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  } // fix Array#{values, @@iterator}.name in V8 / FF


  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;

    $default = function values() {
      return $native.call(this);
    };
  } // Define iterator


  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  } // Plug for library


  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;

  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }

  return methods;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iter-detect.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-detect.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');

var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();

  riter['return'] = function () {
    SAFE_CLOSING = true;
  }; // eslint-disable-next-line no-throw-literal


  Array.from(riter, function () {
    throw 2;
  });
} catch (e) {
  /* empty */
}

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;

  try {
    var arr = [7];
    var iter = arr[ITERATOR]();

    iter.next = function () {
      return {
        done: safe = true
      };
    };

    arr[ITERATOR] = function () {
      return iter;
    };

    exec(arr);
  } catch (e) {
    /* empty */
  }

  return safe;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iter-step.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-step.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return {
    value: value,
    done: !!done
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iterators.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iterators.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {};

/***/ }),

/***/ "./node_modules/core-js/modules/_library.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_library.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = false;

/***/ }),

/***/ "./node_modules/core-js/modules/_meta.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_meta.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var META = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js")('meta');

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");

var setDesc = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;

var id = 0;

var isExtensible = Object.isExtensible || function () {
  return true;
};

var FREEZE = !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return isExtensible(Object.preventExtensions({}));
});

var setMeta = function setMeta(it) {
  setDesc(it, META, {
    value: {
      i: 'O' + ++id,
      // object ID
      w: {} // weak collections IDs

    }
  });
};

var fastKey = function fastKey(it, create) {
  // return primitive with prefix
  if (!isObject(it)) return _typeof(it) == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F'; // not necessary to add metadata

    if (!create) return 'E'; // add missing metadata

    setMeta(it); // return object ID
  }

  return it[META].i;
};

var getWeak = function getWeak(it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true; // not necessary to add metadata

    if (!create) return false; // add missing metadata

    setMeta(it); // return hash weak collections IDs
  }

  return it[META].w;
}; // add metadata on freeze-family methods calling


var onFreeze = function onFreeze(it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};

var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-create.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-create.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var dPs = __webpack_require__(/*! ./_object-dps */ "./node_modules/core-js/modules/_object-dps.js");

var enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/modules/_enum-bug-keys.js");

var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');

var Empty = function Empty() {
  /* empty */
};

var PROTOTYPE = 'prototype'; // Create object with fake `null` prototype: use iframe Object with cleared prototype

var _createDict = function createDict() {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/modules/_dom-create.js")('iframe');

  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';

  __webpack_require__(/*! ./_html */ "./node_modules/core-js/modules/_html.js").appendChild(iframe);

  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);

  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  _createDict = iframeDocument.F;

  while (i--) {
    delete _createDict[PROTOTYPE][enumBugKeys[i]];
  }

  return _createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;

  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill

    result[IE_PROTO] = O;
  } else result = _createDict();

  return Properties === undefined ? result : dPs(result, Properties);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-dp.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-dp.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ "./node_modules/core-js/modules/_ie8-dom-define.js");

var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");

var dP = Object.defineProperty;
exports.f = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) {
    /* empty */
  }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-dps.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-dps.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");

module.exports = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;

  while (length > i) {
    dP.f(O, P = keys[i++], Properties[P]);
  }

  return O;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-gopd.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gopd.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js");

var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");

var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");

var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");

var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");

var IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ "./node_modules/core-js/modules/_ie8-dom-define.js");

var gOPD = Object.getOwnPropertyDescriptor;
exports.f = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) {
    /* empty */
  }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-gopn-ext.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gopn-ext.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");

var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;

var toString = {}.toString;
var windowNames = (typeof window === "undefined" ? "undefined" : _typeof(window)) == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function getWindowNames(it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-gopn.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gopn.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(/*! ./_object-keys-internal */ "./node_modules/core-js/modules/_object-keys-internal.js");

var hiddenKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/modules/_enum-bug-keys.js").concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-gops.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gops.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;

/***/ }),

/***/ "./node_modules/core-js/modules/_object-gpo.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gpo.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");

var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");

var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');

var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];

  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  }

  return O instanceof Object ? ObjectProto : null;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-keys-internal.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_object-keys-internal.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");

var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");

var arrayIndexOf = __webpack_require__(/*! ./_array-includes */ "./node_modules/core-js/modules/_array-includes.js")(false);

var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;

  for (key in O) {
    if (key != IE_PROTO) has(O, key) && result.push(key);
  } // Don't enum bug & hidden keys


  while (names.length > i) {
    if (has(O, key = names[i++])) {
      ~arrayIndexOf(result, key) || result.push(key);
    }
  }

  return result;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-keys.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-keys.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(/*! ./_object-keys-internal */ "./node_modules/core-js/modules/_object-keys-internal.js");

var enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/modules/_enum-bug-keys.js");

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-pie.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-pie.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;

/***/ }),

/***/ "./node_modules/core-js/modules/_property-desc.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_property-desc.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_redefine-all.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_redefine-all.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");

module.exports = function (target, src, safe) {
  for (var key in src) {
    redefine(target, key, src[key], safe);
  }

  return target;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_redefine.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_redefine.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");

var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");

var SRC = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js")('src');

var $toString = __webpack_require__(/*! ./_function-to-string */ "./node_modules/core-js/modules/_function-to-string.js");

var TO_STRING = 'toString';
var TPL = ('' + $toString).split(TO_STRING);

__webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js").inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));

  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  } // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative

})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});

/***/ }),

/***/ "./node_modules/core-js/modules/_set-proto.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_set-proto.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.

/* eslint-disable no-proto */
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var check = function check(O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};

module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
  function (test, buggy, set) {
    try {
      set = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js")(Function.call, __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js").f(Object.prototype, '__proto__').set, 2);
      set(test, []);
      buggy = !(test instanceof Array);
    } catch (e) {
      buggy = true;
    }

    return function setPrototypeOf(O, proto) {
      check(O, proto);
      if (buggy) O.__proto__ = proto;else set(O, proto);
      return O;
    };
  }({}, false) : undefined),
  check: check
};

/***/ }),

/***/ "./node_modules/core-js/modules/_set-species.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_set-species.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");

var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");

var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function get() {
      return this;
    }
  });
};

/***/ }),

/***/ "./node_modules/core-js/modules/_set-to-string-tag.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_set-to-string-tag.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;

var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");

var TAG = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
    configurable: true,
    value: tag
  });
};

/***/ }),

/***/ "./node_modules/core-js/modules/_shared-key.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_shared-key.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('keys');

var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");

module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

/***/ }),

/***/ "./node_modules/core-js/modules/_shared.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_shared.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});
(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js") ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});

/***/ }),

/***/ "./node_modules/core-js/modules/_strict-method.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_strict-method.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () {
      /* empty */
    }, 1) : method.call(null);
  });
};

/***/ }),

/***/ "./node_modules/core-js/modules/_string-at.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_string-at.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");

var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js"); // true  -> String#at
// false -> String#codePointAt


module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-absolute-index.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_to-absolute-index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");

var max = Math.max;
var min = Math.min;

module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-integer.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-integer.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;

module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-iobject.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-iobject.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js");

var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");

module.exports = function (it) {
  return IObject(defined(it));
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-length.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-length.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");

var min = Math.min;

module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-object.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");

module.exports = function (it) {
  return Object(defined(it));
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-primitive.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_to-primitive.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js"); // instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string


module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

/***/ }),

/***/ "./node_modules/core-js/modules/_uid.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_uid.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();

module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

/***/ }),

/***/ "./node_modules/core-js/modules/_validate-collection.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_validate-collection.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_wks-define.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_wks-define.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");

var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");

var wksExt = __webpack_require__(/*! ./_wks-ext */ "./node_modules/core-js/modules/_wks-ext.js");

var defineProperty = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;

module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, {
    value: wksExt.f(name)
  });
};

/***/ }),

/***/ "./node_modules/core-js/modules/_wks-ext.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_wks-ext.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");

/***/ }),

/***/ "./node_modules/core-js/modules/_wks.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_wks.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('wks');

var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");

var _Symbol = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").Symbol;

var USE_SYMBOL = typeof _Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] = USE_SYMBOL && _Symbol[name] || (USE_SYMBOL ? _Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

/***/ }),

/***/ "./node_modules/core-js/modules/core.get-iterator-method.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/core.get-iterator-method.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");

var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');

var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");

module.exports = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js").getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
};

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.index-of.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.index-of.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $indexOf = __webpack_require__(/*! ./_array-includes */ "./node_modules/core-js/modules/_array-includes.js")(false);

var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;
$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement
  /* , fromIndex = 0 */
  ) {
    return NEGATIVE_ZERO // convert -0 to +0
    ? $native.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments[1]);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.iterator.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.iterator.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var addToUnscopables = __webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js");

var step = __webpack_require__(/*! ./_iter-step */ "./node_modules/core-js/modules/_iter-step.js");

var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");

var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js"); // 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()


module.exports = __webpack_require__(/*! ./_iter-define */ "./node_modules/core-js/modules/_iter-define.js")(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target

  this._i = 0; // next index

  this._k = kind; // kind
  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;

  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }

  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values'); // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

Iterators.Arguments = Iterators.Array;
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.to-string.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.date.to-string.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;

if (new Date(NaN) + '' != INVALID_DATE) {
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this); // eslint-disable-next-line no-self-compare

    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}

/***/ }),

/***/ "./node_modules/core-js/modules/es6.function.bind.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.function.bind.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.P, 'Function', {
  bind: __webpack_require__(/*! ./_bind */ "./node_modules/core-js/modules/_bind.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.map.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/es6.map.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var strong = __webpack_require__(/*! ./_collection-strong */ "./node_modules/core-js/modules/_collection-strong.js");

var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");

var MAP = 'Map'; // 23.1 Map Objects

module.exports = __webpack_require__(/*! ./_collection */ "./node_modules/core-js/modules/_collection.js")(MAP, function (get) {
  return function Map() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.create.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.create.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js"); // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])


$export($export.S, 'Object', {
  create: __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.define-property.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.define-property.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js"); // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)


$export($export.S + $export.F * !__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js"), 'Object', {
  defineProperty: __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.set-prototype-of.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.set-prototype-of.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Object', {
  setPrototypeOf: __webpack_require__(/*! ./_set-proto */ "./node_modules/core-js/modules/_set-proto.js").set
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.to-string.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.to-string.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // 19.1.3.6 Object.prototype.toString()

var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");

var test = {};
test[__webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('toStringTag')] = 'z';

if (test + '' != '[object z]') {
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.construct.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.construct.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");

var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");

var bind = __webpack_require__(/*! ./_bind */ "./node_modules/core-js/modules/_bind.js");

var rConstruct = (__webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").Reflect || {}).construct; // MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it

var NEW_TARGET_BUG = fails(function () {
  function F() {
    /* empty */
  }

  return !(rConstruct(function () {
    /* empty */
  }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () {
    /* empty */
  });
});
$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args
  /* , newTarget */
  ) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);

    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0:
          return new Target();

        case 1:
          return new Target(args[0]);

        case 2:
          return new Target(args[0], args[1]);

        case 3:
          return new Target(args[0], args[1], args[2]);

        case 4:
          return new Target(args[0], args[1], args[2], args[3]);
      } // w/o altered newTarget, lot of arguments case


      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    } // with altered newTarget, not support built-in constructors


    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.get.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.get.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");

var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");

var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

function get(target, propertyKey
/* , receiver */
) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value') ? desc.value : desc.get !== undefined ? desc.get.call(receiver) : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', {
  get: get
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.flags.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.flags.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 21.2.5.3 get RegExp.prototype.flags()
if (__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && /./g.flags != 'g') __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f(RegExp.prototype, 'flags', {
  configurable: true,
  get: __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.to-string.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.to-string.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./es6.regexp.flags */ "./node_modules/core-js/modules/es6.regexp.flags.js");

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var $flags = __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js");

var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");

var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function define(fn) {
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(RegExp.prototype, TO_STRING, fn, true);
}; // 21.2.5.14 RegExp.prototype.toString()


if (__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return $toString.call({
    source: 'a',
    flags: 'b'
  }) != '/a/b';
})) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/', 'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  }); // FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.iterator.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.iterator.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $at = __webpack_require__(/*! ./_string-at */ "./node_modules/core-js/modules/_string-at.js")(true); // 21.1.3.27 String.prototype[@@iterator]()


__webpack_require__(/*! ./_iter-define */ "./node_modules/core-js/modules/_iter-define.js")(String, 'String', function (iterated) {
  this._t = String(iterated); // target

  this._i = 0; // next index
  // 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return {
    value: undefined,
    done: true
  };
  point = $at(O, index);
  this._i += point.length;
  return {
    value: point,
    done: false
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.symbol.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/es6.symbol.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // ECMAScript 6 symbols shim

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");

var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");

var META = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").KEY;

var $fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");

var shared = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js");

var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");

var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");

var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");

var wksExt = __webpack_require__(/*! ./_wks-ext */ "./node_modules/core-js/modules/_wks-ext.js");

var wksDefine = __webpack_require__(/*! ./_wks-define */ "./node_modules/core-js/modules/_wks-define.js");

var enumKeys = __webpack_require__(/*! ./_enum-keys */ "./node_modules/core-js/modules/_enum-keys.js");

var isArray = __webpack_require__(/*! ./_is-array */ "./node_modules/core-js/modules/_is-array.js");

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");

var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");

var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");

var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");

var _create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");

var gOPNExt = __webpack_require__(/*! ./_object-gopn-ext */ "./node_modules/core-js/modules/_object-gopn-ext.js");

var $GOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");

var $GOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/modules/_object-gops.js");

var $DP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");

var $keys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");

var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;

var _stringify = $JSON && $JSON.stringify;

var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global.QObject; // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173

var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687

var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function get() {
      return dP(this, 'a', {
        value: 7
      }).a;
    }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function wrap(tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);

  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && _typeof($Symbol.iterator) == 'symbol' ? function (it) {
  return _typeof(it) == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);

  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, {
        enumerable: createDesc(0, false)
      });
    }

    return setSymbolDesc(it, key, D);
  }

  return dP(it, key, D);
};

var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;

  while (l > i) {
    $defineProperty(it, key = keys[i++], P[key]);
  }

  return it;
};

var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};

var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};

var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};

var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;

  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  }

  return result;
};

var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;

  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  }

  return result;
}; // 19.4.1.1 Symbol([description])


if (!USE_NATIVE) {
  $Symbol = function _Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);

    var $set = function $set(value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };

    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, {
      configurable: true,
      set: $set
    });
    return wrap(tag);
  };

  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });
  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js").f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js")) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {
  Symbol: $Symbol
});

for (var es6Symbols = // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) {
  wks(es6Symbols[j++]);
}

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) {
  wksDefine(wellKnownSymbols[k++]);
}

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function _for(key) {
    return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');

    for (var key in SymbolRegistry) {
      if (SymbolRegistry[key] === sym) return key;
    }
  },
  useSetter: function useSetter() {
    setter = true;
  },
  useSimple: function useSimple() {
    setter = false;
  }
});
$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
}); // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443

var FAILS_ON_PRIMITIVES = $fails(function () {
  $GOPS.f(1);
});
$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return $GOPS.f(toObject(it));
  }
}); // 24.3.2 JSON.stringify(value [, replacer [, space]])

$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol(); // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols

  return _stringify([S]) != '[null]' || _stringify({
    a: S
  }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;

    while (arguments.length > i) {
      args.push(arguments[i++]);
    }

    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined

    if (!isArray(replacer)) replacer = function replacer(key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
}); // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)

$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf); // 19.4.3.5 Symbol.prototype[@@toStringTag]

setToStringTag($Symbol, 'Symbol'); // 20.2.1.9 Math[@@toStringTag]

setToStringTag(Math, 'Math', true); // 24.3.3 JSON[@@toStringTag]

setToStringTag(global.JSON, 'JSON', true);

/***/ }),

/***/ "./node_modules/core-js/modules/es7.symbol.async-iterator.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.symbol.async-iterator.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_wks-define */ "./node_modules/core-js/modules/_wks-define.js")('asyncIterator');

/***/ }),

/***/ "./node_modules/core-js/modules/web.dom.iterable.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom.iterable.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $iterators = __webpack_require__(/*! ./es6.array.iterator */ "./node_modules/core-js/modules/es6.array.iterator.js");

var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");

var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");

var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");

var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");

var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;
var DOMIterables = {
  CSSRuleList: true,
  // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true,
  // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true,
  // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;

  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) {
      if (!proto[key]) redefine(proto, key, $iterators[key], true);
    }
  }
}

/***/ }),

/***/ "./node_modules/katex/dist/katex.js":
/*!******************************************!*\
  !*** ./node_modules/katex/dist/katex.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function webpackUniversalModuleDefinition(root, factory) {
  if (( false ? undefined : _typeof(exports)) === 'object' && ( false ? undefined : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}
})(typeof self !== 'undefined' ? self : this, function () {
  return (
    /******/
    function (modules) {
      // webpackBootstrap

      /******/
      // The module cache

      /******/
      var installedModules = {};
      /******/

      /******/
      // The require function

      /******/

      function __webpack_require__(moduleId) {
        /******/

        /******/
        // Check if module is in cache

        /******/
        if (installedModules[moduleId]) {
          /******/
          return installedModules[moduleId].exports;
          /******/
        }
        /******/
        // Create a new module (and put it into the cache)

        /******/


        var module = installedModules[moduleId] = {
          /******/
          i: moduleId,

          /******/
          l: false,

          /******/
          exports: {}
          /******/

        };
        /******/

        /******/
        // Execute the module function

        /******/

        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/

        /******/
        // Flag the module as loaded

        /******/

        module.l = true;
        /******/

        /******/
        // Return the exports of the module

        /******/

        return module.exports;
        /******/
      }
      /******/

      /******/

      /******/
      // expose the modules object (__webpack_modules__)

      /******/


      __webpack_require__.m = modules;
      /******/

      /******/
      // expose the module cache

      /******/

      __webpack_require__.c = installedModules;
      /******/

      /******/
      // define getter function for harmony exports

      /******/

      __webpack_require__.d = function (exports, name, getter) {
        /******/
        if (!__webpack_require__.o(exports, name)) {
          /******/
          Object.defineProperty(exports, name, {
            enumerable: true,
            get: getter
          });
          /******/
        }
        /******/

      };
      /******/

      /******/
      // define __esModule on exports

      /******/


      __webpack_require__.r = function (exports) {
        /******/
        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
          /******/
          Object.defineProperty(exports, Symbol.toStringTag, {
            value: 'Module'
          });
          /******/
        }
        /******/


        Object.defineProperty(exports, '__esModule', {
          value: true
        });
        /******/
      };
      /******/

      /******/
      // create a fake namespace object

      /******/
      // mode & 1: value is a module id, require it

      /******/
      // mode & 2: merge all properties of value into the ns

      /******/
      // mode & 4: return value when already ns object

      /******/
      // mode & 8|1: behave like require

      /******/


      __webpack_require__.t = function (value, mode) {
        /******/
        if (mode & 1) value = __webpack_require__(value);
        /******/

        if (mode & 8) return value;
        /******/

        if (mode & 4 && _typeof(value) === 'object' && value && value.__esModule) return value;
        /******/

        var ns = Object.create(null);
        /******/

        __webpack_require__.r(ns);
        /******/


        Object.defineProperty(ns, 'default', {
          enumerable: true,
          value: value
        });
        /******/

        if (mode & 2 && typeof value != 'string') for (var key in value) {
          __webpack_require__.d(ns, key, function (key) {
            return value[key];
          }.bind(null, key));
        }
        /******/

        return ns;
        /******/
      };
      /******/

      /******/
      // getDefaultExport function for compatibility with non-harmony modules

      /******/


      __webpack_require__.n = function (module) {
        /******/
        var getter = module && module.__esModule ?
        /******/
        function getDefault() {
          return module['default'];
        } :
        /******/
        function getModuleExports() {
          return module;
        };
        /******/

        __webpack_require__.d(getter, 'a', getter);
        /******/


        return getter;
        /******/
      };
      /******/

      /******/
      // Object.prototype.hasOwnProperty.call

      /******/


      __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      /******/

      /******/
      // __webpack_public_path__

      /******/


      __webpack_require__.p = "";
      /******/

      /******/

      /******/
      // Load entry module and return exports

      /******/

      return __webpack_require__(__webpack_require__.s = 1);
      /******/
    }(
    /************************************************************************/

    /******/
    [
    /* 0 */

    /***/
    function (module, exports, __webpack_require__) {// extracted by mini-css-extract-plugin

      /***/
    },
    /* 1 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__); // EXTERNAL MODULE: ./src/katex.less


      var katex = __webpack_require__(0); // CONCATENATED MODULE: ./src/SourceLocation.js

      /**
       * Lexing or parsing positional information for error reporting.
       * This object is immutable.
       */


      var SourceLocation =
      /*#__PURE__*/
      function () {
        // The + prefix indicates that these fields aren't writeable
        // Lexer holding the input string.
        // Start offset, zero-based inclusive.
        // End offset, zero-based exclusive.
        function SourceLocation(lexer, start, end) {
          this.lexer = void 0;
          this.start = void 0;
          this.end = void 0;
          this.lexer = lexer;
          this.start = start;
          this.end = end;
        }
        /**
         * Merges two `SourceLocation`s from location providers, given they are
         * provided in order of appearance.
         * - Returns the first one's location if only the first is provided.
         * - Returns a merged range of the first and the last if both are provided
         *   and their lexers match.
         * - Otherwise, returns null.
         */


        SourceLocation.range = function range(first, second) {
          if (!second) {
            return first && first.loc;
          } else if (!first || !first.loc || !second.loc || first.loc.lexer !== second.loc.lexer) {
            return null;
          } else {
            return new SourceLocation(first.loc.lexer, first.loc.start, second.loc.end);
          }
        };

        return SourceLocation;
      }(); // CONCATENATED MODULE: ./src/Token.js

      /**
       * Interface required to break circular dependency between Token, Lexer, and
       * ParseError.
       */

      /**
       * The resulting token returned from `lex`.
       *
       * It consists of the token text plus some position information.
       * The position information is essentially a range in an input string,
       * but instead of referencing the bare input string, we refer to the lexer.
       * That way it is possible to attach extra metadata to the input string,
       * like for example a file name or similar.
       *
       * The position information is optional, so it is OK to construct synthetic
       * tokens if appropriate. Not providing available position information may
       * lead to degraded error reporting, though.
       */


      var Token_Token =
      /*#__PURE__*/
      function () {
        function Token(text, // the text of this token
        loc) {
          this.text = void 0;
          this.loc = void 0;
          this.text = text;
          this.loc = loc;
        }
        /**
         * Given a pair of tokens (this and endToken), compute a `Token` encompassing
         * the whole input range enclosed by these two.
         */


        var _proto = Token.prototype;

        _proto.range = function range(endToken, // last token of the range, inclusive
        text) // the text of the newly constructed token
        {
          return new Token(text, SourceLocation.range(this, endToken));
        };

        return Token;
      }(); // CONCATENATED MODULE: ./src/ParseError.js

      /**
       * This is the ParseError class, which is the main error thrown by KaTeX
       * functions when something has gone wrong. This is used to distinguish internal
       * errors from errors in the expression that the user provided.
       *
       * If possible, a caller should provide a Token or ParseNode with information
       * about where in the source string the problem occurred.
       */


      var ParseError = // Error position based on passed-in Token or ParseNode.
      function ParseError(message, // The error message
      token) // An object providing position information
      {
        this.position = void 0;
        var error = "KaTeX parse error: " + message;
        var start;
        var loc = token && token.loc;

        if (loc && loc.start <= loc.end) {
          // If we have the input and a position, make the error a bit fancier
          // Get the input
          var input = loc.lexer.input; // Prepend some information

          start = loc.start;
          var end = loc.end;

          if (start === input.length) {
            error += " at end of input: ";
          } else {
            error += " at position " + (start + 1) + ": ";
          } // Underline token in question using combining underscores


          var underlined = input.slice(start, end).replace(/[^]/g, "$&\u0332"); // Extract some context from the input and add it to the error

          var left;

          if (start > 15) {
            left = "…" + input.slice(start - 15, start);
          } else {
            left = input.slice(0, start);
          }

          var right;

          if (end + 15 < input.length) {
            right = input.slice(end, end + 15) + "…";
          } else {
            right = input.slice(end);
          }

          error += left + underlined + right;
        } // Some hackery to make ParseError a prototype of Error
        // See http://stackoverflow.com/a/8460753


        var self = new Error(error);
        self.name = "ParseError"; // $FlowFixMe

        self.__proto__ = ParseError.prototype; // $FlowFixMe

        self.position = start;
        return self;
      }; // $FlowFixMe More hackery


      ParseError.prototype.__proto__ = Error.prototype;
      /* harmony default export */

      var src_ParseError = ParseError; // CONCATENATED MODULE: ./src/utils.js

      /**
       * This file contains a list of utility functions which are useful in other
       * files.
       */

      /**
       * Return whether an element is contained in a list
       */

      var contains = function contains(list, elem) {
        return list.indexOf(elem) !== -1;
      };
      /**
       * Provide a default value if a setting is undefined
       * NOTE: Couldn't use `T` as the output type due to facebook/flow#5022.
       */


      var deflt = function deflt(setting, defaultIfUndefined) {
        return setting === undefined ? defaultIfUndefined : setting;
      }; // hyphenate and escape adapted from Facebook's React under Apache 2 license


      var uppercase = /([A-Z])/g;

      var hyphenate = function hyphenate(str) {
        return str.replace(uppercase, "-$1").toLowerCase();
      };

      var ESCAPE_LOOKUP = {
        "&": "&amp;",
        ">": "&gt;",
        "<": "&lt;",
        "\"": "&quot;",
        "'": "&#x27;"
      };
      var ESCAPE_REGEX = /[&><"']/g;
      /**
       * Escapes text to prevent scripting attacks.
       */

      function utils_escape(text) {
        return String(text).replace(ESCAPE_REGEX, function (match) {
          return ESCAPE_LOOKUP[match];
        });
      }
      /**
       * Sometimes we want to pull out the innermost element of a group. In most
       * cases, this will just be the group itself, but when ordgroups and colors have
       * a single element, we want to pull that out.
       */


      var getBaseElem = function getBaseElem(group) {
        if (group.type === "ordgroup") {
          if (group.body.length === 1) {
            return getBaseElem(group.body[0]);
          } else {
            return group;
          }
        } else if (group.type === "color") {
          if (group.body.length === 1) {
            return getBaseElem(group.body[0]);
          } else {
            return group;
          }
        } else if (group.type === "font") {
          return getBaseElem(group.body);
        } else {
          return group;
        }
      };
      /**
       * TeXbook algorithms often reference "character boxes", which are simply groups
       * with a single character in them. To decide if something is a character box,
       * we find its innermost group, and see if it is a single character.
       */


      var utils_isCharacterBox = function isCharacterBox(group) {
        var baseElem = getBaseElem(group); // These are all they types of groups which hold single characters

        return baseElem.type === "mathord" || baseElem.type === "textord" || baseElem.type === "atom";
      };

      var assert = function assert(value) {
        if (!value) {
          throw new Error('Expected non-null, but got ' + String(value));
        }

        return value;
      };
      /* harmony default export */


      var utils = {
        contains: contains,
        deflt: deflt,
        escape: utils_escape,
        hyphenate: hyphenate,
        getBaseElem: getBaseElem,
        isCharacterBox: utils_isCharacterBox
      }; // CONCATENATED MODULE: ./src/Settings.js

      /* eslint no-console:0 */

      /**
       * This is a module for storing settings passed into KaTeX. It correctly handles
       * default settings.
       */

      /**
       * The main Settings object
       *
       * The current options stored are:
       *  - displayMode: Whether the expression should be typeset as inline math
       *                 (false, the default), meaning that the math starts in
       *                 \textstyle and is placed in an inline-block); or as display
       *                 math (true), meaning that the math starts in \displaystyle
       *                 and is placed in a block with vertical margin.
       */

      var Settings_Settings =
      /*#__PURE__*/
      function () {
        function Settings(options) {
          this.displayMode = void 0;
          this.leqno = void 0;
          this.fleqn = void 0;
          this.throwOnError = void 0;
          this.errorColor = void 0;
          this.macros = void 0;
          this.colorIsTextColor = void 0;
          this.strict = void 0;
          this.maxSize = void 0;
          this.maxExpand = void 0;
          this.allowedProtocols = void 0; // allow null options

          options = options || {};
          this.displayMode = utils.deflt(options.displayMode, false);
          this.leqno = utils.deflt(options.leqno, false);
          this.fleqn = utils.deflt(options.fleqn, false);
          this.throwOnError = utils.deflt(options.throwOnError, true);
          this.errorColor = utils.deflt(options.errorColor, "#cc0000");
          this.macros = options.macros || {};
          this.colorIsTextColor = utils.deflt(options.colorIsTextColor, false);
          this.strict = utils.deflt(options.strict, "warn");
          this.maxSize = Math.max(0, utils.deflt(options.maxSize, Infinity));
          this.maxExpand = Math.max(0, utils.deflt(options.maxExpand, 1000));
          this.allowedProtocols = utils.deflt(options.allowedProtocols, ["http", "https", "mailto", "_relative"]);
        }
        /**
         * Report nonstrict (non-LaTeX-compatible) input.
         * Can safely not be called if `this.strict` is false in JavaScript.
         */


        var _proto = Settings.prototype;

        _proto.reportNonstrict = function reportNonstrict(errorCode, errorMsg, token) {
          var strict = this.strict;

          if (typeof strict === "function") {
            // Allow return value of strict function to be boolean or string
            // (or null/undefined, meaning no further processing).
            strict = strict(errorCode, errorMsg, token);
          }

          if (!strict || strict === "ignore") {
            return;
          } else if (strict === true || strict === "error") {
            throw new src_ParseError("LaTeX-incompatible input and strict mode is set to 'error': " + (errorMsg + " [" + errorCode + "]"), token);
          } else if (strict === "warn") {
            typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (errorMsg + " [" + errorCode + "]"));
          } else {
            // won't happen in type-safe code
            typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + strict + "': " + errorMsg + " [" + errorCode + "]"));
          }
        }
        /**
         * Check whether to apply strict (LaTeX-adhering) behavior for unusual
         * input (like `\\`).  Unlike `nonstrict`, will not throw an error;
         * instead, "error" translates to a return value of `true`, while "ignore"
         * translates to a return value of `false`.  May still print a warning:
         * "warn" prints a warning and returns `false`.
         * This is for the second category of `errorCode`s listed in the README.
         */
        ;

        _proto.useStrictBehavior = function useStrictBehavior(errorCode, errorMsg, token) {
          var strict = this.strict;

          if (typeof strict === "function") {
            // Allow return value of strict function to be boolean or string
            // (or null/undefined, meaning no further processing).
            // But catch any exceptions thrown by function, treating them
            // like "error".
            try {
              strict = strict(errorCode, errorMsg, token);
            } catch (error) {
              strict = "error";
            }
          }

          if (!strict || strict === "ignore") {
            return false;
          } else if (strict === true || strict === "error") {
            return true;
          } else if (strict === "warn") {
            typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (errorMsg + " [" + errorCode + "]"));
            return false;
          } else {
            // won't happen in type-safe code
            typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + strict + "': " + errorMsg + " [" + errorCode + "]"));
            return false;
          }
        };

        return Settings;
      }();
      /* harmony default export */


      var src_Settings = Settings_Settings; // CONCATENATED MODULE: ./src/Style.js

      /**
       * This file contains information and classes for the various kinds of styles
       * used in TeX. It provides a generic `Style` class, which holds information
       * about a specific style. It then provides instances of all the different kinds
       * of styles possible, and provides functions to move between them and get
       * information about them.
       */

      /**
       * The main style class. Contains a unique id for the style, a size (which is
       * the same for cramped and uncramped version of a style), and a cramped flag.
       */

      var Style =
      /*#__PURE__*/
      function () {
        function Style(id, size, cramped) {
          this.id = void 0;
          this.size = void 0;
          this.cramped = void 0;
          this.id = id;
          this.size = size;
          this.cramped = cramped;
        }
        /**
         * Get the style of a superscript given a base in the current style.
         */


        var _proto = Style.prototype;

        _proto.sup = function sup() {
          return Style_styles[_sup[this.id]];
        }
        /**
         * Get the style of a subscript given a base in the current style.
         */
        ;

        _proto.sub = function sub() {
          return Style_styles[_sub[this.id]];
        }
        /**
         * Get the style of a fraction numerator given the fraction in the current
         * style.
         */
        ;

        _proto.fracNum = function fracNum() {
          return Style_styles[_fracNum[this.id]];
        }
        /**
         * Get the style of a fraction denominator given the fraction in the current
         * style.
         */
        ;

        _proto.fracDen = function fracDen() {
          return Style_styles[_fracDen[this.id]];
        }
        /**
         * Get the cramped version of a style (in particular, cramping a cramped style
         * doesn't change the style).
         */
        ;

        _proto.cramp = function cramp() {
          return Style_styles[_cramp[this.id]];
        }
        /**
         * Get a text or display version of this style.
         */
        ;

        _proto.text = function text() {
          return Style_styles[_text[this.id]];
        }
        /**
         * Return true if this style is tightly spaced (scriptstyle/scriptscriptstyle)
         */
        ;

        _proto.isTight = function isTight() {
          return this.size >= 2;
        };

        return Style;
      }(); // Export an interface for type checking, but don't expose the implementation.
      // This way, no more styles can be generated.
      // IDs of the different styles


      var D = 0;
      var Dc = 1;
      var T = 2;
      var Tc = 3;
      var S = 4;
      var Sc = 5;
      var SS = 6;
      var SSc = 7; // Instances of the different styles

      var Style_styles = [new Style(D, 0, false), new Style(Dc, 0, true), new Style(T, 1, false), new Style(Tc, 1, true), new Style(S, 2, false), new Style(Sc, 2, true), new Style(SS, 3, false), new Style(SSc, 3, true)]; // Lookup tables for switching from one style to another

      var _sup = [S, Sc, S, Sc, SS, SSc, SS, SSc];
      var _sub = [Sc, Sc, Sc, Sc, SSc, SSc, SSc, SSc];
      var _fracNum = [T, Tc, S, Sc, SS, SSc, SS, SSc];
      var _fracDen = [Tc, Tc, Sc, Sc, SSc, SSc, SSc, SSc];
      var _cramp = [Dc, Dc, Tc, Tc, Sc, Sc, SSc, SSc];
      var _text = [D, Dc, T, Tc, T, Tc, T, Tc]; // We only export some of the styles.

      /* harmony default export */

      var src_Style = {
        DISPLAY: Style_styles[D],
        TEXT: Style_styles[T],
        SCRIPT: Style_styles[S],
        SCRIPTSCRIPT: Style_styles[SS]
      }; // CONCATENATED MODULE: ./src/unicodeScripts.js

      /*
       * This file defines the Unicode scripts and script families that we
       * support. To add new scripts or families, just add a new entry to the
       * scriptData array below. Adding scripts to the scriptData array allows
       * characters from that script to appear in \text{} environments.
       */

      /**
       * Each script or script family has a name and an array of blocks.
       * Each block is an array of two numbers which specify the start and
       * end points (inclusive) of a block of Unicode codepoints.
       */

      /**
       * Unicode block data for the families of scripts we support in \text{}.
       * Scripts only need to appear here if they do not have font metrics.
       */

      var scriptData = [{
        // Latin characters beyond the Latin-1 characters we have metrics for.
        // Needed for Czech, Hungarian and Turkish text, for example.
        name: 'latin',
        blocks: [[0x0100, 0x024f], // Latin Extended-A and Latin Extended-B
        [0x0300, 0x036f]]
      }, {
        // The Cyrillic script used by Russian and related languages.
        // A Cyrillic subset used to be supported as explicitly defined
        // symbols in symbols.js
        name: 'cyrillic',
        blocks: [[0x0400, 0x04ff]]
      }, {
        // The Brahmic scripts of South and Southeast Asia
        // Devanagari (0900–097F)
        // Bengali (0980–09FF)
        // Gurmukhi (0A00–0A7F)
        // Gujarati (0A80–0AFF)
        // Oriya (0B00–0B7F)
        // Tamil (0B80–0BFF)
        // Telugu (0C00–0C7F)
        // Kannada (0C80–0CFF)
        // Malayalam (0D00–0D7F)
        // Sinhala (0D80–0DFF)
        // Thai (0E00–0E7F)
        // Lao (0E80–0EFF)
        // Tibetan (0F00–0FFF)
        // Myanmar (1000–109F)
        name: 'brahmic',
        blocks: [[0x0900, 0x109F]]
      }, {
        name: 'georgian',
        blocks: [[0x10A0, 0x10ff]]
      }, {
        // Chinese and Japanese.
        // The "k" in cjk is for Korean, but we've separated Korean out
        name: "cjk",
        blocks: [[0x3000, 0x30FF], // CJK symbols and punctuation, Hiragana, Katakana
        [0x4E00, 0x9FAF], // CJK ideograms
        [0xFF00, 0xFF60]]
      }, {
        // Korean
        name: 'hangul',
        blocks: [[0xAC00, 0xD7AF]]
      }];
      /**
       * Given a codepoint, return the name of the script or script family
       * it is from, or null if it is not part of a known block
       */

      function scriptFromCodepoint(codepoint) {
        for (var i = 0; i < scriptData.length; i++) {
          var script = scriptData[i];

          for (var _i = 0; _i < script.blocks.length; _i++) {
            var block = script.blocks[_i];

            if (codepoint >= block[0] && codepoint <= block[1]) {
              return script.name;
            }
          }
        }

        return null;
      }
      /**
       * A flattened version of all the supported blocks in a single array.
       * This is an optimization to make supportedCodepoint() fast.
       */


      var allBlocks = [];
      scriptData.forEach(function (s) {
        return s.blocks.forEach(function (b) {
          return allBlocks.push.apply(allBlocks, b);
        });
      });
      /**
       * Given a codepoint, return true if it falls within one of the
       * scripts or script families defined above and false otherwise.
       *
       * Micro benchmarks shows that this is faster than
       * /[\u3000-\u30FF\u4E00-\u9FAF\uFF00-\uFF60\uAC00-\uD7AF\u0900-\u109F]/.test()
       * in Firefox, Chrome and Node.
       */

      function supportedCodepoint(codepoint) {
        for (var i = 0; i < allBlocks.length; i += 2) {
          if (codepoint >= allBlocks[i] && codepoint <= allBlocks[i + 1]) {
            return true;
          }
        }

        return false;
      } // CONCATENATED MODULE: ./src/svgGeometry.js

      /**
       * This file provides support to domTree.js
       * It's a storehouse of path geometry for SVG images.
       */
      // In all paths below, the viewBox-to-em scale is 1000:1.


      var hLinePad = 80; // padding above a sqrt viniculum.

      var svgGeometry_path = {
        // sqrtMain path geometry is from glyph U221A in the font KaTeX Main
        // All surds have 80 units padding above the viniculumn.
        sqrtMain: "M95," + (622 + hLinePad) + "c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,\n-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,\n-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,\n35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,\n-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467\ns-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422\ns-65,47,-65,47z M834 " + hLinePad + "H400000v40H845z",
        // size1 is from glyph U221A in the font KaTeX_Size1-Regular
        sqrtSize1: "M263," + (601 + hLinePad) + "c0.7,0,18,39.7,52,119c34,79.3,68.167,\n158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067\nc4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,\n175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71\nc-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,\n-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26\ns76,-59,76,-59s76,-60,76,-60z M1001 " + hLinePad + "H40000v40H1012z",
        // size2 is from glyph U221A in the font KaTeX_Size2-Regular
        // The 80 units padding is most obvious here. Note start node at M1001 80.
        sqrtSize2: "M1001," + hLinePad + "H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,\n572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,\n-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39\nc-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60\ns208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,\n-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5c4,-6.7,10,-10,18,-10z\nM1001 " + hLinePad + "H400000v40H1013z",
        // size3 is from glyph U221A in the font KaTeX_Size3-Regular
        sqrtSize3: "M424," + (2398 + hLinePad) + "c-1.3,-0.7,-38.5,-172,-111.5,-514c-73,\n-342,-109.8,-513.3,-110.5,-514c0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,\n25c-5.7,9.3,-9.8,16,-12.5,20s-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,\n-13s76,-122,76,-122s77,-121,77,-121s209,968,209,968c0,-2,84.7,-361.7,254,-1079\nc169.3,-717.3,254.7,-1077.7,256,-1081c4,-6.7,10,-10,18,-10H400000v40H1014.6\ns-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185c-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2z M1001 " + hLinePad + "H400000v40H1014z",
        // size4 is from glyph U221A in the font KaTeX_Size4-Regular
        sqrtSize4: "M473," + (2713 + hLinePad) + "c339.3,-1799.3,509.3,-2700,510,-2702\nc3.3,-7.3,9.3,-11,18,-11H400000v40H1017.7s-90.5,478,-276.2,1466c-185.7,988,\n-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9c-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,\n-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200c0,-1.3,-5.3,8.7,-16,30c-10.7,\n21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26s76,-153,76,-153s77,-151,\n77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,606z\nM1001 " + hLinePad + "H400000v40H1017z",
        // The doubleleftarrow geometry is from glyph U+21D0 in the font KaTeX Main
        doubleleftarrow: "M262 157\nl10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3\n 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28\n 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5\nc2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5\n 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87\n-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7\n-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z\nm8 0v40h399730v-40zm0 194v40h399730v-40z",
        // doublerightarrow is from glyph U+21D2 in font KaTeX Main
        doublerightarrow: "M399738 392l\n-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5\n 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88\n-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68\n-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18\n-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782\nc-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3\n-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z",
        // leftarrow is from glyph U+2190 in font KaTeX Main
        leftarrow: "M400000 241H110l3-3c68.7-52.7 113.7-120\n 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8\n-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247\nc-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208\n 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3\n 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202\n l-3-3h399890zM100 241v40h399900v-40z",
        // overbrace is from glyphs U+23A9/23A8/23A7 in font KaTeX_Size4-Regular
        leftbrace: "M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117\n-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7\n 5-6 9-10 13-.7 1-7.3 1-20 1H6z",
        leftbraceunder: "M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z",
        // overgroup is from the MnSymbol package (public domain)
        leftgroup: "M400000 80\nH435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0\n 435 0h399565z",
        leftgroupunder: "M400000 262\nH435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219\n 435 219h399565z",
        // Harpoons are from glyph U+21BD in font KaTeX Main
        leftharpoon: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3\n-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5\n-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7\n-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z",
        leftharpoonplus: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5\n 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3\n-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7\n-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z\nm0 0v40h400000v-40z",
        leftharpoondown: "M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333\n 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5\n 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667\n-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z",
        leftharpoondownplus: "M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z",
        // hook is from glyph U+21A9 in font KaTeX Main
        lefthook: "M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5\n-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3\n-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21\n 71.5 23h399859zM103 281v-40h399897v40z",
        leftlinesegment: "M40 281 V428 H0 V94 H40 V241 H400000 v40z\nM40 281 V428 H0 V94 H40 V241 H400000 v40z",
        leftmapsto: "M40 281 V448H0V74H40V241H400000v40z\nM40 281 V448H0V74H40V241H400000v40z",
        // tofrom is from glyph U+21C4 in font KaTeX AMS Regular
        leftToFrom: "M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23\n-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8\nc28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3\n 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z",
        longequal: "M0 50 h400000 v40H0z m0 194h40000v40H0z\nM0 50 h400000 v40H0z m0 194h40000v40H0z",
        midbrace: "M200428 334\nc-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14\n-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7\n 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11\n 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z",
        midbraceunder: "M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z",
        oiintSize1: "M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6\n-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z\nm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8\n60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z",
        oiintSize2: "M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8\n-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z\nm502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2\nc0 110 84 276 504 276s502.4-166 502.4-276z",
        oiiintSize1: "M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6\n-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z\nm525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0\n85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z",
        oiiintSize2: "M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8\n-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z\nm770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1\nc0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z",
        rightarrow: "M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z",
        rightbrace: "M400000 542l\n-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5\ns-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1\nc124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z",
        rightbraceunder: "M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z",
        rightgroup: "M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0\n 3-1 3-3v-38c-76-158-257-219-435-219H0z",
        rightgroupunder: "M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18\n 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z",
        rightharpoon: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3\n-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2\n-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58\n 69.2 92 94.5zm0 0v40h399900v-40z",
        rightharpoonplus: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z",
        rightharpoondown: "M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8\n 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5\n-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95\n-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z",
        rightharpoondownplus: "M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8\n 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3\n 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3\n-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z\nm0-194v40h400000v-40zm0 0v40h400000v-40z",
        righthook: "M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3\n 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0\n-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21\n 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z",
        rightlinesegment: "M399960 241 V94 h40 V428 h-40 V281 H0 v-40z\nM399960 241 V94 h40 V428 h-40 V281 H0 v-40z",
        rightToFrom: "M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23\n 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32\n-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142\n-167z M100 147v40h399900v-40zM0 341v40h399900v-40z",
        // twoheadleftarrow is from glyph U+219E in font KaTeX AMS Regular
        twoheadleftarrow: "M0 167c68 40\n 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69\n-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3\n-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19\n-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101\n 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z",
        twoheadrightarrow: "M400000 167\nc-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3\n 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42\n 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333\n-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70\n 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z",
        // tilde1 is a modified version of a glyph from the MnSymbol package
        tilde1: "M200 55.538c-77 0-168 73.953-177 73.953-3 0-7\n-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0\n 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0\n 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128\n-68.267.847-113-73.952-191-73.952z",
        // ditto tilde2, tilde3, & tilde4
        tilde2: "M344 55.266c-142 0-300.638 81.316-311.5 86.418\n-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9\n 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114\nc1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751\n 181.476 676 181.476c-149 0-189-126.21-332-126.21z",
        tilde3: "M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457\n-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0\n 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697\n 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696\n -338 0-409-156.573-744-156.573z",
        tilde4: "M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345\n-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409\n 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9\n 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409\n -175.236-744-175.236z",
        // vec is from glyph U+20D7 in font KaTeX Main
        vec: "M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z",
        // widehat1 is a modified version of a glyph from the MnSymbol package
        widehat1: "M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z",
        // ditto widehat2, widehat3, & widehat4
        widehat2: "M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
        widehat3: "M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
        widehat4: "M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
        // widecheck paths are all inverted versions of widehat
        widecheck1: "M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,\n-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z",
        widecheck2: "M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
        widecheck3: "M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
        widecheck4: "M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
        // The next ten paths support reaction arrows from the mhchem package.
        // Arrows for \ce{<-->} are offset from xAxis by 0.22ex, per mhchem in LaTeX
        // baraboveleftarrow is mostly from from glyph U+2190 in font KaTeX Main
        baraboveleftarrow: "M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202\nc4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5\nc-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130\ns-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47\n121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6\ns2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11\nc0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z\nM100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z",
        // rightarrowabovebar is mostly from glyph U+2192, KaTeX Main
        rightarrowabovebar: "M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32\n-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0\n13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39\n-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5\n-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z",
        // The short left harpoon has 0.5em (i.e. 500 units) kern on the left end.
        // Ref from mhchem.sty: \rlap{\raisebox{-.22ex}{$\kern0.5em
        baraboveshortleftharpoon: "M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17\nc2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21\nc-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40\nc-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z\nM0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z",
        rightharpoonaboveshortbar: "M0,241 l0,40c399126,0,399993,0,399993,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z",
        shortbaraboveleftharpoon: "M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,\n1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,\n-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z\nM93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z",
        shortrightharpoonabovebar: "M53,241l0,40c398570,0,399437,0,399437,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z"
      };
      /* harmony default export */

      var svgGeometry = {
        path: svgGeometry_path
      }; // CONCATENATED MODULE: ./src/tree.js

      /**
       * This node represents a document fragment, which contains elements, but when
       * placed into the DOM doesn't have any representation itself. It only contains
       * children and doesn't have any DOM node properties.
       */

      var tree_DocumentFragment =
      /*#__PURE__*/
      function () {
        // HtmlDomNode
        // Never used; needed for satisfying interface.
        function DocumentFragment(children) {
          this.children = void 0;
          this.classes = void 0;
          this.height = void 0;
          this.depth = void 0;
          this.maxFontSize = void 0;
          this.style = void 0;
          this.children = children;
          this.classes = [];
          this.height = 0;
          this.depth = 0;
          this.maxFontSize = 0;
          this.style = {};
        }

        var _proto = DocumentFragment.prototype;

        _proto.hasClass = function hasClass(className) {
          return utils.contains(this.classes, className);
        }
        /** Convert the fragment into a node. */
        ;

        _proto.toNode = function toNode() {
          var frag = document.createDocumentFragment();

          for (var i = 0; i < this.children.length; i++) {
            frag.appendChild(this.children[i].toNode());
          }

          return frag;
        }
        /** Convert the fragment into HTML markup. */
        ;

        _proto.toMarkup = function toMarkup() {
          var markup = ""; // Simply concatenate the markup for the children together.

          for (var i = 0; i < this.children.length; i++) {
            markup += this.children[i].toMarkup();
          }

          return markup;
        }
        /**
         * Converts the math node into a string, similar to innerText. Applies to
         * MathDomNode's only.
         */
        ;

        _proto.toText = function toText() {
          // To avoid this, we would subclass documentFragment separately for
          // MathML, but polyfills for subclassing is expensive per PR 1469.
          // $FlowFixMe: Only works for ChildType = MathDomNode.
          var toText = function toText(child) {
            return child.toText();
          };

          return this.children.map(toText).join("");
        };

        return DocumentFragment;
      }(); // CONCATENATED MODULE: ./src/domTree.js

      /**
       * These objects store the data about the DOM nodes we create, as well as some
       * extra data. They can then be transformed into real DOM nodes with the
       * `toNode` function or HTML markup using `toMarkup`. They are useful for both
       * storing extra properties on the nodes, as well as providing a way to easily
       * work with the DOM.
       *
       * Similar functions for working with MathML nodes exist in mathMLTree.js.
       *
       * TODO: refactor `span` and `anchor` into common superclass when
       * target environments support class inheritance
       */

      /**
       * Create an HTML className based on a list of classes. In addition to joining
       * with spaces, we also remove empty classes.
       */


      var createClass = function createClass(classes) {
        return classes.filter(function (cls) {
          return cls;
        }).join(" ");
      };

      var initNode = function initNode(classes, options, style) {
        this.classes = classes || [];
        this.attributes = {};
        this.height = 0;
        this.depth = 0;
        this.maxFontSize = 0;
        this.style = style || {};

        if (options) {
          if (options.style.isTight()) {
            this.classes.push("mtight");
          }

          var color = options.getColor();

          if (color) {
            this.style.color = color;
          }
        }
      };
      /**
       * Convert into an HTML node
       */


      var _toNode = function toNode(tagName) {
        var node = document.createElement(tagName); // Apply the class

        node.className = createClass(this.classes); // Apply inline styles

        for (var style in this.style) {
          if (this.style.hasOwnProperty(style)) {
            // $FlowFixMe Flow doesn't seem to understand span.style's type.
            node.style[style] = this.style[style];
          }
        } // Apply attributes


        for (var attr in this.attributes) {
          if (this.attributes.hasOwnProperty(attr)) {
            node.setAttribute(attr, this.attributes[attr]);
          }
        } // Append the children, also as HTML nodes


        for (var i = 0; i < this.children.length; i++) {
          node.appendChild(this.children[i].toNode());
        }

        return node;
      };
      /**
       * Convert into an HTML markup string
       */


      var _toMarkup = function toMarkup(tagName) {
        var markup = "<" + tagName; // Add the class

        if (this.classes.length) {
          markup += " class=\"" + utils.escape(createClass(this.classes)) + "\"";
        }

        var styles = ""; // Add the styles, after hyphenation

        for (var style in this.style) {
          if (this.style.hasOwnProperty(style)) {
            styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
          }
        }

        if (styles) {
          markup += " style=\"" + utils.escape(styles) + "\"";
        } // Add the attributes


        for (var attr in this.attributes) {
          if (this.attributes.hasOwnProperty(attr)) {
            markup += " " + attr + "=\"" + utils.escape(this.attributes[attr]) + "\"";
          }
        }

        markup += ">"; // Add the markup of the children, also as markup

        for (var i = 0; i < this.children.length; i++) {
          markup += this.children[i].toMarkup();
        }

        markup += "</" + tagName + ">";
        return markup;
      }; // Making the type below exact with all optional fields doesn't work due to
      // - https://github.com/facebook/flow/issues/4582
      // - https://github.com/facebook/flow/issues/5688
      // However, since *all* fields are optional, $Shape<> works as suggested in 5688
      // above.
      // This type does not include all CSS properties. Additional properties should
      // be added as needed.

      /**
       * This node represents a span node, with a className, a list of children, and
       * an inline style. It also contains information about its height, depth, and
       * maxFontSize.
       *
       * Represents two types with different uses: SvgSpan to wrap an SVG and DomSpan
       * otherwise. This typesafety is important when HTML builders access a span's
       * children.
       */


      var domTree_Span =
      /*#__PURE__*/
      function () {
        function Span(classes, children, options, style) {
          this.children = void 0;
          this.attributes = void 0;
          this.classes = void 0;
          this.height = void 0;
          this.depth = void 0;
          this.width = void 0;
          this.maxFontSize = void 0;
          this.style = void 0;
          initNode.call(this, classes, options, style);
          this.children = children || [];
        }
        /**
         * Sets an arbitrary attribute on the span. Warning: use this wisely. Not
         * all browsers support attributes the same, and having too many custom
         * attributes is probably bad.
         */


        var _proto = Span.prototype;

        _proto.setAttribute = function setAttribute(attribute, value) {
          this.attributes[attribute] = value;
        };

        _proto.hasClass = function hasClass(className) {
          return utils.contains(this.classes, className);
        };

        _proto.toNode = function toNode() {
          return _toNode.call(this, "span");
        };

        _proto.toMarkup = function toMarkup() {
          return _toMarkup.call(this, "span");
        };

        return Span;
      }();
      /**
       * This node represents an anchor (<a>) element with a hyperlink.  See `span`
       * for further details.
       */


      var domTree_Anchor =
      /*#__PURE__*/
      function () {
        function Anchor(href, classes, children, options) {
          this.children = void 0;
          this.attributes = void 0;
          this.classes = void 0;
          this.height = void 0;
          this.depth = void 0;
          this.maxFontSize = void 0;
          this.style = void 0;
          initNode.call(this, classes, options);
          this.children = children || [];
          this.setAttribute('href', href);
        }

        var _proto2 = Anchor.prototype;

        _proto2.setAttribute = function setAttribute(attribute, value) {
          this.attributes[attribute] = value;
        };

        _proto2.hasClass = function hasClass(className) {
          return utils.contains(this.classes, className);
        };

        _proto2.toNode = function toNode() {
          return _toNode.call(this, "a");
        };

        _proto2.toMarkup = function toMarkup() {
          return _toMarkup.call(this, "a");
        };

        return Anchor;
      }();
      /**
       * This node represents an image embed (<img>) element.
       */


      var domTree_Img =
      /*#__PURE__*/
      function () {
        function Img(src, alt, style) {
          this.src = void 0;
          this.alt = void 0;
          this.classes = void 0;
          this.height = void 0;
          this.depth = void 0;
          this.maxFontSize = void 0;
          this.style = void 0;
          this.alt = alt;
          this.src = src;
          this.classes = ["mord"];
          this.style = style;
        }

        var _proto3 = Img.prototype;

        _proto3.hasClass = function hasClass(className) {
          return utils.contains(this.classes, className);
        };

        _proto3.toNode = function toNode() {
          var node = document.createElement("img");
          node.src = this.src;
          node.alt = this.alt;
          node.className = "mord"; // Apply inline styles

          for (var style in this.style) {
            if (this.style.hasOwnProperty(style)) {
              // $FlowFixMe
              node.style[style] = this.style[style];
            }
          }

          return node;
        };

        _proto3.toMarkup = function toMarkup() {
          var markup = "<img  src='" + this.src + " 'alt='" + this.alt + "' "; // Add the styles, after hyphenation

          var styles = "";

          for (var style in this.style) {
            if (this.style.hasOwnProperty(style)) {
              styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
            }
          }

          if (styles) {
            markup += " style=\"" + utils.escape(styles) + "\"";
          }

          markup += "'/>";
          return markup;
        };

        return Img;
      }();

      var iCombinations = {
        'î': "\u0131\u0302",
        'ï': "\u0131\u0308",
        'í': "\u0131\u0301",
        // 'ī': '\u0131\u0304', // enable when we add Extended Latin
        'ì': "\u0131\u0300"
      };
      /**
       * A symbol node contains information about a single symbol. It either renders
       * to a single text node, or a span with a single text node in it, depending on
       * whether it has CSS classes, styles, or needs italic correction.
       */

      var domTree_SymbolNode =
      /*#__PURE__*/
      function () {
        function SymbolNode(text, height, depth, italic, skew, width, classes, style) {
          this.text = void 0;
          this.height = void 0;
          this.depth = void 0;
          this.italic = void 0;
          this.skew = void 0;
          this.width = void 0;
          this.maxFontSize = void 0;
          this.classes = void 0;
          this.style = void 0;
          this.text = text;
          this.height = height || 0;
          this.depth = depth || 0;
          this.italic = italic || 0;
          this.skew = skew || 0;
          this.width = width || 0;
          this.classes = classes || [];
          this.style = style || {};
          this.maxFontSize = 0; // Mark text from non-Latin scripts with specific classes so that we
          // can specify which fonts to use.  This allows us to render these
          // characters with a serif font in situations where the browser would
          // either default to a sans serif or render a placeholder character.
          // We use CSS class names like cjk_fallback, hangul_fallback and
          // brahmic_fallback. See ./unicodeScripts.js for the set of possible
          // script names

          var script = scriptFromCodepoint(this.text.charCodeAt(0));

          if (script) {
            this.classes.push(script + "_fallback");
          }

          if (/[îïíì]/.test(this.text)) {
            // add ī when we add Extended Latin
            this.text = iCombinations[this.text];
          }
        }

        var _proto4 = SymbolNode.prototype;

        _proto4.hasClass = function hasClass(className) {
          return utils.contains(this.classes, className);
        }
        /**
         * Creates a text node or span from a symbol node. Note that a span is only
         * created if it is needed.
         */
        ;

        _proto4.toNode = function toNode() {
          var node = document.createTextNode(this.text);
          var span = null;

          if (this.italic > 0) {
            span = document.createElement("span");
            span.style.marginRight = this.italic + "em";
          }

          if (this.classes.length > 0) {
            span = span || document.createElement("span");
            span.className = createClass(this.classes);
          }

          for (var style in this.style) {
            if (this.style.hasOwnProperty(style)) {
              span = span || document.createElement("span"); // $FlowFixMe Flow doesn't seem to understand span.style's type.

              span.style[style] = this.style[style];
            }
          }

          if (span) {
            span.appendChild(node);
            return span;
          } else {
            return node;
          }
        }
        /**
         * Creates markup for a symbol node.
         */
        ;

        _proto4.toMarkup = function toMarkup() {
          // TODO(alpert): More duplication than I'd like from
          // span.prototype.toMarkup and symbolNode.prototype.toNode...
          var needsSpan = false;
          var markup = "<span";

          if (this.classes.length) {
            needsSpan = true;
            markup += " class=\"";
            markup += utils.escape(createClass(this.classes));
            markup += "\"";
          }

          var styles = "";

          if (this.italic > 0) {
            styles += "margin-right:" + this.italic + "em;";
          }

          for (var style in this.style) {
            if (this.style.hasOwnProperty(style)) {
              styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
            }
          }

          if (styles) {
            needsSpan = true;
            markup += " style=\"" + utils.escape(styles) + "\"";
          }

          var escaped = utils.escape(this.text);

          if (needsSpan) {
            markup += ">";
            markup += escaped;
            markup += "</span>";
            return markup;
          } else {
            return escaped;
          }
        };

        return SymbolNode;
      }();
      /**
       * SVG nodes are used to render stretchy wide elements.
       */


      var SvgNode =
      /*#__PURE__*/
      function () {
        function SvgNode(children, attributes) {
          this.children = void 0;
          this.attributes = void 0;
          this.children = children || [];
          this.attributes = attributes || {};
        }

        var _proto5 = SvgNode.prototype;

        _proto5.toNode = function toNode() {
          var svgNS = "http://www.w3.org/2000/svg";
          var node = document.createElementNS(svgNS, "svg"); // Apply attributes

          for (var attr in this.attributes) {
            if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
              node.setAttribute(attr, this.attributes[attr]);
            }
          }

          for (var i = 0; i < this.children.length; i++) {
            node.appendChild(this.children[i].toNode());
          }

          return node;
        };

        _proto5.toMarkup = function toMarkup() {
          var markup = "<svg"; // Apply attributes

          for (var attr in this.attributes) {
            if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
              markup += " " + attr + "='" + this.attributes[attr] + "'";
            }
          }

          markup += ">";

          for (var i = 0; i < this.children.length; i++) {
            markup += this.children[i].toMarkup();
          }

          markup += "</svg>";
          return markup;
        };

        return SvgNode;
      }();

      var domTree_PathNode =
      /*#__PURE__*/
      function () {
        function PathNode(pathName, alternate) {
          this.pathName = void 0;
          this.alternate = void 0;
          this.pathName = pathName;
          this.alternate = alternate; // Used only for tall \sqrt
        }

        var _proto6 = PathNode.prototype;

        _proto6.toNode = function toNode() {
          var svgNS = "http://www.w3.org/2000/svg";
          var node = document.createElementNS(svgNS, "path");

          if (this.alternate) {
            node.setAttribute("d", this.alternate);
          } else {
            node.setAttribute("d", svgGeometry.path[this.pathName]);
          }

          return node;
        };

        _proto6.toMarkup = function toMarkup() {
          if (this.alternate) {
            return "<path d='" + this.alternate + "'/>";
          } else {
            return "<path d='" + svgGeometry.path[this.pathName] + "'/>";
          }
        };

        return PathNode;
      }();

      var LineNode =
      /*#__PURE__*/
      function () {
        function LineNode(attributes) {
          this.attributes = void 0;
          this.attributes = attributes || {};
        }

        var _proto7 = LineNode.prototype;

        _proto7.toNode = function toNode() {
          var svgNS = "http://www.w3.org/2000/svg";
          var node = document.createElementNS(svgNS, "line"); // Apply attributes

          for (var attr in this.attributes) {
            if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
              node.setAttribute(attr, this.attributes[attr]);
            }
          }

          return node;
        };

        _proto7.toMarkup = function toMarkup() {
          var markup = "<line";

          for (var attr in this.attributes) {
            if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
              markup += " " + attr + "='" + this.attributes[attr] + "'";
            }
          }

          markup += "/>";
          return markup;
        };

        return LineNode;
      }();

      function assertSymbolDomNode(group) {
        if (group instanceof domTree_SymbolNode) {
          return group;
        } else {
          throw new Error("Expected symbolNode but got " + String(group) + ".");
        }
      }

      function assertSpan(group) {
        if (group instanceof domTree_Span) {
          return group;
        } else {
          throw new Error("Expected span<HtmlDomNode> but got " + String(group) + ".");
        }
      } // CONCATENATED MODULE: ./submodules/katex-fonts/fontMetricsData.js
      // This file is GENERATED by buildMetrics.sh. DO NOT MODIFY.

      /* harmony default export */


      var fontMetricsData = {
        "AMS-Regular": {
          "65": [0, 0.68889, 0, 0, 0.72222],
          "66": [0, 0.68889, 0, 0, 0.66667],
          "67": [0, 0.68889, 0, 0, 0.72222],
          "68": [0, 0.68889, 0, 0, 0.72222],
          "69": [0, 0.68889, 0, 0, 0.66667],
          "70": [0, 0.68889, 0, 0, 0.61111],
          "71": [0, 0.68889, 0, 0, 0.77778],
          "72": [0, 0.68889, 0, 0, 0.77778],
          "73": [0, 0.68889, 0, 0, 0.38889],
          "74": [0.16667, 0.68889, 0, 0, 0.5],
          "75": [0, 0.68889, 0, 0, 0.77778],
          "76": [0, 0.68889, 0, 0, 0.66667],
          "77": [0, 0.68889, 0, 0, 0.94445],
          "78": [0, 0.68889, 0, 0, 0.72222],
          "79": [0.16667, 0.68889, 0, 0, 0.77778],
          "80": [0, 0.68889, 0, 0, 0.61111],
          "81": [0.16667, 0.68889, 0, 0, 0.77778],
          "82": [0, 0.68889, 0, 0, 0.72222],
          "83": [0, 0.68889, 0, 0, 0.55556],
          "84": [0, 0.68889, 0, 0, 0.66667],
          "85": [0, 0.68889, 0, 0, 0.72222],
          "86": [0, 0.68889, 0, 0, 0.72222],
          "87": [0, 0.68889, 0, 0, 1.0],
          "88": [0, 0.68889, 0, 0, 0.72222],
          "89": [0, 0.68889, 0, 0, 0.72222],
          "90": [0, 0.68889, 0, 0, 0.66667],
          "107": [0, 0.68889, 0, 0, 0.55556],
          "165": [0, 0.675, 0.025, 0, 0.75],
          "174": [0.15559, 0.69224, 0, 0, 0.94666],
          "240": [0, 0.68889, 0, 0, 0.55556],
          "295": [0, 0.68889, 0, 0, 0.54028],
          "710": [0, 0.825, 0, 0, 2.33334],
          "732": [0, 0.9, 0, 0, 2.33334],
          "770": [0, 0.825, 0, 0, 2.33334],
          "771": [0, 0.9, 0, 0, 2.33334],
          "989": [0.08167, 0.58167, 0, 0, 0.77778],
          "1008": [0, 0.43056, 0.04028, 0, 0.66667],
          "8245": [0, 0.54986, 0, 0, 0.275],
          "8463": [0, 0.68889, 0, 0, 0.54028],
          "8487": [0, 0.68889, 0, 0, 0.72222],
          "8498": [0, 0.68889, 0, 0, 0.55556],
          "8502": [0, 0.68889, 0, 0, 0.66667],
          "8503": [0, 0.68889, 0, 0, 0.44445],
          "8504": [0, 0.68889, 0, 0, 0.66667],
          "8513": [0, 0.68889, 0, 0, 0.63889],
          "8592": [-0.03598, 0.46402, 0, 0, 0.5],
          "8594": [-0.03598, 0.46402, 0, 0, 0.5],
          "8602": [-0.13313, 0.36687, 0, 0, 1.0],
          "8603": [-0.13313, 0.36687, 0, 0, 1.0],
          "8606": [0.01354, 0.52239, 0, 0, 1.0],
          "8608": [0.01354, 0.52239, 0, 0, 1.0],
          "8610": [0.01354, 0.52239, 0, 0, 1.11111],
          "8611": [0.01354, 0.52239, 0, 0, 1.11111],
          "8619": [0, 0.54986, 0, 0, 1.0],
          "8620": [0, 0.54986, 0, 0, 1.0],
          "8621": [-0.13313, 0.37788, 0, 0, 1.38889],
          "8622": [-0.13313, 0.36687, 0, 0, 1.0],
          "8624": [0, 0.69224, 0, 0, 0.5],
          "8625": [0, 0.69224, 0, 0, 0.5],
          "8630": [0, 0.43056, 0, 0, 1.0],
          "8631": [0, 0.43056, 0, 0, 1.0],
          "8634": [0.08198, 0.58198, 0, 0, 0.77778],
          "8635": [0.08198, 0.58198, 0, 0, 0.77778],
          "8638": [0.19444, 0.69224, 0, 0, 0.41667],
          "8639": [0.19444, 0.69224, 0, 0, 0.41667],
          "8642": [0.19444, 0.69224, 0, 0, 0.41667],
          "8643": [0.19444, 0.69224, 0, 0, 0.41667],
          "8644": [0.1808, 0.675, 0, 0, 1.0],
          "8646": [0.1808, 0.675, 0, 0, 1.0],
          "8647": [0.1808, 0.675, 0, 0, 1.0],
          "8648": [0.19444, 0.69224, 0, 0, 0.83334],
          "8649": [0.1808, 0.675, 0, 0, 1.0],
          "8650": [0.19444, 0.69224, 0, 0, 0.83334],
          "8651": [0.01354, 0.52239, 0, 0, 1.0],
          "8652": [0.01354, 0.52239, 0, 0, 1.0],
          "8653": [-0.13313, 0.36687, 0, 0, 1.0],
          "8654": [-0.13313, 0.36687, 0, 0, 1.0],
          "8655": [-0.13313, 0.36687, 0, 0, 1.0],
          "8666": [0.13667, 0.63667, 0, 0, 1.0],
          "8667": [0.13667, 0.63667, 0, 0, 1.0],
          "8669": [-0.13313, 0.37788, 0, 0, 1.0],
          "8672": [-0.064, 0.437, 0, 0, 1.334],
          "8674": [-0.064, 0.437, 0, 0, 1.334],
          "8705": [0, 0.825, 0, 0, 0.5],
          "8708": [0, 0.68889, 0, 0, 0.55556],
          "8709": [0.08167, 0.58167, 0, 0, 0.77778],
          "8717": [0, 0.43056, 0, 0, 0.42917],
          "8722": [-0.03598, 0.46402, 0, 0, 0.5],
          "8724": [0.08198, 0.69224, 0, 0, 0.77778],
          "8726": [0.08167, 0.58167, 0, 0, 0.77778],
          "8733": [0, 0.69224, 0, 0, 0.77778],
          "8736": [0, 0.69224, 0, 0, 0.72222],
          "8737": [0, 0.69224, 0, 0, 0.72222],
          "8738": [0.03517, 0.52239, 0, 0, 0.72222],
          "8739": [0.08167, 0.58167, 0, 0, 0.22222],
          "8740": [0.25142, 0.74111, 0, 0, 0.27778],
          "8741": [0.08167, 0.58167, 0, 0, 0.38889],
          "8742": [0.25142, 0.74111, 0, 0, 0.5],
          "8756": [0, 0.69224, 0, 0, 0.66667],
          "8757": [0, 0.69224, 0, 0, 0.66667],
          "8764": [-0.13313, 0.36687, 0, 0, 0.77778],
          "8765": [-0.13313, 0.37788, 0, 0, 0.77778],
          "8769": [-0.13313, 0.36687, 0, 0, 0.77778],
          "8770": [-0.03625, 0.46375, 0, 0, 0.77778],
          "8774": [0.30274, 0.79383, 0, 0, 0.77778],
          "8776": [-0.01688, 0.48312, 0, 0, 0.77778],
          "8778": [0.08167, 0.58167, 0, 0, 0.77778],
          "8782": [0.06062, 0.54986, 0, 0, 0.77778],
          "8783": [0.06062, 0.54986, 0, 0, 0.77778],
          "8785": [0.08198, 0.58198, 0, 0, 0.77778],
          "8786": [0.08198, 0.58198, 0, 0, 0.77778],
          "8787": [0.08198, 0.58198, 0, 0, 0.77778],
          "8790": [0, 0.69224, 0, 0, 0.77778],
          "8791": [0.22958, 0.72958, 0, 0, 0.77778],
          "8796": [0.08198, 0.91667, 0, 0, 0.77778],
          "8806": [0.25583, 0.75583, 0, 0, 0.77778],
          "8807": [0.25583, 0.75583, 0, 0, 0.77778],
          "8808": [0.25142, 0.75726, 0, 0, 0.77778],
          "8809": [0.25142, 0.75726, 0, 0, 0.77778],
          "8812": [0.25583, 0.75583, 0, 0, 0.5],
          "8814": [0.20576, 0.70576, 0, 0, 0.77778],
          "8815": [0.20576, 0.70576, 0, 0, 0.77778],
          "8816": [0.30274, 0.79383, 0, 0, 0.77778],
          "8817": [0.30274, 0.79383, 0, 0, 0.77778],
          "8818": [0.22958, 0.72958, 0, 0, 0.77778],
          "8819": [0.22958, 0.72958, 0, 0, 0.77778],
          "8822": [0.1808, 0.675, 0, 0, 0.77778],
          "8823": [0.1808, 0.675, 0, 0, 0.77778],
          "8828": [0.13667, 0.63667, 0, 0, 0.77778],
          "8829": [0.13667, 0.63667, 0, 0, 0.77778],
          "8830": [0.22958, 0.72958, 0, 0, 0.77778],
          "8831": [0.22958, 0.72958, 0, 0, 0.77778],
          "8832": [0.20576, 0.70576, 0, 0, 0.77778],
          "8833": [0.20576, 0.70576, 0, 0, 0.77778],
          "8840": [0.30274, 0.79383, 0, 0, 0.77778],
          "8841": [0.30274, 0.79383, 0, 0, 0.77778],
          "8842": [0.13597, 0.63597, 0, 0, 0.77778],
          "8843": [0.13597, 0.63597, 0, 0, 0.77778],
          "8847": [0.03517, 0.54986, 0, 0, 0.77778],
          "8848": [0.03517, 0.54986, 0, 0, 0.77778],
          "8858": [0.08198, 0.58198, 0, 0, 0.77778],
          "8859": [0.08198, 0.58198, 0, 0, 0.77778],
          "8861": [0.08198, 0.58198, 0, 0, 0.77778],
          "8862": [0, 0.675, 0, 0, 0.77778],
          "8863": [0, 0.675, 0, 0, 0.77778],
          "8864": [0, 0.675, 0, 0, 0.77778],
          "8865": [0, 0.675, 0, 0, 0.77778],
          "8872": [0, 0.69224, 0, 0, 0.61111],
          "8873": [0, 0.69224, 0, 0, 0.72222],
          "8874": [0, 0.69224, 0, 0, 0.88889],
          "8876": [0, 0.68889, 0, 0, 0.61111],
          "8877": [0, 0.68889, 0, 0, 0.61111],
          "8878": [0, 0.68889, 0, 0, 0.72222],
          "8879": [0, 0.68889, 0, 0, 0.72222],
          "8882": [0.03517, 0.54986, 0, 0, 0.77778],
          "8883": [0.03517, 0.54986, 0, 0, 0.77778],
          "8884": [0.13667, 0.63667, 0, 0, 0.77778],
          "8885": [0.13667, 0.63667, 0, 0, 0.77778],
          "8888": [0, 0.54986, 0, 0, 1.11111],
          "8890": [0.19444, 0.43056, 0, 0, 0.55556],
          "8891": [0.19444, 0.69224, 0, 0, 0.61111],
          "8892": [0.19444, 0.69224, 0, 0, 0.61111],
          "8901": [0, 0.54986, 0, 0, 0.27778],
          "8903": [0.08167, 0.58167, 0, 0, 0.77778],
          "8905": [0.08167, 0.58167, 0, 0, 0.77778],
          "8906": [0.08167, 0.58167, 0, 0, 0.77778],
          "8907": [0, 0.69224, 0, 0, 0.77778],
          "8908": [0, 0.69224, 0, 0, 0.77778],
          "8909": [-0.03598, 0.46402, 0, 0, 0.77778],
          "8910": [0, 0.54986, 0, 0, 0.76042],
          "8911": [0, 0.54986, 0, 0, 0.76042],
          "8912": [0.03517, 0.54986, 0, 0, 0.77778],
          "8913": [0.03517, 0.54986, 0, 0, 0.77778],
          "8914": [0, 0.54986, 0, 0, 0.66667],
          "8915": [0, 0.54986, 0, 0, 0.66667],
          "8916": [0, 0.69224, 0, 0, 0.66667],
          "8918": [0.0391, 0.5391, 0, 0, 0.77778],
          "8919": [0.0391, 0.5391, 0, 0, 0.77778],
          "8920": [0.03517, 0.54986, 0, 0, 1.33334],
          "8921": [0.03517, 0.54986, 0, 0, 1.33334],
          "8922": [0.38569, 0.88569, 0, 0, 0.77778],
          "8923": [0.38569, 0.88569, 0, 0, 0.77778],
          "8926": [0.13667, 0.63667, 0, 0, 0.77778],
          "8927": [0.13667, 0.63667, 0, 0, 0.77778],
          "8928": [0.30274, 0.79383, 0, 0, 0.77778],
          "8929": [0.30274, 0.79383, 0, 0, 0.77778],
          "8934": [0.23222, 0.74111, 0, 0, 0.77778],
          "8935": [0.23222, 0.74111, 0, 0, 0.77778],
          "8936": [0.23222, 0.74111, 0, 0, 0.77778],
          "8937": [0.23222, 0.74111, 0, 0, 0.77778],
          "8938": [0.20576, 0.70576, 0, 0, 0.77778],
          "8939": [0.20576, 0.70576, 0, 0, 0.77778],
          "8940": [0.30274, 0.79383, 0, 0, 0.77778],
          "8941": [0.30274, 0.79383, 0, 0, 0.77778],
          "8994": [0.19444, 0.69224, 0, 0, 0.77778],
          "8995": [0.19444, 0.69224, 0, 0, 0.77778],
          "9416": [0.15559, 0.69224, 0, 0, 0.90222],
          "9484": [0, 0.69224, 0, 0, 0.5],
          "9488": [0, 0.69224, 0, 0, 0.5],
          "9492": [0, 0.37788, 0, 0, 0.5],
          "9496": [0, 0.37788, 0, 0, 0.5],
          "9585": [0.19444, 0.68889, 0, 0, 0.88889],
          "9586": [0.19444, 0.74111, 0, 0, 0.88889],
          "9632": [0, 0.675, 0, 0, 0.77778],
          "9633": [0, 0.675, 0, 0, 0.77778],
          "9650": [0, 0.54986, 0, 0, 0.72222],
          "9651": [0, 0.54986, 0, 0, 0.72222],
          "9654": [0.03517, 0.54986, 0, 0, 0.77778],
          "9660": [0, 0.54986, 0, 0, 0.72222],
          "9661": [0, 0.54986, 0, 0, 0.72222],
          "9664": [0.03517, 0.54986, 0, 0, 0.77778],
          "9674": [0.11111, 0.69224, 0, 0, 0.66667],
          "9733": [0.19444, 0.69224, 0, 0, 0.94445],
          "10003": [0, 0.69224, 0, 0, 0.83334],
          "10016": [0, 0.69224, 0, 0, 0.83334],
          "10731": [0.11111, 0.69224, 0, 0, 0.66667],
          "10846": [0.19444, 0.75583, 0, 0, 0.61111],
          "10877": [0.13667, 0.63667, 0, 0, 0.77778],
          "10878": [0.13667, 0.63667, 0, 0, 0.77778],
          "10885": [0.25583, 0.75583, 0, 0, 0.77778],
          "10886": [0.25583, 0.75583, 0, 0, 0.77778],
          "10887": [0.13597, 0.63597, 0, 0, 0.77778],
          "10888": [0.13597, 0.63597, 0, 0, 0.77778],
          "10889": [0.26167, 0.75726, 0, 0, 0.77778],
          "10890": [0.26167, 0.75726, 0, 0, 0.77778],
          "10891": [0.48256, 0.98256, 0, 0, 0.77778],
          "10892": [0.48256, 0.98256, 0, 0, 0.77778],
          "10901": [0.13667, 0.63667, 0, 0, 0.77778],
          "10902": [0.13667, 0.63667, 0, 0, 0.77778],
          "10933": [0.25142, 0.75726, 0, 0, 0.77778],
          "10934": [0.25142, 0.75726, 0, 0, 0.77778],
          "10935": [0.26167, 0.75726, 0, 0, 0.77778],
          "10936": [0.26167, 0.75726, 0, 0, 0.77778],
          "10937": [0.26167, 0.75726, 0, 0, 0.77778],
          "10938": [0.26167, 0.75726, 0, 0, 0.77778],
          "10949": [0.25583, 0.75583, 0, 0, 0.77778],
          "10950": [0.25583, 0.75583, 0, 0, 0.77778],
          "10955": [0.28481, 0.79383, 0, 0, 0.77778],
          "10956": [0.28481, 0.79383, 0, 0, 0.77778],
          "57350": [0.08167, 0.58167, 0, 0, 0.22222],
          "57351": [0.08167, 0.58167, 0, 0, 0.38889],
          "57352": [0.08167, 0.58167, 0, 0, 0.77778],
          "57353": [0, 0.43056, 0.04028, 0, 0.66667],
          "57356": [0.25142, 0.75726, 0, 0, 0.77778],
          "57357": [0.25142, 0.75726, 0, 0, 0.77778],
          "57358": [0.41951, 0.91951, 0, 0, 0.77778],
          "57359": [0.30274, 0.79383, 0, 0, 0.77778],
          "57360": [0.30274, 0.79383, 0, 0, 0.77778],
          "57361": [0.41951, 0.91951, 0, 0, 0.77778],
          "57366": [0.25142, 0.75726, 0, 0, 0.77778],
          "57367": [0.25142, 0.75726, 0, 0, 0.77778],
          "57368": [0.25142, 0.75726, 0, 0, 0.77778],
          "57369": [0.25142, 0.75726, 0, 0, 0.77778],
          "57370": [0.13597, 0.63597, 0, 0, 0.77778],
          "57371": [0.13597, 0.63597, 0, 0, 0.77778]
        },
        "Caligraphic-Regular": {
          "48": [0, 0.43056, 0, 0, 0.5],
          "49": [0, 0.43056, 0, 0, 0.5],
          "50": [0, 0.43056, 0, 0, 0.5],
          "51": [0.19444, 0.43056, 0, 0, 0.5],
          "52": [0.19444, 0.43056, 0, 0, 0.5],
          "53": [0.19444, 0.43056, 0, 0, 0.5],
          "54": [0, 0.64444, 0, 0, 0.5],
          "55": [0.19444, 0.43056, 0, 0, 0.5],
          "56": [0, 0.64444, 0, 0, 0.5],
          "57": [0.19444, 0.43056, 0, 0, 0.5],
          "65": [0, 0.68333, 0, 0.19445, 0.79847],
          "66": [0, 0.68333, 0.03041, 0.13889, 0.65681],
          "67": [0, 0.68333, 0.05834, 0.13889, 0.52653],
          "68": [0, 0.68333, 0.02778, 0.08334, 0.77139],
          "69": [0, 0.68333, 0.08944, 0.11111, 0.52778],
          "70": [0, 0.68333, 0.09931, 0.11111, 0.71875],
          "71": [0.09722, 0.68333, 0.0593, 0.11111, 0.59487],
          "72": [0, 0.68333, 0.00965, 0.11111, 0.84452],
          "73": [0, 0.68333, 0.07382, 0, 0.54452],
          "74": [0.09722, 0.68333, 0.18472, 0.16667, 0.67778],
          "75": [0, 0.68333, 0.01445, 0.05556, 0.76195],
          "76": [0, 0.68333, 0, 0.13889, 0.68972],
          "77": [0, 0.68333, 0, 0.13889, 1.2009],
          "78": [0, 0.68333, 0.14736, 0.08334, 0.82049],
          "79": [0, 0.68333, 0.02778, 0.11111, 0.79611],
          "80": [0, 0.68333, 0.08222, 0.08334, 0.69556],
          "81": [0.09722, 0.68333, 0, 0.11111, 0.81667],
          "82": [0, 0.68333, 0, 0.08334, 0.8475],
          "83": [0, 0.68333, 0.075, 0.13889, 0.60556],
          "84": [0, 0.68333, 0.25417, 0, 0.54464],
          "85": [0, 0.68333, 0.09931, 0.08334, 0.62583],
          "86": [0, 0.68333, 0.08222, 0, 0.61278],
          "87": [0, 0.68333, 0.08222, 0.08334, 0.98778],
          "88": [0, 0.68333, 0.14643, 0.13889, 0.7133],
          "89": [0.09722, 0.68333, 0.08222, 0.08334, 0.66834],
          "90": [0, 0.68333, 0.07944, 0.13889, 0.72473]
        },
        "Fraktur-Regular": {
          "33": [0, 0.69141, 0, 0, 0.29574],
          "34": [0, 0.69141, 0, 0, 0.21471],
          "38": [0, 0.69141, 0, 0, 0.73786],
          "39": [0, 0.69141, 0, 0, 0.21201],
          "40": [0.24982, 0.74947, 0, 0, 0.38865],
          "41": [0.24982, 0.74947, 0, 0, 0.38865],
          "42": [0, 0.62119, 0, 0, 0.27764],
          "43": [0.08319, 0.58283, 0, 0, 0.75623],
          "44": [0, 0.10803, 0, 0, 0.27764],
          "45": [0.08319, 0.58283, 0, 0, 0.75623],
          "46": [0, 0.10803, 0, 0, 0.27764],
          "47": [0.24982, 0.74947, 0, 0, 0.50181],
          "48": [0, 0.47534, 0, 0, 0.50181],
          "49": [0, 0.47534, 0, 0, 0.50181],
          "50": [0, 0.47534, 0, 0, 0.50181],
          "51": [0.18906, 0.47534, 0, 0, 0.50181],
          "52": [0.18906, 0.47534, 0, 0, 0.50181],
          "53": [0.18906, 0.47534, 0, 0, 0.50181],
          "54": [0, 0.69141, 0, 0, 0.50181],
          "55": [0.18906, 0.47534, 0, 0, 0.50181],
          "56": [0, 0.69141, 0, 0, 0.50181],
          "57": [0.18906, 0.47534, 0, 0, 0.50181],
          "58": [0, 0.47534, 0, 0, 0.21606],
          "59": [0.12604, 0.47534, 0, 0, 0.21606],
          "61": [-0.13099, 0.36866, 0, 0, 0.75623],
          "63": [0, 0.69141, 0, 0, 0.36245],
          "65": [0, 0.69141, 0, 0, 0.7176],
          "66": [0, 0.69141, 0, 0, 0.88397],
          "67": [0, 0.69141, 0, 0, 0.61254],
          "68": [0, 0.69141, 0, 0, 0.83158],
          "69": [0, 0.69141, 0, 0, 0.66278],
          "70": [0.12604, 0.69141, 0, 0, 0.61119],
          "71": [0, 0.69141, 0, 0, 0.78539],
          "72": [0.06302, 0.69141, 0, 0, 0.7203],
          "73": [0, 0.69141, 0, 0, 0.55448],
          "74": [0.12604, 0.69141, 0, 0, 0.55231],
          "75": [0, 0.69141, 0, 0, 0.66845],
          "76": [0, 0.69141, 0, 0, 0.66602],
          "77": [0, 0.69141, 0, 0, 1.04953],
          "78": [0, 0.69141, 0, 0, 0.83212],
          "79": [0, 0.69141, 0, 0, 0.82699],
          "80": [0.18906, 0.69141, 0, 0, 0.82753],
          "81": [0.03781, 0.69141, 0, 0, 0.82699],
          "82": [0, 0.69141, 0, 0, 0.82807],
          "83": [0, 0.69141, 0, 0, 0.82861],
          "84": [0, 0.69141, 0, 0, 0.66899],
          "85": [0, 0.69141, 0, 0, 0.64576],
          "86": [0, 0.69141, 0, 0, 0.83131],
          "87": [0, 0.69141, 0, 0, 1.04602],
          "88": [0, 0.69141, 0, 0, 0.71922],
          "89": [0.18906, 0.69141, 0, 0, 0.83293],
          "90": [0.12604, 0.69141, 0, 0, 0.60201],
          "91": [0.24982, 0.74947, 0, 0, 0.27764],
          "93": [0.24982, 0.74947, 0, 0, 0.27764],
          "94": [0, 0.69141, 0, 0, 0.49965],
          "97": [0, 0.47534, 0, 0, 0.50046],
          "98": [0, 0.69141, 0, 0, 0.51315],
          "99": [0, 0.47534, 0, 0, 0.38946],
          "100": [0, 0.62119, 0, 0, 0.49857],
          "101": [0, 0.47534, 0, 0, 0.40053],
          "102": [0.18906, 0.69141, 0, 0, 0.32626],
          "103": [0.18906, 0.47534, 0, 0, 0.5037],
          "104": [0.18906, 0.69141, 0, 0, 0.52126],
          "105": [0, 0.69141, 0, 0, 0.27899],
          "106": [0, 0.69141, 0, 0, 0.28088],
          "107": [0, 0.69141, 0, 0, 0.38946],
          "108": [0, 0.69141, 0, 0, 0.27953],
          "109": [0, 0.47534, 0, 0, 0.76676],
          "110": [0, 0.47534, 0, 0, 0.52666],
          "111": [0, 0.47534, 0, 0, 0.48885],
          "112": [0.18906, 0.52396, 0, 0, 0.50046],
          "113": [0.18906, 0.47534, 0, 0, 0.48912],
          "114": [0, 0.47534, 0, 0, 0.38919],
          "115": [0, 0.47534, 0, 0, 0.44266],
          "116": [0, 0.62119, 0, 0, 0.33301],
          "117": [0, 0.47534, 0, 0, 0.5172],
          "118": [0, 0.52396, 0, 0, 0.5118],
          "119": [0, 0.52396, 0, 0, 0.77351],
          "120": [0.18906, 0.47534, 0, 0, 0.38865],
          "121": [0.18906, 0.47534, 0, 0, 0.49884],
          "122": [0.18906, 0.47534, 0, 0, 0.39054],
          "8216": [0, 0.69141, 0, 0, 0.21471],
          "8217": [0, 0.69141, 0, 0, 0.21471],
          "58112": [0, 0.62119, 0, 0, 0.49749],
          "58113": [0, 0.62119, 0, 0, 0.4983],
          "58114": [0.18906, 0.69141, 0, 0, 0.33328],
          "58115": [0.18906, 0.69141, 0, 0, 0.32923],
          "58116": [0.18906, 0.47534, 0, 0, 0.50343],
          "58117": [0, 0.69141, 0, 0, 0.33301],
          "58118": [0, 0.62119, 0, 0, 0.33409],
          "58119": [0, 0.47534, 0, 0, 0.50073]
        },
        "Main-Bold": {
          "33": [0, 0.69444, 0, 0, 0.35],
          "34": [0, 0.69444, 0, 0, 0.60278],
          "35": [0.19444, 0.69444, 0, 0, 0.95833],
          "36": [0.05556, 0.75, 0, 0, 0.575],
          "37": [0.05556, 0.75, 0, 0, 0.95833],
          "38": [0, 0.69444, 0, 0, 0.89444],
          "39": [0, 0.69444, 0, 0, 0.31944],
          "40": [0.25, 0.75, 0, 0, 0.44722],
          "41": [0.25, 0.75, 0, 0, 0.44722],
          "42": [0, 0.75, 0, 0, 0.575],
          "43": [0.13333, 0.63333, 0, 0, 0.89444],
          "44": [0.19444, 0.15556, 0, 0, 0.31944],
          "45": [0, 0.44444, 0, 0, 0.38333],
          "46": [0, 0.15556, 0, 0, 0.31944],
          "47": [0.25, 0.75, 0, 0, 0.575],
          "48": [0, 0.64444, 0, 0, 0.575],
          "49": [0, 0.64444, 0, 0, 0.575],
          "50": [0, 0.64444, 0, 0, 0.575],
          "51": [0, 0.64444, 0, 0, 0.575],
          "52": [0, 0.64444, 0, 0, 0.575],
          "53": [0, 0.64444, 0, 0, 0.575],
          "54": [0, 0.64444, 0, 0, 0.575],
          "55": [0, 0.64444, 0, 0, 0.575],
          "56": [0, 0.64444, 0, 0, 0.575],
          "57": [0, 0.64444, 0, 0, 0.575],
          "58": [0, 0.44444, 0, 0, 0.31944],
          "59": [0.19444, 0.44444, 0, 0, 0.31944],
          "60": [0.08556, 0.58556, 0, 0, 0.89444],
          "61": [-0.10889, 0.39111, 0, 0, 0.89444],
          "62": [0.08556, 0.58556, 0, 0, 0.89444],
          "63": [0, 0.69444, 0, 0, 0.54305],
          "64": [0, 0.69444, 0, 0, 0.89444],
          "65": [0, 0.68611, 0, 0, 0.86944],
          "66": [0, 0.68611, 0, 0, 0.81805],
          "67": [0, 0.68611, 0, 0, 0.83055],
          "68": [0, 0.68611, 0, 0, 0.88194],
          "69": [0, 0.68611, 0, 0, 0.75555],
          "70": [0, 0.68611, 0, 0, 0.72361],
          "71": [0, 0.68611, 0, 0, 0.90416],
          "72": [0, 0.68611, 0, 0, 0.9],
          "73": [0, 0.68611, 0, 0, 0.43611],
          "74": [0, 0.68611, 0, 0, 0.59444],
          "75": [0, 0.68611, 0, 0, 0.90138],
          "76": [0, 0.68611, 0, 0, 0.69166],
          "77": [0, 0.68611, 0, 0, 1.09166],
          "78": [0, 0.68611, 0, 0, 0.9],
          "79": [0, 0.68611, 0, 0, 0.86388],
          "80": [0, 0.68611, 0, 0, 0.78611],
          "81": [0.19444, 0.68611, 0, 0, 0.86388],
          "82": [0, 0.68611, 0, 0, 0.8625],
          "83": [0, 0.68611, 0, 0, 0.63889],
          "84": [0, 0.68611, 0, 0, 0.8],
          "85": [0, 0.68611, 0, 0, 0.88472],
          "86": [0, 0.68611, 0.01597, 0, 0.86944],
          "87": [0, 0.68611, 0.01597, 0, 1.18888],
          "88": [0, 0.68611, 0, 0, 0.86944],
          "89": [0, 0.68611, 0.02875, 0, 0.86944],
          "90": [0, 0.68611, 0, 0, 0.70277],
          "91": [0.25, 0.75, 0, 0, 0.31944],
          "92": [0.25, 0.75, 0, 0, 0.575],
          "93": [0.25, 0.75, 0, 0, 0.31944],
          "94": [0, 0.69444, 0, 0, 0.575],
          "95": [0.31, 0.13444, 0.03194, 0, 0.575],
          "97": [0, 0.44444, 0, 0, 0.55902],
          "98": [0, 0.69444, 0, 0, 0.63889],
          "99": [0, 0.44444, 0, 0, 0.51111],
          "100": [0, 0.69444, 0, 0, 0.63889],
          "101": [0, 0.44444, 0, 0, 0.52708],
          "102": [0, 0.69444, 0.10903, 0, 0.35139],
          "103": [0.19444, 0.44444, 0.01597, 0, 0.575],
          "104": [0, 0.69444, 0, 0, 0.63889],
          "105": [0, 0.69444, 0, 0, 0.31944],
          "106": [0.19444, 0.69444, 0, 0, 0.35139],
          "107": [0, 0.69444, 0, 0, 0.60694],
          "108": [0, 0.69444, 0, 0, 0.31944],
          "109": [0, 0.44444, 0, 0, 0.95833],
          "110": [0, 0.44444, 0, 0, 0.63889],
          "111": [0, 0.44444, 0, 0, 0.575],
          "112": [0.19444, 0.44444, 0, 0, 0.63889],
          "113": [0.19444, 0.44444, 0, 0, 0.60694],
          "114": [0, 0.44444, 0, 0, 0.47361],
          "115": [0, 0.44444, 0, 0, 0.45361],
          "116": [0, 0.63492, 0, 0, 0.44722],
          "117": [0, 0.44444, 0, 0, 0.63889],
          "118": [0, 0.44444, 0.01597, 0, 0.60694],
          "119": [0, 0.44444, 0.01597, 0, 0.83055],
          "120": [0, 0.44444, 0, 0, 0.60694],
          "121": [0.19444, 0.44444, 0.01597, 0, 0.60694],
          "122": [0, 0.44444, 0, 0, 0.51111],
          "123": [0.25, 0.75, 0, 0, 0.575],
          "124": [0.25, 0.75, 0, 0, 0.31944],
          "125": [0.25, 0.75, 0, 0, 0.575],
          "126": [0.35, 0.34444, 0, 0, 0.575],
          "168": [0, 0.69444, 0, 0, 0.575],
          "172": [0, 0.44444, 0, 0, 0.76666],
          "176": [0, 0.69444, 0, 0, 0.86944],
          "177": [0.13333, 0.63333, 0, 0, 0.89444],
          "184": [0.17014, 0, 0, 0, 0.51111],
          "198": [0, 0.68611, 0, 0, 1.04166],
          "215": [0.13333, 0.63333, 0, 0, 0.89444],
          "216": [0.04861, 0.73472, 0, 0, 0.89444],
          "223": [0, 0.69444, 0, 0, 0.59722],
          "230": [0, 0.44444, 0, 0, 0.83055],
          "247": [0.13333, 0.63333, 0, 0, 0.89444],
          "248": [0.09722, 0.54167, 0, 0, 0.575],
          "305": [0, 0.44444, 0, 0, 0.31944],
          "338": [0, 0.68611, 0, 0, 1.16944],
          "339": [0, 0.44444, 0, 0, 0.89444],
          "567": [0.19444, 0.44444, 0, 0, 0.35139],
          "710": [0, 0.69444, 0, 0, 0.575],
          "711": [0, 0.63194, 0, 0, 0.575],
          "713": [0, 0.59611, 0, 0, 0.575],
          "714": [0, 0.69444, 0, 0, 0.575],
          "715": [0, 0.69444, 0, 0, 0.575],
          "728": [0, 0.69444, 0, 0, 0.575],
          "729": [0, 0.69444, 0, 0, 0.31944],
          "730": [0, 0.69444, 0, 0, 0.86944],
          "732": [0, 0.69444, 0, 0, 0.575],
          "733": [0, 0.69444, 0, 0, 0.575],
          "915": [0, 0.68611, 0, 0, 0.69166],
          "916": [0, 0.68611, 0, 0, 0.95833],
          "920": [0, 0.68611, 0, 0, 0.89444],
          "923": [0, 0.68611, 0, 0, 0.80555],
          "926": [0, 0.68611, 0, 0, 0.76666],
          "928": [0, 0.68611, 0, 0, 0.9],
          "931": [0, 0.68611, 0, 0, 0.83055],
          "933": [0, 0.68611, 0, 0, 0.89444],
          "934": [0, 0.68611, 0, 0, 0.83055],
          "936": [0, 0.68611, 0, 0, 0.89444],
          "937": [0, 0.68611, 0, 0, 0.83055],
          "8211": [0, 0.44444, 0.03194, 0, 0.575],
          "8212": [0, 0.44444, 0.03194, 0, 1.14999],
          "8216": [0, 0.69444, 0, 0, 0.31944],
          "8217": [0, 0.69444, 0, 0, 0.31944],
          "8220": [0, 0.69444, 0, 0, 0.60278],
          "8221": [0, 0.69444, 0, 0, 0.60278],
          "8224": [0.19444, 0.69444, 0, 0, 0.51111],
          "8225": [0.19444, 0.69444, 0, 0, 0.51111],
          "8242": [0, 0.55556, 0, 0, 0.34444],
          "8407": [0, 0.72444, 0.15486, 0, 0.575],
          "8463": [0, 0.69444, 0, 0, 0.66759],
          "8465": [0, 0.69444, 0, 0, 0.83055],
          "8467": [0, 0.69444, 0, 0, 0.47361],
          "8472": [0.19444, 0.44444, 0, 0, 0.74027],
          "8476": [0, 0.69444, 0, 0, 0.83055],
          "8501": [0, 0.69444, 0, 0, 0.70277],
          "8592": [-0.10889, 0.39111, 0, 0, 1.14999],
          "8593": [0.19444, 0.69444, 0, 0, 0.575],
          "8594": [-0.10889, 0.39111, 0, 0, 1.14999],
          "8595": [0.19444, 0.69444, 0, 0, 0.575],
          "8596": [-0.10889, 0.39111, 0, 0, 1.14999],
          "8597": [0.25, 0.75, 0, 0, 0.575],
          "8598": [0.19444, 0.69444, 0, 0, 1.14999],
          "8599": [0.19444, 0.69444, 0, 0, 1.14999],
          "8600": [0.19444, 0.69444, 0, 0, 1.14999],
          "8601": [0.19444, 0.69444, 0, 0, 1.14999],
          "8636": [-0.10889, 0.39111, 0, 0, 1.14999],
          "8637": [-0.10889, 0.39111, 0, 0, 1.14999],
          "8640": [-0.10889, 0.39111, 0, 0, 1.14999],
          "8641": [-0.10889, 0.39111, 0, 0, 1.14999],
          "8656": [-0.10889, 0.39111, 0, 0, 1.14999],
          "8657": [0.19444, 0.69444, 0, 0, 0.70277],
          "8658": [-0.10889, 0.39111, 0, 0, 1.14999],
          "8659": [0.19444, 0.69444, 0, 0, 0.70277],
          "8660": [-0.10889, 0.39111, 0, 0, 1.14999],
          "8661": [0.25, 0.75, 0, 0, 0.70277],
          "8704": [0, 0.69444, 0, 0, 0.63889],
          "8706": [0, 0.69444, 0.06389, 0, 0.62847],
          "8707": [0, 0.69444, 0, 0, 0.63889],
          "8709": [0.05556, 0.75, 0, 0, 0.575],
          "8711": [0, 0.68611, 0, 0, 0.95833],
          "8712": [0.08556, 0.58556, 0, 0, 0.76666],
          "8715": [0.08556, 0.58556, 0, 0, 0.76666],
          "8722": [0.13333, 0.63333, 0, 0, 0.89444],
          "8723": [0.13333, 0.63333, 0, 0, 0.89444],
          "8725": [0.25, 0.75, 0, 0, 0.575],
          "8726": [0.25, 0.75, 0, 0, 0.575],
          "8727": [-0.02778, 0.47222, 0, 0, 0.575],
          "8728": [-0.02639, 0.47361, 0, 0, 0.575],
          "8729": [-0.02639, 0.47361, 0, 0, 0.575],
          "8730": [0.18, 0.82, 0, 0, 0.95833],
          "8733": [0, 0.44444, 0, 0, 0.89444],
          "8734": [0, 0.44444, 0, 0, 1.14999],
          "8736": [0, 0.69224, 0, 0, 0.72222],
          "8739": [0.25, 0.75, 0, 0, 0.31944],
          "8741": [0.25, 0.75, 0, 0, 0.575],
          "8743": [0, 0.55556, 0, 0, 0.76666],
          "8744": [0, 0.55556, 0, 0, 0.76666],
          "8745": [0, 0.55556, 0, 0, 0.76666],
          "8746": [0, 0.55556, 0, 0, 0.76666],
          "8747": [0.19444, 0.69444, 0.12778, 0, 0.56875],
          "8764": [-0.10889, 0.39111, 0, 0, 0.89444],
          "8768": [0.19444, 0.69444, 0, 0, 0.31944],
          "8771": [0.00222, 0.50222, 0, 0, 0.89444],
          "8776": [0.02444, 0.52444, 0, 0, 0.89444],
          "8781": [0.00222, 0.50222, 0, 0, 0.89444],
          "8801": [0.00222, 0.50222, 0, 0, 0.89444],
          "8804": [0.19667, 0.69667, 0, 0, 0.89444],
          "8805": [0.19667, 0.69667, 0, 0, 0.89444],
          "8810": [0.08556, 0.58556, 0, 0, 1.14999],
          "8811": [0.08556, 0.58556, 0, 0, 1.14999],
          "8826": [0.08556, 0.58556, 0, 0, 0.89444],
          "8827": [0.08556, 0.58556, 0, 0, 0.89444],
          "8834": [0.08556, 0.58556, 0, 0, 0.89444],
          "8835": [0.08556, 0.58556, 0, 0, 0.89444],
          "8838": [0.19667, 0.69667, 0, 0, 0.89444],
          "8839": [0.19667, 0.69667, 0, 0, 0.89444],
          "8846": [0, 0.55556, 0, 0, 0.76666],
          "8849": [0.19667, 0.69667, 0, 0, 0.89444],
          "8850": [0.19667, 0.69667, 0, 0, 0.89444],
          "8851": [0, 0.55556, 0, 0, 0.76666],
          "8852": [0, 0.55556, 0, 0, 0.76666],
          "8853": [0.13333, 0.63333, 0, 0, 0.89444],
          "8854": [0.13333, 0.63333, 0, 0, 0.89444],
          "8855": [0.13333, 0.63333, 0, 0, 0.89444],
          "8856": [0.13333, 0.63333, 0, 0, 0.89444],
          "8857": [0.13333, 0.63333, 0, 0, 0.89444],
          "8866": [0, 0.69444, 0, 0, 0.70277],
          "8867": [0, 0.69444, 0, 0, 0.70277],
          "8868": [0, 0.69444, 0, 0, 0.89444],
          "8869": [0, 0.69444, 0, 0, 0.89444],
          "8900": [-0.02639, 0.47361, 0, 0, 0.575],
          "8901": [-0.02639, 0.47361, 0, 0, 0.31944],
          "8902": [-0.02778, 0.47222, 0, 0, 0.575],
          "8968": [0.25, 0.75, 0, 0, 0.51111],
          "8969": [0.25, 0.75, 0, 0, 0.51111],
          "8970": [0.25, 0.75, 0, 0, 0.51111],
          "8971": [0.25, 0.75, 0, 0, 0.51111],
          "8994": [-0.13889, 0.36111, 0, 0, 1.14999],
          "8995": [-0.13889, 0.36111, 0, 0, 1.14999],
          "9651": [0.19444, 0.69444, 0, 0, 1.02222],
          "9657": [-0.02778, 0.47222, 0, 0, 0.575],
          "9661": [0.19444, 0.69444, 0, 0, 1.02222],
          "9667": [-0.02778, 0.47222, 0, 0, 0.575],
          "9711": [0.19444, 0.69444, 0, 0, 1.14999],
          "9824": [0.12963, 0.69444, 0, 0, 0.89444],
          "9825": [0.12963, 0.69444, 0, 0, 0.89444],
          "9826": [0.12963, 0.69444, 0, 0, 0.89444],
          "9827": [0.12963, 0.69444, 0, 0, 0.89444],
          "9837": [0, 0.75, 0, 0, 0.44722],
          "9838": [0.19444, 0.69444, 0, 0, 0.44722],
          "9839": [0.19444, 0.69444, 0, 0, 0.44722],
          "10216": [0.25, 0.75, 0, 0, 0.44722],
          "10217": [0.25, 0.75, 0, 0, 0.44722],
          "10815": [0, 0.68611, 0, 0, 0.9],
          "10927": [0.19667, 0.69667, 0, 0, 0.89444],
          "10928": [0.19667, 0.69667, 0, 0, 0.89444],
          "57376": [0.19444, 0.69444, 0, 0, 0]
        },
        "Main-BoldItalic": {
          "33": [0, 0.69444, 0.11417, 0, 0.38611],
          "34": [0, 0.69444, 0.07939, 0, 0.62055],
          "35": [0.19444, 0.69444, 0.06833, 0, 0.94444],
          "37": [0.05556, 0.75, 0.12861, 0, 0.94444],
          "38": [0, 0.69444, 0.08528, 0, 0.88555],
          "39": [0, 0.69444, 0.12945, 0, 0.35555],
          "40": [0.25, 0.75, 0.15806, 0, 0.47333],
          "41": [0.25, 0.75, 0.03306, 0, 0.47333],
          "42": [0, 0.75, 0.14333, 0, 0.59111],
          "43": [0.10333, 0.60333, 0.03306, 0, 0.88555],
          "44": [0.19444, 0.14722, 0, 0, 0.35555],
          "45": [0, 0.44444, 0.02611, 0, 0.41444],
          "46": [0, 0.14722, 0, 0, 0.35555],
          "47": [0.25, 0.75, 0.15806, 0, 0.59111],
          "48": [0, 0.64444, 0.13167, 0, 0.59111],
          "49": [0, 0.64444, 0.13167, 0, 0.59111],
          "50": [0, 0.64444, 0.13167, 0, 0.59111],
          "51": [0, 0.64444, 0.13167, 0, 0.59111],
          "52": [0.19444, 0.64444, 0.13167, 0, 0.59111],
          "53": [0, 0.64444, 0.13167, 0, 0.59111],
          "54": [0, 0.64444, 0.13167, 0, 0.59111],
          "55": [0.19444, 0.64444, 0.13167, 0, 0.59111],
          "56": [0, 0.64444, 0.13167, 0, 0.59111],
          "57": [0, 0.64444, 0.13167, 0, 0.59111],
          "58": [0, 0.44444, 0.06695, 0, 0.35555],
          "59": [0.19444, 0.44444, 0.06695, 0, 0.35555],
          "61": [-0.10889, 0.39111, 0.06833, 0, 0.88555],
          "63": [0, 0.69444, 0.11472, 0, 0.59111],
          "64": [0, 0.69444, 0.09208, 0, 0.88555],
          "65": [0, 0.68611, 0, 0, 0.86555],
          "66": [0, 0.68611, 0.0992, 0, 0.81666],
          "67": [0, 0.68611, 0.14208, 0, 0.82666],
          "68": [0, 0.68611, 0.09062, 0, 0.87555],
          "69": [0, 0.68611, 0.11431, 0, 0.75666],
          "70": [0, 0.68611, 0.12903, 0, 0.72722],
          "71": [0, 0.68611, 0.07347, 0, 0.89527],
          "72": [0, 0.68611, 0.17208, 0, 0.8961],
          "73": [0, 0.68611, 0.15681, 0, 0.47166],
          "74": [0, 0.68611, 0.145, 0, 0.61055],
          "75": [0, 0.68611, 0.14208, 0, 0.89499],
          "76": [0, 0.68611, 0, 0, 0.69777],
          "77": [0, 0.68611, 0.17208, 0, 1.07277],
          "78": [0, 0.68611, 0.17208, 0, 0.8961],
          "79": [0, 0.68611, 0.09062, 0, 0.85499],
          "80": [0, 0.68611, 0.0992, 0, 0.78721],
          "81": [0.19444, 0.68611, 0.09062, 0, 0.85499],
          "82": [0, 0.68611, 0.02559, 0, 0.85944],
          "83": [0, 0.68611, 0.11264, 0, 0.64999],
          "84": [0, 0.68611, 0.12903, 0, 0.7961],
          "85": [0, 0.68611, 0.17208, 0, 0.88083],
          "86": [0, 0.68611, 0.18625, 0, 0.86555],
          "87": [0, 0.68611, 0.18625, 0, 1.15999],
          "88": [0, 0.68611, 0.15681, 0, 0.86555],
          "89": [0, 0.68611, 0.19803, 0, 0.86555],
          "90": [0, 0.68611, 0.14208, 0, 0.70888],
          "91": [0.25, 0.75, 0.1875, 0, 0.35611],
          "93": [0.25, 0.75, 0.09972, 0, 0.35611],
          "94": [0, 0.69444, 0.06709, 0, 0.59111],
          "95": [0.31, 0.13444, 0.09811, 0, 0.59111],
          "97": [0, 0.44444, 0.09426, 0, 0.59111],
          "98": [0, 0.69444, 0.07861, 0, 0.53222],
          "99": [0, 0.44444, 0.05222, 0, 0.53222],
          "100": [0, 0.69444, 0.10861, 0, 0.59111],
          "101": [0, 0.44444, 0.085, 0, 0.53222],
          "102": [0.19444, 0.69444, 0.21778, 0, 0.4],
          "103": [0.19444, 0.44444, 0.105, 0, 0.53222],
          "104": [0, 0.69444, 0.09426, 0, 0.59111],
          "105": [0, 0.69326, 0.11387, 0, 0.35555],
          "106": [0.19444, 0.69326, 0.1672, 0, 0.35555],
          "107": [0, 0.69444, 0.11111, 0, 0.53222],
          "108": [0, 0.69444, 0.10861, 0, 0.29666],
          "109": [0, 0.44444, 0.09426, 0, 0.94444],
          "110": [0, 0.44444, 0.09426, 0, 0.64999],
          "111": [0, 0.44444, 0.07861, 0, 0.59111],
          "112": [0.19444, 0.44444, 0.07861, 0, 0.59111],
          "113": [0.19444, 0.44444, 0.105, 0, 0.53222],
          "114": [0, 0.44444, 0.11111, 0, 0.50167],
          "115": [0, 0.44444, 0.08167, 0, 0.48694],
          "116": [0, 0.63492, 0.09639, 0, 0.385],
          "117": [0, 0.44444, 0.09426, 0, 0.62055],
          "118": [0, 0.44444, 0.11111, 0, 0.53222],
          "119": [0, 0.44444, 0.11111, 0, 0.76777],
          "120": [0, 0.44444, 0.12583, 0, 0.56055],
          "121": [0.19444, 0.44444, 0.105, 0, 0.56166],
          "122": [0, 0.44444, 0.13889, 0, 0.49055],
          "126": [0.35, 0.34444, 0.11472, 0, 0.59111],
          "163": [0, 0.69444, 0, 0, 0.86853],
          "168": [0, 0.69444, 0.11473, 0, 0.59111],
          "176": [0, 0.69444, 0, 0, 0.94888],
          "184": [0.17014, 0, 0, 0, 0.53222],
          "198": [0, 0.68611, 0.11431, 0, 1.02277],
          "216": [0.04861, 0.73472, 0.09062, 0, 0.88555],
          "223": [0.19444, 0.69444, 0.09736, 0, 0.665],
          "230": [0, 0.44444, 0.085, 0, 0.82666],
          "248": [0.09722, 0.54167, 0.09458, 0, 0.59111],
          "305": [0, 0.44444, 0.09426, 0, 0.35555],
          "338": [0, 0.68611, 0.11431, 0, 1.14054],
          "339": [0, 0.44444, 0.085, 0, 0.82666],
          "567": [0.19444, 0.44444, 0.04611, 0, 0.385],
          "710": [0, 0.69444, 0.06709, 0, 0.59111],
          "711": [0, 0.63194, 0.08271, 0, 0.59111],
          "713": [0, 0.59444, 0.10444, 0, 0.59111],
          "714": [0, 0.69444, 0.08528, 0, 0.59111],
          "715": [0, 0.69444, 0, 0, 0.59111],
          "728": [0, 0.69444, 0.10333, 0, 0.59111],
          "729": [0, 0.69444, 0.12945, 0, 0.35555],
          "730": [0, 0.69444, 0, 0, 0.94888],
          "732": [0, 0.69444, 0.11472, 0, 0.59111],
          "733": [0, 0.69444, 0.11472, 0, 0.59111],
          "915": [0, 0.68611, 0.12903, 0, 0.69777],
          "916": [0, 0.68611, 0, 0, 0.94444],
          "920": [0, 0.68611, 0.09062, 0, 0.88555],
          "923": [0, 0.68611, 0, 0, 0.80666],
          "926": [0, 0.68611, 0.15092, 0, 0.76777],
          "928": [0, 0.68611, 0.17208, 0, 0.8961],
          "931": [0, 0.68611, 0.11431, 0, 0.82666],
          "933": [0, 0.68611, 0.10778, 0, 0.88555],
          "934": [0, 0.68611, 0.05632, 0, 0.82666],
          "936": [0, 0.68611, 0.10778, 0, 0.88555],
          "937": [0, 0.68611, 0.0992, 0, 0.82666],
          "8211": [0, 0.44444, 0.09811, 0, 0.59111],
          "8212": [0, 0.44444, 0.09811, 0, 1.18221],
          "8216": [0, 0.69444, 0.12945, 0, 0.35555],
          "8217": [0, 0.69444, 0.12945, 0, 0.35555],
          "8220": [0, 0.69444, 0.16772, 0, 0.62055],
          "8221": [0, 0.69444, 0.07939, 0, 0.62055]
        },
        "Main-Italic": {
          "33": [0, 0.69444, 0.12417, 0, 0.30667],
          "34": [0, 0.69444, 0.06961, 0, 0.51444],
          "35": [0.19444, 0.69444, 0.06616, 0, 0.81777],
          "37": [0.05556, 0.75, 0.13639, 0, 0.81777],
          "38": [0, 0.69444, 0.09694, 0, 0.76666],
          "39": [0, 0.69444, 0.12417, 0, 0.30667],
          "40": [0.25, 0.75, 0.16194, 0, 0.40889],
          "41": [0.25, 0.75, 0.03694, 0, 0.40889],
          "42": [0, 0.75, 0.14917, 0, 0.51111],
          "43": [0.05667, 0.56167, 0.03694, 0, 0.76666],
          "44": [0.19444, 0.10556, 0, 0, 0.30667],
          "45": [0, 0.43056, 0.02826, 0, 0.35778],
          "46": [0, 0.10556, 0, 0, 0.30667],
          "47": [0.25, 0.75, 0.16194, 0, 0.51111],
          "48": [0, 0.64444, 0.13556, 0, 0.51111],
          "49": [0, 0.64444, 0.13556, 0, 0.51111],
          "50": [0, 0.64444, 0.13556, 0, 0.51111],
          "51": [0, 0.64444, 0.13556, 0, 0.51111],
          "52": [0.19444, 0.64444, 0.13556, 0, 0.51111],
          "53": [0, 0.64444, 0.13556, 0, 0.51111],
          "54": [0, 0.64444, 0.13556, 0, 0.51111],
          "55": [0.19444, 0.64444, 0.13556, 0, 0.51111],
          "56": [0, 0.64444, 0.13556, 0, 0.51111],
          "57": [0, 0.64444, 0.13556, 0, 0.51111],
          "58": [0, 0.43056, 0.0582, 0, 0.30667],
          "59": [0.19444, 0.43056, 0.0582, 0, 0.30667],
          "61": [-0.13313, 0.36687, 0.06616, 0, 0.76666],
          "63": [0, 0.69444, 0.1225, 0, 0.51111],
          "64": [0, 0.69444, 0.09597, 0, 0.76666],
          "65": [0, 0.68333, 0, 0, 0.74333],
          "66": [0, 0.68333, 0.10257, 0, 0.70389],
          "67": [0, 0.68333, 0.14528, 0, 0.71555],
          "68": [0, 0.68333, 0.09403, 0, 0.755],
          "69": [0, 0.68333, 0.12028, 0, 0.67833],
          "70": [0, 0.68333, 0.13305, 0, 0.65277],
          "71": [0, 0.68333, 0.08722, 0, 0.77361],
          "72": [0, 0.68333, 0.16389, 0, 0.74333],
          "73": [0, 0.68333, 0.15806, 0, 0.38555],
          "74": [0, 0.68333, 0.14028, 0, 0.525],
          "75": [0, 0.68333, 0.14528, 0, 0.76888],
          "76": [0, 0.68333, 0, 0, 0.62722],
          "77": [0, 0.68333, 0.16389, 0, 0.89666],
          "78": [0, 0.68333, 0.16389, 0, 0.74333],
          "79": [0, 0.68333, 0.09403, 0, 0.76666],
          "80": [0, 0.68333, 0.10257, 0, 0.67833],
          "81": [0.19444, 0.68333, 0.09403, 0, 0.76666],
          "82": [0, 0.68333, 0.03868, 0, 0.72944],
          "83": [0, 0.68333, 0.11972, 0, 0.56222],
          "84": [0, 0.68333, 0.13305, 0, 0.71555],
          "85": [0, 0.68333, 0.16389, 0, 0.74333],
          "86": [0, 0.68333, 0.18361, 0, 0.74333],
          "87": [0, 0.68333, 0.18361, 0, 0.99888],
          "88": [0, 0.68333, 0.15806, 0, 0.74333],
          "89": [0, 0.68333, 0.19383, 0, 0.74333],
          "90": [0, 0.68333, 0.14528, 0, 0.61333],
          "91": [0.25, 0.75, 0.1875, 0, 0.30667],
          "93": [0.25, 0.75, 0.10528, 0, 0.30667],
          "94": [0, 0.69444, 0.06646, 0, 0.51111],
          "95": [0.31, 0.12056, 0.09208, 0, 0.51111],
          "97": [0, 0.43056, 0.07671, 0, 0.51111],
          "98": [0, 0.69444, 0.06312, 0, 0.46],
          "99": [0, 0.43056, 0.05653, 0, 0.46],
          "100": [0, 0.69444, 0.10333, 0, 0.51111],
          "101": [0, 0.43056, 0.07514, 0, 0.46],
          "102": [0.19444, 0.69444, 0.21194, 0, 0.30667],
          "103": [0.19444, 0.43056, 0.08847, 0, 0.46],
          "104": [0, 0.69444, 0.07671, 0, 0.51111],
          "105": [0, 0.65536, 0.1019, 0, 0.30667],
          "106": [0.19444, 0.65536, 0.14467, 0, 0.30667],
          "107": [0, 0.69444, 0.10764, 0, 0.46],
          "108": [0, 0.69444, 0.10333, 0, 0.25555],
          "109": [0, 0.43056, 0.07671, 0, 0.81777],
          "110": [0, 0.43056, 0.07671, 0, 0.56222],
          "111": [0, 0.43056, 0.06312, 0, 0.51111],
          "112": [0.19444, 0.43056, 0.06312, 0, 0.51111],
          "113": [0.19444, 0.43056, 0.08847, 0, 0.46],
          "114": [0, 0.43056, 0.10764, 0, 0.42166],
          "115": [0, 0.43056, 0.08208, 0, 0.40889],
          "116": [0, 0.61508, 0.09486, 0, 0.33222],
          "117": [0, 0.43056, 0.07671, 0, 0.53666],
          "118": [0, 0.43056, 0.10764, 0, 0.46],
          "119": [0, 0.43056, 0.10764, 0, 0.66444],
          "120": [0, 0.43056, 0.12042, 0, 0.46389],
          "121": [0.19444, 0.43056, 0.08847, 0, 0.48555],
          "122": [0, 0.43056, 0.12292, 0, 0.40889],
          "126": [0.35, 0.31786, 0.11585, 0, 0.51111],
          "163": [0, 0.69444, 0, 0, 0.76909],
          "168": [0, 0.66786, 0.10474, 0, 0.51111],
          "176": [0, 0.69444, 0, 0, 0.83129],
          "184": [0.17014, 0, 0, 0, 0.46],
          "198": [0, 0.68333, 0.12028, 0, 0.88277],
          "216": [0.04861, 0.73194, 0.09403, 0, 0.76666],
          "223": [0.19444, 0.69444, 0.10514, 0, 0.53666],
          "230": [0, 0.43056, 0.07514, 0, 0.71555],
          "248": [0.09722, 0.52778, 0.09194, 0, 0.51111],
          "305": [0, 0.43056, 0, 0.02778, 0.32246],
          "338": [0, 0.68333, 0.12028, 0, 0.98499],
          "339": [0, 0.43056, 0.07514, 0, 0.71555],
          "567": [0.19444, 0.43056, 0, 0.08334, 0.38403],
          "710": [0, 0.69444, 0.06646, 0, 0.51111],
          "711": [0, 0.62847, 0.08295, 0, 0.51111],
          "713": [0, 0.56167, 0.10333, 0, 0.51111],
          "714": [0, 0.69444, 0.09694, 0, 0.51111],
          "715": [0, 0.69444, 0, 0, 0.51111],
          "728": [0, 0.69444, 0.10806, 0, 0.51111],
          "729": [0, 0.66786, 0.11752, 0, 0.30667],
          "730": [0, 0.69444, 0, 0, 0.83129],
          "732": [0, 0.66786, 0.11585, 0, 0.51111],
          "733": [0, 0.69444, 0.1225, 0, 0.51111],
          "915": [0, 0.68333, 0.13305, 0, 0.62722],
          "916": [0, 0.68333, 0, 0, 0.81777],
          "920": [0, 0.68333, 0.09403, 0, 0.76666],
          "923": [0, 0.68333, 0, 0, 0.69222],
          "926": [0, 0.68333, 0.15294, 0, 0.66444],
          "928": [0, 0.68333, 0.16389, 0, 0.74333],
          "931": [0, 0.68333, 0.12028, 0, 0.71555],
          "933": [0, 0.68333, 0.11111, 0, 0.76666],
          "934": [0, 0.68333, 0.05986, 0, 0.71555],
          "936": [0, 0.68333, 0.11111, 0, 0.76666],
          "937": [0, 0.68333, 0.10257, 0, 0.71555],
          "8211": [0, 0.43056, 0.09208, 0, 0.51111],
          "8212": [0, 0.43056, 0.09208, 0, 1.02222],
          "8216": [0, 0.69444, 0.12417, 0, 0.30667],
          "8217": [0, 0.69444, 0.12417, 0, 0.30667],
          "8220": [0, 0.69444, 0.1685, 0, 0.51444],
          "8221": [0, 0.69444, 0.06961, 0, 0.51444],
          "8463": [0, 0.68889, 0, 0, 0.54028]
        },
        "Main-Regular": {
          "32": [0, 0, 0, 0, 0.25],
          "33": [0, 0.69444, 0, 0, 0.27778],
          "34": [0, 0.69444, 0, 0, 0.5],
          "35": [0.19444, 0.69444, 0, 0, 0.83334],
          "36": [0.05556, 0.75, 0, 0, 0.5],
          "37": [0.05556, 0.75, 0, 0, 0.83334],
          "38": [0, 0.69444, 0, 0, 0.77778],
          "39": [0, 0.69444, 0, 0, 0.27778],
          "40": [0.25, 0.75, 0, 0, 0.38889],
          "41": [0.25, 0.75, 0, 0, 0.38889],
          "42": [0, 0.75, 0, 0, 0.5],
          "43": [0.08333, 0.58333, 0, 0, 0.77778],
          "44": [0.19444, 0.10556, 0, 0, 0.27778],
          "45": [0, 0.43056, 0, 0, 0.33333],
          "46": [0, 0.10556, 0, 0, 0.27778],
          "47": [0.25, 0.75, 0, 0, 0.5],
          "48": [0, 0.64444, 0, 0, 0.5],
          "49": [0, 0.64444, 0, 0, 0.5],
          "50": [0, 0.64444, 0, 0, 0.5],
          "51": [0, 0.64444, 0, 0, 0.5],
          "52": [0, 0.64444, 0, 0, 0.5],
          "53": [0, 0.64444, 0, 0, 0.5],
          "54": [0, 0.64444, 0, 0, 0.5],
          "55": [0, 0.64444, 0, 0, 0.5],
          "56": [0, 0.64444, 0, 0, 0.5],
          "57": [0, 0.64444, 0, 0, 0.5],
          "58": [0, 0.43056, 0, 0, 0.27778],
          "59": [0.19444, 0.43056, 0, 0, 0.27778],
          "60": [0.0391, 0.5391, 0, 0, 0.77778],
          "61": [-0.13313, 0.36687, 0, 0, 0.77778],
          "62": [0.0391, 0.5391, 0, 0, 0.77778],
          "63": [0, 0.69444, 0, 0, 0.47222],
          "64": [0, 0.69444, 0, 0, 0.77778],
          "65": [0, 0.68333, 0, 0, 0.75],
          "66": [0, 0.68333, 0, 0, 0.70834],
          "67": [0, 0.68333, 0, 0, 0.72222],
          "68": [0, 0.68333, 0, 0, 0.76389],
          "69": [0, 0.68333, 0, 0, 0.68056],
          "70": [0, 0.68333, 0, 0, 0.65278],
          "71": [0, 0.68333, 0, 0, 0.78472],
          "72": [0, 0.68333, 0, 0, 0.75],
          "73": [0, 0.68333, 0, 0, 0.36111],
          "74": [0, 0.68333, 0, 0, 0.51389],
          "75": [0, 0.68333, 0, 0, 0.77778],
          "76": [0, 0.68333, 0, 0, 0.625],
          "77": [0, 0.68333, 0, 0, 0.91667],
          "78": [0, 0.68333, 0, 0, 0.75],
          "79": [0, 0.68333, 0, 0, 0.77778],
          "80": [0, 0.68333, 0, 0, 0.68056],
          "81": [0.19444, 0.68333, 0, 0, 0.77778],
          "82": [0, 0.68333, 0, 0, 0.73611],
          "83": [0, 0.68333, 0, 0, 0.55556],
          "84": [0, 0.68333, 0, 0, 0.72222],
          "85": [0, 0.68333, 0, 0, 0.75],
          "86": [0, 0.68333, 0.01389, 0, 0.75],
          "87": [0, 0.68333, 0.01389, 0, 1.02778],
          "88": [0, 0.68333, 0, 0, 0.75],
          "89": [0, 0.68333, 0.025, 0, 0.75],
          "90": [0, 0.68333, 0, 0, 0.61111],
          "91": [0.25, 0.75, 0, 0, 0.27778],
          "92": [0.25, 0.75, 0, 0, 0.5],
          "93": [0.25, 0.75, 0, 0, 0.27778],
          "94": [0, 0.69444, 0, 0, 0.5],
          "95": [0.31, 0.12056, 0.02778, 0, 0.5],
          "97": [0, 0.43056, 0, 0, 0.5],
          "98": [0, 0.69444, 0, 0, 0.55556],
          "99": [0, 0.43056, 0, 0, 0.44445],
          "100": [0, 0.69444, 0, 0, 0.55556],
          "101": [0, 0.43056, 0, 0, 0.44445],
          "102": [0, 0.69444, 0.07778, 0, 0.30556],
          "103": [0.19444, 0.43056, 0.01389, 0, 0.5],
          "104": [0, 0.69444, 0, 0, 0.55556],
          "105": [0, 0.66786, 0, 0, 0.27778],
          "106": [0.19444, 0.66786, 0, 0, 0.30556],
          "107": [0, 0.69444, 0, 0, 0.52778],
          "108": [0, 0.69444, 0, 0, 0.27778],
          "109": [0, 0.43056, 0, 0, 0.83334],
          "110": [0, 0.43056, 0, 0, 0.55556],
          "111": [0, 0.43056, 0, 0, 0.5],
          "112": [0.19444, 0.43056, 0, 0, 0.55556],
          "113": [0.19444, 0.43056, 0, 0, 0.52778],
          "114": [0, 0.43056, 0, 0, 0.39167],
          "115": [0, 0.43056, 0, 0, 0.39445],
          "116": [0, 0.61508, 0, 0, 0.38889],
          "117": [0, 0.43056, 0, 0, 0.55556],
          "118": [0, 0.43056, 0.01389, 0, 0.52778],
          "119": [0, 0.43056, 0.01389, 0, 0.72222],
          "120": [0, 0.43056, 0, 0, 0.52778],
          "121": [0.19444, 0.43056, 0.01389, 0, 0.52778],
          "122": [0, 0.43056, 0, 0, 0.44445],
          "123": [0.25, 0.75, 0, 0, 0.5],
          "124": [0.25, 0.75, 0, 0, 0.27778],
          "125": [0.25, 0.75, 0, 0, 0.5],
          "126": [0.35, 0.31786, 0, 0, 0.5],
          "160": [0, 0, 0, 0, 0.25],
          "167": [0.19444, 0.69444, 0, 0, 0.44445],
          "168": [0, 0.66786, 0, 0, 0.5],
          "172": [0, 0.43056, 0, 0, 0.66667],
          "176": [0, 0.69444, 0, 0, 0.75],
          "177": [0.08333, 0.58333, 0, 0, 0.77778],
          "182": [0.19444, 0.69444, 0, 0, 0.61111],
          "184": [0.17014, 0, 0, 0, 0.44445],
          "198": [0, 0.68333, 0, 0, 0.90278],
          "215": [0.08333, 0.58333, 0, 0, 0.77778],
          "216": [0.04861, 0.73194, 0, 0, 0.77778],
          "223": [0, 0.69444, 0, 0, 0.5],
          "230": [0, 0.43056, 0, 0, 0.72222],
          "247": [0.08333, 0.58333, 0, 0, 0.77778],
          "248": [0.09722, 0.52778, 0, 0, 0.5],
          "305": [0, 0.43056, 0, 0, 0.27778],
          "338": [0, 0.68333, 0, 0, 1.01389],
          "339": [0, 0.43056, 0, 0, 0.77778],
          "567": [0.19444, 0.43056, 0, 0, 0.30556],
          "710": [0, 0.69444, 0, 0, 0.5],
          "711": [0, 0.62847, 0, 0, 0.5],
          "713": [0, 0.56778, 0, 0, 0.5],
          "714": [0, 0.69444, 0, 0, 0.5],
          "715": [0, 0.69444, 0, 0, 0.5],
          "728": [0, 0.69444, 0, 0, 0.5],
          "729": [0, 0.66786, 0, 0, 0.27778],
          "730": [0, 0.69444, 0, 0, 0.75],
          "732": [0, 0.66786, 0, 0, 0.5],
          "733": [0, 0.69444, 0, 0, 0.5],
          "915": [0, 0.68333, 0, 0, 0.625],
          "916": [0, 0.68333, 0, 0, 0.83334],
          "920": [0, 0.68333, 0, 0, 0.77778],
          "923": [0, 0.68333, 0, 0, 0.69445],
          "926": [0, 0.68333, 0, 0, 0.66667],
          "928": [0, 0.68333, 0, 0, 0.75],
          "931": [0, 0.68333, 0, 0, 0.72222],
          "933": [0, 0.68333, 0, 0, 0.77778],
          "934": [0, 0.68333, 0, 0, 0.72222],
          "936": [0, 0.68333, 0, 0, 0.77778],
          "937": [0, 0.68333, 0, 0, 0.72222],
          "8211": [0, 0.43056, 0.02778, 0, 0.5],
          "8212": [0, 0.43056, 0.02778, 0, 1.0],
          "8216": [0, 0.69444, 0, 0, 0.27778],
          "8217": [0, 0.69444, 0, 0, 0.27778],
          "8220": [0, 0.69444, 0, 0, 0.5],
          "8221": [0, 0.69444, 0, 0, 0.5],
          "8224": [0.19444, 0.69444, 0, 0, 0.44445],
          "8225": [0.19444, 0.69444, 0, 0, 0.44445],
          "8230": [0, 0.12, 0, 0, 1.172],
          "8242": [0, 0.55556, 0, 0, 0.275],
          "8407": [0, 0.71444, 0.15382, 0, 0.5],
          "8463": [0, 0.68889, 0, 0, 0.54028],
          "8465": [0, 0.69444, 0, 0, 0.72222],
          "8467": [0, 0.69444, 0, 0.11111, 0.41667],
          "8472": [0.19444, 0.43056, 0, 0.11111, 0.63646],
          "8476": [0, 0.69444, 0, 0, 0.72222],
          "8501": [0, 0.69444, 0, 0, 0.61111],
          "8592": [-0.13313, 0.36687, 0, 0, 1.0],
          "8593": [0.19444, 0.69444, 0, 0, 0.5],
          "8594": [-0.13313, 0.36687, 0, 0, 1.0],
          "8595": [0.19444, 0.69444, 0, 0, 0.5],
          "8596": [-0.13313, 0.36687, 0, 0, 1.0],
          "8597": [0.25, 0.75, 0, 0, 0.5],
          "8598": [0.19444, 0.69444, 0, 0, 1.0],
          "8599": [0.19444, 0.69444, 0, 0, 1.0],
          "8600": [0.19444, 0.69444, 0, 0, 1.0],
          "8601": [0.19444, 0.69444, 0, 0, 1.0],
          "8614": [0.011, 0.511, 0, 0, 1.0],
          "8617": [0.011, 0.511, 0, 0, 1.126],
          "8618": [0.011, 0.511, 0, 0, 1.126],
          "8636": [-0.13313, 0.36687, 0, 0, 1.0],
          "8637": [-0.13313, 0.36687, 0, 0, 1.0],
          "8640": [-0.13313, 0.36687, 0, 0, 1.0],
          "8641": [-0.13313, 0.36687, 0, 0, 1.0],
          "8652": [0.011, 0.671, 0, 0, 1.0],
          "8656": [-0.13313, 0.36687, 0, 0, 1.0],
          "8657": [0.19444, 0.69444, 0, 0, 0.61111],
          "8658": [-0.13313, 0.36687, 0, 0, 1.0],
          "8659": [0.19444, 0.69444, 0, 0, 0.61111],
          "8660": [-0.13313, 0.36687, 0, 0, 1.0],
          "8661": [0.25, 0.75, 0, 0, 0.61111],
          "8704": [0, 0.69444, 0, 0, 0.55556],
          "8706": [0, 0.69444, 0.05556, 0.08334, 0.5309],
          "8707": [0, 0.69444, 0, 0, 0.55556],
          "8709": [0.05556, 0.75, 0, 0, 0.5],
          "8711": [0, 0.68333, 0, 0, 0.83334],
          "8712": [0.0391, 0.5391, 0, 0, 0.66667],
          "8715": [0.0391, 0.5391, 0, 0, 0.66667],
          "8722": [0.08333, 0.58333, 0, 0, 0.77778],
          "8723": [0.08333, 0.58333, 0, 0, 0.77778],
          "8725": [0.25, 0.75, 0, 0, 0.5],
          "8726": [0.25, 0.75, 0, 0, 0.5],
          "8727": [-0.03472, 0.46528, 0, 0, 0.5],
          "8728": [-0.05555, 0.44445, 0, 0, 0.5],
          "8729": [-0.05555, 0.44445, 0, 0, 0.5],
          "8730": [0.2, 0.8, 0, 0, 0.83334],
          "8733": [0, 0.43056, 0, 0, 0.77778],
          "8734": [0, 0.43056, 0, 0, 1.0],
          "8736": [0, 0.69224, 0, 0, 0.72222],
          "8739": [0.25, 0.75, 0, 0, 0.27778],
          "8741": [0.25, 0.75, 0, 0, 0.5],
          "8743": [0, 0.55556, 0, 0, 0.66667],
          "8744": [0, 0.55556, 0, 0, 0.66667],
          "8745": [0, 0.55556, 0, 0, 0.66667],
          "8746": [0, 0.55556, 0, 0, 0.66667],
          "8747": [0.19444, 0.69444, 0.11111, 0, 0.41667],
          "8764": [-0.13313, 0.36687, 0, 0, 0.77778],
          "8768": [0.19444, 0.69444, 0, 0, 0.27778],
          "8771": [-0.03625, 0.46375, 0, 0, 0.77778],
          "8773": [-0.022, 0.589, 0, 0, 1.0],
          "8776": [-0.01688, 0.48312, 0, 0, 0.77778],
          "8781": [-0.03625, 0.46375, 0, 0, 0.77778],
          "8784": [-0.133, 0.67, 0, 0, 0.778],
          "8801": [-0.03625, 0.46375, 0, 0, 0.77778],
          "8804": [0.13597, 0.63597, 0, 0, 0.77778],
          "8805": [0.13597, 0.63597, 0, 0, 0.77778],
          "8810": [0.0391, 0.5391, 0, 0, 1.0],
          "8811": [0.0391, 0.5391, 0, 0, 1.0],
          "8826": [0.0391, 0.5391, 0, 0, 0.77778],
          "8827": [0.0391, 0.5391, 0, 0, 0.77778],
          "8834": [0.0391, 0.5391, 0, 0, 0.77778],
          "8835": [0.0391, 0.5391, 0, 0, 0.77778],
          "8838": [0.13597, 0.63597, 0, 0, 0.77778],
          "8839": [0.13597, 0.63597, 0, 0, 0.77778],
          "8846": [0, 0.55556, 0, 0, 0.66667],
          "8849": [0.13597, 0.63597, 0, 0, 0.77778],
          "8850": [0.13597, 0.63597, 0, 0, 0.77778],
          "8851": [0, 0.55556, 0, 0, 0.66667],
          "8852": [0, 0.55556, 0, 0, 0.66667],
          "8853": [0.08333, 0.58333, 0, 0, 0.77778],
          "8854": [0.08333, 0.58333, 0, 0, 0.77778],
          "8855": [0.08333, 0.58333, 0, 0, 0.77778],
          "8856": [0.08333, 0.58333, 0, 0, 0.77778],
          "8857": [0.08333, 0.58333, 0, 0, 0.77778],
          "8866": [0, 0.69444, 0, 0, 0.61111],
          "8867": [0, 0.69444, 0, 0, 0.61111],
          "8868": [0, 0.69444, 0, 0, 0.77778],
          "8869": [0, 0.69444, 0, 0, 0.77778],
          "8872": [0.249, 0.75, 0, 0, 0.867],
          "8900": [-0.05555, 0.44445, 0, 0, 0.5],
          "8901": [-0.05555, 0.44445, 0, 0, 0.27778],
          "8902": [-0.03472, 0.46528, 0, 0, 0.5],
          "8904": [0.005, 0.505, 0, 0, 0.9],
          "8942": [0.03, 0.9, 0, 0, 0.278],
          "8943": [-0.19, 0.31, 0, 0, 1.172],
          "8945": [-0.1, 0.82, 0, 0, 1.282],
          "8968": [0.25, 0.75, 0, 0, 0.44445],
          "8969": [0.25, 0.75, 0, 0, 0.44445],
          "8970": [0.25, 0.75, 0, 0, 0.44445],
          "8971": [0.25, 0.75, 0, 0, 0.44445],
          "8994": [-0.14236, 0.35764, 0, 0, 1.0],
          "8995": [-0.14236, 0.35764, 0, 0, 1.0],
          "9136": [0.244, 0.744, 0, 0, 0.412],
          "9137": [0.244, 0.744, 0, 0, 0.412],
          "9651": [0.19444, 0.69444, 0, 0, 0.88889],
          "9657": [-0.03472, 0.46528, 0, 0, 0.5],
          "9661": [0.19444, 0.69444, 0, 0, 0.88889],
          "9667": [-0.03472, 0.46528, 0, 0, 0.5],
          "9711": [0.19444, 0.69444, 0, 0, 1.0],
          "9824": [0.12963, 0.69444, 0, 0, 0.77778],
          "9825": [0.12963, 0.69444, 0, 0, 0.77778],
          "9826": [0.12963, 0.69444, 0, 0, 0.77778],
          "9827": [0.12963, 0.69444, 0, 0, 0.77778],
          "9837": [0, 0.75, 0, 0, 0.38889],
          "9838": [0.19444, 0.69444, 0, 0, 0.38889],
          "9839": [0.19444, 0.69444, 0, 0, 0.38889],
          "10216": [0.25, 0.75, 0, 0, 0.38889],
          "10217": [0.25, 0.75, 0, 0, 0.38889],
          "10222": [0.244, 0.744, 0, 0, 0.412],
          "10223": [0.244, 0.744, 0, 0, 0.412],
          "10229": [0.011, 0.511, 0, 0, 1.609],
          "10230": [0.011, 0.511, 0, 0, 1.638],
          "10231": [0.011, 0.511, 0, 0, 1.859],
          "10232": [0.024, 0.525, 0, 0, 1.609],
          "10233": [0.024, 0.525, 0, 0, 1.638],
          "10234": [0.024, 0.525, 0, 0, 1.858],
          "10236": [0.011, 0.511, 0, 0, 1.638],
          "10815": [0, 0.68333, 0, 0, 0.75],
          "10927": [0.13597, 0.63597, 0, 0, 0.77778],
          "10928": [0.13597, 0.63597, 0, 0, 0.77778],
          "57376": [0.19444, 0.69444, 0, 0, 0]
        },
        "Math-BoldItalic": {
          "65": [0, 0.68611, 0, 0, 0.86944],
          "66": [0, 0.68611, 0.04835, 0, 0.8664],
          "67": [0, 0.68611, 0.06979, 0, 0.81694],
          "68": [0, 0.68611, 0.03194, 0, 0.93812],
          "69": [0, 0.68611, 0.05451, 0, 0.81007],
          "70": [0, 0.68611, 0.15972, 0, 0.68889],
          "71": [0, 0.68611, 0, 0, 0.88673],
          "72": [0, 0.68611, 0.08229, 0, 0.98229],
          "73": [0, 0.68611, 0.07778, 0, 0.51111],
          "74": [0, 0.68611, 0.10069, 0, 0.63125],
          "75": [0, 0.68611, 0.06979, 0, 0.97118],
          "76": [0, 0.68611, 0, 0, 0.75555],
          "77": [0, 0.68611, 0.11424, 0, 1.14201],
          "78": [0, 0.68611, 0.11424, 0, 0.95034],
          "79": [0, 0.68611, 0.03194, 0, 0.83666],
          "80": [0, 0.68611, 0.15972, 0, 0.72309],
          "81": [0.19444, 0.68611, 0, 0, 0.86861],
          "82": [0, 0.68611, 0.00421, 0, 0.87235],
          "83": [0, 0.68611, 0.05382, 0, 0.69271],
          "84": [0, 0.68611, 0.15972, 0, 0.63663],
          "85": [0, 0.68611, 0.11424, 0, 0.80027],
          "86": [0, 0.68611, 0.25555, 0, 0.67778],
          "87": [0, 0.68611, 0.15972, 0, 1.09305],
          "88": [0, 0.68611, 0.07778, 0, 0.94722],
          "89": [0, 0.68611, 0.25555, 0, 0.67458],
          "90": [0, 0.68611, 0.06979, 0, 0.77257],
          "97": [0, 0.44444, 0, 0, 0.63287],
          "98": [0, 0.69444, 0, 0, 0.52083],
          "99": [0, 0.44444, 0, 0, 0.51342],
          "100": [0, 0.69444, 0, 0, 0.60972],
          "101": [0, 0.44444, 0, 0, 0.55361],
          "102": [0.19444, 0.69444, 0.11042, 0, 0.56806],
          "103": [0.19444, 0.44444, 0.03704, 0, 0.5449],
          "104": [0, 0.69444, 0, 0, 0.66759],
          "105": [0, 0.69326, 0, 0, 0.4048],
          "106": [0.19444, 0.69326, 0.0622, 0, 0.47083],
          "107": [0, 0.69444, 0.01852, 0, 0.6037],
          "108": [0, 0.69444, 0.0088, 0, 0.34815],
          "109": [0, 0.44444, 0, 0, 1.0324],
          "110": [0, 0.44444, 0, 0, 0.71296],
          "111": [0, 0.44444, 0, 0, 0.58472],
          "112": [0.19444, 0.44444, 0, 0, 0.60092],
          "113": [0.19444, 0.44444, 0.03704, 0, 0.54213],
          "114": [0, 0.44444, 0.03194, 0, 0.5287],
          "115": [0, 0.44444, 0, 0, 0.53125],
          "116": [0, 0.63492, 0, 0, 0.41528],
          "117": [0, 0.44444, 0, 0, 0.68102],
          "118": [0, 0.44444, 0.03704, 0, 0.56666],
          "119": [0, 0.44444, 0.02778, 0, 0.83148],
          "120": [0, 0.44444, 0, 0, 0.65903],
          "121": [0.19444, 0.44444, 0.03704, 0, 0.59028],
          "122": [0, 0.44444, 0.04213, 0, 0.55509],
          "915": [0, 0.68611, 0.15972, 0, 0.65694],
          "916": [0, 0.68611, 0, 0, 0.95833],
          "920": [0, 0.68611, 0.03194, 0, 0.86722],
          "923": [0, 0.68611, 0, 0, 0.80555],
          "926": [0, 0.68611, 0.07458, 0, 0.84125],
          "928": [0, 0.68611, 0.08229, 0, 0.98229],
          "931": [0, 0.68611, 0.05451, 0, 0.88507],
          "933": [0, 0.68611, 0.15972, 0, 0.67083],
          "934": [0, 0.68611, 0, 0, 0.76666],
          "936": [0, 0.68611, 0.11653, 0, 0.71402],
          "937": [0, 0.68611, 0.04835, 0, 0.8789],
          "945": [0, 0.44444, 0, 0, 0.76064],
          "946": [0.19444, 0.69444, 0.03403, 0, 0.65972],
          "947": [0.19444, 0.44444, 0.06389, 0, 0.59003],
          "948": [0, 0.69444, 0.03819, 0, 0.52222],
          "949": [0, 0.44444, 0, 0, 0.52882],
          "950": [0.19444, 0.69444, 0.06215, 0, 0.50833],
          "951": [0.19444, 0.44444, 0.03704, 0, 0.6],
          "952": [0, 0.69444, 0.03194, 0, 0.5618],
          "953": [0, 0.44444, 0, 0, 0.41204],
          "954": [0, 0.44444, 0, 0, 0.66759],
          "955": [0, 0.69444, 0, 0, 0.67083],
          "956": [0.19444, 0.44444, 0, 0, 0.70787],
          "957": [0, 0.44444, 0.06898, 0, 0.57685],
          "958": [0.19444, 0.69444, 0.03021, 0, 0.50833],
          "959": [0, 0.44444, 0, 0, 0.58472],
          "960": [0, 0.44444, 0.03704, 0, 0.68241],
          "961": [0.19444, 0.44444, 0, 0, 0.6118],
          "962": [0.09722, 0.44444, 0.07917, 0, 0.42361],
          "963": [0, 0.44444, 0.03704, 0, 0.68588],
          "964": [0, 0.44444, 0.13472, 0, 0.52083],
          "965": [0, 0.44444, 0.03704, 0, 0.63055],
          "966": [0.19444, 0.44444, 0, 0, 0.74722],
          "967": [0.19444, 0.44444, 0, 0, 0.71805],
          "968": [0.19444, 0.69444, 0.03704, 0, 0.75833],
          "969": [0, 0.44444, 0.03704, 0, 0.71782],
          "977": [0, 0.69444, 0, 0, 0.69155],
          "981": [0.19444, 0.69444, 0, 0, 0.7125],
          "982": [0, 0.44444, 0.03194, 0, 0.975],
          "1009": [0.19444, 0.44444, 0, 0, 0.6118],
          "1013": [0, 0.44444, 0, 0, 0.48333]
        },
        "Math-Italic": {
          "65": [0, 0.68333, 0, 0.13889, 0.75],
          "66": [0, 0.68333, 0.05017, 0.08334, 0.75851],
          "67": [0, 0.68333, 0.07153, 0.08334, 0.71472],
          "68": [0, 0.68333, 0.02778, 0.05556, 0.82792],
          "69": [0, 0.68333, 0.05764, 0.08334, 0.7382],
          "70": [0, 0.68333, 0.13889, 0.08334, 0.64306],
          "71": [0, 0.68333, 0, 0.08334, 0.78625],
          "72": [0, 0.68333, 0.08125, 0.05556, 0.83125],
          "73": [0, 0.68333, 0.07847, 0.11111, 0.43958],
          "74": [0, 0.68333, 0.09618, 0.16667, 0.55451],
          "75": [0, 0.68333, 0.07153, 0.05556, 0.84931],
          "76": [0, 0.68333, 0, 0.02778, 0.68056],
          "77": [0, 0.68333, 0.10903, 0.08334, 0.97014],
          "78": [0, 0.68333, 0.10903, 0.08334, 0.80347],
          "79": [0, 0.68333, 0.02778, 0.08334, 0.76278],
          "80": [0, 0.68333, 0.13889, 0.08334, 0.64201],
          "81": [0.19444, 0.68333, 0, 0.08334, 0.79056],
          "82": [0, 0.68333, 0.00773, 0.08334, 0.75929],
          "83": [0, 0.68333, 0.05764, 0.08334, 0.6132],
          "84": [0, 0.68333, 0.13889, 0.08334, 0.58438],
          "85": [0, 0.68333, 0.10903, 0.02778, 0.68278],
          "86": [0, 0.68333, 0.22222, 0, 0.58333],
          "87": [0, 0.68333, 0.13889, 0, 0.94445],
          "88": [0, 0.68333, 0.07847, 0.08334, 0.82847],
          "89": [0, 0.68333, 0.22222, 0, 0.58056],
          "90": [0, 0.68333, 0.07153, 0.08334, 0.68264],
          "97": [0, 0.43056, 0, 0, 0.52859],
          "98": [0, 0.69444, 0, 0, 0.42917],
          "99": [0, 0.43056, 0, 0.05556, 0.43276],
          "100": [0, 0.69444, 0, 0.16667, 0.52049],
          "101": [0, 0.43056, 0, 0.05556, 0.46563],
          "102": [0.19444, 0.69444, 0.10764, 0.16667, 0.48959],
          "103": [0.19444, 0.43056, 0.03588, 0.02778, 0.47697],
          "104": [0, 0.69444, 0, 0, 0.57616],
          "105": [0, 0.65952, 0, 0, 0.34451],
          "106": [0.19444, 0.65952, 0.05724, 0, 0.41181],
          "107": [0, 0.69444, 0.03148, 0, 0.5206],
          "108": [0, 0.69444, 0.01968, 0.08334, 0.29838],
          "109": [0, 0.43056, 0, 0, 0.87801],
          "110": [0, 0.43056, 0, 0, 0.60023],
          "111": [0, 0.43056, 0, 0.05556, 0.48472],
          "112": [0.19444, 0.43056, 0, 0.08334, 0.50313],
          "113": [0.19444, 0.43056, 0.03588, 0.08334, 0.44641],
          "114": [0, 0.43056, 0.02778, 0.05556, 0.45116],
          "115": [0, 0.43056, 0, 0.05556, 0.46875],
          "116": [0, 0.61508, 0, 0.08334, 0.36111],
          "117": [0, 0.43056, 0, 0.02778, 0.57246],
          "118": [0, 0.43056, 0.03588, 0.02778, 0.48472],
          "119": [0, 0.43056, 0.02691, 0.08334, 0.71592],
          "120": [0, 0.43056, 0, 0.02778, 0.57153],
          "121": [0.19444, 0.43056, 0.03588, 0.05556, 0.49028],
          "122": [0, 0.43056, 0.04398, 0.05556, 0.46505],
          "915": [0, 0.68333, 0.13889, 0.08334, 0.61528],
          "916": [0, 0.68333, 0, 0.16667, 0.83334],
          "920": [0, 0.68333, 0.02778, 0.08334, 0.76278],
          "923": [0, 0.68333, 0, 0.16667, 0.69445],
          "926": [0, 0.68333, 0.07569, 0.08334, 0.74236],
          "928": [0, 0.68333, 0.08125, 0.05556, 0.83125],
          "931": [0, 0.68333, 0.05764, 0.08334, 0.77986],
          "933": [0, 0.68333, 0.13889, 0.05556, 0.58333],
          "934": [0, 0.68333, 0, 0.08334, 0.66667],
          "936": [0, 0.68333, 0.11, 0.05556, 0.61222],
          "937": [0, 0.68333, 0.05017, 0.08334, 0.7724],
          "945": [0, 0.43056, 0.0037, 0.02778, 0.6397],
          "946": [0.19444, 0.69444, 0.05278, 0.08334, 0.56563],
          "947": [0.19444, 0.43056, 0.05556, 0, 0.51773],
          "948": [0, 0.69444, 0.03785, 0.05556, 0.44444],
          "949": [0, 0.43056, 0, 0.08334, 0.46632],
          "950": [0.19444, 0.69444, 0.07378, 0.08334, 0.4375],
          "951": [0.19444, 0.43056, 0.03588, 0.05556, 0.49653],
          "952": [0, 0.69444, 0.02778, 0.08334, 0.46944],
          "953": [0, 0.43056, 0, 0.05556, 0.35394],
          "954": [0, 0.43056, 0, 0, 0.57616],
          "955": [0, 0.69444, 0, 0, 0.58334],
          "956": [0.19444, 0.43056, 0, 0.02778, 0.60255],
          "957": [0, 0.43056, 0.06366, 0.02778, 0.49398],
          "958": [0.19444, 0.69444, 0.04601, 0.11111, 0.4375],
          "959": [0, 0.43056, 0, 0.05556, 0.48472],
          "960": [0, 0.43056, 0.03588, 0, 0.57003],
          "961": [0.19444, 0.43056, 0, 0.08334, 0.51702],
          "962": [0.09722, 0.43056, 0.07986, 0.08334, 0.36285],
          "963": [0, 0.43056, 0.03588, 0, 0.57141],
          "964": [0, 0.43056, 0.1132, 0.02778, 0.43715],
          "965": [0, 0.43056, 0.03588, 0.02778, 0.54028],
          "966": [0.19444, 0.43056, 0, 0.08334, 0.65417],
          "967": [0.19444, 0.43056, 0, 0.05556, 0.62569],
          "968": [0.19444, 0.69444, 0.03588, 0.11111, 0.65139],
          "969": [0, 0.43056, 0.03588, 0, 0.62245],
          "977": [0, 0.69444, 0, 0.08334, 0.59144],
          "981": [0.19444, 0.69444, 0, 0.08334, 0.59583],
          "982": [0, 0.43056, 0.02778, 0, 0.82813],
          "1009": [0.19444, 0.43056, 0, 0.08334, 0.51702],
          "1013": [0, 0.43056, 0, 0.05556, 0.4059]
        },
        "Math-Regular": {
          "65": [0, 0.68333, 0, 0.13889, 0.75],
          "66": [0, 0.68333, 0.05017, 0.08334, 0.75851],
          "67": [0, 0.68333, 0.07153, 0.08334, 0.71472],
          "68": [0, 0.68333, 0.02778, 0.05556, 0.82792],
          "69": [0, 0.68333, 0.05764, 0.08334, 0.7382],
          "70": [0, 0.68333, 0.13889, 0.08334, 0.64306],
          "71": [0, 0.68333, 0, 0.08334, 0.78625],
          "72": [0, 0.68333, 0.08125, 0.05556, 0.83125],
          "73": [0, 0.68333, 0.07847, 0.11111, 0.43958],
          "74": [0, 0.68333, 0.09618, 0.16667, 0.55451],
          "75": [0, 0.68333, 0.07153, 0.05556, 0.84931],
          "76": [0, 0.68333, 0, 0.02778, 0.68056],
          "77": [0, 0.68333, 0.10903, 0.08334, 0.97014],
          "78": [0, 0.68333, 0.10903, 0.08334, 0.80347],
          "79": [0, 0.68333, 0.02778, 0.08334, 0.76278],
          "80": [0, 0.68333, 0.13889, 0.08334, 0.64201],
          "81": [0.19444, 0.68333, 0, 0.08334, 0.79056],
          "82": [0, 0.68333, 0.00773, 0.08334, 0.75929],
          "83": [0, 0.68333, 0.05764, 0.08334, 0.6132],
          "84": [0, 0.68333, 0.13889, 0.08334, 0.58438],
          "85": [0, 0.68333, 0.10903, 0.02778, 0.68278],
          "86": [0, 0.68333, 0.22222, 0, 0.58333],
          "87": [0, 0.68333, 0.13889, 0, 0.94445],
          "88": [0, 0.68333, 0.07847, 0.08334, 0.82847],
          "89": [0, 0.68333, 0.22222, 0, 0.58056],
          "90": [0, 0.68333, 0.07153, 0.08334, 0.68264],
          "97": [0, 0.43056, 0, 0, 0.52859],
          "98": [0, 0.69444, 0, 0, 0.42917],
          "99": [0, 0.43056, 0, 0.05556, 0.43276],
          "100": [0, 0.69444, 0, 0.16667, 0.52049],
          "101": [0, 0.43056, 0, 0.05556, 0.46563],
          "102": [0.19444, 0.69444, 0.10764, 0.16667, 0.48959],
          "103": [0.19444, 0.43056, 0.03588, 0.02778, 0.47697],
          "104": [0, 0.69444, 0, 0, 0.57616],
          "105": [0, 0.65952, 0, 0, 0.34451],
          "106": [0.19444, 0.65952, 0.05724, 0, 0.41181],
          "107": [0, 0.69444, 0.03148, 0, 0.5206],
          "108": [0, 0.69444, 0.01968, 0.08334, 0.29838],
          "109": [0, 0.43056, 0, 0, 0.87801],
          "110": [0, 0.43056, 0, 0, 0.60023],
          "111": [0, 0.43056, 0, 0.05556, 0.48472],
          "112": [0.19444, 0.43056, 0, 0.08334, 0.50313],
          "113": [0.19444, 0.43056, 0.03588, 0.08334, 0.44641],
          "114": [0, 0.43056, 0.02778, 0.05556, 0.45116],
          "115": [0, 0.43056, 0, 0.05556, 0.46875],
          "116": [0, 0.61508, 0, 0.08334, 0.36111],
          "117": [0, 0.43056, 0, 0.02778, 0.57246],
          "118": [0, 0.43056, 0.03588, 0.02778, 0.48472],
          "119": [0, 0.43056, 0.02691, 0.08334, 0.71592],
          "120": [0, 0.43056, 0, 0.02778, 0.57153],
          "121": [0.19444, 0.43056, 0.03588, 0.05556, 0.49028],
          "122": [0, 0.43056, 0.04398, 0.05556, 0.46505],
          "915": [0, 0.68333, 0.13889, 0.08334, 0.61528],
          "916": [0, 0.68333, 0, 0.16667, 0.83334],
          "920": [0, 0.68333, 0.02778, 0.08334, 0.76278],
          "923": [0, 0.68333, 0, 0.16667, 0.69445],
          "926": [0, 0.68333, 0.07569, 0.08334, 0.74236],
          "928": [0, 0.68333, 0.08125, 0.05556, 0.83125],
          "931": [0, 0.68333, 0.05764, 0.08334, 0.77986],
          "933": [0, 0.68333, 0.13889, 0.05556, 0.58333],
          "934": [0, 0.68333, 0, 0.08334, 0.66667],
          "936": [0, 0.68333, 0.11, 0.05556, 0.61222],
          "937": [0, 0.68333, 0.05017, 0.08334, 0.7724],
          "945": [0, 0.43056, 0.0037, 0.02778, 0.6397],
          "946": [0.19444, 0.69444, 0.05278, 0.08334, 0.56563],
          "947": [0.19444, 0.43056, 0.05556, 0, 0.51773],
          "948": [0, 0.69444, 0.03785, 0.05556, 0.44444],
          "949": [0, 0.43056, 0, 0.08334, 0.46632],
          "950": [0.19444, 0.69444, 0.07378, 0.08334, 0.4375],
          "951": [0.19444, 0.43056, 0.03588, 0.05556, 0.49653],
          "952": [0, 0.69444, 0.02778, 0.08334, 0.46944],
          "953": [0, 0.43056, 0, 0.05556, 0.35394],
          "954": [0, 0.43056, 0, 0, 0.57616],
          "955": [0, 0.69444, 0, 0, 0.58334],
          "956": [0.19444, 0.43056, 0, 0.02778, 0.60255],
          "957": [0, 0.43056, 0.06366, 0.02778, 0.49398],
          "958": [0.19444, 0.69444, 0.04601, 0.11111, 0.4375],
          "959": [0, 0.43056, 0, 0.05556, 0.48472],
          "960": [0, 0.43056, 0.03588, 0, 0.57003],
          "961": [0.19444, 0.43056, 0, 0.08334, 0.51702],
          "962": [0.09722, 0.43056, 0.07986, 0.08334, 0.36285],
          "963": [0, 0.43056, 0.03588, 0, 0.57141],
          "964": [0, 0.43056, 0.1132, 0.02778, 0.43715],
          "965": [0, 0.43056, 0.03588, 0.02778, 0.54028],
          "966": [0.19444, 0.43056, 0, 0.08334, 0.65417],
          "967": [0.19444, 0.43056, 0, 0.05556, 0.62569],
          "968": [0.19444, 0.69444, 0.03588, 0.11111, 0.65139],
          "969": [0, 0.43056, 0.03588, 0, 0.62245],
          "977": [0, 0.69444, 0, 0.08334, 0.59144],
          "981": [0.19444, 0.69444, 0, 0.08334, 0.59583],
          "982": [0, 0.43056, 0.02778, 0, 0.82813],
          "1009": [0.19444, 0.43056, 0, 0.08334, 0.51702],
          "1013": [0, 0.43056, 0, 0.05556, 0.4059]
        },
        "SansSerif-Bold": {
          "33": [0, 0.69444, 0, 0, 0.36667],
          "34": [0, 0.69444, 0, 0, 0.55834],
          "35": [0.19444, 0.69444, 0, 0, 0.91667],
          "36": [0.05556, 0.75, 0, 0, 0.55],
          "37": [0.05556, 0.75, 0, 0, 1.02912],
          "38": [0, 0.69444, 0, 0, 0.83056],
          "39": [0, 0.69444, 0, 0, 0.30556],
          "40": [0.25, 0.75, 0, 0, 0.42778],
          "41": [0.25, 0.75, 0, 0, 0.42778],
          "42": [0, 0.75, 0, 0, 0.55],
          "43": [0.11667, 0.61667, 0, 0, 0.85556],
          "44": [0.10556, 0.13056, 0, 0, 0.30556],
          "45": [0, 0.45833, 0, 0, 0.36667],
          "46": [0, 0.13056, 0, 0, 0.30556],
          "47": [0.25, 0.75, 0, 0, 0.55],
          "48": [0, 0.69444, 0, 0, 0.55],
          "49": [0, 0.69444, 0, 0, 0.55],
          "50": [0, 0.69444, 0, 0, 0.55],
          "51": [0, 0.69444, 0, 0, 0.55],
          "52": [0, 0.69444, 0, 0, 0.55],
          "53": [0, 0.69444, 0, 0, 0.55],
          "54": [0, 0.69444, 0, 0, 0.55],
          "55": [0, 0.69444, 0, 0, 0.55],
          "56": [0, 0.69444, 0, 0, 0.55],
          "57": [0, 0.69444, 0, 0, 0.55],
          "58": [0, 0.45833, 0, 0, 0.30556],
          "59": [0.10556, 0.45833, 0, 0, 0.30556],
          "61": [-0.09375, 0.40625, 0, 0, 0.85556],
          "63": [0, 0.69444, 0, 0, 0.51945],
          "64": [0, 0.69444, 0, 0, 0.73334],
          "65": [0, 0.69444, 0, 0, 0.73334],
          "66": [0, 0.69444, 0, 0, 0.73334],
          "67": [0, 0.69444, 0, 0, 0.70278],
          "68": [0, 0.69444, 0, 0, 0.79445],
          "69": [0, 0.69444, 0, 0, 0.64167],
          "70": [0, 0.69444, 0, 0, 0.61111],
          "71": [0, 0.69444, 0, 0, 0.73334],
          "72": [0, 0.69444, 0, 0, 0.79445],
          "73": [0, 0.69444, 0, 0, 0.33056],
          "74": [0, 0.69444, 0, 0, 0.51945],
          "75": [0, 0.69444, 0, 0, 0.76389],
          "76": [0, 0.69444, 0, 0, 0.58056],
          "77": [0, 0.69444, 0, 0, 0.97778],
          "78": [0, 0.69444, 0, 0, 0.79445],
          "79": [0, 0.69444, 0, 0, 0.79445],
          "80": [0, 0.69444, 0, 0, 0.70278],
          "81": [0.10556, 0.69444, 0, 0, 0.79445],
          "82": [0, 0.69444, 0, 0, 0.70278],
          "83": [0, 0.69444, 0, 0, 0.61111],
          "84": [0, 0.69444, 0, 0, 0.73334],
          "85": [0, 0.69444, 0, 0, 0.76389],
          "86": [0, 0.69444, 0.01528, 0, 0.73334],
          "87": [0, 0.69444, 0.01528, 0, 1.03889],
          "88": [0, 0.69444, 0, 0, 0.73334],
          "89": [0, 0.69444, 0.0275, 0, 0.73334],
          "90": [0, 0.69444, 0, 0, 0.67223],
          "91": [0.25, 0.75, 0, 0, 0.34306],
          "93": [0.25, 0.75, 0, 0, 0.34306],
          "94": [0, 0.69444, 0, 0, 0.55],
          "95": [0.35, 0.10833, 0.03056, 0, 0.55],
          "97": [0, 0.45833, 0, 0, 0.525],
          "98": [0, 0.69444, 0, 0, 0.56111],
          "99": [0, 0.45833, 0, 0, 0.48889],
          "100": [0, 0.69444, 0, 0, 0.56111],
          "101": [0, 0.45833, 0, 0, 0.51111],
          "102": [0, 0.69444, 0.07639, 0, 0.33611],
          "103": [0.19444, 0.45833, 0.01528, 0, 0.55],
          "104": [0, 0.69444, 0, 0, 0.56111],
          "105": [0, 0.69444, 0, 0, 0.25556],
          "106": [0.19444, 0.69444, 0, 0, 0.28611],
          "107": [0, 0.69444, 0, 0, 0.53056],
          "108": [0, 0.69444, 0, 0, 0.25556],
          "109": [0, 0.45833, 0, 0, 0.86667],
          "110": [0, 0.45833, 0, 0, 0.56111],
          "111": [0, 0.45833, 0, 0, 0.55],
          "112": [0.19444, 0.45833, 0, 0, 0.56111],
          "113": [0.19444, 0.45833, 0, 0, 0.56111],
          "114": [0, 0.45833, 0.01528, 0, 0.37222],
          "115": [0, 0.45833, 0, 0, 0.42167],
          "116": [0, 0.58929, 0, 0, 0.40417],
          "117": [0, 0.45833, 0, 0, 0.56111],
          "118": [0, 0.45833, 0.01528, 0, 0.5],
          "119": [0, 0.45833, 0.01528, 0, 0.74445],
          "120": [0, 0.45833, 0, 0, 0.5],
          "121": [0.19444, 0.45833, 0.01528, 0, 0.5],
          "122": [0, 0.45833, 0, 0, 0.47639],
          "126": [0.35, 0.34444, 0, 0, 0.55],
          "168": [0, 0.69444, 0, 0, 0.55],
          "176": [0, 0.69444, 0, 0, 0.73334],
          "180": [0, 0.69444, 0, 0, 0.55],
          "184": [0.17014, 0, 0, 0, 0.48889],
          "305": [0, 0.45833, 0, 0, 0.25556],
          "567": [0.19444, 0.45833, 0, 0, 0.28611],
          "710": [0, 0.69444, 0, 0, 0.55],
          "711": [0, 0.63542, 0, 0, 0.55],
          "713": [0, 0.63778, 0, 0, 0.55],
          "728": [0, 0.69444, 0, 0, 0.55],
          "729": [0, 0.69444, 0, 0, 0.30556],
          "730": [0, 0.69444, 0, 0, 0.73334],
          "732": [0, 0.69444, 0, 0, 0.55],
          "733": [0, 0.69444, 0, 0, 0.55],
          "915": [0, 0.69444, 0, 0, 0.58056],
          "916": [0, 0.69444, 0, 0, 0.91667],
          "920": [0, 0.69444, 0, 0, 0.85556],
          "923": [0, 0.69444, 0, 0, 0.67223],
          "926": [0, 0.69444, 0, 0, 0.73334],
          "928": [0, 0.69444, 0, 0, 0.79445],
          "931": [0, 0.69444, 0, 0, 0.79445],
          "933": [0, 0.69444, 0, 0, 0.85556],
          "934": [0, 0.69444, 0, 0, 0.79445],
          "936": [0, 0.69444, 0, 0, 0.85556],
          "937": [0, 0.69444, 0, 0, 0.79445],
          "8211": [0, 0.45833, 0.03056, 0, 0.55],
          "8212": [0, 0.45833, 0.03056, 0, 1.10001],
          "8216": [0, 0.69444, 0, 0, 0.30556],
          "8217": [0, 0.69444, 0, 0, 0.30556],
          "8220": [0, 0.69444, 0, 0, 0.55834],
          "8221": [0, 0.69444, 0, 0, 0.55834]
        },
        "SansSerif-Italic": {
          "33": [0, 0.69444, 0.05733, 0, 0.31945],
          "34": [0, 0.69444, 0.00316, 0, 0.5],
          "35": [0.19444, 0.69444, 0.05087, 0, 0.83334],
          "36": [0.05556, 0.75, 0.11156, 0, 0.5],
          "37": [0.05556, 0.75, 0.03126, 0, 0.83334],
          "38": [0, 0.69444, 0.03058, 0, 0.75834],
          "39": [0, 0.69444, 0.07816, 0, 0.27778],
          "40": [0.25, 0.75, 0.13164, 0, 0.38889],
          "41": [0.25, 0.75, 0.02536, 0, 0.38889],
          "42": [0, 0.75, 0.11775, 0, 0.5],
          "43": [0.08333, 0.58333, 0.02536, 0, 0.77778],
          "44": [0.125, 0.08333, 0, 0, 0.27778],
          "45": [0, 0.44444, 0.01946, 0, 0.33333],
          "46": [0, 0.08333, 0, 0, 0.27778],
          "47": [0.25, 0.75, 0.13164, 0, 0.5],
          "48": [0, 0.65556, 0.11156, 0, 0.5],
          "49": [0, 0.65556, 0.11156, 0, 0.5],
          "50": [0, 0.65556, 0.11156, 0, 0.5],
          "51": [0, 0.65556, 0.11156, 0, 0.5],
          "52": [0, 0.65556, 0.11156, 0, 0.5],
          "53": [0, 0.65556, 0.11156, 0, 0.5],
          "54": [0, 0.65556, 0.11156, 0, 0.5],
          "55": [0, 0.65556, 0.11156, 0, 0.5],
          "56": [0, 0.65556, 0.11156, 0, 0.5],
          "57": [0, 0.65556, 0.11156, 0, 0.5],
          "58": [0, 0.44444, 0.02502, 0, 0.27778],
          "59": [0.125, 0.44444, 0.02502, 0, 0.27778],
          "61": [-0.13, 0.37, 0.05087, 0, 0.77778],
          "63": [0, 0.69444, 0.11809, 0, 0.47222],
          "64": [0, 0.69444, 0.07555, 0, 0.66667],
          "65": [0, 0.69444, 0, 0, 0.66667],
          "66": [0, 0.69444, 0.08293, 0, 0.66667],
          "67": [0, 0.69444, 0.11983, 0, 0.63889],
          "68": [0, 0.69444, 0.07555, 0, 0.72223],
          "69": [0, 0.69444, 0.11983, 0, 0.59722],
          "70": [0, 0.69444, 0.13372, 0, 0.56945],
          "71": [0, 0.69444, 0.11983, 0, 0.66667],
          "72": [0, 0.69444, 0.08094, 0, 0.70834],
          "73": [0, 0.69444, 0.13372, 0, 0.27778],
          "74": [0, 0.69444, 0.08094, 0, 0.47222],
          "75": [0, 0.69444, 0.11983, 0, 0.69445],
          "76": [0, 0.69444, 0, 0, 0.54167],
          "77": [0, 0.69444, 0.08094, 0, 0.875],
          "78": [0, 0.69444, 0.08094, 0, 0.70834],
          "79": [0, 0.69444, 0.07555, 0, 0.73611],
          "80": [0, 0.69444, 0.08293, 0, 0.63889],
          "81": [0.125, 0.69444, 0.07555, 0, 0.73611],
          "82": [0, 0.69444, 0.08293, 0, 0.64584],
          "83": [0, 0.69444, 0.09205, 0, 0.55556],
          "84": [0, 0.69444, 0.13372, 0, 0.68056],
          "85": [0, 0.69444, 0.08094, 0, 0.6875],
          "86": [0, 0.69444, 0.1615, 0, 0.66667],
          "87": [0, 0.69444, 0.1615, 0, 0.94445],
          "88": [0, 0.69444, 0.13372, 0, 0.66667],
          "89": [0, 0.69444, 0.17261, 0, 0.66667],
          "90": [0, 0.69444, 0.11983, 0, 0.61111],
          "91": [0.25, 0.75, 0.15942, 0, 0.28889],
          "93": [0.25, 0.75, 0.08719, 0, 0.28889],
          "94": [0, 0.69444, 0.0799, 0, 0.5],
          "95": [0.35, 0.09444, 0.08616, 0, 0.5],
          "97": [0, 0.44444, 0.00981, 0, 0.48056],
          "98": [0, 0.69444, 0.03057, 0, 0.51667],
          "99": [0, 0.44444, 0.08336, 0, 0.44445],
          "100": [0, 0.69444, 0.09483, 0, 0.51667],
          "101": [0, 0.44444, 0.06778, 0, 0.44445],
          "102": [0, 0.69444, 0.21705, 0, 0.30556],
          "103": [0.19444, 0.44444, 0.10836, 0, 0.5],
          "104": [0, 0.69444, 0.01778, 0, 0.51667],
          "105": [0, 0.67937, 0.09718, 0, 0.23889],
          "106": [0.19444, 0.67937, 0.09162, 0, 0.26667],
          "107": [0, 0.69444, 0.08336, 0, 0.48889],
          "108": [0, 0.69444, 0.09483, 0, 0.23889],
          "109": [0, 0.44444, 0.01778, 0, 0.79445],
          "110": [0, 0.44444, 0.01778, 0, 0.51667],
          "111": [0, 0.44444, 0.06613, 0, 0.5],
          "112": [0.19444, 0.44444, 0.0389, 0, 0.51667],
          "113": [0.19444, 0.44444, 0.04169, 0, 0.51667],
          "114": [0, 0.44444, 0.10836, 0, 0.34167],
          "115": [0, 0.44444, 0.0778, 0, 0.38333],
          "116": [0, 0.57143, 0.07225, 0, 0.36111],
          "117": [0, 0.44444, 0.04169, 0, 0.51667],
          "118": [0, 0.44444, 0.10836, 0, 0.46111],
          "119": [0, 0.44444, 0.10836, 0, 0.68334],
          "120": [0, 0.44444, 0.09169, 0, 0.46111],
          "121": [0.19444, 0.44444, 0.10836, 0, 0.46111],
          "122": [0, 0.44444, 0.08752, 0, 0.43472],
          "126": [0.35, 0.32659, 0.08826, 0, 0.5],
          "168": [0, 0.67937, 0.06385, 0, 0.5],
          "176": [0, 0.69444, 0, 0, 0.73752],
          "184": [0.17014, 0, 0, 0, 0.44445],
          "305": [0, 0.44444, 0.04169, 0, 0.23889],
          "567": [0.19444, 0.44444, 0.04169, 0, 0.26667],
          "710": [0, 0.69444, 0.0799, 0, 0.5],
          "711": [0, 0.63194, 0.08432, 0, 0.5],
          "713": [0, 0.60889, 0.08776, 0, 0.5],
          "714": [0, 0.69444, 0.09205, 0, 0.5],
          "715": [0, 0.69444, 0, 0, 0.5],
          "728": [0, 0.69444, 0.09483, 0, 0.5],
          "729": [0, 0.67937, 0.07774, 0, 0.27778],
          "730": [0, 0.69444, 0, 0, 0.73752],
          "732": [0, 0.67659, 0.08826, 0, 0.5],
          "733": [0, 0.69444, 0.09205, 0, 0.5],
          "915": [0, 0.69444, 0.13372, 0, 0.54167],
          "916": [0, 0.69444, 0, 0, 0.83334],
          "920": [0, 0.69444, 0.07555, 0, 0.77778],
          "923": [0, 0.69444, 0, 0, 0.61111],
          "926": [0, 0.69444, 0.12816, 0, 0.66667],
          "928": [0, 0.69444, 0.08094, 0, 0.70834],
          "931": [0, 0.69444, 0.11983, 0, 0.72222],
          "933": [0, 0.69444, 0.09031, 0, 0.77778],
          "934": [0, 0.69444, 0.04603, 0, 0.72222],
          "936": [0, 0.69444, 0.09031, 0, 0.77778],
          "937": [0, 0.69444, 0.08293, 0, 0.72222],
          "8211": [0, 0.44444, 0.08616, 0, 0.5],
          "8212": [0, 0.44444, 0.08616, 0, 1.0],
          "8216": [0, 0.69444, 0.07816, 0, 0.27778],
          "8217": [0, 0.69444, 0.07816, 0, 0.27778],
          "8220": [0, 0.69444, 0.14205, 0, 0.5],
          "8221": [0, 0.69444, 0.00316, 0, 0.5]
        },
        "SansSerif-Regular": {
          "33": [0, 0.69444, 0, 0, 0.31945],
          "34": [0, 0.69444, 0, 0, 0.5],
          "35": [0.19444, 0.69444, 0, 0, 0.83334],
          "36": [0.05556, 0.75, 0, 0, 0.5],
          "37": [0.05556, 0.75, 0, 0, 0.83334],
          "38": [0, 0.69444, 0, 0, 0.75834],
          "39": [0, 0.69444, 0, 0, 0.27778],
          "40": [0.25, 0.75, 0, 0, 0.38889],
          "41": [0.25, 0.75, 0, 0, 0.38889],
          "42": [0, 0.75, 0, 0, 0.5],
          "43": [0.08333, 0.58333, 0, 0, 0.77778],
          "44": [0.125, 0.08333, 0, 0, 0.27778],
          "45": [0, 0.44444, 0, 0, 0.33333],
          "46": [0, 0.08333, 0, 0, 0.27778],
          "47": [0.25, 0.75, 0, 0, 0.5],
          "48": [0, 0.65556, 0, 0, 0.5],
          "49": [0, 0.65556, 0, 0, 0.5],
          "50": [0, 0.65556, 0, 0, 0.5],
          "51": [0, 0.65556, 0, 0, 0.5],
          "52": [0, 0.65556, 0, 0, 0.5],
          "53": [0, 0.65556, 0, 0, 0.5],
          "54": [0, 0.65556, 0, 0, 0.5],
          "55": [0, 0.65556, 0, 0, 0.5],
          "56": [0, 0.65556, 0, 0, 0.5],
          "57": [0, 0.65556, 0, 0, 0.5],
          "58": [0, 0.44444, 0, 0, 0.27778],
          "59": [0.125, 0.44444, 0, 0, 0.27778],
          "61": [-0.13, 0.37, 0, 0, 0.77778],
          "63": [0, 0.69444, 0, 0, 0.47222],
          "64": [0, 0.69444, 0, 0, 0.66667],
          "65": [0, 0.69444, 0, 0, 0.66667],
          "66": [0, 0.69444, 0, 0, 0.66667],
          "67": [0, 0.69444, 0, 0, 0.63889],
          "68": [0, 0.69444, 0, 0, 0.72223],
          "69": [0, 0.69444, 0, 0, 0.59722],
          "70": [0, 0.69444, 0, 0, 0.56945],
          "71": [0, 0.69444, 0, 0, 0.66667],
          "72": [0, 0.69444, 0, 0, 0.70834],
          "73": [0, 0.69444, 0, 0, 0.27778],
          "74": [0, 0.69444, 0, 0, 0.47222],
          "75": [0, 0.69444, 0, 0, 0.69445],
          "76": [0, 0.69444, 0, 0, 0.54167],
          "77": [0, 0.69444, 0, 0, 0.875],
          "78": [0, 0.69444, 0, 0, 0.70834],
          "79": [0, 0.69444, 0, 0, 0.73611],
          "80": [0, 0.69444, 0, 0, 0.63889],
          "81": [0.125, 0.69444, 0, 0, 0.73611],
          "82": [0, 0.69444, 0, 0, 0.64584],
          "83": [0, 0.69444, 0, 0, 0.55556],
          "84": [0, 0.69444, 0, 0, 0.68056],
          "85": [0, 0.69444, 0, 0, 0.6875],
          "86": [0, 0.69444, 0.01389, 0, 0.66667],
          "87": [0, 0.69444, 0.01389, 0, 0.94445],
          "88": [0, 0.69444, 0, 0, 0.66667],
          "89": [0, 0.69444, 0.025, 0, 0.66667],
          "90": [0, 0.69444, 0, 0, 0.61111],
          "91": [0.25, 0.75, 0, 0, 0.28889],
          "93": [0.25, 0.75, 0, 0, 0.28889],
          "94": [0, 0.69444, 0, 0, 0.5],
          "95": [0.35, 0.09444, 0.02778, 0, 0.5],
          "97": [0, 0.44444, 0, 0, 0.48056],
          "98": [0, 0.69444, 0, 0, 0.51667],
          "99": [0, 0.44444, 0, 0, 0.44445],
          "100": [0, 0.69444, 0, 0, 0.51667],
          "101": [0, 0.44444, 0, 0, 0.44445],
          "102": [0, 0.69444, 0.06944, 0, 0.30556],
          "103": [0.19444, 0.44444, 0.01389, 0, 0.5],
          "104": [0, 0.69444, 0, 0, 0.51667],
          "105": [0, 0.67937, 0, 0, 0.23889],
          "106": [0.19444, 0.67937, 0, 0, 0.26667],
          "107": [0, 0.69444, 0, 0, 0.48889],
          "108": [0, 0.69444, 0, 0, 0.23889],
          "109": [0, 0.44444, 0, 0, 0.79445],
          "110": [0, 0.44444, 0, 0, 0.51667],
          "111": [0, 0.44444, 0, 0, 0.5],
          "112": [0.19444, 0.44444, 0, 0, 0.51667],
          "113": [0.19444, 0.44444, 0, 0, 0.51667],
          "114": [0, 0.44444, 0.01389, 0, 0.34167],
          "115": [0, 0.44444, 0, 0, 0.38333],
          "116": [0, 0.57143, 0, 0, 0.36111],
          "117": [0, 0.44444, 0, 0, 0.51667],
          "118": [0, 0.44444, 0.01389, 0, 0.46111],
          "119": [0, 0.44444, 0.01389, 0, 0.68334],
          "120": [0, 0.44444, 0, 0, 0.46111],
          "121": [0.19444, 0.44444, 0.01389, 0, 0.46111],
          "122": [0, 0.44444, 0, 0, 0.43472],
          "126": [0.35, 0.32659, 0, 0, 0.5],
          "168": [0, 0.67937, 0, 0, 0.5],
          "176": [0, 0.69444, 0, 0, 0.66667],
          "184": [0.17014, 0, 0, 0, 0.44445],
          "305": [0, 0.44444, 0, 0, 0.23889],
          "567": [0.19444, 0.44444, 0, 0, 0.26667],
          "710": [0, 0.69444, 0, 0, 0.5],
          "711": [0, 0.63194, 0, 0, 0.5],
          "713": [0, 0.60889, 0, 0, 0.5],
          "714": [0, 0.69444, 0, 0, 0.5],
          "715": [0, 0.69444, 0, 0, 0.5],
          "728": [0, 0.69444, 0, 0, 0.5],
          "729": [0, 0.67937, 0, 0, 0.27778],
          "730": [0, 0.69444, 0, 0, 0.66667],
          "732": [0, 0.67659, 0, 0, 0.5],
          "733": [0, 0.69444, 0, 0, 0.5],
          "915": [0, 0.69444, 0, 0, 0.54167],
          "916": [0, 0.69444, 0, 0, 0.83334],
          "920": [0, 0.69444, 0, 0, 0.77778],
          "923": [0, 0.69444, 0, 0, 0.61111],
          "926": [0, 0.69444, 0, 0, 0.66667],
          "928": [0, 0.69444, 0, 0, 0.70834],
          "931": [0, 0.69444, 0, 0, 0.72222],
          "933": [0, 0.69444, 0, 0, 0.77778],
          "934": [0, 0.69444, 0, 0, 0.72222],
          "936": [0, 0.69444, 0, 0, 0.77778],
          "937": [0, 0.69444, 0, 0, 0.72222],
          "8211": [0, 0.44444, 0.02778, 0, 0.5],
          "8212": [0, 0.44444, 0.02778, 0, 1.0],
          "8216": [0, 0.69444, 0, 0, 0.27778],
          "8217": [0, 0.69444, 0, 0, 0.27778],
          "8220": [0, 0.69444, 0, 0, 0.5],
          "8221": [0, 0.69444, 0, 0, 0.5]
        },
        "Script-Regular": {
          "65": [0, 0.7, 0.22925, 0, 0.80253],
          "66": [0, 0.7, 0.04087, 0, 0.90757],
          "67": [0, 0.7, 0.1689, 0, 0.66619],
          "68": [0, 0.7, 0.09371, 0, 0.77443],
          "69": [0, 0.7, 0.18583, 0, 0.56162],
          "70": [0, 0.7, 0.13634, 0, 0.89544],
          "71": [0, 0.7, 0.17322, 0, 0.60961],
          "72": [0, 0.7, 0.29694, 0, 0.96919],
          "73": [0, 0.7, 0.19189, 0, 0.80907],
          "74": [0.27778, 0.7, 0.19189, 0, 1.05159],
          "75": [0, 0.7, 0.31259, 0, 0.91364],
          "76": [0, 0.7, 0.19189, 0, 0.87373],
          "77": [0, 0.7, 0.15981, 0, 1.08031],
          "78": [0, 0.7, 0.3525, 0, 0.9015],
          "79": [0, 0.7, 0.08078, 0, 0.73787],
          "80": [0, 0.7, 0.08078, 0, 1.01262],
          "81": [0, 0.7, 0.03305, 0, 0.88282],
          "82": [0, 0.7, 0.06259, 0, 0.85],
          "83": [0, 0.7, 0.19189, 0, 0.86767],
          "84": [0, 0.7, 0.29087, 0, 0.74697],
          "85": [0, 0.7, 0.25815, 0, 0.79996],
          "86": [0, 0.7, 0.27523, 0, 0.62204],
          "87": [0, 0.7, 0.27523, 0, 0.80532],
          "88": [0, 0.7, 0.26006, 0, 0.94445],
          "89": [0, 0.7, 0.2939, 0, 0.70961],
          "90": [0, 0.7, 0.24037, 0, 0.8212]
        },
        "Size1-Regular": {
          "40": [0.35001, 0.85, 0, 0, 0.45834],
          "41": [0.35001, 0.85, 0, 0, 0.45834],
          "47": [0.35001, 0.85, 0, 0, 0.57778],
          "91": [0.35001, 0.85, 0, 0, 0.41667],
          "92": [0.35001, 0.85, 0, 0, 0.57778],
          "93": [0.35001, 0.85, 0, 0, 0.41667],
          "123": [0.35001, 0.85, 0, 0, 0.58334],
          "125": [0.35001, 0.85, 0, 0, 0.58334],
          "710": [0, 0.72222, 0, 0, 0.55556],
          "732": [0, 0.72222, 0, 0, 0.55556],
          "770": [0, 0.72222, 0, 0, 0.55556],
          "771": [0, 0.72222, 0, 0, 0.55556],
          "8214": [-0.00099, 0.601, 0, 0, 0.77778],
          "8593": [1e-05, 0.6, 0, 0, 0.66667],
          "8595": [1e-05, 0.6, 0, 0, 0.66667],
          "8657": [1e-05, 0.6, 0, 0, 0.77778],
          "8659": [1e-05, 0.6, 0, 0, 0.77778],
          "8719": [0.25001, 0.75, 0, 0, 0.94445],
          "8720": [0.25001, 0.75, 0, 0, 0.94445],
          "8721": [0.25001, 0.75, 0, 0, 1.05556],
          "8730": [0.35001, 0.85, 0, 0, 1.0],
          "8739": [-0.00599, 0.606, 0, 0, 0.33333],
          "8741": [-0.00599, 0.606, 0, 0, 0.55556],
          "8747": [0.30612, 0.805, 0.19445, 0, 0.47222],
          "8748": [0.306, 0.805, 0.19445, 0, 0.47222],
          "8749": [0.306, 0.805, 0.19445, 0, 0.47222],
          "8750": [0.30612, 0.805, 0.19445, 0, 0.47222],
          "8896": [0.25001, 0.75, 0, 0, 0.83334],
          "8897": [0.25001, 0.75, 0, 0, 0.83334],
          "8898": [0.25001, 0.75, 0, 0, 0.83334],
          "8899": [0.25001, 0.75, 0, 0, 0.83334],
          "8968": [0.35001, 0.85, 0, 0, 0.47222],
          "8969": [0.35001, 0.85, 0, 0, 0.47222],
          "8970": [0.35001, 0.85, 0, 0, 0.47222],
          "8971": [0.35001, 0.85, 0, 0, 0.47222],
          "9168": [-0.00099, 0.601, 0, 0, 0.66667],
          "10216": [0.35001, 0.85, 0, 0, 0.47222],
          "10217": [0.35001, 0.85, 0, 0, 0.47222],
          "10752": [0.25001, 0.75, 0, 0, 1.11111],
          "10753": [0.25001, 0.75, 0, 0, 1.11111],
          "10754": [0.25001, 0.75, 0, 0, 1.11111],
          "10756": [0.25001, 0.75, 0, 0, 0.83334],
          "10758": [0.25001, 0.75, 0, 0, 0.83334]
        },
        "Size2-Regular": {
          "40": [0.65002, 1.15, 0, 0, 0.59722],
          "41": [0.65002, 1.15, 0, 0, 0.59722],
          "47": [0.65002, 1.15, 0, 0, 0.81111],
          "91": [0.65002, 1.15, 0, 0, 0.47222],
          "92": [0.65002, 1.15, 0, 0, 0.81111],
          "93": [0.65002, 1.15, 0, 0, 0.47222],
          "123": [0.65002, 1.15, 0, 0, 0.66667],
          "125": [0.65002, 1.15, 0, 0, 0.66667],
          "710": [0, 0.75, 0, 0, 1.0],
          "732": [0, 0.75, 0, 0, 1.0],
          "770": [0, 0.75, 0, 0, 1.0],
          "771": [0, 0.75, 0, 0, 1.0],
          "8719": [0.55001, 1.05, 0, 0, 1.27778],
          "8720": [0.55001, 1.05, 0, 0, 1.27778],
          "8721": [0.55001, 1.05, 0, 0, 1.44445],
          "8730": [0.65002, 1.15, 0, 0, 1.0],
          "8747": [0.86225, 1.36, 0.44445, 0, 0.55556],
          "8748": [0.862, 1.36, 0.44445, 0, 0.55556],
          "8749": [0.862, 1.36, 0.44445, 0, 0.55556],
          "8750": [0.86225, 1.36, 0.44445, 0, 0.55556],
          "8896": [0.55001, 1.05, 0, 0, 1.11111],
          "8897": [0.55001, 1.05, 0, 0, 1.11111],
          "8898": [0.55001, 1.05, 0, 0, 1.11111],
          "8899": [0.55001, 1.05, 0, 0, 1.11111],
          "8968": [0.65002, 1.15, 0, 0, 0.52778],
          "8969": [0.65002, 1.15, 0, 0, 0.52778],
          "8970": [0.65002, 1.15, 0, 0, 0.52778],
          "8971": [0.65002, 1.15, 0, 0, 0.52778],
          "10216": [0.65002, 1.15, 0, 0, 0.61111],
          "10217": [0.65002, 1.15, 0, 0, 0.61111],
          "10752": [0.55001, 1.05, 0, 0, 1.51112],
          "10753": [0.55001, 1.05, 0, 0, 1.51112],
          "10754": [0.55001, 1.05, 0, 0, 1.51112],
          "10756": [0.55001, 1.05, 0, 0, 1.11111],
          "10758": [0.55001, 1.05, 0, 0, 1.11111]
        },
        "Size3-Regular": {
          "40": [0.95003, 1.45, 0, 0, 0.73611],
          "41": [0.95003, 1.45, 0, 0, 0.73611],
          "47": [0.95003, 1.45, 0, 0, 1.04445],
          "91": [0.95003, 1.45, 0, 0, 0.52778],
          "92": [0.95003, 1.45, 0, 0, 1.04445],
          "93": [0.95003, 1.45, 0, 0, 0.52778],
          "123": [0.95003, 1.45, 0, 0, 0.75],
          "125": [0.95003, 1.45, 0, 0, 0.75],
          "710": [0, 0.75, 0, 0, 1.44445],
          "732": [0, 0.75, 0, 0, 1.44445],
          "770": [0, 0.75, 0, 0, 1.44445],
          "771": [0, 0.75, 0, 0, 1.44445],
          "8730": [0.95003, 1.45, 0, 0, 1.0],
          "8968": [0.95003, 1.45, 0, 0, 0.58334],
          "8969": [0.95003, 1.45, 0, 0, 0.58334],
          "8970": [0.95003, 1.45, 0, 0, 0.58334],
          "8971": [0.95003, 1.45, 0, 0, 0.58334],
          "10216": [0.95003, 1.45, 0, 0, 0.75],
          "10217": [0.95003, 1.45, 0, 0, 0.75]
        },
        "Size4-Regular": {
          "40": [1.25003, 1.75, 0, 0, 0.79167],
          "41": [1.25003, 1.75, 0, 0, 0.79167],
          "47": [1.25003, 1.75, 0, 0, 1.27778],
          "91": [1.25003, 1.75, 0, 0, 0.58334],
          "92": [1.25003, 1.75, 0, 0, 1.27778],
          "93": [1.25003, 1.75, 0, 0, 0.58334],
          "123": [1.25003, 1.75, 0, 0, 0.80556],
          "125": [1.25003, 1.75, 0, 0, 0.80556],
          "710": [0, 0.825, 0, 0, 1.8889],
          "732": [0, 0.825, 0, 0, 1.8889],
          "770": [0, 0.825, 0, 0, 1.8889],
          "771": [0, 0.825, 0, 0, 1.8889],
          "8730": [1.25003, 1.75, 0, 0, 1.0],
          "8968": [1.25003, 1.75, 0, 0, 0.63889],
          "8969": [1.25003, 1.75, 0, 0, 0.63889],
          "8970": [1.25003, 1.75, 0, 0, 0.63889],
          "8971": [1.25003, 1.75, 0, 0, 0.63889],
          "9115": [0.64502, 1.155, 0, 0, 0.875],
          "9116": [1e-05, 0.6, 0, 0, 0.875],
          "9117": [0.64502, 1.155, 0, 0, 0.875],
          "9118": [0.64502, 1.155, 0, 0, 0.875],
          "9119": [1e-05, 0.6, 0, 0, 0.875],
          "9120": [0.64502, 1.155, 0, 0, 0.875],
          "9121": [0.64502, 1.155, 0, 0, 0.66667],
          "9122": [-0.00099, 0.601, 0, 0, 0.66667],
          "9123": [0.64502, 1.155, 0, 0, 0.66667],
          "9124": [0.64502, 1.155, 0, 0, 0.66667],
          "9125": [-0.00099, 0.601, 0, 0, 0.66667],
          "9126": [0.64502, 1.155, 0, 0, 0.66667],
          "9127": [1e-05, 0.9, 0, 0, 0.88889],
          "9128": [0.65002, 1.15, 0, 0, 0.88889],
          "9129": [0.90001, 0, 0, 0, 0.88889],
          "9130": [0, 0.3, 0, 0, 0.88889],
          "9131": [1e-05, 0.9, 0, 0, 0.88889],
          "9132": [0.65002, 1.15, 0, 0, 0.88889],
          "9133": [0.90001, 0, 0, 0, 0.88889],
          "9143": [0.88502, 0.915, 0, 0, 1.05556],
          "10216": [1.25003, 1.75, 0, 0, 0.80556],
          "10217": [1.25003, 1.75, 0, 0, 0.80556],
          "57344": [-0.00499, 0.605, 0, 0, 1.05556],
          "57345": [-0.00499, 0.605, 0, 0, 1.05556],
          "57680": [0, 0.12, 0, 0, 0.45],
          "57681": [0, 0.12, 0, 0, 0.45],
          "57682": [0, 0.12, 0, 0, 0.45],
          "57683": [0, 0.12, 0, 0, 0.45]
        },
        "Typewriter-Regular": {
          "32": [0, 0, 0, 0, 0.525],
          "33": [0, 0.61111, 0, 0, 0.525],
          "34": [0, 0.61111, 0, 0, 0.525],
          "35": [0, 0.61111, 0, 0, 0.525],
          "36": [0.08333, 0.69444, 0, 0, 0.525],
          "37": [0.08333, 0.69444, 0, 0, 0.525],
          "38": [0, 0.61111, 0, 0, 0.525],
          "39": [0, 0.61111, 0, 0, 0.525],
          "40": [0.08333, 0.69444, 0, 0, 0.525],
          "41": [0.08333, 0.69444, 0, 0, 0.525],
          "42": [0, 0.52083, 0, 0, 0.525],
          "43": [-0.08056, 0.53055, 0, 0, 0.525],
          "44": [0.13889, 0.125, 0, 0, 0.525],
          "45": [-0.08056, 0.53055, 0, 0, 0.525],
          "46": [0, 0.125, 0, 0, 0.525],
          "47": [0.08333, 0.69444, 0, 0, 0.525],
          "48": [0, 0.61111, 0, 0, 0.525],
          "49": [0, 0.61111, 0, 0, 0.525],
          "50": [0, 0.61111, 0, 0, 0.525],
          "51": [0, 0.61111, 0, 0, 0.525],
          "52": [0, 0.61111, 0, 0, 0.525],
          "53": [0, 0.61111, 0, 0, 0.525],
          "54": [0, 0.61111, 0, 0, 0.525],
          "55": [0, 0.61111, 0, 0, 0.525],
          "56": [0, 0.61111, 0, 0, 0.525],
          "57": [0, 0.61111, 0, 0, 0.525],
          "58": [0, 0.43056, 0, 0, 0.525],
          "59": [0.13889, 0.43056, 0, 0, 0.525],
          "60": [-0.05556, 0.55556, 0, 0, 0.525],
          "61": [-0.19549, 0.41562, 0, 0, 0.525],
          "62": [-0.05556, 0.55556, 0, 0, 0.525],
          "63": [0, 0.61111, 0, 0, 0.525],
          "64": [0, 0.61111, 0, 0, 0.525],
          "65": [0, 0.61111, 0, 0, 0.525],
          "66": [0, 0.61111, 0, 0, 0.525],
          "67": [0, 0.61111, 0, 0, 0.525],
          "68": [0, 0.61111, 0, 0, 0.525],
          "69": [0, 0.61111, 0, 0, 0.525],
          "70": [0, 0.61111, 0, 0, 0.525],
          "71": [0, 0.61111, 0, 0, 0.525],
          "72": [0, 0.61111, 0, 0, 0.525],
          "73": [0, 0.61111, 0, 0, 0.525],
          "74": [0, 0.61111, 0, 0, 0.525],
          "75": [0, 0.61111, 0, 0, 0.525],
          "76": [0, 0.61111, 0, 0, 0.525],
          "77": [0, 0.61111, 0, 0, 0.525],
          "78": [0, 0.61111, 0, 0, 0.525],
          "79": [0, 0.61111, 0, 0, 0.525],
          "80": [0, 0.61111, 0, 0, 0.525],
          "81": [0.13889, 0.61111, 0, 0, 0.525],
          "82": [0, 0.61111, 0, 0, 0.525],
          "83": [0, 0.61111, 0, 0, 0.525],
          "84": [0, 0.61111, 0, 0, 0.525],
          "85": [0, 0.61111, 0, 0, 0.525],
          "86": [0, 0.61111, 0, 0, 0.525],
          "87": [0, 0.61111, 0, 0, 0.525],
          "88": [0, 0.61111, 0, 0, 0.525],
          "89": [0, 0.61111, 0, 0, 0.525],
          "90": [0, 0.61111, 0, 0, 0.525],
          "91": [0.08333, 0.69444, 0, 0, 0.525],
          "92": [0.08333, 0.69444, 0, 0, 0.525],
          "93": [0.08333, 0.69444, 0, 0, 0.525],
          "94": [0, 0.61111, 0, 0, 0.525],
          "95": [0.09514, 0, 0, 0, 0.525],
          "96": [0, 0.61111, 0, 0, 0.525],
          "97": [0, 0.43056, 0, 0, 0.525],
          "98": [0, 0.61111, 0, 0, 0.525],
          "99": [0, 0.43056, 0, 0, 0.525],
          "100": [0, 0.61111, 0, 0, 0.525],
          "101": [0, 0.43056, 0, 0, 0.525],
          "102": [0, 0.61111, 0, 0, 0.525],
          "103": [0.22222, 0.43056, 0, 0, 0.525],
          "104": [0, 0.61111, 0, 0, 0.525],
          "105": [0, 0.61111, 0, 0, 0.525],
          "106": [0.22222, 0.61111, 0, 0, 0.525],
          "107": [0, 0.61111, 0, 0, 0.525],
          "108": [0, 0.61111, 0, 0, 0.525],
          "109": [0, 0.43056, 0, 0, 0.525],
          "110": [0, 0.43056, 0, 0, 0.525],
          "111": [0, 0.43056, 0, 0, 0.525],
          "112": [0.22222, 0.43056, 0, 0, 0.525],
          "113": [0.22222, 0.43056, 0, 0, 0.525],
          "114": [0, 0.43056, 0, 0, 0.525],
          "115": [0, 0.43056, 0, 0, 0.525],
          "116": [0, 0.55358, 0, 0, 0.525],
          "117": [0, 0.43056, 0, 0, 0.525],
          "118": [0, 0.43056, 0, 0, 0.525],
          "119": [0, 0.43056, 0, 0, 0.525],
          "120": [0, 0.43056, 0, 0, 0.525],
          "121": [0.22222, 0.43056, 0, 0, 0.525],
          "122": [0, 0.43056, 0, 0, 0.525],
          "123": [0.08333, 0.69444, 0, 0, 0.525],
          "124": [0.08333, 0.69444, 0, 0, 0.525],
          "125": [0.08333, 0.69444, 0, 0, 0.525],
          "126": [0, 0.61111, 0, 0, 0.525],
          "127": [0, 0.61111, 0, 0, 0.525],
          "160": [0, 0, 0, 0, 0.525],
          "176": [0, 0.61111, 0, 0, 0.525],
          "184": [0.19445, 0, 0, 0, 0.525],
          "305": [0, 0.43056, 0, 0, 0.525],
          "567": [0.22222, 0.43056, 0, 0, 0.525],
          "711": [0, 0.56597, 0, 0, 0.525],
          "713": [0, 0.56555, 0, 0, 0.525],
          "714": [0, 0.61111, 0, 0, 0.525],
          "715": [0, 0.61111, 0, 0, 0.525],
          "728": [0, 0.61111, 0, 0, 0.525],
          "730": [0, 0.61111, 0, 0, 0.525],
          "770": [0, 0.61111, 0, 0, 0.525],
          "771": [0, 0.61111, 0, 0, 0.525],
          "776": [0, 0.61111, 0, 0, 0.525],
          "915": [0, 0.61111, 0, 0, 0.525],
          "916": [0, 0.61111, 0, 0, 0.525],
          "920": [0, 0.61111, 0, 0, 0.525],
          "923": [0, 0.61111, 0, 0, 0.525],
          "926": [0, 0.61111, 0, 0, 0.525],
          "928": [0, 0.61111, 0, 0, 0.525],
          "931": [0, 0.61111, 0, 0, 0.525],
          "933": [0, 0.61111, 0, 0, 0.525],
          "934": [0, 0.61111, 0, 0, 0.525],
          "936": [0, 0.61111, 0, 0, 0.525],
          "937": [0, 0.61111, 0, 0, 0.525],
          "8216": [0, 0.61111, 0, 0, 0.525],
          "8217": [0, 0.61111, 0, 0, 0.525],
          "8242": [0, 0.61111, 0, 0, 0.525],
          "9251": [0.11111, 0.21944, 0, 0, 0.525]
        }
      }; // CONCATENATED MODULE: ./src/fontMetrics.js

      /**
       * This file contains metrics regarding fonts and individual symbols. The sigma
       * and xi variables, as well as the metricMap map contain data extracted from
       * TeX, TeX font metrics, and the TTF files. These data are then exposed via the
       * `metrics` variable and the getCharacterMetrics function.
       */
      // In TeX, there are actually three sets of dimensions, one for each of
      // textstyle (size index 5 and higher: >=9pt), scriptstyle (size index 3 and 4:
      // 7-8pt), and scriptscriptstyle (size index 1 and 2: 5-6pt).  These are
      // provided in the the arrays below, in that order.
      //
      // The font metrics are stored in fonts cmsy10, cmsy7, and cmsy5 respsectively.
      // This was determined by running the following script:
      //
      //     latex -interaction=nonstopmode \
      //     '\documentclass{article}\usepackage{amsmath}\begin{document}' \
      //     '$a$ \expandafter\show\the\textfont2' \
      //     '\expandafter\show\the\scriptfont2' \
      //     '\expandafter\show\the\scriptscriptfont2' \
      //     '\stop'
      //
      // The metrics themselves were retreived using the following commands:
      //
      //     tftopl cmsy10
      //     tftopl cmsy7
      //     tftopl cmsy5
      //
      // The output of each of these commands is quite lengthy.  The only part we
      // care about is the FONTDIMEN section. Each value is measured in EMs.

      var sigmasAndXis = {
        slant: [0.250, 0.250, 0.250],
        // sigma1
        space: [0.000, 0.000, 0.000],
        // sigma2
        stretch: [0.000, 0.000, 0.000],
        // sigma3
        shrink: [0.000, 0.000, 0.000],
        // sigma4
        xHeight: [0.431, 0.431, 0.431],
        // sigma5
        quad: [1.000, 1.171, 1.472],
        // sigma6
        extraSpace: [0.000, 0.000, 0.000],
        // sigma7
        num1: [0.677, 0.732, 0.925],
        // sigma8
        num2: [0.394, 0.384, 0.387],
        // sigma9
        num3: [0.444, 0.471, 0.504],
        // sigma10
        denom1: [0.686, 0.752, 1.025],
        // sigma11
        denom2: [0.345, 0.344, 0.532],
        // sigma12
        sup1: [0.413, 0.503, 0.504],
        // sigma13
        sup2: [0.363, 0.431, 0.404],
        // sigma14
        sup3: [0.289, 0.286, 0.294],
        // sigma15
        sub1: [0.150, 0.143, 0.200],
        // sigma16
        sub2: [0.247, 0.286, 0.400],
        // sigma17
        supDrop: [0.386, 0.353, 0.494],
        // sigma18
        subDrop: [0.050, 0.071, 0.100],
        // sigma19
        delim1: [2.390, 1.700, 1.980],
        // sigma20
        delim2: [1.010, 1.157, 1.420],
        // sigma21
        axisHeight: [0.250, 0.250, 0.250],
        // sigma22
        // These font metrics are extracted from TeX by using tftopl on cmex10.tfm;
        // they correspond to the font parameters of the extension fonts (family 3).
        // See the TeXbook, page 441. In AMSTeX, the extension fonts scale; to
        // match cmex7, we'd use cmex7.tfm values for script and scriptscript
        // values.
        defaultRuleThickness: [0.04, 0.049, 0.049],
        // xi8; cmex7: 0.049
        bigOpSpacing1: [0.111, 0.111, 0.111],
        // xi9
        bigOpSpacing2: [0.166, 0.166, 0.166],
        // xi10
        bigOpSpacing3: [0.2, 0.2, 0.2],
        // xi11
        bigOpSpacing4: [0.6, 0.611, 0.611],
        // xi12; cmex7: 0.611
        bigOpSpacing5: [0.1, 0.143, 0.143],
        // xi13; cmex7: 0.143
        // The \sqrt rule width is taken from the height of the surd character.
        // Since we use the same font at all sizes, this thickness doesn't scale.
        sqrtRuleThickness: [0.04, 0.04, 0.04],
        // This value determines how large a pt is, for metrics which are defined
        // in terms of pts.
        // This value is also used in katex.less; if you change it make sure the
        // values match.
        ptPerEm: [10.0, 10.0, 10.0],
        // The space between adjacent `|` columns in an array definition. From
        // `\showthe\doublerulesep` in LaTeX. Equals 2.0 / ptPerEm.
        doubleRuleSep: [0.2, 0.2, 0.2]
      }; // This map contains a mapping from font name and character code to character
      // metrics, including height, depth, italic correction, and skew (kern from the
      // character to the corresponding \skewchar)
      // This map is generated via `make metrics`. It should not be changed manually.
      // These are very rough approximations.  We default to Times New Roman which
      // should have Latin-1 and Cyrillic characters, but may not depending on the
      // operating system.  The metrics do not account for extra height from the
      // accents.  In the case of Cyrillic characters which have both ascenders and
      // descenders we prefer approximations with ascenders, primarily to prevent
      // the fraction bar or root line from intersecting the glyph.
      // TODO(kevinb) allow union of multiple glyph metrics for better accuracy.

      var extraCharacterMap = {
        // Latin-1
        'Å': 'A',
        'Ç': 'C',
        'Ð': 'D',
        'Þ': 'o',
        'å': 'a',
        'ç': 'c',
        'ð': 'd',
        'þ': 'o',
        // Cyrillic
        'А': 'A',
        'Б': 'B',
        'В': 'B',
        'Г': 'F',
        'Д': 'A',
        'Е': 'E',
        'Ж': 'K',
        'З': '3',
        'И': 'N',
        'Й': 'N',
        'К': 'K',
        'Л': 'N',
        'М': 'M',
        'Н': 'H',
        'О': 'O',
        'П': 'N',
        'Р': 'P',
        'С': 'C',
        'Т': 'T',
        'У': 'y',
        'Ф': 'O',
        'Х': 'X',
        'Ц': 'U',
        'Ч': 'h',
        'Ш': 'W',
        'Щ': 'W',
        'Ъ': 'B',
        'Ы': 'X',
        'Ь': 'B',
        'Э': '3',
        'Ю': 'X',
        'Я': 'R',
        'а': 'a',
        'б': 'b',
        'в': 'a',
        'г': 'r',
        'д': 'y',
        'е': 'e',
        'ж': 'm',
        'з': 'e',
        'и': 'n',
        'й': 'n',
        'к': 'n',
        'л': 'n',
        'м': 'm',
        'н': 'n',
        'о': 'o',
        'п': 'n',
        'р': 'p',
        'с': 'c',
        'т': 'o',
        'у': 'y',
        'ф': 'b',
        'х': 'x',
        'ц': 'n',
        'ч': 'n',
        'ш': 'w',
        'щ': 'w',
        'ъ': 'a',
        'ы': 'm',
        'ь': 'a',
        'э': 'e',
        'ю': 'm',
        'я': 'r'
      };
      /**
       * This function adds new font metrics to default metricMap
       * It can also override existing metrics
       */

      function setFontMetrics(fontName, metrics) {
        fontMetricsData[fontName] = metrics;
      }
      /**
       * This function is a convenience function for looking up information in the
       * metricMap table. It takes a character as a string, and a font.
       *
       * Note: the `width` property may be undefined if fontMetricsData.js wasn't
       * built using `Make extended_metrics`.
       */


      function getCharacterMetrics(character, font, mode) {
        if (!fontMetricsData[font]) {
          throw new Error("Font metrics not found for font: " + font + ".");
        }

        var ch = character.charCodeAt(0);
        var metrics = fontMetricsData[font][ch];

        if (!metrics && character[0] in extraCharacterMap) {
          ch = extraCharacterMap[character[0]].charCodeAt(0);
          metrics = fontMetricsData[font][ch];
        }

        if (!metrics && mode === 'text') {
          // We don't typically have font metrics for Asian scripts.
          // But since we support them in text mode, we need to return
          // some sort of metrics.
          // So if the character is in a script we support but we
          // don't have metrics for it, just use the metrics for
          // the Latin capital letter M. This is close enough because
          // we (currently) only care about the height of the glpyh
          // not its width.
          if (supportedCodepoint(ch)) {
            metrics = fontMetricsData[font][77]; // 77 is the charcode for 'M'
          }
        }

        if (metrics) {
          return {
            depth: metrics[0],
            height: metrics[1],
            italic: metrics[2],
            skew: metrics[3],
            width: metrics[4]
          };
        }
      }

      var fontMetricsBySizeIndex = {};
      /**
       * Get the font metrics for a given size.
       */

      function getGlobalMetrics(size) {
        var sizeIndex;

        if (size >= 5) {
          sizeIndex = 0;
        } else if (size >= 3) {
          sizeIndex = 1;
        } else {
          sizeIndex = 2;
        }

        if (!fontMetricsBySizeIndex[sizeIndex]) {
          var metrics = fontMetricsBySizeIndex[sizeIndex] = {
            cssEmPerMu: sigmasAndXis.quad[sizeIndex] / 18
          };

          for (var key in sigmasAndXis) {
            if (sigmasAndXis.hasOwnProperty(key)) {
              metrics[key] = sigmasAndXis[key][sizeIndex];
            }
          }
        }

        return fontMetricsBySizeIndex[sizeIndex];
      } // CONCATENATED MODULE: ./src/symbols.js

      /**
       * This file holds a list of all no-argument functions and single-character
       * symbols (like 'a' or ';').
       *
       * For each of the symbols, there are three properties they can have:
       * - font (required): the font to be used for this symbol. Either "main" (the
           normal font), or "ams" (the ams fonts).
       * - group (required): the ParseNode group type the symbol should have (i.e.
           "textord", "mathord", etc).
           See https://github.com/KaTeX/KaTeX/wiki/Examining-TeX#group-types
       * - replace: the character that this symbol or function should be
       *   replaced with (i.e. "\phi" has a replace value of "\u03d5", the phi
       *   character in the main font).
       *
       * The outermost map in the table indicates what mode the symbols should be
       * accepted in (e.g. "math" or "text").
       */
      // Some of these have a "-token" suffix since these are also used as `ParseNode`
      // types for raw text tokens, and we want to avoid conflicts with higher-level
      // `ParseNode` types. These `ParseNode`s are constructed within `Parser` by
      // looking up the `symbols` map.


      var ATOMS = {
        "bin": 1,
        "close": 1,
        "inner": 1,
        "open": 1,
        "punct": 1,
        "rel": 1
      };
      var NON_ATOMS = {
        "accent-token": 1,
        "mathord": 1,
        "op-token": 1,
        "spacing": 1,
        "textord": 1
      };
      var symbols = {
        "math": {},
        "text": {}
      };
      /* harmony default export */

      var src_symbols = symbols;
      /** `acceptUnicodeChar = true` is only applicable if `replace` is set. */

      function defineSymbol(mode, font, group, replace, name, acceptUnicodeChar) {
        symbols[mode][name] = {
          font: font,
          group: group,
          replace: replace
        };

        if (acceptUnicodeChar && replace) {
          symbols[mode][replace] = symbols[mode][name];
        }
      } // Some abbreviations for commonly used strings.
      // This helps minify the code, and also spotting typos using jshint.
      // modes:


      var symbols_math = "math";
      var symbols_text = "text"; // fonts:

      var main = "main";
      var ams = "ams"; // groups:

      var symbols_accent = "accent-token";
      var bin = "bin";
      var symbols_close = "close";
      var symbols_inner = "inner";
      var mathord = "mathord";
      var op = "op-token";
      var symbols_open = "open";
      var punct = "punct";
      var rel = "rel";
      var symbols_spacing = "spacing";
      var symbols_textord = "textord"; // Now comes the symbol table
      // Relation Symbols

      defineSymbol(symbols_math, main, rel, "\u2261", "\\equiv", true);
      defineSymbol(symbols_math, main, rel, "\u227A", "\\prec", true);
      defineSymbol(symbols_math, main, rel, "\u227B", "\\succ", true);
      defineSymbol(symbols_math, main, rel, "\u223C", "\\sim", true);
      defineSymbol(symbols_math, main, rel, "\u22A5", "\\perp");
      defineSymbol(symbols_math, main, rel, "\u2AAF", "\\preceq", true);
      defineSymbol(symbols_math, main, rel, "\u2AB0", "\\succeq", true);
      defineSymbol(symbols_math, main, rel, "\u2243", "\\simeq", true);
      defineSymbol(symbols_math, main, rel, "\u2223", "\\mid", true);
      defineSymbol(symbols_math, main, rel, "\u226A", "\\ll", true);
      defineSymbol(symbols_math, main, rel, "\u226B", "\\gg", true);
      defineSymbol(symbols_math, main, rel, "\u224D", "\\asymp", true);
      defineSymbol(symbols_math, main, rel, "\u2225", "\\parallel");
      defineSymbol(symbols_math, main, rel, "\u22C8", "\\bowtie", true);
      defineSymbol(symbols_math, main, rel, "\u2323", "\\smile", true);
      defineSymbol(symbols_math, main, rel, "\u2291", "\\sqsubseteq", true);
      defineSymbol(symbols_math, main, rel, "\u2292", "\\sqsupseteq", true);
      defineSymbol(symbols_math, main, rel, "\u2250", "\\doteq", true);
      defineSymbol(symbols_math, main, rel, "\u2322", "\\frown", true);
      defineSymbol(symbols_math, main, rel, "\u220B", "\\ni", true);
      defineSymbol(symbols_math, main, rel, "\u221D", "\\propto", true);
      defineSymbol(symbols_math, main, rel, "\u22A2", "\\vdash", true);
      defineSymbol(symbols_math, main, rel, "\u22A3", "\\dashv", true);
      defineSymbol(symbols_math, main, rel, "\u220B", "\\owns"); // Punctuation

      defineSymbol(symbols_math, main, punct, ".", "\\ldotp");
      defineSymbol(symbols_math, main, punct, "\u22C5", "\\cdotp"); // Misc Symbols

      defineSymbol(symbols_math, main, symbols_textord, "#", "\\#");
      defineSymbol(symbols_text, main, symbols_textord, "#", "\\#");
      defineSymbol(symbols_math, main, symbols_textord, "&", "\\&");
      defineSymbol(symbols_text, main, symbols_textord, "&", "\\&");
      defineSymbol(symbols_math, main, symbols_textord, "\u2135", "\\aleph", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u2200", "\\forall", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u210F", "\\hbar", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u2203", "\\exists", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u2207", "\\nabla", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u266D", "\\flat", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u2113", "\\ell", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u266E", "\\natural", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u2663", "\\clubsuit", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u2118", "\\wp", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u266F", "\\sharp", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u2662", "\\diamondsuit", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u211C", "\\Re", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u2661", "\\heartsuit", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u2111", "\\Im", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u2660", "\\spadesuit", true);
      defineSymbol(symbols_text, main, symbols_textord, "\xA7", "\\S", true);
      defineSymbol(symbols_text, main, symbols_textord, "\xB6", "\\P", true); // Math and Text

      defineSymbol(symbols_math, main, symbols_textord, "\u2020", "\\dag");
      defineSymbol(symbols_text, main, symbols_textord, "\u2020", "\\dag");
      defineSymbol(symbols_text, main, symbols_textord, "\u2020", "\\textdagger");
      defineSymbol(symbols_math, main, symbols_textord, "\u2021", "\\ddag");
      defineSymbol(symbols_text, main, symbols_textord, "\u2021", "\\ddag");
      defineSymbol(symbols_text, main, symbols_textord, "\u2021", "\\textdaggerdbl"); // Large Delimiters

      defineSymbol(symbols_math, main, symbols_close, "\u23B1", "\\rmoustache", true);
      defineSymbol(symbols_math, main, symbols_open, "\u23B0", "\\lmoustache", true);
      defineSymbol(symbols_math, main, symbols_close, "\u27EF", "\\rgroup", true);
      defineSymbol(symbols_math, main, symbols_open, "\u27EE", "\\lgroup", true); // Binary Operators

      defineSymbol(symbols_math, main, bin, "\u2213", "\\mp", true);
      defineSymbol(symbols_math, main, bin, "\u2296", "\\ominus", true);
      defineSymbol(symbols_math, main, bin, "\u228E", "\\uplus", true);
      defineSymbol(symbols_math, main, bin, "\u2293", "\\sqcap", true);
      defineSymbol(symbols_math, main, bin, "\u2217", "\\ast");
      defineSymbol(symbols_math, main, bin, "\u2294", "\\sqcup", true);
      defineSymbol(symbols_math, main, bin, "\u25EF", "\\bigcirc");
      defineSymbol(symbols_math, main, bin, "\u2219", "\\bullet");
      defineSymbol(symbols_math, main, bin, "\u2021", "\\ddagger");
      defineSymbol(symbols_math, main, bin, "\u2240", "\\wr", true);
      defineSymbol(symbols_math, main, bin, "\u2A3F", "\\amalg");
      defineSymbol(symbols_math, main, bin, "&", "\\And"); // from amsmath
      // Arrow Symbols

      defineSymbol(symbols_math, main, rel, "\u27F5", "\\longleftarrow", true);
      defineSymbol(symbols_math, main, rel, "\u21D0", "\\Leftarrow", true);
      defineSymbol(symbols_math, main, rel, "\u27F8", "\\Longleftarrow", true);
      defineSymbol(symbols_math, main, rel, "\u27F6", "\\longrightarrow", true);
      defineSymbol(symbols_math, main, rel, "\u21D2", "\\Rightarrow", true);
      defineSymbol(symbols_math, main, rel, "\u27F9", "\\Longrightarrow", true);
      defineSymbol(symbols_math, main, rel, "\u2194", "\\leftrightarrow", true);
      defineSymbol(symbols_math, main, rel, "\u27F7", "\\longleftrightarrow", true);
      defineSymbol(symbols_math, main, rel, "\u21D4", "\\Leftrightarrow", true);
      defineSymbol(symbols_math, main, rel, "\u27FA", "\\Longleftrightarrow", true);
      defineSymbol(symbols_math, main, rel, "\u21A6", "\\mapsto", true);
      defineSymbol(symbols_math, main, rel, "\u27FC", "\\longmapsto", true);
      defineSymbol(symbols_math, main, rel, "\u2197", "\\nearrow", true);
      defineSymbol(symbols_math, main, rel, "\u21A9", "\\hookleftarrow", true);
      defineSymbol(symbols_math, main, rel, "\u21AA", "\\hookrightarrow", true);
      defineSymbol(symbols_math, main, rel, "\u2198", "\\searrow", true);
      defineSymbol(symbols_math, main, rel, "\u21BC", "\\leftharpoonup", true);
      defineSymbol(symbols_math, main, rel, "\u21C0", "\\rightharpoonup", true);
      defineSymbol(symbols_math, main, rel, "\u2199", "\\swarrow", true);
      defineSymbol(symbols_math, main, rel, "\u21BD", "\\leftharpoondown", true);
      defineSymbol(symbols_math, main, rel, "\u21C1", "\\rightharpoondown", true);
      defineSymbol(symbols_math, main, rel, "\u2196", "\\nwarrow", true);
      defineSymbol(symbols_math, main, rel, "\u21CC", "\\rightleftharpoons", true); // AMS Negated Binary Relations

      defineSymbol(symbols_math, ams, rel, "\u226E", "\\nless", true); // Symbol names preceeded by "@" each have a corresponding macro.

      defineSymbol(symbols_math, ams, rel, "\uE010", "\\@nleqslant");
      defineSymbol(symbols_math, ams, rel, "\uE011", "\\@nleqq");
      defineSymbol(symbols_math, ams, rel, "\u2A87", "\\lneq", true);
      defineSymbol(symbols_math, ams, rel, "\u2268", "\\lneqq", true);
      defineSymbol(symbols_math, ams, rel, "\uE00C", "\\@lvertneqq");
      defineSymbol(symbols_math, ams, rel, "\u22E6", "\\lnsim", true);
      defineSymbol(symbols_math, ams, rel, "\u2A89", "\\lnapprox", true);
      defineSymbol(symbols_math, ams, rel, "\u2280", "\\nprec", true); // unicode-math maps \u22e0 to \npreccurlyeq. We'll use the AMS synonym.

      defineSymbol(symbols_math, ams, rel, "\u22E0", "\\npreceq", true);
      defineSymbol(symbols_math, ams, rel, "\u22E8", "\\precnsim", true);
      defineSymbol(symbols_math, ams, rel, "\u2AB9", "\\precnapprox", true);
      defineSymbol(symbols_math, ams, rel, "\u2241", "\\nsim", true);
      defineSymbol(symbols_math, ams, rel, "\uE006", "\\@nshortmid");
      defineSymbol(symbols_math, ams, rel, "\u2224", "\\nmid", true);
      defineSymbol(symbols_math, ams, rel, "\u22AC", "\\nvdash", true);
      defineSymbol(symbols_math, ams, rel, "\u22AD", "\\nvDash", true);
      defineSymbol(symbols_math, ams, rel, "\u22EA", "\\ntriangleleft");
      defineSymbol(symbols_math, ams, rel, "\u22EC", "\\ntrianglelefteq", true);
      defineSymbol(symbols_math, ams, rel, "\u228A", "\\subsetneq", true);
      defineSymbol(symbols_math, ams, rel, "\uE01A", "\\@varsubsetneq");
      defineSymbol(symbols_math, ams, rel, "\u2ACB", "\\subsetneqq", true);
      defineSymbol(symbols_math, ams, rel, "\uE017", "\\@varsubsetneqq");
      defineSymbol(symbols_math, ams, rel, "\u226F", "\\ngtr", true);
      defineSymbol(symbols_math, ams, rel, "\uE00F", "\\@ngeqslant");
      defineSymbol(symbols_math, ams, rel, "\uE00E", "\\@ngeqq");
      defineSymbol(symbols_math, ams, rel, "\u2A88", "\\gneq", true);
      defineSymbol(symbols_math, ams, rel, "\u2269", "\\gneqq", true);
      defineSymbol(symbols_math, ams, rel, "\uE00D", "\\@gvertneqq");
      defineSymbol(symbols_math, ams, rel, "\u22E7", "\\gnsim", true);
      defineSymbol(symbols_math, ams, rel, "\u2A8A", "\\gnapprox", true);
      defineSymbol(symbols_math, ams, rel, "\u2281", "\\nsucc", true); // unicode-math maps \u22e1 to \nsucccurlyeq. We'll use the AMS synonym.

      defineSymbol(symbols_math, ams, rel, "\u22E1", "\\nsucceq", true);
      defineSymbol(symbols_math, ams, rel, "\u22E9", "\\succnsim", true);
      defineSymbol(symbols_math, ams, rel, "\u2ABA", "\\succnapprox", true); // unicode-math maps \u2246 to \simneqq. We'll use the AMS synonym.

      defineSymbol(symbols_math, ams, rel, "\u2246", "\\ncong", true);
      defineSymbol(symbols_math, ams, rel, "\uE007", "\\@nshortparallel");
      defineSymbol(symbols_math, ams, rel, "\u2226", "\\nparallel", true);
      defineSymbol(symbols_math, ams, rel, "\u22AF", "\\nVDash", true);
      defineSymbol(symbols_math, ams, rel, "\u22EB", "\\ntriangleright");
      defineSymbol(symbols_math, ams, rel, "\u22ED", "\\ntrianglerighteq", true);
      defineSymbol(symbols_math, ams, rel, "\uE018", "\\@nsupseteqq");
      defineSymbol(symbols_math, ams, rel, "\u228B", "\\supsetneq", true);
      defineSymbol(symbols_math, ams, rel, "\uE01B", "\\@varsupsetneq");
      defineSymbol(symbols_math, ams, rel, "\u2ACC", "\\supsetneqq", true);
      defineSymbol(symbols_math, ams, rel, "\uE019", "\\@varsupsetneqq");
      defineSymbol(symbols_math, ams, rel, "\u22AE", "\\nVdash", true);
      defineSymbol(symbols_math, ams, rel, "\u2AB5", "\\precneqq", true);
      defineSymbol(symbols_math, ams, rel, "\u2AB6", "\\succneqq", true);
      defineSymbol(symbols_math, ams, rel, "\uE016", "\\@nsubseteqq");
      defineSymbol(symbols_math, ams, bin, "\u22B4", "\\unlhd");
      defineSymbol(symbols_math, ams, bin, "\u22B5", "\\unrhd"); // AMS Negated Arrows

      defineSymbol(symbols_math, ams, rel, "\u219A", "\\nleftarrow", true);
      defineSymbol(symbols_math, ams, rel, "\u219B", "\\nrightarrow", true);
      defineSymbol(symbols_math, ams, rel, "\u21CD", "\\nLeftarrow", true);
      defineSymbol(symbols_math, ams, rel, "\u21CF", "\\nRightarrow", true);
      defineSymbol(symbols_math, ams, rel, "\u21AE", "\\nleftrightarrow", true);
      defineSymbol(symbols_math, ams, rel, "\u21CE", "\\nLeftrightarrow", true); // AMS Misc

      defineSymbol(symbols_math, ams, rel, "\u25B3", "\\vartriangle");
      defineSymbol(symbols_math, ams, symbols_textord, "\u210F", "\\hslash");
      defineSymbol(symbols_math, ams, symbols_textord, "\u25BD", "\\triangledown");
      defineSymbol(symbols_math, ams, symbols_textord, "\u25CA", "\\lozenge");
      defineSymbol(symbols_math, ams, symbols_textord, "\u24C8", "\\circledS");
      defineSymbol(symbols_math, ams, symbols_textord, "\xAE", "\\circledR");
      defineSymbol(symbols_text, ams, symbols_textord, "\xAE", "\\circledR");
      defineSymbol(symbols_math, ams, symbols_textord, "\u2221", "\\measuredangle", true);
      defineSymbol(symbols_math, ams, symbols_textord, "\u2204", "\\nexists");
      defineSymbol(symbols_math, ams, symbols_textord, "\u2127", "\\mho");
      defineSymbol(symbols_math, ams, symbols_textord, "\u2132", "\\Finv", true);
      defineSymbol(symbols_math, ams, symbols_textord, "\u2141", "\\Game", true);
      defineSymbol(symbols_math, ams, symbols_textord, "\u2035", "\\backprime");
      defineSymbol(symbols_math, ams, symbols_textord, "\u25B2", "\\blacktriangle");
      defineSymbol(symbols_math, ams, symbols_textord, "\u25BC", "\\blacktriangledown");
      defineSymbol(symbols_math, ams, symbols_textord, "\u25A0", "\\blacksquare");
      defineSymbol(symbols_math, ams, symbols_textord, "\u29EB", "\\blacklozenge");
      defineSymbol(symbols_math, ams, symbols_textord, "\u2605", "\\bigstar");
      defineSymbol(symbols_math, ams, symbols_textord, "\u2222", "\\sphericalangle", true);
      defineSymbol(symbols_math, ams, symbols_textord, "\u2201", "\\complement", true); // unicode-math maps U+F0 (ð) to \matheth. We map to AMS function \eth

      defineSymbol(symbols_math, ams, symbols_textord, "\xF0", "\\eth", true);
      defineSymbol(symbols_math, ams, symbols_textord, "\u2571", "\\diagup");
      defineSymbol(symbols_math, ams, symbols_textord, "\u2572", "\\diagdown");
      defineSymbol(symbols_math, ams, symbols_textord, "\u25A1", "\\square");
      defineSymbol(symbols_math, ams, symbols_textord, "\u25A1", "\\Box");
      defineSymbol(symbols_math, ams, symbols_textord, "\u25CA", "\\Diamond"); // unicode-math maps U+A5 to \mathyen. We map to AMS function \yen

      defineSymbol(symbols_math, ams, symbols_textord, "\xA5", "\\yen", true);
      defineSymbol(symbols_text, ams, symbols_textord, "\xA5", "\\yen", true);
      defineSymbol(symbols_math, ams, symbols_textord, "\u2713", "\\checkmark", true);
      defineSymbol(symbols_text, ams, symbols_textord, "\u2713", "\\checkmark"); // AMS Hebrew

      defineSymbol(symbols_math, ams, symbols_textord, "\u2136", "\\beth", true);
      defineSymbol(symbols_math, ams, symbols_textord, "\u2138", "\\daleth", true);
      defineSymbol(symbols_math, ams, symbols_textord, "\u2137", "\\gimel", true); // AMS Greek

      defineSymbol(symbols_math, ams, symbols_textord, "\u03DD", "\\digamma");
      defineSymbol(symbols_math, ams, symbols_textord, "\u03F0", "\\varkappa"); // AMS Delimiters

      defineSymbol(symbols_math, ams, symbols_open, "\u250C", "\\ulcorner", true);
      defineSymbol(symbols_math, ams, symbols_close, "\u2510", "\\urcorner", true);
      defineSymbol(symbols_math, ams, symbols_open, "\u2514", "\\llcorner", true);
      defineSymbol(symbols_math, ams, symbols_close, "\u2518", "\\lrcorner", true); // AMS Binary Relations

      defineSymbol(symbols_math, ams, rel, "\u2266", "\\leqq", true);
      defineSymbol(symbols_math, ams, rel, "\u2A7D", "\\leqslant", true);
      defineSymbol(symbols_math, ams, rel, "\u2A95", "\\eqslantless", true);
      defineSymbol(symbols_math, ams, rel, "\u2272", "\\lesssim", true);
      defineSymbol(symbols_math, ams, rel, "\u2A85", "\\lessapprox", true);
      defineSymbol(symbols_math, ams, rel, "\u224A", "\\approxeq", true);
      defineSymbol(symbols_math, ams, bin, "\u22D6", "\\lessdot");
      defineSymbol(symbols_math, ams, rel, "\u22D8", "\\lll", true);
      defineSymbol(symbols_math, ams, rel, "\u2276", "\\lessgtr", true);
      defineSymbol(symbols_math, ams, rel, "\u22DA", "\\lesseqgtr", true);
      defineSymbol(symbols_math, ams, rel, "\u2A8B", "\\lesseqqgtr", true);
      defineSymbol(symbols_math, ams, rel, "\u2251", "\\doteqdot");
      defineSymbol(symbols_math, ams, rel, "\u2253", "\\risingdotseq", true);
      defineSymbol(symbols_math, ams, rel, "\u2252", "\\fallingdotseq", true);
      defineSymbol(symbols_math, ams, rel, "\u223D", "\\backsim", true);
      defineSymbol(symbols_math, ams, rel, "\u22CD", "\\backsimeq", true);
      defineSymbol(symbols_math, ams, rel, "\u2AC5", "\\subseteqq", true);
      defineSymbol(symbols_math, ams, rel, "\u22D0", "\\Subset", true);
      defineSymbol(symbols_math, ams, rel, "\u228F", "\\sqsubset", true);
      defineSymbol(symbols_math, ams, rel, "\u227C", "\\preccurlyeq", true);
      defineSymbol(symbols_math, ams, rel, "\u22DE", "\\curlyeqprec", true);
      defineSymbol(symbols_math, ams, rel, "\u227E", "\\precsim", true);
      defineSymbol(symbols_math, ams, rel, "\u2AB7", "\\precapprox", true);
      defineSymbol(symbols_math, ams, rel, "\u22B2", "\\vartriangleleft");
      defineSymbol(symbols_math, ams, rel, "\u22B4", "\\trianglelefteq");
      defineSymbol(symbols_math, ams, rel, "\u22A8", "\\vDash", true);
      defineSymbol(symbols_math, ams, rel, "\u22AA", "\\Vvdash", true);
      defineSymbol(symbols_math, ams, rel, "\u2323", "\\smallsmile");
      defineSymbol(symbols_math, ams, rel, "\u2322", "\\smallfrown");
      defineSymbol(symbols_math, ams, rel, "\u224F", "\\bumpeq", true);
      defineSymbol(symbols_math, ams, rel, "\u224E", "\\Bumpeq", true);
      defineSymbol(symbols_math, ams, rel, "\u2267", "\\geqq", true);
      defineSymbol(symbols_math, ams, rel, "\u2A7E", "\\geqslant", true);
      defineSymbol(symbols_math, ams, rel, "\u2A96", "\\eqslantgtr", true);
      defineSymbol(symbols_math, ams, rel, "\u2273", "\\gtrsim", true);
      defineSymbol(symbols_math, ams, rel, "\u2A86", "\\gtrapprox", true);
      defineSymbol(symbols_math, ams, bin, "\u22D7", "\\gtrdot");
      defineSymbol(symbols_math, ams, rel, "\u22D9", "\\ggg", true);
      defineSymbol(symbols_math, ams, rel, "\u2277", "\\gtrless", true);
      defineSymbol(symbols_math, ams, rel, "\u22DB", "\\gtreqless", true);
      defineSymbol(symbols_math, ams, rel, "\u2A8C", "\\gtreqqless", true);
      defineSymbol(symbols_math, ams, rel, "\u2256", "\\eqcirc", true);
      defineSymbol(symbols_math, ams, rel, "\u2257", "\\circeq", true);
      defineSymbol(symbols_math, ams, rel, "\u225C", "\\triangleq", true);
      defineSymbol(symbols_math, ams, rel, "\u223C", "\\thicksim");
      defineSymbol(symbols_math, ams, rel, "\u2248", "\\thickapprox");
      defineSymbol(symbols_math, ams, rel, "\u2AC6", "\\supseteqq", true);
      defineSymbol(symbols_math, ams, rel, "\u22D1", "\\Supset", true);
      defineSymbol(symbols_math, ams, rel, "\u2290", "\\sqsupset", true);
      defineSymbol(symbols_math, ams, rel, "\u227D", "\\succcurlyeq", true);
      defineSymbol(symbols_math, ams, rel, "\u22DF", "\\curlyeqsucc", true);
      defineSymbol(symbols_math, ams, rel, "\u227F", "\\succsim", true);
      defineSymbol(symbols_math, ams, rel, "\u2AB8", "\\succapprox", true);
      defineSymbol(symbols_math, ams, rel, "\u22B3", "\\vartriangleright");
      defineSymbol(symbols_math, ams, rel, "\u22B5", "\\trianglerighteq");
      defineSymbol(symbols_math, ams, rel, "\u22A9", "\\Vdash", true);
      defineSymbol(symbols_math, ams, rel, "\u2223", "\\shortmid");
      defineSymbol(symbols_math, ams, rel, "\u2225", "\\shortparallel");
      defineSymbol(symbols_math, ams, rel, "\u226C", "\\between", true);
      defineSymbol(symbols_math, ams, rel, "\u22D4", "\\pitchfork", true);
      defineSymbol(symbols_math, ams, rel, "\u221D", "\\varpropto");
      defineSymbol(symbols_math, ams, rel, "\u25C0", "\\blacktriangleleft"); // unicode-math says that \therefore is a mathord atom.
      // We kept the amssymb atom type, which is rel.

      defineSymbol(symbols_math, ams, rel, "\u2234", "\\therefore", true);
      defineSymbol(symbols_math, ams, rel, "\u220D", "\\backepsilon");
      defineSymbol(symbols_math, ams, rel, "\u25B6", "\\blacktriangleright"); // unicode-math says that \because is a mathord atom.
      // We kept the amssymb atom type, which is rel.

      defineSymbol(symbols_math, ams, rel, "\u2235", "\\because", true);
      defineSymbol(symbols_math, ams, rel, "\u22D8", "\\llless");
      defineSymbol(symbols_math, ams, rel, "\u22D9", "\\gggtr");
      defineSymbol(symbols_math, ams, bin, "\u22B2", "\\lhd");
      defineSymbol(symbols_math, ams, bin, "\u22B3", "\\rhd");
      defineSymbol(symbols_math, ams, rel, "\u2242", "\\eqsim", true);
      defineSymbol(symbols_math, main, rel, "\u22C8", "\\Join");
      defineSymbol(symbols_math, ams, rel, "\u2251", "\\Doteq", true); // AMS Binary Operators

      defineSymbol(symbols_math, ams, bin, "\u2214", "\\dotplus", true);
      defineSymbol(symbols_math, ams, bin, "\u2216", "\\smallsetminus");
      defineSymbol(symbols_math, ams, bin, "\u22D2", "\\Cap", true);
      defineSymbol(symbols_math, ams, bin, "\u22D3", "\\Cup", true);
      defineSymbol(symbols_math, ams, bin, "\u2A5E", "\\doublebarwedge", true);
      defineSymbol(symbols_math, ams, bin, "\u229F", "\\boxminus", true);
      defineSymbol(symbols_math, ams, bin, "\u229E", "\\boxplus", true);
      defineSymbol(symbols_math, ams, bin, "\u22C7", "\\divideontimes", true);
      defineSymbol(symbols_math, ams, bin, "\u22C9", "\\ltimes", true);
      defineSymbol(symbols_math, ams, bin, "\u22CA", "\\rtimes", true);
      defineSymbol(symbols_math, ams, bin, "\u22CB", "\\leftthreetimes", true);
      defineSymbol(symbols_math, ams, bin, "\u22CC", "\\rightthreetimes", true);
      defineSymbol(symbols_math, ams, bin, "\u22CF", "\\curlywedge", true);
      defineSymbol(symbols_math, ams, bin, "\u22CE", "\\curlyvee", true);
      defineSymbol(symbols_math, ams, bin, "\u229D", "\\circleddash", true);
      defineSymbol(symbols_math, ams, bin, "\u229B", "\\circledast", true);
      defineSymbol(symbols_math, ams, bin, "\u22C5", "\\centerdot");
      defineSymbol(symbols_math, ams, bin, "\u22BA", "\\intercal", true);
      defineSymbol(symbols_math, ams, bin, "\u22D2", "\\doublecap");
      defineSymbol(symbols_math, ams, bin, "\u22D3", "\\doublecup");
      defineSymbol(symbols_math, ams, bin, "\u22A0", "\\boxtimes", true); // AMS Arrows
      // Note: unicode-math maps \u21e2 to their own function \rightdasharrow.
      // We'll map it to AMS function \dashrightarrow. It produces the same atom.

      defineSymbol(symbols_math, ams, rel, "\u21E2", "\\dashrightarrow", true); // unicode-math maps \u21e0 to \leftdasharrow. We'll use the AMS synonym.

      defineSymbol(symbols_math, ams, rel, "\u21E0", "\\dashleftarrow", true);
      defineSymbol(symbols_math, ams, rel, "\u21C7", "\\leftleftarrows", true);
      defineSymbol(symbols_math, ams, rel, "\u21C6", "\\leftrightarrows", true);
      defineSymbol(symbols_math, ams, rel, "\u21DA", "\\Lleftarrow", true);
      defineSymbol(symbols_math, ams, rel, "\u219E", "\\twoheadleftarrow", true);
      defineSymbol(symbols_math, ams, rel, "\u21A2", "\\leftarrowtail", true);
      defineSymbol(symbols_math, ams, rel, "\u21AB", "\\looparrowleft", true);
      defineSymbol(symbols_math, ams, rel, "\u21CB", "\\leftrightharpoons", true);
      defineSymbol(symbols_math, ams, rel, "\u21B6", "\\curvearrowleft", true); // unicode-math maps \u21ba to \acwopencirclearrow. We'll use the AMS synonym.

      defineSymbol(symbols_math, ams, rel, "\u21BA", "\\circlearrowleft", true);
      defineSymbol(symbols_math, ams, rel, "\u21B0", "\\Lsh", true);
      defineSymbol(symbols_math, ams, rel, "\u21C8", "\\upuparrows", true);
      defineSymbol(symbols_math, ams, rel, "\u21BF", "\\upharpoonleft", true);
      defineSymbol(symbols_math, ams, rel, "\u21C3", "\\downharpoonleft", true);
      defineSymbol(symbols_math, ams, rel, "\u22B8", "\\multimap", true);
      defineSymbol(symbols_math, ams, rel, "\u21AD", "\\leftrightsquigarrow", true);
      defineSymbol(symbols_math, ams, rel, "\u21C9", "\\rightrightarrows", true);
      defineSymbol(symbols_math, ams, rel, "\u21C4", "\\rightleftarrows", true);
      defineSymbol(symbols_math, ams, rel, "\u21A0", "\\twoheadrightarrow", true);
      defineSymbol(symbols_math, ams, rel, "\u21A3", "\\rightarrowtail", true);
      defineSymbol(symbols_math, ams, rel, "\u21AC", "\\looparrowright", true);
      defineSymbol(symbols_math, ams, rel, "\u21B7", "\\curvearrowright", true); // unicode-math maps \u21bb to \cwopencirclearrow. We'll use the AMS synonym.

      defineSymbol(symbols_math, ams, rel, "\u21BB", "\\circlearrowright", true);
      defineSymbol(symbols_math, ams, rel, "\u21B1", "\\Rsh", true);
      defineSymbol(symbols_math, ams, rel, "\u21CA", "\\downdownarrows", true);
      defineSymbol(symbols_math, ams, rel, "\u21BE", "\\upharpoonright", true);
      defineSymbol(symbols_math, ams, rel, "\u21C2", "\\downharpoonright", true);
      defineSymbol(symbols_math, ams, rel, "\u21DD", "\\rightsquigarrow", true);
      defineSymbol(symbols_math, ams, rel, "\u21DD", "\\leadsto");
      defineSymbol(symbols_math, ams, rel, "\u21DB", "\\Rrightarrow", true);
      defineSymbol(symbols_math, ams, rel, "\u21BE", "\\restriction");
      defineSymbol(symbols_math, main, symbols_textord, "\u2018", "`");
      defineSymbol(symbols_math, main, symbols_textord, "$", "\\$");
      defineSymbol(symbols_text, main, symbols_textord, "$", "\\$");
      defineSymbol(symbols_text, main, symbols_textord, "$", "\\textdollar");
      defineSymbol(symbols_math, main, symbols_textord, "%", "\\%");
      defineSymbol(symbols_text, main, symbols_textord, "%", "\\%");
      defineSymbol(symbols_math, main, symbols_textord, "_", "\\_");
      defineSymbol(symbols_text, main, symbols_textord, "_", "\\_");
      defineSymbol(symbols_text, main, symbols_textord, "_", "\\textunderscore");
      defineSymbol(symbols_math, main, symbols_textord, "\u2220", "\\angle", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u221E", "\\infty", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u2032", "\\prime");
      defineSymbol(symbols_math, main, symbols_textord, "\u25B3", "\\triangle");
      defineSymbol(symbols_math, main, symbols_textord, "\u0393", "\\Gamma", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u0394", "\\Delta", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u0398", "\\Theta", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u039B", "\\Lambda", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u039E", "\\Xi", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u03A0", "\\Pi", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u03A3", "\\Sigma", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u03A5", "\\Upsilon", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u03A6", "\\Phi", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u03A8", "\\Psi", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u03A9", "\\Omega", true);
      defineSymbol(symbols_math, main, symbols_textord, "A", "\u0391");
      defineSymbol(symbols_math, main, symbols_textord, "B", "\u0392");
      defineSymbol(symbols_math, main, symbols_textord, "E", "\u0395");
      defineSymbol(symbols_math, main, symbols_textord, "Z", "\u0396");
      defineSymbol(symbols_math, main, symbols_textord, "H", "\u0397");
      defineSymbol(symbols_math, main, symbols_textord, "I", "\u0399");
      defineSymbol(symbols_math, main, symbols_textord, "K", "\u039A");
      defineSymbol(symbols_math, main, symbols_textord, "M", "\u039C");
      defineSymbol(symbols_math, main, symbols_textord, "N", "\u039D");
      defineSymbol(symbols_math, main, symbols_textord, "O", "\u039F");
      defineSymbol(symbols_math, main, symbols_textord, "P", "\u03A1");
      defineSymbol(symbols_math, main, symbols_textord, "T", "\u03A4");
      defineSymbol(symbols_math, main, symbols_textord, "X", "\u03A7");
      defineSymbol(symbols_math, main, symbols_textord, "\xAC", "\\neg", true);
      defineSymbol(symbols_math, main, symbols_textord, "\xAC", "\\lnot");
      defineSymbol(symbols_math, main, symbols_textord, "\u22A4", "\\top");
      defineSymbol(symbols_math, main, symbols_textord, "\u22A5", "\\bot");
      defineSymbol(symbols_math, main, symbols_textord, "\u2205", "\\emptyset");
      defineSymbol(symbols_math, ams, symbols_textord, "\u2205", "\\varnothing");
      defineSymbol(symbols_math, main, mathord, "\u03B1", "\\alpha", true);
      defineSymbol(symbols_math, main, mathord, "\u03B2", "\\beta", true);
      defineSymbol(symbols_math, main, mathord, "\u03B3", "\\gamma", true);
      defineSymbol(symbols_math, main, mathord, "\u03B4", "\\delta", true);
      defineSymbol(symbols_math, main, mathord, "\u03F5", "\\epsilon", true);
      defineSymbol(symbols_math, main, mathord, "\u03B6", "\\zeta", true);
      defineSymbol(symbols_math, main, mathord, "\u03B7", "\\eta", true);
      defineSymbol(symbols_math, main, mathord, "\u03B8", "\\theta", true);
      defineSymbol(symbols_math, main, mathord, "\u03B9", "\\iota", true);
      defineSymbol(symbols_math, main, mathord, "\u03BA", "\\kappa", true);
      defineSymbol(symbols_math, main, mathord, "\u03BB", "\\lambda", true);
      defineSymbol(symbols_math, main, mathord, "\u03BC", "\\mu", true);
      defineSymbol(symbols_math, main, mathord, "\u03BD", "\\nu", true);
      defineSymbol(symbols_math, main, mathord, "\u03BE", "\\xi", true);
      defineSymbol(symbols_math, main, mathord, "\u03BF", "\\omicron", true);
      defineSymbol(symbols_math, main, mathord, "\u03C0", "\\pi", true);
      defineSymbol(symbols_math, main, mathord, "\u03C1", "\\rho", true);
      defineSymbol(symbols_math, main, mathord, "\u03C3", "\\sigma", true);
      defineSymbol(symbols_math, main, mathord, "\u03C4", "\\tau", true);
      defineSymbol(symbols_math, main, mathord, "\u03C5", "\\upsilon", true);
      defineSymbol(symbols_math, main, mathord, "\u03D5", "\\phi", true);
      defineSymbol(symbols_math, main, mathord, "\u03C7", "\\chi", true);
      defineSymbol(symbols_math, main, mathord, "\u03C8", "\\psi", true);
      defineSymbol(symbols_math, main, mathord, "\u03C9", "\\omega", true);
      defineSymbol(symbols_math, main, mathord, "\u03B5", "\\varepsilon", true);
      defineSymbol(symbols_math, main, mathord, "\u03D1", "\\vartheta", true);
      defineSymbol(symbols_math, main, mathord, "\u03D6", "\\varpi", true);
      defineSymbol(symbols_math, main, mathord, "\u03F1", "\\varrho", true);
      defineSymbol(symbols_math, main, mathord, "\u03C2", "\\varsigma", true);
      defineSymbol(symbols_math, main, mathord, "\u03C6", "\\varphi", true);
      defineSymbol(symbols_math, main, bin, "\u2217", "*");
      defineSymbol(symbols_math, main, bin, "+", "+");
      defineSymbol(symbols_math, main, bin, "\u2212", "-");
      defineSymbol(symbols_math, main, bin, "\u22C5", "\\cdot", true);
      defineSymbol(symbols_math, main, bin, "\u2218", "\\circ");
      defineSymbol(symbols_math, main, bin, "\xF7", "\\div", true);
      defineSymbol(symbols_math, main, bin, "\xB1", "\\pm", true);
      defineSymbol(symbols_math, main, bin, "\xD7", "\\times", true);
      defineSymbol(symbols_math, main, bin, "\u2229", "\\cap", true);
      defineSymbol(symbols_math, main, bin, "\u222A", "\\cup", true);
      defineSymbol(symbols_math, main, bin, "\u2216", "\\setminus");
      defineSymbol(symbols_math, main, bin, "\u2227", "\\land");
      defineSymbol(symbols_math, main, bin, "\u2228", "\\lor");
      defineSymbol(symbols_math, main, bin, "\u2227", "\\wedge", true);
      defineSymbol(symbols_math, main, bin, "\u2228", "\\vee", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u221A", "\\surd");
      defineSymbol(symbols_math, main, symbols_open, "(", "(");
      defineSymbol(symbols_math, main, symbols_open, "[", "[");
      defineSymbol(symbols_math, main, symbols_open, "\u27E8", "\\langle", true);
      defineSymbol(symbols_math, main, symbols_open, "\u2223", "\\lvert");
      defineSymbol(symbols_math, main, symbols_open, "\u2225", "\\lVert");
      defineSymbol(symbols_math, main, symbols_close, ")", ")");
      defineSymbol(symbols_math, main, symbols_close, "]", "]");
      defineSymbol(symbols_math, main, symbols_close, "?", "?");
      defineSymbol(symbols_math, main, symbols_close, "!", "!");
      defineSymbol(symbols_math, main, symbols_close, "\u27E9", "\\rangle", true);
      defineSymbol(symbols_math, main, symbols_close, "\u2223", "\\rvert");
      defineSymbol(symbols_math, main, symbols_close, "\u2225", "\\rVert");
      defineSymbol(symbols_math, main, rel, "=", "=");
      defineSymbol(symbols_math, main, rel, "<", "<");
      defineSymbol(symbols_math, main, rel, ">", ">");
      defineSymbol(symbols_math, main, rel, ":", ":");
      defineSymbol(symbols_math, main, rel, "\u2248", "\\approx", true);
      defineSymbol(symbols_math, main, rel, "\u2245", "\\cong", true);
      defineSymbol(symbols_math, main, rel, "\u2265", "\\ge");
      defineSymbol(symbols_math, main, rel, "\u2265", "\\geq", true);
      defineSymbol(symbols_math, main, rel, "\u2190", "\\gets");
      defineSymbol(symbols_math, main, rel, ">", "\\gt");
      defineSymbol(symbols_math, main, rel, "\u2208", "\\in", true);
      defineSymbol(symbols_math, main, rel, "\uE020", "\\@not");
      defineSymbol(symbols_math, main, rel, "\u2282", "\\subset", true);
      defineSymbol(symbols_math, main, rel, "\u2283", "\\supset", true);
      defineSymbol(symbols_math, main, rel, "\u2286", "\\subseteq", true);
      defineSymbol(symbols_math, main, rel, "\u2287", "\\supseteq", true);
      defineSymbol(symbols_math, ams, rel, "\u2288", "\\nsubseteq", true);
      defineSymbol(symbols_math, ams, rel, "\u2289", "\\nsupseteq", true);
      defineSymbol(symbols_math, main, rel, "\u22A8", "\\models");
      defineSymbol(symbols_math, main, rel, "\u2190", "\\leftarrow", true);
      defineSymbol(symbols_math, main, rel, "\u2264", "\\le");
      defineSymbol(symbols_math, main, rel, "\u2264", "\\leq", true);
      defineSymbol(symbols_math, main, rel, "<", "\\lt");
      defineSymbol(symbols_math, main, rel, "\u2192", "\\rightarrow", true);
      defineSymbol(symbols_math, main, rel, "\u2192", "\\to");
      defineSymbol(symbols_math, ams, rel, "\u2271", "\\ngeq", true);
      defineSymbol(symbols_math, ams, rel, "\u2270", "\\nleq", true);
      defineSymbol(symbols_math, main, symbols_spacing, "\xA0", "\\ ");
      defineSymbol(symbols_math, main, symbols_spacing, "\xA0", "~");
      defineSymbol(symbols_math, main, symbols_spacing, "\xA0", "\\space"); // Ref: LaTeX Source 2e: \DeclareRobustCommand{\nobreakspace}{%

      defineSymbol(symbols_math, main, symbols_spacing, "\xA0", "\\nobreakspace");
      defineSymbol(symbols_text, main, symbols_spacing, "\xA0", "\\ ");
      defineSymbol(symbols_text, main, symbols_spacing, "\xA0", "~");
      defineSymbol(symbols_text, main, symbols_spacing, "\xA0", "\\space");
      defineSymbol(symbols_text, main, symbols_spacing, "\xA0", "\\nobreakspace");
      defineSymbol(symbols_math, main, symbols_spacing, null, "\\nobreak");
      defineSymbol(symbols_math, main, symbols_spacing, null, "\\allowbreak");
      defineSymbol(symbols_math, main, punct, ",", ",");
      defineSymbol(symbols_math, main, punct, ";", ";");
      defineSymbol(symbols_math, ams, bin, "\u22BC", "\\barwedge", true);
      defineSymbol(symbols_math, ams, bin, "\u22BB", "\\veebar", true);
      defineSymbol(symbols_math, main, bin, "\u2299", "\\odot", true);
      defineSymbol(symbols_math, main, bin, "\u2295", "\\oplus", true);
      defineSymbol(symbols_math, main, bin, "\u2297", "\\otimes", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u2202", "\\partial", true);
      defineSymbol(symbols_math, main, bin, "\u2298", "\\oslash", true);
      defineSymbol(symbols_math, ams, bin, "\u229A", "\\circledcirc", true);
      defineSymbol(symbols_math, ams, bin, "\u22A1", "\\boxdot", true);
      defineSymbol(symbols_math, main, bin, "\u25B3", "\\bigtriangleup");
      defineSymbol(symbols_math, main, bin, "\u25BD", "\\bigtriangledown");
      defineSymbol(symbols_math, main, bin, "\u2020", "\\dagger");
      defineSymbol(symbols_math, main, bin, "\u22C4", "\\diamond");
      defineSymbol(symbols_math, main, bin, "\u22C6", "\\star");
      defineSymbol(symbols_math, main, bin, "\u25C3", "\\triangleleft");
      defineSymbol(symbols_math, main, bin, "\u25B9", "\\triangleright");
      defineSymbol(symbols_math, main, symbols_open, "{", "\\{");
      defineSymbol(symbols_text, main, symbols_textord, "{", "\\{");
      defineSymbol(symbols_text, main, symbols_textord, "{", "\\textbraceleft");
      defineSymbol(symbols_math, main, symbols_close, "}", "\\}");
      defineSymbol(symbols_text, main, symbols_textord, "}", "\\}");
      defineSymbol(symbols_text, main, symbols_textord, "}", "\\textbraceright");
      defineSymbol(symbols_math, main, symbols_open, "{", "\\lbrace");
      defineSymbol(symbols_math, main, symbols_close, "}", "\\rbrace");
      defineSymbol(symbols_math, main, symbols_open, "[", "\\lbrack");
      defineSymbol(symbols_text, main, symbols_textord, "[", "\\lbrack");
      defineSymbol(symbols_math, main, symbols_close, "]", "\\rbrack");
      defineSymbol(symbols_text, main, symbols_textord, "]", "\\rbrack");
      defineSymbol(symbols_math, main, symbols_open, "(", "\\lparen");
      defineSymbol(symbols_math, main, symbols_close, ")", "\\rparen");
      defineSymbol(symbols_text, main, symbols_textord, "<", "\\textless"); // in T1 fontenc

      defineSymbol(symbols_text, main, symbols_textord, ">", "\\textgreater"); // in T1 fontenc

      defineSymbol(symbols_math, main, symbols_open, "\u230A", "\\lfloor", true);
      defineSymbol(symbols_math, main, symbols_close, "\u230B", "\\rfloor", true);
      defineSymbol(symbols_math, main, symbols_open, "\u2308", "\\lceil", true);
      defineSymbol(symbols_math, main, symbols_close, "\u2309", "\\rceil", true);
      defineSymbol(symbols_math, main, symbols_textord, "\\", "\\backslash");
      defineSymbol(symbols_math, main, symbols_textord, "\u2223", "|");
      defineSymbol(symbols_math, main, symbols_textord, "\u2223", "\\vert");
      defineSymbol(symbols_text, main, symbols_textord, "|", "\\textbar"); // in T1 fontenc

      defineSymbol(symbols_math, main, symbols_textord, "\u2225", "\\|");
      defineSymbol(symbols_math, main, symbols_textord, "\u2225", "\\Vert");
      defineSymbol(symbols_text, main, symbols_textord, "\u2225", "\\textbardbl");
      defineSymbol(symbols_text, main, symbols_textord, "~", "\\textasciitilde");
      defineSymbol(symbols_text, main, symbols_textord, "\\", "\\textbackslash");
      defineSymbol(symbols_text, main, symbols_textord, "^", "\\textasciicircum");
      defineSymbol(symbols_math, main, rel, "\u2191", "\\uparrow", true);
      defineSymbol(symbols_math, main, rel, "\u21D1", "\\Uparrow", true);
      defineSymbol(symbols_math, main, rel, "\u2193", "\\downarrow", true);
      defineSymbol(symbols_math, main, rel, "\u21D3", "\\Downarrow", true);
      defineSymbol(symbols_math, main, rel, "\u2195", "\\updownarrow", true);
      defineSymbol(symbols_math, main, rel, "\u21D5", "\\Updownarrow", true);
      defineSymbol(symbols_math, main, op, "\u2210", "\\coprod");
      defineSymbol(symbols_math, main, op, "\u22C1", "\\bigvee");
      defineSymbol(symbols_math, main, op, "\u22C0", "\\bigwedge");
      defineSymbol(symbols_math, main, op, "\u2A04", "\\biguplus");
      defineSymbol(symbols_math, main, op, "\u22C2", "\\bigcap");
      defineSymbol(symbols_math, main, op, "\u22C3", "\\bigcup");
      defineSymbol(symbols_math, main, op, "\u222B", "\\int");
      defineSymbol(symbols_math, main, op, "\u222B", "\\intop");
      defineSymbol(symbols_math, main, op, "\u222C", "\\iint");
      defineSymbol(symbols_math, main, op, "\u222D", "\\iiint");
      defineSymbol(symbols_math, main, op, "\u220F", "\\prod");
      defineSymbol(symbols_math, main, op, "\u2211", "\\sum");
      defineSymbol(symbols_math, main, op, "\u2A02", "\\bigotimes");
      defineSymbol(symbols_math, main, op, "\u2A01", "\\bigoplus");
      defineSymbol(symbols_math, main, op, "\u2A00", "\\bigodot");
      defineSymbol(symbols_math, main, op, "\u222E", "\\oint");
      defineSymbol(symbols_math, main, op, "\u222F", "\\oiint");
      defineSymbol(symbols_math, main, op, "\u2230", "\\oiiint");
      defineSymbol(symbols_math, main, op, "\u2A06", "\\bigsqcup");
      defineSymbol(symbols_math, main, op, "\u222B", "\\smallint");
      defineSymbol(symbols_text, main, symbols_inner, "\u2026", "\\textellipsis");
      defineSymbol(symbols_math, main, symbols_inner, "\u2026", "\\mathellipsis");
      defineSymbol(symbols_text, main, symbols_inner, "\u2026", "\\ldots", true);
      defineSymbol(symbols_math, main, symbols_inner, "\u2026", "\\ldots", true);
      defineSymbol(symbols_math, main, symbols_inner, "\u22EF", "\\@cdots", true);
      defineSymbol(symbols_math, main, symbols_inner, "\u22F1", "\\ddots", true);
      defineSymbol(symbols_math, main, symbols_textord, "\u22EE", "\\varvdots"); // \vdots is a macro

      defineSymbol(symbols_math, main, symbols_accent, "\u02CA", "\\acute");
      defineSymbol(symbols_math, main, symbols_accent, "\u02CB", "\\grave");
      defineSymbol(symbols_math, main, symbols_accent, "\xA8", "\\ddot");
      defineSymbol(symbols_math, main, symbols_accent, "~", "\\tilde");
      defineSymbol(symbols_math, main, symbols_accent, "\u02C9", "\\bar");
      defineSymbol(symbols_math, main, symbols_accent, "\u02D8", "\\breve");
      defineSymbol(symbols_math, main, symbols_accent, "\u02C7", "\\check");
      defineSymbol(symbols_math, main, symbols_accent, "^", "\\hat");
      defineSymbol(symbols_math, main, symbols_accent, "\u20D7", "\\vec");
      defineSymbol(symbols_math, main, symbols_accent, "\u02D9", "\\dot");
      defineSymbol(symbols_math, main, symbols_accent, "\u02DA", "\\mathring");
      defineSymbol(symbols_math, main, mathord, "\u0131", "\\imath", true);
      defineSymbol(symbols_math, main, mathord, "\u0237", "\\jmath", true);
      defineSymbol(symbols_text, main, symbols_textord, "\u0131", "\\i", true);
      defineSymbol(symbols_text, main, symbols_textord, "\u0237", "\\j", true);
      defineSymbol(symbols_text, main, symbols_textord, "\xDF", "\\ss", true);
      defineSymbol(symbols_text, main, symbols_textord, "\xE6", "\\ae", true);
      defineSymbol(symbols_text, main, symbols_textord, "\xE6", "\\ae", true);
      defineSymbol(symbols_text, main, symbols_textord, "\u0153", "\\oe", true);
      defineSymbol(symbols_text, main, symbols_textord, "\xF8", "\\o", true);
      defineSymbol(symbols_text, main, symbols_textord, "\xC6", "\\AE", true);
      defineSymbol(symbols_text, main, symbols_textord, "\u0152", "\\OE", true);
      defineSymbol(symbols_text, main, symbols_textord, "\xD8", "\\O", true);
      defineSymbol(symbols_text, main, symbols_accent, "\u02CA", "\\'"); // acute

      defineSymbol(symbols_text, main, symbols_accent, "\u02CB", "\\`"); // grave

      defineSymbol(symbols_text, main, symbols_accent, "\u02C6", "\\^"); // circumflex

      defineSymbol(symbols_text, main, symbols_accent, "\u02DC", "\\~"); // tilde

      defineSymbol(symbols_text, main, symbols_accent, "\u02C9", "\\="); // macron

      defineSymbol(symbols_text, main, symbols_accent, "\u02D8", "\\u"); // breve

      defineSymbol(symbols_text, main, symbols_accent, "\u02D9", "\\."); // dot above

      defineSymbol(symbols_text, main, symbols_accent, "\u02DA", "\\r"); // ring above

      defineSymbol(symbols_text, main, symbols_accent, "\u02C7", "\\v"); // caron

      defineSymbol(symbols_text, main, symbols_accent, "\xA8", '\\"'); // diaresis

      defineSymbol(symbols_text, main, symbols_accent, "\u02DD", "\\H"); // double acute

      defineSymbol(symbols_text, main, symbols_accent, "\u25EF", "\\textcircled"); // \bigcirc glyph
      // These ligatures are detected and created in Parser.js's `formLigatures`.

      var ligatures = {
        "--": true,
        "---": true,
        "``": true,
        "''": true
      };
      defineSymbol(symbols_text, main, symbols_textord, "\u2013", "--");
      defineSymbol(symbols_text, main, symbols_textord, "\u2013", "\\textendash");
      defineSymbol(symbols_text, main, symbols_textord, "\u2014", "---");
      defineSymbol(symbols_text, main, symbols_textord, "\u2014", "\\textemdash");
      defineSymbol(symbols_text, main, symbols_textord, "\u2018", "`");
      defineSymbol(symbols_text, main, symbols_textord, "\u2018", "\\textquoteleft");
      defineSymbol(symbols_text, main, symbols_textord, "\u2019", "'");
      defineSymbol(symbols_text, main, symbols_textord, "\u2019", "\\textquoteright");
      defineSymbol(symbols_text, main, symbols_textord, "\u201C", "``");
      defineSymbol(symbols_text, main, symbols_textord, "\u201C", "\\textquotedblleft");
      defineSymbol(symbols_text, main, symbols_textord, "\u201D", "''");
      defineSymbol(symbols_text, main, symbols_textord, "\u201D", "\\textquotedblright"); //  \degree from gensymb package

      defineSymbol(symbols_math, main, symbols_textord, "\xB0", "\\degree", true);
      defineSymbol(symbols_text, main, symbols_textord, "\xB0", "\\degree"); // \textdegree from inputenc package

      defineSymbol(symbols_text, main, symbols_textord, "\xB0", "\\textdegree", true); // TODO: In LaTeX, \pounds can generate a different character in text and math
      // mode, but among our fonts, only Main-Italic defines this character "163".

      defineSymbol(symbols_math, main, mathord, "\xA3", "\\pounds");
      defineSymbol(symbols_math, main, mathord, "\xA3", "\\mathsterling", true);
      defineSymbol(symbols_text, main, mathord, "\xA3", "\\pounds");
      defineSymbol(symbols_text, main, mathord, "\xA3", "\\textsterling", true);
      defineSymbol(symbols_math, ams, symbols_textord, "\u2720", "\\maltese");
      defineSymbol(symbols_text, ams, symbols_textord, "\u2720", "\\maltese");
      defineSymbol(symbols_text, main, symbols_spacing, "\xA0", "\\ ");
      defineSymbol(symbols_text, main, symbols_spacing, "\xA0", " ");
      defineSymbol(symbols_text, main, symbols_spacing, "\xA0", "~"); // There are lots of symbols which are the same, so we add them in afterwards.
      // All of these are textords in math mode

      var mathTextSymbols = "0123456789/@.\"";

      for (var symbols_i = 0; symbols_i < mathTextSymbols.length; symbols_i++) {
        var symbols_ch = mathTextSymbols.charAt(symbols_i);
        defineSymbol(symbols_math, main, symbols_textord, symbols_ch, symbols_ch);
      } // All of these are textords in text mode


      var textSymbols = "0123456789!@*()-=+[]<>|\";:?/.,";

      for (var src_symbols_i = 0; src_symbols_i < textSymbols.length; src_symbols_i++) {
        var _ch = textSymbols.charAt(src_symbols_i);

        defineSymbol(symbols_text, main, symbols_textord, _ch, _ch);
      } // All of these are textords in text mode, and mathords in math mode


      var letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

      for (var symbols_i2 = 0; symbols_i2 < letters.length; symbols_i2++) {
        var _ch2 = letters.charAt(symbols_i2);

        defineSymbol(symbols_math, main, mathord, _ch2, _ch2);
        defineSymbol(symbols_text, main, symbols_textord, _ch2, _ch2);
      } // Blackboard bold and script letters in Unicode range


      defineSymbol(symbols_math, ams, symbols_textord, "C", "\u2102"); // blackboard bold

      defineSymbol(symbols_text, ams, symbols_textord, "C", "\u2102");
      defineSymbol(symbols_math, ams, symbols_textord, "H", "\u210D");
      defineSymbol(symbols_text, ams, symbols_textord, "H", "\u210D");
      defineSymbol(symbols_math, ams, symbols_textord, "N", "\u2115");
      defineSymbol(symbols_text, ams, symbols_textord, "N", "\u2115");
      defineSymbol(symbols_math, ams, symbols_textord, "P", "\u2119");
      defineSymbol(symbols_text, ams, symbols_textord, "P", "\u2119");
      defineSymbol(symbols_math, ams, symbols_textord, "Q", "\u211A");
      defineSymbol(symbols_text, ams, symbols_textord, "Q", "\u211A");
      defineSymbol(symbols_math, ams, symbols_textord, "R", "\u211D");
      defineSymbol(symbols_text, ams, symbols_textord, "R", "\u211D");
      defineSymbol(symbols_math, ams, symbols_textord, "Z", "\u2124");
      defineSymbol(symbols_text, ams, symbols_textord, "Z", "\u2124");
      defineSymbol(symbols_math, main, mathord, "h", "\u210E"); // italic h, Planck constant

      defineSymbol(symbols_text, main, mathord, "h", "\u210E"); // The next loop loads wide (surrogate pair) characters.
      // We support some letters in the Unicode range U+1D400 to U+1D7FF,
      // Mathematical Alphanumeric Symbols.
      // Some editors do not deal well with wide characters. So don't write the
      // string into this file. Instead, create the string from the surrogate pair.

      var symbols_wideChar = "";

      for (var symbols_i3 = 0; symbols_i3 < letters.length; symbols_i3++) {
        var _ch3 = letters.charAt(symbols_i3); // The hex numbers in the next line are a surrogate pair.
        // 0xD835 is the high surrogate for all letters in the range we support.
        // 0xDC00 is the low surrogate for bold A.


        symbols_wideChar = String.fromCharCode(0xD835, 0xDC00 + symbols_i3); // A-Z a-z bold

        defineSymbol(symbols_math, main, mathord, _ch3, symbols_wideChar);
        defineSymbol(symbols_text, main, symbols_textord, _ch3, symbols_wideChar);
        symbols_wideChar = String.fromCharCode(0xD835, 0xDC34 + symbols_i3); // A-Z a-z italic

        defineSymbol(symbols_math, main, mathord, _ch3, symbols_wideChar);
        defineSymbol(symbols_text, main, symbols_textord, _ch3, symbols_wideChar);
        symbols_wideChar = String.fromCharCode(0xD835, 0xDC68 + symbols_i3); // A-Z a-z bold italic

        defineSymbol(symbols_math, main, mathord, _ch3, symbols_wideChar);
        defineSymbol(symbols_text, main, symbols_textord, _ch3, symbols_wideChar);
        symbols_wideChar = String.fromCharCode(0xD835, 0xDD04 + symbols_i3); // A-Z a-z Fractur

        defineSymbol(symbols_math, main, mathord, _ch3, symbols_wideChar);
        defineSymbol(symbols_text, main, symbols_textord, _ch3, symbols_wideChar);
        symbols_wideChar = String.fromCharCode(0xD835, 0xDDA0 + symbols_i3); // A-Z a-z sans-serif

        defineSymbol(symbols_math, main, mathord, _ch3, symbols_wideChar);
        defineSymbol(symbols_text, main, symbols_textord, _ch3, symbols_wideChar);
        symbols_wideChar = String.fromCharCode(0xD835, 0xDDD4 + symbols_i3); // A-Z a-z sans bold

        defineSymbol(symbols_math, main, mathord, _ch3, symbols_wideChar);
        defineSymbol(symbols_text, main, symbols_textord, _ch3, symbols_wideChar);
        symbols_wideChar = String.fromCharCode(0xD835, 0xDE08 + symbols_i3); // A-Z a-z sans italic

        defineSymbol(symbols_math, main, mathord, _ch3, symbols_wideChar);
        defineSymbol(symbols_text, main, symbols_textord, _ch3, symbols_wideChar);
        symbols_wideChar = String.fromCharCode(0xD835, 0xDE70 + symbols_i3); // A-Z a-z monospace

        defineSymbol(symbols_math, main, mathord, _ch3, symbols_wideChar);
        defineSymbol(symbols_text, main, symbols_textord, _ch3, symbols_wideChar);

        if (symbols_i3 < 26) {
          // KaTeX fonts have only capital letters for blackboard bold and script.
          // See exception for k below.
          symbols_wideChar = String.fromCharCode(0xD835, 0xDD38 + symbols_i3); // A-Z double struck

          defineSymbol(symbols_math, main, mathord, _ch3, symbols_wideChar);
          defineSymbol(symbols_text, main, symbols_textord, _ch3, symbols_wideChar);
          symbols_wideChar = String.fromCharCode(0xD835, 0xDC9C + symbols_i3); // A-Z script

          defineSymbol(symbols_math, main, mathord, _ch3, symbols_wideChar);
          defineSymbol(symbols_text, main, symbols_textord, _ch3, symbols_wideChar);
        } // TODO: Add bold script when it is supported by a KaTeX font.

      } // "k" is the only double struck lower case letter in the KaTeX fonts.


      symbols_wideChar = String.fromCharCode(0xD835, 0xDD5C); // k double struck

      defineSymbol(symbols_math, main, mathord, "k", symbols_wideChar);
      defineSymbol(symbols_text, main, symbols_textord, "k", symbols_wideChar); // Next, some wide character numerals

      for (var symbols_i4 = 0; symbols_i4 < 10; symbols_i4++) {
        var _ch4 = symbols_i4.toString();

        symbols_wideChar = String.fromCharCode(0xD835, 0xDFCE + symbols_i4); // 0-9 bold

        defineSymbol(symbols_math, main, mathord, _ch4, symbols_wideChar);
        defineSymbol(symbols_text, main, symbols_textord, _ch4, symbols_wideChar);
        symbols_wideChar = String.fromCharCode(0xD835, 0xDFE2 + symbols_i4); // 0-9 sans serif

        defineSymbol(symbols_math, main, mathord, _ch4, symbols_wideChar);
        defineSymbol(symbols_text, main, symbols_textord, _ch4, symbols_wideChar);
        symbols_wideChar = String.fromCharCode(0xD835, 0xDFEC + symbols_i4); // 0-9 bold sans

        defineSymbol(symbols_math, main, mathord, _ch4, symbols_wideChar);
        defineSymbol(symbols_text, main, symbols_textord, _ch4, symbols_wideChar);
        symbols_wideChar = String.fromCharCode(0xD835, 0xDFF6 + symbols_i4); // 0-9 monospace

        defineSymbol(symbols_math, main, mathord, _ch4, symbols_wideChar);
        defineSymbol(symbols_text, main, symbols_textord, _ch4, symbols_wideChar);
      } // We add these Latin-1 letters as symbols for backwards-compatibility,
      // but they are not actually in the font, nor are they supported by the
      // Unicode accent mechanism, so they fall back to Times font and look ugly.
      // TODO(edemaine): Fix this.


      var extraLatin = "ÇÐÞçþ";

      for (var _i5 = 0; _i5 < extraLatin.length; _i5++) {
        var _ch5 = extraLatin.charAt(_i5);

        defineSymbol(symbols_math, main, mathord, _ch5, _ch5);
        defineSymbol(symbols_text, main, symbols_textord, _ch5, _ch5);
      }

      defineSymbol(symbols_text, main, symbols_textord, "ð", "ð"); // Unicode versions of existing characters

      defineSymbol(symbols_text, main, symbols_textord, "\u2013", "–");
      defineSymbol(symbols_text, main, symbols_textord, "\u2014", "—");
      defineSymbol(symbols_text, main, symbols_textord, "\u2018", "‘");
      defineSymbol(symbols_text, main, symbols_textord, "\u2019", "’");
      defineSymbol(symbols_text, main, symbols_textord, "\u201C", "“");
      defineSymbol(symbols_text, main, symbols_textord, "\u201D", "”"); // CONCATENATED MODULE: ./src/wide-character.js

      /**
       * This file provides support for Unicode range U+1D400 to U+1D7FF,
       * Mathematical Alphanumeric Symbols.
       *
       * Function wideCharacterFont takes a wide character as input and returns
       * the font information necessary to render it properly.
       */

      /**
       * Data below is from https://www.unicode.org/charts/PDF/U1D400.pdf
       * That document sorts characters into groups by font type, say bold or italic.
       *
       * In the arrays below, each subarray consists three elements:
       *      * The CSS class of that group when in math mode.
       *      * The CSS class of that group when in text mode.
       *      * The font name, so that KaTeX can get font metrics.
       */

      var wideLatinLetterData = [["mathbf", "textbf", "Main-Bold"], // A-Z bold upright
      ["mathbf", "textbf", "Main-Bold"], // a-z bold upright
      ["mathdefault", "textit", "Math-Italic"], // A-Z italic
      ["mathdefault", "textit", "Math-Italic"], // a-z italic
      ["boldsymbol", "boldsymbol", "Main-BoldItalic"], // A-Z bold italic
      ["boldsymbol", "boldsymbol", "Main-BoldItalic"], // a-z bold italic
      // Map fancy A-Z letters to script, not calligraphic.
      // This aligns with unicode-math and math fonts (except Cambria Math).
      ["mathscr", "textscr", "Script-Regular"], // A-Z script
      ["", "", ""], // a-z script.  No font
      ["", "", ""], // A-Z bold script. No font
      ["", "", ""], // a-z bold script. No font
      ["mathfrak", "textfrak", "Fraktur-Regular"], // A-Z Fraktur
      ["mathfrak", "textfrak", "Fraktur-Regular"], // a-z Fraktur
      ["mathbb", "textbb", "AMS-Regular"], // A-Z double-struck
      ["mathbb", "textbb", "AMS-Regular"], // k double-struck
      ["", "", ""], // A-Z bold Fraktur No font metrics
      ["", "", ""], // a-z bold Fraktur.   No font.
      ["mathsf", "textsf", "SansSerif-Regular"], // A-Z sans-serif
      ["mathsf", "textsf", "SansSerif-Regular"], // a-z sans-serif
      ["mathboldsf", "textboldsf", "SansSerif-Bold"], // A-Z bold sans-serif
      ["mathboldsf", "textboldsf", "SansSerif-Bold"], // a-z bold sans-serif
      ["mathitsf", "textitsf", "SansSerif-Italic"], // A-Z italic sans-serif
      ["mathitsf", "textitsf", "SansSerif-Italic"], // a-z italic sans-serif
      ["", "", ""], // A-Z bold italic sans. No font
      ["", "", ""], // a-z bold italic sans. No font
      ["mathtt", "texttt", "Typewriter-Regular"], // A-Z monospace
      ["mathtt", "texttt", "Typewriter-Regular"]];
      var wideNumeralData = [["mathbf", "textbf", "Main-Bold"], // 0-9 bold
      ["", "", ""], // 0-9 double-struck. No KaTeX font.
      ["mathsf", "textsf", "SansSerif-Regular"], // 0-9 sans-serif
      ["mathboldsf", "textboldsf", "SansSerif-Bold"], // 0-9 bold sans-serif
      ["mathtt", "texttt", "Typewriter-Regular"]];

      var wide_character_wideCharacterFont = function wideCharacterFont(wideChar, mode) {
        // IE doesn't support codePointAt(). So work with the surrogate pair.
        var H = wideChar.charCodeAt(0); // high surrogate

        var L = wideChar.charCodeAt(1); // low surrogate

        var codePoint = (H - 0xD800) * 0x400 + (L - 0xDC00) + 0x10000;
        var j = mode === "math" ? 0 : 1; // column index for CSS class.

        if (0x1D400 <= codePoint && codePoint < 0x1D6A4) {
          // wideLatinLetterData contains exactly 26 chars on each row.
          // So we can calculate the relevant row. No traverse necessary.
          var i = Math.floor((codePoint - 0x1D400) / 26);
          return [wideLatinLetterData[i][2], wideLatinLetterData[i][j]];
        } else if (0x1D7CE <= codePoint && codePoint <= 0x1D7FF) {
          // Numerals, ten per row.
          var _i = Math.floor((codePoint - 0x1D7CE) / 10);

          return [wideNumeralData[_i][2], wideNumeralData[_i][j]];
        } else if (codePoint === 0x1D6A5 || codePoint === 0x1D6A6) {
          // dotless i or j
          return [wideLatinLetterData[0][2], wideLatinLetterData[0][j]];
        } else if (0x1D6A6 < codePoint && codePoint < 0x1D7CE) {
          // Greek letters. Not supported, yet.
          return ["", ""];
        } else {
          // We don't support any wide characters outside 1D400–1D7FF.
          throw new src_ParseError("Unsupported character: " + wideChar);
        }
      }; // CONCATENATED MODULE: ./src/Options.js

      /**
       * This file contains information about the options that the Parser carries
       * around with it while parsing. Data is held in an `Options` object, and when
       * recursing, a new `Options` object can be created with the `.with*` and
       * `.reset` functions.
       */


      var sizeStyleMap = [// Each element contains [textsize, scriptsize, scriptscriptsize].
      // The size mappings are taken from TeX with \normalsize=10pt.
      [1, 1, 1], // size1: [5, 5, 5]              \tiny
      [2, 1, 1], // size2: [6, 5, 5]
      [3, 1, 1], // size3: [7, 5, 5]              \scriptsize
      [4, 2, 1], // size4: [8, 6, 5]              \footnotesize
      [5, 2, 1], // size5: [9, 6, 5]              \small
      [6, 3, 1], // size6: [10, 7, 5]             \normalsize
      [7, 4, 2], // size7: [12, 8, 6]             \large
      [8, 6, 3], // size8: [14.4, 10, 7]          \Large
      [9, 7, 6], // size9: [17.28, 12, 10]        \LARGE
      [10, 8, 7], // size10: [20.74, 14.4, 12]     \huge
      [11, 10, 9]];
      var sizeMultipliers = [// fontMetrics.js:getGlobalMetrics also uses size indexes, so if
      // you change size indexes, change that function.
      0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.2, 1.44, 1.728, 2.074, 2.488];

      var sizeAtStyle = function sizeAtStyle(size, style) {
        return style.size < 2 ? size : sizeStyleMap[size - 1][style.size - 1];
      }; // In these types, "" (empty string) means "no change".

      /**
       * This is the main options class. It contains the current style, size, color,
       * and font.
       *
       * Options objects should not be modified. To create a new Options with
       * different properties, call a `.having*` method.
       */


      var Options_Options =
      /*#__PURE__*/
      function () {
        // A font family applies to a group of fonts (i.e. SansSerif), while a font
        // represents a specific font (i.e. SansSerif Bold).
        // See: https://tex.stackexchange.com/questions/22350/difference-between-textrm-and-mathrm

        /**
         * The base size index.
         */
        function Options(data) {
          this.style = void 0;
          this.color = void 0;
          this.size = void 0;
          this.textSize = void 0;
          this.phantom = void 0;
          this.font = void 0;
          this.fontFamily = void 0;
          this.fontWeight = void 0;
          this.fontShape = void 0;
          this.sizeMultiplier = void 0;
          this.maxSize = void 0;
          this._fontMetrics = void 0;
          this.style = data.style;
          this.color = data.color;
          this.size = data.size || Options.BASESIZE;
          this.textSize = data.textSize || this.size;
          this.phantom = !!data.phantom;
          this.font = data.font || "";
          this.fontFamily = data.fontFamily || "";
          this.fontWeight = data.fontWeight || '';
          this.fontShape = data.fontShape || '';
          this.sizeMultiplier = sizeMultipliers[this.size - 1];
          this.maxSize = data.maxSize;
          this._fontMetrics = undefined;
        }
        /**
         * Returns a new options object with the same properties as "this".  Properties
         * from "extension" will be copied to the new options object.
         */


        var _proto = Options.prototype;

        _proto.extend = function extend(extension) {
          var data = {
            style: this.style,
            size: this.size,
            textSize: this.textSize,
            color: this.color,
            phantom: this.phantom,
            font: this.font,
            fontFamily: this.fontFamily,
            fontWeight: this.fontWeight,
            fontShape: this.fontShape,
            maxSize: this.maxSize
          };

          for (var key in extension) {
            if (extension.hasOwnProperty(key)) {
              data[key] = extension[key];
            }
          }

          return new Options(data);
        }
        /**
         * Return an options object with the given style. If `this.style === style`,
         * returns `this`.
         */
        ;

        _proto.havingStyle = function havingStyle(style) {
          if (this.style === style) {
            return this;
          } else {
            return this.extend({
              style: style,
              size: sizeAtStyle(this.textSize, style)
            });
          }
        }
        /**
         * Return an options object with a cramped version of the current style. If
         * the current style is cramped, returns `this`.
         */
        ;

        _proto.havingCrampedStyle = function havingCrampedStyle() {
          return this.havingStyle(this.style.cramp());
        }
        /**
         * Return an options object with the given size and in at least `\textstyle`.
         * Returns `this` if appropriate.
         */
        ;

        _proto.havingSize = function havingSize(size) {
          if (this.size === size && this.textSize === size) {
            return this;
          } else {
            return this.extend({
              style: this.style.text(),
              size: size,
              textSize: size,
              sizeMultiplier: sizeMultipliers[size - 1]
            });
          }
        }
        /**
         * Like `this.havingSize(BASESIZE).havingStyle(style)`. If `style` is omitted,
         * changes to at least `\textstyle`.
         */
        ;

        _proto.havingBaseStyle = function havingBaseStyle(style) {
          style = style || this.style.text();
          var wantSize = sizeAtStyle(Options.BASESIZE, style);

          if (this.size === wantSize && this.textSize === Options.BASESIZE && this.style === style) {
            return this;
          } else {
            return this.extend({
              style: style,
              size: wantSize
            });
          }
        }
        /**
         * Remove the effect of sizing changes such as \Huge.
         * Keep the effect of the current style, such as \scriptstyle.
         */
        ;

        _proto.havingBaseSizing = function havingBaseSizing() {
          var size;

          switch (this.style.id) {
            case 4:
            case 5:
              size = 3; // normalsize in scriptstyle

              break;

            case 6:
            case 7:
              size = 1; // normalsize in scriptscriptstyle

              break;

            default:
              size = 6;
            // normalsize in textstyle or displaystyle
          }

          return this.extend({
            style: this.style.text(),
            size: size
          });
        }
        /**
         * Create a new options object with the given color.
         */
        ;

        _proto.withColor = function withColor(color) {
          return this.extend({
            color: color
          });
        }
        /**
         * Create a new options object with "phantom" set to true.
         */
        ;

        _proto.withPhantom = function withPhantom() {
          return this.extend({
            phantom: true
          });
        }
        /**
         * Creates a new options object with the given math font or old text font.
         * @type {[type]}
         */
        ;

        _proto.withFont = function withFont(font) {
          return this.extend({
            font: font
          });
        }
        /**
         * Create a new options objects with the given fontFamily.
         */
        ;

        _proto.withTextFontFamily = function withTextFontFamily(fontFamily) {
          return this.extend({
            fontFamily: fontFamily,
            font: ""
          });
        }
        /**
         * Creates a new options object with the given font weight
         */
        ;

        _proto.withTextFontWeight = function withTextFontWeight(fontWeight) {
          return this.extend({
            fontWeight: fontWeight,
            font: ""
          });
        }
        /**
         * Creates a new options object with the given font weight
         */
        ;

        _proto.withTextFontShape = function withTextFontShape(fontShape) {
          return this.extend({
            fontShape: fontShape,
            font: ""
          });
        }
        /**
         * Return the CSS sizing classes required to switch from enclosing options
         * `oldOptions` to `this`. Returns an array of classes.
         */
        ;

        _proto.sizingClasses = function sizingClasses(oldOptions) {
          if (oldOptions.size !== this.size) {
            return ["sizing", "reset-size" + oldOptions.size, "size" + this.size];
          } else {
            return [];
          }
        }
        /**
         * Return the CSS sizing classes required to switch to the base size. Like
         * `this.havingSize(BASESIZE).sizingClasses(this)`.
         */
        ;

        _proto.baseSizingClasses = function baseSizingClasses() {
          if (this.size !== Options.BASESIZE) {
            return ["sizing", "reset-size" + this.size, "size" + Options.BASESIZE];
          } else {
            return [];
          }
        }
        /**
         * Return the font metrics for this size.
         */
        ;

        _proto.fontMetrics = function fontMetrics() {
          if (!this._fontMetrics) {
            this._fontMetrics = getGlobalMetrics(this.size);
          }

          return this._fontMetrics;
        }
        /**
         * Gets the CSS color of the current options object
         */
        ;

        _proto.getColor = function getColor() {
          if (this.phantom) {
            return "transparent";
          } else {
            return this.color;
          }
        };

        return Options;
      }();

      Options_Options.BASESIZE = 6;
      /* harmony default export */

      var src_Options = Options_Options; // CONCATENATED MODULE: ./src/units.js

      /**
       * This file does conversion between units.  In particular, it provides
       * calculateSize to convert other units into ems.
       */
      // This table gives the number of TeX pts in one of each *absolute* TeX unit.
      // Thus, multiplying a length by this number converts the length from units
      // into pts.  Dividing the result by ptPerEm gives the number of ems
      // *assuming* a font size of ptPerEm (normal size, normal style).

      var ptPerUnit = {
        // https://en.wikibooks.org/wiki/LaTeX/Lengths and
        // https://tex.stackexchange.com/a/8263
        "pt": 1,
        // TeX point
        "mm": 7227 / 2540,
        // millimeter
        "cm": 7227 / 254,
        // centimeter
        "in": 72.27,
        // inch
        "bp": 803 / 800,
        // big (PostScript) points
        "pc": 12,
        // pica
        "dd": 1238 / 1157,
        // didot
        "cc": 14856 / 1157,
        // cicero (12 didot)
        "nd": 685 / 642,
        // new didot
        "nc": 1370 / 107,
        // new cicero (12 new didot)
        "sp": 1 / 65536,
        // scaled point (TeX's internal smallest unit)
        // https://tex.stackexchange.com/a/41371
        "px": 803 / 800 // \pdfpxdimen defaults to 1 bp in pdfTeX and LuaTeX

      }; // Dictionary of relative units, for fast validity testing.

      var relativeUnit = {
        "ex": true,
        "em": true,
        "mu": true
      };
      /**
       * Determine whether the specified unit (either a string defining the unit
       * or a "size" parse node containing a unit field) is valid.
       */

      var validUnit = function validUnit(unit) {
        if (typeof unit !== "string") {
          unit = unit.unit;
        }

        return unit in ptPerUnit || unit in relativeUnit || unit === "ex";
      };
      /*
       * Convert a "size" parse node (with numeric "number" and string "unit" fields,
       * as parsed by functions.js argType "size") into a CSS em value for the
       * current style/scale.  `options` gives the current options.
       */


      var units_calculateSize = function calculateSize(sizeValue, options) {
        var scale;

        if (sizeValue.unit in ptPerUnit) {
          // Absolute units
          scale = ptPerUnit[sizeValue.unit] // Convert unit to pt
          / options.fontMetrics().ptPerEm // Convert pt to CSS em
          / options.sizeMultiplier; // Unscale to make absolute units
        } else if (sizeValue.unit === "mu") {
          // `mu` units scale with scriptstyle/scriptscriptstyle.
          scale = options.fontMetrics().cssEmPerMu;
        } else {
          // Other relative units always refer to the *textstyle* font
          // in the current size.
          var unitOptions;

          if (options.style.isTight()) {
            // isTight() means current style is script/scriptscript.
            unitOptions = options.havingStyle(options.style.text());
          } else {
            unitOptions = options;
          } // TODO: In TeX these units are relative to the quad of the current
          // *text* font, e.g. cmr10. KaTeX instead uses values from the
          // comparably-sized *Computer Modern symbol* font. At 10pt, these
          // match. At 7pt and 5pt, they differ: cmr7=1.138894, cmsy7=1.170641;
          // cmr5=1.361133, cmsy5=1.472241. Consider $\scriptsize a\kern1emb$.
          // TeX \showlists shows a kern of 1.13889 * fontsize;
          // KaTeX shows a kern of 1.171 * fontsize.


          if (sizeValue.unit === "ex") {
            scale = unitOptions.fontMetrics().xHeight;
          } else if (sizeValue.unit === "em") {
            scale = unitOptions.fontMetrics().quad;
          } else {
            throw new src_ParseError("Invalid unit: '" + sizeValue.unit + "'");
          }

          if (unitOptions !== options) {
            scale *= unitOptions.sizeMultiplier / options.sizeMultiplier;
          }
        }

        return Math.min(sizeValue.number * scale, options.maxSize);
      }; // CONCATENATED MODULE: ./src/buildCommon.js

      /* eslint no-console:0 */

      /**
       * This module contains general functions that can be used for building
       * different kinds of domTree nodes in a consistent manner.
       */
      // The following have to be loaded from Main-Italic font, using class mathit


      var mathitLetters = ["\\imath", "ı", // dotless i
      "\\jmath", "ȷ", // dotless j
      "\\pounds", "\\mathsterling", "\\textsterling", "£"];
      /**
       * Looks up the given symbol in fontMetrics, after applying any symbol
       * replacements defined in symbol.js
       */

      var buildCommon_lookupSymbol = function lookupSymbol(value, // TODO(#963): Use a union type for this.
      fontName, mode) {
        // Replace the value with its replaced value from symbol.js
        if (src_symbols[mode][value] && src_symbols[mode][value].replace) {
          value = src_symbols[mode][value].replace;
        }

        return {
          value: value,
          metrics: getCharacterMetrics(value, fontName, mode)
        };
      };
      /**
       * Makes a symbolNode after translation via the list of symbols in symbols.js.
       * Correctly pulls out metrics for the character, and optionally takes a list of
       * classes to be attached to the node.
       *
       * TODO: make argument order closer to makeSpan
       * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which
       * should if present come first in `classes`.
       * TODO(#953): Make `options` mandatory and always pass it in.
       */


      var buildCommon_makeSymbol = function makeSymbol(value, fontName, mode, options, classes) {
        var lookup = buildCommon_lookupSymbol(value, fontName, mode);
        var metrics = lookup.metrics;
        value = lookup.value;
        var symbolNode;

        if (metrics) {
          var italic = metrics.italic;

          if (mode === "text" || options && options.font === "mathit") {
            italic = 0;
          }

          symbolNode = new domTree_SymbolNode(value, metrics.height, metrics.depth, italic, metrics.skew, metrics.width, classes);
        } else {
          // TODO(emily): Figure out a good way to only print this in development
          typeof console !== "undefined" && console.warn("No character metrics for '" + value + "' in style '" + fontName + "'");
          symbolNode = new domTree_SymbolNode(value, 0, 0, 0, 0, 0, classes);
        }

        if (options) {
          symbolNode.maxFontSize = options.sizeMultiplier;

          if (options.style.isTight()) {
            symbolNode.classes.push("mtight");
          }

          var color = options.getColor();

          if (color) {
            symbolNode.style.color = color;
          }
        }

        return symbolNode;
      };
      /**
       * Makes a symbol in Main-Regular or AMS-Regular.
       * Used for rel, bin, open, close, inner, and punct.
       *
       * TODO(#953): Make `options` mandatory and always pass it in.
       */


      var buildCommon_mathsym = function mathsym(value, mode, options, classes) {
        if (classes === void 0) {
          classes = [];
        } // Decide what font to render the symbol in by its entry in the symbols
        // table.
        // Have a special case for when the value = \ because the \ is used as a
        // textord in unsupported command errors but cannot be parsed as a regular
        // text ordinal and is therefore not present as a symbol in the symbols
        // table for text, as well as a special case for boldsymbol because it
        // can be used for bold + and -


        if (options && options.font && options.font === "boldsymbol" && buildCommon_lookupSymbol(value, "Main-Bold", mode).metrics) {
          return buildCommon_makeSymbol(value, "Main-Bold", mode, options, classes.concat(["mathbf"]));
        } else if (value === "\\" || src_symbols[mode][value].font === "main") {
          return buildCommon_makeSymbol(value, "Main-Regular", mode, options, classes);
        } else {
          return buildCommon_makeSymbol(value, "AMS-Regular", mode, options, classes.concat(["amsrm"]));
        }
      };
      /**
       * Determines which of the two font names (Main-Italic and Math-Italic) and
       * corresponding style tags (maindefault or mathit) to use for default math font,
       * depending on the symbol.
       */


      var buildCommon_mathdefault = function mathdefault(value, mode, options, classes) {
        if (/[0-9]/.test(value.charAt(0)) || // glyphs for \imath and \jmath do not exist in Math-Italic so we
        // need to use Main-Italic instead
        utils.contains(mathitLetters, value)) {
          return {
            fontName: "Main-Italic",
            fontClass: "mathit"
          };
        } else {
          return {
            fontName: "Math-Italic",
            fontClass: "mathdefault"
          };
        }
      };
      /**
       * Determines which of the font names (Main-Italic, Math-Italic, and Caligraphic)
       * and corresponding style tags (mathit, mathdefault, or mathcal) to use for font
       * "mathnormal", depending on the symbol.  Use this function instead of fontMap for
       * font "mathnormal".
       */


      var buildCommon_mathnormal = function mathnormal(value, mode, options, classes) {
        if (utils.contains(mathitLetters, value)) {
          return {
            fontName: "Main-Italic",
            fontClass: "mathit"
          };
        } else if (/[0-9]/.test(value.charAt(0))) {
          return {
            fontName: "Caligraphic-Regular",
            fontClass: "mathcal"
          };
        } else {
          return {
            fontName: "Math-Italic",
            fontClass: "mathdefault"
          };
        }
      };
      /**
       * Determines which of the two font names (Main-Bold and Math-BoldItalic) and
       * corresponding style tags (mathbf or boldsymbol) to use for font "boldsymbol",
       * depending on the symbol.  Use this function instead of fontMap for font
       * "boldsymbol".
       */


      var boldsymbol = function boldsymbol(value, mode, options, classes) {
        if (buildCommon_lookupSymbol(value, "Math-BoldItalic", mode).metrics) {
          return {
            fontName: "Math-BoldItalic",
            fontClass: "boldsymbol"
          };
        } else {
          // Some glyphs do not exist in Math-BoldItalic so we need to use
          // Main-Bold instead.
          return {
            fontName: "Main-Bold",
            fontClass: "mathbf"
          };
        }
      };
      /**
       * Makes either a mathord or textord in the correct font and color.
       */


      var buildCommon_makeOrd = function makeOrd(group, options, type) {
        var mode = group.mode;
        var text = group.text;
        var classes = ["mord"]; // Math mode or Old font (i.e. \rm)

        var isFont = mode === "math" || mode === "text" && options.font;
        var fontOrFamily = isFont ? options.font : options.fontFamily;

        if (text.charCodeAt(0) === 0xD835) {
          // surrogate pairs get special treatment
          var _wideCharacterFont = wide_character_wideCharacterFont(text, mode),
              wideFontName = _wideCharacterFont[0],
              wideFontClass = _wideCharacterFont[1];

          return buildCommon_makeSymbol(text, wideFontName, mode, options, classes.concat(wideFontClass));
        } else if (fontOrFamily) {
          var fontName;
          var fontClasses;

          if (fontOrFamily === "boldsymbol" || fontOrFamily === "mathnormal") {
            var fontData = fontOrFamily === "boldsymbol" ? boldsymbol(text, mode, options, classes) : buildCommon_mathnormal(text, mode, options, classes);
            fontName = fontData.fontName;
            fontClasses = [fontData.fontClass];
          } else if (utils.contains(mathitLetters, text)) {
            fontName = "Main-Italic";
            fontClasses = ["mathit"];
          } else if (isFont) {
            fontName = fontMap[fontOrFamily].fontName;
            fontClasses = [fontOrFamily];
          } else {
            fontName = retrieveTextFontName(fontOrFamily, options.fontWeight, options.fontShape);
            fontClasses = [fontOrFamily, options.fontWeight, options.fontShape];
          }

          if (buildCommon_lookupSymbol(text, fontName, mode).metrics) {
            return buildCommon_makeSymbol(text, fontName, mode, options, classes.concat(fontClasses));
          } else if (ligatures.hasOwnProperty(text) && fontName.substr(0, 10) === "Typewriter") {
            // Deconstruct ligatures in monospace fonts (\texttt, \tt).
            var parts = [];

            for (var i = 0; i < text.length; i++) {
              parts.push(buildCommon_makeSymbol(text[i], fontName, mode, options, classes.concat(fontClasses)));
            }

            return buildCommon_makeFragment(parts);
          }
        } // Makes a symbol in the default font for mathords and textords.


        if (type === "mathord") {
          var fontLookup = buildCommon_mathdefault(text, mode, options, classes);
          return buildCommon_makeSymbol(text, fontLookup.fontName, mode, options, classes.concat([fontLookup.fontClass]));
        } else if (type === "textord") {
          var font = src_symbols[mode][text] && src_symbols[mode][text].font;

          if (font === "ams") {
            var _fontName = retrieveTextFontName("amsrm", options.fontWeight, options.fontShape);

            return buildCommon_makeSymbol(text, _fontName, mode, options, classes.concat("amsrm", options.fontWeight, options.fontShape));
          } else if (font === "main" || !font) {
            var _fontName2 = retrieveTextFontName("textrm", options.fontWeight, options.fontShape);

            return buildCommon_makeSymbol(text, _fontName2, mode, options, classes.concat(options.fontWeight, options.fontShape));
          } else {
            // fonts added by plugins
            var _fontName3 = retrieveTextFontName(font, options.fontWeight, options.fontShape); // We add font name as a css class


            return buildCommon_makeSymbol(text, _fontName3, mode, options, classes.concat(_fontName3, options.fontWeight, options.fontShape));
          }
        } else {
          throw new Error("unexpected type: " + type + " in makeOrd");
        }
      };
      /**
       * Returns true if subsequent symbolNodes have the same classes, skew, maxFont,
       * and styles.
       */


      var buildCommon_canCombine = function canCombine(prev, next) {
        if (createClass(prev.classes) !== createClass(next.classes) || prev.skew !== next.skew || prev.maxFontSize !== next.maxFontSize) {
          return false;
        }

        for (var style in prev.style) {
          if (prev.style.hasOwnProperty(style) && prev.style[style] !== next.style[style]) {
            return false;
          }
        }

        for (var _style in next.style) {
          if (next.style.hasOwnProperty(_style) && prev.style[_style] !== next.style[_style]) {
            return false;
          }
        }

        return true;
      };
      /**
       * Combine consequetive domTree.symbolNodes into a single symbolNode.
       * Note: this function mutates the argument.
       */


      var buildCommon_tryCombineChars = function tryCombineChars(chars) {
        for (var i = 0; i < chars.length - 1; i++) {
          var prev = chars[i];
          var next = chars[i + 1];

          if (prev instanceof domTree_SymbolNode && next instanceof domTree_SymbolNode && buildCommon_canCombine(prev, next)) {
            prev.text += next.text;
            prev.height = Math.max(prev.height, next.height);
            prev.depth = Math.max(prev.depth, next.depth); // Use the last character's italic correction since we use
            // it to add padding to the right of the span created from
            // the combined characters.

            prev.italic = next.italic;
            chars.splice(i + 1, 1);
            i--;
          }
        }

        return chars;
      };
      /**
       * Calculate the height, depth, and maxFontSize of an element based on its
       * children.
       */


      var sizeElementFromChildren = function sizeElementFromChildren(elem) {
        var height = 0;
        var depth = 0;
        var maxFontSize = 0;

        for (var i = 0; i < elem.children.length; i++) {
          var child = elem.children[i];

          if (child.height > height) {
            height = child.height;
          }

          if (child.depth > depth) {
            depth = child.depth;
          }

          if (child.maxFontSize > maxFontSize) {
            maxFontSize = child.maxFontSize;
          }
        }

        elem.height = height;
        elem.depth = depth;
        elem.maxFontSize = maxFontSize;
      };
      /**
       * Makes a span with the given list of classes, list of children, and options.
       *
       * TODO(#953): Ensure that `options` is always provided (currently some call
       * sites don't pass it) and make the type below mandatory.
       * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which
       * should if present come first in `classes`.
       */


      var buildCommon_makeSpan = function makeSpan(classes, children, options, style) {
        var span = new domTree_Span(classes, children, options, style);
        sizeElementFromChildren(span);
        return span;
      }; // SVG one is simpler -- doesn't require height, depth, max-font setting.
      // This is also a separate method for typesafety.


      var buildCommon_makeSvgSpan = function makeSvgSpan(classes, children, options, style) {
        return new domTree_Span(classes, children, options, style);
      };

      var makeLineSpan = function makeLineSpan(className, options, thickness) {
        var line = buildCommon_makeSpan([className], [], options);
        line.height = thickness || options.fontMetrics().defaultRuleThickness;
        line.style.borderBottomWidth = line.height + "em";
        line.maxFontSize = 1.0;
        return line;
      };
      /**
       * Makes an anchor with the given href, list of classes, list of children,
       * and options.
       */


      var buildCommon_makeAnchor = function makeAnchor(href, classes, children, options) {
        var anchor = new domTree_Anchor(href, classes, children, options);
        sizeElementFromChildren(anchor);
        return anchor;
      };
      /**
       * Makes a document fragment with the given list of children.
       */


      var buildCommon_makeFragment = function makeFragment(children) {
        var fragment = new tree_DocumentFragment(children);
        sizeElementFromChildren(fragment);
        return fragment;
      };
      /**
       * Wraps group in a span if it's a document fragment, allowing to apply classes
       * and styles
       */


      var buildCommon_wrapFragment = function wrapFragment(group, options) {
        if (group instanceof tree_DocumentFragment) {
          return buildCommon_makeSpan([], [group], options);
        }

        return group;
      }; // These are exact object types to catch typos in the names of the optional fields.
      // Computes the updated `children` list and the overall depth.
      //
      // This helper function for makeVList makes it easier to enforce type safety by
      // allowing early exits (returns) in the logic.


      var getVListChildrenAndDepth = function getVListChildrenAndDepth(params) {
        if (params.positionType === "individualShift") {
          var oldChildren = params.children;
          var children = [oldChildren[0]]; // Add in kerns to the list of params.children to get each element to be
          // shifted to the correct specified shift

          var _depth = -oldChildren[0].shift - oldChildren[0].elem.depth;

          var currPos = _depth;

          for (var i = 1; i < oldChildren.length; i++) {
            var diff = -oldChildren[i].shift - currPos - oldChildren[i].elem.depth;
            var size = diff - (oldChildren[i - 1].elem.height + oldChildren[i - 1].elem.depth);
            currPos = currPos + diff;
            children.push({
              type: "kern",
              size: size
            });
            children.push(oldChildren[i]);
          }

          return {
            children: children,
            depth: _depth
          };
        }

        var depth;

        if (params.positionType === "top") {
          // We always start at the bottom, so calculate the bottom by adding up
          // all the sizes
          var bottom = params.positionData;

          for (var _i = 0; _i < params.children.length; _i++) {
            var child = params.children[_i];
            bottom -= child.type === "kern" ? child.size : child.elem.height + child.elem.depth;
          }

          depth = bottom;
        } else if (params.positionType === "bottom") {
          depth = -params.positionData;
        } else {
          var firstChild = params.children[0];

          if (firstChild.type !== "elem") {
            throw new Error('First child must have type "elem".');
          }

          if (params.positionType === "shift") {
            depth = -firstChild.elem.depth - params.positionData;
          } else if (params.positionType === "firstBaseline") {
            depth = -firstChild.elem.depth;
          } else {
            throw new Error("Invalid positionType " + params.positionType + ".");
          }
        }

        return {
          children: params.children,
          depth: depth
        };
      };
      /**
       * Makes a vertical list by stacking elements and kerns on top of each other.
       * Allows for many different ways of specifying the positioning method.
       *
       * See VListParam documentation above.
       */


      var buildCommon_makeVList = function makeVList(params, options) {
        var _getVListChildrenAndD = getVListChildrenAndDepth(params),
            children = _getVListChildrenAndD.children,
            depth = _getVListChildrenAndD.depth; // Create a strut that is taller than any list item. The strut is added to
        // each item, where it will determine the item's baseline. Since it has
        // `overflow:hidden`, the strut's top edge will sit on the item's line box's
        // top edge and the strut's bottom edge will sit on the item's baseline,
        // with no additional line-height spacing. This allows the item baseline to
        // be positioned precisely without worrying about font ascent and
        // line-height.


        var pstrutSize = 0;

        for (var i = 0; i < children.length; i++) {
          var child = children[i];

          if (child.type === "elem") {
            var elem = child.elem;
            pstrutSize = Math.max(pstrutSize, elem.maxFontSize, elem.height);
          }
        }

        pstrutSize += 2;
        var pstrut = buildCommon_makeSpan(["pstrut"], []);
        pstrut.style.height = pstrutSize + "em"; // Create a new list of actual children at the correct offsets

        var realChildren = [];
        var minPos = depth;
        var maxPos = depth;
        var currPos = depth;

        for (var _i2 = 0; _i2 < children.length; _i2++) {
          var _child = children[_i2];

          if (_child.type === "kern") {
            currPos += _child.size;
          } else {
            var _elem = _child.elem;
            var classes = _child.wrapperClasses || [];
            var style = _child.wrapperStyle || {};
            var childWrap = buildCommon_makeSpan(classes, [pstrut, _elem], undefined, style);
            childWrap.style.top = -pstrutSize - currPos - _elem.depth + "em";

            if (_child.marginLeft) {
              childWrap.style.marginLeft = _child.marginLeft;
            }

            if (_child.marginRight) {
              childWrap.style.marginRight = _child.marginRight;
            }

            realChildren.push(childWrap);
            currPos += _elem.height + _elem.depth;
          }

          minPos = Math.min(minPos, currPos);
          maxPos = Math.max(maxPos, currPos);
        } // The vlist contents go in a table-cell with `vertical-align:bottom`.
        // This cell's bottom edge will determine the containing table's baseline
        // without overly expanding the containing line-box.


        var vlist = buildCommon_makeSpan(["vlist"], realChildren);
        vlist.style.height = maxPos + "em"; // A second row is used if necessary to represent the vlist's depth.

        var rows;

        if (minPos < 0) {
          // We will define depth in an empty span with display: table-cell.
          // It should render with the height that we define. But Chrome, in
          // contenteditable mode only, treats that span as if it contains some
          // text content. And that min-height over-rides our desired height.
          // So we put another empty span inside the depth strut span.
          var emptySpan = buildCommon_makeSpan([], []);
          var depthStrut = buildCommon_makeSpan(["vlist"], [emptySpan]);
          depthStrut.style.height = -minPos + "em"; // Safari wants the first row to have inline content; otherwise it
          // puts the bottom of the *second* row on the baseline.

          var topStrut = buildCommon_makeSpan(["vlist-s"], [new domTree_SymbolNode("\u200B")]);
          rows = [buildCommon_makeSpan(["vlist-r"], [vlist, topStrut]), buildCommon_makeSpan(["vlist-r"], [depthStrut])];
        } else {
          rows = [buildCommon_makeSpan(["vlist-r"], [vlist])];
        }

        var vtable = buildCommon_makeSpan(["vlist-t"], rows);

        if (rows.length === 2) {
          vtable.classes.push("vlist-t2");
        }

        vtable.height = maxPos;
        vtable.depth = -minPos;
        return vtable;
      }; // Glue is a concept from TeX which is a flexible space between elements in
      // either a vertical or horizontal list. In KaTeX, at least for now, it's
      // static space between elements in a horizontal layout.


      var buildCommon_makeGlue = function makeGlue(measurement, options) {
        // Make an empty span for the space
        var rule = buildCommon_makeSpan(["mspace"], [], options);
        var size = units_calculateSize(measurement, options);
        rule.style.marginRight = size + "em";
        return rule;
      }; // Takes font options, and returns the appropriate fontLookup name


      var retrieveTextFontName = function retrieveTextFontName(fontFamily, fontWeight, fontShape) {
        var baseFontName = "";

        switch (fontFamily) {
          case "amsrm":
            baseFontName = "AMS";
            break;

          case "textrm":
            baseFontName = "Main";
            break;

          case "textsf":
            baseFontName = "SansSerif";
            break;

          case "texttt":
            baseFontName = "Typewriter";
            break;

          default:
            baseFontName = fontFamily;
          // use fonts added by a plugin
        }

        var fontStylesName;

        if (fontWeight === "textbf" && fontShape === "textit") {
          fontStylesName = "BoldItalic";
        } else if (fontWeight === "textbf") {
          fontStylesName = "Bold";
        } else if (fontWeight === "textit") {
          fontStylesName = "Italic";
        } else {
          fontStylesName = "Regular";
        }

        return baseFontName + "-" + fontStylesName;
      };
      /**
       * Maps TeX font commands to objects containing:
       * - variant: string used for "mathvariant" attribute in buildMathML.js
       * - fontName: the "style" parameter to fontMetrics.getCharacterMetrics
       */
      // A map between tex font commands an MathML mathvariant attribute values


      var fontMap = {
        // styles
        "mathbf": {
          variant: "bold",
          fontName: "Main-Bold"
        },
        "mathrm": {
          variant: "normal",
          fontName: "Main-Regular"
        },
        "textit": {
          variant: "italic",
          fontName: "Main-Italic"
        },
        "mathit": {
          variant: "italic",
          fontName: "Main-Italic"
        },
        // Default math font, "mathnormal" and "boldsymbol" are missing because they
        // require the use of several fonts: Main-Italic and Math-Italic for default
        // math font, Main-Italic, Math-Italic, Caligraphic for "mathnormal", and
        // Math-BoldItalic and Main-Bold for "boldsymbol".  This is handled by a
        // special case in makeOrd which ends up calling mathdefault, mathnormal,
        // and boldsymbol.
        // families
        "mathbb": {
          variant: "double-struck",
          fontName: "AMS-Regular"
        },
        "mathcal": {
          variant: "script",
          fontName: "Caligraphic-Regular"
        },
        "mathfrak": {
          variant: "fraktur",
          fontName: "Fraktur-Regular"
        },
        "mathscr": {
          variant: "script",
          fontName: "Script-Regular"
        },
        "mathsf": {
          variant: "sans-serif",
          fontName: "SansSerif-Regular"
        },
        "mathtt": {
          variant: "monospace",
          fontName: "Typewriter-Regular"
        }
      };
      var svgData = {
        //   path, width, height
        vec: ["vec", 0.471, 0.714],
        // values from the font glyph
        oiintSize1: ["oiintSize1", 0.957, 0.499],
        // oval to overlay the integrand
        oiintSize2: ["oiintSize2", 1.472, 0.659],
        oiiintSize1: ["oiiintSize1", 1.304, 0.499],
        oiiintSize2: ["oiiintSize2", 1.98, 0.659]
      };

      var buildCommon_staticSvg = function staticSvg(value, options) {
        // Create a span with inline SVG for the element.
        var _svgData$value = svgData[value],
            pathName = _svgData$value[0],
            width = _svgData$value[1],
            height = _svgData$value[2];
        var path = new domTree_PathNode(pathName);
        var svgNode = new SvgNode([path], {
          "width": width + "em",
          "height": height + "em",
          // Override CSS rule `.katex svg { width: 100% }`
          "style": "width:" + width + "em",
          "viewBox": "0 0 " + 1000 * width + " " + 1000 * height,
          "preserveAspectRatio": "xMinYMin"
        });
        var span = buildCommon_makeSvgSpan(["overlay"], [svgNode], options);
        span.height = height;
        span.style.height = height + "em";
        span.style.width = width + "em";
        return span;
      };
      /* harmony default export */


      var buildCommon = {
        fontMap: fontMap,
        makeSymbol: buildCommon_makeSymbol,
        mathsym: buildCommon_mathsym,
        makeSpan: buildCommon_makeSpan,
        makeSvgSpan: buildCommon_makeSvgSpan,
        makeLineSpan: makeLineSpan,
        makeAnchor: buildCommon_makeAnchor,
        makeFragment: buildCommon_makeFragment,
        wrapFragment: buildCommon_wrapFragment,
        makeVList: buildCommon_makeVList,
        makeOrd: buildCommon_makeOrd,
        makeGlue: buildCommon_makeGlue,
        staticSvg: buildCommon_staticSvg,
        svgData: svgData,
        tryCombineChars: buildCommon_tryCombineChars
      }; // CONCATENATED MODULE: ./src/parseNode.js

      /**
       * Asserts that the node is of the given type and returns it with stricter
       * typing. Throws if the node's type does not match.
       */

      function assertNodeType(node, type) {
        var typedNode = checkNodeType(node, type);

        if (!typedNode) {
          throw new Error("Expected node of type " + type + ", but got " + (node ? "node of type " + node.type : String(node)));
        } // $FlowFixMe: Unsure why.


        return typedNode;
      }
      /**
       * Returns the node more strictly typed iff it is of the given type. Otherwise,
       * returns null.
       */


      function checkNodeType(node, type) {
        if (node && node.type === type) {
          // The definition of ParseNode<TYPE> doesn't communicate to flow that
          // `type: TYPE` (as that's not explicitly mentioned anywhere), though that
          // happens to be true for all our value types.
          // $FlowFixMe
          return node;
        }

        return null;
      }
      /**
       * Asserts that the node is of the given type and returns it with stricter
       * typing. Throws if the node's type does not match.
       */


      function assertAtomFamily(node, family) {
        var typedNode = checkAtomFamily(node, family);

        if (!typedNode) {
          throw new Error("Expected node of type \"atom\" and family \"" + family + "\", but got " + (node ? node.type === "atom" ? "atom of family " + node.family : "node of type " + node.type : String(node)));
        }

        return typedNode;
      }
      /**
       * Returns the node more strictly typed iff it is of the given type. Otherwise,
       * returns null.
       */


      function checkAtomFamily(node, family) {
        return node && node.type === "atom" && node.family === family ? node : null;
      }
      /**
       * Returns the node more strictly typed iff it is of the given type. Otherwise,
       * returns null.
       */


      function assertSymbolNodeType(node) {
        var typedNode = checkSymbolNodeType(node);

        if (!typedNode) {
          throw new Error("Expected node of symbol group type, but got " + (node ? "node of type " + node.type : String(node)));
        }

        return typedNode;
      }
      /**
       * Returns the node more strictly typed iff it is of the given type. Otherwise,
       * returns null.
       */


      function checkSymbolNodeType(node) {
        if (node && (node.type === "atom" || NON_ATOMS.hasOwnProperty(node.type))) {
          // $FlowFixMe
          return node;
        }

        return null;
      } // CONCATENATED MODULE: ./src/spacingData.js

      /**
       * Describes spaces between different classes of atoms.
       */


      var thinspace = {
        number: 3,
        unit: "mu"
      };
      var mediumspace = {
        number: 4,
        unit: "mu"
      };
      var thickspace = {
        number: 5,
        unit: "mu"
      }; // Making the type below exact with all optional fields doesn't work due to
      // - https://github.com/facebook/flow/issues/4582
      // - https://github.com/facebook/flow/issues/5688
      // However, since *all* fields are optional, $Shape<> works as suggested in 5688
      // above.
      // Spacing relationships for display and text styles

      var spacings = {
        mord: {
          mop: thinspace,
          mbin: mediumspace,
          mrel: thickspace,
          minner: thinspace
        },
        mop: {
          mord: thinspace,
          mop: thinspace,
          mrel: thickspace,
          minner: thinspace
        },
        mbin: {
          mord: mediumspace,
          mop: mediumspace,
          mopen: mediumspace,
          minner: mediumspace
        },
        mrel: {
          mord: thickspace,
          mop: thickspace,
          mopen: thickspace,
          minner: thickspace
        },
        mopen: {},
        mclose: {
          mop: thinspace,
          mbin: mediumspace,
          mrel: thickspace,
          minner: thinspace
        },
        mpunct: {
          mord: thinspace,
          mop: thinspace,
          mrel: thickspace,
          mopen: thinspace,
          mclose: thinspace,
          mpunct: thinspace,
          minner: thinspace
        },
        minner: {
          mord: thinspace,
          mop: thinspace,
          mbin: mediumspace,
          mrel: thickspace,
          mopen: thinspace,
          mpunct: thinspace,
          minner: thinspace
        }
      }; // Spacing relationships for script and scriptscript styles

      var tightSpacings = {
        mord: {
          mop: thinspace
        },
        mop: {
          mord: thinspace,
          mop: thinspace
        },
        mbin: {},
        mrel: {},
        mopen: {},
        mclose: {
          mop: thinspace
        },
        mpunct: {},
        minner: {
          mop: thinspace
        }
      }; // CONCATENATED MODULE: ./src/defineFunction.js

      /**
       * All registered functions.
       * `functions.js` just exports this same dictionary again and makes it public.
       * `Parser.js` requires this dictionary.
       */

      var _functions = {};
      /**
       * All HTML builders. Should be only used in the `define*` and the `build*ML`
       * functions.
       */

      var _htmlGroupBuilders = {};
      /**
       * All MathML builders. Should be only used in the `define*` and the `build*ML`
       * functions.
       */

      var _mathmlGroupBuilders = {};

      function defineFunction(_ref) {
        var type = _ref.type,
            nodeType = _ref.nodeType,
            names = _ref.names,
            props = _ref.props,
            handler = _ref.handler,
            htmlBuilder = _ref.htmlBuilder,
            mathmlBuilder = _ref.mathmlBuilder; // Set default values of functions

        var data = {
          type: type,
          numArgs: props.numArgs,
          argTypes: props.argTypes,
          greediness: props.greediness === undefined ? 1 : props.greediness,
          allowedInText: !!props.allowedInText,
          allowedInMath: props.allowedInMath === undefined ? true : props.allowedInMath,
          numOptionalArgs: props.numOptionalArgs || 0,
          infix: !!props.infix,
          consumeMode: props.consumeMode,
          handler: handler
        };

        for (var i = 0; i < names.length; ++i) {
          // TODO: The value type of _functions should be a type union of all
          // possible `FunctionSpec<>` possibilities instead of `FunctionSpec<*>`,
          // which is an existential type.
          // $FlowFixMe
          _functions[names[i]] = data;
        }

        if (type) {
          if (htmlBuilder) {
            _htmlGroupBuilders[type] = htmlBuilder;
          }

          if (mathmlBuilder) {
            _mathmlGroupBuilders[type] = mathmlBuilder;
          }
        }
      }
      /**
       * Use this to register only the HTML and MathML builders for a function (e.g.
       * if the function's ParseNode is generated in Parser.js rather than via a
       * stand-alone handler provided to `defineFunction`).
       */


      function defineFunctionBuilders(_ref2) {
        var type = _ref2.type,
            htmlBuilder = _ref2.htmlBuilder,
            mathmlBuilder = _ref2.mathmlBuilder;
        defineFunction({
          type: type,
          names: [],
          props: {
            numArgs: 0
          },
          handler: function handler() {
            throw new Error('Should never be called.');
          },
          htmlBuilder: htmlBuilder,
          mathmlBuilder: mathmlBuilder
        });
      } // Since the corresponding buildHTML/buildMathML function expects a
      // list of elements, we normalize for different kinds of arguments


      var defineFunction_ordargument = function ordargument(arg) {
        var node = checkNodeType(arg, "ordgroup");
        return node ? node.body : [arg];
      }; // CONCATENATED MODULE: ./src/buildHTML.js

      /**
       * This file does the main work of building a domTree structure from a parse
       * tree. The entry point is the `buildHTML` function, which takes a parse tree.
       * Then, the buildExpression, buildGroup, and various groupBuilders functions
       * are called, to produce a final HTML tree.
       */


      var buildHTML_makeSpan = buildCommon.makeSpan; // Binary atoms (first class `mbin`) change into ordinary atoms (`mord`)
      // depending on their surroundings. See TeXbook pg. 442-446, Rules 5 and 6,
      // and the text before Rule 19.

      var binLeftCanceller = ["leftmost", "mbin", "mopen", "mrel", "mop", "mpunct"];
      var binRightCanceller = ["rightmost", "mrel", "mclose", "mpunct"];
      var buildHTML_styleMap = {
        "display": src_Style.DISPLAY,
        "text": src_Style.TEXT,
        "script": src_Style.SCRIPT,
        "scriptscript": src_Style.SCRIPTSCRIPT
      };
      var DomEnum = {
        mord: "mord",
        mop: "mop",
        mbin: "mbin",
        mrel: "mrel",
        mopen: "mopen",
        mclose: "mclose",
        mpunct: "mpunct",
        minner: "minner"
      };
      /**
       * Take a list of nodes, build them in order, and return a list of the built
       * nodes. documentFragments are flattened into their contents, so the
       * returned list contains no fragments. `isRealGroup` is true if `expression`
       * is a real group (no atoms will be added on either side), as opposed to
       * a partial group (e.g. one created by \color). `surrounding` is an array
       * consisting type of nodes that will be added to the left and right.
       */

      var buildHTML_buildExpression = function buildExpression(expression, options, isRealGroup, surrounding) {
        if (surrounding === void 0) {
          surrounding = [null, null];
        } // Parse expressions into `groups`.


        var groups = [];

        for (var i = 0; i < expression.length; i++) {
          var output = buildHTML_buildGroup(expression[i], options);

          if (output instanceof tree_DocumentFragment) {
            var children = output.children;
            groups.push.apply(groups, children);
          } else {
            groups.push(output);
          }
        } // If `expression` is a partial group, let the parent handle spacings
        // to avoid processing groups multiple times.


        if (!isRealGroup) {
          return groups;
        }

        var glueOptions = options;

        if (expression.length === 1) {
          var node = checkNodeType(expression[0], "sizing") || checkNodeType(expression[0], "styling");

          if (!node) {// No match.
          } else if (node.type === "sizing") {
            glueOptions = options.havingSize(node.size);
          } else if (node.type === "styling") {
            glueOptions = options.havingStyle(buildHTML_styleMap[node.style]);
          }
        } // Dummy spans for determining spacings between surrounding atoms.
        // If `expression` has no atoms on the left or right, class "leftmost"
        // or "rightmost", respectively, is used to indicate it.


        var dummyPrev = buildHTML_makeSpan([surrounding[0] || "leftmost"], [], options);
        var dummyNext = buildHTML_makeSpan([surrounding[1] || "rightmost"], [], options); // TODO: These code assumes that a node's math class is the first element
        // of its `classes` array. A later cleanup should ensure this, for
        // instance by changing the signature of `makeSpan`.
        // Before determining what spaces to insert, perform bin cancellation.
        // Binary operators change to ordinary symbols in some contexts.

        traverseNonSpaceNodes(groups, function (node, prev) {
          var prevType = prev.classes[0];
          var type = node.classes[0];

          if (prevType === "mbin" && utils.contains(binRightCanceller, type)) {
            prev.classes[0] = "mord";
          } else if (type === "mbin" && utils.contains(binLeftCanceller, prevType)) {
            node.classes[0] = "mord";
          }
        }, {
          node: dummyPrev
        }, dummyNext);
        traverseNonSpaceNodes(groups, function (node, prev) {
          var prevType = getTypeOfDomTree(prev);
          var type = getTypeOfDomTree(node); // 'mtight' indicates that the node is script or scriptscript style.

          var space = prevType && type ? node.hasClass("mtight") ? tightSpacings[prevType][type] : spacings[prevType][type] : null;

          if (space) {
            // Insert glue (spacing) after the `prev`.
            return buildCommon.makeGlue(space, glueOptions);
          }
        }, {
          node: dummyPrev
        }, dummyNext);
        return groups;
      }; // Depth-first traverse non-space `nodes`, calling `callback` with the current and
      // previous node as arguments, optionally returning a node to insert after the
      // previous node. `prev` is an object with the previous node and `insertAfter`
      // function to insert after it. `next` is a node that will be added to the right.
      // Used for bin cancellation and inserting spacings.


      var traverseNonSpaceNodes = function traverseNonSpaceNodes(nodes, callback, prev, next) {
        if (next) {
          // temporarily append the right node, if exists
          nodes.push(next);
        }

        var i = 0;

        for (; i < nodes.length; i++) {
          var node = nodes[i];
          var partialGroup = buildHTML_checkPartialGroup(node);

          if (partialGroup) {
            // Recursive DFS
            traverseNonSpaceNodes(partialGroup.children, callback, prev);
            continue;
          } // Ignore explicit spaces (e.g., \;, \,) when determining what implicit
          // spacing should go between atoms of different classes


          if (node.classes[0] === "mspace") {
            continue;
          }

          var result = callback(node, prev.node);

          if (result) {
            if (prev.insertAfter) {
              prev.insertAfter(result);
            } else {
              // insert at front
              nodes.unshift(result);
              i++;
            }
          }

          prev.node = node;

          prev.insertAfter = function (index) {
            return function (n) {
              nodes.splice(index + 1, 0, n);
              i++;
            };
          }(i);
        }

        if (next) {
          nodes.pop();
        }
      }; // Check if given node is a partial group, i.e., does not affect spacing around.


      var buildHTML_checkPartialGroup = function checkPartialGroup(node) {
        if (node instanceof tree_DocumentFragment || node instanceof domTree_Anchor) {
          return node;
        }

        return null;
      }; // Return the outermost node of a domTree.


      var getOutermostNode = function getOutermostNode(node, side) {
        var partialGroup = buildHTML_checkPartialGroup(node);

        if (partialGroup) {
          var children = partialGroup.children;

          if (children.length) {
            if (side === "right") {
              return getOutermostNode(children[children.length - 1], "right");
            } else if (side === "left") {
              return getOutermostNode(children[0], "left");
            }
          }
        }

        return node;
      }; // Return math atom class (mclass) of a domTree.
      // If `side` is given, it will get the type of the outermost node at given side.


      var getTypeOfDomTree = function getTypeOfDomTree(node, side) {
        if (!node) {
          return null;
        }

        if (side) {
          node = getOutermostNode(node, side);
        } // This makes a lot of assumptions as to where the type of atom
        // appears.  We should do a better job of enforcing this.


        return DomEnum[node.classes[0]] || null;
      };

      var makeNullDelimiter = function makeNullDelimiter(options, classes) {
        var moreClasses = ["nulldelimiter"].concat(options.baseSizingClasses());
        return buildHTML_makeSpan(classes.concat(moreClasses));
      };
      /**
       * buildGroup is the function that takes a group and calls the correct groupType
       * function for it. It also handles the interaction of size and style changes
       * between parents and children.
       */


      var buildHTML_buildGroup = function buildGroup(group, options, baseOptions) {
        if (!group) {
          return buildHTML_makeSpan();
        }

        if (_htmlGroupBuilders[group.type]) {
          // Call the groupBuilders function
          var groupNode = _htmlGroupBuilders[group.type](group, options); // If the size changed between the parent and the current group, account
          // for that size difference.


          if (baseOptions && options.size !== baseOptions.size) {
            groupNode = buildHTML_makeSpan(options.sizingClasses(baseOptions), [groupNode], options);
            var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier;
            groupNode.height *= multiplier;
            groupNode.depth *= multiplier;
          }

          return groupNode;
        } else {
          throw new src_ParseError("Got group of unknown type: '" + group.type + "'");
        }
      };
      /**
       * Combine an array of HTML DOM nodes (e.g., the output of `buildExpression`)
       * into an unbreakable HTML node of class .base, with proper struts to
       * guarantee correct vertical extent.  `buildHTML` calls this repeatedly to
       * make up the entire expression as a sequence of unbreakable units.
       */


      function buildHTMLUnbreakable(children, options) {
        // Compute height and depth of this chunk.
        var body = buildHTML_makeSpan(["base"], children, options); // Add strut, which ensures that the top of the HTML element falls at
        // the height of the expression, and the bottom of the HTML element
        // falls at the depth of the expression.
        // We used to have separate top and bottom struts, where the bottom strut
        // would like to use `vertical-align: top`, but in IE 9 this lowers the
        // baseline of the box to the bottom of this strut (instead of staying in
        // the normal place) so we use an absolute value for vertical-align instead.

        var strut = buildHTML_makeSpan(["strut"]);
        strut.style.height = body.height + body.depth + "em";
        strut.style.verticalAlign = -body.depth + "em";
        body.children.unshift(strut);
        return body;
      }
      /**
       * Take an entire parse tree, and build it into an appropriate set of HTML
       * nodes.
       */


      function buildHTML(tree, options) {
        // Strip off outer tag wrapper for processing below.
        var tag = null;

        if (tree.length === 1 && tree[0].type === "tag") {
          tag = tree[0].tag;
          tree = tree[0].body;
        } // Build the expression contained in the tree


        var expression = buildHTML_buildExpression(tree, options, true);
        var children = []; // Create one base node for each chunk between potential line breaks.
        // The TeXBook [p.173] says "A formula will be broken only after a
        // relation symbol like $=$ or $<$ or $\rightarrow$, or after a binary
        // operation symbol like $+$ or $-$ or $\times$, where the relation or
        // binary operation is on the ``outer level'' of the formula (i.e., not
        // enclosed in {...} and not part of an \over construction)."

        var parts = [];

        for (var i = 0; i < expression.length; i++) {
          parts.push(expression[i]);

          if (expression[i].hasClass("mbin") || expression[i].hasClass("mrel") || expression[i].hasClass("allowbreak")) {
            // Put any post-operator glue on same line as operator.
            // Watch for \nobreak along the way, and stop at \newline.
            var nobreak = false;

            while (i < expression.length - 1 && expression[i + 1].hasClass("mspace") && !expression[i + 1].hasClass("newline")) {
              i++;
              parts.push(expression[i]);

              if (expression[i].hasClass("nobreak")) {
                nobreak = true;
              }
            } // Don't allow break if \nobreak among the post-operator glue.


            if (!nobreak) {
              children.push(buildHTMLUnbreakable(parts, options));
              parts = [];
            }
          } else if (expression[i].hasClass("newline")) {
            // Write the line except the newline
            parts.pop();

            if (parts.length > 0) {
              children.push(buildHTMLUnbreakable(parts, options));
              parts = [];
            } // Put the newline at the top level


            children.push(expression[i]);
          }
        }

        if (parts.length > 0) {
          children.push(buildHTMLUnbreakable(parts, options));
        } // Now, if there was a tag, build it too and append it as a final child.


        var tagChild;

        if (tag) {
          tagChild = buildHTMLUnbreakable(buildHTML_buildExpression(tag, options, true));
          tagChild.classes = ["tag"];
          children.push(tagChild);
        }

        var htmlNode = buildHTML_makeSpan(["katex-html"], children);
        htmlNode.setAttribute("aria-hidden", "true"); // Adjust the strut of the tag to be the maximum height of all children
        // (the height of the enclosing htmlNode) for proper vertical alignment.

        if (tagChild) {
          var strut = tagChild.children[0];
          strut.style.height = htmlNode.height + htmlNode.depth + "em";
          strut.style.verticalAlign = -htmlNode.depth + "em";
        }

        return htmlNode;
      } // CONCATENATED MODULE: ./src/mathMLTree.js

      /**
       * These objects store data about MathML nodes. This is the MathML equivalent
       * of the types in domTree.js. Since MathML handles its own rendering, and
       * since we're mainly using MathML to improve accessibility, we don't manage
       * any of the styling state that the plain DOM nodes do.
       *
       * The `toNode` and `toMarkup` functions work simlarly to how they do in
       * domTree.js, creating namespaced DOM nodes and HTML text markup respectively.
       */


      function newDocumentFragment(children) {
        return new tree_DocumentFragment(children);
      }
      /**
       * This node represents a general purpose MathML node of any type. The
       * constructor requires the type of node to create (for example, `"mo"` or
       * `"mspace"`, corresponding to `<mo>` and `<mspace>` tags).
       */


      var mathMLTree_MathNode =
      /*#__PURE__*/
      function () {
        function MathNode(type, children) {
          this.type = void 0;
          this.attributes = void 0;
          this.children = void 0;
          this.type = type;
          this.attributes = {};
          this.children = children || [];
        }
        /**
         * Sets an attribute on a MathML node. MathML depends on attributes to convey a
         * semantic content, so this is used heavily.
         */


        var _proto = MathNode.prototype;

        _proto.setAttribute = function setAttribute(name, value) {
          this.attributes[name] = value;
        }
        /**
         * Gets an attribute on a MathML node.
         */
        ;

        _proto.getAttribute = function getAttribute(name) {
          return this.attributes[name];
        }
        /**
         * Converts the math node into a MathML-namespaced DOM element.
         */
        ;

        _proto.toNode = function toNode() {
          var node = document.createElementNS("http://www.w3.org/1998/Math/MathML", this.type);

          for (var attr in this.attributes) {
            if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
              node.setAttribute(attr, this.attributes[attr]);
            }
          }

          for (var i = 0; i < this.children.length; i++) {
            node.appendChild(this.children[i].toNode());
          }

          return node;
        }
        /**
         * Converts the math node into an HTML markup string.
         */
        ;

        _proto.toMarkup = function toMarkup() {
          var markup = "<" + this.type; // Add the attributes

          for (var attr in this.attributes) {
            if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
              markup += " " + attr + "=\"";
              markup += utils.escape(this.attributes[attr]);
              markup += "\"";
            }
          }

          markup += ">";

          for (var i = 0; i < this.children.length; i++) {
            markup += this.children[i].toMarkup();
          }

          markup += "</" + this.type + ">";
          return markup;
        }
        /**
         * Converts the math node into a string, similar to innerText, but escaped.
         */
        ;

        _proto.toText = function toText() {
          return this.children.map(function (child) {
            return child.toText();
          }).join("");
        };

        return MathNode;
      }();
      /**
       * This node represents a piece of text.
       */


      var mathMLTree_TextNode =
      /*#__PURE__*/
      function () {
        function TextNode(text) {
          this.text = void 0;
          this.text = text;
        }
        /**
         * Converts the text node into a DOM text node.
         */


        var _proto2 = TextNode.prototype;

        _proto2.toNode = function toNode() {
          return document.createTextNode(this.text);
        }
        /**
         * Converts the text node into escaped HTML markup
         * (representing the text itself).
         */
        ;

        _proto2.toMarkup = function toMarkup() {
          return utils.escape(this.toText());
        }
        /**
         * Converts the text node into a string
         * (representing the text iteself).
         */
        ;

        _proto2.toText = function toText() {
          return this.text;
        };

        return TextNode;
      }();
      /**
       * This node represents a space, but may render as <mspace.../> or as text,
       * depending on the width.
       */


      var SpaceNode =
      /*#__PURE__*/
      function () {
        /**
         * Create a Space node with width given in CSS ems.
         */
        function SpaceNode(width) {
          this.width = void 0;
          this.character = void 0;
          this.width = width; // See https://www.w3.org/TR/2000/WD-MathML2-20000328/chapter6.html
          // for a table of space-like characters.  We use Unicode
          // representations instead of &LongNames; as it's not clear how to
          // make the latter via document.createTextNode.

          if (width >= 0.05555 && width <= 0.05556) {
            this.character = "\u200A"; // &VeryThinSpace;
          } else if (width >= 0.1666 && width <= 0.1667) {
            this.character = "\u2009"; // &ThinSpace;
          } else if (width >= 0.2222 && width <= 0.2223) {
            this.character = "\u2005"; // &MediumSpace;
          } else if (width >= 0.2777 && width <= 0.2778) {
            this.character = "\u2005\u200A"; // &ThickSpace;
          } else if (width >= -0.05556 && width <= -0.05555) {
            this.character = "\u200A\u2063"; // &NegativeVeryThinSpace;
          } else if (width >= -0.1667 && width <= -0.1666) {
            this.character = "\u2009\u2063"; // &NegativeThinSpace;
          } else if (width >= -0.2223 && width <= -0.2222) {
            this.character = "\u205F\u2063"; // &NegativeMediumSpace;
          } else if (width >= -0.2778 && width <= -0.2777) {
            this.character = "\u2005\u2063"; // &NegativeThickSpace;
          } else {
            this.character = null;
          }
        }
        /**
         * Converts the math node into a MathML-namespaced DOM element.
         */


        var _proto3 = SpaceNode.prototype;

        _proto3.toNode = function toNode() {
          if (this.character) {
            return document.createTextNode(this.character);
          } else {
            var node = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mspace");
            node.setAttribute("width", this.width + "em");
            return node;
          }
        }
        /**
         * Converts the math node into an HTML markup string.
         */
        ;

        _proto3.toMarkup = function toMarkup() {
          if (this.character) {
            return "<mtext>" + this.character + "</mtext>";
          } else {
            return "<mspace width=\"" + this.width + "em\"/>";
          }
        }
        /**
         * Converts the math node into a string, similar to innerText.
         */
        ;

        _proto3.toText = function toText() {
          if (this.character) {
            return this.character;
          } else {
            return " ";
          }
        };

        return SpaceNode;
      }();
      /* harmony default export */


      var mathMLTree = {
        MathNode: mathMLTree_MathNode,
        TextNode: mathMLTree_TextNode,
        SpaceNode: SpaceNode,
        newDocumentFragment: newDocumentFragment
      }; // CONCATENATED MODULE: ./src/buildMathML.js

      /**
       * This file converts a parse tree into a cooresponding MathML tree. The main
       * entry point is the `buildMathML` function, which takes a parse tree from the
       * parser.
       */

      /**
       * Takes a symbol and converts it into a MathML text node after performing
       * optional replacement from symbols.js.
       */

      var buildMathML_makeText = function makeText(text, mode, options) {
        if (src_symbols[mode][text] && src_symbols[mode][text].replace && text.charCodeAt(0) !== 0xD835 && !(ligatures.hasOwnProperty(text) && options && (options.fontFamily && options.fontFamily.substr(4, 2) === "tt" || options.font && options.font.substr(4, 2) === "tt"))) {
          text = src_symbols[mode][text].replace;
        }

        return new mathMLTree.TextNode(text);
      };
      /**
       * Wrap the given array of nodes in an <mrow> node if needed, i.e.,
       * unless the array has length 1.  Always returns a single node.
       */


      var buildMathML_makeRow = function makeRow(body) {
        if (body.length === 1) {
          return body[0];
        } else {
          return new mathMLTree.MathNode("mrow", body);
        }
      };
      /**
       * Returns the math variant as a string or null if none is required.
       */


      var buildMathML_getVariant = function getVariant(group, options) {
        // Handle \text... font specifiers as best we can.
        // MathML has a limited list of allowable mathvariant specifiers; see
        // https://www.w3.org/TR/MathML3/chapter3.html#presm.commatt
        if (options.fontFamily === "texttt") {
          return "monospace";
        } else if (options.fontFamily === "textsf") {
          if (options.fontShape === "textit" && options.fontWeight === "textbf") {
            return "sans-serif-bold-italic";
          } else if (options.fontShape === "textit") {
            return "sans-serif-italic";
          } else if (options.fontWeight === "textbf") {
            return "bold-sans-serif";
          } else {
            return "sans-serif";
          }
        } else if (options.fontShape === "textit" && options.fontWeight === "textbf") {
          return "bold-italic";
        } else if (options.fontShape === "textit") {
          return "italic";
        } else if (options.fontWeight === "textbf") {
          return "bold";
        }

        var font = options.font;

        if (!font || font === "mathnormal") {
          return null;
        }

        var mode = group.mode;

        if (font === "mathit") {
          return "italic";
        } else if (font === "boldsymbol") {
          return "bold-italic";
        }

        var text = group.text;

        if (utils.contains(["\\imath", "\\jmath"], text)) {
          return null;
        }

        if (src_symbols[mode][text] && src_symbols[mode][text].replace) {
          text = src_symbols[mode][text].replace;
        }

        var fontName = buildCommon.fontMap[font].fontName;

        if (getCharacterMetrics(text, fontName, mode)) {
          return buildCommon.fontMap[font].variant;
        }

        return null;
      };
      /**
       * Takes a list of nodes, builds them, and returns a list of the generated
       * MathML nodes.  Also combine consecutive <mtext> outputs into a single
       * <mtext> tag.
       */


      var buildMathML_buildExpression = function buildExpression(expression, options) {
        var groups = [];
        var lastGroup;

        for (var i = 0; i < expression.length; i++) {
          var group = buildMathML_buildGroup(expression[i], options);

          if (group instanceof mathMLTree_MathNode && lastGroup instanceof mathMLTree_MathNode) {
            // Concatenate adjacent <mtext>s
            if (group.type === 'mtext' && lastGroup.type === 'mtext' && group.getAttribute('mathvariant') === lastGroup.getAttribute('mathvariant')) {
              var _lastGroup$children;

              (_lastGroup$children = lastGroup.children).push.apply(_lastGroup$children, group.children);

              continue; // Concatenate adjacent <mn>s
            } else if (group.type === 'mn' && lastGroup.type === 'mn') {
              var _lastGroup$children2;

              (_lastGroup$children2 = lastGroup.children).push.apply(_lastGroup$children2, group.children);

              continue; // Concatenate <mn>...</mn> followed by <mi>.</mi>
            } else if (group.type === 'mi' && group.children.length === 1 && lastGroup.type === 'mn') {
              var child = group.children[0];

              if (child instanceof mathMLTree_TextNode && child.text === '.') {
                var _lastGroup$children3;

                (_lastGroup$children3 = lastGroup.children).push.apply(_lastGroup$children3, group.children);

                continue;
              }
            } else if (lastGroup.type === 'mi' && lastGroup.children.length === 1) {
              var lastChild = lastGroup.children[0];

              if (lastChild instanceof mathMLTree_TextNode && lastChild.text === "\u0338" && (group.type === 'mo' || group.type === 'mi' || group.type === 'mn')) {
                var _child = group.children[0];

                if (_child instanceof mathMLTree_TextNode && _child.text.length > 0) {
                  // Overlay with combining character long solidus
                  _child.text = _child.text.slice(0, 1) + "\u0338" + _child.text.slice(1);
                  groups.pop();
                }
              }
            }
          }

          groups.push(group);
          lastGroup = group;
        }

        return groups;
      };
      /**
       * Equivalent to buildExpression, but wraps the elements in an <mrow>
       * if there's more than one.  Returns a single node instead of an array.
       */


      var buildExpressionRow = function buildExpressionRow(expression, options) {
        return buildMathML_makeRow(buildMathML_buildExpression(expression, options));
      };
      /**
       * Takes a group from the parser and calls the appropriate groupBuilders function
       * on it to produce a MathML node.
       */


      var buildMathML_buildGroup = function buildGroup(group, options) {
        if (!group) {
          return new mathMLTree.MathNode("mrow");
        }

        if (_mathmlGroupBuilders[group.type]) {
          // Call the groupBuilders function
          var result = _mathmlGroupBuilders[group.type](group, options);

          return result;
        } else {
          throw new src_ParseError("Got group of unknown type: '" + group.type + "'");
        }
      };
      /**
       * Takes a full parse tree and settings and builds a MathML representation of
       * it. In particular, we put the elements from building the parse tree into a
       * <semantics> tag so we can also include that TeX source as an annotation.
       *
       * Note that we actually return a domTree element with a `<math>` inside it so
       * we can do appropriate styling.
       */


      function buildMathML(tree, texExpression, options) {
        var expression = buildMathML_buildExpression(tree, options); // Wrap up the expression in an mrow so it is presented in the semantics
        // tag correctly, unless it's a single <mrow> or <mtable>.

        var wrapper;

        if (expression.length === 1 && expression[0] instanceof mathMLTree_MathNode && utils.contains(["mrow", "mtable"], expression[0].type)) {
          wrapper = expression[0];
        } else {
          wrapper = new mathMLTree.MathNode("mrow", expression);
        } // Build a TeX annotation of the source


        var annotation = new mathMLTree.MathNode("annotation", [new mathMLTree.TextNode(texExpression)]);
        annotation.setAttribute("encoding", "application/x-tex");
        var semantics = new mathMLTree.MathNode("semantics", [wrapper, annotation]);
        var math = new mathMLTree.MathNode("math", [semantics]); // You can't style <math> nodes, so we wrap the node in a span.
        // NOTE: The span class is not typed to have <math> nodes as children, and
        // we don't want to make the children type more generic since the children
        // of span are expected to have more fields in `buildHtml` contexts.
        // $FlowFixMe

        return buildCommon.makeSpan(["katex-mathml"], [math]);
      } // CONCATENATED MODULE: ./src/buildTree.js


      var buildTree_optionsFromSettings = function optionsFromSettings(settings) {
        return new src_Options({
          style: settings.displayMode ? src_Style.DISPLAY : src_Style.TEXT,
          maxSize: settings.maxSize
        });
      };

      var buildTree_displayWrap = function displayWrap(node, settings) {
        if (settings.displayMode) {
          var classes = ["katex-display"];

          if (settings.leqno) {
            classes.push("leqno");
          }

          if (settings.fleqn) {
            classes.push("fleqn");
          }

          node = buildCommon.makeSpan(classes, [node]);
        }

        return node;
      };

      var buildTree_buildTree = function buildTree(tree, expression, settings) {
        var options = buildTree_optionsFromSettings(settings);
        var mathMLNode = buildMathML(tree, expression, options);
        var htmlNode = buildHTML(tree, options);
        var katexNode = buildCommon.makeSpan(["katex"], [mathMLNode, htmlNode]);
        return buildTree_displayWrap(katexNode, settings);
      };

      var buildTree_buildHTMLTree = function buildHTMLTree(tree, expression, settings) {
        var options = buildTree_optionsFromSettings(settings);
        var htmlNode = buildHTML(tree, options);
        var katexNode = buildCommon.makeSpan(["katex"], [htmlNode]);
        return buildTree_displayWrap(katexNode, settings);
      };
      /* harmony default export */


      var src_buildTree = buildTree_buildTree; // CONCATENATED MODULE: ./src/stretchy.js

      /**
       * This file provides support to buildMathML.js and buildHTML.js
       * for stretchy wide elements rendered from SVG files
       * and other CSS trickery.
       */

      var stretchyCodePoint = {
        widehat: "^",
        widecheck: "ˇ",
        widetilde: "~",
        utilde: "~",
        overleftarrow: "\u2190",
        underleftarrow: "\u2190",
        xleftarrow: "\u2190",
        overrightarrow: "\u2192",
        underrightarrow: "\u2192",
        xrightarrow: "\u2192",
        underbrace: "\u23DF",
        overbrace: "\u23DE",
        overgroup: "\u23E0",
        undergroup: "\u23E1",
        overleftrightarrow: "\u2194",
        underleftrightarrow: "\u2194",
        xleftrightarrow: "\u2194",
        Overrightarrow: "\u21D2",
        xRightarrow: "\u21D2",
        overleftharpoon: "\u21BC",
        xleftharpoonup: "\u21BC",
        overrightharpoon: "\u21C0",
        xrightharpoonup: "\u21C0",
        xLeftarrow: "\u21D0",
        xLeftrightarrow: "\u21D4",
        xhookleftarrow: "\u21A9",
        xhookrightarrow: "\u21AA",
        xmapsto: "\u21A6",
        xrightharpoondown: "\u21C1",
        xleftharpoondown: "\u21BD",
        xrightleftharpoons: "\u21CC",
        xleftrightharpoons: "\u21CB",
        xtwoheadleftarrow: "\u219E",
        xtwoheadrightarrow: "\u21A0",
        xlongequal: "=",
        xtofrom: "\u21C4",
        xrightleftarrows: "\u21C4",
        xrightequilibrium: "\u21CC",
        // Not a perfect match.
        xleftequilibrium: "\u21CB" // None better available.

      };

      var stretchy_mathMLnode = function mathMLnode(label) {
        var node = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(stretchyCodePoint[label.substr(1)])]);
        node.setAttribute("stretchy", "true");
        return node;
      }; // Many of the KaTeX SVG images have been adapted from glyphs in KaTeX fonts.
      // Copyright (c) 2009-2010, Design Science, Inc. (<www.mathjax.org>)
      // Copyright (c) 2014-2017 Khan Academy (<www.khanacademy.org>)
      // Licensed under the SIL Open Font License, Version 1.1.
      // See \nhttp://scripts.sil.org/OFL
      // Very Long SVGs
      //    Many of the KaTeX stretchy wide elements use a long SVG image and an
      //    overflow: hidden tactic to achieve a stretchy image while avoiding
      //    distortion of arrowheads or brace corners.
      //    The SVG typically contains a very long (400 em) arrow.
      //    The SVG is in a container span that has overflow: hidden, so the span
      //    acts like a window that exposes only part of the  SVG.
      //    The SVG always has a longer, thinner aspect ratio than the container span.
      //    After the SVG fills 100% of the height of the container span,
      //    there is a long arrow shaft left over. That left-over shaft is not shown.
      //    Instead, it is sliced off because the span's CSS has overflow: hidden.
      //    Thus, the reader sees an arrow that matches the subject matter width
      //    without distortion.
      //    Some functions, such as \cancel, need to vary their aspect ratio. These
      //    functions do not get the overflow SVG treatment.
      // Second Brush Stroke
      //    Low resolution monitors struggle to display images in fine detail.
      //    So browsers apply anti-aliasing. A long straight arrow shaft therefore
      //    will sometimes appear as if it has a blurred edge.
      //    To mitigate this, these SVG files contain a second "brush-stroke" on the
      //    arrow shafts. That is, a second long thin rectangular SVG path has been
      //    written directly on top of each arrow shaft. This reinforcement causes
      //    some of the screen pixels to display as black instead of the anti-aliased
      //    gray pixel that a  single path would generate. So we get arrow shafts
      //    whose edges appear to be sharper.
      // In the katexImagesData object just below, the dimensions all
      // correspond to path geometry inside the relevant SVG.
      // For example, \overrightarrow uses the same arrowhead as glyph U+2192
      // from the KaTeX Main font. The scaling factor is 1000.
      // That is, inside the font, that arrowhead is 522 units tall, which
      // corresponds to 0.522 em inside the document.


      var katexImagesData = {
        //   path(s), minWidth, height, align
        overrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
        overleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
        underrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
        underleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
        xrightarrow: [["rightarrow"], 1.469, 522, "xMaxYMin"],
        xleftarrow: [["leftarrow"], 1.469, 522, "xMinYMin"],
        Overrightarrow: [["doublerightarrow"], 0.888, 560, "xMaxYMin"],
        xRightarrow: [["doublerightarrow"], 1.526, 560, "xMaxYMin"],
        xLeftarrow: [["doubleleftarrow"], 1.526, 560, "xMinYMin"],
        overleftharpoon: [["leftharpoon"], 0.888, 522, "xMinYMin"],
        xleftharpoonup: [["leftharpoon"], 0.888, 522, "xMinYMin"],
        xleftharpoondown: [["leftharpoondown"], 0.888, 522, "xMinYMin"],
        overrightharpoon: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
        xrightharpoonup: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
        xrightharpoondown: [["rightharpoondown"], 0.888, 522, "xMaxYMin"],
        xlongequal: [["longequal"], 0.888, 334, "xMinYMin"],
        xtwoheadleftarrow: [["twoheadleftarrow"], 0.888, 334, "xMinYMin"],
        xtwoheadrightarrow: [["twoheadrightarrow"], 0.888, 334, "xMaxYMin"],
        overleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
        overbrace: [["leftbrace", "midbrace", "rightbrace"], 1.6, 548],
        underbrace: [["leftbraceunder", "midbraceunder", "rightbraceunder"], 1.6, 548],
        underleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
        xleftrightarrow: [["leftarrow", "rightarrow"], 1.75, 522],
        xLeftrightarrow: [["doubleleftarrow", "doublerightarrow"], 1.75, 560],
        xrightleftharpoons: [["leftharpoondownplus", "rightharpoonplus"], 1.75, 716],
        xleftrightharpoons: [["leftharpoonplus", "rightharpoondownplus"], 1.75, 716],
        xhookleftarrow: [["leftarrow", "righthook"], 1.08, 522],
        xhookrightarrow: [["lefthook", "rightarrow"], 1.08, 522],
        overlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
        underlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
        overgroup: [["leftgroup", "rightgroup"], 0.888, 342],
        undergroup: [["leftgroupunder", "rightgroupunder"], 0.888, 342],
        xmapsto: [["leftmapsto", "rightarrow"], 1.5, 522],
        xtofrom: [["leftToFrom", "rightToFrom"], 1.75, 528],
        // The next three arrows are from the mhchem package.
        // In mhchem.sty, min-length is 2.0em. But these arrows might appear in the
        // document as \xrightarrow or \xrightleftharpoons. Those have
        // min-length = 1.75em, so we set min-length on these next three to match.
        xrightleftarrows: [["baraboveleftarrow", "rightarrowabovebar"], 1.75, 901],
        xrightequilibrium: [["baraboveshortleftharpoon", "rightharpoonaboveshortbar"], 1.75, 716],
        xleftequilibrium: [["shortbaraboveleftharpoon", "shortrightharpoonabovebar"], 1.75, 716]
      };

      var groupLength = function groupLength(arg) {
        if (arg.type === "ordgroup") {
          return arg.body.length;
        } else {
          return 1;
        }
      };

      var stretchy_svgSpan = function svgSpan(group, options) {
        // Create a span with inline SVG for the element.
        function buildSvgSpan_() {
          var viewBoxWidth = 400000; // default

          var label = group.label.substr(1);

          if (utils.contains(["widehat", "widecheck", "widetilde", "utilde"], label)) {
            // Each type in the `if` statement corresponds to one of the ParseNode
            // types below. This narrowing is required to access `grp.base`.
            var grp = group; // There are four SVG images available for each function.
            // Choose a taller image when there are more characters.

            var numChars = groupLength(grp.base);
            var viewBoxHeight;
            var pathName;

            var _height;

            if (numChars > 5) {
              if (label === "widehat" || label === "widecheck") {
                viewBoxHeight = 420;
                viewBoxWidth = 2364;
                _height = 0.42;
                pathName = label + "4";
              } else {
                viewBoxHeight = 312;
                viewBoxWidth = 2340;
                _height = 0.34;
                pathName = "tilde4";
              }
            } else {
              var imgIndex = [1, 1, 2, 2, 3, 3][numChars];

              if (label === "widehat" || label === "widecheck") {
                viewBoxWidth = [0, 1062, 2364, 2364, 2364][imgIndex];
                viewBoxHeight = [0, 239, 300, 360, 420][imgIndex];
                _height = [0, 0.24, 0.3, 0.3, 0.36, 0.42][imgIndex];
                pathName = label + imgIndex;
              } else {
                viewBoxWidth = [0, 600, 1033, 2339, 2340][imgIndex];
                viewBoxHeight = [0, 260, 286, 306, 312][imgIndex];
                _height = [0, 0.26, 0.286, 0.3, 0.306, 0.34][imgIndex];
                pathName = "tilde" + imgIndex;
              }
            }

            var path = new domTree_PathNode(pathName);
            var svgNode = new SvgNode([path], {
              "width": "100%",
              "height": _height + "em",
              "viewBox": "0 0 " + viewBoxWidth + " " + viewBoxHeight,
              "preserveAspectRatio": "none"
            });
            return {
              span: buildCommon.makeSvgSpan([], [svgNode], options),
              minWidth: 0,
              height: _height
            };
          } else {
            var spans = [];
            var data = katexImagesData[label];
            var paths = data[0],
                _minWidth = data[1],
                _viewBoxHeight = data[2];

            var _height2 = _viewBoxHeight / 1000;

            var numSvgChildren = paths.length;
            var widthClasses;
            var aligns;

            if (numSvgChildren === 1) {
              // $FlowFixMe: All these cases must be of the 4-tuple type.
              var align1 = data[3];
              widthClasses = ["hide-tail"];
              aligns = [align1];
            } else if (numSvgChildren === 2) {
              widthClasses = ["halfarrow-left", "halfarrow-right"];
              aligns = ["xMinYMin", "xMaxYMin"];
            } else if (numSvgChildren === 3) {
              widthClasses = ["brace-left", "brace-center", "brace-right"];
              aligns = ["xMinYMin", "xMidYMin", "xMaxYMin"];
            } else {
              throw new Error("Correct katexImagesData or update code here to support\n                    " + numSvgChildren + " children.");
            }

            for (var i = 0; i < numSvgChildren; i++) {
              var _path = new domTree_PathNode(paths[i]);

              var _svgNode = new SvgNode([_path], {
                "width": "400em",
                "height": _height2 + "em",
                "viewBox": "0 0 " + viewBoxWidth + " " + _viewBoxHeight,
                "preserveAspectRatio": aligns[i] + " slice"
              });

              var _span = buildCommon.makeSvgSpan([widthClasses[i]], [_svgNode], options);

              if (numSvgChildren === 1) {
                return {
                  span: _span,
                  minWidth: _minWidth,
                  height: _height2
                };
              } else {
                _span.style.height = _height2 + "em";
                spans.push(_span);
              }
            }

            return {
              span: buildCommon.makeSpan(["stretchy"], spans, options),
              minWidth: _minWidth,
              height: _height2
            };
          }
        } // buildSvgSpan_()


        var _buildSvgSpan_ = buildSvgSpan_(),
            span = _buildSvgSpan_.span,
            minWidth = _buildSvgSpan_.minWidth,
            height = _buildSvgSpan_.height; // Note that we are returning span.depth = 0.
        // Any adjustments relative to the baseline must be done in buildHTML.


        span.height = height;
        span.style.height = height + "em";

        if (minWidth > 0) {
          span.style.minWidth = minWidth + "em";
        }

        return span;
      };

      var stretchy_encloseSpan = function encloseSpan(inner, label, pad, options) {
        // Return an image span for \cancel, \bcancel, \xcancel, or \fbox
        var img;
        var totalHeight = inner.height + inner.depth + 2 * pad;

        if (/fbox|color/.test(label)) {
          img = buildCommon.makeSpan(["stretchy", label], [], options);

          if (label === "fbox") {
            var color = options.color && options.getColor();

            if (color) {
              img.style.borderColor = color;
            }
          }
        } else {
          // \cancel, \bcancel, or \xcancel
          // Since \cancel's SVG is inline and it omits the viewBox attribute,
          // its stroke-width will not vary with span area.
          var lines = [];

          if (/^[bx]cancel$/.test(label)) {
            lines.push(new LineNode({
              "x1": "0",
              "y1": "0",
              "x2": "100%",
              "y2": "100%",
              "stroke-width": "0.046em"
            }));
          }

          if (/^x?cancel$/.test(label)) {
            lines.push(new LineNode({
              "x1": "0",
              "y1": "100%",
              "x2": "100%",
              "y2": "0",
              "stroke-width": "0.046em"
            }));
          }

          var svgNode = new SvgNode(lines, {
            "width": "100%",
            "height": totalHeight + "em"
          });
          img = buildCommon.makeSvgSpan([], [svgNode], options);
        }

        img.height = totalHeight;
        img.style.height = totalHeight + "em";
        return img;
      };
      /* harmony default export */


      var stretchy = {
        encloseSpan: stretchy_encloseSpan,
        mathMLnode: stretchy_mathMLnode,
        svgSpan: stretchy_svgSpan
      }; // CONCATENATED MODULE: ./src/functions/accent.js
      // NOTE: Unlike most `htmlBuilder`s, this one handles not only "accent", but

      var accent_htmlBuilder = function htmlBuilder(grp, options) {
        // Accents are handled in the TeXbook pg. 443, rule 12.
        var base;
        var group;
        var supSub = checkNodeType(grp, "supsub");
        var supSubGroup;

        if (supSub) {
          // If our base is a character box, and we have superscripts and
          // subscripts, the supsub will defer to us. In particular, we want
          // to attach the superscripts and subscripts to the inner body (so
          // that the position of the superscripts and subscripts won't be
          // affected by the height of the accent). We accomplish this by
          // sticking the base of the accent into the base of the supsub, and
          // rendering that, while keeping track of where the accent is.
          // The real accent group is the base of the supsub group
          group = assertNodeType(supSub.base, "accent"); // The character box is the base of the accent group

          base = group.base; // Stick the character box into the base of the supsub group

          supSub.base = base; // Rerender the supsub group with its new base, and store that
          // result.

          supSubGroup = assertSpan(buildHTML_buildGroup(supSub, options)); // reset original base

          supSub.base = group;
        } else {
          group = assertNodeType(grp, "accent");
          base = group.base;
        } // Build the base group


        var body = buildHTML_buildGroup(base, options.havingCrampedStyle()); // Does the accent need to shift for the skew of a character?

        var mustShift = group.isShifty && utils.isCharacterBox(base); // Calculate the skew of the accent. This is based on the line "If the
        // nucleus is not a single character, let s = 0; otherwise set s to the
        // kern amount for the nucleus followed by the \skewchar of its font."
        // Note that our skew metrics are just the kern between each character
        // and the skewchar.

        var skew = 0;

        if (mustShift) {
          // If the base is a character box, then we want the skew of the
          // innermost character. To do that, we find the innermost character:
          var baseChar = utils.getBaseElem(base); // Then, we render its group to get the symbol inside it

          var baseGroup = buildHTML_buildGroup(baseChar, options.havingCrampedStyle()); // Finally, we pull the skew off of the symbol.

          skew = assertSymbolDomNode(baseGroup).skew; // Note that we now throw away baseGroup, because the layers we
          // removed with getBaseElem might contain things like \color which
          // we can't get rid of.
          // TODO(emily): Find a better way to get the skew
        } // calculate the amount of space between the body and the accent


        var clearance = Math.min(body.height, options.fontMetrics().xHeight); // Build the accent

        var accentBody;

        if (!group.isStretchy) {
          var accent;
          var width;

          if (group.label === "\\vec") {
            // Before version 0.9, \vec used the combining font glyph U+20D7.
            // But browsers, especially Safari, are not consistent in how they
            // render combining characters when not preceded by a character.
            // So now we use an SVG.
            // If Safari reforms, we should consider reverting to the glyph.
            accent = buildCommon.staticSvg("vec", options);
            width = buildCommon.svgData.vec[1];
          } else {
            accent = buildCommon.makeSymbol(group.label, "Main-Regular", group.mode, options); // Remove the italic correction of the accent, because it only serves to
            // shift the accent over to a place we don't want.

            accent.italic = 0;
            width = accent.width;
          }

          accentBody = buildCommon.makeSpan(["accent-body"], [accent]); // "Full" accents expand the width of the resulting symbol to be
          // at least the width of the accent, and overlap directly onto the
          // character without any vertical offset.

          var accentFull = group.label === "\\textcircled";

          if (accentFull) {
            accentBody.classes.push('accent-full');
            clearance = body.height;
          } // Shift the accent over by the skew.


          var left = skew; // CSS defines `.katex .accent .accent-body:not(.accent-full) { width: 0 }`
          // so that the accent doesn't contribute to the bounding box.
          // We need to shift the character by its width (effectively half
          // its width) to compensate.

          if (!accentFull) {
            left -= width / 2;
          }

          accentBody.style.left = left + "em"; // \textcircled uses the \bigcirc glyph, so it needs some
          // vertical adjustment to match LaTeX.

          if (group.label === "\\textcircled") {
            accentBody.style.top = ".2em";
          }

          accentBody = buildCommon.makeVList({
            positionType: "firstBaseline",
            children: [{
              type: "elem",
              elem: body
            }, {
              type: "kern",
              size: -clearance
            }, {
              type: "elem",
              elem: accentBody
            }]
          }, options);
        } else {
          accentBody = stretchy.svgSpan(group, options);
          accentBody = buildCommon.makeVList({
            positionType: "firstBaseline",
            children: [{
              type: "elem",
              elem: body
            }, {
              type: "elem",
              elem: accentBody,
              wrapperClasses: ["svg-align"],
              wrapperStyle: skew > 0 ? {
                width: "calc(100% - " + 2 * skew + "em)",
                marginLeft: 2 * skew + "em"
              } : undefined
            }]
          }, options);
        }

        var accentWrap = buildCommon.makeSpan(["mord", "accent"], [accentBody], options);

        if (supSubGroup) {
          // Here, we replace the "base" child of the supsub with our newly
          // generated accent.
          supSubGroup.children[0] = accentWrap; // Since we don't rerun the height calculation after replacing the
          // accent, we manually recalculate height.

          supSubGroup.height = Math.max(accentWrap.height, supSubGroup.height); // Accents should always be ords, even when their innards are not.

          supSubGroup.classes[0] = "mord";
          return supSubGroup;
        } else {
          return accentWrap;
        }
      };

      var accent_mathmlBuilder = function mathmlBuilder(group, options) {
        var accentNode = group.isStretchy ? stretchy.mathMLnode(group.label) : new mathMLTree.MathNode("mo", [buildMathML_makeText(group.label, group.mode)]);
        var node = new mathMLTree.MathNode("mover", [buildMathML_buildGroup(group.base, options), accentNode]);
        node.setAttribute("accent", "true");
        return node;
      };

      var NON_STRETCHY_ACCENT_REGEX = new RegExp(["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring"].map(function (accent) {
        return "\\" + accent;
      }).join("|")); // Accents

      defineFunction({
        type: "accent",
        names: ["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring", "\\widecheck", "\\widehat", "\\widetilde", "\\overrightarrow", "\\overleftarrow", "\\Overrightarrow", "\\overleftrightarrow", "\\overgroup", "\\overlinesegment", "\\overleftharpoon", "\\overrightharpoon"],
        props: {
          numArgs: 1
        },
        handler: function handler(context, args) {
          var base = args[0];
          var isStretchy = !NON_STRETCHY_ACCENT_REGEX.test(context.funcName);
          var isShifty = !isStretchy || context.funcName === "\\widehat" || context.funcName === "\\widetilde" || context.funcName === "\\widecheck";
          return {
            type: "accent",
            mode: context.parser.mode,
            label: context.funcName,
            isStretchy: isStretchy,
            isShifty: isShifty,
            base: base
          };
        },
        htmlBuilder: accent_htmlBuilder,
        mathmlBuilder: accent_mathmlBuilder
      }); // Text-mode accents

      defineFunction({
        type: "accent",
        names: ["\\'", "\\`", "\\^", "\\~", "\\=", "\\u", "\\.", '\\"', "\\r", "\\H", "\\v", "\\textcircled"],
        props: {
          numArgs: 1,
          allowedInText: true,
          allowedInMath: false
        },
        handler: function handler(context, args) {
          var base = args[0];
          return {
            type: "accent",
            mode: context.parser.mode,
            label: context.funcName,
            isStretchy: false,
            isShifty: true,
            base: base
          };
        },
        htmlBuilder: accent_htmlBuilder,
        mathmlBuilder: accent_mathmlBuilder
      }); // CONCATENATED MODULE: ./src/functions/accentunder.js
      // Horizontal overlap functions

      defineFunction({
        type: "accentUnder",
        names: ["\\underleftarrow", "\\underrightarrow", "\\underleftrightarrow", "\\undergroup", "\\underlinesegment", "\\utilde"],
        props: {
          numArgs: 1
        },
        handler: function handler(_ref, args) {
          var parser = _ref.parser,
              funcName = _ref.funcName;
          var base = args[0];
          return {
            type: "accentUnder",
            mode: parser.mode,
            label: funcName,
            base: base
          };
        },
        htmlBuilder: function htmlBuilder(group, options) {
          // Treat under accents much like underlines.
          var innerGroup = buildHTML_buildGroup(group.base, options);
          var accentBody = stretchy.svgSpan(group, options);
          var kern = group.label === "\\utilde" ? 0.12 : 0; // Generate the vlist, with the appropriate kerns

          var vlist = buildCommon.makeVList({
            positionType: "bottom",
            positionData: accentBody.height + kern,
            children: [{
              type: "elem",
              elem: accentBody,
              wrapperClasses: ["svg-align"]
            }, {
              type: "kern",
              size: kern
            }, {
              type: "elem",
              elem: innerGroup
            }]
          }, options);
          return buildCommon.makeSpan(["mord", "accentunder"], [vlist], options);
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          var accentNode = stretchy.mathMLnode(group.label);
          var node = new mathMLTree.MathNode("munder", [buildMathML_buildGroup(group.base, options), accentNode]);
          node.setAttribute("accentunder", "true");
          return node;
        }
      }); // CONCATENATED MODULE: ./src/functions/arrow.js
      // Helper function

      var arrow_paddedNode = function paddedNode(group) {
        var node = new mathMLTree.MathNode("mpadded", group ? [group] : []);
        node.setAttribute("width", "+0.6em");
        node.setAttribute("lspace", "0.3em");
        return node;
      }; // Stretchy arrows with an optional argument


      defineFunction({
        type: "xArrow",
        names: ["\\xleftarrow", "\\xrightarrow", "\\xLeftarrow", "\\xRightarrow", "\\xleftrightarrow", "\\xLeftrightarrow", "\\xhookleftarrow", "\\xhookrightarrow", "\\xmapsto", "\\xrightharpoondown", "\\xrightharpoonup", "\\xleftharpoondown", "\\xleftharpoonup", "\\xrightleftharpoons", "\\xleftrightharpoons", "\\xlongequal", "\\xtwoheadrightarrow", "\\xtwoheadleftarrow", "\\xtofrom", // The next 3 functions are here to support the mhchem extension.
        // Direct use of these functions is discouraged and may break someday.
        "\\xrightleftarrows", "\\xrightequilibrium", "\\xleftequilibrium"],
        props: {
          numArgs: 1,
          numOptionalArgs: 1
        },
        handler: function handler(_ref, args, optArgs) {
          var parser = _ref.parser,
              funcName = _ref.funcName;
          return {
            type: "xArrow",
            mode: parser.mode,
            label: funcName,
            body: args[0],
            below: optArgs[0]
          };
        },
        // Flow is unable to correctly infer the type of `group`, even though it's
        // unamibiguously determined from the passed-in `type` above.
        htmlBuilder: function htmlBuilder(group, options) {
          var style = options.style; // Build the argument groups in the appropriate style.
          // Ref: amsmath.dtx:   \hbox{$\scriptstyle\mkern#3mu{#6}\mkern#4mu$}%
          // Some groups can return document fragments.  Handle those by wrapping
          // them in a span.

          var newOptions = options.havingStyle(style.sup());
          var upperGroup = buildCommon.wrapFragment(buildHTML_buildGroup(group.body, newOptions, options), options);
          upperGroup.classes.push("x-arrow-pad");
          var lowerGroup;

          if (group.below) {
            // Build the lower group
            newOptions = options.havingStyle(style.sub());
            lowerGroup = buildCommon.wrapFragment(buildHTML_buildGroup(group.below, newOptions, options), options);
            lowerGroup.classes.push("x-arrow-pad");
          }

          var arrowBody = stretchy.svgSpan(group, options); // Re shift: Note that stretchy.svgSpan returned arrowBody.depth = 0.
          // The point we want on the math axis is at 0.5 * arrowBody.height.

          var arrowShift = -options.fontMetrics().axisHeight + 0.5 * arrowBody.height; // 2 mu kern. Ref: amsmath.dtx: #7\if0#2\else\mkern#2mu\fi

          var upperShift = -options.fontMetrics().axisHeight - 0.5 * arrowBody.height - 0.111; // 0.111 em = 2 mu

          if (upperGroup.depth > 0.25 || group.label === "\\xleftequilibrium") {
            upperShift -= upperGroup.depth; // shift up if depth encroaches
          } // Generate the vlist


          var vlist;

          if (lowerGroup) {
            var lowerShift = -options.fontMetrics().axisHeight + lowerGroup.height + 0.5 * arrowBody.height + 0.111;
            vlist = buildCommon.makeVList({
              positionType: "individualShift",
              children: [{
                type: "elem",
                elem: upperGroup,
                shift: upperShift
              }, {
                type: "elem",
                elem: arrowBody,
                shift: arrowShift
              }, {
                type: "elem",
                elem: lowerGroup,
                shift: lowerShift
              }]
            }, options);
          } else {
            vlist = buildCommon.makeVList({
              positionType: "individualShift",
              children: [{
                type: "elem",
                elem: upperGroup,
                shift: upperShift
              }, {
                type: "elem",
                elem: arrowBody,
                shift: arrowShift
              }]
            }, options);
          } // $FlowFixMe: Replace this with passing "svg-align" into makeVList.


          vlist.children[0].children[0].children[1].classes.push("svg-align");
          return buildCommon.makeSpan(["mrel", "x-arrow"], [vlist], options);
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          var arrowNode = stretchy.mathMLnode(group.label);
          var node;

          if (group.body) {
            var upperNode = arrow_paddedNode(buildMathML_buildGroup(group.body, options));

            if (group.below) {
              var lowerNode = arrow_paddedNode(buildMathML_buildGroup(group.below, options));
              node = new mathMLTree.MathNode("munderover", [arrowNode, lowerNode, upperNode]);
            } else {
              node = new mathMLTree.MathNode("mover", [arrowNode, upperNode]);
            }
          } else if (group.below) {
            var _lowerNode = arrow_paddedNode(buildMathML_buildGroup(group.below, options));

            node = new mathMLTree.MathNode("munder", [arrowNode, _lowerNode]);
          } else {
            // This should never happen.
            // Parser.js throws an error if there is no argument.
            node = arrow_paddedNode();
            node = new mathMLTree.MathNode("mover", [arrowNode, node]);
          }

          return node;
        }
      }); // CONCATENATED MODULE: ./src/functions/char.js
      // \@char is an internal function that takes a grouped decimal argument like
      // {123} and converts into symbol with code 123.  It is used by the *macro*
      // \char defined in macros.js.

      defineFunction({
        type: "textord",
        names: ["\\@char"],
        props: {
          numArgs: 1,
          allowedInText: true
        },
        handler: function handler(_ref, args) {
          var parser = _ref.parser;
          var arg = assertNodeType(args[0], "ordgroup");
          var group = arg.body;
          var number = "";

          for (var i = 0; i < group.length; i++) {
            var node = assertNodeType(group[i], "textord");
            number += node.text;
          }

          var code = parseInt(number);

          if (isNaN(code)) {
            throw new src_ParseError("\\@char has non-numeric argument " + number);
          }

          return {
            type: "textord",
            mode: parser.mode,
            text: String.fromCharCode(code)
          };
        }
      }); // CONCATENATED MODULE: ./src/functions/color.js

      var color_htmlBuilder = function htmlBuilder(group, options) {
        var elements = buildHTML_buildExpression(group.body, options.withColor(group.color), false); // \color isn't supposed to affect the type of the elements it contains.
        // To accomplish this, we wrap the results in a fragment, so the inner
        // elements will be able to directly interact with their neighbors. For
        // example, `\color{red}{2 +} 3` has the same spacing as `2 + 3`

        return buildCommon.makeFragment(elements);
      };

      var color_mathmlBuilder = function mathmlBuilder(group, options) {
        var inner = buildMathML_buildExpression(group.body, options.withColor(group.color));
        var node = new mathMLTree.MathNode("mstyle", inner);
        node.setAttribute("mathcolor", group.color);
        return node;
      };

      defineFunction({
        type: "color",
        names: ["\\textcolor"],
        props: {
          numArgs: 2,
          allowedInText: true,
          greediness: 3,
          argTypes: ["color", "original"]
        },
        handler: function handler(_ref, args) {
          var parser = _ref.parser;
          var color = assertNodeType(args[0], "color-token").color;
          var body = args[1];
          return {
            type: "color",
            mode: parser.mode,
            color: color,
            body: defineFunction_ordargument(body)
          };
        },
        htmlBuilder: color_htmlBuilder,
        mathmlBuilder: color_mathmlBuilder
      });
      defineFunction({
        type: "color",
        names: ["\\color"],
        props: {
          numArgs: 1,
          allowedInText: true,
          greediness: 3,
          argTypes: ["color"]
        },
        handler: function handler(_ref2, args) {
          var parser = _ref2.parser,
              breakOnTokenText = _ref2.breakOnTokenText;
          var color = assertNodeType(args[0], "color-token").color; // If we see a styling function, parse out the implicit body

          var body = parser.parseExpression(true, breakOnTokenText);
          return {
            type: "color",
            mode: parser.mode,
            color: color,
            body: body
          };
        },
        htmlBuilder: color_htmlBuilder,
        mathmlBuilder: color_mathmlBuilder
      }); // CONCATENATED MODULE: ./src/functions/cr.js
      // Row breaks within tabular environments, and line breaks at top level
      // \\ is a macro mapping to either \cr or \newline.  Because they have the
      // same signature, we implement them as one megafunction, with newRow
      // indicating whether we're in the \cr case, and newLine indicating whether
      // to break the line in the \newline case.

      defineFunction({
        type: "cr",
        names: ["\\cr", "\\newline"],
        props: {
          numArgs: 0,
          numOptionalArgs: 1,
          argTypes: ["size"],
          allowedInText: true
        },
        handler: function handler(_ref, args, optArgs) {
          var parser = _ref.parser,
              funcName = _ref.funcName;
          var size = optArgs[0];
          var newRow = funcName === "\\cr";
          var newLine = false;

          if (!newRow) {
            if (parser.settings.displayMode && parser.settings.useStrictBehavior("newLineInDisplayMode", "In LaTeX, \\\\ or \\newline " + "does nothing in display mode")) {
              newLine = false;
            } else {
              newLine = true;
            }
          }

          return {
            type: "cr",
            mode: parser.mode,
            newLine: newLine,
            newRow: newRow,
            size: size && assertNodeType(size, "size").value
          };
        },
        // The following builders are called only at the top level,
        // not within tabular/array environments.
        htmlBuilder: function htmlBuilder(group, options) {
          if (group.newRow) {
            throw new src_ParseError("\\cr valid only within a tabular/array environment");
          }

          var span = buildCommon.makeSpan(["mspace"], [], options);

          if (group.newLine) {
            span.classes.push("newline");

            if (group.size) {
              span.style.marginTop = units_calculateSize(group.size, options) + "em";
            }
          }

          return span;
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          var node = new mathMLTree.MathNode("mspace");

          if (group.newLine) {
            node.setAttribute("linebreak", "newline");

            if (group.size) {
              node.setAttribute("height", units_calculateSize(group.size, options) + "em");
            }
          }

          return node;
        }
      }); // CONCATENATED MODULE: ./src/delimiter.js

      /**
       * This file deals with creating delimiters of various sizes. The TeXbook
       * discusses these routines on page 441-442, in the "Another subroutine sets box
       * x to a specified variable delimiter" paragraph.
       *
       * There are three main routines here. `makeSmallDelim` makes a delimiter in the
       * normal font, but in either text, script, or scriptscript style.
       * `makeLargeDelim` makes a delimiter in textstyle, but in one of the Size1,
       * Size2, Size3, or Size4 fonts. `makeStackedDelim` makes a delimiter out of
       * smaller pieces that are stacked on top of one another.
       *
       * The functions take a parameter `center`, which determines if the delimiter
       * should be centered around the axis.
       *
       * Then, there are three exposed functions. `sizedDelim` makes a delimiter in
       * one of the given sizes. This is used for things like `\bigl`.
       * `customSizedDelim` makes a delimiter with a given total height+depth. It is
       * called in places like `\sqrt`. `leftRightDelim` makes an appropriate
       * delimiter which surrounds an expression of a given height an depth. It is
       * used in `\left` and `\right`.
       */

      /**
       * Get the metrics for a given symbol and font, after transformation (i.e.
       * after following replacement from symbols.js)
       */

      var delimiter_getMetrics = function getMetrics(symbol, font, mode) {
        var replace = src_symbols.math[symbol] && src_symbols.math[symbol].replace;
        var metrics = getCharacterMetrics(replace || symbol, font, mode);

        if (!metrics) {
          throw new Error("Unsupported symbol " + symbol + " and font size " + font + ".");
        }

        return metrics;
      };
      /**
       * Puts a delimiter span in a given style, and adds appropriate height, depth,
       * and maxFontSizes.
       */


      var delimiter_styleWrap = function styleWrap(delim, toStyle, options, classes) {
        var newOptions = options.havingBaseStyle(toStyle);
        var span = buildCommon.makeSpan(classes.concat(newOptions.sizingClasses(options)), [delim], options);
        var delimSizeMultiplier = newOptions.sizeMultiplier / options.sizeMultiplier;
        span.height *= delimSizeMultiplier;
        span.depth *= delimSizeMultiplier;
        span.maxFontSize = newOptions.sizeMultiplier;
        return span;
      };

      var centerSpan = function centerSpan(span, options, style) {
        var newOptions = options.havingBaseStyle(style);
        var shift = (1 - options.sizeMultiplier / newOptions.sizeMultiplier) * options.fontMetrics().axisHeight;
        span.classes.push("delimcenter");
        span.style.top = shift + "em";
        span.height -= shift;
        span.depth += shift;
      };
      /**
       * Makes a small delimiter. This is a delimiter that comes in the Main-Regular
       * font, but is restyled to either be in textstyle, scriptstyle, or
       * scriptscriptstyle.
       */


      var delimiter_makeSmallDelim = function makeSmallDelim(delim, style, center, options, mode, classes) {
        var text = buildCommon.makeSymbol(delim, "Main-Regular", mode, options);
        var span = delimiter_styleWrap(text, style, options, classes);

        if (center) {
          centerSpan(span, options, style);
        }

        return span;
      };
      /**
       * Builds a symbol in the given font size (note size is an integer)
       */


      var delimiter_mathrmSize = function mathrmSize(value, size, mode, options) {
        return buildCommon.makeSymbol(value, "Size" + size + "-Regular", mode, options);
      };
      /**
       * Makes a large delimiter. This is a delimiter that comes in the Size1, Size2,
       * Size3, or Size4 fonts. It is always rendered in textstyle.
       */


      var delimiter_makeLargeDelim = function makeLargeDelim(delim, size, center, options, mode, classes) {
        var inner = delimiter_mathrmSize(delim, size, mode, options);
        var span = delimiter_styleWrap(buildCommon.makeSpan(["delimsizing", "size" + size], [inner], options), src_Style.TEXT, options, classes);

        if (center) {
          centerSpan(span, options, src_Style.TEXT);
        }

        return span;
      };
      /**
       * Make an inner span with the given offset and in the given font. This is used
       * in `makeStackedDelim` to make the stacking pieces for the delimiter.
       */


      var delimiter_makeInner = function makeInner(symbol, font, mode) {
        var sizeClass; // Apply the correct CSS class to choose the right font.

        if (font === "Size1-Regular") {
          sizeClass = "delim-size1";
        } else
          /* if (font === "Size4-Regular") */
          {
            sizeClass = "delim-size4";
          }

        var inner = buildCommon.makeSpan(["delimsizinginner", sizeClass], [buildCommon.makeSpan([], [buildCommon.makeSymbol(symbol, font, mode)])]); // Since this will be passed into `makeVList` in the end, wrap the element
        // in the appropriate tag that VList uses.

        return {
          type: "elem",
          elem: inner
        };
      };
      /**
       * Make a stacked delimiter out of a given delimiter, with the total height at
       * least `heightTotal`. This routine is mentioned on page 442 of the TeXbook.
       */


      var delimiter_makeStackedDelim = function makeStackedDelim(delim, heightTotal, center, options, mode, classes) {
        // There are four parts, the top, an optional middle, a repeated part, and a
        // bottom.
        var top;
        var middle;
        var repeat;
        var bottom;
        top = repeat = bottom = delim;
        middle = null; // Also keep track of what font the delimiters are in

        var font = "Size1-Regular"; // We set the parts and font based on the symbol. Note that we use
        // '\u23d0' instead of '|' and '\u2016' instead of '\\|' for the
        // repeats of the arrows

        if (delim === "\\uparrow") {
          repeat = bottom = "\u23D0";
        } else if (delim === "\\Uparrow") {
          repeat = bottom = "\u2016";
        } else if (delim === "\\downarrow") {
          top = repeat = "\u23D0";
        } else if (delim === "\\Downarrow") {
          top = repeat = "\u2016";
        } else if (delim === "\\updownarrow") {
          top = "\\uparrow";
          repeat = "\u23D0";
          bottom = "\\downarrow";
        } else if (delim === "\\Updownarrow") {
          top = "\\Uparrow";
          repeat = "\u2016";
          bottom = "\\Downarrow";
        } else if (delim === "[" || delim === "\\lbrack") {
          top = "\u23A1";
          repeat = "\u23A2";
          bottom = "\u23A3";
          font = "Size4-Regular";
        } else if (delim === "]" || delim === "\\rbrack") {
          top = "\u23A4";
          repeat = "\u23A5";
          bottom = "\u23A6";
          font = "Size4-Regular";
        } else if (delim === "\\lfloor" || delim === "\u230A") {
          repeat = top = "\u23A2";
          bottom = "\u23A3";
          font = "Size4-Regular";
        } else if (delim === "\\lceil" || delim === "\u2308") {
          top = "\u23A1";
          repeat = bottom = "\u23A2";
          font = "Size4-Regular";
        } else if (delim === "\\rfloor" || delim === "\u230B") {
          repeat = top = "\u23A5";
          bottom = "\u23A6";
          font = "Size4-Regular";
        } else if (delim === "\\rceil" || delim === "\u2309") {
          top = "\u23A4";
          repeat = bottom = "\u23A5";
          font = "Size4-Regular";
        } else if (delim === "(" || delim === "\\lparen") {
          top = "\u239B";
          repeat = "\u239C";
          bottom = "\u239D";
          font = "Size4-Regular";
        } else if (delim === ")" || delim === "\\rparen") {
          top = "\u239E";
          repeat = "\u239F";
          bottom = "\u23A0";
          font = "Size4-Regular";
        } else if (delim === "\\{" || delim === "\\lbrace") {
          top = "\u23A7";
          middle = "\u23A8";
          bottom = "\u23A9";
          repeat = "\u23AA";
          font = "Size4-Regular";
        } else if (delim === "\\}" || delim === "\\rbrace") {
          top = "\u23AB";
          middle = "\u23AC";
          bottom = "\u23AD";
          repeat = "\u23AA";
          font = "Size4-Regular";
        } else if (delim === "\\lgroup" || delim === "\u27EE") {
          top = "\u23A7";
          bottom = "\u23A9";
          repeat = "\u23AA";
          font = "Size4-Regular";
        } else if (delim === "\\rgroup" || delim === "\u27EF") {
          top = "\u23AB";
          bottom = "\u23AD";
          repeat = "\u23AA";
          font = "Size4-Regular";
        } else if (delim === "\\lmoustache" || delim === "\u23B0") {
          top = "\u23A7";
          bottom = "\u23AD";
          repeat = "\u23AA";
          font = "Size4-Regular";
        } else if (delim === "\\rmoustache" || delim === "\u23B1") {
          top = "\u23AB";
          bottom = "\u23A9";
          repeat = "\u23AA";
          font = "Size4-Regular";
        } // Get the metrics of the four sections


        var topMetrics = delimiter_getMetrics(top, font, mode);
        var topHeightTotal = topMetrics.height + topMetrics.depth;
        var repeatMetrics = delimiter_getMetrics(repeat, font, mode);
        var repeatHeightTotal = repeatMetrics.height + repeatMetrics.depth;
        var bottomMetrics = delimiter_getMetrics(bottom, font, mode);
        var bottomHeightTotal = bottomMetrics.height + bottomMetrics.depth;
        var middleHeightTotal = 0;
        var middleFactor = 1;

        if (middle !== null) {
          var middleMetrics = delimiter_getMetrics(middle, font, mode);
          middleHeightTotal = middleMetrics.height + middleMetrics.depth;
          middleFactor = 2; // repeat symmetrically above and below middle
        } // Calcuate the minimal height that the delimiter can have.
        // It is at least the size of the top, bottom, and optional middle combined.


        var minHeight = topHeightTotal + bottomHeightTotal + middleHeightTotal; // Compute the number of copies of the repeat symbol we will need

        var repeatCount = Math.ceil((heightTotal - minHeight) / (middleFactor * repeatHeightTotal)); // Compute the total height of the delimiter including all the symbols

        var realHeightTotal = minHeight + repeatCount * middleFactor * repeatHeightTotal; // The center of the delimiter is placed at the center of the axis. Note
        // that in this context, "center" means that the delimiter should be
        // centered around the axis in the current style, while normally it is
        // centered around the axis in textstyle.

        var axisHeight = options.fontMetrics().axisHeight;

        if (center) {
          axisHeight *= options.sizeMultiplier;
        } // Calculate the depth


        var depth = realHeightTotal / 2 - axisHeight; // Now, we start building the pieces that will go into the vlist
        // Keep a list of the inner pieces

        var inners = []; // Add the bottom symbol

        inners.push(delimiter_makeInner(bottom, font, mode));

        if (middle === null) {
          // Add that many symbols
          for (var i = 0; i < repeatCount; i++) {
            inners.push(delimiter_makeInner(repeat, font, mode));
          }
        } else {
          // When there is a middle bit, we need the middle part and two repeated
          // sections
          for (var _i = 0; _i < repeatCount; _i++) {
            inners.push(delimiter_makeInner(repeat, font, mode));
          }

          inners.push(delimiter_makeInner(middle, font, mode));

          for (var _i2 = 0; _i2 < repeatCount; _i2++) {
            inners.push(delimiter_makeInner(repeat, font, mode));
          }
        } // Add the top symbol


        inners.push(delimiter_makeInner(top, font, mode)); // Finally, build the vlist

        var newOptions = options.havingBaseStyle(src_Style.TEXT);
        var inner = buildCommon.makeVList({
          positionType: "bottom",
          positionData: depth,
          children: inners
        }, newOptions);
        return delimiter_styleWrap(buildCommon.makeSpan(["delimsizing", "mult"], [inner], newOptions), src_Style.TEXT, options, classes);
      }; // All surds have 0.08em padding above the viniculum inside the SVG.
      // That keeps browser span height rounding error from pinching the line.


      var vbPad = 80; // padding above the surd, measured inside the viewBox.

      var emPad = 0.08; // padding, in ems, measured in the document.

      var delimiter_sqrtSvg = function sqrtSvg(sqrtName, height, viewBoxHeight, options) {
        var alternate;

        if (sqrtName === "sqrtTall") {
          // sqrtTall is from glyph U23B7 in the font KaTeX_Size4-Regular
          // One path edge has a variable length. It runs from the viniculumn
          // to a point near (14 units) the bottom of the surd. The viniculum
          // is 40 units thick. So the length of the line in question is:
          var vertSegment = viewBoxHeight - 54 - vbPad;
          alternate = "M702 " + vbPad + "H400000v40H742v" + vertSegment + "l-4 4-4 4c-.667.7\n-2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1h-12l-28-84c-16.667-52-96.667\n-294.333-240-727l-212 -643 -85 170c-4-3.333-8.333-7.667-13 -13l-13-13l77-155\n 77-156c66 199.333 139 419.667 219 661 l218 661zM702 " + vbPad + "H400000v40H742z";
        }

        var pathNode = new domTree_PathNode(sqrtName, alternate);
        var svg = new SvgNode([pathNode], {
          // Note: 1000:1 ratio of viewBox to document em width.
          "width": "400em",
          "height": height + "em",
          "viewBox": "0 0 400000 " + viewBoxHeight,
          "preserveAspectRatio": "xMinYMin slice"
        });
        return buildCommon.makeSvgSpan(["hide-tail"], [svg], options);
      };
      /**
       * Make a sqrt image of the given height,
       */


      var makeSqrtImage = function makeSqrtImage(height, options) {
        // Define a newOptions that removes the effect of size changes such as \Huge.
        // We don't pick different a height surd for \Huge. For it, we scale up.
        var newOptions = options.havingBaseSizing(); // Pick the desired surd glyph from a sequence of surds.

        var delim = traverseSequence("\\surd", height * newOptions.sizeMultiplier, stackLargeDelimiterSequence, newOptions);
        var sizeMultiplier = newOptions.sizeMultiplier; // default
        // Create a span containing an SVG image of a sqrt symbol.

        var span;
        var spanHeight = 0;
        var texHeight = 0;
        var viewBoxHeight = 0;
        var advanceWidth; // We create viewBoxes with 80 units of "padding" above each surd.
        // Then browser rounding error on the parent span height will not
        // encroach on the ink of the viniculum. But that padding is not
        // included in the TeX-like `height` used for calculation of
        // vertical alignment. So texHeight = span.height < span.style.height.

        if (delim.type === "small") {
          // Get an SVG that is derived from glyph U+221A in font KaTeX-Main.
          viewBoxHeight = 1000 + vbPad; // 1000 unit glyph height.

          if (height < 1.0) {
            sizeMultiplier = 1.0; // mimic a \textfont radical
          } else if (height < 1.4) {
            sizeMultiplier = 0.7; // mimic a \scriptfont radical
          }

          spanHeight = (1.0 + emPad) / sizeMultiplier;
          texHeight = 1.00 / sizeMultiplier;
          span = delimiter_sqrtSvg("sqrtMain", spanHeight, viewBoxHeight, options);
          span.style.minWidth = "0.853em";
          advanceWidth = 0.833 / sizeMultiplier; // from the font.
        } else if (delim.type === "large") {
          // These SVGs come from fonts: KaTeX_Size1, _Size2, etc.
          viewBoxHeight = (1000 + vbPad) * sizeToMaxHeight[delim.size];
          texHeight = sizeToMaxHeight[delim.size] / sizeMultiplier;
          spanHeight = (sizeToMaxHeight[delim.size] + emPad) / sizeMultiplier;
          span = delimiter_sqrtSvg("sqrtSize" + delim.size, spanHeight, viewBoxHeight, options);
          span.style.minWidth = "1.02em";
          advanceWidth = 1.0 / sizeMultiplier; // 1.0 from the font.
        } else {
          // Tall sqrt. In TeX, this would be stacked using multiple glyphs.
          // We'll use a single SVG to accomplish the same thing.
          spanHeight = height + emPad;
          texHeight = height;
          viewBoxHeight = Math.floor(1000 * height) + vbPad;
          span = delimiter_sqrtSvg("sqrtTall", spanHeight, viewBoxHeight, options);
          span.style.minWidth = "0.742em";
          advanceWidth = 1.056;
        }

        span.height = texHeight;
        span.style.height = spanHeight + "em";
        return {
          span: span,
          advanceWidth: advanceWidth,
          // Calculate the actual line width.
          // This actually should depend on the chosen font -- e.g. \boldmath
          // should use the thicker surd symbols from e.g. KaTeX_Main-Bold, and
          // have thicker rules.
          ruleWidth: options.fontMetrics().sqrtRuleThickness * sizeMultiplier
        };
      }; // There are three kinds of delimiters, delimiters that stack when they become
      // too large


      var stackLargeDelimiters = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "\u230A", "\u230B", "\\lceil", "\\rceil", "\u2308", "\u2309", "\\surd"]; // delimiters that always stack

      var stackAlwaysDelimiters = ["\\uparrow", "\\downarrow", "\\updownarrow", "\\Uparrow", "\\Downarrow", "\\Updownarrow", "|", "\\|", "\\vert", "\\Vert", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "\u27EE", "\u27EF", "\\lmoustache", "\\rmoustache", "\u23B0", "\u23B1"]; // and delimiters that never stack

      var stackNeverDelimiters = ["<", ">", "\\langle", "\\rangle", "/", "\\backslash", "\\lt", "\\gt"]; // Metrics of the different sizes. Found by looking at TeX's output of
      // $\bigl| // \Bigl| \biggl| \Biggl| \showlists$
      // Used to create stacked delimiters of appropriate sizes in makeSizedDelim.

      var sizeToMaxHeight = [0, 1.2, 1.8, 2.4, 3.0];
      /**
       * Used to create a delimiter of a specific size, where `size` is 1, 2, 3, or 4.
       */

      var delimiter_makeSizedDelim = function makeSizedDelim(delim, size, options, mode, classes) {
        // < and > turn into \langle and \rangle in delimiters
        if (delim === "<" || delim === "\\lt" || delim === "\u27E8") {
          delim = "\\langle";
        } else if (delim === ">" || delim === "\\gt" || delim === "\u27E9") {
          delim = "\\rangle";
        } // Sized delimiters are never centered.


        if (utils.contains(stackLargeDelimiters, delim) || utils.contains(stackNeverDelimiters, delim)) {
          return delimiter_makeLargeDelim(delim, size, false, options, mode, classes);
        } else if (utils.contains(stackAlwaysDelimiters, delim)) {
          return delimiter_makeStackedDelim(delim, sizeToMaxHeight[size], false, options, mode, classes);
        } else {
          throw new src_ParseError("Illegal delimiter: '" + delim + "'");
        }
      };
      /**
       * There are three different sequences of delimiter sizes that the delimiters
       * follow depending on the kind of delimiter. This is used when creating custom
       * sized delimiters to decide whether to create a small, large, or stacked
       * delimiter.
       *
       * In real TeX, these sequences aren't explicitly defined, but are instead
       * defined inside the font metrics. Since there are only three sequences that
       * are possible for the delimiters that TeX defines, it is easier to just encode
       * them explicitly here.
       */
      // Delimiters that never stack try small delimiters and large delimiters only


      var stackNeverDelimiterSequence = [{
        type: "small",
        style: src_Style.SCRIPTSCRIPT
      }, {
        type: "small",
        style: src_Style.SCRIPT
      }, {
        type: "small",
        style: src_Style.TEXT
      }, {
        type: "large",
        size: 1
      }, {
        type: "large",
        size: 2
      }, {
        type: "large",
        size: 3
      }, {
        type: "large",
        size: 4
      }]; // Delimiters that always stack try the small delimiters first, then stack

      var stackAlwaysDelimiterSequence = [{
        type: "small",
        style: src_Style.SCRIPTSCRIPT
      }, {
        type: "small",
        style: src_Style.SCRIPT
      }, {
        type: "small",
        style: src_Style.TEXT
      }, {
        type: "stack"
      }]; // Delimiters that stack when large try the small and then large delimiters, and
      // stack afterwards

      var stackLargeDelimiterSequence = [{
        type: "small",
        style: src_Style.SCRIPTSCRIPT
      }, {
        type: "small",
        style: src_Style.SCRIPT
      }, {
        type: "small",
        style: src_Style.TEXT
      }, {
        type: "large",
        size: 1
      }, {
        type: "large",
        size: 2
      }, {
        type: "large",
        size: 3
      }, {
        type: "large",
        size: 4
      }, {
        type: "stack"
      }];
      /**
       * Get the font used in a delimiter based on what kind of delimiter it is.
       * TODO(#963) Use more specific font family return type once that is introduced.
       */

      var delimTypeToFont = function delimTypeToFont(type) {
        if (type.type === "small") {
          return "Main-Regular";
        } else if (type.type === "large") {
          return "Size" + type.size + "-Regular";
        } else if (type.type === "stack") {
          return "Size4-Regular";
        } else {
          throw new Error("Add support for delim type '" + type.type + "' here.");
        }
      };
      /**
       * Traverse a sequence of types of delimiters to decide what kind of delimiter
       * should be used to create a delimiter of the given height+depth.
       */


      var traverseSequence = function traverseSequence(delim, height, sequence, options) {
        // Here, we choose the index we should start at in the sequences. In smaller
        // sizes (which correspond to larger numbers in style.size) we start earlier
        // in the sequence. Thus, scriptscript starts at index 3-3=0, script starts
        // at index 3-2=1, text starts at 3-1=2, and display starts at min(2,3-0)=2
        var start = Math.min(2, 3 - options.style.size);

        for (var i = start; i < sequence.length; i++) {
          if (sequence[i].type === "stack") {
            // This is always the last delimiter, so we just break the loop now.
            break;
          }

          var metrics = delimiter_getMetrics(delim, delimTypeToFont(sequence[i]), "math");
          var heightDepth = metrics.height + metrics.depth; // Small delimiters are scaled down versions of the same font, so we
          // account for the style change size.

          if (sequence[i].type === "small") {
            var newOptions = options.havingBaseStyle(sequence[i].style);
            heightDepth *= newOptions.sizeMultiplier;
          } // Check if the delimiter at this size works for the given height.


          if (heightDepth > height) {
            return sequence[i];
          }
        } // If we reached the end of the sequence, return the last sequence element.


        return sequence[sequence.length - 1];
      };
      /**
       * Make a delimiter of a given height+depth, with optional centering. Here, we
       * traverse the sequences, and create a delimiter that the sequence tells us to.
       */


      var delimiter_makeCustomSizedDelim = function makeCustomSizedDelim(delim, height, center, options, mode, classes) {
        if (delim === "<" || delim === "\\lt" || delim === "\u27E8") {
          delim = "\\langle";
        } else if (delim === ">" || delim === "\\gt" || delim === "\u27E9") {
          delim = "\\rangle";
        } // Decide what sequence to use


        var sequence;

        if (utils.contains(stackNeverDelimiters, delim)) {
          sequence = stackNeverDelimiterSequence;
        } else if (utils.contains(stackLargeDelimiters, delim)) {
          sequence = stackLargeDelimiterSequence;
        } else {
          sequence = stackAlwaysDelimiterSequence;
        } // Look through the sequence


        var delimType = traverseSequence(delim, height, sequence, options); // Get the delimiter from font glyphs.
        // Depending on the sequence element we decided on, call the
        // appropriate function.

        if (delimType.type === "small") {
          return delimiter_makeSmallDelim(delim, delimType.style, center, options, mode, classes);
        } else if (delimType.type === "large") {
          return delimiter_makeLargeDelim(delim, delimType.size, center, options, mode, classes);
        } else
          /* if (delimType.type === "stack") */
          {
            return delimiter_makeStackedDelim(delim, height, center, options, mode, classes);
          }
      };
      /**
       * Make a delimiter for use with `\left` and `\right`, given a height and depth
       * of an expression that the delimiters surround.
       */


      var makeLeftRightDelim = function makeLeftRightDelim(delim, height, depth, options, mode, classes) {
        // We always center \left/\right delimiters, so the axis is always shifted
        var axisHeight = options.fontMetrics().axisHeight * options.sizeMultiplier; // Taken from TeX source, tex.web, function make_left_right

        var delimiterFactor = 901;
        var delimiterExtend = 5.0 / options.fontMetrics().ptPerEm;
        var maxDistFromAxis = Math.max(height - axisHeight, depth + axisHeight);
        var totalHeight = Math.max( // In real TeX, calculations are done using integral values which are
        // 65536 per pt, or 655360 per em. So, the division here truncates in
        // TeX but doesn't here, producing different results. If we wanted to
        // exactly match TeX's calculation, we could do
        //   Math.floor(655360 * maxDistFromAxis / 500) *
        //    delimiterFactor / 655360
        // (To see the difference, compare
        //    x^{x^{\left(\rule{0.1em}{0.68em}\right)}}
        // in TeX and KaTeX)
        maxDistFromAxis / 500 * delimiterFactor, 2 * maxDistFromAxis - delimiterExtend); // Finally, we defer to `makeCustomSizedDelim` with our calculated total
        // height

        return delimiter_makeCustomSizedDelim(delim, totalHeight, true, options, mode, classes);
      };
      /* harmony default export */


      var delimiter = {
        sqrtImage: makeSqrtImage,
        sizedDelim: delimiter_makeSizedDelim,
        customSizedDelim: delimiter_makeCustomSizedDelim,
        leftRightDelim: makeLeftRightDelim
      }; // CONCATENATED MODULE: ./src/functions/delimsizing.js
      // Extra data needed for the delimiter handler down below

      var delimiterSizes = {
        "\\bigl": {
          mclass: "mopen",
          size: 1
        },
        "\\Bigl": {
          mclass: "mopen",
          size: 2
        },
        "\\biggl": {
          mclass: "mopen",
          size: 3
        },
        "\\Biggl": {
          mclass: "mopen",
          size: 4
        },
        "\\bigr": {
          mclass: "mclose",
          size: 1
        },
        "\\Bigr": {
          mclass: "mclose",
          size: 2
        },
        "\\biggr": {
          mclass: "mclose",
          size: 3
        },
        "\\Biggr": {
          mclass: "mclose",
          size: 4
        },
        "\\bigm": {
          mclass: "mrel",
          size: 1
        },
        "\\Bigm": {
          mclass: "mrel",
          size: 2
        },
        "\\biggm": {
          mclass: "mrel",
          size: 3
        },
        "\\Biggm": {
          mclass: "mrel",
          size: 4
        },
        "\\big": {
          mclass: "mord",
          size: 1
        },
        "\\Big": {
          mclass: "mord",
          size: 2
        },
        "\\bigg": {
          mclass: "mord",
          size: 3
        },
        "\\Bigg": {
          mclass: "mord",
          size: 4
        }
      };
      var delimiters = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "\u230A", "\u230B", "\\lceil", "\\rceil", "\u2308", "\u2309", "<", ">", "\\langle", "\u27E8", "\\rangle", "\u27E9", "\\lt", "\\gt", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "\u27EE", "\u27EF", "\\lmoustache", "\\rmoustache", "\u23B0", "\u23B1", "/", "\\backslash", "|", "\\vert", "\\|", "\\Vert", "\\uparrow", "\\Uparrow", "\\downarrow", "\\Downarrow", "\\updownarrow", "\\Updownarrow", "."]; // Delimiter functions

      function checkDelimiter(delim, context) {
        var symDelim = checkSymbolNodeType(delim);

        if (symDelim && utils.contains(delimiters, symDelim.text)) {
          return symDelim;
        } else {
          throw new src_ParseError("Invalid delimiter: '" + (symDelim ? symDelim.text : JSON.stringify(delim)) + "' after '" + context.funcName + "'", delim);
        }
      }

      defineFunction({
        type: "delimsizing",
        names: ["\\bigl", "\\Bigl", "\\biggl", "\\Biggl", "\\bigr", "\\Bigr", "\\biggr", "\\Biggr", "\\bigm", "\\Bigm", "\\biggm", "\\Biggm", "\\big", "\\Big", "\\bigg", "\\Bigg"],
        props: {
          numArgs: 1
        },
        handler: function handler(context, args) {
          var delim = checkDelimiter(args[0], context);
          return {
            type: "delimsizing",
            mode: context.parser.mode,
            size: delimiterSizes[context.funcName].size,
            mclass: delimiterSizes[context.funcName].mclass,
            delim: delim.text
          };
        },
        htmlBuilder: function htmlBuilder(group, options) {
          if (group.delim === ".") {
            // Empty delimiters still count as elements, even though they don't
            // show anything.
            return buildCommon.makeSpan([group.mclass]);
          } // Use delimiter.sizedDelim to generate the delimiter.


          return delimiter.sizedDelim(group.delim, group.size, options, group.mode, [group.mclass]);
        },
        mathmlBuilder: function mathmlBuilder(group) {
          var children = [];

          if (group.delim !== ".") {
            children.push(buildMathML_makeText(group.delim, group.mode));
          }

          var node = new mathMLTree.MathNode("mo", children);

          if (group.mclass === "mopen" || group.mclass === "mclose") {
            // Only some of the delimsizing functions act as fences, and they
            // return "mopen" or "mclose" mclass.
            node.setAttribute("fence", "true");
          } else {
            // Explicitly disable fencing if it's not a fence, to override the
            // defaults.
            node.setAttribute("fence", "false");
          }

          return node;
        }
      });

      function assertParsed(group) {
        if (!group.body) {
          throw new Error("Bug: The leftright ParseNode wasn't fully parsed.");
        }
      }

      defineFunction({
        type: "leftright-right",
        names: ["\\right"],
        props: {
          numArgs: 1
        },
        handler: function handler(context, args) {
          // \left case below triggers parsing of \right in
          //   `const right = parser.parseFunction();`
          // uses this return value.
          return {
            type: "leftright-right",
            mode: context.parser.mode,
            delim: checkDelimiter(args[0], context).text
          };
        }
      });
      defineFunction({
        type: "leftright",
        names: ["\\left"],
        props: {
          numArgs: 1
        },
        handler: function handler(context, args) {
          var delim = checkDelimiter(args[0], context);
          var parser = context.parser; // Parse out the implicit body

          ++parser.leftrightDepth; // parseExpression stops before '\\right'

          var body = parser.parseExpression(false);
          --parser.leftrightDepth; // Check the next token

          parser.expect("\\right", false);
          var right = assertNodeType(parser.parseFunction(), "leftright-right");
          return {
            type: "leftright",
            mode: parser.mode,
            body: body,
            left: delim.text,
            right: right.delim
          };
        },
        htmlBuilder: function htmlBuilder(group, options) {
          assertParsed(group); // Build the inner expression

          var inner = buildHTML_buildExpression(group.body, options, true, ["mopen", "mclose"]);
          var innerHeight = 0;
          var innerDepth = 0;
          var hadMiddle = false; // Calculate its height and depth

          for (var i = 0; i < inner.length; i++) {
            // Property `isMiddle` not defined on `span`. See comment in
            // "middle"'s htmlBuilder.
            // $FlowFixMe
            if (inner[i].isMiddle) {
              hadMiddle = true;
            } else {
              innerHeight = Math.max(inner[i].height, innerHeight);
              innerDepth = Math.max(inner[i].depth, innerDepth);
            }
          } // The size of delimiters is the same, regardless of what style we are
          // in. Thus, to correctly calculate the size of delimiter we need around
          // a group, we scale down the inner size based on the size.


          innerHeight *= options.sizeMultiplier;
          innerDepth *= options.sizeMultiplier;
          var leftDelim;

          if (group.left === ".") {
            // Empty delimiters in \left and \right make null delimiter spaces.
            leftDelim = makeNullDelimiter(options, ["mopen"]);
          } else {
            // Otherwise, use leftRightDelim to generate the correct sized
            // delimiter.
            leftDelim = delimiter.leftRightDelim(group.left, innerHeight, innerDepth, options, group.mode, ["mopen"]);
          } // Add it to the beginning of the expression


          inner.unshift(leftDelim); // Handle middle delimiters

          if (hadMiddle) {
            for (var _i = 1; _i < inner.length; _i++) {
              var middleDelim = inner[_i]; // Property `isMiddle` not defined on `span`. See comment in
              // "middle"'s htmlBuilder.
              // $FlowFixMe

              var isMiddle = middleDelim.isMiddle;

              if (isMiddle) {
                // Apply the options that were active when \middle was called
                inner[_i] = delimiter.leftRightDelim(isMiddle.delim, innerHeight, innerDepth, isMiddle.options, group.mode, []);
              }
            }
          }

          var rightDelim; // Same for the right delimiter

          if (group.right === ".") {
            rightDelim = makeNullDelimiter(options, ["mclose"]);
          } else {
            rightDelim = delimiter.leftRightDelim(group.right, innerHeight, innerDepth, options, group.mode, ["mclose"]);
          } // Add it to the end of the expression.


          inner.push(rightDelim);
          return buildCommon.makeSpan(["minner"], inner, options);
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          assertParsed(group);
          var inner = buildMathML_buildExpression(group.body, options);

          if (group.left !== ".") {
            var leftNode = new mathMLTree.MathNode("mo", [buildMathML_makeText(group.left, group.mode)]);
            leftNode.setAttribute("fence", "true");
            inner.unshift(leftNode);
          }

          if (group.right !== ".") {
            var rightNode = new mathMLTree.MathNode("mo", [buildMathML_makeText(group.right, group.mode)]);
            rightNode.setAttribute("fence", "true");
            inner.push(rightNode);
          }

          return buildMathML_makeRow(inner);
        }
      });
      defineFunction({
        type: "middle",
        names: ["\\middle"],
        props: {
          numArgs: 1
        },
        handler: function handler(context, args) {
          var delim = checkDelimiter(args[0], context);

          if (!context.parser.leftrightDepth) {
            throw new src_ParseError("\\middle without preceding \\left", delim);
          }

          return {
            type: "middle",
            mode: context.parser.mode,
            delim: delim.text
          };
        },
        htmlBuilder: function htmlBuilder(group, options) {
          var middleDelim;

          if (group.delim === ".") {
            middleDelim = makeNullDelimiter(options, []);
          } else {
            middleDelim = delimiter.sizedDelim(group.delim, 1, options, group.mode, []);
            var isMiddle = {
              delim: group.delim,
              options: options
            }; // Property `isMiddle` not defined on `span`. It is only used in
            // this file above.
            // TODO: Fix this violation of the `span` type and possibly rename
            // things since `isMiddle` sounds like a boolean, but is a struct.
            // $FlowFixMe

            middleDelim.isMiddle = isMiddle;
          }

          return middleDelim;
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          // A Firefox \middle will strech a character vertically only if it
          // is in the fence part of the operator dictionary at:
          // https://www.w3.org/TR/MathML3/appendixc.html.
          // So we need to avoid U+2223 and use plain "|" instead.
          var textNode = group.delim === "\\vert" || group.delim === "|" ? buildMathML_makeText("|", "text") : buildMathML_makeText(group.delim, group.mode);
          var middleNode = new mathMLTree.MathNode("mo", [textNode]);
          middleNode.setAttribute("fence", "true"); // MathML gives 5/18em spacing to each <mo> element.
          // \middle should get delimiter spacing instead.

          middleNode.setAttribute("lspace", "0.05em");
          middleNode.setAttribute("rspace", "0.05em");
          return middleNode;
        }
      }); // CONCATENATED MODULE: ./src/functions/enclose.js

      var enclose_htmlBuilder = function htmlBuilder(group, options) {
        // \cancel, \bcancel, \xcancel, \sout, \fbox, \colorbox, \fcolorbox
        // Some groups can return document fragments.  Handle those by wrapping
        // them in a span.
        var inner = buildCommon.wrapFragment(buildHTML_buildGroup(group.body, options), options);
        var label = group.label.substr(1);
        var scale = options.sizeMultiplier;
        var img;
        var imgShift = 0; // In the LaTeX cancel package, line geometry is slightly different
        // depending on whether the subject is wider than it is tall, or vice versa.
        // We don't know the width of a group, so as a proxy, we test if
        // the subject is a single character. This captures most of the
        // subjects that should get the "tall" treatment.

        var isSingleChar = utils.isCharacterBox(group.body);

        if (label === "sout") {
          img = buildCommon.makeSpan(["stretchy", "sout"]);
          img.height = options.fontMetrics().defaultRuleThickness / scale;
          imgShift = -0.5 * options.fontMetrics().xHeight;
        } else {
          // Add horizontal padding
          if (/cancel/.test(label)) {
            if (!isSingleChar) {
              inner.classes.push("cancel-pad");
            }
          } else {
            inner.classes.push("boxpad");
          } // Add vertical padding


          var vertPad = 0; // ref: LaTeX source2e: \fboxsep = 3pt;  \fboxrule = .4pt
          // ref: cancel package: \advance\totalheight2\p@ % "+2"

          if (/box/.test(label)) {
            vertPad = label === "colorbox" ? 0.3 : 0.34;
          } else {
            vertPad = isSingleChar ? 0.2 : 0;
          }

          img = stretchy.encloseSpan(inner, label, vertPad, options);
          imgShift = inner.depth + vertPad;

          if (group.backgroundColor) {
            img.style.backgroundColor = group.backgroundColor;

            if (group.borderColor) {
              img.style.borderColor = group.borderColor;
            }
          }
        }

        var vlist;

        if (group.backgroundColor) {
          vlist = buildCommon.makeVList({
            positionType: "individualShift",
            children: [// Put the color background behind inner;
            {
              type: "elem",
              elem: img,
              shift: imgShift
            }, {
              type: "elem",
              elem: inner,
              shift: 0
            }]
          }, options);
        } else {
          vlist = buildCommon.makeVList({
            positionType: "individualShift",
            children: [// Write the \cancel stroke on top of inner.
            {
              type: "elem",
              elem: inner,
              shift: 0
            }, {
              type: "elem",
              elem: img,
              shift: imgShift,
              wrapperClasses: /cancel/.test(label) ? ["svg-align"] : []
            }]
          }, options);
        }

        if (/cancel/.test(label)) {
          // The cancel package documentation says that cancel lines add their height
          // to the expression, but tests show that isn't how it actually works.
          vlist.height = inner.height;
          vlist.depth = inner.depth;
        }

        if (/cancel/.test(label) && !isSingleChar) {
          // cancel does not create horiz space for its line extension.
          return buildCommon.makeSpan(["mord", "cancel-lap"], [vlist], options);
        } else {
          return buildCommon.makeSpan(["mord"], [vlist], options);
        }
      };

      var enclose_mathmlBuilder = function mathmlBuilder(group, options) {
        var node = new mathMLTree.MathNode(group.label.indexOf("colorbox") > -1 ? "mpadded" : "menclose", [buildMathML_buildGroup(group.body, options)]);

        switch (group.label) {
          case "\\cancel":
            node.setAttribute("notation", "updiagonalstrike");
            break;

          case "\\bcancel":
            node.setAttribute("notation", "downdiagonalstrike");
            break;

          case "\\sout":
            node.setAttribute("notation", "horizontalstrike");
            break;

          case "\\fbox":
            node.setAttribute("notation", "box");
            break;

          case "\\fcolorbox":
          case "\\colorbox":
            // <menclose> doesn't have a good notation option. So use <mpadded>
            // instead. Set some attributes that come included with <menclose>.
            node.setAttribute("width", "+6pt");
            node.setAttribute("height", "+6pt");
            node.setAttribute("lspace", "3pt"); // LaTeX source2e: \fboxsep = 3pt

            node.setAttribute("voffset", "3pt");

            if (group.label === "\\fcolorbox") {
              var thk = options.fontMetrics().defaultRuleThickness;
              node.setAttribute("style", "border: " + thk + "em solid " + String(group.borderColor));
            }

            break;

          case "\\xcancel":
            node.setAttribute("notation", "updiagonalstrike downdiagonalstrike");
            break;
        }

        if (group.backgroundColor) {
          node.setAttribute("mathbackground", group.backgroundColor);
        }

        return node;
      };

      defineFunction({
        type: "enclose",
        names: ["\\colorbox"],
        props: {
          numArgs: 2,
          allowedInText: true,
          greediness: 3,
          argTypes: ["color", "text"]
        },
        handler: function handler(_ref, args, optArgs) {
          var parser = _ref.parser,
              funcName = _ref.funcName;
          var color = assertNodeType(args[0], "color-token").color;
          var body = args[1];
          return {
            type: "enclose",
            mode: parser.mode,
            label: funcName,
            backgroundColor: color,
            body: body
          };
        },
        htmlBuilder: enclose_htmlBuilder,
        mathmlBuilder: enclose_mathmlBuilder
      });
      defineFunction({
        type: "enclose",
        names: ["\\fcolorbox"],
        props: {
          numArgs: 3,
          allowedInText: true,
          greediness: 3,
          argTypes: ["color", "color", "text"]
        },
        handler: function handler(_ref2, args, optArgs) {
          var parser = _ref2.parser,
              funcName = _ref2.funcName;
          var borderColor = assertNodeType(args[0], "color-token").color;
          var backgroundColor = assertNodeType(args[1], "color-token").color;
          var body = args[2];
          return {
            type: "enclose",
            mode: parser.mode,
            label: funcName,
            backgroundColor: backgroundColor,
            borderColor: borderColor,
            body: body
          };
        },
        htmlBuilder: enclose_htmlBuilder,
        mathmlBuilder: enclose_mathmlBuilder
      });
      defineFunction({
        type: "enclose",
        names: ["\\fbox"],
        props: {
          numArgs: 1,
          argTypes: ["text"],
          allowedInText: true
        },
        handler: function handler(_ref3, args) {
          var parser = _ref3.parser;
          return {
            type: "enclose",
            mode: parser.mode,
            label: "\\fbox",
            body: args[0]
          };
        }
      });
      defineFunction({
        type: "enclose",
        names: ["\\cancel", "\\bcancel", "\\xcancel", "\\sout"],
        props: {
          numArgs: 1
        },
        handler: function handler(_ref4, args, optArgs) {
          var parser = _ref4.parser,
              funcName = _ref4.funcName;
          var body = args[0];
          return {
            type: "enclose",
            mode: parser.mode,
            label: funcName,
            body: body
          };
        },
        htmlBuilder: enclose_htmlBuilder,
        mathmlBuilder: enclose_mathmlBuilder
      }); // CONCATENATED MODULE: ./src/defineEnvironment.js

      /**
       * All registered environments.
       * `environments.js` exports this same dictionary again and makes it public.
       * `Parser.js` requires this dictionary via `environments.js`.
       */

      var _environments = {};

      function defineEnvironment(_ref) {
        var type = _ref.type,
            names = _ref.names,
            props = _ref.props,
            handler = _ref.handler,
            htmlBuilder = _ref.htmlBuilder,
            mathmlBuilder = _ref.mathmlBuilder; // Set default values of environments.

        var data = {
          type: type,
          numArgs: props.numArgs || 0,
          greediness: 1,
          allowedInText: false,
          numOptionalArgs: 0,
          handler: handler
        };

        for (var i = 0; i < names.length; ++i) {
          // TODO: The value type of _environments should be a type union of all
          // possible `EnvSpec<>` possibilities instead of `EnvSpec<*>`, which is
          // an existential type.
          // $FlowFixMe
          _environments[names[i]] = data;
        }

        if (htmlBuilder) {
          _htmlGroupBuilders[type] = htmlBuilder;
        }

        if (mathmlBuilder) {
          _mathmlGroupBuilders[type] = mathmlBuilder;
        }
      } // CONCATENATED MODULE: ./src/environments/array.js


      function getHLines(parser) {
        // Return an array. The array length = number of hlines.
        // Each element in the array tells if the line is dashed.
        var hlineInfo = [];
        parser.consumeSpaces();
        var nxt = parser.nextToken.text;

        while (nxt === "\\hline" || nxt === "\\hdashline") {
          parser.consume();
          hlineInfo.push(nxt === "\\hdashline");
          parser.consumeSpaces();
          nxt = parser.nextToken.text;
        }

        return hlineInfo;
      }
      /**
       * Parse the body of the environment, with rows delimited by \\ and
       * columns delimited by &, and create a nested list in row-major order
       * with one group per cell.  If given an optional argument style
       * ("text", "display", etc.), then each cell is cast into that style.
       */


      function parseArray(parser, _ref, style) {
        var hskipBeforeAndAfter = _ref.hskipBeforeAndAfter,
            addJot = _ref.addJot,
            cols = _ref.cols,
            arraystretch = _ref.arraystretch,
            colSeparationType = _ref.colSeparationType; // Parse body of array with \\ temporarily mapped to \cr

        parser.gullet.beginGroup();
        parser.gullet.macros.set("\\\\", "\\cr"); // Get current arraystretch if it's not set by the environment

        if (!arraystretch) {
          var stretch = parser.gullet.expandMacroAsText("\\arraystretch");

          if (stretch == null) {
            // Default \arraystretch from lttab.dtx
            arraystretch = 1;
          } else {
            arraystretch = parseFloat(stretch);

            if (!arraystretch || arraystretch < 0) {
              throw new src_ParseError("Invalid \\arraystretch: " + stretch);
            }
          }
        }

        var row = [];
        var body = [row];
        var rowGaps = [];
        var hLinesBeforeRow = []; // Test for \hline at the top of the array.

        hLinesBeforeRow.push(getHLines(parser));

        while (true) {
          // eslint-disable-line no-constant-condition
          var cell = parser.parseExpression(false, "\\cr");
          cell = {
            type: "ordgroup",
            mode: parser.mode,
            body: cell
          };

          if (style) {
            cell = {
              type: "styling",
              mode: parser.mode,
              style: style,
              body: [cell]
            };
          }

          row.push(cell);
          var next = parser.nextToken.text;

          if (next === "&") {
            parser.consume();
          } else if (next === "\\end") {
            // Arrays terminate newlines with `\crcr` which consumes a `\cr` if
            // the last line is empty.
            // NOTE: Currently, `cell` is the last item added into `row`.
            if (row.length === 1 && cell.type === "styling" && cell.body[0].body.length === 0) {
              body.pop();
            }

            if (hLinesBeforeRow.length < body.length + 1) {
              hLinesBeforeRow.push([]);
            }

            break;
          } else if (next === "\\cr") {
            var cr = assertNodeType(parser.parseFunction(), "cr");
            rowGaps.push(cr.size); // check for \hline(s) following the row separator

            hLinesBeforeRow.push(getHLines(parser));
            row = [];
            body.push(row);
          } else {
            throw new src_ParseError("Expected & or \\\\ or \\cr or \\end", parser.nextToken);
          }
        }

        parser.gullet.endGroup();
        return {
          type: "array",
          mode: parser.mode,
          addJot: addJot,
          arraystretch: arraystretch,
          body: body,
          cols: cols,
          rowGaps: rowGaps,
          hskipBeforeAndAfter: hskipBeforeAndAfter,
          hLinesBeforeRow: hLinesBeforeRow,
          colSeparationType: colSeparationType
        };
      } // Decides on a style for cells in an array according to whether the given
      // environment name starts with the letter 'd'.


      function dCellStyle(envName) {
        if (envName.substr(0, 1) === "d") {
          return "display";
        } else {
          return "text";
        }
      }

      var array_htmlBuilder = function htmlBuilder(group, options) {
        var r;
        var c;
        var nr = group.body.length;
        var hLinesBeforeRow = group.hLinesBeforeRow;
        var nc = 0;
        var body = new Array(nr);
        var hlines = []; // Horizontal spacing

        var pt = 1 / options.fontMetrics().ptPerEm;
        var arraycolsep = 5 * pt; // \arraycolsep in article.cls
        // Vertical spacing

        var baselineskip = 12 * pt; // see size10.clo
        // Default \jot from ltmath.dtx
        // TODO(edemaine): allow overriding \jot via \setlength (#687)

        var jot = 3 * pt;
        var arrayskip = group.arraystretch * baselineskip;
        var arstrutHeight = 0.7 * arrayskip; // \strutbox in ltfsstrc.dtx and

        var arstrutDepth = 0.3 * arrayskip; // \@arstrutbox in lttab.dtx

        var totalHeight = 0; // Set a position for \hline(s) at the top of the array, if any.

        function setHLinePos(hlinesInGap) {
          for (var i = 0; i < hlinesInGap.length; ++i) {
            if (i > 0) {
              totalHeight += 0.25;
            }

            hlines.push({
              pos: totalHeight,
              isDashed: hlinesInGap[i]
            });
          }
        }

        setHLinePos(hLinesBeforeRow[0]);

        for (r = 0; r < group.body.length; ++r) {
          var inrow = group.body[r];
          var height = arstrutHeight; // \@array adds an \@arstrut

          var depth = arstrutDepth; // to each tow (via the template)

          if (nc < inrow.length) {
            nc = inrow.length;
          }

          var outrow = new Array(inrow.length);

          for (c = 0; c < inrow.length; ++c) {
            var elt = buildHTML_buildGroup(inrow[c], options);

            if (depth < elt.depth) {
              depth = elt.depth;
            }

            if (height < elt.height) {
              height = elt.height;
            }

            outrow[c] = elt;
          }

          var rowGap = group.rowGaps[r];
          var gap = 0;

          if (rowGap) {
            gap = units_calculateSize(rowGap, options);

            if (gap > 0) {
              // \@argarraycr
              gap += arstrutDepth;

              if (depth < gap) {
                depth = gap; // \@xargarraycr
              }

              gap = 0;
            }
          } // In AMS multiline environments such as aligned and gathered, rows
          // correspond to lines that have additional \jot added to the
          // \baselineskip via \openup.


          if (group.addJot) {
            depth += jot;
          }

          outrow.height = height;
          outrow.depth = depth;
          totalHeight += height;
          outrow.pos = totalHeight;
          totalHeight += depth + gap; // \@yargarraycr

          body[r] = outrow; // Set a position for \hline(s), if any.

          setHLinePos(hLinesBeforeRow[r + 1]);
        }

        var offset = totalHeight / 2 + options.fontMetrics().axisHeight;
        var colDescriptions = group.cols || [];
        var cols = [];
        var colSep;
        var colDescrNum;

        for (c = 0, colDescrNum = 0; // Continue while either there are more columns or more column
        // descriptions, so trailing separators don't get lost.
        c < nc || colDescrNum < colDescriptions.length; ++c, ++colDescrNum) {
          var colDescr = colDescriptions[colDescrNum] || {};
          var firstSeparator = true;

          while (colDescr.type === "separator") {
            // If there is more than one separator in a row, add a space
            // between them.
            if (!firstSeparator) {
              colSep = buildCommon.makeSpan(["arraycolsep"], []);
              colSep.style.width = options.fontMetrics().doubleRuleSep + "em";
              cols.push(colSep);
            }

            if (colDescr.separator === "|") {
              var separator = buildCommon.makeSpan(["vertical-separator"], [], options);
              separator.style.height = totalHeight + "em";
              separator.style.verticalAlign = -(totalHeight - offset) + "em";
              cols.push(separator);
            } else if (colDescr.separator === ":") {
              var _separator = buildCommon.makeSpan(["vertical-separator", "vs-dashed"], [], options);

              _separator.style.height = totalHeight + "em";
              _separator.style.verticalAlign = -(totalHeight - offset) + "em";
              cols.push(_separator);
            } else {
              throw new src_ParseError("Invalid separator type: " + colDescr.separator);
            }

            colDescrNum++;
            colDescr = colDescriptions[colDescrNum] || {};
            firstSeparator = false;
          }

          if (c >= nc) {
            continue;
          }

          var sepwidth = void 0;

          if (c > 0 || group.hskipBeforeAndAfter) {
            sepwidth = utils.deflt(colDescr.pregap, arraycolsep);

            if (sepwidth !== 0) {
              colSep = buildCommon.makeSpan(["arraycolsep"], []);
              colSep.style.width = sepwidth + "em";
              cols.push(colSep);
            }
          }

          var col = [];

          for (r = 0; r < nr; ++r) {
            var row = body[r];
            var elem = row[c];

            if (!elem) {
              continue;
            }

            var shift = row.pos - offset;
            elem.depth = row.depth;
            elem.height = row.height;
            col.push({
              type: "elem",
              elem: elem,
              shift: shift
            });
          }

          col = buildCommon.makeVList({
            positionType: "individualShift",
            children: col
          }, options);
          col = buildCommon.makeSpan(["col-align-" + (colDescr.align || "c")], [col]);
          cols.push(col);

          if (c < nc - 1 || group.hskipBeforeAndAfter) {
            sepwidth = utils.deflt(colDescr.postgap, arraycolsep);

            if (sepwidth !== 0) {
              colSep = buildCommon.makeSpan(["arraycolsep"], []);
              colSep.style.width = sepwidth + "em";
              cols.push(colSep);
            }
          }
        }

        body = buildCommon.makeSpan(["mtable"], cols); // Add \hline(s), if any.

        if (hlines.length > 0) {
          var line = buildCommon.makeLineSpan("hline", options, 0.05);
          var dashes = buildCommon.makeLineSpan("hdashline", options, 0.05);
          var vListElems = [{
            type: "elem",
            elem: body,
            shift: 0
          }];

          while (hlines.length > 0) {
            var hline = hlines.pop();
            var lineShift = hline.pos - offset;

            if (hline.isDashed) {
              vListElems.push({
                type: "elem",
                elem: dashes,
                shift: lineShift
              });
            } else {
              vListElems.push({
                type: "elem",
                elem: line,
                shift: lineShift
              });
            }
          }

          body = buildCommon.makeVList({
            positionType: "individualShift",
            children: vListElems
          }, options);
        }

        return buildCommon.makeSpan(["mord"], [body], options);
      };

      var alignMap = {
        c: "center ",
        l: "left ",
        r: "right "
      };

      var array_mathmlBuilder = function mathmlBuilder(group, options) {
        var table = new mathMLTree.MathNode("mtable", group.body.map(function (row) {
          return new mathMLTree.MathNode("mtr", row.map(function (cell) {
            return new mathMLTree.MathNode("mtd", [buildMathML_buildGroup(cell, options)]);
          }));
        })); // Set column alignment, row spacing, column spacing, and
        // array lines by setting attributes on the table element.
        // Set the row spacing. In MathML, we specify a gap distance.
        // We do not use rowGap[] because MathML automatically increases
        // cell height with the height/depth of the element content.
        // LaTeX \arraystretch multiplies the row baseline-to-baseline distance.
        // We simulate this by adding (arraystretch - 1)em to the gap. This
        // does a reasonable job of adjusting arrays containing 1 em tall content.
        // The 0.16 and 0.09 values are found emprically. They produce an array
        // similar to LaTeX and in which content does not interfere with \hines.

        var gap = 0.16 + group.arraystretch - 1 + (group.addJot ? 0.09 : 0);
        table.setAttribute("rowspacing", gap + "em"); // MathML table lines go only between cells.
        // To place a line on an edge we'll use <menclose>, if necessary.

        var menclose = "";
        var align = "";

        if (group.cols) {
          // Find column alignment, column spacing, and  vertical lines.
          var cols = group.cols;
          var columnLines = "";
          var prevTypeWasAlign = false;
          var iStart = 0;
          var iEnd = cols.length;

          if (cols[0].type === "separator") {
            menclose += "top ";
            iStart = 1;
          }

          if (cols[cols.length - 1].type === "separator") {
            menclose += "bottom ";
            iEnd -= 1;
          }

          for (var i = iStart; i < iEnd; i++) {
            if (cols[i].type === "align") {
              align += alignMap[cols[i].align];

              if (prevTypeWasAlign) {
                columnLines += "none ";
              }

              prevTypeWasAlign = true;
            } else if (cols[i].type === "separator") {
              // MathML accepts only single lines between cells.
              // So we read only the first of consecutive separators.
              if (prevTypeWasAlign) {
                columnLines += cols[i].separator === "|" ? "solid " : "dashed ";
                prevTypeWasAlign = false;
              }
            }
          }

          table.setAttribute("columnalign", align.trim());

          if (/[sd]/.test(columnLines)) {
            table.setAttribute("columnlines", columnLines.trim());
          }
        } // Set column spacing.


        if (group.colSeparationType === "align") {
          var _cols = group.cols || [];

          var spacing = "";

          for (var _i = 1; _i < _cols.length; _i++) {
            spacing += _i % 2 ? "0em " : "1em ";
          }

          table.setAttribute("columnspacing", spacing.trim());
        } else if (group.colSeparationType === "alignat") {
          table.setAttribute("columnspacing", "0em");
        } else {
          table.setAttribute("columnspacing", "1em");
        } // Address \hline and \hdashline


        var rowLines = "";
        var hlines = group.hLinesBeforeRow;
        menclose += hlines[0].length > 0 ? "left " : "";
        menclose += hlines[hlines.length - 1].length > 0 ? "right " : "";

        for (var _i2 = 1; _i2 < hlines.length - 1; _i2++) {
          rowLines += hlines[_i2].length === 0 ? "none " // MathML accepts only a single line between rows. Read one element.
          : hlines[_i2][0] ? "dashed " : "solid ";
        }

        if (/[sd]/.test(rowLines)) {
          table.setAttribute("rowlines", rowLines.trim());
        }

        if (menclose === "") {
          return table;
        } else {
          var wrapper = new mathMLTree.MathNode("menclose", [table]);
          wrapper.setAttribute("notation", menclose.trim());
          return wrapper;
        }
      }; // Convenience function for aligned and alignedat environments.


      var array_alignedHandler = function alignedHandler(context, args) {
        var cols = [];
        var res = parseArray(context.parser, {
          cols: cols,
          addJot: true
        }, "display"); // Determining number of columns.
        // 1. If the first argument is given, we use it as a number of columns,
        //    and makes sure that each row doesn't exceed that number.
        // 2. Otherwise, just count number of columns = maximum number
        //    of cells in each row ("aligned" mode -- isAligned will be true).
        //
        // At the same time, prepend empty group {} at beginning of every second
        // cell in each row (starting with second cell) so that operators become
        // binary.  This behavior is implemented in amsmath's \start@aligned.

        var numMaths;
        var numCols = 0;
        var emptyGroup = {
          type: "ordgroup",
          mode: context.mode,
          body: []
        };
        var ordgroup = checkNodeType(args[0], "ordgroup");

        if (ordgroup) {
          var arg0 = "";

          for (var i = 0; i < ordgroup.body.length; i++) {
            var textord = assertNodeType(ordgroup.body[i], "textord");
            arg0 += textord.text;
          }

          numMaths = Number(arg0);
          numCols = numMaths * 2;
        }

        var isAligned = !numCols;
        res.body.forEach(function (row) {
          for (var _i3 = 1; _i3 < row.length; _i3 += 2) {
            // Modify ordgroup node within styling node
            var styling = assertNodeType(row[_i3], "styling");

            var _ordgroup = assertNodeType(styling.body[0], "ordgroup");

            _ordgroup.body.unshift(emptyGroup);
          }

          if (!isAligned) {
            // Case 1
            var curMaths = row.length / 2;

            if (numMaths < curMaths) {
              throw new src_ParseError("Too many math in a row: " + ("expected " + numMaths + ", but got " + curMaths), row[0]);
            }
          } else if (numCols < row.length) {
            // Case 2
            numCols = row.length;
          }
        }); // Adjusting alignment.
        // In aligned mode, we add one \qquad between columns;
        // otherwise we add nothing.

        for (var _i4 = 0; _i4 < numCols; ++_i4) {
          var align = "r";
          var pregap = 0;

          if (_i4 % 2 === 1) {
            align = "l";
          } else if (_i4 > 0 && isAligned) {
            // "aligned" mode.
            pregap = 1; // add one \quad
          }

          cols[_i4] = {
            type: "align",
            align: align,
            pregap: pregap,
            postgap: 0
          };
        }

        res.colSeparationType = isAligned ? "align" : "alignat";
        return res;
      }; // Arrays are part of LaTeX, defined in lttab.dtx so its documentation
      // is part of the source2e.pdf file of LaTeX2e source documentation.
      // {darray} is an {array} environment where cells are set in \displaystyle,
      // as defined in nccmath.sty.


      defineEnvironment({
        type: "array",
        names: ["array", "darray"],
        props: {
          numArgs: 1
        },
        handler: function handler(context, args) {
          // Since no types are specified above, the two possibilities are
          // - The argument is wrapped in {} or [], in which case Parser's
          //   parseGroup() returns an "ordgroup" wrapping some symbol node.
          // - The argument is a bare symbol node.
          var symNode = checkSymbolNodeType(args[0]);
          var colalign = symNode ? [args[0]] : assertNodeType(args[0], "ordgroup").body;
          var cols = colalign.map(function (nde) {
            var node = assertSymbolNodeType(nde);
            var ca = node.text;

            if ("lcr".indexOf(ca) !== -1) {
              return {
                type: "align",
                align: ca
              };
            } else if (ca === "|") {
              return {
                type: "separator",
                separator: "|"
              };
            } else if (ca === ":") {
              return {
                type: "separator",
                separator: ":"
              };
            }

            throw new src_ParseError("Unknown column alignment: " + ca, nde);
          });
          var res = {
            cols: cols,
            hskipBeforeAndAfter: true // \@preamble in lttab.dtx

          };
          return parseArray(context.parser, res, dCellStyle(context.envName));
        },
        htmlBuilder: array_htmlBuilder,
        mathmlBuilder: array_mathmlBuilder
      }); // The matrix environments of amsmath builds on the array environment
      // of LaTeX, which is discussed above.

      defineEnvironment({
        type: "array",
        names: ["matrix", "pmatrix", "bmatrix", "Bmatrix", "vmatrix", "Vmatrix"],
        props: {
          numArgs: 0
        },
        handler: function handler(context) {
          var delimiters = {
            "matrix": null,
            "pmatrix": ["(", ")"],
            "bmatrix": ["[", "]"],
            "Bmatrix": ["\\{", "\\}"],
            "vmatrix": ["|", "|"],
            "Vmatrix": ["\\Vert", "\\Vert"]
          }[context.envName]; // \hskip -\arraycolsep in amsmath

          var payload = {
            hskipBeforeAndAfter: false
          };
          var res = parseArray(context.parser, payload, dCellStyle(context.envName));
          return delimiters ? {
            type: "leftright",
            mode: context.mode,
            body: [res],
            left: delimiters[0],
            right: delimiters[1]
          } : res;
        },
        htmlBuilder: array_htmlBuilder,
        mathmlBuilder: array_mathmlBuilder
      }); // A cases environment (in amsmath.sty) is almost equivalent to
      // \def\arraystretch{1.2}%
      // \left\{\begin{array}{@{}l@{\quad}l@{}} … \end{array}\right.
      // {dcases} is a {cases} environment where cells are set in \displaystyle,
      // as defined in mathtools.sty.

      defineEnvironment({
        type: "array",
        names: ["cases", "dcases"],
        props: {
          numArgs: 0
        },
        handler: function handler(context) {
          var payload = {
            arraystretch: 1.2,
            cols: [{
              type: "align",
              align: "l",
              pregap: 0,
              // TODO(kevinb) get the current style.
              // For now we use the metrics for TEXT style which is what we were
              // doing before.  Before attempting to get the current style we
              // should look at TeX's behavior especially for \over and matrices.
              postgap: 1.0
              /* 1em quad */

            }, {
              type: "align",
              align: "l",
              pregap: 0,
              postgap: 0
            }]
          };
          var res = parseArray(context.parser, payload, dCellStyle(context.envName));
          return {
            type: "leftright",
            mode: context.mode,
            body: [res],
            left: "\\{",
            right: "."
          };
        },
        htmlBuilder: array_htmlBuilder,
        mathmlBuilder: array_mathmlBuilder
      }); // An aligned environment is like the align* environment
      // except it operates within math mode.
      // Note that we assume \nomallineskiplimit to be zero,
      // so that \strut@ is the same as \strut.

      defineEnvironment({
        type: "array",
        names: ["aligned"],
        props: {
          numArgs: 0
        },
        handler: array_alignedHandler,
        htmlBuilder: array_htmlBuilder,
        mathmlBuilder: array_mathmlBuilder
      }); // A gathered environment is like an array environment with one centered
      // column, but where rows are considered lines so get \jot line spacing
      // and contents are set in \displaystyle.

      defineEnvironment({
        type: "array",
        names: ["gathered"],
        props: {
          numArgs: 0
        },
        handler: function handler(context) {
          var res = {
            cols: [{
              type: "align",
              align: "c"
            }],
            addJot: true
          };
          return parseArray(context.parser, res, "display");
        },
        htmlBuilder: array_htmlBuilder,
        mathmlBuilder: array_mathmlBuilder
      }); // alignat environment is like an align environment, but one must explicitly
      // specify maximum number of columns in each row, and can adjust spacing between
      // each columns.

      defineEnvironment({
        type: "array",
        names: ["alignedat"],
        // One for numbered and for unnumbered;
        // but, KaTeX doesn't supports math numbering yet,
        // they make no difference for now.
        props: {
          numArgs: 1
        },
        handler: array_alignedHandler,
        htmlBuilder: array_htmlBuilder,
        mathmlBuilder: array_mathmlBuilder
      }); // Catch \hline outside array environment

      defineFunction({
        type: "text",
        // Doesn't matter what this is.
        names: ["\\hline", "\\hdashline"],
        props: {
          numArgs: 0,
          allowedInText: true,
          allowedInMath: true
        },
        handler: function handler(context, args) {
          throw new src_ParseError(context.funcName + " valid only within array environment");
        }
      }); // CONCATENATED MODULE: ./src/environments.js

      var environments = _environments;
      /* harmony default export */

      var src_environments = environments; // All environment definitions should be imported below
      // CONCATENATED MODULE: ./src/functions/environment.js
      // Environment delimiters. HTML/MathML rendering is defined in the corresponding
      // defineEnvironment definitions.
      // $FlowFixMe, "environment" handler returns an environment ParseNode

      defineFunction({
        type: "environment",
        names: ["\\begin", "\\end"],
        props: {
          numArgs: 1,
          argTypes: ["text"]
        },
        handler: function handler(_ref, args) {
          var parser = _ref.parser,
              funcName = _ref.funcName;
          var nameGroup = args[0];

          if (nameGroup.type !== "ordgroup") {
            throw new src_ParseError("Invalid environment name", nameGroup);
          }

          var envName = "";

          for (var i = 0; i < nameGroup.body.length; ++i) {
            envName += assertNodeType(nameGroup.body[i], "textord").text;
          }

          if (funcName === "\\begin") {
            // begin...end is similar to left...right
            if (!src_environments.hasOwnProperty(envName)) {
              throw new src_ParseError("No such environment: " + envName, nameGroup);
            } // Build the environment object. Arguments and other information will
            // be made available to the begin and end methods using properties.


            var env = src_environments[envName];

            var _parser$parseArgument = parser.parseArguments("\\begin{" + envName + "}", env),
                _args = _parser$parseArgument.args,
                optArgs = _parser$parseArgument.optArgs;

            var context = {
              mode: parser.mode,
              envName: envName,
              parser: parser
            };
            var result = env.handler(context, _args, optArgs);
            parser.expect("\\end", false);
            var endNameToken = parser.nextToken;
            var end = assertNodeType(parser.parseFunction(), "environment");

            if (end.name !== envName) {
              throw new src_ParseError("Mismatch: \\begin{" + envName + "} matched by \\end{" + end.name + "}", endNameToken);
            }

            return result;
          }

          return {
            type: "environment",
            mode: parser.mode,
            name: envName,
            nameGroup: nameGroup
          };
        }
      }); // CONCATENATED MODULE: ./src/functions/mclass.js

      var mclass_makeSpan = buildCommon.makeSpan;

      function mclass_htmlBuilder(group, options) {
        var elements = buildHTML_buildExpression(group.body, options, true);
        return mclass_makeSpan([group.mclass], elements, options);
      }

      function mclass_mathmlBuilder(group, options) {
        var inner = buildMathML_buildExpression(group.body, options);
        return mathMLTree.newDocumentFragment(inner);
      } // Math class commands except \mathop


      defineFunction({
        type: "mclass",
        names: ["\\mathord", "\\mathbin", "\\mathrel", "\\mathopen", "\\mathclose", "\\mathpunct", "\\mathinner"],
        props: {
          numArgs: 1
        },
        handler: function handler(_ref, args) {
          var parser = _ref.parser,
              funcName = _ref.funcName;
          var body = args[0];
          return {
            type: "mclass",
            mode: parser.mode,
            mclass: "m" + funcName.substr(5),
            body: defineFunction_ordargument(body)
          };
        },
        htmlBuilder: mclass_htmlBuilder,
        mathmlBuilder: mclass_mathmlBuilder
      });

      var binrelClass = function binrelClass(arg) {
        // \binrel@ spacing varies with (bin|rel|ord) of the atom in the argument.
        // (by rendering separately and with {}s before and after, and measuring
        // the change in spacing).  We'll do roughly the same by detecting the
        // atom type directly.
        var atom = arg.type === "ordgroup" && arg.body.length ? arg.body[0] : arg;

        if (atom.type === "atom" && (atom.family === "bin" || atom.family === "rel")) {
          return "m" + atom.family;
        } else {
          return "mord";
        }
      }; // \@binrel{x}{y} renders like y but as mbin/mrel/mord if x is mbin/mrel/mord.
      // This is equivalent to \binrel@{x}\binrel@@{y} in AMSTeX.


      defineFunction({
        type: "mclass",
        names: ["\\@binrel"],
        props: {
          numArgs: 2
        },
        handler: function handler(_ref2, args) {
          var parser = _ref2.parser;
          return {
            type: "mclass",
            mode: parser.mode,
            mclass: binrelClass(args[0]),
            body: [args[1]]
          };
        }
      }); // Build a relation or stacked op by placing one symbol on top of another

      defineFunction({
        type: "mclass",
        names: ["\\stackrel", "\\overset", "\\underset"],
        props: {
          numArgs: 2
        },
        handler: function handler(_ref3, args) {
          var parser = _ref3.parser,
              funcName = _ref3.funcName;
          var baseArg = args[1];
          var shiftedArg = args[0];
          var mclass;

          if (funcName !== "\\stackrel") {
            // LaTeX applies \binrel spacing to \overset and \underset.
            mclass = binrelClass(baseArg);
          } else {
            mclass = "mrel"; // for \stackrel
          }

          var baseOp = {
            type: "op",
            mode: baseArg.mode,
            limits: true,
            alwaysHandleSupSub: true,
            parentIsSupSub: false,
            symbol: false,
            suppressBaseShift: funcName !== "\\stackrel",
            body: defineFunction_ordargument(baseArg)
          };
          var supsub = {
            type: "supsub",
            mode: shiftedArg.mode,
            base: baseOp,
            sup: funcName === "\\underset" ? null : shiftedArg,
            sub: funcName === "\\underset" ? shiftedArg : null
          };
          return {
            type: "mclass",
            mode: parser.mode,
            mclass: mclass,
            body: [supsub]
          };
        },
        htmlBuilder: mclass_htmlBuilder,
        mathmlBuilder: mclass_mathmlBuilder
      }); // CONCATENATED MODULE: ./src/functions/font.js
      // TODO(kevinb): implement \\sl and \\sc

      var font_htmlBuilder = function htmlBuilder(group, options) {
        var font = group.font;
        var newOptions = options.withFont(font);
        return buildHTML_buildGroup(group.body, newOptions);
      };

      var font_mathmlBuilder = function mathmlBuilder(group, options) {
        var font = group.font;
        var newOptions = options.withFont(font);
        return buildMathML_buildGroup(group.body, newOptions);
      };

      var fontAliases = {
        "\\Bbb": "\\mathbb",
        "\\bold": "\\mathbf",
        "\\frak": "\\mathfrak",
        "\\bm": "\\boldsymbol"
      };
      defineFunction({
        type: "font",
        names: [// styles, except \boldsymbol defined below
        "\\mathrm", "\\mathit", "\\mathbf", "\\mathnormal", // families
        "\\mathbb", "\\mathcal", "\\mathfrak", "\\mathscr", "\\mathsf", "\\mathtt", // aliases, except \bm defined below
        "\\Bbb", "\\bold", "\\frak"],
        props: {
          numArgs: 1,
          greediness: 2
        },
        handler: function handler(_ref, args) {
          var parser = _ref.parser,
              funcName = _ref.funcName;
          var body = args[0];
          var func = funcName;

          if (func in fontAliases) {
            func = fontAliases[func];
          }

          return {
            type: "font",
            mode: parser.mode,
            font: func.slice(1),
            body: body
          };
        },
        htmlBuilder: font_htmlBuilder,
        mathmlBuilder: font_mathmlBuilder
      });
      defineFunction({
        type: "mclass",
        names: ["\\boldsymbol", "\\bm"],
        props: {
          numArgs: 1,
          greediness: 2
        },
        handler: function handler(_ref2, args) {
          var parser = _ref2.parser;
          var body = args[0]; // amsbsy.sty's \boldsymbol uses \binrel spacing to inherit the
          // argument's bin|rel|ord status

          return {
            type: "mclass",
            mode: parser.mode,
            mclass: binrelClass(body),
            body: [{
              type: "font",
              mode: parser.mode,
              font: "boldsymbol",
              body: body
            }]
          };
        }
      }); // Old font changing functions

      defineFunction({
        type: "font",
        names: ["\\rm", "\\sf", "\\tt", "\\bf", "\\it"],
        props: {
          numArgs: 0,
          allowedInText: true
        },
        handler: function handler(_ref3, args) {
          var parser = _ref3.parser,
              funcName = _ref3.funcName,
              breakOnTokenText = _ref3.breakOnTokenText;
          var mode = parser.mode;
          var body = parser.parseExpression(true, breakOnTokenText);
          var style = "math" + funcName.slice(1);
          return {
            type: "font",
            mode: mode,
            font: style,
            body: {
              type: "ordgroup",
              mode: parser.mode,
              body: body
            }
          };
        },
        htmlBuilder: font_htmlBuilder,
        mathmlBuilder: font_mathmlBuilder
      }); // CONCATENATED MODULE: ./src/functions/genfrac.js

      var genfrac_adjustStyle = function adjustStyle(size, originalStyle) {
        // Figure out what style this fraction should be in based on the
        // function used
        var style = originalStyle;

        if (size === "display") {
          // Get display style as a default.
          // If incoming style is sub/sup, use style.text() to get correct size.
          style = style.id >= src_Style.SCRIPT.id ? style.text() : src_Style.DISPLAY;
        } else if (size === "text" && style.size === src_Style.DISPLAY.size) {
          // We're in a \tfrac but incoming style is displaystyle, so:
          style = src_Style.TEXT;
        } else if (size === "script") {
          style = src_Style.SCRIPT;
        } else if (size === "scriptscript") {
          style = src_Style.SCRIPTSCRIPT;
        }

        return style;
      };

      var genfrac_htmlBuilder = function htmlBuilder(group, options) {
        // Fractions are handled in the TeXbook on pages 444-445, rules 15(a-e).
        var style = genfrac_adjustStyle(group.size, options.style);
        var nstyle = style.fracNum();
        var dstyle = style.fracDen();
        var newOptions;
        newOptions = options.havingStyle(nstyle);
        var numerm = buildHTML_buildGroup(group.numer, newOptions, options);

        if (group.continued) {
          // \cfrac inserts a \strut into the numerator.
          // Get \strut dimensions from TeXbook page 353.
          var hStrut = 8.5 / options.fontMetrics().ptPerEm;
          var dStrut = 3.5 / options.fontMetrics().ptPerEm;
          numerm.height = numerm.height < hStrut ? hStrut : numerm.height;
          numerm.depth = numerm.depth < dStrut ? dStrut : numerm.depth;
        }

        newOptions = options.havingStyle(dstyle);
        var denomm = buildHTML_buildGroup(group.denom, newOptions, options);
        var rule;
        var ruleWidth;
        var ruleSpacing;

        if (group.hasBarLine) {
          if (group.barSize) {
            ruleWidth = units_calculateSize(group.barSize, options);
            rule = buildCommon.makeLineSpan("frac-line", options, ruleWidth);
          } else {
            rule = buildCommon.makeLineSpan("frac-line", options);
          }

          ruleWidth = rule.height;
          ruleSpacing = rule.height;
        } else {
          rule = null;
          ruleWidth = 0;
          ruleSpacing = options.fontMetrics().defaultRuleThickness;
        } // Rule 15b


        var numShift;
        var clearance;
        var denomShift;

        if (style.size === src_Style.DISPLAY.size || group.size === "display") {
          numShift = options.fontMetrics().num1;

          if (ruleWidth > 0) {
            clearance = 3 * ruleSpacing;
          } else {
            clearance = 7 * ruleSpacing;
          }

          denomShift = options.fontMetrics().denom1;
        } else {
          if (ruleWidth > 0) {
            numShift = options.fontMetrics().num2;
            clearance = ruleSpacing;
          } else {
            numShift = options.fontMetrics().num3;
            clearance = 3 * ruleSpacing;
          }

          denomShift = options.fontMetrics().denom2;
        }

        var frac;

        if (!rule) {
          // Rule 15c
          var candidateClearance = numShift - numerm.depth - (denomm.height - denomShift);

          if (candidateClearance < clearance) {
            numShift += 0.5 * (clearance - candidateClearance);
            denomShift += 0.5 * (clearance - candidateClearance);
          }

          frac = buildCommon.makeVList({
            positionType: "individualShift",
            children: [{
              type: "elem",
              elem: denomm,
              shift: denomShift
            }, {
              type: "elem",
              elem: numerm,
              shift: -numShift
            }]
          }, options);
        } else {
          // Rule 15d
          var axisHeight = options.fontMetrics().axisHeight;

          if (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth) < clearance) {
            numShift += clearance - (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth));
          }

          if (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift) < clearance) {
            denomShift += clearance - (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift));
          }

          var midShift = -(axisHeight - 0.5 * ruleWidth);
          frac = buildCommon.makeVList({
            positionType: "individualShift",
            children: [{
              type: "elem",
              elem: denomm,
              shift: denomShift
            }, {
              type: "elem",
              elem: rule,
              shift: midShift
            }, {
              type: "elem",
              elem: numerm,
              shift: -numShift
            }]
          }, options);
        } // Since we manually change the style sometimes (with \dfrac or \tfrac),
        // account for the possible size change here.


        newOptions = options.havingStyle(style);
        frac.height *= newOptions.sizeMultiplier / options.sizeMultiplier;
        frac.depth *= newOptions.sizeMultiplier / options.sizeMultiplier; // Rule 15e

        var delimSize;

        if (style.size === src_Style.DISPLAY.size) {
          delimSize = options.fontMetrics().delim1;
        } else {
          delimSize = options.fontMetrics().delim2;
        }

        var leftDelim;
        var rightDelim;

        if (group.leftDelim == null) {
          leftDelim = makeNullDelimiter(options, ["mopen"]);
        } else {
          leftDelim = delimiter.customSizedDelim(group.leftDelim, delimSize, true, options.havingStyle(style), group.mode, ["mopen"]);
        }

        if (group.continued) {
          rightDelim = buildCommon.makeSpan([]); // zero width for \cfrac
        } else if (group.rightDelim == null) {
          rightDelim = makeNullDelimiter(options, ["mclose"]);
        } else {
          rightDelim = delimiter.customSizedDelim(group.rightDelim, delimSize, true, options.havingStyle(style), group.mode, ["mclose"]);
        }

        return buildCommon.makeSpan(["mord"].concat(newOptions.sizingClasses(options)), [leftDelim, buildCommon.makeSpan(["mfrac"], [frac]), rightDelim], options);
      };

      var genfrac_mathmlBuilder = function mathmlBuilder(group, options) {
        var node = new mathMLTree.MathNode("mfrac", [buildMathML_buildGroup(group.numer, options), buildMathML_buildGroup(group.denom, options)]);

        if (!group.hasBarLine) {
          node.setAttribute("linethickness", "0px");
        } else if (group.barSize) {
          var ruleWidth = units_calculateSize(group.barSize, options);
          node.setAttribute("linethickness", ruleWidth + "em");
        }

        var style = genfrac_adjustStyle(group.size, options.style);

        if (style.size !== options.style.size) {
          node = new mathMLTree.MathNode("mstyle", [node]);
          var isDisplay = style.size === src_Style.DISPLAY.size ? "true" : "false";
          node.setAttribute("displaystyle", isDisplay);
          node.setAttribute("scriptlevel", "0");
        }

        if (group.leftDelim != null || group.rightDelim != null) {
          var withDelims = [];

          if (group.leftDelim != null) {
            var leftOp = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(group.leftDelim.replace("\\", ""))]);
            leftOp.setAttribute("fence", "true");
            withDelims.push(leftOp);
          }

          withDelims.push(node);

          if (group.rightDelim != null) {
            var rightOp = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(group.rightDelim.replace("\\", ""))]);
            rightOp.setAttribute("fence", "true");
            withDelims.push(rightOp);
          }

          return buildMathML_makeRow(withDelims);
        }

        return node;
      };

      defineFunction({
        type: "genfrac",
        names: ["\\cfrac", "\\dfrac", "\\frac", "\\tfrac", "\\dbinom", "\\binom", "\\tbinom", "\\\\atopfrac", // can’t be entered directly
        "\\\\bracefrac", "\\\\brackfrac"],
        props: {
          numArgs: 2,
          greediness: 2
        },
        handler: function handler(_ref, args) {
          var parser = _ref.parser,
              funcName = _ref.funcName;
          var numer = args[0];
          var denom = args[1];
          var hasBarLine;
          var leftDelim = null;
          var rightDelim = null;
          var size = "auto";

          switch (funcName) {
            case "\\cfrac":
            case "\\dfrac":
            case "\\frac":
            case "\\tfrac":
              hasBarLine = true;
              break;

            case "\\\\atopfrac":
              hasBarLine = false;
              break;

            case "\\dbinom":
            case "\\binom":
            case "\\tbinom":
              hasBarLine = false;
              leftDelim = "(";
              rightDelim = ")";
              break;

            case "\\\\bracefrac":
              hasBarLine = false;
              leftDelim = "\\{";
              rightDelim = "\\}";
              break;

            case "\\\\brackfrac":
              hasBarLine = false;
              leftDelim = "[";
              rightDelim = "]";
              break;

            default:
              throw new Error("Unrecognized genfrac command");
          }

          switch (funcName) {
            case "\\cfrac":
            case "\\dfrac":
            case "\\dbinom":
              size = "display";
              break;

            case "\\tfrac":
            case "\\tbinom":
              size = "text";
              break;
          }

          return {
            type: "genfrac",
            mode: parser.mode,
            continued: funcName === "\\cfrac",
            numer: numer,
            denom: denom,
            hasBarLine: hasBarLine,
            leftDelim: leftDelim,
            rightDelim: rightDelim,
            size: size,
            barSize: null
          };
        },
        htmlBuilder: genfrac_htmlBuilder,
        mathmlBuilder: genfrac_mathmlBuilder
      }); // Infix generalized fractions -- these are not rendered directly, but replaced
      // immediately by one of the variants above.

      defineFunction({
        type: "infix",
        names: ["\\over", "\\choose", "\\atop", "\\brace", "\\brack"],
        props: {
          numArgs: 0,
          infix: true
        },
        handler: function handler(_ref2) {
          var parser = _ref2.parser,
              funcName = _ref2.funcName,
              token = _ref2.token;
          var replaceWith;

          switch (funcName) {
            case "\\over":
              replaceWith = "\\frac";
              break;

            case "\\choose":
              replaceWith = "\\binom";
              break;

            case "\\atop":
              replaceWith = "\\\\atopfrac";
              break;

            case "\\brace":
              replaceWith = "\\\\bracefrac";
              break;

            case "\\brack":
              replaceWith = "\\\\brackfrac";
              break;

            default:
              throw new Error("Unrecognized infix genfrac command");
          }

          return {
            type: "infix",
            mode: parser.mode,
            replaceWith: replaceWith,
            token: token
          };
        }
      });
      var stylArray = ["display", "text", "script", "scriptscript"];

      var delimFromValue = function delimFromValue(delimString) {
        var delim = null;

        if (delimString.length > 0) {
          delim = delimString;
          delim = delim === "." ? null : delim;
        }

        return delim;
      };

      defineFunction({
        type: "genfrac",
        names: ["\\genfrac"],
        props: {
          numArgs: 6,
          greediness: 6,
          argTypes: ["math", "math", "size", "text", "math", "math"]
        },
        handler: function handler(_ref3, args) {
          var parser = _ref3.parser;
          var numer = args[4];
          var denom = args[5]; // Look into the parse nodes to get the desired delimiters.

          var leftNode = checkNodeType(args[0], "atom");

          if (leftNode) {
            leftNode = assertAtomFamily(args[0], "open");
          }

          var leftDelim = leftNode ? delimFromValue(leftNode.text) : null;
          var rightNode = checkNodeType(args[1], "atom");

          if (rightNode) {
            rightNode = assertAtomFamily(args[1], "close");
          }

          var rightDelim = rightNode ? delimFromValue(rightNode.text) : null;
          var barNode = assertNodeType(args[2], "size");
          var hasBarLine;
          var barSize = null;

          if (barNode.isBlank) {
            // \genfrac acts differently than \above.
            // \genfrac treats an empty size group as a signal to use a
            // standard bar size. \above would see size = 0 and omit the bar.
            hasBarLine = true;
          } else {
            barSize = barNode.value;
            hasBarLine = barSize.number > 0;
          } // Find out if we want displaystyle, textstyle, etc.


          var size = "auto";
          var styl = checkNodeType(args[3], "ordgroup");

          if (styl) {
            if (styl.body.length > 0) {
              var textOrd = assertNodeType(styl.body[0], "textord");
              size = stylArray[Number(textOrd.text)];
            }
          } else {
            styl = assertNodeType(args[3], "textord");
            size = stylArray[Number(styl.text)];
          }

          return {
            type: "genfrac",
            mode: parser.mode,
            numer: numer,
            denom: denom,
            continued: false,
            hasBarLine: hasBarLine,
            barSize: barSize,
            leftDelim: leftDelim,
            rightDelim: rightDelim,
            size: size
          };
        },
        htmlBuilder: genfrac_htmlBuilder,
        mathmlBuilder: genfrac_mathmlBuilder
      }); // \above is an infix fraction that also defines a fraction bar size.

      defineFunction({
        type: "infix",
        names: ["\\above"],
        props: {
          numArgs: 1,
          argTypes: ["size"],
          infix: true
        },
        handler: function handler(_ref4, args) {
          var parser = _ref4.parser,
              funcName = _ref4.funcName,
              token = _ref4.token;
          return {
            type: "infix",
            mode: parser.mode,
            replaceWith: "\\\\abovefrac",
            size: assertNodeType(args[0], "size").value,
            token: token
          };
        }
      });
      defineFunction({
        type: "genfrac",
        names: ["\\\\abovefrac"],
        props: {
          numArgs: 3,
          argTypes: ["math", "size", "math"]
        },
        handler: function handler(_ref5, args) {
          var parser = _ref5.parser,
              funcName = _ref5.funcName;
          var numer = args[0];
          var barSize = assert(assertNodeType(args[1], "infix").size);
          var denom = args[2];
          var hasBarLine = barSize.number > 0;
          return {
            type: "genfrac",
            mode: parser.mode,
            numer: numer,
            denom: denom,
            continued: false,
            hasBarLine: hasBarLine,
            barSize: barSize,
            leftDelim: null,
            rightDelim: null,
            size: "auto"
          };
        },
        htmlBuilder: genfrac_htmlBuilder,
        mathmlBuilder: genfrac_mathmlBuilder
      }); // CONCATENATED MODULE: ./src/functions/horizBrace.js
      // NOTE: Unlike most `htmlBuilder`s, this one handles not only "horizBrace", but

      var horizBrace_htmlBuilder = function htmlBuilder(grp, options) {
        var style = options.style; // Pull out the `ParseNode<"horizBrace">` if `grp` is a "supsub" node.

        var supSubGroup;
        var group;
        var supSub = checkNodeType(grp, "supsub");

        if (supSub) {
          // Ref: LaTeX source2e: }}}}\limits}
          // i.e. LaTeX treats the brace similar to an op and passes it
          // with \limits, so we need to assign supsub style.
          supSubGroup = supSub.sup ? buildHTML_buildGroup(supSub.sup, options.havingStyle(style.sup()), options) : buildHTML_buildGroup(supSub.sub, options.havingStyle(style.sub()), options);
          group = assertNodeType(supSub.base, "horizBrace");
        } else {
          group = assertNodeType(grp, "horizBrace");
        } // Build the base group


        var body = buildHTML_buildGroup(group.base, options.havingBaseStyle(src_Style.DISPLAY)); // Create the stretchy element

        var braceBody = stretchy.svgSpan(group, options); // Generate the vlist, with the appropriate kerns        ┏━━━━━━━━┓
        // This first vlist contains the content and the brace:   equation

        var vlist;

        if (group.isOver) {
          vlist = buildCommon.makeVList({
            positionType: "firstBaseline",
            children: [{
              type: "elem",
              elem: body
            }, {
              type: "kern",
              size: 0.1
            }, {
              type: "elem",
              elem: braceBody
            }]
          }, options); // $FlowFixMe: Replace this with passing "svg-align" into makeVList.

          vlist.children[0].children[0].children[1].classes.push("svg-align");
        } else {
          vlist = buildCommon.makeVList({
            positionType: "bottom",
            positionData: body.depth + 0.1 + braceBody.height,
            children: [{
              type: "elem",
              elem: braceBody
            }, {
              type: "kern",
              size: 0.1
            }, {
              type: "elem",
              elem: body
            }]
          }, options); // $FlowFixMe: Replace this with passing "svg-align" into makeVList.

          vlist.children[0].children[0].children[0].classes.push("svg-align");
        }

        if (supSubGroup) {
          // To write the supsub, wrap the first vlist in another vlist:
          // They can't all go in the same vlist, because the note might be
          // wider than the equation. We want the equation to control the
          // brace width.
          //      note          long note           long note
          //   ┏━━━━━━━━┓   or    ┏━━━┓     not    ┏━━━━━━━━━┓
          //    equation           eqn                 eqn
          var vSpan = buildCommon.makeSpan(["mord", group.isOver ? "mover" : "munder"], [vlist], options);

          if (group.isOver) {
            vlist = buildCommon.makeVList({
              positionType: "firstBaseline",
              children: [{
                type: "elem",
                elem: vSpan
              }, {
                type: "kern",
                size: 0.2
              }, {
                type: "elem",
                elem: supSubGroup
              }]
            }, options);
          } else {
            vlist = buildCommon.makeVList({
              positionType: "bottom",
              positionData: vSpan.depth + 0.2 + supSubGroup.height + supSubGroup.depth,
              children: [{
                type: "elem",
                elem: supSubGroup
              }, {
                type: "kern",
                size: 0.2
              }, {
                type: "elem",
                elem: vSpan
              }]
            }, options);
          }
        }

        return buildCommon.makeSpan(["mord", group.isOver ? "mover" : "munder"], [vlist], options);
      };

      var horizBrace_mathmlBuilder = function mathmlBuilder(group, options) {
        var accentNode = stretchy.mathMLnode(group.label);
        return new mathMLTree.MathNode(group.isOver ? "mover" : "munder", [buildMathML_buildGroup(group.base, options), accentNode]);
      }; // Horizontal stretchy braces


      defineFunction({
        type: "horizBrace",
        names: ["\\overbrace", "\\underbrace"],
        props: {
          numArgs: 1
        },
        handler: function handler(_ref, args) {
          var parser = _ref.parser,
              funcName = _ref.funcName;
          return {
            type: "horizBrace",
            mode: parser.mode,
            label: funcName,
            isOver: /^\\over/.test(funcName),
            base: args[0]
          };
        },
        htmlBuilder: horizBrace_htmlBuilder,
        mathmlBuilder: horizBrace_mathmlBuilder
      }); // CONCATENATED MODULE: ./src/functions/href.js

      defineFunction({
        type: "href",
        names: ["\\href"],
        props: {
          numArgs: 2,
          argTypes: ["url", "original"],
          allowedInText: true
        },
        handler: function handler(_ref, args) {
          var parser = _ref.parser;
          var body = args[1];
          var href = assertNodeType(args[0], "url").url;
          return {
            type: "href",
            mode: parser.mode,
            href: href,
            body: defineFunction_ordargument(body)
          };
        },
        htmlBuilder: function htmlBuilder(group, options) {
          var elements = buildHTML_buildExpression(group.body, options, false);
          return buildCommon.makeAnchor(group.href, [], elements, options);
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          var math = buildExpressionRow(group.body, options);

          if (!(math instanceof mathMLTree_MathNode)) {
            math = new mathMLTree_MathNode("mrow", [math]);
          }

          math.setAttribute("href", group.href);
          return math;
        }
      });
      defineFunction({
        type: "href",
        names: ["\\url"],
        props: {
          numArgs: 1,
          argTypes: ["url"],
          allowedInText: true
        },
        handler: function handler(_ref2, args) {
          var parser = _ref2.parser;
          var href = assertNodeType(args[0], "url").url;
          var chars = [];

          for (var i = 0; i < href.length; i++) {
            var c = href[i];

            if (c === "~") {
              c = "\\textasciitilde";
            }

            chars.push({
              type: "textord",
              mode: "text",
              text: c
            });
          }

          var body = {
            type: "text",
            mode: parser.mode,
            font: "\\texttt",
            body: chars
          };
          return {
            type: "href",
            mode: parser.mode,
            href: href,
            body: defineFunction_ordargument(body)
          };
        }
      }); // CONCATENATED MODULE: ./src/functions/htmlmathml.js

      defineFunction({
        type: "htmlmathml",
        names: ["\\html@mathml"],
        props: {
          numArgs: 2,
          allowedInText: true
        },
        handler: function handler(_ref, args) {
          var parser = _ref.parser;
          return {
            type: "htmlmathml",
            mode: parser.mode,
            html: defineFunction_ordargument(args[0]),
            mathml: defineFunction_ordargument(args[1])
          };
        },
        htmlBuilder: function htmlBuilder(group, options) {
          var elements = buildHTML_buildExpression(group.html, options, false);
          return buildCommon.makeFragment(elements);
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          return buildExpressionRow(group.mathml, options);
        }
      }); // CONCATENATED MODULE: ./src/functions/kern.js
      // Horizontal spacing commands
      // TODO: \hskip and \mskip should support plus and minus in lengths

      defineFunction({
        type: "kern",
        names: ["\\kern", "\\mkern", "\\hskip", "\\mskip"],
        props: {
          numArgs: 1,
          argTypes: ["size"],
          allowedInText: true
        },
        handler: function handler(_ref, args) {
          var parser = _ref.parser,
              funcName = _ref.funcName;
          var size = assertNodeType(args[0], "size");

          if (parser.settings.strict) {
            var mathFunction = funcName[1] === 'm'; // \mkern, \mskip

            var muUnit = size.value.unit === 'mu';

            if (mathFunction) {
              if (!muUnit) {
                parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " supports only mu units, " + ("not " + size.value.unit + " units"));
              }

              if (parser.mode !== "math") {
                parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " works only in math mode");
              }
            } else {
              // !mathFunction
              if (muUnit) {
                parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " doesn't support mu units");
              }
            }
          }

          return {
            type: "kern",
            mode: parser.mode,
            dimension: size.value
          };
        },
        htmlBuilder: function htmlBuilder(group, options) {
          return buildCommon.makeGlue(group.dimension, options);
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          var dimension = units_calculateSize(group.dimension, options);
          return new mathMLTree.SpaceNode(dimension);
        }
      }); // CONCATENATED MODULE: ./src/functions/lap.js
      // Horizontal overlap functions

      defineFunction({
        type: "lap",
        names: ["\\mathllap", "\\mathrlap", "\\mathclap"],
        props: {
          numArgs: 1,
          allowedInText: true
        },
        handler: function handler(_ref, args) {
          var parser = _ref.parser,
              funcName = _ref.funcName;
          var body = args[0];
          return {
            type: "lap",
            mode: parser.mode,
            alignment: funcName.slice(5),
            body: body
          };
        },
        htmlBuilder: function htmlBuilder(group, options) {
          // mathllap, mathrlap, mathclap
          var inner;

          if (group.alignment === "clap") {
            // ref: https://www.math.lsu.edu/~aperlis/publications/mathclap/
            inner = buildCommon.makeSpan([], [buildHTML_buildGroup(group.body, options)]); // wrap, since CSS will center a .clap > .inner > span

            inner = buildCommon.makeSpan(["inner"], [inner], options);
          } else {
            inner = buildCommon.makeSpan(["inner"], [buildHTML_buildGroup(group.body, options)]);
          }

          var fix = buildCommon.makeSpan(["fix"], []);
          var node = buildCommon.makeSpan([group.alignment], [inner, fix], options); // At this point, we have correctly set horizontal alignment of the
          // two items involved in the lap.
          // Next, use a strut to set the height of the HTML bounding box.
          // Otherwise, a tall argument may be misplaced.

          var strut = buildCommon.makeSpan(["strut"]);
          strut.style.height = node.height + node.depth + "em";
          strut.style.verticalAlign = -node.depth + "em";
          node.children.unshift(strut); // Next, prevent vertical misplacement when next to something tall.

          node = buildCommon.makeVList({
            positionType: "firstBaseline",
            children: [{
              type: "elem",
              elem: node
            }]
          }, options); // Get the horizontal spacing correct relative to adjacent items.

          return buildCommon.makeSpan(["mord"], [node], options);
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          // mathllap, mathrlap, mathclap
          var node = new mathMLTree.MathNode("mpadded", [buildMathML_buildGroup(group.body, options)]);

          if (group.alignment !== "rlap") {
            var offset = group.alignment === "llap" ? "-1" : "-0.5";
            node.setAttribute("lspace", offset + "width");
          }

          node.setAttribute("width", "0px");
          return node;
        }
      }); // CONCATENATED MODULE: ./src/functions/math.js
      // Switching from text mode back to math mode

      defineFunction({
        type: "styling",
        names: ["\\(", "$"],
        props: {
          numArgs: 0,
          allowedInText: true,
          allowedInMath: false,
          consumeMode: "math"
        },
        handler: function handler(_ref, args) {
          var funcName = _ref.funcName,
              parser = _ref.parser;
          var outerMode = parser.mode;
          parser.switchMode("math");
          var close = funcName === "\\(" ? "\\)" : "$";
          var body = parser.parseExpression(false, close); // We can't expand the next symbol after the closing $ until after
          // switching modes back.  So don't consume within expect.

          parser.expect(close, false);
          parser.switchMode(outerMode);
          parser.consume();
          return {
            type: "styling",
            mode: parser.mode,
            style: "text",
            body: body
          };
        }
      }); // Check for extra closing math delimiters

      defineFunction({
        type: "text",
        // Doesn't matter what this is.
        names: ["\\)", "\\]"],
        props: {
          numArgs: 0,
          allowedInText: true,
          allowedInMath: false
        },
        handler: function handler(context, args) {
          throw new src_ParseError("Mismatched " + context.funcName);
        }
      }); // CONCATENATED MODULE: ./src/functions/mathchoice.js

      var mathchoice_chooseMathStyle = function chooseMathStyle(group, options) {
        switch (options.style.size) {
          case src_Style.DISPLAY.size:
            return group.display;

          case src_Style.TEXT.size:
            return group.text;

          case src_Style.SCRIPT.size:
            return group.script;

          case src_Style.SCRIPTSCRIPT.size:
            return group.scriptscript;

          default:
            return group.text;
        }
      };

      defineFunction({
        type: "mathchoice",
        names: ["\\mathchoice"],
        props: {
          numArgs: 4
        },
        handler: function handler(_ref, args) {
          var parser = _ref.parser;
          return {
            type: "mathchoice",
            mode: parser.mode,
            display: defineFunction_ordargument(args[0]),
            text: defineFunction_ordargument(args[1]),
            script: defineFunction_ordargument(args[2]),
            scriptscript: defineFunction_ordargument(args[3])
          };
        },
        htmlBuilder: function htmlBuilder(group, options) {
          var body = mathchoice_chooseMathStyle(group, options);
          var elements = buildHTML_buildExpression(body, options, false);
          return buildCommon.makeFragment(elements);
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          var body = mathchoice_chooseMathStyle(group, options);
          return buildExpressionRow(body, options);
        }
      }); // CONCATENATED MODULE: ./src/functions/op.js
      // Limits, symbols
      // Most operators have a large successor symbol, but these don't.

      var noSuccessor = ["\\smallint"]; // NOTE: Unlike most `htmlBuilder`s, this one handles not only "op", but also
      // "supsub" since some of them (like \int) can affect super/subscripting.

      var op_htmlBuilder = function htmlBuilder(grp, options) {
        // Operators are handled in the TeXbook pg. 443-444, rule 13(a).
        var supGroup;
        var subGroup;
        var hasLimits = false;
        var group;
        var supSub = checkNodeType(grp, "supsub");

        if (supSub) {
          // If we have limits, supsub will pass us its group to handle. Pull
          // out the superscript and subscript and set the group to the op in
          // its base.
          supGroup = supSub.sup;
          subGroup = supSub.sub;
          group = assertNodeType(supSub.base, "op");
          hasLimits = true;
        } else {
          group = assertNodeType(grp, "op");
        }

        var style = options.style;
        var large = false;

        if (style.size === src_Style.DISPLAY.size && group.symbol && !utils.contains(noSuccessor, group.name)) {
          // Most symbol operators get larger in displaystyle (rule 13)
          large = true;
        }

        var base;

        if (group.symbol) {
          // If this is a symbol, create the symbol.
          var fontName = large ? "Size2-Regular" : "Size1-Regular";
          var stash = "";

          if (group.name === "\\oiint" || group.name === "\\oiiint") {
            // No font glyphs yet, so use a glyph w/o the oval.
            // TODO: When font glyphs are available, delete this code.
            stash = group.name.substr(1); // $FlowFixMe

            group.name = stash === "oiint" ? "\\iint" : "\\iiint";
          }

          base = buildCommon.makeSymbol(group.name, fontName, "math", options, ["mop", "op-symbol", large ? "large-op" : "small-op"]);

          if (stash.length > 0) {
            // We're in \oiint or \oiiint. Overlay the oval.
            // TODO: When font glyphs are available, delete this code.
            var italic = base.italic;
            var oval = buildCommon.staticSvg(stash + "Size" + (large ? "2" : "1"), options);
            base = buildCommon.makeVList({
              positionType: "individualShift",
              children: [{
                type: "elem",
                elem: base,
                shift: 0
              }, {
                type: "elem",
                elem: oval,
                shift: large ? 0.08 : 0
              }]
            }, options); // $FlowFixMe

            group.name = "\\" + stash;
            base.classes.unshift("mop"); // $FlowFixMe

            base.italic = italic;
          }
        } else if (group.body) {
          // If this is a list, compose that list.
          var inner = buildHTML_buildExpression(group.body, options, true);

          if (inner.length === 1 && inner[0] instanceof domTree_SymbolNode) {
            base = inner[0];
            base.classes[0] = "mop"; // replace old mclass
          } else {
            base = buildCommon.makeSpan(["mop"], buildCommon.tryCombineChars(inner), options);
          }
        } else {
          // Otherwise, this is a text operator. Build the text from the
          // operator's name.
          // TODO(emily): Add a space in the middle of some of these
          // operators, like \limsup
          var output = [];

          for (var i = 1; i < group.name.length; i++) {
            output.push(buildCommon.mathsym(group.name[i], group.mode));
          }

          base = buildCommon.makeSpan(["mop"], output, options);
        } // If content of op is a single symbol, shift it vertically.


        var baseShift = 0;
        var slant = 0;

        if ((base instanceof domTree_SymbolNode || group.name === "\\oiint" || group.name === "\\oiiint") && !group.suppressBaseShift) {
          // We suppress the shift of the base of \overset and \underset. Otherwise,
          // shift the symbol so its center lies on the axis (rule 13). It
          // appears that our fonts have the centers of the symbols already
          // almost on the axis, so these numbers are very small. Note we
          // don't actually apply this here, but instead it is used either in
          // the vlist creation or separately when there are no limits.
          baseShift = (base.height - base.depth) / 2 - options.fontMetrics().axisHeight; // The slant of the symbol is just its italic correction.
          // $FlowFixMe

          slant = base.italic;
        }

        if (hasLimits) {
          // IE 8 clips \int if it is in a display: inline-block. We wrap it
          // in a new span so it is an inline, and works.
          base = buildCommon.makeSpan([], [base]);
          var sub;
          var sup; // We manually have to handle the superscripts and subscripts. This,
          // aside from the kern calculations, is copied from supsub.

          if (supGroup) {
            var elem = buildHTML_buildGroup(supGroup, options.havingStyle(style.sup()), options);
            sup = {
              elem: elem,
              kern: Math.max(options.fontMetrics().bigOpSpacing1, options.fontMetrics().bigOpSpacing3 - elem.depth)
            };
          }

          if (subGroup) {
            var _elem = buildHTML_buildGroup(subGroup, options.havingStyle(style.sub()), options);

            sub = {
              elem: _elem,
              kern: Math.max(options.fontMetrics().bigOpSpacing2, options.fontMetrics().bigOpSpacing4 - _elem.height)
            };
          } // Build the final group as a vlist of the possible subscript, base,
          // and possible superscript.


          var finalGroup;

          if (sup && sub) {
            var bottom = options.fontMetrics().bigOpSpacing5 + sub.elem.height + sub.elem.depth + sub.kern + base.depth + baseShift;
            finalGroup = buildCommon.makeVList({
              positionType: "bottom",
              positionData: bottom,
              children: [{
                type: "kern",
                size: options.fontMetrics().bigOpSpacing5
              }, {
                type: "elem",
                elem: sub.elem,
                marginLeft: -slant + "em"
              }, {
                type: "kern",
                size: sub.kern
              }, {
                type: "elem",
                elem: base
              }, {
                type: "kern",
                size: sup.kern
              }, {
                type: "elem",
                elem: sup.elem,
                marginLeft: slant + "em"
              }, {
                type: "kern",
                size: options.fontMetrics().bigOpSpacing5
              }]
            }, options);
          } else if (sub) {
            var top = base.height - baseShift; // Shift the limits by the slant of the symbol. Note
            // that we are supposed to shift the limits by 1/2 of the slant,
            // but since we are centering the limits adding a full slant of
            // margin will shift by 1/2 that.

            finalGroup = buildCommon.makeVList({
              positionType: "top",
              positionData: top,
              children: [{
                type: "kern",
                size: options.fontMetrics().bigOpSpacing5
              }, {
                type: "elem",
                elem: sub.elem,
                marginLeft: -slant + "em"
              }, {
                type: "kern",
                size: sub.kern
              }, {
                type: "elem",
                elem: base
              }]
            }, options);
          } else if (sup) {
            var _bottom = base.depth + baseShift;

            finalGroup = buildCommon.makeVList({
              positionType: "bottom",
              positionData: _bottom,
              children: [{
                type: "elem",
                elem: base
              }, {
                type: "kern",
                size: sup.kern
              }, {
                type: "elem",
                elem: sup.elem,
                marginLeft: slant + "em"
              }, {
                type: "kern",
                size: options.fontMetrics().bigOpSpacing5
              }]
            }, options);
          } else {
            // This case probably shouldn't occur (this would mean the
            // supsub was sending us a group with no superscript or
            // subscript) but be safe.
            return base;
          }

          return buildCommon.makeSpan(["mop", "op-limits"], [finalGroup], options);
        } else {
          if (baseShift) {
            base.style.position = "relative";
            base.style.top = baseShift + "em";
          }

          return base;
        }
      };

      var op_mathmlBuilder = function mathmlBuilder(group, options) {
        var node;

        if (group.symbol) {
          // This is a symbol. Just add the symbol.
          node = new mathMLTree_MathNode("mo", [buildMathML_makeText(group.name, group.mode)]);

          if (utils.contains(noSuccessor, group.name)) {
            node.setAttribute("largeop", "false");
          }
        } else if (group.body) {
          // This is an operator with children. Add them.
          node = new mathMLTree_MathNode("mo", buildMathML_buildExpression(group.body, options));
        } else {
          // This is a text operator. Add all of the characters from the
          // operator's name.
          // TODO(emily): Add a space in the middle of some of these
          // operators, like \limsup.
          node = new mathMLTree_MathNode("mi", [new mathMLTree_TextNode(group.name.slice(1))]); // Append an <mo>&ApplyFunction;</mo>.
          // ref: https://www.w3.org/TR/REC-MathML/chap3_2.html#sec3.2.4

          var operator = new mathMLTree_MathNode("mo", [buildMathML_makeText("\u2061", "text")]);

          if (group.parentIsSupSub) {
            node = new mathMLTree_MathNode("mo", [node, operator]);
          } else {
            node = newDocumentFragment([node, operator]);
          }
        }

        return node;
      };

      var singleCharBigOps = {
        "\u220F": "\\prod",
        "\u2210": "\\coprod",
        "\u2211": "\\sum",
        "\u22C0": "\\bigwedge",
        "\u22C1": "\\bigvee",
        "\u22C2": "\\bigcap",
        "\u22C3": "\\bigcup",
        "\u2A00": "\\bigodot",
        "\u2A01": "\\bigoplus",
        "\u2A02": "\\bigotimes",
        "\u2A04": "\\biguplus",
        "\u2A06": "\\bigsqcup"
      };
      defineFunction({
        type: "op",
        names: ["\\coprod", "\\bigvee", "\\bigwedge", "\\biguplus", "\\bigcap", "\\bigcup", "\\intop", "\\prod", "\\sum", "\\bigotimes", "\\bigoplus", "\\bigodot", "\\bigsqcup", "\\smallint", "\u220F", "\u2210", "\u2211", "\u22C0", "\u22C1", "\u22C2", "\u22C3", "\u2A00", "\u2A01", "\u2A02", "\u2A04", "\u2A06"],
        props: {
          numArgs: 0
        },
        handler: function handler(_ref, args) {
          var parser = _ref.parser,
              funcName = _ref.funcName;
          var fName = funcName;

          if (fName.length === 1) {
            fName = singleCharBigOps[fName];
          }

          return {
            type: "op",
            mode: parser.mode,
            limits: true,
            parentIsSupSub: false,
            symbol: true,
            name: fName
          };
        },
        htmlBuilder: op_htmlBuilder,
        mathmlBuilder: op_mathmlBuilder
      }); // Note: calling defineFunction with a type that's already been defined only
      // works because the same htmlBuilder and mathmlBuilder are being used.

      defineFunction({
        type: "op",
        names: ["\\mathop"],
        props: {
          numArgs: 1
        },
        handler: function handler(_ref2, args) {
          var parser = _ref2.parser;
          var body = args[0];
          return {
            type: "op",
            mode: parser.mode,
            limits: false,
            parentIsSupSub: false,
            symbol: false,
            body: defineFunction_ordargument(body)
          };
        },
        htmlBuilder: op_htmlBuilder,
        mathmlBuilder: op_mathmlBuilder
      }); // There are 2 flags for operators; whether they produce limits in
      // displaystyle, and whether they are symbols and should grow in
      // displaystyle. These four groups cover the four possible choices.

      var singleCharIntegrals = {
        "\u222B": "\\int",
        "\u222C": "\\iint",
        "\u222D": "\\iiint",
        "\u222E": "\\oint",
        "\u222F": "\\oiint",
        "\u2230": "\\oiiint"
      }; // No limits, not symbols

      defineFunction({
        type: "op",
        names: ["\\arcsin", "\\arccos", "\\arctan", "\\arctg", "\\arcctg", "\\arg", "\\ch", "\\cos", "\\cosec", "\\cosh", "\\cot", "\\cotg", "\\coth", "\\csc", "\\ctg", "\\cth", "\\deg", "\\dim", "\\exp", "\\hom", "\\ker", "\\lg", "\\ln", "\\log", "\\sec", "\\sin", "\\sinh", "\\sh", "\\tan", "\\tanh", "\\tg", "\\th"],
        props: {
          numArgs: 0
        },
        handler: function handler(_ref3) {
          var parser = _ref3.parser,
              funcName = _ref3.funcName;
          return {
            type: "op",
            mode: parser.mode,
            limits: false,
            parentIsSupSub: false,
            symbol: false,
            name: funcName
          };
        },
        htmlBuilder: op_htmlBuilder,
        mathmlBuilder: op_mathmlBuilder
      }); // Limits, not symbols

      defineFunction({
        type: "op",
        names: ["\\det", "\\gcd", "\\inf", "\\lim", "\\max", "\\min", "\\Pr", "\\sup"],
        props: {
          numArgs: 0
        },
        handler: function handler(_ref4) {
          var parser = _ref4.parser,
              funcName = _ref4.funcName;
          return {
            type: "op",
            mode: parser.mode,
            limits: true,
            parentIsSupSub: false,
            symbol: false,
            name: funcName
          };
        },
        htmlBuilder: op_htmlBuilder,
        mathmlBuilder: op_mathmlBuilder
      }); // No limits, symbols

      defineFunction({
        type: "op",
        names: ["\\int", "\\iint", "\\iiint", "\\oint", "\\oiint", "\\oiiint", "\u222B", "\u222C", "\u222D", "\u222E", "\u222F", "\u2230"],
        props: {
          numArgs: 0
        },
        handler: function handler(_ref5) {
          var parser = _ref5.parser,
              funcName = _ref5.funcName;
          var fName = funcName;

          if (fName.length === 1) {
            fName = singleCharIntegrals[fName];
          }

          return {
            type: "op",
            mode: parser.mode,
            limits: false,
            parentIsSupSub: false,
            symbol: true,
            name: fName
          };
        },
        htmlBuilder: op_htmlBuilder,
        mathmlBuilder: op_mathmlBuilder
      }); // CONCATENATED MODULE: ./src/functions/operatorname.js
      // \operatorname
      // amsopn.dtx: \mathop{#1\kern\z@\operator@font#3}\newmcodes@

      defineFunction({
        type: "operatorname",
        names: ["\\operatorname"],
        props: {
          numArgs: 1
        },
        handler: function handler(_ref, args) {
          var parser = _ref.parser;
          var body = args[0];
          return {
            type: "operatorname",
            mode: parser.mode,
            body: defineFunction_ordargument(body)
          };
        },
        htmlBuilder: function htmlBuilder(group, options) {
          if (group.body.length > 0) {
            var body = group.body.map(function (child) {
              // $FlowFixMe: Check if the node has a string `text` property.
              var childText = child.text;

              if (typeof childText === "string") {
                return {
                  type: "textord",
                  mode: child.mode,
                  text: childText
                };
              } else {
                return child;
              }
            }); // Consolidate function names into symbol characters.

            var expression = buildHTML_buildExpression(body, options.withFont("mathrm"), true);

            for (var i = 0; i < expression.length; i++) {
              var child = expression[i];

              if (child instanceof domTree_SymbolNode) {
                // Per amsopn package,
                // change minus to hyphen and \ast to asterisk
                child.text = child.text.replace(/\u2212/, "-").replace(/\u2217/, "*");
              }
            }

            return buildCommon.makeSpan(["mop"], expression, options);
          } else {
            return buildCommon.makeSpan(["mop"], [], options);
          }
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          // The steps taken here are similar to the html version.
          var expression = buildMathML_buildExpression(group.body, options.withFont("mathrm")); // Is expression a string or has it something like a fraction?

          var isAllString = true; // default

          for (var i = 0; i < expression.length; i++) {
            var node = expression[i];

            if (node instanceof mathMLTree.SpaceNode) {// Do nothing
            } else if (node instanceof mathMLTree.MathNode) {
              switch (node.type) {
                case "mi":
                case "mn":
                case "ms":
                case "mspace":
                case "mtext":
                  break;
                // Do nothing yet.

                case "mo":
                  {
                    var child = node.children[0];

                    if (node.children.length === 1 && child instanceof mathMLTree.TextNode) {
                      child.text = child.text.replace(/\u2212/, "-").replace(/\u2217/, "*");
                    } else {
                      isAllString = false;
                    }

                    break;
                  }

                default:
                  isAllString = false;
              }
            } else {
              isAllString = false;
            }
          }

          if (isAllString) {
            // Write a single TextNode instead of multiple nested tags.
            var word = expression.map(function (node) {
              return node.toText();
            }).join("");
            expression = [new mathMLTree.TextNode(word)];
          }

          var identifier = new mathMLTree.MathNode("mi", expression);
          identifier.setAttribute("mathvariant", "normal"); // \u2061 is the same as &ApplyFunction;
          // ref: https://www.w3schools.com/charsets/ref_html_entities_a.asp

          var operator = new mathMLTree.MathNode("mo", [buildMathML_makeText("\u2061", "text")]);
          return mathMLTree.newDocumentFragment([identifier, operator]);
        }
      }); // CONCATENATED MODULE: ./src/functions/ordgroup.js

      defineFunctionBuilders({
        type: "ordgroup",
        htmlBuilder: function htmlBuilder(group, options) {
          if (group.semisimple) {
            return buildCommon.makeFragment(buildHTML_buildExpression(group.body, options, false));
          }

          return buildCommon.makeSpan(["mord"], buildHTML_buildExpression(group.body, options, true), options);
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          return buildExpressionRow(group.body, options);
        }
      }); // CONCATENATED MODULE: ./src/functions/overline.js

      defineFunction({
        type: "overline",
        names: ["\\overline"],
        props: {
          numArgs: 1
        },
        handler: function handler(_ref, args) {
          var parser = _ref.parser;
          var body = args[0];
          return {
            type: "overline",
            mode: parser.mode,
            body: body
          };
        },
        htmlBuilder: function htmlBuilder(group, options) {
          // Overlines are handled in the TeXbook pg 443, Rule 9.
          // Build the inner group in the cramped style.
          var innerGroup = buildHTML_buildGroup(group.body, options.havingCrampedStyle()); // Create the line above the body

          var line = buildCommon.makeLineSpan("overline-line", options); // Generate the vlist, with the appropriate kerns

          var vlist = buildCommon.makeVList({
            positionType: "firstBaseline",
            children: [{
              type: "elem",
              elem: innerGroup
            }, {
              type: "kern",
              size: 3 * line.height
            }, {
              type: "elem",
              elem: line
            }, {
              type: "kern",
              size: line.height
            }]
          }, options);
          return buildCommon.makeSpan(["mord", "overline"], [vlist], options);
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          var operator = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode("\u203E")]);
          operator.setAttribute("stretchy", "true");
          var node = new mathMLTree.MathNode("mover", [buildMathML_buildGroup(group.body, options), operator]);
          node.setAttribute("accent", "true");
          return node;
        }
      }); // CONCATENATED MODULE: ./src/functions/phantom.js

      defineFunction({
        type: "phantom",
        names: ["\\phantom"],
        props: {
          numArgs: 1,
          allowedInText: true
        },
        handler: function handler(_ref, args) {
          var parser = _ref.parser;
          var body = args[0];
          return {
            type: "phantom",
            mode: parser.mode,
            body: defineFunction_ordargument(body)
          };
        },
        htmlBuilder: function htmlBuilder(group, options) {
          var elements = buildHTML_buildExpression(group.body, options.withPhantom(), false); // \phantom isn't supposed to affect the elements it contains.
          // See "color" for more details.

          return buildCommon.makeFragment(elements);
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          var inner = buildMathML_buildExpression(group.body, options);
          return new mathMLTree.MathNode("mphantom", inner);
        }
      });
      defineFunction({
        type: "hphantom",
        names: ["\\hphantom"],
        props: {
          numArgs: 1,
          allowedInText: true
        },
        handler: function handler(_ref2, args) {
          var parser = _ref2.parser;
          var body = args[0];
          return {
            type: "hphantom",
            mode: parser.mode,
            body: body
          };
        },
        htmlBuilder: function htmlBuilder(group, options) {
          var node = buildCommon.makeSpan([], [buildHTML_buildGroup(group.body, options.withPhantom())]);
          node.height = 0;
          node.depth = 0;

          if (node.children) {
            for (var i = 0; i < node.children.length; i++) {
              node.children[i].height = 0;
              node.children[i].depth = 0;
            }
          } // See smash for comment re: use of makeVList


          node = buildCommon.makeVList({
            positionType: "firstBaseline",
            children: [{
              type: "elem",
              elem: node
            }]
          }, options); // For spacing, TeX treats \smash as a math group (same spacing as ord).

          return buildCommon.makeSpan(["mord"], [node], options);
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          var inner = buildMathML_buildExpression(defineFunction_ordargument(group.body), options);
          var phantom = new mathMLTree.MathNode("mphantom", inner);
          var node = new mathMLTree.MathNode("mpadded", [phantom]);
          node.setAttribute("height", "0px");
          node.setAttribute("depth", "0px");
          return node;
        }
      });
      defineFunction({
        type: "vphantom",
        names: ["\\vphantom"],
        props: {
          numArgs: 1,
          allowedInText: true
        },
        handler: function handler(_ref3, args) {
          var parser = _ref3.parser;
          var body = args[0];
          return {
            type: "vphantom",
            mode: parser.mode,
            body: body
          };
        },
        htmlBuilder: function htmlBuilder(group, options) {
          var inner = buildCommon.makeSpan(["inner"], [buildHTML_buildGroup(group.body, options.withPhantom())]);
          var fix = buildCommon.makeSpan(["fix"], []);
          return buildCommon.makeSpan(["mord", "rlap"], [inner, fix], options);
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          var inner = buildMathML_buildExpression(defineFunction_ordargument(group.body), options);
          var phantom = new mathMLTree.MathNode("mphantom", inner);
          var node = new mathMLTree.MathNode("mpadded", [phantom]);
          node.setAttribute("width", "0px");
          return node;
        }
      }); // CONCATENATED MODULE: ./src/functions/sizing.js

      function sizingGroup(value, options, baseOptions) {
        var inner = buildHTML_buildExpression(value, options, false);
        var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier; // Add size-resetting classes to the inner list and set maxFontSize
        // manually. Handle nested size changes.

        for (var i = 0; i < inner.length; i++) {
          var pos = inner[i].classes.indexOf("sizing");

          if (pos < 0) {
            Array.prototype.push.apply(inner[i].classes, options.sizingClasses(baseOptions));
          } else if (inner[i].classes[pos + 1] === "reset-size" + options.size) {
            // This is a nested size change: e.g., inner[i] is the "b" in
            // `\Huge a \small b`. Override the old size (the `reset-` class)
            // but not the new size.
            inner[i].classes[pos + 1] = "reset-size" + baseOptions.size;
          }

          inner[i].height *= multiplier;
          inner[i].depth *= multiplier;
        }

        return buildCommon.makeFragment(inner);
      }

      var sizeFuncs = ["\\tiny", "\\sixptsize", "\\scriptsize", "\\footnotesize", "\\small", "\\normalsize", "\\large", "\\Large", "\\LARGE", "\\huge", "\\Huge"];

      var sizing_htmlBuilder = function htmlBuilder(group, options) {
        // Handle sizing operators like \Huge. Real TeX doesn't actually allow
        // these functions inside of math expressions, so we do some special
        // handling.
        var newOptions = options.havingSize(group.size);
        return sizingGroup(group.body, newOptions, options);
      };

      defineFunction({
        type: "sizing",
        names: sizeFuncs,
        props: {
          numArgs: 0,
          allowedInText: true
        },
        handler: function handler(_ref, args) {
          var breakOnTokenText = _ref.breakOnTokenText,
              funcName = _ref.funcName,
              parser = _ref.parser;
          var body = parser.parseExpression(false, breakOnTokenText);
          return {
            type: "sizing",
            mode: parser.mode,
            // Figure out what size to use based on the list of functions above
            size: sizeFuncs.indexOf(funcName) + 1,
            body: body
          };
        },
        htmlBuilder: sizing_htmlBuilder,
        mathmlBuilder: function mathmlBuilder(group, options) {
          var newOptions = options.havingSize(group.size);
          var inner = buildMathML_buildExpression(group.body, newOptions);
          var node = new mathMLTree.MathNode("mstyle", inner); // TODO(emily): This doesn't produce the correct size for nested size
          // changes, because we don't keep state of what style we're currently
          // in, so we can't reset the size to normal before changing it.  Now
          // that we're passing an options parameter we should be able to fix
          // this.

          node.setAttribute("mathsize", newOptions.sizeMultiplier + "em");
          return node;
        }
      }); // CONCATENATED MODULE: ./src/functions/raisebox.js
      // Box manipulation

      defineFunction({
        type: "raisebox",
        names: ["\\raisebox"],
        props: {
          numArgs: 2,
          argTypes: ["size", "text"],
          allowedInText: true
        },
        handler: function handler(_ref, args) {
          var parser = _ref.parser;
          var amount = assertNodeType(args[0], "size").value;
          var body = args[1];
          return {
            type: "raisebox",
            mode: parser.mode,
            dy: amount,
            body: body
          };
        },
        htmlBuilder: function htmlBuilder(group, options) {
          var text = {
            type: "text",
            mode: group.mode,
            body: defineFunction_ordargument(group.body),
            font: "mathrm" // simulate \textrm

          };
          var sizedText = {
            type: "sizing",
            mode: group.mode,
            body: [text],
            size: 6 // simulate \normalsize

          };
          var body = sizing_htmlBuilder(sizedText, options);
          var dy = units_calculateSize(group.dy, options);
          return buildCommon.makeVList({
            positionType: "shift",
            positionData: -dy,
            children: [{
              type: "elem",
              elem: body
            }]
          }, options);
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          var node = new mathMLTree.MathNode("mpadded", [buildMathML_buildGroup(group.body, options)]);
          var dy = group.dy.number + group.dy.unit;
          node.setAttribute("voffset", dy);
          return node;
        }
      }); // CONCATENATED MODULE: ./src/functions/rule.js

      defineFunction({
        type: "rule",
        names: ["\\rule"],
        props: {
          numArgs: 2,
          numOptionalArgs: 1,
          argTypes: ["size", "size", "size"]
        },
        handler: function handler(_ref, args, optArgs) {
          var parser = _ref.parser;
          var shift = optArgs[0];
          var width = assertNodeType(args[0], "size");
          var height = assertNodeType(args[1], "size");
          return {
            type: "rule",
            mode: parser.mode,
            shift: shift && assertNodeType(shift, "size").value,
            width: width.value,
            height: height.value
          };
        },
        htmlBuilder: function htmlBuilder(group, options) {
          // Make an empty span for the rule
          var rule = buildCommon.makeSpan(["mord", "rule"], [], options); // Calculate the shift, width, and height of the rule, and account for units

          var width = units_calculateSize(group.width, options);
          var height = units_calculateSize(group.height, options);
          var shift = group.shift ? units_calculateSize(group.shift, options) : 0; // Style the rule to the right size

          rule.style.borderRightWidth = width + "em";
          rule.style.borderTopWidth = height + "em";
          rule.style.bottom = shift + "em"; // Record the height and width

          rule.width = width;
          rule.height = height + shift;
          rule.depth = -shift; // Font size is the number large enough that the browser will
          // reserve at least `absHeight` space above the baseline.
          // The 1.125 factor was empirically determined

          rule.maxFontSize = height * 1.125 * options.sizeMultiplier;
          return rule;
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          var width = units_calculateSize(group.width, options);
          var height = units_calculateSize(group.height, options);
          var shift = group.shift ? units_calculateSize(group.shift, options) : 0;
          var color = options.color && options.getColor() || "black";
          var rule = new mathMLTree.MathNode("mspace");
          rule.setAttribute("mathbackground", color);
          rule.setAttribute("width", width + "em");
          rule.setAttribute("height", height + "em");
          var wrapper = new mathMLTree.MathNode("mpadded", [rule]);

          if (shift >= 0) {
            wrapper.setAttribute("height", "+" + shift + "em");
          } else {
            wrapper.setAttribute("height", shift + "em");
            wrapper.setAttribute("depth", "+" + -shift + "em");
          }

          wrapper.setAttribute("voffset", shift + "em");
          return wrapper;
        }
      }); // CONCATENATED MODULE: ./src/functions/smash.js
      // smash, with optional [tb], as in AMS

      defineFunction({
        type: "smash",
        names: ["\\smash"],
        props: {
          numArgs: 1,
          numOptionalArgs: 1,
          allowedInText: true
        },
        handler: function handler(_ref, args, optArgs) {
          var parser = _ref.parser;
          var smashHeight = false;
          var smashDepth = false;
          var tbArg = optArgs[0] && assertNodeType(optArgs[0], "ordgroup");

          if (tbArg) {
            // Optional [tb] argument is engaged.
            // ref: amsmath: \renewcommand{\smash}[1][tb]{%
            //               def\mb@t{\ht}\def\mb@b{\dp}\def\mb@tb{\ht\z@\z@\dp}%
            var letter = "";

            for (var i = 0; i < tbArg.body.length; ++i) {
              var node = tbArg.body[i]; // $FlowFixMe: Not every node type has a `text` property.

              letter = node.text;

              if (letter === "t") {
                smashHeight = true;
              } else if (letter === "b") {
                smashDepth = true;
              } else {
                smashHeight = false;
                smashDepth = false;
                break;
              }
            }
          } else {
            smashHeight = true;
            smashDepth = true;
          }

          var body = args[0];
          return {
            type: "smash",
            mode: parser.mode,
            body: body,
            smashHeight: smashHeight,
            smashDepth: smashDepth
          };
        },
        htmlBuilder: function htmlBuilder(group, options) {
          var node = buildCommon.makeSpan([], [buildHTML_buildGroup(group.body, options)]);

          if (!group.smashHeight && !group.smashDepth) {
            return node;
          }

          if (group.smashHeight) {
            node.height = 0; // In order to influence makeVList, we have to reset the children.

            if (node.children) {
              for (var i = 0; i < node.children.length; i++) {
                node.children[i].height = 0;
              }
            }
          }

          if (group.smashDepth) {
            node.depth = 0;

            if (node.children) {
              for (var _i = 0; _i < node.children.length; _i++) {
                node.children[_i].depth = 0;
              }
            }
          } // At this point, we've reset the TeX-like height and depth values.
          // But the span still has an HTML line height.
          // makeVList applies "display: table-cell", which prevents the browser
          // from acting on that line height. So we'll call makeVList now.


          var smashedNode = buildCommon.makeVList({
            positionType: "firstBaseline",
            children: [{
              type: "elem",
              elem: node
            }]
          }, options); // For spacing, TeX treats \hphantom as a math group (same spacing as ord).

          return buildCommon.makeSpan(["mord"], [smashedNode], options);
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          var node = new mathMLTree.MathNode("mpadded", [buildMathML_buildGroup(group.body, options)]);

          if (group.smashHeight) {
            node.setAttribute("height", "0px");
          }

          if (group.smashDepth) {
            node.setAttribute("depth", "0px");
          }

          return node;
        }
      }); // CONCATENATED MODULE: ./src/functions/sqrt.js

      defineFunction({
        type: "sqrt",
        names: ["\\sqrt"],
        props: {
          numArgs: 1,
          numOptionalArgs: 1
        },
        handler: function handler(_ref, args, optArgs) {
          var parser = _ref.parser;
          var index = optArgs[0];
          var body = args[0];
          return {
            type: "sqrt",
            mode: parser.mode,
            body: body,
            index: index
          };
        },
        htmlBuilder: function htmlBuilder(group, options) {
          // Square roots are handled in the TeXbook pg. 443, Rule 11.
          // First, we do the same steps as in overline to build the inner group
          // and line
          var inner = buildHTML_buildGroup(group.body, options.havingCrampedStyle());

          if (inner.height === 0) {
            // Render a small surd.
            inner.height = options.fontMetrics().xHeight;
          } // Some groups can return document fragments.  Handle those by wrapping
          // them in a span.


          inner = buildCommon.wrapFragment(inner, options); // Calculate the minimum size for the \surd delimiter

          var metrics = options.fontMetrics();
          var theta = metrics.defaultRuleThickness;
          var phi = theta;

          if (options.style.id < src_Style.TEXT.id) {
            phi = options.fontMetrics().xHeight;
          } // Calculate the clearance between the body and line


          var lineClearance = theta + phi / 4;
          var minDelimiterHeight = inner.height + inner.depth + lineClearance + theta; // Create a sqrt SVG of the required minimum size

          var _delimiter$sqrtImage = delimiter.sqrtImage(minDelimiterHeight, options),
              img = _delimiter$sqrtImage.span,
              ruleWidth = _delimiter$sqrtImage.ruleWidth,
              advanceWidth = _delimiter$sqrtImage.advanceWidth;

          var delimDepth = img.height - ruleWidth; // Adjust the clearance based on the delimiter size

          if (delimDepth > inner.height + inner.depth + lineClearance) {
            lineClearance = (lineClearance + delimDepth - inner.height - inner.depth) / 2;
          } // Shift the sqrt image


          var imgShift = img.height - inner.height - lineClearance - ruleWidth;
          inner.style.paddingLeft = advanceWidth + "em"; // Overlay the image and the argument.

          var body = buildCommon.makeVList({
            positionType: "firstBaseline",
            children: [{
              type: "elem",
              elem: inner,
              wrapperClasses: ["svg-align"]
            }, {
              type: "kern",
              size: -(inner.height + imgShift)
            }, {
              type: "elem",
              elem: img
            }, {
              type: "kern",
              size: ruleWidth
            }]
          }, options);

          if (!group.index) {
            return buildCommon.makeSpan(["mord", "sqrt"], [body], options);
          } else {
            // Handle the optional root index
            // The index is always in scriptscript style
            var newOptions = options.havingStyle(src_Style.SCRIPTSCRIPT);
            var rootm = buildHTML_buildGroup(group.index, newOptions, options); // The amount the index is shifted by. This is taken from the TeX
            // source, in the definition of `\r@@t`.

            var toShift = 0.6 * (body.height - body.depth); // Build a VList with the superscript shifted up correctly

            var rootVList = buildCommon.makeVList({
              positionType: "shift",
              positionData: -toShift,
              children: [{
                type: "elem",
                elem: rootm
              }]
            }, options); // Add a class surrounding it so we can add on the appropriate
            // kerning

            var rootVListWrap = buildCommon.makeSpan(["root"], [rootVList]);
            return buildCommon.makeSpan(["mord", "sqrt"], [rootVListWrap, body], options);
          }
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          var body = group.body,
              index = group.index;
          return index ? new mathMLTree.MathNode("mroot", [buildMathML_buildGroup(body, options), buildMathML_buildGroup(index, options)]) : new mathMLTree.MathNode("msqrt", [buildMathML_buildGroup(body, options)]);
        }
      }); // CONCATENATED MODULE: ./src/functions/styling.js

      var styling_styleMap = {
        "display": src_Style.DISPLAY,
        "text": src_Style.TEXT,
        "script": src_Style.SCRIPT,
        "scriptscript": src_Style.SCRIPTSCRIPT
      };
      defineFunction({
        type: "styling",
        names: ["\\displaystyle", "\\textstyle", "\\scriptstyle", "\\scriptscriptstyle"],
        props: {
          numArgs: 0,
          allowedInText: true
        },
        handler: function handler(_ref, args) {
          var breakOnTokenText = _ref.breakOnTokenText,
              funcName = _ref.funcName,
              parser = _ref.parser; // parse out the implicit body

          var body = parser.parseExpression(true, breakOnTokenText); // TODO: Refactor to avoid duplicating styleMap in multiple places (e.g.
          // here and in buildHTML and de-dupe the enumeration of all the styles).
          // $FlowFixMe: The names above exactly match the styles.

          var style = funcName.slice(1, funcName.length - 5);
          return {
            type: "styling",
            mode: parser.mode,
            // Figure out what style to use by pulling out the style from
            // the function name
            style: style,
            body: body
          };
        },
        htmlBuilder: function htmlBuilder(group, options) {
          // Style changes are handled in the TeXbook on pg. 442, Rule 3.
          var newStyle = styling_styleMap[group.style];
          var newOptions = options.havingStyle(newStyle).withFont('');
          return sizingGroup(group.body, newOptions, options);
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          // Figure out what style we're changing to.
          // TODO(kevinb): dedupe this with buildHTML.js
          // This will be easier of handling of styling nodes is in the same file.
          var styleMap = {
            "display": src_Style.DISPLAY,
            "text": src_Style.TEXT,
            "script": src_Style.SCRIPT,
            "scriptscript": src_Style.SCRIPTSCRIPT
          };
          var newStyle = styleMap[group.style];
          var newOptions = options.havingStyle(newStyle);
          var inner = buildMathML_buildExpression(group.body, newOptions);
          var node = new mathMLTree.MathNode("mstyle", inner);
          var styleAttributes = {
            "display": ["0", "true"],
            "text": ["0", "false"],
            "script": ["1", "false"],
            "scriptscript": ["2", "false"]
          };
          var attr = styleAttributes[group.style];
          node.setAttribute("scriptlevel", attr[0]);
          node.setAttribute("displaystyle", attr[1]);
          return node;
        }
      }); // CONCATENATED MODULE: ./src/functions/supsub.js

      /**
       * Sometimes, groups perform special rules when they have superscripts or
       * subscripts attached to them. This function lets the `supsub` group know that
       * Sometimes, groups perform special rules when they have superscripts or
       * its inner element should handle the superscripts and subscripts instead of
       * handling them itself.
       */

      var supsub_htmlBuilderDelegate = function htmlBuilderDelegate(group, options) {
        var base = group.base;

        if (!base) {
          return null;
        } else if (base.type === "op") {
          // Operators handle supsubs differently when they have limits
          // (e.g. `\displaystyle\sum_2^3`)
          var delegate = base.limits && (options.style.size === src_Style.DISPLAY.size || base.alwaysHandleSupSub);
          return delegate ? op_htmlBuilder : null;
        } else if (base.type === "accent") {
          return utils.isCharacterBox(base.base) ? accent_htmlBuilder : null;
        } else if (base.type === "horizBrace") {
          var isSup = !group.sub;
          return isSup === base.isOver ? horizBrace_htmlBuilder : null;
        } else {
          return null;
        }
      }; // Super scripts and subscripts, whose precise placement can depend on other
      // functions that precede them.


      defineFunctionBuilders({
        type: "supsub",
        htmlBuilder: function htmlBuilder(group, options) {
          // Superscript and subscripts are handled in the TeXbook on page
          // 445-446, rules 18(a-f).
          // Here is where we defer to the inner group if it should handle
          // superscripts and subscripts itself.
          var builderDelegate = supsub_htmlBuilderDelegate(group, options);

          if (builderDelegate) {
            return builderDelegate(group, options);
          }

          var valueBase = group.base,
              valueSup = group.sup,
              valueSub = group.sub;
          var base = buildHTML_buildGroup(valueBase, options);
          var supm;
          var subm;
          var metrics = options.fontMetrics(); // Rule 18a

          var supShift = 0;
          var subShift = 0;
          var isCharacterBox = valueBase && utils.isCharacterBox(valueBase);

          if (valueSup) {
            var newOptions = options.havingStyle(options.style.sup());
            supm = buildHTML_buildGroup(valueSup, newOptions, options);

            if (!isCharacterBox) {
              supShift = base.height - newOptions.fontMetrics().supDrop * newOptions.sizeMultiplier / options.sizeMultiplier;
            }
          }

          if (valueSub) {
            var _newOptions = options.havingStyle(options.style.sub());

            subm = buildHTML_buildGroup(valueSub, _newOptions, options);

            if (!isCharacterBox) {
              subShift = base.depth + _newOptions.fontMetrics().subDrop * _newOptions.sizeMultiplier / options.sizeMultiplier;
            }
          } // Rule 18c


          var minSupShift;

          if (options.style === src_Style.DISPLAY) {
            minSupShift = metrics.sup1;
          } else if (options.style.cramped) {
            minSupShift = metrics.sup3;
          } else {
            minSupShift = metrics.sup2;
          } // scriptspace is a font-size-independent size, so scale it
          // appropriately for use as the marginRight.


          var multiplier = options.sizeMultiplier;
          var marginRight = 0.5 / metrics.ptPerEm / multiplier + "em";
          var marginLeft = null;

          if (subm) {
            // Subscripts shouldn't be shifted by the base's italic correction.
            // Account for that by shifting the subscript back the appropriate
            // amount. Note we only do this when the base is a single symbol.
            var isOiint = group.base && group.base.type === "op" && group.base.name && (group.base.name === "\\oiint" || group.base.name === "\\oiiint");

            if (base instanceof domTree_SymbolNode || isOiint) {
              // $FlowFixMe
              marginLeft = -base.italic + "em";
            }
          }

          var supsub;

          if (supm && subm) {
            supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);
            subShift = Math.max(subShift, metrics.sub2);
            var ruleWidth = metrics.defaultRuleThickness; // Rule 18e

            var maxWidth = 4 * ruleWidth;

            if (supShift - supm.depth - (subm.height - subShift) < maxWidth) {
              subShift = maxWidth - (supShift - supm.depth) + subm.height;
              var psi = 0.8 * metrics.xHeight - (supShift - supm.depth);

              if (psi > 0) {
                supShift += psi;
                subShift -= psi;
              }
            }

            var vlistElem = [{
              type: "elem",
              elem: subm,
              shift: subShift,
              marginRight: marginRight,
              marginLeft: marginLeft
            }, {
              type: "elem",
              elem: supm,
              shift: -supShift,
              marginRight: marginRight
            }];
            supsub = buildCommon.makeVList({
              positionType: "individualShift",
              children: vlistElem
            }, options);
          } else if (subm) {
            // Rule 18b
            subShift = Math.max(subShift, metrics.sub1, subm.height - 0.8 * metrics.xHeight);
            var _vlistElem = [{
              type: "elem",
              elem: subm,
              marginLeft: marginLeft,
              marginRight: marginRight
            }];
            supsub = buildCommon.makeVList({
              positionType: "shift",
              positionData: subShift,
              children: _vlistElem
            }, options);
          } else if (supm) {
            // Rule 18c, d
            supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);
            supsub = buildCommon.makeVList({
              positionType: "shift",
              positionData: -supShift,
              children: [{
                type: "elem",
                elem: supm,
                marginRight: marginRight
              }]
            }, options);
          } else {
            throw new Error("supsub must have either sup or sub.");
          } // Wrap the supsub vlist in a span.msupsub to reset text-align.


          var mclass = getTypeOfDomTree(base, "right") || "mord";
          return buildCommon.makeSpan([mclass], [base, buildCommon.makeSpan(["msupsub"], [supsub])], options);
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          // Is the inner group a relevant horizonal brace?
          var isBrace = false;
          var isOver;
          var isSup;
          var horizBrace = checkNodeType(group.base, "horizBrace");

          if (horizBrace) {
            isSup = !!group.sup;

            if (isSup === horizBrace.isOver) {
              isBrace = true;
              isOver = horizBrace.isOver;
            }
          }

          if (group.base && group.base.type === "op") {
            group.base.parentIsSupSub = true;
          }

          var children = [buildMathML_buildGroup(group.base, options)];

          if (group.sub) {
            children.push(buildMathML_buildGroup(group.sub, options));
          }

          if (group.sup) {
            children.push(buildMathML_buildGroup(group.sup, options));
          }

          var nodeType;

          if (isBrace) {
            nodeType = isOver ? "mover" : "munder";
          } else if (!group.sub) {
            var base = group.base;

            if (base && base.type === "op" && base.limits && (options.style === src_Style.DISPLAY || base.alwaysHandleSupSub)) {
              nodeType = "mover";
            } else {
              nodeType = "msup";
            }
          } else if (!group.sup) {
            var _base = group.base;

            if (_base && _base.type === "op" && _base.limits && (options.style === src_Style.DISPLAY || _base.alwaysHandleSupSub)) {
              nodeType = "munder";
            } else {
              nodeType = "msub";
            }
          } else {
            var _base2 = group.base;

            if (_base2 && _base2.type === "op" && _base2.limits && options.style === src_Style.DISPLAY) {
              nodeType = "munderover";
            } else {
              nodeType = "msubsup";
            }
          }

          var node = new mathMLTree.MathNode(nodeType, children);
          return node;
        }
      }); // CONCATENATED MODULE: ./src/functions/symbolsOp.js
      // Operator ParseNodes created in Parser.js from symbol Groups in src/symbols.js.

      defineFunctionBuilders({
        type: "atom",
        htmlBuilder: function htmlBuilder(group, options) {
          return buildCommon.mathsym(group.text, group.mode, options, ["m" + group.family]);
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          var node = new mathMLTree.MathNode("mo", [buildMathML_makeText(group.text, group.mode)]);

          if (group.family === "bin") {
            var variant = buildMathML_getVariant(group, options);

            if (variant === "bold-italic") {
              node.setAttribute("mathvariant", variant);
            }
          } else if (group.family === "punct") {
            node.setAttribute("separator", "true");
          } else if (group.family === "open" || group.family === "close") {
            // Delims built here should not stretch vertically.
            // See delimsizing.js for stretchy delims.
            node.setAttribute("stretchy", "false");
          }

          return node;
        }
      }); // CONCATENATED MODULE: ./src/functions/symbolsOrd.js
      // "mathord" and "textord" ParseNodes created in Parser.js from symbol Groups in

      var defaultVariant = {
        "mi": "italic",
        "mn": "normal",
        "mtext": "normal"
      };
      defineFunctionBuilders({
        type: "mathord",
        htmlBuilder: function htmlBuilder(group, options) {
          return buildCommon.makeOrd(group, options, "mathord");
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          var node = new mathMLTree.MathNode("mi", [buildMathML_makeText(group.text, group.mode, options)]);
          var variant = buildMathML_getVariant(group, options) || "italic";

          if (variant !== defaultVariant[node.type]) {
            node.setAttribute("mathvariant", variant);
          }

          return node;
        }
      });
      defineFunctionBuilders({
        type: "textord",
        htmlBuilder: function htmlBuilder(group, options) {
          return buildCommon.makeOrd(group, options, "textord");
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          var text = buildMathML_makeText(group.text, group.mode, options);
          var variant = buildMathML_getVariant(group, options) || "normal";
          var node;

          if (group.mode === 'text') {
            node = new mathMLTree.MathNode("mtext", [text]);
          } else if (/[0-9]/.test(group.text)) {
            // TODO(kevinb) merge adjacent <mn> nodes
            // do it as a post processing step
            node = new mathMLTree.MathNode("mn", [text]);
          } else if (group.text === "\\prime") {
            node = new mathMLTree.MathNode("mo", [text]);
          } else {
            node = new mathMLTree.MathNode("mi", [text]);
          }

          if (variant !== defaultVariant[node.type]) {
            node.setAttribute("mathvariant", variant);
          }

          return node;
        }
      }); // CONCATENATED MODULE: ./src/functions/symbolsSpacing.js
      // A map of CSS-based spacing functions to their CSS class.

      var cssSpace = {
        "\\nobreak": "nobreak",
        "\\allowbreak": "allowbreak"
      }; // A lookup table to determine whether a spacing function/symbol should be
      // treated like a regular space character.  If a symbol or command is a key
      // in this table, then it should be a regular space character.  Furthermore,
      // the associated value may have a `className` specifying an extra CSS class
      // to add to the created `span`.

      var regularSpace = {
        " ": {},
        "\\ ": {},
        "~": {
          className: "nobreak"
        },
        "\\space": {},
        "\\nobreakspace": {
          className: "nobreak"
        }
      }; // ParseNode<"spacing"> created in Parser.js from the "spacing" symbol Groups in
      // src/symbols.js.

      defineFunctionBuilders({
        type: "spacing",
        htmlBuilder: function htmlBuilder(group, options) {
          if (regularSpace.hasOwnProperty(group.text)) {
            var className = regularSpace[group.text].className || ""; // Spaces are generated by adding an actual space. Each of these
            // things has an entry in the symbols table, so these will be turned
            // into appropriate outputs.

            if (group.mode === "text") {
              var ord = buildCommon.makeOrd(group, options, "textord");
              ord.classes.push(className);
              return ord;
            } else {
              return buildCommon.makeSpan(["mspace", className], [buildCommon.mathsym(group.text, group.mode, options)], options);
            }
          } else if (cssSpace.hasOwnProperty(group.text)) {
            // Spaces based on just a CSS class.
            return buildCommon.makeSpan(["mspace", cssSpace[group.text]], [], options);
          } else {
            throw new src_ParseError("Unknown type of space \"" + group.text + "\"");
          }
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          var node;

          if (regularSpace.hasOwnProperty(group.text)) {
            node = new mathMLTree.MathNode("mtext", [new mathMLTree.TextNode("\xA0")]);
          } else if (cssSpace.hasOwnProperty(group.text)) {
            // CSS-based MathML spaces (\nobreak, \allowbreak) are ignored
            return new mathMLTree.MathNode("mspace");
          } else {
            throw new src_ParseError("Unknown type of space \"" + group.text + "\"");
          }

          return node;
        }
      }); // CONCATENATED MODULE: ./src/functions/tag.js

      var tag_pad = function pad() {
        var padNode = new mathMLTree.MathNode("mtd", []);
        padNode.setAttribute("width", "50%");
        return padNode;
      };

      defineFunctionBuilders({
        type: "tag",
        mathmlBuilder: function mathmlBuilder(group, options) {
          var table = new mathMLTree.MathNode("mtable", [new mathMLTree.MathNode("mtr", [tag_pad(), new mathMLTree.MathNode("mtd", [buildExpressionRow(group.body, options)]), tag_pad(), new mathMLTree.MathNode("mtd", [buildExpressionRow(group.tag, options)])])]);
          table.setAttribute("width", "100%");
          return table; // TODO: Left-aligned tags.
          // Currently, the group and options passed here do not contain
          // enough info to set tag alignment. `leqno` is in Settings but it is
          // not passed to Options. On the HTML side, leqno is
          // set by a CSS class applied in buildTree.js. That would have worked
          // in MathML if browsers supported <mlabeledtr>. Since they don't, we
          // need to rewrite the way this function is called.
        }
      }); // CONCATENATED MODULE: ./src/functions/text.js
      // Non-mathy text, possibly in a font

      var textFontFamilies = {
        "\\text": undefined,
        "\\textrm": "textrm",
        "\\textsf": "textsf",
        "\\texttt": "texttt",
        "\\textnormal": "textrm"
      };
      var textFontWeights = {
        "\\textbf": "textbf",
        "\\textmd": "textmd"
      };
      var textFontShapes = {
        "\\textit": "textit",
        "\\textup": "textup"
      };

      var optionsWithFont = function optionsWithFont(group, options) {
        var font = group.font; // Checks if the argument is a font family or a font style.

        if (!font) {
          return options;
        } else if (textFontFamilies[font]) {
          return options.withTextFontFamily(textFontFamilies[font]);
        } else if (textFontWeights[font]) {
          return options.withTextFontWeight(textFontWeights[font]);
        } else {
          return options.withTextFontShape(textFontShapes[font]);
        }
      };

      defineFunction({
        type: "text",
        names: [// Font families
        "\\text", "\\textrm", "\\textsf", "\\texttt", "\\textnormal", // Font weights
        "\\textbf", "\\textmd", // Font Shapes
        "\\textit", "\\textup"],
        props: {
          numArgs: 1,
          argTypes: ["text"],
          greediness: 2,
          allowedInText: true,
          consumeMode: "text"
        },
        handler: function handler(_ref, args) {
          var parser = _ref.parser,
              funcName = _ref.funcName;
          var body = args[0];
          return {
            type: "text",
            mode: parser.mode,
            body: defineFunction_ordargument(body),
            font: funcName
          };
        },
        htmlBuilder: function htmlBuilder(group, options) {
          var newOptions = optionsWithFont(group, options);
          var inner = buildHTML_buildExpression(group.body, newOptions, true);
          return buildCommon.makeSpan(["mord", "text"], buildCommon.tryCombineChars(inner), newOptions);
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          var newOptions = optionsWithFont(group, options);
          return buildExpressionRow(group.body, newOptions);
        }
      }); // CONCATENATED MODULE: ./src/functions/underline.js

      defineFunction({
        type: "underline",
        names: ["\\underline"],
        props: {
          numArgs: 1,
          allowedInText: true
        },
        handler: function handler(_ref, args) {
          var parser = _ref.parser;
          return {
            type: "underline",
            mode: parser.mode,
            body: args[0]
          };
        },
        htmlBuilder: function htmlBuilder(group, options) {
          // Underlines are handled in the TeXbook pg 443, Rule 10.
          // Build the inner group.
          var innerGroup = buildHTML_buildGroup(group.body, options); // Create the line to go below the body

          var line = buildCommon.makeLineSpan("underline-line", options); // Generate the vlist, with the appropriate kerns

          var vlist = buildCommon.makeVList({
            positionType: "top",
            positionData: innerGroup.height,
            children: [{
              type: "kern",
              size: line.height
            }, {
              type: "elem",
              elem: line
            }, {
              type: "kern",
              size: 3 * line.height
            }, {
              type: "elem",
              elem: innerGroup
            }]
          }, options);
          return buildCommon.makeSpan(["mord", "underline"], [vlist], options);
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          var operator = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode("\u203E")]);
          operator.setAttribute("stretchy", "true");
          var node = new mathMLTree.MathNode("munder", [buildMathML_buildGroup(group.body, options), operator]);
          node.setAttribute("accentunder", "true");
          return node;
        }
      }); // CONCATENATED MODULE: ./src/functions/verb.js

      defineFunction({
        type: "verb",
        names: ["\\verb"],
        props: {
          numArgs: 0,
          allowedInText: true
        },
        handler: function handler(context, args, optArgs) {
          // \verb and \verb* are dealt with directly in Parser.js.
          // If we end up here, it's because of a failure to match the two delimiters
          // in the regex in Lexer.js.  LaTeX raises the following error when \verb is
          // terminated by end of line (or file).
          throw new src_ParseError("\\verb ended by end of line instead of matching delimiter");
        },
        htmlBuilder: function htmlBuilder(group, options) {
          var text = makeVerb(group);
          var body = []; // \verb enters text mode and therefore is sized like \textstyle

          var newOptions = options.havingStyle(options.style.text());

          for (var i = 0; i < text.length; i++) {
            var c = text[i];

            if (c === '~') {
              c = '\\textasciitilde';
            }

            body.push(buildCommon.makeSymbol(c, "Typewriter-Regular", group.mode, newOptions, ["mord", "texttt"]));
          }

          return buildCommon.makeSpan(["mord", "text"].concat(newOptions.sizingClasses(options)), buildCommon.tryCombineChars(body), newOptions);
        },
        mathmlBuilder: function mathmlBuilder(group, options) {
          var text = new mathMLTree.TextNode(makeVerb(group));
          var node = new mathMLTree.MathNode("mtext", [text]);
          node.setAttribute("mathvariant", "monospace");
          return node;
        }
      });
      /**
       * Converts verb group into body string.
       *
       * \verb* replaces each space with an open box \u2423
       * \verb replaces each space with a no-break space \xA0
       */

      var makeVerb = function makeVerb(group) {
        return group.body.replace(/ /g, group.star ? "\u2423" : '\xA0');
      }; // CONCATENATED MODULE: ./src/functions.js

      /** Include this to ensure that all functions are defined. */


      var functions = _functions;
      /* harmony default export */

      var src_functions = functions; // TODO(kevinb): have functions return an object and call defineFunction with
      // that object in this file instead of relying on side-effects.
      // Disabled until https://github.com/KaTeX/KaTeX/pull/1794 is merged.
      // import "./functions/includegraphics";
      // CONCATENATED MODULE: ./src/Lexer.js

      /**
       * The Lexer class handles tokenizing the input in various ways. Since our
       * parser expects us to be able to backtrack, the lexer allows lexing from any
       * given starting point.
       *
       * Its main exposed function is the `lex` function, which takes a position to
       * lex from and a type of token to lex. It defers to the appropriate `_innerLex`
       * function.
       *
       * The various `_innerLex` functions perform the actual lexing of different
       * kinds.
       */

      /* The following tokenRegex
       * - matches typical whitespace (but not NBSP etc.) using its first group
       * - does not match any control character \x00-\x1f except whitespace
       * - does not match a bare backslash
       * - matches any ASCII character except those just mentioned
       * - does not match the BMP private use area \uE000-\uF8FF
       * - does not match bare surrogate code units
       * - matches any BMP character except for those just described
       * - matches any valid Unicode surrogate pair
       * - matches a backslash followed by one or more letters
       * - matches a backslash followed by any BMP character, including newline
       * Just because the Lexer matches something doesn't mean it's valid input:
       * If there is no matching function or symbol definition, the Parser will
       * still reject the input.
       */

      var spaceRegexString = "[ \r\n\t]";
      var controlWordRegexString = "\\\\[a-zA-Z@]+";
      var controlSymbolRegexString = "\\\\[^\uD800-\uDFFF]";
      var controlWordWhitespaceRegexString = "" + controlWordRegexString + spaceRegexString + "*";
      var controlWordWhitespaceRegex = new RegExp("^(" + controlWordRegexString + ")" + spaceRegexString + "*$");
      var combiningDiacriticalMarkString = "[\u0300-\u036F]";
      var combiningDiacriticalMarksEndRegex = new RegExp(combiningDiacriticalMarkString + "+$");
      var tokenRegexString = "(" + spaceRegexString + "+)|" + // whitespace
      "([!-\\[\\]-\u2027\u202A-\uD7FF\uF900-\uFFFF]" + ( // single codepoint
      combiningDiacriticalMarkString + "*") + // ...plus accents
      "|[\uD800-\uDBFF][\uDC00-\uDFFF]" + ( // surrogate pair
      combiningDiacriticalMarkString + "*") + // ...plus accents
      "|\\\\verb\\*([^]).*?\\3" + // \verb*
      "|\\\\verb([^*a-zA-Z]).*?\\4" + ( // \verb unstarred
      "|" + controlWordWhitespaceRegexString) + ( // \macroName + spaces
      "|" + controlSymbolRegexString + ")"); // \\, \', etc.

      /** Main Lexer class */

      var Lexer_Lexer =
      /*#__PURE__*/
      function () {
        // category codes, only supports comment characters (14) for now
        function Lexer(input, settings) {
          this.input = void 0;
          this.settings = void 0;
          this.tokenRegex = void 0;
          this.catcodes = void 0; // Separate accents from characters

          this.input = input;
          this.settings = settings;
          this.tokenRegex = new RegExp(tokenRegexString, 'g');
          this.catcodes = {
            "%": 14 // comment character

          };
        }

        var _proto = Lexer.prototype;

        _proto.setCatcode = function setCatcode(_char, code) {
          this.catcodes[_char] = code;
        }
        /**
         * This function lexes a single token.
         */
        ;

        _proto.lex = function lex() {
          var input = this.input;
          var pos = this.tokenRegex.lastIndex;

          if (pos === input.length) {
            return new Token_Token("EOF", new SourceLocation(this, pos, pos));
          }

          var match = this.tokenRegex.exec(input);

          if (match === null || match.index !== pos) {
            throw new src_ParseError("Unexpected character: '" + input[pos] + "'", new Token_Token(input[pos], new SourceLocation(this, pos, pos + 1)));
          }

          var text = match[2] || " ";

          if (this.catcodes[text] === 14) {
            // comment character
            var nlIndex = input.indexOf('\n', this.tokenRegex.lastIndex);

            if (nlIndex === -1) {
              this.tokenRegex.lastIndex = input.length; // EOF

              this.settings.reportNonstrict("commentAtEnd", "% comment has no terminating newline; LaTeX would " + "fail because of commenting the end of math mode (e.g. $)");
            } else {
              this.tokenRegex.lastIndex = nlIndex + 1;
            }

            return this.lex();
          } // Trim any trailing whitespace from control word match


          var controlMatch = text.match(controlWordWhitespaceRegex);

          if (controlMatch) {
            text = controlMatch[1];
          }

          return new Token_Token(text, new SourceLocation(this, pos, this.tokenRegex.lastIndex));
        };

        return Lexer;
      }(); // CONCATENATED MODULE: ./src/Namespace.js

      /**
       * A `Namespace` refers to a space of nameable things like macros or lengths,
       * which can be `set` either globally or local to a nested group, using an
       * undo stack similar to how TeX implements this functionality.
       * Performance-wise, `get` and local `set` take constant time, while global
       * `set` takes time proportional to the depth of group nesting.
       */


      var Namespace_Namespace =
      /*#__PURE__*/
      function () {
        /**
         * Both arguments are optional.  The first argument is an object of
         * built-in mappings which never change.  The second argument is an object
         * of initial (global-level) mappings, which will constantly change
         * according to any global/top-level `set`s done.
         */
        function Namespace(builtins, globalMacros) {
          if (builtins === void 0) {
            builtins = {};
          }

          if (globalMacros === void 0) {
            globalMacros = {};
          }

          this.current = void 0;
          this.builtins = void 0;
          this.undefStack = void 0;
          this.current = globalMacros;
          this.builtins = builtins;
          this.undefStack = [];
        }
        /**
         * Start a new nested group, affecting future local `set`s.
         */


        var _proto = Namespace.prototype;

        _proto.beginGroup = function beginGroup() {
          this.undefStack.push({});
        }
        /**
         * End current nested group, restoring values before the group began.
         */
        ;

        _proto.endGroup = function endGroup() {
          if (this.undefStack.length === 0) {
            throw new src_ParseError("Unbalanced namespace destruction: attempt " + "to pop global namespace; please report this as a bug");
          }

          var undefs = this.undefStack.pop();

          for (var undef in undefs) {
            if (undefs.hasOwnProperty(undef)) {
              if (undefs[undef] === undefined) {
                delete this.current[undef];
              } else {
                this.current[undef] = undefs[undef];
              }
            }
          }
        }
        /**
         * Detect whether `name` has a definition.  Equivalent to
         * `get(name) != null`.
         */
        ;

        _proto.has = function has(name) {
          return this.current.hasOwnProperty(name) || this.builtins.hasOwnProperty(name);
        }
        /**
         * Get the current value of a name, or `undefined` if there is no value.
         *
         * Note: Do not use `if (namespace.get(...))` to detect whether a macro
         * is defined, as the definition may be the empty string which evaluates
         * to `false` in JavaScript.  Use `if (namespace.get(...) != null)` or
         * `if (namespace.has(...))`.
         */
        ;

        _proto.get = function get(name) {
          if (this.current.hasOwnProperty(name)) {
            return this.current[name];
          } else {
            return this.builtins[name];
          }
        }
        /**
         * Set the current value of a name, and optionally set it globally too.
         * Local set() sets the current value and (when appropriate) adds an undo
         * operation to the undo stack.  Global set() may change the undo
         * operation at every level, so takes time linear in their number.
         */
        ;

        _proto.set = function set(name, value, global) {
          if (global === void 0) {
            global = false;
          }

          if (global) {
            // Global set is equivalent to setting in all groups.  Simulate this
            // by destroying any undos currently scheduled for this name,
            // and adding an undo with the *new* value (in case it later gets
            // locally reset within this environment).
            for (var i = 0; i < this.undefStack.length; i++) {
              delete this.undefStack[i][name];
            }

            if (this.undefStack.length > 0) {
              this.undefStack[this.undefStack.length - 1][name] = value;
            }
          } else {
            // Undo this set at end of this group (possibly to `undefined`),
            // unless an undo is already in place, in which case that older
            // value is the correct one.
            var top = this.undefStack[this.undefStack.length - 1];

            if (top && !top.hasOwnProperty(name)) {
              top[name] = this.current[name];
            }
          }

          this.current[name] = value;
        };

        return Namespace;
      }(); // CONCATENATED MODULE: ./src/macros.js

      /**
       * Predefined macros for KaTeX.
       * This can be used to define some commands in terms of others.
       */


      var builtinMacros = {};
      /* harmony default export */

      var macros = builtinMacros; // This function might one day accept an additional argument and do more things.

      function defineMacro(name, body) {
        builtinMacros[name] = body;
      } //////////////////////////////////////////////////////////////////////
      // macro tools
      // LaTeX's \@firstoftwo{#1}{#2} expands to #1, skipping #2
      // TeX source: \long\def\@firstoftwo#1#2{#1}


      defineMacro("\\@firstoftwo", function (context) {
        var args = context.consumeArgs(2);
        return {
          tokens: args[0],
          numArgs: 0
        };
      }); // LaTeX's \@secondoftwo{#1}{#2} expands to #2, skipping #1
      // TeX source: \long\def\@secondoftwo#1#2{#2}

      defineMacro("\\@secondoftwo", function (context) {
        var args = context.consumeArgs(2);
        return {
          tokens: args[1],
          numArgs: 0
        };
      }); // LaTeX's \@ifnextchar{#1}{#2}{#3} looks ahead to the next (unexpanded)
      // symbol.  If it matches #1, then the macro expands to #2; otherwise, #3.
      // Note, however, that it does not consume the next symbol in either case.

      defineMacro("\\@ifnextchar", function (context) {
        var args = context.consumeArgs(3); // symbol, if, else

        var nextToken = context.future();

        if (args[0].length === 1 && args[0][0].text === nextToken.text) {
          return {
            tokens: args[1],
            numArgs: 0
          };
        } else {
          return {
            tokens: args[2],
            numArgs: 0
          };
        }
      }); // LaTeX's \@ifstar{#1}{#2} looks ahead to the next (unexpanded) symbol.
      // If it is `*`, then it consumes the symbol, and the macro expands to #1;
      // otherwise, the macro expands to #2 (without consuming the symbol).
      // TeX source: \def\@ifstar#1{\@ifnextchar *{\@firstoftwo{#1}}}

      defineMacro("\\@ifstar", "\\@ifnextchar *{\\@firstoftwo{#1}}"); // LaTeX's \TextOrMath{#1}{#2} expands to #1 in text mode, #2 in math mode

      defineMacro("\\TextOrMath", function (context) {
        var args = context.consumeArgs(2);

        if (context.mode === 'text') {
          return {
            tokens: args[0],
            numArgs: 0
          };
        } else {
          return {
            tokens: args[1],
            numArgs: 0
          };
        }
      }); // Lookup table for parsing numbers in base 8 through 16

      var digitToNumber = {
        "0": 0,
        "1": 1,
        "2": 2,
        "3": 3,
        "4": 4,
        "5": 5,
        "6": 6,
        "7": 7,
        "8": 8,
        "9": 9,
        "a": 10,
        "A": 10,
        "b": 11,
        "B": 11,
        "c": 12,
        "C": 12,
        "d": 13,
        "D": 13,
        "e": 14,
        "E": 14,
        "f": 15,
        "F": 15
      }; // TeX \char makes a literal character (catcode 12) using the following forms:
      // (see The TeXBook, p. 43)
      //   \char123  -- decimal
      //   \char'123 -- octal
      //   \char"123 -- hex
      //   \char`x   -- character that can be written (i.e. isn't active)
      //   \char`\x  -- character that cannot be written (e.g. %)
      // These all refer to characters from the font, so we turn them into special
      // calls to a function \@char dealt with in the Parser.

      defineMacro("\\char", function (context) {
        var token = context.popToken();
        var base;
        var number = '';

        if (token.text === "'") {
          base = 8;
          token = context.popToken();
        } else if (token.text === '"') {
          base = 16;
          token = context.popToken();
        } else if (token.text === "`") {
          token = context.popToken();

          if (token.text[0] === "\\") {
            number = token.text.charCodeAt(1);
          } else if (token.text === "EOF") {
            throw new src_ParseError("\\char` missing argument");
          } else {
            number = token.text.charCodeAt(0);
          }
        } else {
          base = 10;
        }

        if (base) {
          // Parse a number in the given base, starting with first `token`.
          number = digitToNumber[token.text];

          if (number == null || number >= base) {
            throw new src_ParseError("Invalid base-" + base + " digit " + token.text);
          }

          var digit;

          while ((digit = digitToNumber[context.future().text]) != null && digit < base) {
            number *= base;
            number += digit;
            context.popToken();
          }
        }

        return "\\@char{" + number + "}";
      }); // Basic support for macro definitions:
      //     \def\macro{expansion}
      //     \def\macro#1{expansion}
      //     \def\macro#1#2{expansion}
      //     \def\macro#1#2#3#4#5#6#7#8#9{expansion}
      // Also the \gdef and \global\def equivalents

      var macros_def = function def(context, global) {
        var arg = context.consumeArgs(1)[0];

        if (arg.length !== 1) {
          throw new src_ParseError("\\gdef's first argument must be a macro name");
        }

        var name = arg[0].text; // Count argument specifiers, and check they are in the order #1 #2 ...

        var numArgs = 0;
        arg = context.consumeArgs(1)[0];

        while (arg.length === 1 && arg[0].text === "#") {
          arg = context.consumeArgs(1)[0];

          if (arg.length !== 1) {
            throw new src_ParseError("Invalid argument number length \"" + arg.length + "\"");
          }

          if (!/^[1-9]$/.test(arg[0].text)) {
            throw new src_ParseError("Invalid argument number \"" + arg[0].text + "\"");
          }

          numArgs++;

          if (parseInt(arg[0].text) !== numArgs) {
            throw new src_ParseError("Argument number \"" + arg[0].text + "\" out of order");
          }

          arg = context.consumeArgs(1)[0];
        } // Final arg is the expansion of the macro


        context.macros.set(name, {
          tokens: arg,
          numArgs: numArgs
        }, global);
        return '';
      };

      defineMacro("\\gdef", function (context) {
        return macros_def(context, true);
      });
      defineMacro("\\def", function (context) {
        return macros_def(context, false);
      });
      defineMacro("\\global", function (context) {
        var next = context.consumeArgs(1)[0];

        if (next.length !== 1) {
          throw new src_ParseError("Invalid command after \\global");
        }

        var command = next[0].text; // TODO: Should expand command

        if (command === "\\def") {
          // \global\def is equivalent to \gdef
          return macros_def(context, true);
        } else {
          throw new src_ParseError("Invalid command '" + command + "' after \\global");
        }
      }); // \newcommand{\macro}[args]{definition}
      // \renewcommand{\macro}[args]{definition}
      // TODO: Optional arguments: \newcommand{\macro}[args][default]{definition}

      var macros_newcommand = function newcommand(context, existsOK, nonexistsOK) {
        var arg = context.consumeArgs(1)[0];

        if (arg.length !== 1) {
          throw new src_ParseError("\\newcommand's first argument must be a macro name");
        }

        var name = arg[0].text;
        var exists = context.isDefined(name);

        if (exists && !existsOK) {
          throw new src_ParseError("\\newcommand{" + name + "} attempting to redefine " + (name + "; use \\renewcommand"));
        }

        if (!exists && !nonexistsOK) {
          throw new src_ParseError("\\renewcommand{" + name + "} when command " + name + " " + "does not yet exist; use \\newcommand");
        }

        var numArgs = 0;
        arg = context.consumeArgs(1)[0];

        if (arg.length === 1 && arg[0].text === "[") {
          var argText = '';
          var token = context.expandNextToken();

          while (token.text !== "]" && token.text !== "EOF") {
            // TODO: Should properly expand arg, e.g., ignore {}s
            argText += token.text;
            token = context.expandNextToken();
          }

          if (!argText.match(/^\s*[0-9]+\s*$/)) {
            throw new src_ParseError("Invalid number of arguments: " + argText);
          }

          numArgs = parseInt(argText);
          arg = context.consumeArgs(1)[0];
        } // Final arg is the expansion of the macro


        context.macros.set(name, {
          tokens: arg,
          numArgs: numArgs
        });
        return '';
      };

      defineMacro("\\newcommand", function (context) {
        return macros_newcommand(context, false, true);
      });
      defineMacro("\\renewcommand", function (context) {
        return macros_newcommand(context, true, false);
      });
      defineMacro("\\providecommand", function (context) {
        return macros_newcommand(context, true, true);
      }); //////////////////////////////////////////////////////////////////////
      // Grouping
      // \let\bgroup={ \let\egroup=}

      defineMacro("\\bgroup", "{");
      defineMacro("\\egroup", "}"); // Symbols from latex.ltx:
      // \def\lq{`}
      // \def\rq{'}
      // \def \aa {\r a}
      // \def \AA {\r A}

      defineMacro("\\lq", "`");
      defineMacro("\\rq", "'");
      defineMacro("\\aa", "\\r a");
      defineMacro("\\AA", "\\r A"); // Copyright (C) and registered (R) symbols. Use raw symbol in MathML.
      // \DeclareTextCommandDefault{\textcopyright}{\textcircled{c}}
      // \DeclareTextCommandDefault{\textregistered}{\textcircled{%
      //      \check@mathfonts\fontsize\sf@size\z@\math@fontsfalse\selectfont R}}
      // \DeclareRobustCommand{\copyright}{%
      //    \ifmmode{\nfss@text{\textcopyright}}\else\textcopyright\fi}

      defineMacro("\\textcopyright", "\\html@mathml{\\textcircled{c}}{\\char`©}");
      defineMacro("\\copyright", "\\TextOrMath{\\textcopyright}{\\text{\\textcopyright}}");
      defineMacro("\\textregistered", "\\html@mathml{\\textcircled{\\scriptsize R}}{\\char`®}"); // Characters omitted from Unicode range 1D400–1D7FF

      defineMacro("\u212C", "\\mathscr{B}"); // script

      defineMacro("\u2130", "\\mathscr{E}");
      defineMacro("\u2131", "\\mathscr{F}");
      defineMacro("\u210B", "\\mathscr{H}");
      defineMacro("\u2110", "\\mathscr{I}");
      defineMacro("\u2112", "\\mathscr{L}");
      defineMacro("\u2133", "\\mathscr{M}");
      defineMacro("\u211B", "\\mathscr{R}");
      defineMacro("\u212D", "\\mathfrak{C}"); // Fraktur

      defineMacro("\u210C", "\\mathfrak{H}");
      defineMacro("\u2128", "\\mathfrak{Z}"); // Define \Bbbk with a macro that works in both HTML and MathML.

      defineMacro("\\Bbbk", "\\Bbb{k}"); // Unicode middle dot
      // The KaTeX fonts do not contain U+00B7. Instead, \cdotp displays
      // the dot at U+22C5 and gives it punct spacing.

      defineMacro("\xB7", "\\cdotp"); // \llap and \rlap render their contents in text mode

      defineMacro("\\llap", "\\mathllap{\\textrm{#1}}");
      defineMacro("\\rlap", "\\mathrlap{\\textrm{#1}}");
      defineMacro("\\clap", "\\mathclap{\\textrm{#1}}"); // \not is defined by base/fontmath.ltx via
      // \DeclareMathSymbol{\not}{\mathrel}{symbols}{"36}
      // It's thus treated like a \mathrel, but defined by a symbol that has zero
      // width but extends to the right.  We use \rlap to get that spacing.
      // For MathML we write U+0338 here. buildMathML.js will then do the overlay.

      defineMacro("\\not", '\\html@mathml{\\mathrel{\\mathrlap\\@not}}{\\char"338}'); // Negated symbols from base/fontmath.ltx:
      // \def\neq{\not=} \let\ne=\neq
      // \DeclareRobustCommand
      //   \notin{\mathrel{\m@th\mathpalette\c@ncel\in}}
      // \def\c@ncel#1#2{\m@th\ooalign{$\hfil#1\mkern1mu/\hfil$\crcr$#1#2$}}

      defineMacro("\\neq", "\\html@mathml{\\mathrel{\\not=}}{\\mathrel{\\char`≠}}");
      defineMacro("\\ne", "\\neq");
      defineMacro("\u2260", "\\neq");
      defineMacro("\\notin", "\\html@mathml{\\mathrel{{\\in}\\mathllap{/\\mskip1mu}}}" + "{\\mathrel{\\char`∉}}");
      defineMacro("\u2209", "\\notin"); // Unicode stacked relations

      defineMacro("\u2258", "\\html@mathml{" + "\\mathrel{=\\kern{-1em}\\raisebox{0.4em}{$\\scriptsize\\frown$}}" + "}{\\mathrel{\\char`\u2258}}");
      defineMacro("\u2259", "\\html@mathml{\\stackrel{\\tiny\\wedge}{=}}{\\mathrel{\\char`\u2258}}");
      defineMacro("\u225A", "\\html@mathml{\\stackrel{\\tiny\\vee}{=}}{\\mathrel{\\char`\u225A}}");
      defineMacro("\u225B", "\\html@mathml{\\stackrel{\\scriptsize\\star}{=}}" + "{\\mathrel{\\char`\u225B}}");
      defineMacro("\u225D", "\\html@mathml{\\stackrel{\\tiny\\mathrm{def}}{=}}" + "{\\mathrel{\\char`\u225D}}");
      defineMacro("\u225E", "\\html@mathml{\\stackrel{\\tiny\\mathrm{m}}{=}}" + "{\\mathrel{\\char`\u225E}}");
      defineMacro("\u225F", "\\html@mathml{\\stackrel{\\tiny?}{=}}{\\mathrel{\\char`\u225F}}"); // Misc Unicode

      defineMacro("\u27C2", "\\perp");
      defineMacro("\u203C", "\\mathclose{!\\mkern-0.8mu!}");
      defineMacro("\u220C", "\\notni");
      defineMacro("\u231C", "\\ulcorner");
      defineMacro("\u231D", "\\urcorner");
      defineMacro("\u231E", "\\llcorner");
      defineMacro("\u231F", "\\lrcorner");
      defineMacro("\xA9", "\\copyright");
      defineMacro("\xAE", "\\textregistered");
      defineMacro("\uFE0F", "\\textregistered"); //////////////////////////////////////////////////////////////////////
      // LaTeX_2ε
      // \vdots{\vbox{\baselineskip4\p@  \lineskiplimit\z@
      // \kern6\p@\hbox{.}\hbox{.}\hbox{.}}}
      // We'll call \varvdots, which gets a glyph from symbols.js.
      // The zero-width rule gets us an equivalent to the vertical 6pt kern.

      defineMacro("\\vdots", "\\mathord{\\varvdots\\rule{0pt}{15pt}}");
      defineMacro("\u22EE", "\\vdots"); //////////////////////////////////////////////////////////////////////
      // amsmath.sty
      // http://mirrors.concertpass.com/tex-archive/macros/latex/required/amsmath/amsmath.pdf
      // Italic Greek capital letters.  AMS defines these with \DeclareMathSymbol,
      // but they are equivalent to \mathit{\Letter}.

      defineMacro("\\varGamma", "\\mathit{\\Gamma}");
      defineMacro("\\varDelta", "\\mathit{\\Delta}");
      defineMacro("\\varTheta", "\\mathit{\\Theta}");
      defineMacro("\\varLambda", "\\mathit{\\Lambda}");
      defineMacro("\\varXi", "\\mathit{\\Xi}");
      defineMacro("\\varPi", "\\mathit{\\Pi}");
      defineMacro("\\varSigma", "\\mathit{\\Sigma}");
      defineMacro("\\varUpsilon", "\\mathit{\\Upsilon}");
      defineMacro("\\varPhi", "\\mathit{\\Phi}");
      defineMacro("\\varPsi", "\\mathit{\\Psi}");
      defineMacro("\\varOmega", "\\mathit{\\Omega}"); // \renewcommand{\colon}{\nobreak\mskip2mu\mathpunct{}\nonscript
      // \mkern-\thinmuskip{:}\mskip6muplus1mu\relax}

      defineMacro("\\colon", "\\nobreak\\mskip2mu\\mathpunct{}" + "\\mathchoice{\\mkern-3mu}{\\mkern-3mu}{}{}{:}\\mskip6mu"); // \newcommand{\boxed}[1]{\fbox{\m@th$\displaystyle#1$}}

      defineMacro("\\boxed", "\\fbox{$\\displaystyle{#1}$}"); // \def\iff{\DOTSB\;\Longleftrightarrow\;}
      // \def\implies{\DOTSB\;\Longrightarrow\;}
      // \def\impliedby{\DOTSB\;\Longleftarrow\;}

      defineMacro("\\iff", "\\DOTSB\\;\\Longleftrightarrow\\;");
      defineMacro("\\implies", "\\DOTSB\\;\\Longrightarrow\\;");
      defineMacro("\\impliedby", "\\DOTSB\\;\\Longleftarrow\\;"); // AMSMath's automatic \dots, based on \mdots@@ macro.

      var dotsByToken = {
        ',': '\\dotsc',
        '\\not': '\\dotsb',
        // \keybin@ checks for the following:
        '+': '\\dotsb',
        '=': '\\dotsb',
        '<': '\\dotsb',
        '>': '\\dotsb',
        '-': '\\dotsb',
        '*': '\\dotsb',
        ':': '\\dotsb',
        // Symbols whose definition starts with \DOTSB:
        '\\DOTSB': '\\dotsb',
        '\\coprod': '\\dotsb',
        '\\bigvee': '\\dotsb',
        '\\bigwedge': '\\dotsb',
        '\\biguplus': '\\dotsb',
        '\\bigcap': '\\dotsb',
        '\\bigcup': '\\dotsb',
        '\\prod': '\\dotsb',
        '\\sum': '\\dotsb',
        '\\bigotimes': '\\dotsb',
        '\\bigoplus': '\\dotsb',
        '\\bigodot': '\\dotsb',
        '\\bigsqcup': '\\dotsb',
        '\\And': '\\dotsb',
        '\\longrightarrow': '\\dotsb',
        '\\Longrightarrow': '\\dotsb',
        '\\longleftarrow': '\\dotsb',
        '\\Longleftarrow': '\\dotsb',
        '\\longleftrightarrow': '\\dotsb',
        '\\Longleftrightarrow': '\\dotsb',
        '\\mapsto': '\\dotsb',
        '\\longmapsto': '\\dotsb',
        '\\hookrightarrow': '\\dotsb',
        '\\doteq': '\\dotsb',
        // Symbols whose definition starts with \mathbin:
        '\\mathbin': '\\dotsb',
        // Symbols whose definition starts with \mathrel:
        '\\mathrel': '\\dotsb',
        '\\relbar': '\\dotsb',
        '\\Relbar': '\\dotsb',
        '\\xrightarrow': '\\dotsb',
        '\\xleftarrow': '\\dotsb',
        // Symbols whose definition starts with \DOTSI:
        '\\DOTSI': '\\dotsi',
        '\\int': '\\dotsi',
        '\\oint': '\\dotsi',
        '\\iint': '\\dotsi',
        '\\iiint': '\\dotsi',
        '\\iiiint': '\\dotsi',
        '\\idotsint': '\\dotsi',
        // Symbols whose definition starts with \DOTSX:
        '\\DOTSX': '\\dotsx'
      };
      defineMacro("\\dots", function (context) {
        // TODO: If used in text mode, should expand to \textellipsis.
        // However, in KaTeX, \textellipsis and \ldots behave the same
        // (in text mode), and it's unlikely we'd see any of the math commands
        // that affect the behavior of \dots when in text mode.  So fine for now
        // (until we support \ifmmode ... \else ... \fi).
        var thedots = '\\dotso';
        var next = context.expandAfterFuture().text;

        if (next in dotsByToken) {
          thedots = dotsByToken[next];
        } else if (next.substr(0, 4) === '\\not') {
          thedots = '\\dotsb';
        } else if (next in src_symbols.math) {
          if (utils.contains(['bin', 'rel'], src_symbols.math[next].group)) {
            thedots = '\\dotsb';
          }
        }

        return thedots;
      });
      var spaceAfterDots = {
        // \rightdelim@ checks for the following:
        ')': true,
        ']': true,
        '\\rbrack': true,
        '\\}': true,
        '\\rbrace': true,
        '\\rangle': true,
        '\\rceil': true,
        '\\rfloor': true,
        '\\rgroup': true,
        '\\rmoustache': true,
        '\\right': true,
        '\\bigr': true,
        '\\biggr': true,
        '\\Bigr': true,
        '\\Biggr': true,
        // \extra@ also tests for the following:
        '$': true,
        // \extrap@ checks for the following:
        ';': true,
        '.': true,
        ',': true
      };
      defineMacro("\\dotso", function (context) {
        var next = context.future().text;

        if (next in spaceAfterDots) {
          return "\\ldots\\,";
        } else {
          return "\\ldots";
        }
      });
      defineMacro("\\dotsc", function (context) {
        var next = context.future().text; // \dotsc uses \extra@ but not \extrap@, instead specially checking for
        // ';' and '.', but doesn't check for ','.

        if (next in spaceAfterDots && next !== ',') {
          return "\\ldots\\,";
        } else {
          return "\\ldots";
        }
      });
      defineMacro("\\cdots", function (context) {
        var next = context.future().text;

        if (next in spaceAfterDots) {
          return "\\@cdots\\,";
        } else {
          return "\\@cdots";
        }
      });
      defineMacro("\\dotsb", "\\cdots");
      defineMacro("\\dotsm", "\\cdots");
      defineMacro("\\dotsi", "\\!\\cdots"); // amsmath doesn't actually define \dotsx, but \dots followed by a macro
      // starting with \DOTSX implies \dotso, and then \extra@ detects this case
      // and forces the added `\,`.

      defineMacro("\\dotsx", "\\ldots\\,"); // \let\DOTSI\relax
      // \let\DOTSB\relax
      // \let\DOTSX\relax

      defineMacro("\\DOTSI", "\\relax");
      defineMacro("\\DOTSB", "\\relax");
      defineMacro("\\DOTSX", "\\relax"); // Spacing, based on amsmath.sty's override of LaTeX defaults
      // \DeclareRobustCommand{\tmspace}[3]{%
      //   \ifmmode\mskip#1#2\else\kern#1#3\fi\relax}

      defineMacro("\\tmspace", "\\TextOrMath{\\kern#1#3}{\\mskip#1#2}\\relax"); // \renewcommand{\,}{\tmspace+\thinmuskip{.1667em}}
      // TODO: math mode should use \thinmuskip

      defineMacro("\\,", "\\tmspace+{3mu}{.1667em}"); // \let\thinspace\,

      defineMacro("\\thinspace", "\\,"); // \def\>{\mskip\medmuskip}
      // \renewcommand{\:}{\tmspace+\medmuskip{.2222em}}
      // TODO: \> and math mode of \: should use \medmuskip = 4mu plus 2mu minus 4mu

      defineMacro("\\>", "\\mskip{4mu}");
      defineMacro("\\:", "\\tmspace+{4mu}{.2222em}"); // \let\medspace\:

      defineMacro("\\medspace", "\\:"); // \renewcommand{\;}{\tmspace+\thickmuskip{.2777em}}
      // TODO: math mode should use \thickmuskip = 5mu plus 5mu

      defineMacro("\\;", "\\tmspace+{5mu}{.2777em}"); // \let\thickspace\;

      defineMacro("\\thickspace", "\\;"); // \renewcommand{\!}{\tmspace-\thinmuskip{.1667em}}
      // TODO: math mode should use \thinmuskip

      defineMacro("\\!", "\\tmspace-{3mu}{.1667em}"); // \let\negthinspace\!

      defineMacro("\\negthinspace", "\\!"); // \newcommand{\negmedspace}{\tmspace-\medmuskip{.2222em}}
      // TODO: math mode should use \medmuskip

      defineMacro("\\negmedspace", "\\tmspace-{4mu}{.2222em}"); // \newcommand{\negthickspace}{\tmspace-\thickmuskip{.2777em}}
      // TODO: math mode should use \thickmuskip

      defineMacro("\\negthickspace", "\\tmspace-{5mu}{.277em}"); // \def\enspace{\kern.5em }

      defineMacro("\\enspace", "\\kern.5em "); // \def\enskip{\hskip.5em\relax}

      defineMacro("\\enskip", "\\hskip.5em\\relax"); // \def\quad{\hskip1em\relax}

      defineMacro("\\quad", "\\hskip1em\\relax"); // \def\qquad{\hskip2em\relax}

      defineMacro("\\qquad", "\\hskip2em\\relax"); // \tag@in@display form of \tag

      defineMacro("\\tag", "\\@ifstar\\tag@literal\\tag@paren");
      defineMacro("\\tag@paren", "\\tag@literal{({#1})}");
      defineMacro("\\tag@literal", function (context) {
        if (context.macros.get("\\df@tag")) {
          throw new src_ParseError("Multiple \\tag");
        }

        return "\\gdef\\df@tag{\\text{#1}}";
      }); // \renewcommand{\bmod}{\nonscript\mskip-\medmuskip\mkern5mu\mathbin
      //   {\operator@font mod}\penalty900
      //   \mkern5mu\nonscript\mskip-\medmuskip}
      // \newcommand{\pod}[1]{\allowbreak
      //   \if@display\mkern18mu\else\mkern8mu\fi(#1)}
      // \renewcommand{\pmod}[1]{\pod{{\operator@font mod}\mkern6mu#1}}
      // \newcommand{\mod}[1]{\allowbreak\if@display\mkern18mu
      //   \else\mkern12mu\fi{\operator@font mod}\,\,#1}
      // TODO: math mode should use \medmuskip = 4mu plus 2mu minus 4mu

      defineMacro("\\bmod", "\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}" + "\\mathbin{\\rm mod}" + "\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}");
      defineMacro("\\pod", "\\allowbreak" + "\\mathchoice{\\mkern18mu}{\\mkern8mu}{\\mkern8mu}{\\mkern8mu}(#1)");
      defineMacro("\\pmod", "\\pod{{\\rm mod}\\mkern6mu#1}");
      defineMacro("\\mod", "\\allowbreak" + "\\mathchoice{\\mkern18mu}{\\mkern12mu}{\\mkern12mu}{\\mkern12mu}" + "{\\rm mod}\\,\\,#1"); // \pmb    --   A simulation of bold.
      // It works by typesetting three copies of the argument with small offsets.
      // Ref: a rather lengthy macro in ambsy.sty

      defineMacro("\\pmb", "\\html@mathml{\\@binrel{#1}{" + "\\mathrlap{#1}" + "\\mathrlap{\\mkern0.4mu\\raisebox{0.4mu}{$#1$}}" + "{\\mkern0.8mu#1}" + "}}{\\mathbf{#1}}"); //////////////////////////////////////////////////////////////////////
      // LaTeX source2e
      // \\ defaults to \newline, but changes to \cr within array environment

      defineMacro("\\\\", "\\newline"); // \def\TeX{T\kern-.1667em\lower.5ex\hbox{E}\kern-.125emX\@}
      // TODO: Doesn't normally work in math mode because \@ fails.  KaTeX doesn't
      // support \@ yet, so that's omitted, and we add \text so that the result
      // doesn't look funny in math mode.

      defineMacro("\\TeX", "\\textrm{\\html@mathml{" + "T\\kern-.1667em\\raisebox{-.5ex}{E}\\kern-.125emX" + "}{TeX}}"); // \DeclareRobustCommand{\LaTeX}{L\kern-.36em%
      //         {\sbox\z@ T%
      //          \vbox to\ht\z@{\hbox{\check@mathfonts
      //                               \fontsize\sf@size\z@
      //                               \math@fontsfalse\selectfont
      //                               A}%
      //                         \vss}%
      //         }%
      //         \kern-.15em%
      //         \TeX}
      // This code aligns the top of the A with the T (from the perspective of TeX's
      // boxes, though visually the A appears to extend above slightly).
      // We compute the corresponding \raisebox when A is rendered at \scriptsize,
      // which is size3, which has a scale factor of 0.7 (see Options.js).

      var latexRaiseA = fontMetricsData['Main-Regular']["T".charCodeAt(0)][1] - 0.7 * fontMetricsData['Main-Regular']["A".charCodeAt(0)][1] + "em";
      defineMacro("\\LaTeX", "\\textrm{\\html@mathml{" + ("L\\kern-.36em\\raisebox{" + latexRaiseA + "}{\\scriptsize A}") + "\\kern-.15em\\TeX}{LaTeX}}"); // New KaTeX logo based on tweaking LaTeX logo

      defineMacro("\\KaTeX", "\\textrm{\\html@mathml{" + ("K\\kern-.17em\\raisebox{" + latexRaiseA + "}{\\scriptsize A}") + "\\kern-.15em\\TeX}{KaTeX}}"); // \DeclareRobustCommand\hspace{\@ifstar\@hspacer\@hspace}
      // \def\@hspace#1{\hskip  #1\relax}
      // \def\@hspacer#1{\vrule \@width\z@\nobreak
      //                 \hskip #1\hskip \z@skip}

      defineMacro("\\hspace", "\\@ifstar\\@hspacer\\@hspace");
      defineMacro("\\@hspace", "\\hskip #1\\relax");
      defineMacro("\\@hspacer", "\\rule{0pt}{0pt}\\hskip #1\\relax"); //////////////////////////////////////////////////////////////////////
      // mathtools.sty
      //\providecommand\ordinarycolon{:}

      defineMacro("\\ordinarycolon", ":"); //\def\vcentcolon{\mathrel{\mathop\ordinarycolon}}
      //TODO(edemaine): Not yet centered. Fix via \raisebox or #726

      defineMacro("\\vcentcolon", "\\mathrel{\\mathop\\ordinarycolon}"); // \providecommand*\dblcolon{\vcentcolon\mathrel{\mkern-.9mu}\vcentcolon}

      defineMacro("\\dblcolon", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-.9mu}\\vcentcolon}}" + "{\\mathop{\\char\"2237}}"); // \providecommand*\coloneqq{\vcentcolon\mathrel{\mkern-1.2mu}=}

      defineMacro("\\coloneqq", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}=}}" + "{\\mathop{\\char\"2254}}"); // ≔
      // \providecommand*\Coloneqq{\dblcolon\mathrel{\mkern-1.2mu}=}

      defineMacro("\\Coloneqq", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}=}}" + "{\\mathop{\\char\"2237\\char\"3d}}"); // \providecommand*\coloneq{\vcentcolon\mathrel{\mkern-1.2mu}\mathrel{-}}

      defineMacro("\\coloneq", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}" + "{\\mathop{\\char\"3a\\char\"2212}}"); // \providecommand*\Coloneq{\dblcolon\mathrel{\mkern-1.2mu}\mathrel{-}}

      defineMacro("\\Coloneq", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}" + "{\\mathop{\\char\"2237\\char\"2212}}"); // \providecommand*\eqqcolon{=\mathrel{\mkern-1.2mu}\vcentcolon}

      defineMacro("\\eqqcolon", "\\html@mathml{" + "\\mathrel{=\\mathrel{\\mkern-1.2mu}\\vcentcolon}}" + "{\\mathop{\\char\"2255}}"); // ≕
      // \providecommand*\Eqqcolon{=\mathrel{\mkern-1.2mu}\dblcolon}

      defineMacro("\\Eqqcolon", "\\html@mathml{" + "\\mathrel{=\\mathrel{\\mkern-1.2mu}\\dblcolon}}" + "{\\mathop{\\char\"3d\\char\"2237}}"); // \providecommand*\eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\vcentcolon}

      defineMacro("\\eqcolon", "\\html@mathml{" + "\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\vcentcolon}}" + "{\\mathop{\\char\"2239}}"); // \providecommand*\Eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\dblcolon}

      defineMacro("\\Eqcolon", "\\html@mathml{" + "\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\dblcolon}}" + "{\\mathop{\\char\"2212\\char\"2237}}"); // \providecommand*\colonapprox{\vcentcolon\mathrel{\mkern-1.2mu}\approx}

      defineMacro("\\colonapprox", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\approx}}" + "{\\mathop{\\char\"3a\\char\"2248}}"); // \providecommand*\Colonapprox{\dblcolon\mathrel{\mkern-1.2mu}\approx}

      defineMacro("\\Colonapprox", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\approx}}" + "{\\mathop{\\char\"2237\\char\"2248}}"); // \providecommand*\colonsim{\vcentcolon\mathrel{\mkern-1.2mu}\sim}

      defineMacro("\\colonsim", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\sim}}" + "{\\mathop{\\char\"3a\\char\"223c}}"); // \providecommand*\Colonsim{\dblcolon\mathrel{\mkern-1.2mu}\sim}

      defineMacro("\\Colonsim", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\sim}}" + "{\\mathop{\\char\"2237\\char\"223c}}"); // Some Unicode characters are implemented with macros to mathtools functions.

      defineMacro("\u2237", "\\dblcolon"); // ::

      defineMacro("\u2239", "\\eqcolon"); // -:

      defineMacro("\u2254", "\\coloneqq"); // :=

      defineMacro("\u2255", "\\eqqcolon"); // =:

      defineMacro("\u2A74", "\\Coloneqq"); // ::=
      //////////////////////////////////////////////////////////////////////
      // colonequals.sty
      // Alternate names for mathtools's macros:

      defineMacro("\\ratio", "\\vcentcolon");
      defineMacro("\\coloncolon", "\\dblcolon");
      defineMacro("\\colonequals", "\\coloneqq");
      defineMacro("\\coloncolonequals", "\\Coloneqq");
      defineMacro("\\equalscolon", "\\eqqcolon");
      defineMacro("\\equalscoloncolon", "\\Eqqcolon");
      defineMacro("\\colonminus", "\\coloneq");
      defineMacro("\\coloncolonminus", "\\Coloneq");
      defineMacro("\\minuscolon", "\\eqcolon");
      defineMacro("\\minuscoloncolon", "\\Eqcolon"); // \colonapprox name is same in mathtools and colonequals.

      defineMacro("\\coloncolonapprox", "\\Colonapprox"); // \colonsim name is same in mathtools and colonequals.

      defineMacro("\\coloncolonsim", "\\Colonsim"); // Additional macros, implemented by analogy with mathtools definitions:

      defineMacro("\\simcolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
      defineMacro("\\simcoloncolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\dblcolon}");
      defineMacro("\\approxcolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
      defineMacro("\\approxcoloncolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\dblcolon}"); // Present in newtxmath, pxfonts and txfonts

      defineMacro("\\notni", "\\html@mathml{\\not\\ni}{\\mathrel{\\char`\u220C}}");
      defineMacro("\\limsup", "\\DOTSB\\mathop{\\operatorname{lim\\,sup}}\\limits");
      defineMacro("\\liminf", "\\DOTSB\\mathop{\\operatorname{lim\\,inf}}\\limits"); //////////////////////////////////////////////////////////////////////
      // MathML alternates for KaTeX glyphs in the Unicode private area

      defineMacro("\\gvertneqq", "\\html@mathml{\\@gvertneqq}{\u2269}");
      defineMacro("\\lvertneqq", "\\html@mathml{\\@lvertneqq}{\u2268}");
      defineMacro("\\ngeqq", "\\html@mathml{\\@ngeqq}{\u2271}");
      defineMacro("\\ngeqslant", "\\html@mathml{\\@ngeqslant}{\u2271}");
      defineMacro("\\nleqq", "\\html@mathml{\\@nleqq}{\u2270}");
      defineMacro("\\nleqslant", "\\html@mathml{\\@nleqslant}{\u2270}");
      defineMacro("\\nshortmid", "\\html@mathml{\\@nshortmid}{∤}");
      defineMacro("\\nshortparallel", "\\html@mathml{\\@nshortparallel}{∦}");
      defineMacro("\\nsubseteqq", "\\html@mathml{\\@nsubseteqq}{\u2288}");
      defineMacro("\\nsupseteqq", "\\html@mathml{\\@nsupseteqq}{\u2289}");
      defineMacro("\\varsubsetneq", "\\html@mathml{\\@varsubsetneq}{⊊}");
      defineMacro("\\varsubsetneqq", "\\html@mathml{\\@varsubsetneqq}{⫋}");
      defineMacro("\\varsupsetneq", "\\html@mathml{\\@varsupsetneq}{⊋}");
      defineMacro("\\varsupsetneqq", "\\html@mathml{\\@varsupsetneqq}{⫌}"); //////////////////////////////////////////////////////////////////////
      // stmaryrd and semantic
      // The stmaryrd and semantic packages render the next four items by calling a
      // glyph. Those glyphs do not exist in the KaTeX fonts. Hence the macros.

      defineMacro("\\llbracket", "\\html@mathml{" + "\\mathopen{[\\mkern-3.2mu[}}" + "{\\mathopen{\\char`\u27E6}}");
      defineMacro("\\rrbracket", "\\html@mathml{" + "\\mathclose{]\\mkern-3.2mu]}}" + "{\\mathclose{\\char`\u27E7}}");
      defineMacro("\u27E6", "\\llbracket"); // blackboard bold [

      defineMacro("\u27E7", "\\rrbracket"); // blackboard bold ]

      defineMacro("\\lBrace", "\\html@mathml{" + "\\mathopen{\\{\\mkern-3.2mu[}}" + "{\\mathopen{\\char`\u2983}}");
      defineMacro("\\rBrace", "\\html@mathml{" + "\\mathclose{]\\mkern-3.2mu\\}}}" + "{\\mathclose{\\char`\u2984}}");
      defineMacro("\u2983", "\\lBrace"); // blackboard bold {

      defineMacro("\u2984", "\\rBrace"); // blackboard bold }
      // TODO: Create variable sized versions of the last two items. I believe that
      // will require new font glyphs.
      //////////////////////////////////////////////////////////////////////
      // texvc.sty
      // The texvc package contains macros available in mediawiki pages.
      // We omit the functions deprecated at
      // https://en.wikipedia.org/wiki/Help:Displaying_a_formula#Deprecated_syntax
      // We also omit texvc's \O, which conflicts with \text{\O}

      defineMacro("\\darr", "\\downarrow");
      defineMacro("\\dArr", "\\Downarrow");
      defineMacro("\\Darr", "\\Downarrow");
      defineMacro("\\lang", "\\langle");
      defineMacro("\\rang", "\\rangle");
      defineMacro("\\uarr", "\\uparrow");
      defineMacro("\\uArr", "\\Uparrow");
      defineMacro("\\Uarr", "\\Uparrow");
      defineMacro("\\N", "\\mathbb{N}");
      defineMacro("\\R", "\\mathbb{R}");
      defineMacro("\\Z", "\\mathbb{Z}");
      defineMacro("\\alef", "\\aleph");
      defineMacro("\\alefsym", "\\aleph");
      defineMacro("\\Alpha", "\\mathrm{A}");
      defineMacro("\\Beta", "\\mathrm{B}");
      defineMacro("\\bull", "\\bullet");
      defineMacro("\\Chi", "\\mathrm{X}");
      defineMacro("\\clubs", "\\clubsuit");
      defineMacro("\\cnums", "\\mathbb{C}");
      defineMacro("\\Complex", "\\mathbb{C}");
      defineMacro("\\Dagger", "\\ddagger");
      defineMacro("\\diamonds", "\\diamondsuit");
      defineMacro("\\empty", "\\emptyset");
      defineMacro("\\Epsilon", "\\mathrm{E}");
      defineMacro("\\Eta", "\\mathrm{H}");
      defineMacro("\\exist", "\\exists");
      defineMacro("\\harr", "\\leftrightarrow");
      defineMacro("\\hArr", "\\Leftrightarrow");
      defineMacro("\\Harr", "\\Leftrightarrow");
      defineMacro("\\hearts", "\\heartsuit");
      defineMacro("\\image", "\\Im");
      defineMacro("\\infin", "\\infty");
      defineMacro("\\Iota", "\\mathrm{I}");
      defineMacro("\\isin", "\\in");
      defineMacro("\\Kappa", "\\mathrm{K}");
      defineMacro("\\larr", "\\leftarrow");
      defineMacro("\\lArr", "\\Leftarrow");
      defineMacro("\\Larr", "\\Leftarrow");
      defineMacro("\\lrarr", "\\leftrightarrow");
      defineMacro("\\lrArr", "\\Leftrightarrow");
      defineMacro("\\Lrarr", "\\Leftrightarrow");
      defineMacro("\\Mu", "\\mathrm{M}");
      defineMacro("\\natnums", "\\mathbb{N}");
      defineMacro("\\Nu", "\\mathrm{N}");
      defineMacro("\\Omicron", "\\mathrm{O}");
      defineMacro("\\plusmn", "\\pm");
      defineMacro("\\rarr", "\\rightarrow");
      defineMacro("\\rArr", "\\Rightarrow");
      defineMacro("\\Rarr", "\\Rightarrow");
      defineMacro("\\real", "\\Re");
      defineMacro("\\reals", "\\mathbb{R}");
      defineMacro("\\Reals", "\\mathbb{R}");
      defineMacro("\\Rho", "\\mathrm{P}");
      defineMacro("\\sdot", "\\cdot");
      defineMacro("\\sect", "\\S");
      defineMacro("\\spades", "\\spadesuit");
      defineMacro("\\sub", "\\subset");
      defineMacro("\\sube", "\\subseteq");
      defineMacro("\\supe", "\\supseteq");
      defineMacro("\\Tau", "\\mathrm{T}");
      defineMacro("\\thetasym", "\\vartheta"); // TODO: defineMacro("\\varcoppa", "\\\mbox{\\coppa}");

      defineMacro("\\weierp", "\\wp");
      defineMacro("\\Zeta", "\\mathrm{Z}"); //////////////////////////////////////////////////////////////////////
      // statmath.sty
      // https://ctan.math.illinois.edu/macros/latex/contrib/statmath/statmath.pdf

      defineMacro("\\argmin", "\\DOTSB\\mathop{\\operatorname{arg\\,min}}\\limits");
      defineMacro("\\argmax", "\\DOTSB\\mathop{\\operatorname{arg\\,max}}\\limits"); // Custom Khan Academy colors, should be moved to an optional package

      defineMacro("\\blue", "\\textcolor{##6495ed}{#1}");
      defineMacro("\\orange", "\\textcolor{##ffa500}{#1}");
      defineMacro("\\pink", "\\textcolor{##ff00af}{#1}");
      defineMacro("\\red", "\\textcolor{##df0030}{#1}");
      defineMacro("\\green", "\\textcolor{##28ae7b}{#1}");
      defineMacro("\\gray", "\\textcolor{gray}{##1}");
      defineMacro("\\purple", "\\textcolor{##9d38bd}{#1}");
      defineMacro("\\blueA", "\\textcolor{##ccfaff}{#1}");
      defineMacro("\\blueB", "\\textcolor{##80f6ff}{#1}");
      defineMacro("\\blueC", "\\textcolor{##63d9ea}{#1}");
      defineMacro("\\blueD", "\\textcolor{##11accd}{#1}");
      defineMacro("\\blueE", "\\textcolor{##0c7f99}{#1}");
      defineMacro("\\tealA", "\\textcolor{##94fff5}{#1}");
      defineMacro("\\tealB", "\\textcolor{##26edd5}{#1}");
      defineMacro("\\tealC", "\\textcolor{##01d1c1}{#1}");
      defineMacro("\\tealD", "\\textcolor{##01a995}{#1}");
      defineMacro("\\tealE", "\\textcolor{##208170}{#1}");
      defineMacro("\\greenA", "\\textcolor{##b6ffb0}{#1}");
      defineMacro("\\greenB", "\\textcolor{##8af281}{#1}");
      defineMacro("\\greenC", "\\textcolor{##74cf70}{#1}");
      defineMacro("\\greenD", "\\textcolor{##1fab54}{#1}");
      defineMacro("\\greenE", "\\textcolor{##0d923f}{#1}");
      defineMacro("\\goldA", "\\textcolor{##ffd0a9}{#1}");
      defineMacro("\\goldB", "\\textcolor{##ffbb71}{#1}");
      defineMacro("\\goldC", "\\textcolor{##ff9c39}{#1}");
      defineMacro("\\goldD", "\\textcolor{##e07d10}{#1}");
      defineMacro("\\goldE", "\\textcolor{##a75a05}{#1}");
      defineMacro("\\redA", "\\textcolor{##fca9a9}{#1}");
      defineMacro("\\redB", "\\textcolor{##ff8482}{#1}");
      defineMacro("\\redC", "\\textcolor{##f9685d}{#1}");
      defineMacro("\\redD", "\\textcolor{##e84d39}{#1}");
      defineMacro("\\redE", "\\textcolor{##bc2612}{#1}");
      defineMacro("\\maroonA", "\\textcolor{##ffbde0}{#1}");
      defineMacro("\\maroonB", "\\textcolor{##ff92c6}{#1}");
      defineMacro("\\maroonC", "\\textcolor{##ed5fa6}{#1}");
      defineMacro("\\maroonD", "\\textcolor{##ca337c}{#1}");
      defineMacro("\\maroonE", "\\textcolor{##9e034e}{#1}");
      defineMacro("\\purpleA", "\\textcolor{##ddd7ff}{#1}");
      defineMacro("\\purpleB", "\\textcolor{##c6b9fc}{#1}");
      defineMacro("\\purpleC", "\\textcolor{##aa87ff}{#1}");
      defineMacro("\\purpleD", "\\textcolor{##7854ab}{#1}");
      defineMacro("\\purpleE", "\\textcolor{##543b78}{#1}");
      defineMacro("\\mintA", "\\textcolor{##f5f9e8}{#1}");
      defineMacro("\\mintB", "\\textcolor{##edf2df}{#1}");
      defineMacro("\\mintC", "\\textcolor{##e0e5cc}{#1}");
      defineMacro("\\grayA", "\\textcolor{##f6f7f7}{#1}");
      defineMacro("\\grayB", "\\textcolor{##f0f1f2}{#1}");
      defineMacro("\\grayC", "\\textcolor{##e3e5e6}{#1}");
      defineMacro("\\grayD", "\\textcolor{##d6d8da}{#1}");
      defineMacro("\\grayE", "\\textcolor{##babec2}{#1}");
      defineMacro("\\grayF", "\\textcolor{##888d93}{#1}");
      defineMacro("\\grayG", "\\textcolor{##626569}{#1}");
      defineMacro("\\grayH", "\\textcolor{##3b3e40}{#1}");
      defineMacro("\\grayI", "\\textcolor{##21242c}{#1}");
      defineMacro("\\kaBlue", "\\textcolor{##314453}{#1}");
      defineMacro("\\kaGreen", "\\textcolor{##71B307}{#1}"); // CONCATENATED MODULE: ./src/MacroExpander.js

      /**
       * This file contains the “gullet” where macros are expanded
       * until only non-macro tokens remain.
       */
      // List of commands that act like macros but aren't defined as a macro,
      // function, or symbol.  Used in `isDefined`.

      var implicitCommands = {
        "\\relax": true,
        // MacroExpander.js
        "^": true,
        // Parser.js
        "_": true,
        // Parser.js
        "\\limits": true,
        // Parser.js
        "\\nolimits": true // Parser.js

      };

      var MacroExpander_MacroExpander =
      /*#__PURE__*/
      function () {
        function MacroExpander(input, settings, mode) {
          this.settings = void 0;
          this.expansionCount = void 0;
          this.lexer = void 0;
          this.macros = void 0;
          this.stack = void 0;
          this.mode = void 0;
          this.settings = settings;
          this.expansionCount = 0;
          this.feed(input); // Make new global namespace

          this.macros = new Namespace_Namespace(macros, settings.macros);
          this.mode = mode;
          this.stack = []; // contains tokens in REVERSE order
        }
        /**
         * Feed a new input string to the same MacroExpander
         * (with existing macros etc.).
         */


        var _proto = MacroExpander.prototype;

        _proto.feed = function feed(input) {
          this.lexer = new Lexer_Lexer(input, this.settings);
        }
        /**
         * Switches between "text" and "math" modes.
         */
        ;

        _proto.switchMode = function switchMode(newMode) {
          this.mode = newMode;
        }
        /**
         * Start a new group nesting within all namespaces.
         */
        ;

        _proto.beginGroup = function beginGroup() {
          this.macros.beginGroup();
        }
        /**
         * End current group nesting within all namespaces.
         */
        ;

        _proto.endGroup = function endGroup() {
          this.macros.endGroup();
        }
        /**
         * Returns the topmost token on the stack, without expanding it.
         * Similar in behavior to TeX's `\futurelet`.
         */
        ;

        _proto.future = function future() {
          if (this.stack.length === 0) {
            this.pushToken(this.lexer.lex());
          }

          return this.stack[this.stack.length - 1];
        }
        /**
         * Remove and return the next unexpanded token.
         */
        ;

        _proto.popToken = function popToken() {
          this.future(); // ensure non-empty stack

          return this.stack.pop();
        }
        /**
         * Add a given token to the token stack.  In particular, this get be used
         * to put back a token returned from one of the other methods.
         */
        ;

        _proto.pushToken = function pushToken(token) {
          this.stack.push(token);
        }
        /**
         * Append an array of tokens to the token stack.
         */
        ;

        _proto.pushTokens = function pushTokens(tokens) {
          var _this$stack;

          (_this$stack = this.stack).push.apply(_this$stack, tokens);
        }
        /**
         * Consume all following space tokens, without expansion.
         */
        ;

        _proto.consumeSpaces = function consumeSpaces() {
          for (;;) {
            var token = this.future();

            if (token.text === " ") {
              this.stack.pop();
            } else {
              break;
            }
          }
        }
        /**
         * Consume the specified number of arguments from the token stream,
         * and return the resulting array of arguments.
         */
        ;

        _proto.consumeArgs = function consumeArgs(numArgs) {
          var args = []; // obtain arguments, either single token or balanced {…} group

          for (var i = 0; i < numArgs; ++i) {
            this.consumeSpaces(); // ignore spaces before each argument

            var startOfArg = this.popToken();

            if (startOfArg.text === "{") {
              var arg = [];
              var depth = 1;

              while (depth !== 0) {
                var tok = this.popToken();
                arg.push(tok);

                if (tok.text === "{") {
                  ++depth;
                } else if (tok.text === "}") {
                  --depth;
                } else if (tok.text === "EOF") {
                  throw new src_ParseError("End of input in macro argument", startOfArg);
                }
              }

              arg.pop(); // remove last }

              arg.reverse(); // like above, to fit in with stack order

              args[i] = arg;
            } else if (startOfArg.text === "EOF") {
              throw new src_ParseError("End of input expecting macro argument");
            } else {
              args[i] = [startOfArg];
            }
          }

          return args;
        }
        /**
         * Expand the next token only once if possible.
         *
         * If the token is expanded, the resulting tokens will be pushed onto
         * the stack in reverse order and will be returned as an array,
         * also in reverse order.
         *
         * If not, the next token will be returned without removing it
         * from the stack.  This case can be detected by a `Token` return value
         * instead of an `Array` return value.
         *
         * In either case, the next token will be on the top of the stack,
         * or the stack will be empty.
         *
         * Used to implement `expandAfterFuture` and `expandNextToken`.
         *
         * At the moment, macro expansion doesn't handle delimited macros,
         * i.e. things like those defined by \def\foo#1\end{…}.
         * See the TeX book page 202ff. for details on how those should behave.
         */
        ;

        _proto.expandOnce = function expandOnce() {
          var topToken = this.popToken();
          var name = topToken.text;

          var expansion = this._getExpansion(name);

          if (expansion == null) {
            // mainly checking for undefined here
            // Fully expanded
            this.pushToken(topToken);
            return topToken;
          }

          this.expansionCount++;

          if (this.expansionCount > this.settings.maxExpand) {
            throw new src_ParseError("Too many expansions: infinite loop or " + "need to increase maxExpand setting");
          }

          var tokens = expansion.tokens;

          if (expansion.numArgs) {
            var args = this.consumeArgs(expansion.numArgs); // paste arguments in place of the placeholders

            tokens = tokens.slice(); // make a shallow copy

            for (var i = tokens.length - 1; i >= 0; --i) {
              var tok = tokens[i];

              if (tok.text === "#") {
                if (i === 0) {
                  throw new src_ParseError("Incomplete placeholder at end of macro body", tok);
                }

                tok = tokens[--i]; // next token on stack

                if (tok.text === "#") {
                  // ## → #
                  tokens.splice(i + 1, 1); // drop first #
                } else if (/^[1-9]$/.test(tok.text)) {
                  var _tokens; // replace the placeholder with the indicated argument


                  (_tokens = tokens).splice.apply(_tokens, [i, 2].concat(args[+tok.text - 1]));
                } else {
                  throw new src_ParseError("Not a valid argument number", tok);
                }
              }
            }
          } // Concatenate expansion onto top of stack.


          this.pushTokens(tokens);
          return tokens;
        }
        /**
         * Expand the next token only once (if possible), and return the resulting
         * top token on the stack (without removing anything from the stack).
         * Similar in behavior to TeX's `\expandafter\futurelet`.
         * Equivalent to expandOnce() followed by future().
         */
        ;

        _proto.expandAfterFuture = function expandAfterFuture() {
          this.expandOnce();
          return this.future();
        }
        /**
         * Recursively expand first token, then return first non-expandable token.
         */
        ;

        _proto.expandNextToken = function expandNextToken() {
          for (;;) {
            var expanded = this.expandOnce(); // expandOnce returns Token if and only if it's fully expanded.

            if (expanded instanceof Token_Token) {
              // \relax stops the expansion, but shouldn't get returned (a
              // null return value couldn't get implemented as a function).
              if (expanded.text === "\\relax") {
                this.stack.pop();
              } else {
                return this.stack.pop(); // === expanded
              }
            }
          } // Flow unable to figure out that this pathway is impossible.
          // https://github.com/facebook/flow/issues/4808


          throw new Error(); // eslint-disable-line no-unreachable
        }
        /**
         * Fully expand the given macro name and return the resulting list of
         * tokens, or return `undefined` if no such macro is defined.
         */
        ;

        _proto.expandMacro = function expandMacro(name) {
          if (!this.macros.get(name)) {
            return undefined;
          }

          var output = [];
          var oldStackLength = this.stack.length;
          this.pushToken(new Token_Token(name));

          while (this.stack.length > oldStackLength) {
            var expanded = this.expandOnce(); // expandOnce returns Token if and only if it's fully expanded.

            if (expanded instanceof Token_Token) {
              output.push(this.stack.pop());
            }
          }

          return output;
        }
        /**
         * Fully expand the given macro name and return the result as a string,
         * or return `undefined` if no such macro is defined.
         */
        ;

        _proto.expandMacroAsText = function expandMacroAsText(name) {
          var tokens = this.expandMacro(name);

          if (tokens) {
            return tokens.map(function (token) {
              return token.text;
            }).join("");
          } else {
            return tokens;
          }
        }
        /**
         * Returns the expanded macro as a reversed array of tokens and a macro
         * argument count.  Or returns `null` if no such macro.
         */
        ;

        _proto._getExpansion = function _getExpansion(name) {
          var definition = this.macros.get(name);

          if (definition == null) {
            // mainly checking for undefined here
            return definition;
          }

          var expansion = typeof definition === "function" ? definition(this) : definition;

          if (typeof expansion === "string") {
            var numArgs = 0;

            if (expansion.indexOf("#") !== -1) {
              var stripped = expansion.replace(/##/g, "");

              while (stripped.indexOf("#" + (numArgs + 1)) !== -1) {
                ++numArgs;
              }
            }

            var bodyLexer = new Lexer_Lexer(expansion, this.settings);
            var tokens = [];
            var tok = bodyLexer.lex();

            while (tok.text !== "EOF") {
              tokens.push(tok);
              tok = bodyLexer.lex();
            }

            tokens.reverse(); // to fit in with stack using push and pop

            var expanded = {
              tokens: tokens,
              numArgs: numArgs
            };
            return expanded;
          }

          return expansion;
        }
        /**
         * Determine whether a command is currently "defined" (has some
         * functionality), meaning that it's a macro (in the current group),
         * a function, a symbol, or one of the special commands listed in
         * `implicitCommands`.
         */
        ;

        _proto.isDefined = function isDefined(name) {
          return this.macros.has(name) || src_functions.hasOwnProperty(name) || src_symbols.math.hasOwnProperty(name) || src_symbols.text.hasOwnProperty(name) || implicitCommands.hasOwnProperty(name);
        };

        return MacroExpander;
      }(); // CONCATENATED MODULE: ./src/unicodeAccents.js
      // Mapping of Unicode accent characters to their LaTeX equivalent in text and
      // math mode (when they exist).

      /* harmony default export */


      var unicodeAccents = {
        "\u0301": {
          text: "\\'",
          math: '\\acute'
        },
        "\u0300": {
          text: '\\`',
          math: '\\grave'
        },
        "\u0308": {
          text: '\\"',
          math: '\\ddot'
        },
        "\u0303": {
          text: '\\~',
          math: '\\tilde'
        },
        "\u0304": {
          text: '\\=',
          math: '\\bar'
        },
        "\u0306": {
          text: "\\u",
          math: '\\breve'
        },
        "\u030C": {
          text: '\\v',
          math: '\\check'
        },
        "\u0302": {
          text: '\\^',
          math: '\\hat'
        },
        "\u0307": {
          text: '\\.',
          math: '\\dot'
        },
        "\u030A": {
          text: '\\r',
          math: '\\mathring'
        },
        "\u030B": {
          text: '\\H'
        }
      }; // CONCATENATED MODULE: ./src/unicodeSymbols.js
      // This file is GENERATED by unicodeMake.js. DO NOT MODIFY.

      /* harmony default export */

      var unicodeSymbols = {
        "\xE1": "a\u0301",
        // á = \'{a}
        "\xE0": "a\u0300",
        // à = \`{a}
        "\xE4": "a\u0308",
        // ä = \"{a}
        "\u01DF": "a\u0308\u0304",
        // ǟ = \"\={a}
        "\xE3": "a\u0303",
        // ã = \~{a}
        "\u0101": "a\u0304",
        // ā = \={a}
        "\u0103": "a\u0306",
        // ă = \u{a}
        "\u1EAF": "a\u0306\u0301",
        // ắ = \u\'{a}
        "\u1EB1": "a\u0306\u0300",
        // ằ = \u\`{a}
        "\u1EB5": "a\u0306\u0303",
        // ẵ = \u\~{a}
        "\u01CE": "a\u030C",
        // ǎ = \v{a}
        "\xE2": "a\u0302",
        // â = \^{a}
        "\u1EA5": "a\u0302\u0301",
        // ấ = \^\'{a}
        "\u1EA7": "a\u0302\u0300",
        // ầ = \^\`{a}
        "\u1EAB": "a\u0302\u0303",
        // ẫ = \^\~{a}
        "\u0227": "a\u0307",
        // ȧ = \.{a}
        "\u01E1": "a\u0307\u0304",
        // ǡ = \.\={a}
        "\xE5": "a\u030A",
        // å = \r{a}
        "\u01FB": "a\u030A\u0301",
        // ǻ = \r\'{a}
        "\u1E03": "b\u0307",
        // ḃ = \.{b}
        "\u0107": "c\u0301",
        // ć = \'{c}
        "\u010D": "c\u030C",
        // č = \v{c}
        "\u0109": "c\u0302",
        // ĉ = \^{c}
        "\u010B": "c\u0307",
        // ċ = \.{c}
        "\u010F": "d\u030C",
        // ď = \v{d}
        "\u1E0B": "d\u0307",
        // ḋ = \.{d}
        "\xE9": "e\u0301",
        // é = \'{e}
        "\xE8": "e\u0300",
        // è = \`{e}
        "\xEB": "e\u0308",
        // ë = \"{e}
        "\u1EBD": "e\u0303",
        // ẽ = \~{e}
        "\u0113": "e\u0304",
        // ē = \={e}
        "\u1E17": "e\u0304\u0301",
        // ḗ = \=\'{e}
        "\u1E15": "e\u0304\u0300",
        // ḕ = \=\`{e}
        "\u0115": "e\u0306",
        // ĕ = \u{e}
        "\u011B": "e\u030C",
        // ě = \v{e}
        "\xEA": "e\u0302",
        // ê = \^{e}
        "\u1EBF": "e\u0302\u0301",
        // ế = \^\'{e}
        "\u1EC1": "e\u0302\u0300",
        // ề = \^\`{e}
        "\u1EC5": "e\u0302\u0303",
        // ễ = \^\~{e}
        "\u0117": "e\u0307",
        // ė = \.{e}
        "\u1E1F": "f\u0307",
        // ḟ = \.{f}
        "\u01F5": "g\u0301",
        // ǵ = \'{g}
        "\u1E21": "g\u0304",
        // ḡ = \={g}
        "\u011F": "g\u0306",
        // ğ = \u{g}
        "\u01E7": "g\u030C",
        // ǧ = \v{g}
        "\u011D": "g\u0302",
        // ĝ = \^{g}
        "\u0121": "g\u0307",
        // ġ = \.{g}
        "\u1E27": "h\u0308",
        // ḧ = \"{h}
        "\u021F": "h\u030C",
        // ȟ = \v{h}
        "\u0125": "h\u0302",
        // ĥ = \^{h}
        "\u1E23": "h\u0307",
        // ḣ = \.{h}
        "\xED": "i\u0301",
        // í = \'{i}
        "\xEC": "i\u0300",
        // ì = \`{i}
        "\xEF": "i\u0308",
        // ï = \"{i}
        "\u1E2F": "i\u0308\u0301",
        // ḯ = \"\'{i}
        "\u0129": "i\u0303",
        // ĩ = \~{i}
        "\u012B": "i\u0304",
        // ī = \={i}
        "\u012D": "i\u0306",
        // ĭ = \u{i}
        "\u01D0": "i\u030C",
        // ǐ = \v{i}
        "\xEE": "i\u0302",
        // î = \^{i}
        "\u01F0": "j\u030C",
        // ǰ = \v{j}
        "\u0135": "j\u0302",
        // ĵ = \^{j}
        "\u1E31": "k\u0301",
        // ḱ = \'{k}
        "\u01E9": "k\u030C",
        // ǩ = \v{k}
        "\u013A": "l\u0301",
        // ĺ = \'{l}
        "\u013E": "l\u030C",
        // ľ = \v{l}
        "\u1E3F": "m\u0301",
        // ḿ = \'{m}
        "\u1E41": "m\u0307",
        // ṁ = \.{m}
        "\u0144": "n\u0301",
        // ń = \'{n}
        "\u01F9": "n\u0300",
        // ǹ = \`{n}
        "\xF1": "n\u0303",
        // ñ = \~{n}
        "\u0148": "n\u030C",
        // ň = \v{n}
        "\u1E45": "n\u0307",
        // ṅ = \.{n}
        "\xF3": "o\u0301",
        // ó = \'{o}
        "\xF2": "o\u0300",
        // ò = \`{o}
        "\xF6": "o\u0308",
        // ö = \"{o}
        "\u022B": "o\u0308\u0304",
        // ȫ = \"\={o}
        "\xF5": "o\u0303",
        // õ = \~{o}
        "\u1E4D": "o\u0303\u0301",
        // ṍ = \~\'{o}
        "\u1E4F": "o\u0303\u0308",
        // ṏ = \~\"{o}
        "\u022D": "o\u0303\u0304",
        // ȭ = \~\={o}
        "\u014D": "o\u0304",
        // ō = \={o}
        "\u1E53": "o\u0304\u0301",
        // ṓ = \=\'{o}
        "\u1E51": "o\u0304\u0300",
        // ṑ = \=\`{o}
        "\u014F": "o\u0306",
        // ŏ = \u{o}
        "\u01D2": "o\u030C",
        // ǒ = \v{o}
        "\xF4": "o\u0302",
        // ô = \^{o}
        "\u1ED1": "o\u0302\u0301",
        // ố = \^\'{o}
        "\u1ED3": "o\u0302\u0300",
        // ồ = \^\`{o}
        "\u1ED7": "o\u0302\u0303",
        // ỗ = \^\~{o}
        "\u022F": "o\u0307",
        // ȯ = \.{o}
        "\u0231": "o\u0307\u0304",
        // ȱ = \.\={o}
        "\u0151": "o\u030B",
        // ő = \H{o}
        "\u1E55": "p\u0301",
        // ṕ = \'{p}
        "\u1E57": "p\u0307",
        // ṗ = \.{p}
        "\u0155": "r\u0301",
        // ŕ = \'{r}
        "\u0159": "r\u030C",
        // ř = \v{r}
        "\u1E59": "r\u0307",
        // ṙ = \.{r}
        "\u015B": "s\u0301",
        // ś = \'{s}
        "\u1E65": "s\u0301\u0307",
        // ṥ = \'\.{s}
        "\u0161": "s\u030C",
        // š = \v{s}
        "\u1E67": "s\u030C\u0307",
        // ṧ = \v\.{s}
        "\u015D": "s\u0302",
        // ŝ = \^{s}
        "\u1E61": "s\u0307",
        // ṡ = \.{s}
        "\u1E97": "t\u0308",
        // ẗ = \"{t}
        "\u0165": "t\u030C",
        // ť = \v{t}
        "\u1E6B": "t\u0307",
        // ṫ = \.{t}
        "\xFA": "u\u0301",
        // ú = \'{u}
        "\xF9": "u\u0300",
        // ù = \`{u}
        "\xFC": "u\u0308",
        // ü = \"{u}
        "\u01D8": "u\u0308\u0301",
        // ǘ = \"\'{u}
        "\u01DC": "u\u0308\u0300",
        // ǜ = \"\`{u}
        "\u01D6": "u\u0308\u0304",
        // ǖ = \"\={u}
        "\u01DA": "u\u0308\u030C",
        // ǚ = \"\v{u}
        "\u0169": "u\u0303",
        // ũ = \~{u}
        "\u1E79": "u\u0303\u0301",
        // ṹ = \~\'{u}
        "\u016B": "u\u0304",
        // ū = \={u}
        "\u1E7B": "u\u0304\u0308",
        // ṻ = \=\"{u}
        "\u016D": "u\u0306",
        // ŭ = \u{u}
        "\u01D4": "u\u030C",
        // ǔ = \v{u}
        "\xFB": "u\u0302",
        // û = \^{u}
        "\u016F": "u\u030A",
        // ů = \r{u}
        "\u0171": "u\u030B",
        // ű = \H{u}
        "\u1E7D": "v\u0303",
        // ṽ = \~{v}
        "\u1E83": "w\u0301",
        // ẃ = \'{w}
        "\u1E81": "w\u0300",
        // ẁ = \`{w}
        "\u1E85": "w\u0308",
        // ẅ = \"{w}
        "\u0175": "w\u0302",
        // ŵ = \^{w}
        "\u1E87": "w\u0307",
        // ẇ = \.{w}
        "\u1E98": "w\u030A",
        // ẘ = \r{w}
        "\u1E8D": "x\u0308",
        // ẍ = \"{x}
        "\u1E8B": "x\u0307",
        // ẋ = \.{x}
        "\xFD": "y\u0301",
        // ý = \'{y}
        "\u1EF3": "y\u0300",
        // ỳ = \`{y}
        "\xFF": "y\u0308",
        // ÿ = \"{y}
        "\u1EF9": "y\u0303",
        // ỹ = \~{y}
        "\u0233": "y\u0304",
        // ȳ = \={y}
        "\u0177": "y\u0302",
        // ŷ = \^{y}
        "\u1E8F": "y\u0307",
        // ẏ = \.{y}
        "\u1E99": "y\u030A",
        // ẙ = \r{y}
        "\u017A": "z\u0301",
        // ź = \'{z}
        "\u017E": "z\u030C",
        // ž = \v{z}
        "\u1E91": "z\u0302",
        // ẑ = \^{z}
        "\u017C": "z\u0307",
        // ż = \.{z}
        "\xC1": "A\u0301",
        // Á = \'{A}
        "\xC0": "A\u0300",
        // À = \`{A}
        "\xC4": "A\u0308",
        // Ä = \"{A}
        "\u01DE": "A\u0308\u0304",
        // Ǟ = \"\={A}
        "\xC3": "A\u0303",
        // Ã = \~{A}
        "\u0100": "A\u0304",
        // Ā = \={A}
        "\u0102": "A\u0306",
        // Ă = \u{A}
        "\u1EAE": "A\u0306\u0301",
        // Ắ = \u\'{A}
        "\u1EB0": "A\u0306\u0300",
        // Ằ = \u\`{A}
        "\u1EB4": "A\u0306\u0303",
        // Ẵ = \u\~{A}
        "\u01CD": "A\u030C",
        // Ǎ = \v{A}
        "\xC2": "A\u0302",
        // Â = \^{A}
        "\u1EA4": "A\u0302\u0301",
        // Ấ = \^\'{A}
        "\u1EA6": "A\u0302\u0300",
        // Ầ = \^\`{A}
        "\u1EAA": "A\u0302\u0303",
        // Ẫ = \^\~{A}
        "\u0226": "A\u0307",
        // Ȧ = \.{A}
        "\u01E0": "A\u0307\u0304",
        // Ǡ = \.\={A}
        "\xC5": "A\u030A",
        // Å = \r{A}
        "\u01FA": "A\u030A\u0301",
        // Ǻ = \r\'{A}
        "\u1E02": "B\u0307",
        // Ḃ = \.{B}
        "\u0106": "C\u0301",
        // Ć = \'{C}
        "\u010C": "C\u030C",
        // Č = \v{C}
        "\u0108": "C\u0302",
        // Ĉ = \^{C}
        "\u010A": "C\u0307",
        // Ċ = \.{C}
        "\u010E": "D\u030C",
        // Ď = \v{D}
        "\u1E0A": "D\u0307",
        // Ḋ = \.{D}
        "\xC9": "E\u0301",
        // É = \'{E}
        "\xC8": "E\u0300",
        // È = \`{E}
        "\xCB": "E\u0308",
        // Ë = \"{E}
        "\u1EBC": "E\u0303",
        // Ẽ = \~{E}
        "\u0112": "E\u0304",
        // Ē = \={E}
        "\u1E16": "E\u0304\u0301",
        // Ḗ = \=\'{E}
        "\u1E14": "E\u0304\u0300",
        // Ḕ = \=\`{E}
        "\u0114": "E\u0306",
        // Ĕ = \u{E}
        "\u011A": "E\u030C",
        // Ě = \v{E}
        "\xCA": "E\u0302",
        // Ê = \^{E}
        "\u1EBE": "E\u0302\u0301",
        // Ế = \^\'{E}
        "\u1EC0": "E\u0302\u0300",
        // Ề = \^\`{E}
        "\u1EC4": "E\u0302\u0303",
        // Ễ = \^\~{E}
        "\u0116": "E\u0307",
        // Ė = \.{E}
        "\u1E1E": "F\u0307",
        // Ḟ = \.{F}
        "\u01F4": "G\u0301",
        // Ǵ = \'{G}
        "\u1E20": "G\u0304",
        // Ḡ = \={G}
        "\u011E": "G\u0306",
        // Ğ = \u{G}
        "\u01E6": "G\u030C",
        // Ǧ = \v{G}
        "\u011C": "G\u0302",
        // Ĝ = \^{G}
        "\u0120": "G\u0307",
        // Ġ = \.{G}
        "\u1E26": "H\u0308",
        // Ḧ = \"{H}
        "\u021E": "H\u030C",
        // Ȟ = \v{H}
        "\u0124": "H\u0302",
        // Ĥ = \^{H}
        "\u1E22": "H\u0307",
        // Ḣ = \.{H}
        "\xCD": "I\u0301",
        // Í = \'{I}
        "\xCC": "I\u0300",
        // Ì = \`{I}
        "\xCF": "I\u0308",
        // Ï = \"{I}
        "\u1E2E": "I\u0308\u0301",
        // Ḯ = \"\'{I}
        "\u0128": "I\u0303",
        // Ĩ = \~{I}
        "\u012A": "I\u0304",
        // Ī = \={I}
        "\u012C": "I\u0306",
        // Ĭ = \u{I}
        "\u01CF": "I\u030C",
        // Ǐ = \v{I}
        "\xCE": "I\u0302",
        // Î = \^{I}
        "\u0130": "I\u0307",
        // İ = \.{I}
        "\u0134": "J\u0302",
        // Ĵ = \^{J}
        "\u1E30": "K\u0301",
        // Ḱ = \'{K}
        "\u01E8": "K\u030C",
        // Ǩ = \v{K}
        "\u0139": "L\u0301",
        // Ĺ = \'{L}
        "\u013D": "L\u030C",
        // Ľ = \v{L}
        "\u1E3E": "M\u0301",
        // Ḿ = \'{M}
        "\u1E40": "M\u0307",
        // Ṁ = \.{M}
        "\u0143": "N\u0301",
        // Ń = \'{N}
        "\u01F8": "N\u0300",
        // Ǹ = \`{N}
        "\xD1": "N\u0303",
        // Ñ = \~{N}
        "\u0147": "N\u030C",
        // Ň = \v{N}
        "\u1E44": "N\u0307",
        // Ṅ = \.{N}
        "\xD3": "O\u0301",
        // Ó = \'{O}
        "\xD2": "O\u0300",
        // Ò = \`{O}
        "\xD6": "O\u0308",
        // Ö = \"{O}
        "\u022A": "O\u0308\u0304",
        // Ȫ = \"\={O}
        "\xD5": "O\u0303",
        // Õ = \~{O}
        "\u1E4C": "O\u0303\u0301",
        // Ṍ = \~\'{O}
        "\u1E4E": "O\u0303\u0308",
        // Ṏ = \~\"{O}
        "\u022C": "O\u0303\u0304",
        // Ȭ = \~\={O}
        "\u014C": "O\u0304",
        // Ō = \={O}
        "\u1E52": "O\u0304\u0301",
        // Ṓ = \=\'{O}
        "\u1E50": "O\u0304\u0300",
        // Ṑ = \=\`{O}
        "\u014E": "O\u0306",
        // Ŏ = \u{O}
        "\u01D1": "O\u030C",
        // Ǒ = \v{O}
        "\xD4": "O\u0302",
        // Ô = \^{O}
        "\u1ED0": "O\u0302\u0301",
        // Ố = \^\'{O}
        "\u1ED2": "O\u0302\u0300",
        // Ồ = \^\`{O}
        "\u1ED6": "O\u0302\u0303",
        // Ỗ = \^\~{O}
        "\u022E": "O\u0307",
        // Ȯ = \.{O}
        "\u0230": "O\u0307\u0304",
        // Ȱ = \.\={O}
        "\u0150": "O\u030B",
        // Ő = \H{O}
        "\u1E54": "P\u0301",
        // Ṕ = \'{P}
        "\u1E56": "P\u0307",
        // Ṗ = \.{P}
        "\u0154": "R\u0301",
        // Ŕ = \'{R}
        "\u0158": "R\u030C",
        // Ř = \v{R}
        "\u1E58": "R\u0307",
        // Ṙ = \.{R}
        "\u015A": "S\u0301",
        // Ś = \'{S}
        "\u1E64": "S\u0301\u0307",
        // Ṥ = \'\.{S}
        "\u0160": "S\u030C",
        // Š = \v{S}
        "\u1E66": "S\u030C\u0307",
        // Ṧ = \v\.{S}
        "\u015C": "S\u0302",
        // Ŝ = \^{S}
        "\u1E60": "S\u0307",
        // Ṡ = \.{S}
        "\u0164": "T\u030C",
        // Ť = \v{T}
        "\u1E6A": "T\u0307",
        // Ṫ = \.{T}
        "\xDA": "U\u0301",
        // Ú = \'{U}
        "\xD9": "U\u0300",
        // Ù = \`{U}
        "\xDC": "U\u0308",
        // Ü = \"{U}
        "\u01D7": "U\u0308\u0301",
        // Ǘ = \"\'{U}
        "\u01DB": "U\u0308\u0300",
        // Ǜ = \"\`{U}
        "\u01D5": "U\u0308\u0304",
        // Ǖ = \"\={U}
        "\u01D9": "U\u0308\u030C",
        // Ǚ = \"\v{U}
        "\u0168": "U\u0303",
        // Ũ = \~{U}
        "\u1E78": "U\u0303\u0301",
        // Ṹ = \~\'{U}
        "\u016A": "U\u0304",
        // Ū = \={U}
        "\u1E7A": "U\u0304\u0308",
        // Ṻ = \=\"{U}
        "\u016C": "U\u0306",
        // Ŭ = \u{U}
        "\u01D3": "U\u030C",
        // Ǔ = \v{U}
        "\xDB": "U\u0302",
        // Û = \^{U}
        "\u016E": "U\u030A",
        // Ů = \r{U}
        "\u0170": "U\u030B",
        // Ű = \H{U}
        "\u1E7C": "V\u0303",
        // Ṽ = \~{V}
        "\u1E82": "W\u0301",
        // Ẃ = \'{W}
        "\u1E80": "W\u0300",
        // Ẁ = \`{W}
        "\u1E84": "W\u0308",
        // Ẅ = \"{W}
        "\u0174": "W\u0302",
        // Ŵ = \^{W}
        "\u1E86": "W\u0307",
        // Ẇ = \.{W}
        "\u1E8C": "X\u0308",
        // Ẍ = \"{X}
        "\u1E8A": "X\u0307",
        // Ẋ = \.{X}
        "\xDD": "Y\u0301",
        // Ý = \'{Y}
        "\u1EF2": "Y\u0300",
        // Ỳ = \`{Y}
        "\u0178": "Y\u0308",
        // Ÿ = \"{Y}
        "\u1EF8": "Y\u0303",
        // Ỹ = \~{Y}
        "\u0232": "Y\u0304",
        // Ȳ = \={Y}
        "\u0176": "Y\u0302",
        // Ŷ = \^{Y}
        "\u1E8E": "Y\u0307",
        // Ẏ = \.{Y}
        "\u0179": "Z\u0301",
        // Ź = \'{Z}
        "\u017D": "Z\u030C",
        // Ž = \v{Z}
        "\u1E90": "Z\u0302",
        // Ẑ = \^{Z}
        "\u017B": "Z\u0307",
        // Ż = \.{Z}
        "\u03AC": "\u03B1\u0301",
        // ά = \'{α}
        "\u1F70": "\u03B1\u0300",
        // ὰ = \`{α}
        "\u1FB1": "\u03B1\u0304",
        // ᾱ = \={α}
        "\u1FB0": "\u03B1\u0306",
        // ᾰ = \u{α}
        "\u03AD": "\u03B5\u0301",
        // έ = \'{ε}
        "\u1F72": "\u03B5\u0300",
        // ὲ = \`{ε}
        "\u03AE": "\u03B7\u0301",
        // ή = \'{η}
        "\u1F74": "\u03B7\u0300",
        // ὴ = \`{η}
        "\u03AF": "\u03B9\u0301",
        // ί = \'{ι}
        "\u1F76": "\u03B9\u0300",
        // ὶ = \`{ι}
        "\u03CA": "\u03B9\u0308",
        // ϊ = \"{ι}
        "\u0390": "\u03B9\u0308\u0301",
        // ΐ = \"\'{ι}
        "\u1FD2": "\u03B9\u0308\u0300",
        // ῒ = \"\`{ι}
        "\u1FD1": "\u03B9\u0304",
        // ῑ = \={ι}
        "\u1FD0": "\u03B9\u0306",
        // ῐ = \u{ι}
        "\u03CC": "\u03BF\u0301",
        // ό = \'{ο}
        "\u1F78": "\u03BF\u0300",
        // ὸ = \`{ο}
        "\u03CD": "\u03C5\u0301",
        // ύ = \'{υ}
        "\u1F7A": "\u03C5\u0300",
        // ὺ = \`{υ}
        "\u03CB": "\u03C5\u0308",
        // ϋ = \"{υ}
        "\u03B0": "\u03C5\u0308\u0301",
        // ΰ = \"\'{υ}
        "\u1FE2": "\u03C5\u0308\u0300",
        // ῢ = \"\`{υ}
        "\u1FE1": "\u03C5\u0304",
        // ῡ = \={υ}
        "\u1FE0": "\u03C5\u0306",
        // ῠ = \u{υ}
        "\u03CE": "\u03C9\u0301",
        // ώ = \'{ω}
        "\u1F7C": "\u03C9\u0300",
        // ὼ = \`{ω}
        "\u038E": "\u03A5\u0301",
        // Ύ = \'{Υ}
        "\u1FEA": "\u03A5\u0300",
        // Ὺ = \`{Υ}
        "\u03AB": "\u03A5\u0308",
        // Ϋ = \"{Υ}
        "\u1FE9": "\u03A5\u0304",
        // Ῡ = \={Υ}
        "\u1FE8": "\u03A5\u0306",
        // Ῠ = \u{Υ}
        "\u038F": "\u03A9\u0301",
        // Ώ = \'{Ω}
        "\u1FFA": "\u03A9\u0300" // Ὼ = \`{Ω}

      }; // CONCATENATED MODULE: ./src/Parser.js

      /* eslint no-constant-condition:0 */

      /**
       * This file contains the parser used to parse out a TeX expression from the
       * input. Since TeX isn't context-free, standard parsers don't work particularly
       * well.
       *
       * The strategy of this parser is as such:
       *
       * The main functions (the `.parse...` ones) take a position in the current
       * parse string to parse tokens from. The lexer (found in Lexer.js, stored at
       * this.gullet.lexer) also supports pulling out tokens at arbitrary places. When
       * individual tokens are needed at a position, the lexer is called to pull out a
       * token, which is then used.
       *
       * The parser has a property called "mode" indicating the mode that
       * the parser is currently in. Currently it has to be one of "math" or
       * "text", which denotes whether the current environment is a math-y
       * one or a text-y one (e.g. inside \text). Currently, this serves to
       * limit the functions which can be used in text mode.
       *
       * The main functions then return an object which contains the useful data that
       * was parsed at its given point, and a new position at the end of the parsed
       * data. The main functions can call each other and continue the parsing by
       * using the returned position as a new starting point.
       *
       * There are also extra `.handle...` functions, which pull out some reused
       * functionality into self-contained functions.
       *
       * The functions return ParseNodes.
       */

      var Parser_Parser =
      /*#__PURE__*/
      function () {
        function Parser(input, settings) {
          this.mode = void 0;
          this.gullet = void 0;
          this.settings = void 0;
          this.leftrightDepth = void 0;
          this.nextToken = void 0; // Start in math mode

          this.mode = "math"; // Create a new macro expander (gullet) and (indirectly via that) also a
          // new lexer (mouth) for this parser (stomach, in the language of TeX)

          this.gullet = new MacroExpander_MacroExpander(input, settings, this.mode); // Store the settings for use in parsing

          this.settings = settings; // Count leftright depth (for \middle errors)

          this.leftrightDepth = 0;
        }
        /**
         * Checks a result to make sure it has the right type, and throws an
         * appropriate error otherwise.
         */


        var _proto = Parser.prototype;

        _proto.expect = function expect(text, consume) {
          if (consume === void 0) {
            consume = true;
          }

          if (this.nextToken.text !== text) {
            throw new src_ParseError("Expected '" + text + "', got '" + this.nextToken.text + "'", this.nextToken);
          }

          if (consume) {
            this.consume();
          }
        }
        /**
         * Considers the current look ahead token as consumed,
         * and fetches the one after that as the new look ahead.
         */
        ;

        _proto.consume = function consume() {
          this.nextToken = this.gullet.expandNextToken();
        }
        /**
         * Switches between "text" and "math" modes.
         */
        ;

        _proto.switchMode = function switchMode(newMode) {
          this.mode = newMode;
          this.gullet.switchMode(newMode);
        }
        /**
         * Main parsing function, which parses an entire input.
         */
        ;

        _proto.parse = function parse() {
          // Create a group namespace for the math expression.
          // (LaTeX creates a new group for every $...$, $$...$$, \[...\].)
          this.gullet.beginGroup(); // Use old \color behavior (same as LaTeX's \textcolor) if requested.
          // We do this within the group for the math expression, so it doesn't
          // pollute settings.macros.

          if (this.settings.colorIsTextColor) {
            this.gullet.macros.set("\\color", "\\textcolor");
          } // Try to parse the input


          this.consume();
          var parse = this.parseExpression(false); // If we succeeded, make sure there's an EOF at the end

          this.expect("EOF", false); // End the group namespace for the expression

          this.gullet.endGroup();
          return parse;
        };

        _proto.parseExpression = function parseExpression(breakOnInfix, breakOnTokenText) {
          var body = []; // Keep adding atoms to the body until we can't parse any more atoms (either
          // we reached the end, a }, or a \right)

          while (true) {
            // Ignore spaces in math mode
            if (this.mode === "math") {
              this.consumeSpaces();
            }

            var lex = this.nextToken;

            if (Parser.endOfExpression.indexOf(lex.text) !== -1) {
              break;
            }

            if (breakOnTokenText && lex.text === breakOnTokenText) {
              break;
            }

            if (breakOnInfix && src_functions[lex.text] && src_functions[lex.text].infix) {
              break;
            }

            var atom = this.parseAtom(breakOnTokenText);

            if (!atom) {
              break;
            }

            body.push(atom);
          }

          if (this.mode === "text") {
            this.formLigatures(body);
          }

          return this.handleInfixNodes(body);
        }
        /**
         * Rewrites infix operators such as \over with corresponding commands such
         * as \frac.
         *
         * There can only be one infix operator per group.  If there's more than one
         * then the expression is ambiguous.  This can be resolved by adding {}.
         */
        ;

        _proto.handleInfixNodes = function handleInfixNodes(body) {
          var overIndex = -1;
          var funcName;

          for (var i = 0; i < body.length; i++) {
            var node = checkNodeType(body[i], "infix");

            if (node) {
              if (overIndex !== -1) {
                throw new src_ParseError("only one infix operator per group", node.token);
              }

              overIndex = i;
              funcName = node.replaceWith;
            }
          }

          if (overIndex !== -1 && funcName) {
            var numerNode;
            var denomNode;
            var numerBody = body.slice(0, overIndex);
            var denomBody = body.slice(overIndex + 1);

            if (numerBody.length === 1 && numerBody[0].type === "ordgroup") {
              numerNode = numerBody[0];
            } else {
              numerNode = {
                type: "ordgroup",
                mode: this.mode,
                body: numerBody
              };
            }

            if (denomBody.length === 1 && denomBody[0].type === "ordgroup") {
              denomNode = denomBody[0];
            } else {
              denomNode = {
                type: "ordgroup",
                mode: this.mode,
                body: denomBody
              };
            }

            var _node;

            if (funcName === "\\\\abovefrac") {
              _node = this.callFunction(funcName, [numerNode, body[overIndex], denomNode], []);
            } else {
              _node = this.callFunction(funcName, [numerNode, denomNode], []);
            }

            return [_node];
          } else {
            return body;
          }
        } // The greediness of a superscript or subscript
        ;
        /**
         * Handle a subscript or superscript with nice errors.
         */


        _proto.handleSupSubscript = function handleSupSubscript(name) {
          var symbolToken = this.nextToken;
          var symbol = symbolToken.text;
          this.consume();
          this.consumeSpaces(); // ignore spaces before sup/subscript argument

          var group = this.parseGroup(name, false, Parser.SUPSUB_GREEDINESS);

          if (!group) {
            throw new src_ParseError("Expected group after '" + symbol + "'", symbolToken);
          }

          return group;
        }
        /**
         * Converts the textual input of an unsupported command into a text node
         * contained within a color node whose color is determined by errorColor
         */
        ;

        _proto.handleUnsupportedCmd = function handleUnsupportedCmd() {
          var text = this.nextToken.text;
          var textordArray = [];

          for (var i = 0; i < text.length; i++) {
            textordArray.push({
              type: "textord",
              mode: "text",
              text: text[i]
            });
          }

          var textNode = {
            type: "text",
            mode: this.mode,
            body: textordArray
          };
          var colorNode = {
            type: "color",
            mode: this.mode,
            color: this.settings.errorColor,
            body: [textNode]
          };
          this.consume();
          return colorNode;
        }
        /**
         * Parses a group with optional super/subscripts.
         */
        ;

        _proto.parseAtom = function parseAtom(breakOnTokenText) {
          // The body of an atom is an implicit group, so that things like
          // \left(x\right)^2 work correctly.
          var base = this.parseGroup("atom", false, null, breakOnTokenText); // In text mode, we don't have superscripts or subscripts

          if (this.mode === "text") {
            return base;
          } // Note that base may be empty (i.e. null) at this point.


          var superscript;
          var subscript;

          while (true) {
            // Guaranteed in math mode, so eat any spaces first.
            this.consumeSpaces(); // Lex the first token

            var lex = this.nextToken;

            if (lex.text === "\\limits" || lex.text === "\\nolimits") {
              // We got a limit control
              var opNode = checkNodeType(base, "op");

              if (opNode) {
                var limits = lex.text === "\\limits";
                opNode.limits = limits;
                opNode.alwaysHandleSupSub = true;
              } else {
                throw new src_ParseError("Limit controls must follow a math operator", lex);
              }

              this.consume();
            } else if (lex.text === "^") {
              // We got a superscript start
              if (superscript) {
                throw new src_ParseError("Double superscript", lex);
              }

              superscript = this.handleSupSubscript("superscript");
            } else if (lex.text === "_") {
              // We got a subscript start
              if (subscript) {
                throw new src_ParseError("Double subscript", lex);
              }

              subscript = this.handleSupSubscript("subscript");
            } else if (lex.text === "'") {
              // We got a prime
              if (superscript) {
                throw new src_ParseError("Double superscript", lex);
              }

              var prime = {
                type: "textord",
                mode: this.mode,
                text: "\\prime"
              }; // Many primes can be grouped together, so we handle this here

              var primes = [prime];
              this.consume(); // Keep lexing tokens until we get something that's not a prime

              while (this.nextToken.text === "'") {
                // For each one, add another prime to the list
                primes.push(prime);
                this.consume();
              } // If there's a superscript following the primes, combine that
              // superscript in with the primes.


              if (this.nextToken.text === "^") {
                primes.push(this.handleSupSubscript("superscript"));
              } // Put everything into an ordgroup as the superscript


              superscript = {
                type: "ordgroup",
                mode: this.mode,
                body: primes
              };
            } else {
              // If it wasn't ^, _, or ', stop parsing super/subscripts
              break;
            }
          } // Base must be set if superscript or subscript are set per logic above,
          // but need to check here for type check to pass.


          if (superscript || subscript) {
            // If we got either a superscript or subscript, create a supsub
            return {
              type: "supsub",
              mode: this.mode,
              base: base,
              sup: superscript,
              sub: subscript
            };
          } else {
            // Otherwise return the original body
            return base;
          }
        }
        /**
         * Parses an entire function, including its base and all of its arguments.
         */
        ;

        _proto.parseFunction = function parseFunction(breakOnTokenText, name, // For error reporting.
        greediness) {
          var token = this.nextToken;
          var func = token.text;
          var funcData = src_functions[func];

          if (!funcData) {
            return null;
          }

          if (greediness != null && funcData.greediness <= greediness) {
            throw new src_ParseError("Got function '" + func + "' with no arguments" + (name ? " as " + name : ""), token);
          } else if (this.mode === "text" && !funcData.allowedInText) {
            throw new src_ParseError("Can't use function '" + func + "' in text mode", token);
          } else if (this.mode === "math" && funcData.allowedInMath === false) {
            throw new src_ParseError("Can't use function '" + func + "' in math mode", token);
          } // hyperref package sets the catcode of % as an active character


          if (funcData.argTypes && funcData.argTypes[0] === "url") {
            this.gullet.lexer.setCatcode("%", 13);
          } // Consume the command token after possibly switching to the
          // mode specified by the function (for instant mode switching),
          // and then immediately switch back.


          if (funcData.consumeMode) {
            var oldMode = this.mode;
            this.switchMode(funcData.consumeMode);
            this.consume();
            this.switchMode(oldMode);
          } else {
            this.consume();
          }

          var _this$parseArguments = this.parseArguments(func, funcData),
              args = _this$parseArguments.args,
              optArgs = _this$parseArguments.optArgs;

          return this.callFunction(func, args, optArgs, token, breakOnTokenText);
        }
        /**
         * Call a function handler with a suitable context and arguments.
         */
        ;

        _proto.callFunction = function callFunction(name, args, optArgs, token, breakOnTokenText) {
          var context = {
            funcName: name,
            parser: this,
            token: token,
            breakOnTokenText: breakOnTokenText
          };
          var func = src_functions[name];

          if (func && func.handler) {
            return func.handler(context, args, optArgs);
          } else {
            throw new src_ParseError("No function handler for " + name);
          }
        }
        /**
         * Parses the arguments of a function or environment
         */
        ;

        _proto.parseArguments = function parseArguments(func, // Should look like "\name" or "\begin{name}".
        funcData) {
          var totalArgs = funcData.numArgs + funcData.numOptionalArgs;

          if (totalArgs === 0) {
            return {
              args: [],
              optArgs: []
            };
          }

          var baseGreediness = funcData.greediness;
          var args = [];
          var optArgs = [];

          for (var i = 0; i < totalArgs; i++) {
            var argType = funcData.argTypes && funcData.argTypes[i];
            var isOptional = i < funcData.numOptionalArgs; // Ignore spaces between arguments.  As the TeXbook says:
            // "After you have said ‘\def\row#1#2{...}’, you are allowed to
            //  put spaces between the arguments (e.g., ‘\row x n’), because
            //  TeX doesn’t use single spaces as undelimited arguments."

            if (i > 0 && !isOptional) {
              this.consumeSpaces();
            } // Also consume leading spaces in math mode, as parseSymbol
            // won't know what to do with them.  This can only happen with
            // macros, e.g. \frac\foo\foo where \foo expands to a space symbol.
            // In LaTeX, the \foo's get treated as (blank) arguments).
            // In KaTeX, for now, both spaces will get consumed.
            // TODO(edemaine)


            if (i === 0 && !isOptional && this.mode === "math") {
              this.consumeSpaces();
            }

            var nextToken = this.nextToken;
            var arg = this.parseGroupOfType("argument to '" + func + "'", argType, isOptional, baseGreediness);

            if (!arg) {
              if (isOptional) {
                optArgs.push(null);
                continue;
              }

              throw new src_ParseError("Expected group after '" + func + "'", nextToken);
            }

            (isOptional ? optArgs : args).push(arg);
          }

          return {
            args: args,
            optArgs: optArgs
          };
        }
        /**
         * Parses a group when the mode is changing.
         */
        ;

        _proto.parseGroupOfType = function parseGroupOfType(name, type, optional, greediness) {
          switch (type) {
            case "color":
              return this.parseColorGroup(optional);

            case "size":
              return this.parseSizeGroup(optional);

            case "url":
              return this.parseUrlGroup(optional);

            case "math":
            case "text":
              return this.parseGroup(name, optional, greediness, undefined, type);

            case "raw":
              {
                if (optional && this.nextToken.text === "{") {
                  return null;
                }

                var token = this.parseStringGroup("raw", optional, true);

                if (token) {
                  return {
                    type: "raw",
                    mode: "text",
                    string: token.text
                  };
                } else {
                  throw new src_ParseError("Expected raw group", this.nextToken);
                }
              }

            case "original":
            case null:
            case undefined:
              return this.parseGroup(name, optional, greediness);

            default:
              throw new src_ParseError("Unknown group type as " + name, this.nextToken);
          }
        };

        _proto.consumeSpaces = function consumeSpaces() {
          while (this.nextToken.text === " ") {
            this.consume();
          }
        }
        /**
         * Parses a group, essentially returning the string formed by the
         * brace-enclosed tokens plus some position information.
         */
        ;

        _proto.parseStringGroup = function parseStringGroup(modeName, // Used to describe the mode in error messages.
        optional, raw) {
          var groupBegin = optional ? "[" : "{";
          var groupEnd = optional ? "]" : "}";
          var nextToken = this.nextToken;

          if (nextToken.text !== groupBegin) {
            if (optional) {
              return null;
            } else if (raw && nextToken.text !== "EOF" && /[^{}[\]]/.test(nextToken.text)) {
              // allow a single character in raw string group
              this.gullet.lexer.setCatcode("%", 14); // reset the catcode of %

              this.consume();
              return nextToken;
            }
          }

          var outerMode = this.mode;
          this.mode = "text";
          this.expect(groupBegin);
          var str = "";
          var firstToken = this.nextToken;
          var nested = 0; // allow nested braces in raw string group

          var lastToken = firstToken;

          while (raw && nested > 0 || this.nextToken.text !== groupEnd) {
            switch (this.nextToken.text) {
              case "EOF":
                throw new src_ParseError("Unexpected end of input in " + modeName, firstToken.range(lastToken, str));

              case groupBegin:
                nested++;
                break;

              case groupEnd:
                nested--;
                break;
            }

            lastToken = this.nextToken;
            str += lastToken.text;
            this.consume();
          }

          this.mode = outerMode;
          this.gullet.lexer.setCatcode("%", 14); // reset the catcode of %

          this.expect(groupEnd);
          return firstToken.range(lastToken, str);
        }
        /**
         * Parses a regex-delimited group: the largest sequence of tokens
         * whose concatenated strings match `regex`. Returns the string
         * formed by the tokens plus some position information.
         */
        ;

        _proto.parseRegexGroup = function parseRegexGroup(regex, modeName) {
          var outerMode = this.mode;
          this.mode = "text";
          var firstToken = this.nextToken;
          var lastToken = firstToken;
          var str = "";

          while (this.nextToken.text !== "EOF" && regex.test(str + this.nextToken.text)) {
            lastToken = this.nextToken;
            str += lastToken.text;
            this.consume();
          }

          if (str === "") {
            throw new src_ParseError("Invalid " + modeName + ": '" + firstToken.text + "'", firstToken);
          }

          this.mode = outerMode;
          return firstToken.range(lastToken, str);
        }
        /**
         * Parses a color description.
         */
        ;

        _proto.parseColorGroup = function parseColorGroup(optional) {
          var res = this.parseStringGroup("color", optional);

          if (!res) {
            return null;
          }

          var match = /^(#[a-f0-9]{3}|#?[a-f0-9]{6}|[a-z]+)$/i.exec(res.text);

          if (!match) {
            throw new src_ParseError("Invalid color: '" + res.text + "'", res);
          }

          var color = match[0];

          if (/^[0-9a-f]{6}$/i.test(color)) {
            // We allow a 6-digit HTML color spec without a leading "#".
            // This follows the xcolor package's HTML color model.
            // Predefined color names are all missed by this RegEx pattern.
            color = "#" + color;
          }

          return {
            type: "color-token",
            mode: this.mode,
            color: color
          };
        }
        /**
         * Parses a size specification, consisting of magnitude and unit.
         */
        ;

        _proto.parseSizeGroup = function parseSizeGroup(optional) {
          var res;
          var isBlank = false;

          if (!optional && this.nextToken.text !== "{") {
            res = this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2} *$/, "size");
          } else {
            res = this.parseStringGroup("size", optional);
          }

          if (!res) {
            return null;
          }

          if (!optional && res.text.length === 0) {
            // Because we've tested for what is !optional, this block won't
            // affect \kern, \hspace, etc. It will capture the mandatory arguments
            // to \genfrac and \above.
            res.text = "0pt"; // Enable \above{}

            isBlank = true; // This is here specifically for \genfrac
          }

          var match = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(res.text);

          if (!match) {
            throw new src_ParseError("Invalid size: '" + res.text + "'", res);
          }

          var data = {
            number: +(match[1] + match[2]),
            // sign + magnitude, cast to number
            unit: match[3]
          };

          if (!validUnit(data)) {
            throw new src_ParseError("Invalid unit: '" + data.unit + "'", res);
          }

          return {
            type: "size",
            mode: this.mode,
            value: data,
            isBlank: isBlank
          };
        }
        /**
         * Parses an URL, checking escaped letters and allowed protocols.
         */
        ;

        _proto.parseUrlGroup = function parseUrlGroup(optional) {
          var res = this.parseStringGroup("url", optional, true); // get raw string

          if (!res) {
            return null;
          } // hyperref package allows backslashes alone in href, but doesn't
          // generate valid links in such cases; we interpret this as
          // "undefined" behaviour, and keep them as-is. Some browser will
          // replace backslashes with forward slashes.


          var url = res.text.replace(/\\([#$%&~_^{}])/g, '$1');
          var protocol = /^\s*([^\\/#]*?)(?::|&#0*58|&#x0*3a)/i.exec(url);
          protocol = protocol != null ? protocol[1] : "_relative";
          var allowed = this.settings.allowedProtocols;

          if (!utils.contains(allowed, "*") && !utils.contains(allowed, protocol)) {
            throw new src_ParseError("Forbidden protocol '" + protocol + "'", res);
          }

          return {
            type: "url",
            mode: this.mode,
            url: url
          };
        }
        /**
         * If `optional` is false or absent, this parses an ordinary group,
         * which is either a single nucleus (like "x") or an expression
         * in braces (like "{x+y}") or an implicit group, a group that starts
         * at the current position, and ends right before a higher explicit
         * group ends, or at EOF.
         * If `optional` is true, it parses either a bracket-delimited expression
         * (like "[x+y]") or returns null to indicate the absence of a
         * bracket-enclosed group.
         * If `mode` is present, switches to that mode while parsing the group,
         * and switches back after.
         */
        ;

        _proto.parseGroup = function parseGroup(name, // For error reporting.
        optional, greediness, breakOnTokenText, mode) {
          var outerMode = this.mode;
          var firstToken = this.nextToken;
          var text = firstToken.text; // Switch to specified mode

          if (mode) {
            this.switchMode(mode);
          }

          var groupEnd;
          var result; // Try to parse an open brace or \begingroup

          if (optional ? text === "[" : text === "{" || text === "\\begingroup") {
            groupEnd = Parser.endOfGroup[text]; // Start a new group namespace

            this.gullet.beginGroup(); // If we get a brace, parse an expression

            this.consume();
            var expression = this.parseExpression(false, groupEnd);
            var lastToken = this.nextToken; // End group namespace before consuming symbol after close brace

            this.gullet.endGroup();
            result = {
              type: "ordgroup",
              mode: this.mode,
              loc: SourceLocation.range(firstToken, lastToken),
              body: expression,
              // A group formed by \begingroup...\endgroup is a semi-simple group
              // which doesn't affect spacing in math mode, i.e., is transparent.
              // https://tex.stackexchange.com/questions/1930/when-should-one-
              // use-begingroup-instead-of-bgroup
              semisimple: text === "\\begingroup" || undefined
            };
          } else if (optional) {
            // Return nothing for an optional group
            result = null;
          } else {
            // If there exists a function with this name, parse the function.
            // Otherwise, just return a nucleus
            result = this.parseFunction(breakOnTokenText, name, greediness) || this.parseSymbol();

            if (result == null && text[0] === "\\" && !implicitCommands.hasOwnProperty(text)) {
              if (this.settings.throwOnError) {
                throw new src_ParseError("Undefined control sequence: " + text, firstToken);
              }

              result = this.handleUnsupportedCmd();
            }
          } // Switch mode back


          if (mode) {
            this.switchMode(outerMode);
          } // Make sure we got a close brace


          if (groupEnd) {
            this.expect(groupEnd);
          }

          return result;
        }
        /**
         * Form ligature-like combinations of characters for text mode.
         * This includes inputs like "--", "---", "``" and "''".
         * The result will simply replace multiple textord nodes with a single
         * character in each value by a single textord node having multiple
         * characters in its value.  The representation is still ASCII source.
         * The group will be modified in place.
         */
        ;

        _proto.formLigatures = function formLigatures(group) {
          var n = group.length - 1;

          for (var i = 0; i < n; ++i) {
            var a = group[i]; // $FlowFixMe: Not every node type has a `text` property.

            var v = a.text;

            if (v === "-" && group[i + 1].text === "-") {
              if (i + 1 < n && group[i + 2].text === "-") {
                group.splice(i, 3, {
                  type: "textord",
                  mode: "text",
                  loc: SourceLocation.range(a, group[i + 2]),
                  text: "---"
                });
                n -= 2;
              } else {
                group.splice(i, 2, {
                  type: "textord",
                  mode: "text",
                  loc: SourceLocation.range(a, group[i + 1]),
                  text: "--"
                });
                n -= 1;
              }
            }

            if ((v === "'" || v === "`") && group[i + 1].text === v) {
              group.splice(i, 2, {
                type: "textord",
                mode: "text",
                loc: SourceLocation.range(a, group[i + 1]),
                text: v + v
              });
              n -= 1;
            }
          }
        }
        /**
         * Parse a single symbol out of the string. Here, we handle single character
         * symbols and special functions like verbatim
         */
        ;

        _proto.parseSymbol = function parseSymbol() {
          var nucleus = this.nextToken;
          var text = nucleus.text;

          if (/^\\verb[^a-zA-Z]/.test(text)) {
            this.consume();
            var arg = text.slice(5);
            var star = arg.charAt(0) === "*";

            if (star) {
              arg = arg.slice(1);
            } // Lexer's tokenRegex is constructed to always have matching
            // first/last characters.


            if (arg.length < 2 || arg.charAt(0) !== arg.slice(-1)) {
              throw new src_ParseError("\\verb assertion failed --\n                    please report what input caused this bug");
            }

            arg = arg.slice(1, -1); // remove first and last char

            return {
              type: "verb",
              mode: "text",
              body: arg,
              star: star
            };
          } // At this point, we should have a symbol, possibly with accents.
          // First expand any accented base symbol according to unicodeSymbols.


          if (unicodeSymbols.hasOwnProperty(text[0]) && !src_symbols[this.mode][text[0]]) {
            // This behavior is not strict (XeTeX-compatible) in math mode.
            if (this.settings.strict && this.mode === "math") {
              this.settings.reportNonstrict("unicodeTextInMathMode", "Accented Unicode text character \"" + text[0] + "\" used in " + "math mode", nucleus);
            }

            text = unicodeSymbols[text[0]] + text.substr(1);
          } // Strip off any combining characters


          var match = combiningDiacriticalMarksEndRegex.exec(text);

          if (match) {
            text = text.substring(0, match.index);

            if (text === 'i') {
              text = "\u0131"; // dotless i, in math and text mode
            } else if (text === 'j') {
              text = "\u0237"; // dotless j, in math and text mode
            }
          } // Recognize base symbol


          var symbol;

          if (src_symbols[this.mode][text]) {
            if (this.settings.strict && this.mode === 'math' && extraLatin.indexOf(text) >= 0) {
              this.settings.reportNonstrict("unicodeTextInMathMode", "Latin-1/Unicode text character \"" + text[0] + "\" used in " + "math mode", nucleus);
            }

            var group = src_symbols[this.mode][text].group;
            var loc = SourceLocation.range(nucleus);
            var s;

            if (ATOMS.hasOwnProperty(group)) {
              // $FlowFixMe
              var family = group;
              s = {
                type: "atom",
                mode: this.mode,
                family: family,
                loc: loc,
                text: text
              };
            } else {
              // $FlowFixMe
              s = {
                type: group,
                mode: this.mode,
                loc: loc,
                text: text
              };
            }

            symbol = s;
          } else if (text.charCodeAt(0) >= 0x80) {
            // no symbol for e.g. ^
            if (this.settings.strict) {
              if (!supportedCodepoint(text.charCodeAt(0))) {
                this.settings.reportNonstrict("unknownSymbol", "Unrecognized Unicode character \"" + text[0] + "\"" + (" (" + text.charCodeAt(0) + ")"), nucleus);
              } else if (this.mode === "math") {
                this.settings.reportNonstrict("unicodeTextInMathMode", "Unicode text character \"" + text[0] + "\" used in math mode", nucleus);
              }
            }

            symbol = {
              type: "textord",
              mode: this.mode,
              loc: SourceLocation.range(nucleus),
              text: text
            };
          } else {
            return null; // EOF, ^, _, {, }, etc.
          }

          this.consume(); // Transform combining characters into accents

          if (match) {
            for (var i = 0; i < match[0].length; i++) {
              var accent = match[0][i];

              if (!unicodeAccents[accent]) {
                throw new src_ParseError("Unknown accent ' " + accent + "'", nucleus);
              }

              var command = unicodeAccents[accent][this.mode];

              if (!command) {
                throw new src_ParseError("Accent " + accent + " unsupported in " + this.mode + " mode", nucleus);
              }

              symbol = {
                type: "accent",
                mode: this.mode,
                loc: SourceLocation.range(nucleus),
                label: command,
                isStretchy: false,
                isShifty: true,
                base: symbol
              };
            }
          }

          return symbol;
        };

        return Parser;
      }();

      Parser_Parser.endOfExpression = ["}", "\\endgroup", "\\end", "\\right", "&"];
      Parser_Parser.endOfGroup = {
        "[": "]",
        "{": "}",
        "\\begingroup": "\\endgroup"
        /**
         * Parses an "expression", which is a list of atoms.
         *
         * `breakOnInfix`: Should the parsing stop when we hit infix nodes? This
         *                 happens when functions have higher precendence han infix
         *                 nodes in implicit parses.
         *
         * `breakOnTokenText`: The text of the token that the expression should end
         *                     with, or `null` if something else should end the
         *                     expression.
         */

      };
      Parser_Parser.SUPSUB_GREEDINESS = 1; // CONCATENATED MODULE: ./src/parseTree.js

      /**
       * Provides a single function for parsing an expression using a Parser
       * TODO(emily): Remove this
       */

      /**
       * Parses an expression using a Parser, then returns the parsed result.
       */

      var parseTree_parseTree = function parseTree(toParse, settings) {
        if (!(typeof toParse === 'string' || toParse instanceof String)) {
          throw new TypeError('KaTeX can only parse string typed expression');
        }

        var parser = new Parser_Parser(toParse, settings); // Blank out any \df@tag to avoid spurious "Duplicate \tag" errors

        delete parser.gullet.macros.current["\\df@tag"];
        var tree = parser.parse(); // If the input used \tag, it will set the \df@tag macro to the tag.
        // In this case, we separately parse the tag and wrap the tree.

        if (parser.gullet.macros.get("\\df@tag")) {
          if (!settings.displayMode) {
            throw new src_ParseError("\\tag works only in display equations");
          }

          parser.gullet.feed("\\df@tag");
          tree = [{
            type: "tag",
            mode: "text",
            body: tree,
            tag: parser.parse()
          }];
        }

        return tree;
      };
      /* harmony default export */


      var src_parseTree = parseTree_parseTree; // CONCATENATED MODULE: ./katex.js

      /* eslint no-console:0 */

      /**
       * This is the main entry point for KaTeX. Here, we expose functions for
       * rendering expressions either to DOM nodes or to markup strings.
       *
       * We also expose the ParseError class to check if errors thrown from KaTeX are
       * errors in the expression, or errors in javascript handling.
       */

      /**
       * Parse and build an expression, and place that expression in the DOM node
       * given.
       */

      var katex_render = function render(expression, baseNode, options) {
        baseNode.textContent = "";
        var node = katex_renderToDomTree(expression, options).toNode();
        baseNode.appendChild(node);
      }; // KaTeX's styles don't work properly in quirks mode. Print out an error, and
      // disable rendering.


      if (typeof document !== "undefined") {
        if (document.compatMode !== "CSS1Compat") {
          typeof console !== "undefined" && console.warn("Warning: KaTeX doesn't work in quirks mode. Make sure your " + "website has a suitable doctype.");

          katex_render = function render() {
            throw new src_ParseError("KaTeX doesn't work in quirks mode.");
          };
        }
      }
      /**
       * Parse and build an expression, and return the markup for that.
       */


      var renderToString = function renderToString(expression, options) {
        var markup = katex_renderToDomTree(expression, options).toMarkup();
        return markup;
      };
      /**
       * Parse an expression and return the parse tree.
       */


      var katex_generateParseTree = function generateParseTree(expression, options) {
        var settings = new src_Settings(options);
        return src_parseTree(expression, settings);
      };
      /**
       * If the given error is a KaTeX ParseError and options.throwOnError is false,
       * renders the invalid LaTeX as a span with hover title giving the KaTeX
       * error message.  Otherwise, simply throws the error.
       */


      var katex_renderError = function renderError(error, expression, options) {
        if (options.throwOnError || !(error instanceof src_ParseError)) {
          throw error;
        }

        var node = buildCommon.makeSpan(["katex-error"], [new domTree_SymbolNode(expression)]);
        node.setAttribute("title", error.toString());
        node.setAttribute("style", "color:" + options.errorColor);
        return node;
      };
      /**
       * Generates and returns the katex build tree. This is used for advanced
       * use cases (like rendering to custom output).
       */


      var katex_renderToDomTree = function renderToDomTree(expression, options) {
        var settings = new src_Settings(options);

        try {
          var tree = src_parseTree(expression, settings);
          return buildTree_buildTree(tree, expression, settings);
        } catch (error) {
          return katex_renderError(error, expression, settings);
        }
      };
      /**
       * Generates and returns the katex build tree, with just HTML (no MathML).
       * This is used for advanced use cases (like rendering to custom output).
       */


      var katex_renderToHTMLTree = function renderToHTMLTree(expression, options) {
        var settings = new src_Settings(options);

        try {
          var tree = src_parseTree(expression, settings);
          return buildTree_buildHTMLTree(tree, expression, settings);
        } catch (error) {
          return katex_renderError(error, expression, settings);
        }
      };
      /* harmony default export */


      var katex_0 = {
        /**
         * Current KaTeX version
         */
        version: "0.10.2",

        /**
         * Renders the given LaTeX into an HTML+MathML combination, and adds
         * it as a child to the specified DOM node.
         */
        render: katex_render,

        /**
         * Renders the given LaTeX into an HTML+MathML combination string,
         * for sending to the client.
         */
        renderToString: renderToString,

        /**
         * KaTeX error, usually during parsing.
         */
        ParseError: src_ParseError,

        /**
         * Parses the given LaTeX into KaTeX's internal parse tree structure,
         * without rendering to HTML or MathML.
         *
         * NOTE: This method is not currently recommended for public use.
         * The internal tree representation is unstable and is very likely
         * to change. Use at your own risk.
         */
        __parse: katex_generateParseTree,

        /**
         * Renders the given LaTeX into an HTML+MathML internal DOM tree
         * representation, without flattening that representation to a string.
         *
         * NOTE: This method is not currently recommended for public use.
         * The internal tree representation is unstable and is very likely
         * to change. Use at your own risk.
         */
        __renderToDomTree: katex_renderToDomTree,

        /**
         * Renders the given LaTeX into an HTML internal DOM tree representation,
         * without MathML and without flattening that representation to a string.
         *
         * NOTE: This method is not currently recommended for public use.
         * The internal tree representation is unstable and is very likely
         * to change. Use at your own risk.
         */
        __renderToHTMLTree: katex_renderToHTMLTree,

        /**
         * extends internal font metrics object with a new object
         * each key in the new object represents a font name
        */
        __setFontMetrics: setFontMetrics,

        /**
         * adds a new symbol to builtin symbols table
         */
        __defineSymbol: defineSymbol,

        /**
         * adds a new macro to builtin macro list
         */
        __defineMacro: defineMacro,

        /**
         * Expose the dom tree node types, which can be useful for type checking nodes.
         *
         * NOTE: This method is not currently recommended for public use.
         * The internal tree representation is unstable and is very likely
         * to change. Use at your own risk.
         */
        __domTree: {
          Span: domTree_Span,
          Anchor: domTree_Anchor,
          SymbolNode: domTree_SymbolNode,
          SvgNode: SvgNode,
          PathNode: domTree_PathNode,
          LineNode: LineNode
        }
      }; // CONCATENATED MODULE: ./katex.webpack.js

      /**
       * This is the webpack entry point for KaTeX. As ECMAScript, flow[1] and jest[2]
       * doesn't support CSS modules natively, a separate entry point is used and
       * it is not flowtyped.
       *
       * [1] https://gist.github.com/lambdahands/d19e0da96285b749f0ef
       * [2] https://facebook.github.io/jest/docs/en/webpack.html
       */

      /* harmony default export */

      var katex_webpack = __webpack_exports__["default"] = katex_0;
      /***/
    }
    /******/
    ])["default"]
  );
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (module) {
  if (!module.webpackPolyfill) {
    module.deprecate = function () {};

    module.paths = []; // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function get() {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function get() {
        return module.i;
      }
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ }),

/***/ "./src/javascript/webcomponents/katex.js":
/*!***********************************************!*\
  !*** ./src/javascript/webcomponents/katex.js ***!
  \***********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es6_object_set_prototype_of__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.object.set-prototype-of */ "./node_modules/core-js/modules/es6.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es6_object_set_prototype_of__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_set_prototype_of__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_array_index_of__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.array.index-of */ "./node_modules/core-js/modules/es6.array.index-of.js");
/* harmony import */ var core_js_modules_es6_array_index_of__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_index_of__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es6_function_bind__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es6.function.bind */ "./node_modules/core-js/modules/es6.function.bind.js");
/* harmony import */ var core_js_modules_es6_function_bind__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_function_bind__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es6.regexp.to-string */ "./node_modules/core-js/modules/es6.regexp.to-string.js");
/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es6_date_to_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es6.date.to-string */ "./node_modules/core-js/modules/es6.date.to-string.js");
/* harmony import */ var core_js_modules_es6_date_to_string__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_date_to_string__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es6_reflect_construct__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es6.reflect.construct */ "./node_modules/core-js/modules/es6.reflect.construct.js");
/* harmony import */ var core_js_modules_es6_reflect_construct__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_reflect_construct__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/web.dom.iterable */ "./node_modules/core-js/modules/web.dom.iterable.js");
/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es6_array_iterator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es6.array.iterator */ "./node_modules/core-js/modules/es6.array.iterator.js");
/* harmony import */ var core_js_modules_es6_array_iterator__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_iterator__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es6.object.to-string */ "./node_modules/core-js/modules/es6.object.to-string.js");
/* harmony import */ var core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es6_string_iterator__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es6.string.iterator */ "./node_modules/core-js/modules/es6.string.iterator.js");
/* harmony import */ var core_js_modules_es6_string_iterator__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_iterator__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es6_map__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es6.map */ "./node_modules/core-js/modules/es6.map.js");
/* harmony import */ var core_js_modules_es6_map__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_map__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es6_object_create__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es6.object.create */ "./node_modules/core-js/modules/es6.object.create.js");
/* harmony import */ var core_js_modules_es6_object_create__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_create__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es6_reflect_get__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es6.reflect.get */ "./node_modules/core-js/modules/es6.reflect.get.js");
/* harmony import */ var core_js_modules_es6_reflect_get__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_reflect_get__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es6_object_define_property__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es6.object.define-property */ "./node_modules/core-js/modules/es6.object.define-property.js");
/* harmony import */ var core_js_modules_es6_object_define_property__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_define_property__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es7_symbol_async_iterator__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es7.symbol.async-iterator */ "./node_modules/core-js/modules/es7.symbol.async-iterator.js");
/* harmony import */ var core_js_modules_es7_symbol_async_iterator__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es7_symbol_async_iterator__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es6.symbol */ "./node_modules/core-js/modules/es6.symbol.js");
/* harmony import */ var core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var katex__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! katex */ "./node_modules/katex/dist/katex.js");
/* harmony import */ var katex__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(katex__WEBPACK_IMPORTED_MODULE_17__);


















function _typeof(obj) {
  if (typeof Symbol === "function" && _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_14___default()(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_14___default()(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_14___default()(obj);
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);

      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
} // import 'katex/dist/katex.min.css';



customElements.define('katex-formula',
/*#__PURE__*/
function (_HTMLElement) {
  _inherits(_class, _HTMLElement);

  function _class() {
    _classCallCheck(this, _class);

    return _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this));
  }

  _createClass(_class, [{
    key: "connectedCallback",
    value: function connectedCallback() {
      var shadowRoot = this.attachShadow({
        mode: 'open'
      });
      var span = document.createElement('span');
      var link = document.createElement('link');
      link.href = 'formula/katex.min.css';
      link.rel = 'stylesheet';
      shadowRoot.appendChild(link);
      shadowRoot.appendChild(span);
      var displayMode = this.getAttribute('displayMode');

      if (!displayMode) {
        displayMode = false;
      } else {
        displayMode = JSON.parse(displayMode);
      }

      katex__WEBPACK_IMPORTED_MODULE_17___default.a.render(this.innerHTML, span, {
        throwOnError: false,
        displayMode: displayMode
      });
    }
  }, {
    key: "disconnectedCallback",
    value: function disconnectedCallback() {
      if (_get(_getPrototypeOf(_class.prototype), "disconnectedCallback", this)) {
        _get(_getPrototypeOf(_class.prototype), "disconnectedCallback", this).call(this);
      }
    }
  }]);

  return _class;
}(_wrapNativeSuper(HTMLElement)));

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tc3Ryb25nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mb3Itb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZnVuY3Rpb24tdG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2luaGVyaXQtaWYtcmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbGlicmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL192YWxpZGF0ZS1jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9rYXRleC9kaXN0L2thdGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2phdmFzY3JpcHQvd2ViY29tcG9uZW50cy9rYXRleC5qcyJdLCJuYW1lcyI6WyJfdHlwZW9mMiIsIm9iaiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfdHlwZW9mIiwibW9kdWxlIiwiZXhwb3J0cyIsIml0IiwiVHlwZUVycm9yIiwiVU5TQ09QQUJMRVMiLCJyZXF1aXJlIiwiQXJyYXlQcm90byIsIkFycmF5IiwidW5kZWZpbmVkIiwia2V5IiwiQ29uc3RydWN0b3IiLCJuYW1lIiwiZm9yYmlkZGVuRmllbGQiLCJpc09iamVjdCIsInRvSU9iamVjdCIsInRvTGVuZ3RoIiwidG9BYnNvbHV0ZUluZGV4IiwiSVNfSU5DTFVERVMiLCIkdGhpcyIsImVsIiwiZnJvbUluZGV4IiwiTyIsImxlbmd0aCIsImluZGV4IiwidmFsdWUiLCJhRnVuY3Rpb24iLCJpbnZva2UiLCJhcnJheVNsaWNlIiwic2xpY2UiLCJmYWN0b3JpZXMiLCJjb25zdHJ1Y3QiLCJGIiwibGVuIiwiYXJncyIsIm4iLCJpIiwiRnVuY3Rpb24iLCJqb2luIiwiYmluZCIsInRoYXQiLCJmbiIsInBhcnRBcmdzIiwiY2FsbCIsImFyZ3VtZW50cyIsImJvdW5kIiwiY29uY2F0IiwiY29mIiwiVEFHIiwiQVJHIiwidHJ5R2V0IiwiZSIsIlQiLCJCIiwiT2JqZWN0IiwiY2FsbGVlIiwidG9TdHJpbmciLCJkUCIsImYiLCJjcmVhdGUiLCJyZWRlZmluZUFsbCIsImN0eCIsImFuSW5zdGFuY2UiLCJmb3JPZiIsIiRpdGVyRGVmaW5lIiwic3RlcCIsInNldFNwZWNpZXMiLCJERVNDUklQVE9SUyIsImZhc3RLZXkiLCJ2YWxpZGF0ZSIsIlNJWkUiLCJnZXRFbnRyeSIsImVudHJ5IiwiX2kiLCJfZiIsImsiLCJnZXRDb25zdHJ1Y3RvciIsIndyYXBwZXIiLCJOQU1FIiwiSVNfTUFQIiwiQURERVIiLCJDIiwiaXRlcmFibGUiLCJfdCIsIl9sIiwiY2xlYXIiLCJkYXRhIiwiciIsInAiLCJuZXh0IiwicHJldiIsImZvckVhY2giLCJjYWxsYmFja2ZuIiwidiIsImhhcyIsImdldCIsImRlZiIsInNldFN0cm9uZyIsIml0ZXJhdGVkIiwia2luZCIsIl9rIiwiZ2xvYmFsIiwiJGV4cG9ydCIsInJlZGVmaW5lIiwibWV0YSIsImZhaWxzIiwiJGl0ZXJEZXRlY3QiLCJzZXRUb1N0cmluZ1RhZyIsImluaGVyaXRJZlJlcXVpcmVkIiwibWV0aG9kcyIsImNvbW1vbiIsIklTX1dFQUsiLCJCYXNlIiwicHJvdG8iLCJmaXhNZXRob2QiLCJLRVkiLCJhIiwiYWRkIiwic2V0IiwiYiIsImVudHJpZXMiLCJORUVEIiwiaW5zdGFuY2UiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIml0ZXIiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwidGFyZ2V0IiwiRyIsIlciLCJjb3JlIiwidmVyc2lvbiIsIl9fZSIsImMiLCJhcHBseSIsImRlZmluZVByb3BlcnR5IiwiZG9jdW1lbnQiLCJpcyIsImNyZWF0ZUVsZW1lbnQiLCJzcGxpdCIsImdldEtleXMiLCJnT1BTIiwicElFIiwicmVzdWx0IiwiZ2V0U3ltYm9scyIsInN5bWJvbHMiLCJpc0VudW0iLCJwdXNoIiwiaGlkZSIsIlBST1RPVFlQRSIsInR5cGUiLCJzb3VyY2UiLCJJU19GT1JDRUQiLCJJU19HTE9CQUwiLCJJU19TVEFUSUMiLCJTIiwiSVNfUFJPVE8iLCJQIiwiSVNfQklORCIsImV4cFByb3RvIiwib3duIiwib3V0IiwiZXhwIiwiVSIsIlIiLCJleGVjIiwiYW5PYmplY3QiLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwidW5pY29kZSIsInN0aWNreSIsImlzQXJyYXlJdGVyIiwiZ2V0SXRlckZuIiwiQlJFQUsiLCJSRVRVUk4iLCJJVEVSQVRPUiIsIml0ZXJGbiIsImRvbmUiLCJ3aW5kb3ciLCJNYXRoIiwic2VsZiIsIl9fZyIsImhhc093blByb3BlcnR5IiwiY3JlYXRlRGVzYyIsIm9iamVjdCIsImRvY3VtZW50RWxlbWVudCIsInNldFByb3RvdHlwZU9mIiwidW4iLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkl0ZXJhdG9ycyIsImlzQXJyYXkiLCJhcmciLCJyZXQiLCJkZXNjcmlwdG9yIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJMSUJSQVJZIiwiJGl0ZXJDcmVhdGUiLCJnZXRQcm90b3R5cGVPZiIsIkJVR0dZIiwia2V5cyIsIkZGX0lURVJBVE9SIiwiS0VZUyIsIlZBTFVFUyIsInJldHVyblRoaXMiLCJERUZBVUxUIiwiSVNfU0VUIiwiRk9SQ0VEIiwiZ2V0TWV0aG9kIiwidmFsdWVzIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsImZyb20iLCJza2lwQ2xvc2luZyIsInNhZmUiLCJhcnIiLCJNRVRBIiwic2V0RGVzYyIsImlkIiwiaXNFeHRlbnNpYmxlIiwiRlJFRVpFIiwicHJldmVudEV4dGVuc2lvbnMiLCJzZXRNZXRhIiwidyIsImdldFdlYWsiLCJvbkZyZWV6ZSIsImRQcyIsImVudW1CdWdLZXlzIiwiSUVfUFJPVE8iLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWUiLCJsdCIsImd0IiwiaWZyYW1lRG9jdW1lbnQiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwid3JpdGUiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiQXR0cmlidXRlcyIsImRlZmluZVByb3BlcnRpZXMiLCJnT1BEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ09QTiIsIndpbmRvd05hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiJGtleXMiLCJoaWRkZW5LZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwidG9PYmplY3QiLCJPYmplY3RQcm90byIsImFycmF5SW5kZXhPZiIsIm5hbWVzIiwiYml0bWFwIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiU1JDIiwiJHRvU3RyaW5nIiwiVE9fU1RSSU5HIiwiVFBMIiwiaW5zcGVjdFNvdXJjZSIsInZhbCIsImlzRnVuY3Rpb24iLCJTdHJpbmciLCJjaGVjayIsInRlc3QiLCJidWdneSIsIl9fcHJvdG9fXyIsIlNQRUNJRVMiLCJ0YWciLCJzdGF0Iiwic2hhcmVkIiwidWlkIiwiU0hBUkVEIiwic3RvcmUiLCJtb2RlIiwiY29weXJpZ2h0IiwibWV0aG9kIiwidG9JbnRlZ2VyIiwiZGVmaW5lZCIsInBvcyIsInMiLCJsIiwiY2hhckNvZGVBdCIsImNoYXJBdCIsIm1heCIsIm1pbiIsImNlaWwiLCJmbG9vciIsImlzTmFOIiwiSU9iamVjdCIsInZhbHVlT2YiLCJweCIsInJhbmRvbSIsIlRZUEUiLCJ3a3NFeHQiLCIkU3ltYm9sIiwiVVNFX1NZTUJPTCIsIiRleHBvcnRzIiwiY2xhc3NvZiIsImdldEl0ZXJhdG9yTWV0aG9kIiwiJGluZGV4T2YiLCJpbmRleE9mIiwiTkVHQVRJVkVfWkVSTyIsInNlYXJjaEVsZW1lbnQiLCJhZGRUb1Vuc2NvcGFibGVzIiwiQXJndW1lbnRzIiwiRGF0ZVByb3RvIiwiRGF0ZSIsIklOVkFMSURfREFURSIsImdldFRpbWUiLCJOYU4iLCJzdHJvbmciLCJNQVAiLCJNYXAiLCJyQ29uc3RydWN0IiwiUmVmbGVjdCIsIk5FV19UQVJHRVRfQlVHIiwiQVJHU19CVUciLCJUYXJnZXQiLCJuZXdUYXJnZXQiLCIkYXJncyIsInByb3BlcnR5S2V5IiwicmVjZWl2ZXIiLCJkZXNjIiwiZmxhZ3MiLCJSZWdFeHAiLCIkZmxhZ3MiLCJkZWZpbmUiLCIkYXQiLCJwb2ludCIsIiRmYWlscyIsIndrcyIsIndrc0RlZmluZSIsImVudW1LZXlzIiwiX2NyZWF0ZSIsImdPUE5FeHQiLCIkR09QRCIsIiRHT1BTIiwiJERQIiwiJEpTT04iLCJKU09OIiwiX3N0cmluZ2lmeSIsInN0cmluZ2lmeSIsIkhJRERFTiIsIlRPX1BSSU1JVElWRSIsIlN5bWJvbFJlZ2lzdHJ5IiwiQWxsU3ltYm9scyIsIk9QU3ltYm9scyIsIlVTRV9OQVRJVkUiLCJRT2JqZWN0Iiwic2V0dGVyIiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsIkQiLCJwcm90b0Rlc2MiLCJ3cmFwIiwic3ltIiwiaXNTeW1ib2wiLCIkZGVmaW5lUHJvcGVydHkiLCIkZGVmaW5lUHJvcGVydGllcyIsIiRjcmVhdGUiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCJFIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09QIiwiJHNldCIsImVzNlN5bWJvbHMiLCJqIiwid2VsbEtub3duU3ltYm9scyIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsIkZBSUxTX09OX1BSSU1JVElWRVMiLCJyZXBsYWNlciIsIiRyZXBsYWNlciIsIiRpdGVyYXRvcnMiLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJET01JdGVyYWJsZXMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNvbGxlY3Rpb25zIiwiZXhwbGljaXQiLCJDb2xsZWN0aW9uIiwid2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJyb290IiwiZmFjdG9yeSIsIm1vZHVsZXMiLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwibSIsImQiLCJnZXR0ZXIiLCJvIiwidG9TdHJpbmdUYWciLCJ0IiwiX19lc01vZHVsZSIsIm5zIiwiZ2V0RGVmYXVsdCIsImdldE1vZHVsZUV4cG9ydHMiLCJwcm9wZXJ0eSIsIl9fd2VicGFja19leHBvcnRzX18iLCJrYXRleCIsIlNvdXJjZUxvY2F0aW9uIiwibGV4ZXIiLCJzdGFydCIsImVuZCIsInJhbmdlIiwiZmlyc3QiLCJzZWNvbmQiLCJsb2MiLCJUb2tlbl9Ub2tlbiIsIlRva2VuIiwidGV4dCIsIl9wcm90byIsImVuZFRva2VuIiwiUGFyc2VFcnJvciIsIm1lc3NhZ2UiLCJ0b2tlbiIsInBvc2l0aW9uIiwiZXJyb3IiLCJpbnB1dCIsInVuZGVybGluZWQiLCJyZXBsYWNlIiwibGVmdCIsInJpZ2h0IiwiRXJyb3IiLCJzcmNfUGFyc2VFcnJvciIsImNvbnRhaW5zIiwibGlzdCIsImVsZW0iLCJkZWZsdCIsInNldHRpbmciLCJkZWZhdWx0SWZVbmRlZmluZWQiLCJ1cHBlcmNhc2UiLCJoeXBoZW5hdGUiLCJzdHIiLCJ0b0xvd2VyQ2FzZSIsIkVTQ0FQRV9MT09LVVAiLCJFU0NBUEVfUkVHRVgiLCJ1dGlsc19lc2NhcGUiLCJtYXRjaCIsImdldEJhc2VFbGVtIiwiZ3JvdXAiLCJib2R5IiwidXRpbHNfaXNDaGFyYWN0ZXJCb3giLCJpc0NoYXJhY3RlckJveCIsImJhc2VFbGVtIiwiYXNzZXJ0IiwidXRpbHMiLCJlc2NhcGUiLCJTZXR0aW5nc19TZXR0aW5ncyIsIlNldHRpbmdzIiwib3B0aW9ucyIsImRpc3BsYXlNb2RlIiwibGVxbm8iLCJmbGVxbiIsInRocm93T25FcnJvciIsImVycm9yQ29sb3IiLCJtYWNyb3MiLCJjb2xvcklzVGV4dENvbG9yIiwic3RyaWN0IiwibWF4U2l6ZSIsIm1heEV4cGFuZCIsImFsbG93ZWRQcm90b2NvbHMiLCJJbmZpbml0eSIsInJlcG9ydE5vbnN0cmljdCIsImVycm9yQ29kZSIsImVycm9yTXNnIiwiY29uc29sZSIsIndhcm4iLCJ1c2VTdHJpY3RCZWhhdmlvciIsInNyY19TZXR0aW5ncyIsIlN0eWxlIiwic2l6ZSIsImNyYW1wZWQiLCJzdXAiLCJTdHlsZV9zdHlsZXMiLCJfc3VwIiwic3ViIiwiX3N1YiIsImZyYWNOdW0iLCJfZnJhY051bSIsImZyYWNEZW4iLCJfZnJhY0RlbiIsImNyYW1wIiwiX2NyYW1wIiwiX3RleHQiLCJpc1RpZ2h0IiwiRGMiLCJUYyIsIlNjIiwiU1MiLCJTU2MiLCJzcmNfU3R5bGUiLCJESVNQTEFZIiwiVEVYVCIsIlNDUklQVCIsIlNDUklQVFNDUklQVCIsInNjcmlwdERhdGEiLCJibG9ja3MiLCJzY3JpcHRGcm9tQ29kZXBvaW50IiwiY29kZXBvaW50Iiwic2NyaXB0IiwiYmxvY2siLCJhbGxCbG9ja3MiLCJzdXBwb3J0ZWRDb2RlcG9pbnQiLCJoTGluZVBhZCIsInN2Z0dlb21ldHJ5X3BhdGgiLCJzcXJ0TWFpbiIsInNxcnRTaXplMSIsInNxcnRTaXplMiIsInNxcnRTaXplMyIsInNxcnRTaXplNCIsImRvdWJsZWxlZnRhcnJvdyIsImRvdWJsZXJpZ2h0YXJyb3ciLCJsZWZ0YXJyb3ciLCJsZWZ0YnJhY2UiLCJsZWZ0YnJhY2V1bmRlciIsImxlZnRncm91cCIsImxlZnRncm91cHVuZGVyIiwibGVmdGhhcnBvb24iLCJsZWZ0aGFycG9vbnBsdXMiLCJsZWZ0aGFycG9vbmRvd24iLCJsZWZ0aGFycG9vbmRvd25wbHVzIiwibGVmdGhvb2siLCJsZWZ0bGluZXNlZ21lbnQiLCJsZWZ0bWFwc3RvIiwibGVmdFRvRnJvbSIsImxvbmdlcXVhbCIsIm1pZGJyYWNlIiwibWlkYnJhY2V1bmRlciIsIm9paW50U2l6ZTEiLCJvaWludFNpemUyIiwib2lpaW50U2l6ZTEiLCJvaWlpbnRTaXplMiIsInJpZ2h0YXJyb3ciLCJyaWdodGJyYWNlIiwicmlnaHRicmFjZXVuZGVyIiwicmlnaHRncm91cCIsInJpZ2h0Z3JvdXB1bmRlciIsInJpZ2h0aGFycG9vbiIsInJpZ2h0aGFycG9vbnBsdXMiLCJyaWdodGhhcnBvb25kb3duIiwicmlnaHRoYXJwb29uZG93bnBsdXMiLCJyaWdodGhvb2siLCJyaWdodGxpbmVzZWdtZW50IiwicmlnaHRUb0Zyb20iLCJ0d29oZWFkbGVmdGFycm93IiwidHdvaGVhZHJpZ2h0YXJyb3ciLCJ0aWxkZTEiLCJ0aWxkZTIiLCJ0aWxkZTMiLCJ0aWxkZTQiLCJ2ZWMiLCJ3aWRlaGF0MSIsIndpZGVoYXQyIiwid2lkZWhhdDMiLCJ3aWRlaGF0NCIsIndpZGVjaGVjazEiLCJ3aWRlY2hlY2syIiwid2lkZWNoZWNrMyIsIndpZGVjaGVjazQiLCJiYXJhYm92ZWxlZnRhcnJvdyIsInJpZ2h0YXJyb3dhYm92ZWJhciIsImJhcmFib3Zlc2hvcnRsZWZ0aGFycG9vbiIsInJpZ2h0aGFycG9vbmFib3Zlc2hvcnRiYXIiLCJzaG9ydGJhcmFib3ZlbGVmdGhhcnBvb24iLCJzaG9ydHJpZ2h0aGFycG9vbmFib3ZlYmFyIiwic3ZnR2VvbWV0cnkiLCJwYXRoIiwidHJlZV9Eb2N1bWVudEZyYWdtZW50IiwiRG9jdW1lbnRGcmFnbWVudCIsImNoaWxkcmVuIiwiY2xhc3NlcyIsImhlaWdodCIsImRlcHRoIiwibWF4Rm9udFNpemUiLCJoYXNDbGFzcyIsImNsYXNzTmFtZSIsInRvTm9kZSIsImZyYWciLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwidG9NYXJrdXAiLCJtYXJrdXAiLCJ0b1RleHQiLCJjaGlsZCIsIm1hcCIsImNyZWF0ZUNsYXNzIiwiZmlsdGVyIiwiY2xzIiwiaW5pdE5vZGUiLCJhdHRyaWJ1dGVzIiwiY29sb3IiLCJnZXRDb2xvciIsIl90b05vZGUiLCJ0YWdOYW1lIiwibm9kZSIsImF0dHIiLCJzZXRBdHRyaWJ1dGUiLCJfdG9NYXJrdXAiLCJzdHlsZXMiLCJkb21UcmVlX1NwYW4iLCJTcGFuIiwid2lkdGgiLCJhdHRyaWJ1dGUiLCJkb21UcmVlX0FuY2hvciIsIkFuY2hvciIsImhyZWYiLCJfcHJvdG8yIiwiZG9tVHJlZV9JbWciLCJJbWciLCJhbHQiLCJfcHJvdG8zIiwiaUNvbWJpbmF0aW9ucyIsImRvbVRyZWVfU3ltYm9sTm9kZSIsIlN5bWJvbE5vZGUiLCJpdGFsaWMiLCJza2V3IiwiX3Byb3RvNCIsImNyZWF0ZVRleHROb2RlIiwic3BhbiIsIm1hcmdpblJpZ2h0IiwibmVlZHNTcGFuIiwiZXNjYXBlZCIsIlN2Z05vZGUiLCJfcHJvdG81Iiwic3ZnTlMiLCJjcmVhdGVFbGVtZW50TlMiLCJkb21UcmVlX1BhdGhOb2RlIiwiUGF0aE5vZGUiLCJwYXRoTmFtZSIsImFsdGVybmF0ZSIsIl9wcm90bzYiLCJMaW5lTm9kZSIsIl9wcm90bzciLCJhc3NlcnRTeW1ib2xEb21Ob2RlIiwiYXNzZXJ0U3BhbiIsImZvbnRNZXRyaWNzRGF0YSIsInNpZ21hc0FuZFhpcyIsInNsYW50Iiwic3BhY2UiLCJzdHJldGNoIiwic2hyaW5rIiwieEhlaWdodCIsInF1YWQiLCJleHRyYVNwYWNlIiwibnVtMSIsIm51bTIiLCJudW0zIiwiZGVub20xIiwiZGVub20yIiwic3VwMSIsInN1cDIiLCJzdXAzIiwic3ViMSIsInN1YjIiLCJzdXBEcm9wIiwic3ViRHJvcCIsImRlbGltMSIsImRlbGltMiIsImF4aXNIZWlnaHQiLCJkZWZhdWx0UnVsZVRoaWNrbmVzcyIsImJpZ09wU3BhY2luZzEiLCJiaWdPcFNwYWNpbmcyIiwiYmlnT3BTcGFjaW5nMyIsImJpZ09wU3BhY2luZzQiLCJiaWdPcFNwYWNpbmc1Iiwic3FydFJ1bGVUaGlja25lc3MiLCJwdFBlckVtIiwiZG91YmxlUnVsZVNlcCIsImV4dHJhQ2hhcmFjdGVyTWFwIiwic2V0Rm9udE1ldHJpY3MiLCJmb250TmFtZSIsIm1ldHJpY3MiLCJnZXRDaGFyYWN0ZXJNZXRyaWNzIiwiY2hhcmFjdGVyIiwiZm9udCIsImNoIiwiZm9udE1ldHJpY3NCeVNpemVJbmRleCIsImdldEdsb2JhbE1ldHJpY3MiLCJzaXplSW5kZXgiLCJjc3NFbVBlck11IiwiQVRPTVMiLCJOT05fQVRPTVMiLCJzcmNfc3ltYm9scyIsImRlZmluZVN5bWJvbCIsImFjY2VwdFVuaWNvZGVDaGFyIiwic3ltYm9sc19tYXRoIiwic3ltYm9sc190ZXh0IiwibWFpbiIsImFtcyIsInN5bWJvbHNfYWNjZW50IiwiYmluIiwic3ltYm9sc19jbG9zZSIsInN5bWJvbHNfaW5uZXIiLCJtYXRob3JkIiwib3AiLCJzeW1ib2xzX29wZW4iLCJwdW5jdCIsInJlbCIsInN5bWJvbHNfc3BhY2luZyIsInN5bWJvbHNfdGV4dG9yZCIsImxpZ2F0dXJlcyIsIm1hdGhUZXh0U3ltYm9scyIsInN5bWJvbHNfaSIsInN5bWJvbHNfY2giLCJ0ZXh0U3ltYm9scyIsInNyY19zeW1ib2xzX2kiLCJfY2giLCJsZXR0ZXJzIiwic3ltYm9sc19pMiIsIl9jaDIiLCJzeW1ib2xzX3dpZGVDaGFyIiwic3ltYm9sc19pMyIsIl9jaDMiLCJmcm9tQ2hhckNvZGUiLCJzeW1ib2xzX2k0IiwiX2NoNCIsImV4dHJhTGF0aW4iLCJfaTUiLCJfY2g1Iiwid2lkZUxhdGluTGV0dGVyRGF0YSIsIndpZGVOdW1lcmFsRGF0YSIsIndpZGVfY2hhcmFjdGVyX3dpZGVDaGFyYWN0ZXJGb250Iiwid2lkZUNoYXJhY3RlckZvbnQiLCJ3aWRlQ2hhciIsIkgiLCJMIiwiY29kZVBvaW50Iiwic2l6ZVN0eWxlTWFwIiwic2l6ZU11bHRpcGxpZXJzIiwic2l6ZUF0U3R5bGUiLCJPcHRpb25zX09wdGlvbnMiLCJPcHRpb25zIiwidGV4dFNpemUiLCJwaGFudG9tIiwiZm9udEZhbWlseSIsImZvbnRXZWlnaHQiLCJmb250U2hhcGUiLCJzaXplTXVsdGlwbGllciIsIl9mb250TWV0cmljcyIsIkJBU0VTSVpFIiwiZXh0ZW5kIiwiZXh0ZW5zaW9uIiwiaGF2aW5nU3R5bGUiLCJoYXZpbmdDcmFtcGVkU3R5bGUiLCJoYXZpbmdTaXplIiwiaGF2aW5nQmFzZVN0eWxlIiwid2FudFNpemUiLCJoYXZpbmdCYXNlU2l6aW5nIiwid2l0aENvbG9yIiwid2l0aFBoYW50b20iLCJ3aXRoRm9udCIsIndpdGhUZXh0Rm9udEZhbWlseSIsIndpdGhUZXh0Rm9udFdlaWdodCIsIndpdGhUZXh0Rm9udFNoYXBlIiwic2l6aW5nQ2xhc3NlcyIsIm9sZE9wdGlvbnMiLCJiYXNlU2l6aW5nQ2xhc3NlcyIsImZvbnRNZXRyaWNzIiwic3JjX09wdGlvbnMiLCJwdFBlclVuaXQiLCJyZWxhdGl2ZVVuaXQiLCJ2YWxpZFVuaXQiLCJ1bml0IiwidW5pdHNfY2FsY3VsYXRlU2l6ZSIsImNhbGN1bGF0ZVNpemUiLCJzaXplVmFsdWUiLCJzY2FsZSIsInVuaXRPcHRpb25zIiwibnVtYmVyIiwibWF0aGl0TGV0dGVycyIsImJ1aWxkQ29tbW9uX2xvb2t1cFN5bWJvbCIsImxvb2t1cFN5bWJvbCIsImJ1aWxkQ29tbW9uX21ha2VTeW1ib2wiLCJtYWtlU3ltYm9sIiwibG9va3VwIiwic3ltYm9sTm9kZSIsImJ1aWxkQ29tbW9uX21hdGhzeW0iLCJtYXRoc3ltIiwiYnVpbGRDb21tb25fbWF0aGRlZmF1bHQiLCJtYXRoZGVmYXVsdCIsImZvbnRDbGFzcyIsImJ1aWxkQ29tbW9uX21hdGhub3JtYWwiLCJtYXRobm9ybWFsIiwiYm9sZHN5bWJvbCIsImJ1aWxkQ29tbW9uX21ha2VPcmQiLCJtYWtlT3JkIiwiaXNGb250IiwiZm9udE9yRmFtaWx5IiwiX3dpZGVDaGFyYWN0ZXJGb250Iiwid2lkZUZvbnROYW1lIiwid2lkZUZvbnRDbGFzcyIsImZvbnRDbGFzc2VzIiwiZm9udERhdGEiLCJmb250TWFwIiwicmV0cmlldmVUZXh0Rm9udE5hbWUiLCJzdWJzdHIiLCJwYXJ0cyIsImJ1aWxkQ29tbW9uX21ha2VGcmFnbWVudCIsImZvbnRMb29rdXAiLCJfZm9udE5hbWUiLCJfZm9udE5hbWUyIiwiX2ZvbnROYW1lMyIsImJ1aWxkQ29tbW9uX2NhbkNvbWJpbmUiLCJjYW5Db21iaW5lIiwiX3N0eWxlIiwiYnVpbGRDb21tb25fdHJ5Q29tYmluZUNoYXJzIiwidHJ5Q29tYmluZUNoYXJzIiwiY2hhcnMiLCJzcGxpY2UiLCJzaXplRWxlbWVudEZyb21DaGlsZHJlbiIsImJ1aWxkQ29tbW9uX21ha2VTcGFuIiwibWFrZVNwYW4iLCJidWlsZENvbW1vbl9tYWtlU3ZnU3BhbiIsIm1ha2VTdmdTcGFuIiwibWFrZUxpbmVTcGFuIiwidGhpY2tuZXNzIiwibGluZSIsImJvcmRlckJvdHRvbVdpZHRoIiwiYnVpbGRDb21tb25fbWFrZUFuY2hvciIsIm1ha2VBbmNob3IiLCJhbmNob3IiLCJtYWtlRnJhZ21lbnQiLCJmcmFnbWVudCIsImJ1aWxkQ29tbW9uX3dyYXBGcmFnbWVudCIsIndyYXBGcmFnbWVudCIsImdldFZMaXN0Q2hpbGRyZW5BbmREZXB0aCIsInBhcmFtcyIsInBvc2l0aW9uVHlwZSIsIm9sZENoaWxkcmVuIiwiX2RlcHRoIiwic2hpZnQiLCJjdXJyUG9zIiwiZGlmZiIsImJvdHRvbSIsInBvc2l0aW9uRGF0YSIsImZpcnN0Q2hpbGQiLCJidWlsZENvbW1vbl9tYWtlVkxpc3QiLCJtYWtlVkxpc3QiLCJfZ2V0Vkxpc3RDaGlsZHJlbkFuZEQiLCJwc3RydXRTaXplIiwicHN0cnV0IiwicmVhbENoaWxkcmVuIiwibWluUG9zIiwibWF4UG9zIiwiX2kyIiwiX2NoaWxkIiwiX2VsZW0iLCJ3cmFwcGVyQ2xhc3NlcyIsIndyYXBwZXJTdHlsZSIsImNoaWxkV3JhcCIsInRvcCIsIm1hcmdpbkxlZnQiLCJ2bGlzdCIsInJvd3MiLCJlbXB0eVNwYW4iLCJkZXB0aFN0cnV0IiwidG9wU3RydXQiLCJ2dGFibGUiLCJidWlsZENvbW1vbl9tYWtlR2x1ZSIsIm1ha2VHbHVlIiwibWVhc3VyZW1lbnQiLCJydWxlIiwiYmFzZUZvbnROYW1lIiwiZm9udFN0eWxlc05hbWUiLCJ2YXJpYW50Iiwic3ZnRGF0YSIsImJ1aWxkQ29tbW9uX3N0YXRpY1N2ZyIsInN0YXRpY1N2ZyIsIl9zdmdEYXRhJHZhbHVlIiwic3ZnTm9kZSIsImJ1aWxkQ29tbW9uIiwiYXNzZXJ0Tm9kZVR5cGUiLCJ0eXBlZE5vZGUiLCJjaGVja05vZGVUeXBlIiwiYXNzZXJ0QXRvbUZhbWlseSIsImZhbWlseSIsImNoZWNrQXRvbUZhbWlseSIsImFzc2VydFN5bWJvbE5vZGVUeXBlIiwiY2hlY2tTeW1ib2xOb2RlVHlwZSIsInRoaW5zcGFjZSIsIm1lZGl1bXNwYWNlIiwidGhpY2tzcGFjZSIsInNwYWNpbmdzIiwibW9yZCIsIm1vcCIsIm1iaW4iLCJtcmVsIiwibWlubmVyIiwibW9wZW4iLCJtY2xvc2UiLCJtcHVuY3QiLCJ0aWdodFNwYWNpbmdzIiwiX2Z1bmN0aW9ucyIsIl9odG1sR3JvdXBCdWlsZGVycyIsIl9tYXRobWxHcm91cEJ1aWxkZXJzIiwiZGVmaW5lRnVuY3Rpb24iLCJfcmVmIiwibm9kZVR5cGUiLCJwcm9wcyIsImhhbmRsZXIiLCJodG1sQnVpbGRlciIsIm1hdGhtbEJ1aWxkZXIiLCJudW1BcmdzIiwiYXJnVHlwZXMiLCJncmVlZGluZXNzIiwiYWxsb3dlZEluVGV4dCIsImFsbG93ZWRJbk1hdGgiLCJudW1PcHRpb25hbEFyZ3MiLCJpbmZpeCIsImNvbnN1bWVNb2RlIiwiZGVmaW5lRnVuY3Rpb25CdWlsZGVycyIsIl9yZWYyIiwiZGVmaW5lRnVuY3Rpb25fb3JkYXJndW1lbnQiLCJvcmRhcmd1bWVudCIsImJ1aWxkSFRNTF9tYWtlU3BhbiIsImJpbkxlZnRDYW5jZWxsZXIiLCJiaW5SaWdodENhbmNlbGxlciIsImJ1aWxkSFRNTF9zdHlsZU1hcCIsIkRvbUVudW0iLCJidWlsZEhUTUxfYnVpbGRFeHByZXNzaW9uIiwiYnVpbGRFeHByZXNzaW9uIiwiZXhwcmVzc2lvbiIsImlzUmVhbEdyb3VwIiwic3Vycm91bmRpbmciLCJncm91cHMiLCJvdXRwdXQiLCJidWlsZEhUTUxfYnVpbGRHcm91cCIsImdsdWVPcHRpb25zIiwiZHVtbXlQcmV2IiwiZHVtbXlOZXh0IiwidHJhdmVyc2VOb25TcGFjZU5vZGVzIiwicHJldlR5cGUiLCJnZXRUeXBlT2ZEb21UcmVlIiwibm9kZXMiLCJjYWxsYmFjayIsInBhcnRpYWxHcm91cCIsImJ1aWxkSFRNTF9jaGVja1BhcnRpYWxHcm91cCIsImluc2VydEFmdGVyIiwidW5zaGlmdCIsInBvcCIsImNoZWNrUGFydGlhbEdyb3VwIiwiZ2V0T3V0ZXJtb3N0Tm9kZSIsInNpZGUiLCJtYWtlTnVsbERlbGltaXRlciIsIm1vcmVDbGFzc2VzIiwiYnVpbGRHcm91cCIsImJhc2VPcHRpb25zIiwiZ3JvdXBOb2RlIiwibXVsdGlwbGllciIsImJ1aWxkSFRNTFVuYnJlYWthYmxlIiwic3RydXQiLCJ2ZXJ0aWNhbEFsaWduIiwiYnVpbGRIVE1MIiwidHJlZSIsIm5vYnJlYWsiLCJ0YWdDaGlsZCIsImh0bWxOb2RlIiwibmV3RG9jdW1lbnRGcmFnbWVudCIsIm1hdGhNTFRyZWVfTWF0aE5vZGUiLCJNYXRoTm9kZSIsImdldEF0dHJpYnV0ZSIsIm1hdGhNTFRyZWVfVGV4dE5vZGUiLCJUZXh0Tm9kZSIsIlNwYWNlTm9kZSIsIm1hdGhNTFRyZWUiLCJidWlsZE1hdGhNTF9tYWtlVGV4dCIsIm1ha2VUZXh0IiwiYnVpbGRNYXRoTUxfbWFrZVJvdyIsIm1ha2VSb3ciLCJidWlsZE1hdGhNTF9nZXRWYXJpYW50IiwiZ2V0VmFyaWFudCIsImJ1aWxkTWF0aE1MX2J1aWxkRXhwcmVzc2lvbiIsImxhc3RHcm91cCIsImJ1aWxkTWF0aE1MX2J1aWxkR3JvdXAiLCJfbGFzdEdyb3VwJGNoaWxkcmVuIiwiX2xhc3RHcm91cCRjaGlsZHJlbjIiLCJfbGFzdEdyb3VwJGNoaWxkcmVuMyIsImxhc3RDaGlsZCIsImJ1aWxkRXhwcmVzc2lvblJvdyIsImJ1aWxkTWF0aE1MIiwidGV4RXhwcmVzc2lvbiIsImFubm90YXRpb24iLCJzZW1hbnRpY3MiLCJtYXRoIiwiYnVpbGRUcmVlX29wdGlvbnNGcm9tU2V0dGluZ3MiLCJvcHRpb25zRnJvbVNldHRpbmdzIiwic2V0dGluZ3MiLCJidWlsZFRyZWVfZGlzcGxheVdyYXAiLCJkaXNwbGF5V3JhcCIsImJ1aWxkVHJlZV9idWlsZFRyZWUiLCJidWlsZFRyZWUiLCJtYXRoTUxOb2RlIiwia2F0ZXhOb2RlIiwiYnVpbGRUcmVlX2J1aWxkSFRNTFRyZWUiLCJidWlsZEhUTUxUcmVlIiwic3JjX2J1aWxkVHJlZSIsInN0cmV0Y2h5Q29kZVBvaW50Iiwid2lkZWhhdCIsIndpZGVjaGVjayIsIndpZGV0aWxkZSIsInV0aWxkZSIsIm92ZXJsZWZ0YXJyb3ciLCJ1bmRlcmxlZnRhcnJvdyIsInhsZWZ0YXJyb3ciLCJvdmVycmlnaHRhcnJvdyIsInVuZGVycmlnaHRhcnJvdyIsInhyaWdodGFycm93IiwidW5kZXJicmFjZSIsIm92ZXJicmFjZSIsIm92ZXJncm91cCIsInVuZGVyZ3JvdXAiLCJvdmVybGVmdHJpZ2h0YXJyb3ciLCJ1bmRlcmxlZnRyaWdodGFycm93IiwieGxlZnRyaWdodGFycm93IiwiT3ZlcnJpZ2h0YXJyb3ciLCJ4UmlnaHRhcnJvdyIsIm92ZXJsZWZ0aGFycG9vbiIsInhsZWZ0aGFycG9vbnVwIiwib3ZlcnJpZ2h0aGFycG9vbiIsInhyaWdodGhhcnBvb251cCIsInhMZWZ0YXJyb3ciLCJ4TGVmdHJpZ2h0YXJyb3ciLCJ4aG9va2xlZnRhcnJvdyIsInhob29rcmlnaHRhcnJvdyIsInhtYXBzdG8iLCJ4cmlnaHRoYXJwb29uZG93biIsInhsZWZ0aGFycG9vbmRvd24iLCJ4cmlnaHRsZWZ0aGFycG9vbnMiLCJ4bGVmdHJpZ2h0aGFycG9vbnMiLCJ4dHdvaGVhZGxlZnRhcnJvdyIsInh0d29oZWFkcmlnaHRhcnJvdyIsInhsb25nZXF1YWwiLCJ4dG9mcm9tIiwieHJpZ2h0bGVmdGFycm93cyIsInhyaWdodGVxdWlsaWJyaXVtIiwieGxlZnRlcXVpbGlicml1bSIsInN0cmV0Y2h5X21hdGhNTG5vZGUiLCJtYXRoTUxub2RlIiwibGFiZWwiLCJrYXRleEltYWdlc0RhdGEiLCJvdmVybGluZXNlZ21lbnQiLCJ1bmRlcmxpbmVzZWdtZW50IiwiZ3JvdXBMZW5ndGgiLCJzdHJldGNoeV9zdmdTcGFuIiwic3ZnU3BhbiIsImJ1aWxkU3ZnU3Bhbl8iLCJ2aWV3Qm94V2lkdGgiLCJncnAiLCJudW1DaGFycyIsImJhc2UiLCJ2aWV3Qm94SGVpZ2h0IiwiX2hlaWdodCIsImltZ0luZGV4IiwibWluV2lkdGgiLCJzcGFucyIsInBhdGhzIiwiX21pbldpZHRoIiwiX3ZpZXdCb3hIZWlnaHQiLCJfaGVpZ2h0MiIsIm51bVN2Z0NoaWxkcmVuIiwid2lkdGhDbGFzc2VzIiwiYWxpZ25zIiwiYWxpZ24xIiwiX3BhdGgiLCJfc3ZnTm9kZSIsIl9zcGFuIiwiX2J1aWxkU3ZnU3Bhbl8iLCJzdHJldGNoeV9lbmNsb3NlU3BhbiIsImVuY2xvc2VTcGFuIiwiaW5uZXIiLCJwYWQiLCJpbWciLCJ0b3RhbEhlaWdodCIsImJvcmRlckNvbG9yIiwibGluZXMiLCJzdHJldGNoeSIsImFjY2VudF9odG1sQnVpbGRlciIsInN1cFN1YiIsInN1cFN1Ykdyb3VwIiwibXVzdFNoaWZ0IiwiaXNTaGlmdHkiLCJiYXNlQ2hhciIsImJhc2VHcm91cCIsImNsZWFyYW5jZSIsImFjY2VudEJvZHkiLCJpc1N0cmV0Y2h5IiwiYWNjZW50IiwiYWNjZW50RnVsbCIsImFjY2VudFdyYXAiLCJhY2NlbnRfbWF0aG1sQnVpbGRlciIsImFjY2VudE5vZGUiLCJOT05fU1RSRVRDSFlfQUNDRU5UX1JFR0VYIiwiY29udGV4dCIsImZ1bmNOYW1lIiwicGFyc2VyIiwiaW5uZXJHcm91cCIsImtlcm4iLCJhcnJvd19wYWRkZWROb2RlIiwicGFkZGVkTm9kZSIsIm9wdEFyZ3MiLCJiZWxvdyIsIm5ld09wdGlvbnMiLCJ1cHBlckdyb3VwIiwibG93ZXJHcm91cCIsImFycm93Qm9keSIsImFycm93U2hpZnQiLCJ1cHBlclNoaWZ0IiwibG93ZXJTaGlmdCIsImFycm93Tm9kZSIsInVwcGVyTm9kZSIsImxvd2VyTm9kZSIsIl9sb3dlck5vZGUiLCJjb2RlIiwicGFyc2VJbnQiLCJjb2xvcl9odG1sQnVpbGRlciIsImVsZW1lbnRzIiwiY29sb3JfbWF0aG1sQnVpbGRlciIsImJyZWFrT25Ub2tlblRleHQiLCJwYXJzZUV4cHJlc3Npb24iLCJuZXdSb3ciLCJuZXdMaW5lIiwibWFyZ2luVG9wIiwiZGVsaW1pdGVyX2dldE1ldHJpY3MiLCJnZXRNZXRyaWNzIiwic3ltYm9sIiwiZGVsaW1pdGVyX3N0eWxlV3JhcCIsInN0eWxlV3JhcCIsImRlbGltIiwidG9TdHlsZSIsImRlbGltU2l6ZU11bHRpcGxpZXIiLCJjZW50ZXJTcGFuIiwiZGVsaW1pdGVyX21ha2VTbWFsbERlbGltIiwibWFrZVNtYWxsRGVsaW0iLCJjZW50ZXIiLCJkZWxpbWl0ZXJfbWF0aHJtU2l6ZSIsIm1hdGhybVNpemUiLCJkZWxpbWl0ZXJfbWFrZUxhcmdlRGVsaW0iLCJtYWtlTGFyZ2VEZWxpbSIsImRlbGltaXRlcl9tYWtlSW5uZXIiLCJtYWtlSW5uZXIiLCJzaXplQ2xhc3MiLCJkZWxpbWl0ZXJfbWFrZVN0YWNrZWREZWxpbSIsIm1ha2VTdGFja2VkRGVsaW0iLCJoZWlnaHRUb3RhbCIsIm1pZGRsZSIsInJlcGVhdCIsInRvcE1ldHJpY3MiLCJ0b3BIZWlnaHRUb3RhbCIsInJlcGVhdE1ldHJpY3MiLCJyZXBlYXRIZWlnaHRUb3RhbCIsImJvdHRvbU1ldHJpY3MiLCJib3R0b21IZWlnaHRUb3RhbCIsIm1pZGRsZUhlaWdodFRvdGFsIiwibWlkZGxlRmFjdG9yIiwibWlkZGxlTWV0cmljcyIsIm1pbkhlaWdodCIsInJlcGVhdENvdW50IiwicmVhbEhlaWdodFRvdGFsIiwiaW5uZXJzIiwidmJQYWQiLCJlbVBhZCIsImRlbGltaXRlcl9zcXJ0U3ZnIiwic3FydFN2ZyIsInNxcnROYW1lIiwidmVydFNlZ21lbnQiLCJwYXRoTm9kZSIsInN2ZyIsIm1ha2VTcXJ0SW1hZ2UiLCJ0cmF2ZXJzZVNlcXVlbmNlIiwic3RhY2tMYXJnZURlbGltaXRlclNlcXVlbmNlIiwic3BhbkhlaWdodCIsInRleEhlaWdodCIsImFkdmFuY2VXaWR0aCIsInNpemVUb01heEhlaWdodCIsInJ1bGVXaWR0aCIsInN0YWNrTGFyZ2VEZWxpbWl0ZXJzIiwic3RhY2tBbHdheXNEZWxpbWl0ZXJzIiwic3RhY2tOZXZlckRlbGltaXRlcnMiLCJkZWxpbWl0ZXJfbWFrZVNpemVkRGVsaW0iLCJtYWtlU2l6ZWREZWxpbSIsInN0YWNrTmV2ZXJEZWxpbWl0ZXJTZXF1ZW5jZSIsInN0YWNrQWx3YXlzRGVsaW1pdGVyU2VxdWVuY2UiLCJkZWxpbVR5cGVUb0ZvbnQiLCJzZXF1ZW5jZSIsImhlaWdodERlcHRoIiwiZGVsaW1pdGVyX21ha2VDdXN0b21TaXplZERlbGltIiwibWFrZUN1c3RvbVNpemVkRGVsaW0iLCJkZWxpbVR5cGUiLCJtYWtlTGVmdFJpZ2h0RGVsaW0iLCJkZWxpbWl0ZXJGYWN0b3IiLCJkZWxpbWl0ZXJFeHRlbmQiLCJtYXhEaXN0RnJvbUF4aXMiLCJkZWxpbWl0ZXIiLCJzcXJ0SW1hZ2UiLCJzaXplZERlbGltIiwiY3VzdG9tU2l6ZWREZWxpbSIsImxlZnRSaWdodERlbGltIiwiZGVsaW1pdGVyU2l6ZXMiLCJtY2xhc3MiLCJkZWxpbWl0ZXJzIiwiY2hlY2tEZWxpbWl0ZXIiLCJzeW1EZWxpbSIsImFzc2VydFBhcnNlZCIsImxlZnRyaWdodERlcHRoIiwiZXhwZWN0IiwicGFyc2VGdW5jdGlvbiIsImlubmVySGVpZ2h0IiwiaW5uZXJEZXB0aCIsImhhZE1pZGRsZSIsImlzTWlkZGxlIiwibGVmdERlbGltIiwibWlkZGxlRGVsaW0iLCJyaWdodERlbGltIiwibGVmdE5vZGUiLCJyaWdodE5vZGUiLCJ0ZXh0Tm9kZSIsIm1pZGRsZU5vZGUiLCJlbmNsb3NlX2h0bWxCdWlsZGVyIiwiaW1nU2hpZnQiLCJpc1NpbmdsZUNoYXIiLCJ2ZXJ0UGFkIiwiYmFja2dyb3VuZENvbG9yIiwiZW5jbG9zZV9tYXRobWxCdWlsZGVyIiwidGhrIiwiX3JlZjMiLCJfcmVmNCIsIl9lbnZpcm9ubWVudHMiLCJkZWZpbmVFbnZpcm9ubWVudCIsImdldEhMaW5lcyIsImhsaW5lSW5mbyIsImNvbnN1bWVTcGFjZXMiLCJueHQiLCJuZXh0VG9rZW4iLCJjb25zdW1lIiwicGFyc2VBcnJheSIsImhza2lwQmVmb3JlQW5kQWZ0ZXIiLCJhZGRKb3QiLCJjb2xzIiwiYXJyYXlzdHJldGNoIiwiY29sU2VwYXJhdGlvblR5cGUiLCJndWxsZXQiLCJiZWdpbkdyb3VwIiwiZXhwYW5kTWFjcm9Bc1RleHQiLCJwYXJzZUZsb2F0Iiwicm93Iiwicm93R2FwcyIsImhMaW5lc0JlZm9yZVJvdyIsImNlbGwiLCJjciIsImVuZEdyb3VwIiwiZENlbGxTdHlsZSIsImVudk5hbWUiLCJhcnJheV9odG1sQnVpbGRlciIsIm5yIiwibmMiLCJobGluZXMiLCJwdCIsImFycmF5Y29sc2VwIiwiYmFzZWxpbmVza2lwIiwiam90IiwiYXJyYXlza2lwIiwiYXJzdHJ1dEhlaWdodCIsImFyc3RydXREZXB0aCIsInNldEhMaW5lUG9zIiwiaGxpbmVzSW5HYXAiLCJpc0Rhc2hlZCIsImlucm93Iiwib3V0cm93IiwiZWx0Iiwicm93R2FwIiwiZ2FwIiwib2Zmc2V0IiwiY29sRGVzY3JpcHRpb25zIiwiY29sU2VwIiwiY29sRGVzY3JOdW0iLCJjb2xEZXNjciIsImZpcnN0U2VwYXJhdG9yIiwic2VwYXJhdG9yIiwiX3NlcGFyYXRvciIsInNlcHdpZHRoIiwicHJlZ2FwIiwiY29sIiwiYWxpZ24iLCJwb3N0Z2FwIiwiZGFzaGVzIiwidkxpc3RFbGVtcyIsImhsaW5lIiwibGluZVNoaWZ0IiwiYWxpZ25NYXAiLCJhcnJheV9tYXRobWxCdWlsZGVyIiwidGFibGUiLCJtZW5jbG9zZSIsImNvbHVtbkxpbmVzIiwicHJldlR5cGVXYXNBbGlnbiIsImlTdGFydCIsImlFbmQiLCJ0cmltIiwiX2NvbHMiLCJzcGFjaW5nIiwicm93TGluZXMiLCJhcnJheV9hbGlnbmVkSGFuZGxlciIsImFsaWduZWRIYW5kbGVyIiwicmVzIiwibnVtTWF0aHMiLCJudW1Db2xzIiwiZW1wdHlHcm91cCIsIm9yZGdyb3VwIiwiYXJnMCIsInRleHRvcmQiLCJOdW1iZXIiLCJpc0FsaWduZWQiLCJfaTMiLCJzdHlsaW5nIiwiX29yZGdyb3VwIiwiY3VyTWF0aHMiLCJfaTQiLCJzeW1Ob2RlIiwiY29sYWxpZ24iLCJuZGUiLCJjYSIsInBheWxvYWQiLCJlbnZpcm9ubWVudHMiLCJzcmNfZW52aXJvbm1lbnRzIiwibmFtZUdyb3VwIiwiZW52IiwiX3BhcnNlciRwYXJzZUFyZ3VtZW50IiwicGFyc2VBcmd1bWVudHMiLCJfYXJncyIsImVuZE5hbWVUb2tlbiIsIm1jbGFzc19tYWtlU3BhbiIsIm1jbGFzc19odG1sQnVpbGRlciIsIm1jbGFzc19tYXRobWxCdWlsZGVyIiwiYmlucmVsQ2xhc3MiLCJhdG9tIiwiYmFzZUFyZyIsInNoaWZ0ZWRBcmciLCJiYXNlT3AiLCJsaW1pdHMiLCJhbHdheXNIYW5kbGVTdXBTdWIiLCJwYXJlbnRJc1N1cFN1YiIsInN1cHByZXNzQmFzZVNoaWZ0Iiwic3Vwc3ViIiwiZm9udF9odG1sQnVpbGRlciIsImZvbnRfbWF0aG1sQnVpbGRlciIsImZvbnRBbGlhc2VzIiwiZnVuYyIsImdlbmZyYWNfYWRqdXN0U3R5bGUiLCJhZGp1c3RTdHlsZSIsIm9yaWdpbmFsU3R5bGUiLCJnZW5mcmFjX2h0bWxCdWlsZGVyIiwibnN0eWxlIiwiZHN0eWxlIiwibnVtZXJtIiwibnVtZXIiLCJjb250aW51ZWQiLCJoU3RydXQiLCJkU3RydXQiLCJkZW5vbW0iLCJkZW5vbSIsInJ1bGVTcGFjaW5nIiwiaGFzQmFyTGluZSIsImJhclNpemUiLCJudW1TaGlmdCIsImRlbm9tU2hpZnQiLCJmcmFjIiwiY2FuZGlkYXRlQ2xlYXJhbmNlIiwibWlkU2hpZnQiLCJkZWxpbVNpemUiLCJnZW5mcmFjX21hdGhtbEJ1aWxkZXIiLCJpc0Rpc3BsYXkiLCJ3aXRoRGVsaW1zIiwibGVmdE9wIiwicmlnaHRPcCIsInJlcGxhY2VXaXRoIiwic3R5bEFycmF5IiwiZGVsaW1Gcm9tVmFsdWUiLCJkZWxpbVN0cmluZyIsImJhck5vZGUiLCJpc0JsYW5rIiwic3R5bCIsInRleHRPcmQiLCJfcmVmNSIsImhvcml6QnJhY2VfaHRtbEJ1aWxkZXIiLCJicmFjZUJvZHkiLCJpc092ZXIiLCJ2U3BhbiIsImhvcml6QnJhY2VfbWF0aG1sQnVpbGRlciIsInVybCIsImh0bWwiLCJtYXRobWwiLCJtYXRoRnVuY3Rpb24iLCJtdVVuaXQiLCJkaW1lbnNpb24iLCJhbGlnbm1lbnQiLCJmaXgiLCJvdXRlck1vZGUiLCJzd2l0Y2hNb2RlIiwibWF0aGNob2ljZV9jaG9vc2VNYXRoU3R5bGUiLCJjaG9vc2VNYXRoU3R5bGUiLCJzY3JpcHRzY3JpcHQiLCJub1N1Y2Nlc3NvciIsIm9wX2h0bWxCdWlsZGVyIiwic3VwR3JvdXAiLCJzdWJHcm91cCIsImhhc0xpbWl0cyIsImxhcmdlIiwic3Rhc2giLCJvdmFsIiwiYmFzZVNoaWZ0IiwiZmluYWxHcm91cCIsIl9ib3R0b20iLCJvcF9tYXRobWxCdWlsZGVyIiwib3BlcmF0b3IiLCJzaW5nbGVDaGFyQmlnT3BzIiwiZk5hbWUiLCJzaW5nbGVDaGFySW50ZWdyYWxzIiwiY2hpbGRUZXh0IiwiaXNBbGxTdHJpbmciLCJ3b3JkIiwiaWRlbnRpZmllciIsInNlbWlzaW1wbGUiLCJzaXppbmdHcm91cCIsInNpemVGdW5jcyIsInNpemluZ19odG1sQnVpbGRlciIsImFtb3VudCIsImR5Iiwic2l6ZWRUZXh0IiwiYm9yZGVyUmlnaHRXaWR0aCIsImJvcmRlclRvcFdpZHRoIiwic21hc2hIZWlnaHQiLCJzbWFzaERlcHRoIiwidGJBcmciLCJsZXR0ZXIiLCJzbWFzaGVkTm9kZSIsInRoZXRhIiwicGhpIiwibGluZUNsZWFyYW5jZSIsIm1pbkRlbGltaXRlckhlaWdodCIsIl9kZWxpbWl0ZXIkc3FydEltYWdlIiwiZGVsaW1EZXB0aCIsInBhZGRpbmdMZWZ0Iiwicm9vdG0iLCJ0b1NoaWZ0Iiwicm9vdFZMaXN0Iiwicm9vdFZMaXN0V3JhcCIsInN0eWxpbmdfc3R5bGVNYXAiLCJuZXdTdHlsZSIsInN0eWxlTWFwIiwic3R5bGVBdHRyaWJ1dGVzIiwic3Vwc3ViX2h0bWxCdWlsZGVyRGVsZWdhdGUiLCJodG1sQnVpbGRlckRlbGVnYXRlIiwiZGVsZWdhdGUiLCJpc1N1cCIsImJ1aWxkZXJEZWxlZ2F0ZSIsInZhbHVlQmFzZSIsInZhbHVlU3VwIiwidmFsdWVTdWIiLCJzdXBtIiwic3VibSIsInN1cFNoaWZ0Iiwic3ViU2hpZnQiLCJfbmV3T3B0aW9ucyIsIm1pblN1cFNoaWZ0IiwiaXNPaWludCIsIm1heFdpZHRoIiwicHNpIiwidmxpc3RFbGVtIiwiX3ZsaXN0RWxlbSIsImlzQnJhY2UiLCJob3JpekJyYWNlIiwiX2Jhc2UiLCJfYmFzZTIiLCJkZWZhdWx0VmFyaWFudCIsImNzc1NwYWNlIiwicmVndWxhclNwYWNlIiwib3JkIiwidGFnX3BhZCIsInBhZE5vZGUiLCJ0ZXh0Rm9udEZhbWlsaWVzIiwidGV4dEZvbnRXZWlnaHRzIiwidGV4dEZvbnRTaGFwZXMiLCJvcHRpb25zV2l0aEZvbnQiLCJtYWtlVmVyYiIsInN0YXIiLCJmdW5jdGlvbnMiLCJzcmNfZnVuY3Rpb25zIiwic3BhY2VSZWdleFN0cmluZyIsImNvbnRyb2xXb3JkUmVnZXhTdHJpbmciLCJjb250cm9sU3ltYm9sUmVnZXhTdHJpbmciLCJjb250cm9sV29yZFdoaXRlc3BhY2VSZWdleFN0cmluZyIsImNvbnRyb2xXb3JkV2hpdGVzcGFjZVJlZ2V4IiwiY29tYmluaW5nRGlhY3JpdGljYWxNYXJrU3RyaW5nIiwiY29tYmluaW5nRGlhY3JpdGljYWxNYXJrc0VuZFJlZ2V4IiwidG9rZW5SZWdleFN0cmluZyIsIkxleGVyX0xleGVyIiwiTGV4ZXIiLCJ0b2tlblJlZ2V4IiwiY2F0Y29kZXMiLCJzZXRDYXRjb2RlIiwiY2hhciIsImxleCIsImxhc3RJbmRleCIsIm5sSW5kZXgiLCJjb250cm9sTWF0Y2giLCJOYW1lc3BhY2VfTmFtZXNwYWNlIiwiTmFtZXNwYWNlIiwiYnVpbHRpbnMiLCJnbG9iYWxNYWNyb3MiLCJjdXJyZW50IiwidW5kZWZTdGFjayIsInVuZGVmcyIsInVuZGVmIiwiYnVpbHRpbk1hY3JvcyIsImRlZmluZU1hY3JvIiwiY29uc3VtZUFyZ3MiLCJ0b2tlbnMiLCJmdXR1cmUiLCJkaWdpdFRvTnVtYmVyIiwicG9wVG9rZW4iLCJkaWdpdCIsIm1hY3Jvc19kZWYiLCJjb21tYW5kIiwibWFjcm9zX25ld2NvbW1hbmQiLCJuZXdjb21tYW5kIiwiZXhpc3RzT0siLCJub25leGlzdHNPSyIsImV4aXN0cyIsImlzRGVmaW5lZCIsImFyZ1RleHQiLCJleHBhbmROZXh0VG9rZW4iLCJkb3RzQnlUb2tlbiIsInRoZWRvdHMiLCJleHBhbmRBZnRlckZ1dHVyZSIsInNwYWNlQWZ0ZXJEb3RzIiwibGF0ZXhSYWlzZUEiLCJpbXBsaWNpdENvbW1hbmRzIiwiTWFjcm9FeHBhbmRlcl9NYWNyb0V4cGFuZGVyIiwiTWFjcm9FeHBhbmRlciIsImV4cGFuc2lvbkNvdW50Iiwic3RhY2siLCJmZWVkIiwibmV3TW9kZSIsInB1c2hUb2tlbiIsInB1c2hUb2tlbnMiLCJfdGhpcyRzdGFjayIsInN0YXJ0T2ZBcmciLCJ0b2siLCJyZXZlcnNlIiwiZXhwYW5kT25jZSIsInRvcFRva2VuIiwiZXhwYW5zaW9uIiwiX2dldEV4cGFuc2lvbiIsIl90b2tlbnMiLCJleHBhbmRlZCIsImV4cGFuZE1hY3JvIiwib2xkU3RhY2tMZW5ndGgiLCJkZWZpbml0aW9uIiwic3RyaXBwZWQiLCJib2R5TGV4ZXIiLCJ1bmljb2RlQWNjZW50cyIsInVuaWNvZGVTeW1ib2xzIiwiUGFyc2VyX1BhcnNlciIsIlBhcnNlciIsInBhcnNlIiwiYnJlYWtPbkluZml4IiwiZW5kT2ZFeHByZXNzaW9uIiwicGFyc2VBdG9tIiwiZm9ybUxpZ2F0dXJlcyIsImhhbmRsZUluZml4Tm9kZXMiLCJvdmVySW5kZXgiLCJudW1lck5vZGUiLCJkZW5vbU5vZGUiLCJudW1lckJvZHkiLCJkZW5vbUJvZHkiLCJfbm9kZSIsImNhbGxGdW5jdGlvbiIsImhhbmRsZVN1cFN1YnNjcmlwdCIsInN5bWJvbFRva2VuIiwicGFyc2VHcm91cCIsIlNVUFNVQl9HUkVFRElORVNTIiwiaGFuZGxlVW5zdXBwb3J0ZWRDbWQiLCJ0ZXh0b3JkQXJyYXkiLCJjb2xvck5vZGUiLCJzdXBlcnNjcmlwdCIsInN1YnNjcmlwdCIsIm9wTm9kZSIsInByaW1lIiwicHJpbWVzIiwiZnVuY0RhdGEiLCJvbGRNb2RlIiwiX3RoaXMkcGFyc2VBcmd1bWVudHMiLCJ0b3RhbEFyZ3MiLCJiYXNlR3JlZWRpbmVzcyIsImFyZ1R5cGUiLCJpc09wdGlvbmFsIiwicGFyc2VHcm91cE9mVHlwZSIsIm9wdGlvbmFsIiwicGFyc2VDb2xvckdyb3VwIiwicGFyc2VTaXplR3JvdXAiLCJwYXJzZVVybEdyb3VwIiwicGFyc2VTdHJpbmdHcm91cCIsInN0cmluZyIsIm1vZGVOYW1lIiwicmF3IiwiZ3JvdXBCZWdpbiIsImdyb3VwRW5kIiwiZmlyc3RUb2tlbiIsIm5lc3RlZCIsImxhc3RUb2tlbiIsInBhcnNlUmVnZXhHcm91cCIsInJlZ2V4IiwicHJvdG9jb2wiLCJhbGxvd2VkIiwiZW5kT2ZHcm91cCIsInBhcnNlU3ltYm9sIiwibnVjbGV1cyIsInN1YnN0cmluZyIsInBhcnNlVHJlZV9wYXJzZVRyZWUiLCJwYXJzZVRyZWUiLCJ0b1BhcnNlIiwic3JjX3BhcnNlVHJlZSIsImthdGV4X3JlbmRlciIsInJlbmRlciIsImJhc2VOb2RlIiwidGV4dENvbnRlbnQiLCJrYXRleF9yZW5kZXJUb0RvbVRyZWUiLCJjb21wYXRNb2RlIiwicmVuZGVyVG9TdHJpbmciLCJrYXRleF9nZW5lcmF0ZVBhcnNlVHJlZSIsImdlbmVyYXRlUGFyc2VUcmVlIiwia2F0ZXhfcmVuZGVyRXJyb3IiLCJyZW5kZXJFcnJvciIsInJlbmRlclRvRG9tVHJlZSIsImthdGV4X3JlbmRlclRvSFRNTFRyZWUiLCJyZW5kZXJUb0hUTUxUcmVlIiwia2F0ZXhfMCIsIl9fcGFyc2UiLCJfX3JlbmRlclRvRG9tVHJlZSIsIl9fcmVuZGVyVG9IVE1MVHJlZSIsIl9fc2V0Rm9udE1ldHJpY3MiLCJfX2RlZmluZVN5bWJvbCIsIl9fZGVmaW5lTWFjcm8iLCJfX2RvbVRyZWUiLCJrYXRleF93ZWJwYWNrIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwiY3VzdG9tRWxlbWVudHMiLCJzaGFkb3dSb290IiwibGluayJdLCJtYXBwaW5ncyI6IjtRQUFBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBOzs7UUFHQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0EsMENBQTBDLGdDQUFnQztRQUMxRTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLHdEQUF3RCxrQkFBa0I7UUFDMUU7UUFDQSxpREFBaUQsY0FBYztRQUMvRDs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EseUNBQXlDLGlDQUFpQztRQUMxRSxnSEFBZ0gsbUJBQW1CLEVBQUU7UUFDckk7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7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LEVBQW1CLE9BQW5CLENBakNLO0FBa0NYLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLE9BQW5CLENBbENLO0FBbUNYLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLE9BQW5CLENBbkNLO0FBb0NYLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLE9BQW5CLENBcENLO0FBcUNYLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLE9BQW5CLENBckNLO0FBc0NYLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLE9BQW5CLENBdENLO0FBdUNYLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLE9BQW5CLENBdkNLO0FBd0NYLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLEdBQW5CLENBeENLO0FBeUNYLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLE9BQW5CLENBekNLO0FBMENYLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLE9BQW5CLENBMUNLO0FBMkNYLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLE9BQW5CLENBM0NLO0FBNENYLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLE9BQW5CLENBNUNLO0FBNkNYLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLE9BQW5CLENBN0NLO0FBOENYLGdCQUFNLENBQUMs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RUFBYSxNQUFiLEVBQXFCLENBQXJCLEVBQXdCLE9BQXhCLENBNUJPO0FBNkJiLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxPQUFiLEVBQXNCLENBQXRCLEVBQXlCLE9BQXpCLENBN0JPO0FBOEJiLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLE9BQW5CLENBOUJPO0FBK0JiLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxPQUFiLEVBQXNCLENBQXRCLEVBQXlCLE9BQXpCLENBL0JPO0FBZ0NiLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxPQUFiLEVBQXNCLENBQXRCLEVBQXlCLE9BQXpCLENBaENPO0FBaUNiLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxPQUFiLEVBQXNCLENBQXRCLEVBQXlCLEtBQXpCLENBakNPO0FBa0NiLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxPQUFiLEVBQXNCLENBQXRCLEVBQXlCLE9BQXpCLENBbENPO0FBbUNiLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxPQUFiLEVBQXNCLENBQXRCLEVBQXlCLE9BQXpCLENBbkNPO0FBb0NiLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxPQUFiLEVBQXNCLENBQXRCLEVBQXlCLE9BQXpCLENBcENPO0FBcUNiLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxPQUFiLEVBQXNCLENBQXRCLEVBQXlCLE9BQXpCLENBckNPO0FBc0NiLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxPQUFiLEVBQXNCLENBQXRCLEVBQXlCLE9BQXpCLENBdENPO0FBdUNiLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxPQUFiLEVBQXNCLENBQXRCLEVBQXlCLEtBQXpCLENBdkNPO0FBd0NiLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxPQUFiLEVBQXNCLENBQXRCLEVBQXlCLE9BQXpCLENB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RUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLE9BQW5CLENBdENRO0FBdUNkLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLE9BQW5CLENBdkNRO0FBd0NkLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLE9BQW5CLENBeENRO0FBeUNkLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLElBQW5CLENBekNRO0FBMENkLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLE9BQW5CLENBMUNRO0FBMkNkLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLE9BQW5CLENBM0NRO0FBNENkLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLE9BQW5CLENBNUNRO0FBNkNkLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLEtBQW5CLENBN0NRO0FBOENkLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLE9BQW5CLENBOUNRO0FBK0NkLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLElBQW5CLENBL0NRO0FBZ0RkLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLE9BQW5CLENBaERRO0FBaURkLGdCQUFNLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLE9BQW5CLENBakRRO0FBa0RkLGdCQUFNLENBQUMsT0FBRCxFQUFVLE9BQVYsRUFBbUIsQ0FBbkIsRUFBc0IsQ0FBdEIsRUFBeUIsT0FBekIs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QUFELEVBQVcsMkJBQVgsQ0FBWDtBQUNBQSxpQkFBVyxDQUFDLFFBQUQsRUFBVywyQkFBWCxDQUFYO0FBQ0FBLGlCQUFXLENBQUMsUUFBRCxFQUFXLDJCQUFYLENBQVg7QUFDQUEsaUJBQVcsQ0FBQyxRQUFELEVBQVcsMkJBQVgsQ0FBWDtBQUNBQSxpQkFBVyxDQUFDLFFBQUQsRUFBVywyQkFBWCxDQUFYO0FBQ0FBLGlCQUFXLENBQUMsV0FBRCxFQUFjLDJCQUFkLENBQVg7QUFDQUEsaUJBQVcsQ0FBQyxXQUFELEVBQWMsMkJBQWQsQ0FBWDtBQUNBQSxpQkFBVyxDQUFDLFdBQUQsRUFBYywyQkFBZCxDQUFYO0FBQ0FBLGlCQUFXLENBQUMsV0FBRCxFQUFjLDJCQUFkLENBQVg7QUFDQUEsaUJBQVcsQ0FBQyxXQUFELEVBQWMsMkJBQWQsQ0FBWDtBQUNBQSxpQkFBVyxDQUFDLFdBQUQsRUFBYywyQkFBZCxDQUFYO0FBQ0FBLGlCQUFXLENBQUMsV0FBRCxFQUFjLDJCQUFkLENBQVg7QUFDQUEsaUJBQVcsQ0FBQyxXQUFELEVBQWMsMkJBQWQsQ0FBWDtBQUNBQSxpQkFBVyxDQUFDLFdBQUQsRUFBYywyQkFBZCxDQUFYO0FBQ0FBLGlCQUFXLENBQUMsV0FBRCxFQUFjLDJCQUFkLENBQVg7QUFDQUEsaUJBQVcsQ0FBQyxTQUFELEVBQVksMkJBQVosQ0FBWDtBQUNBQSxpQkFBVyxDQUFDLFNBQUQsRUFBWSwyQkFBWixDQUFYO0FBQ0FBLGlCQUFXLENBQUMsU0FBRCxFQUFZLDJCQUFaLENBQVg7QUFDQUEsaUJBQVcsQ0FBQyxTQUFELEVBQVksMkJBQVosQ0FBWDtBQUNBQSxpQkFBVyxDQUFDLFNBQUQsRUFBWSwyQkFBWixDQUFYO0FBQ0FBLGlCQUFXLENBQUMsU0FBRCxFQUFZLDJCQUFaLENBQVg7QUFDQUEsaUJBQVcsQ0FBQyxTQUFELEVBQVksMkJBQVosQ0FBWDtBQUNBQSxpQkFBVyxDQUFDLFNBQUQsRUFBWSwyQkFBWixDQUFYO0FBQ0FBLGlCQUFXLENBQUMsU0FBRCxFQUFZLDJCQUFaLENBQVg7QUFDQUEs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LGtCQUFVLFNBM2dCdUM7QUE0Z0JqRDtBQUNBLGtCQUFVLFNBN2dCdUM7QUE4Z0JqRDtBQUNBLGdCQUFRLFNBL2dCeUM7QUFnaEJqRDtBQUNBLGtCQUFVLFNBamhCdUM7QUFraEJqRDtBQUNBLGtCQUFVLFNBbmhCdUM7QUFvaEJqRDtBQUNBLGtCQUFVLFNBcmhCdUM7QUFzaEJqRDtBQUNBLGtCQUFVLFNBdmhCdUM7QUF3aEJqRDtBQUNBLGtCQUFVLFNBemhCdUM7QUEwaEJqRDtBQUNBLGtCQUFVLFNBM2hCdUM7QUE0aEJqRDtBQUNBLGtCQUFVLFNBN2hCdUM7QUE4aEJqRDtBQUNBLGtCQUFVLFNBL2hCdUM7QUFnaUJqRDtBQUNBLGtCQUFVLFNBamlCdUM7QUFraUJqRDtBQUNBLGtCQUFVLFNBbmlCdUM7QUFvaUJqRDtBQUNBLGdCQUFRLFNBcmlCeUM7QUFzaUJqRDtBQUNBLGtCQUFVLFNBdmlCdUM7QUF3aUJqRDtBQUNBLGtCQUFVLFNBemlCdUM7QUEwaUJqRDtBQUNBLGtCQUFVLFNBM2lCdUM7QUE0aUJqRDtBQUNBLGtCQUFVLFNBN2lCdUM7QUE4aUJqRDtBQUNBLGtCQUFVLFNBL2lCdUM7QUFnakJqRDtBQUNBLGtCQUFVLFNBampCdUM7QUFrakJqRDtBQUNBLGtCQUFVLFNBbmpCdUM7QUFvakJqRDtBQUNBLGtCQUFVLFNBcmpCdUM7QUFzakJqRDtBQUNBLGtCQUFVLFNBdmpCdUM7QUF3akJqRDtBQUNBLGtCQUFVLFNBempCdUM7QUEwakJqRDtBQUNBLGtCQUFVLGNBM2pCdUM7QUE0akJqRDtBQUNBLGtCQUFVLGNBN2pCdUM7QUE4akJqRDtBQUNBLGtCQUFVLGNBL2pCdUM7QUFna0JqRDtBQUNBLGtCQUFVLGNBamtCdUM7QUFra0JqRDtBQUNBLGtCQUFVLGNBbmtCdUM7QUFva0JqRDtBQUNBLGtCQUFVLGNBcmtCdUM7QUFza0JqRDtBQUNBLGtCQUFVLGNBdmtCdUM7QUF3a0JqRDtBQUNBLGtCQUFVLGNBemtCdUM7QUEwa0JqRDtBQUNBLGtCQUFVLGNBM2tCdUM7QUE0a0JqRDtBQUNBLGtCQUFVLGNB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a0MiLCJmaWxlIjoiZm9ybXVsYS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL3NyYy9qYXZhc2NyaXB0L3dlYmNvbXBvbmVudHMva2F0ZXguanNcIik7XG4iLCJmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZjIob2JqKTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIF90eXBlb2YyKFN5bWJvbC5pdGVyYXRvcikgPT09IFwic3ltYm9sXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIF90eXBlb2YyKG9iaik7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IF90eXBlb2YyKG9iaik7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZjsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuaWYgKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkgcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG52YXIgZmFjdG9yaWVzID0ge307XG5cbnZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoRiwgbGVuLCBhcmdzKSB7XG4gIGlmICghKGxlbiBpbiBmYWN0b3JpZXMpKSB7XG4gICAgZm9yICh2YXIgbiA9IFtdLCBpID0gMDsgaSA8IGxlbjsgaSsrKSBuW2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgZmFjdG9yaWVzW2xlbl0gPSBGdW5jdGlvbignRixhJywgJ3JldHVybiBuZXcgRignICsgbi5qb2luKCcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbbGVuXShGLCBhcmdzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24uYmluZCB8fCBmdW5jdGlvbiBiaW5kKHRoYXQgLyogLCAuLi5hcmdzICovKSB7XG4gIHZhciBmbiA9IGFGdW5jdGlvbih0aGlzKTtcbiAgdmFyIHBhcnRBcmdzID0gYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZCA9IGZ1bmN0aW9uICgvKiBhcmdzLi4uICovKSB7XG4gICAgdmFyIGFyZ3MgPSBwYXJ0QXJncy5jb25jYXQoYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmQgPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGludm9rZShmbiwgYXJncywgdGhhdCk7XG4gIH07XG4gIGlmIChpc09iamVjdChmbi5wcm90b3R5cGUpKSBib3VuZC5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gIHJldHVybiBib3VuZDtcbn07XG4iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5O1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNJWkUgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgdmFyIGVudHJ5O1xuICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yIChlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICBpZiAoZW50cnkuayA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBmb3IgKHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSksIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucCkgZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm47XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmICh0aGF0Ll9mID09IGVudHJ5KSB0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZiAodGhhdC5fbCA9PSBlbnRyeSkgdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZikge1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh0aGlzLCBOQU1FKVtTSVpFXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgdmFyIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYgKCF0aGF0Ll9mKSB0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZiAocHJldikgcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSB0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgTkFNRSwgSVNfTUFQKSB7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgdGhpcy5fdCA9IHZhbGlkYXRlKGl0ZXJhdGVkLCBOQU1FKTsgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAgICAgICAgICAgICAgICAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBraW5kID0gdGhhdC5faztcbiAgICAgIHZhciBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSykge1xuICB2YXIgQmFzZSA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIEMgPSBCYXNlO1xuICB2YXIgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnO1xuICB2YXIgcHJvdG8gPSBDICYmIEMucHJvdG90eXBlO1xuICB2YXIgTyA9IHt9O1xuICB2YXIgZml4TWV0aG9kID0gZnVuY3Rpb24gKEtFWSkge1xuICAgIHZhciBmbiA9IHByb3RvW0tFWV07XG4gICAgcmVkZWZpbmUocHJvdG8sIEtFWSxcbiAgICAgIEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IHVuZGVmaW5lZCA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQoYSkgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7IHJldHVybiB0aGlzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEsIGIpOyByZXR1cm4gdGhpczsgfVxuICAgICk7XG4gIH07XG4gIGlmICh0eXBlb2YgQyAhPSAnZnVuY3Rpb24nIHx8ICEoSVNfV0VBSyB8fCBwcm90by5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IEMoKS5lbnRyaWVzKCkubmV4dCgpO1xuICB9KSkpIHtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICAgIG1ldGEuTkVFRCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgdmFyIEhBU05UX0NIQUlOSU5HID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZTtcbiAgICAvLyBWOCB+ICBDaHJvbWl1bSA0MC0gd2Vhay1jb2xsZWN0aW9ucyB0aHJvd3Mgb24gcHJpbWl0aXZlcywgYnV0IHNob3VsZCByZXR1cm4gZmFsc2VcbiAgICB2YXIgVEhST1dTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IGluc3RhbmNlLmhhcygxKTsgfSk7XG4gICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgIHZhciBBQ0NFUFRfSVRFUkFCTEVTID0gJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHsgbmV3IEMoaXRlcik7IH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgIHZhciBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICB2YXIgJGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAgIHZhciBpbmRleCA9IDU7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkgJGluc3RhbmNlW0FEREVSXShpbmRleCwgaW5kZXgpO1xuICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICB9KTtcbiAgICBpZiAoIUFDQ0VQVF9JVEVSQUJMRVMpIHtcbiAgICAgIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0YXJnZXQsIGl0ZXJhYmxlKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGFyZ2V0LCBDLCBOQU1FKTtcbiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSgpLCB0YXJnZXQsIEMpO1xuICAgICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDLnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDO1xuICAgIH1cbiAgICBpZiAoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTykge1xuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XG4gICAgICBJU19NQVAgJiYgZml4TWV0aG9kKCdnZXQnKTtcbiAgICB9XG4gICAgaWYgKEJVR0dZX1pFUk8gfHwgSEFTTlRfQ0hBSU5JTkcpIGZpeE1ldGhvZChBRERFUik7XG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZiAoSVNfV0VBSyAmJiBwcm90by5jbGVhcikgZGVsZXRlIHByb3RvLmNsZWFyO1xuICB9XG5cbiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7XG5cbiAgT1tOQU1FXSA9IEM7XG4gICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEMgIT0gQmFzZSksIE8pO1xuXG4gIGlmICghSVNfV0VBSykgY29tbW9uLnNldFN0cm9uZyhDLCBOQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDO1xufTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuMTAnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsIi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IGdldEtleXMoaXQpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgaWYgKGdldFN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpO1xuICAgIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAoc3ltYm9scy5sZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSk7XG4gIHZhciBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmICh0YXJnZXQpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBoaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZiAoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpIGV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCduYXRpdmUtZnVuY3Rpb24tdG8tc3RyaW5nJywgRnVuY3Rpb24udG9TdHJpbmcpO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCB0YXJnZXQsIEMpIHtcbiAgdmFyIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIHZhciBQO1xuICBpZiAoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZikge1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTtcbiIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgc2FmZSk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgU1JDID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4vX2Z1bmN0aW9uLXRvLXN0cmluZycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgVFBMID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbiAoTywgcHJvdG8pIHtcbiAgYW5PYmplY3QoTyk7XG4gIGlmICghaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKSB0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbiAodGVzdCwgYnVnZ3ksIHNldCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi9fY3R4JykoRnVuY3Rpb24uY2FsbCwgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZiAoYnVnZ3kpIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciBDID0gZ2xvYmFsW0tFWV07XG4gIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKSBkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTtcbiIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTkgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1ldGhvZCwgYXJnKSB7XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbFxuICAgIGFyZyA/IG1ldGhvZC5jYWxsKG51bGwsIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgMSkgOiBtZXRob2QuY2FsbChudWxsKTtcbiAgfSk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVFlQRSkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSB8fCBpdC5fdCAhPT0gVFlQRSkgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgJG5hdGl2ZSA9IFtdLmluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTEgLyAxNS40LjQuMTQgQXJyYXkucHJvdG90eXBlLmluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuIE5FR0FUSVZFX1pFUk9cbiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICAgID8gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDBcbiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwidmFyIERhdGVQcm90byA9IERhdGUucHJvdG90eXBlO1xudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRGF0ZVByb3RvW1RPX1NUUklOR107XG52YXIgZ2V0VGltZSA9IERhdGVQcm90by5nZXRUaW1lO1xuaWYgKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0VGltZS5jYWxsKHRoaXMpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gJHRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufVxuIiwiLy8gMTkuMi4zLjIgLyAxNS4zLjQuNSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCh0aGlzQXJnLCBhcmdzLi4uKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdGdW5jdGlvbicsIHsgYmluZDogcmVxdWlyZSgnLi9fYmluZCcpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTUFQID0gJ01hcCc7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKE1BUCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTUFQKSwga2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcbiAgfSxcbiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYgfSk7XG4iLCIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciB0ZXN0ID0ge307XG50ZXN0W3JlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXSA9ICd6JztcbmlmICh0ZXN0ICsgJycgIT0gJ1tvYmplY3Qgel0nKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xuICB9LCB0cnVlKTtcbn1cbiIsIi8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL19iaW5kJyk7XG52YXIgckNvbnN0cnVjdCA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5jb25zdHJ1Y3Q7XG5cbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xudmFyIEFSR1NfQlVHID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgckNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHKSwgJ1JlZmxlY3QnLCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiAsIG5ld1RhcmdldCAqLykge1xuICAgIGFGdW5jdGlvbihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFGdW5jdGlvbihhcmd1bWVudHNbMl0pO1xuICAgIGlmIChBUkdTX0JVRyAmJiAhTkVXX1RBUkdFVF9CVUcpIHJldHVybiByQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcbiAgICBpZiAoVGFyZ2V0ID09IG5ld1RhcmdldCkge1xuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHNcbiAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldCgpO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgfVxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2VcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcbiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gRnVuY3Rpb24uYXBwbHkuY2FsbChUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuNiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3BlcnR5S2V5IFssIHJlY2VpdmVyXSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBnZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdO1xuICB2YXIgZGVzYywgcHJvdG87XG4gIGlmIChhbk9iamVjdCh0YXJnZXQpID09PSByZWNlaXZlcikgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIGlmIChkZXNjID0gZ09QRC5mKHRhcmdldCwgcHJvcGVydHlLZXkpKSByZXR1cm4gaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgPyBkZXNjLnZhbHVlXG4gICAgOiBkZXNjLmdldCAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHJldHVybiBnZXQocHJvdG8sIHByb3BlcnR5S2V5LCByZWNlaXZlcik7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgZ2V0OiBnZXQgfSk7XG4iLCIvLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncygpXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAvLi9nLmZsYWdzICE9ICdnJykgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiByZXF1aXJlKCcuL19mbGFncycpXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uIChmbikge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYgKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgTUVUQSA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIHdrc0RlZmluZSA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKTtcbnZhciBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBnT1BORXh0ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0Jyk7XG52YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICRHT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QRCA9ICRHT1BELmY7XG52YXIgZFAgPSAkRFAuZjtcbnZhciBnT1BOID0gZ09QTkV4dC5mO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRKU09OID0gZ2xvYmFsLkpTT047XG52YXIgX3N0cmluZ2lmeSA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBISURERU4gPSB3a3MoJ19oaWRkZW4nKTtcbnZhciBUT19QUklNSVRJVkUgPSB3a3MoJ3RvUHJpbWl0aXZlJyk7XG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPUFN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyIFVTRV9OQVRJVkUgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nICYmICEhJEdPUFMuZjtcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF9jcmVhdGUoZFAoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKGl0LCBrZXksIEQpIHtcbiAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7XG4gIGlmIChwcm90b0Rlc2MpIGRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xuICBkUChpdCwga2V5LCBEKTtcbiAgaWYgKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pIGRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogZFA7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZykge1xuICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gX2NyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzeW0uX2sgPSB0YWc7XG4gIHJldHVybiBzeW07XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCkge1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvKSAkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuICBhbk9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEQpO1xuICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUQuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXMoaXQsIEhJRERFTikpIGRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcbiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSBpdFtISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEQgPSBfY3JlYXRlKEQsIHsgZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcbiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7XG59O1xudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCkge1xuICBhbk9iamVjdChpdCk7XG4gIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSk7XG4gIHZhciBpID0gMDtcbiAgdmFyIGwgPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGwgPiBpKSAkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKSB7XG4gIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTtcbn07XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KSB7XG4gIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICBpdCA9IHRvSU9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpO1xuICBpZiAoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSBELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn07XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHZhciBuYW1lcyA9IGdPUE4odG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICB2YXIgSVNfT1AgPSBpdCA9PT0gT2JqZWN0UHJvdG87XG4gIHZhciBuYW1lcyA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSkgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpO1xuICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICAgIHZhciAkc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8pICRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBzZXR0ZXIpIHNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldCB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcpO1xuICB9O1xuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl9rO1xuICB9KTtcblxuICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgJERQLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgJEdPUFMuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5JykpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gU3ltYm9sUmVnaXN0cnkpIGlmIChTeW1ib2xSZWdpc3RyeVtrZXldID09PSBzeW0pIHJldHVybiBrZXk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gQ2hyb21lIDM4IGFuZCAzOSBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgZmFpbHMgb24gcHJpbWl0aXZlc1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzQ0M1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSAkZmFpbHMoZnVuY3Rpb24gKCkgeyAkR09QUy5mKDEpOyB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBGQUlMU19PTl9QUklNSVRJVkVTLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICAgIHJldHVybiAkR09QUy5mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHsgYTogUyB9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHtcbiAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgdmFyIGkgPSAxO1xuICAgIHZhciByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICAkcmVwbGFjZXIgPSByZXBsYWNlciA9IGFyZ3NbMV07XG4gICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcbiAgfVxufSk7XG5cbi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClcbiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IHJlcXVpcmUoJy4vX2hpZGUnKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuIiwidmFyICRpdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogZmFsc2UsXG4gIENTU1ZhbHVlTGlzdDogZmFsc2UsXG4gIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NUmVjdExpc3Q6IGZhbHNlLFxuICBET01TdHJpbmdMaXN0OiBmYWxzZSxcbiAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogZmFsc2UsXG4gIEZpbGVMaXN0OiBmYWxzZSxcbiAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcbiAgTWVkaWFMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgTWltZVR5cGVBcnJheTogZmFsc2UsXG4gIE5hbWVkTm9kZU1hcDogZmFsc2UsXG4gIE5vZGVMaXN0OiB0cnVlLFxuICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSxcbiAgUGx1Z2luOiBmYWxzZSxcbiAgUGx1Z2luQXJyYXk6IGZhbHNlLFxuICBTVkdMZW5ndGhMaXN0OiBmYWxzZSxcbiAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXG4gIFNWR1BhdGhTZWdMaXN0OiBmYWxzZSxcbiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSxcbiAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IGZhbHNlLFxuICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSxcbiAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBUZXh0VHJhY2tDdWVMaXN0OiBmYWxzZSxcbiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsXG4gIFRvdWNoTGlzdDogZmFsc2Vcbn07XG5cbmZvciAodmFyIGNvbGxlY3Rpb25zID0gZ2V0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIHZhciBrZXk7XG4gIGlmIChwcm90bykge1xuICAgIGlmICghcHJvdG9bSVRFUkFUT1JdKSBoaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGlmIChleHBsaWNpdCkgZm9yIChrZXkgaW4gJGl0ZXJhdG9ycykgaWYgKCFwcm90b1trZXldKSByZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59XG4iLCIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJrYXRleFwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJrYXRleFwiXSA9IGZhY3RvcnkoKTtcbn0pKCh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcyksIGZ1bmN0aW9uKCkge1xucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4vKioqKioqLyBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4vKioqKioqLyBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbi8qKioqKiovIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuLyoqKioqKi8gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbi8qKioqKiovIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuLyoqKioqKi8gXHRcdHJldHVybiBucztcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMSk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuXG4vKioqLyB9KSxcbi8qIDEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG5cbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9zcmMva2F0ZXgubGVzc1xudmFyIGthdGV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvU291cmNlTG9jYXRpb24uanNcbi8qKlxuICogTGV4aW5nIG9yIHBhcnNpbmcgcG9zaXRpb25hbCBpbmZvcm1hdGlvbiBmb3IgZXJyb3IgcmVwb3J0aW5nLlxuICogVGhpcyBvYmplY3QgaXMgaW1tdXRhYmxlLlxuICovXG52YXIgU291cmNlTG9jYXRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvLyBUaGUgKyBwcmVmaXggaW5kaWNhdGVzIHRoYXQgdGhlc2UgZmllbGRzIGFyZW4ndCB3cml0ZWFibGVcbiAgLy8gTGV4ZXIgaG9sZGluZyB0aGUgaW5wdXQgc3RyaW5nLlxuICAvLyBTdGFydCBvZmZzZXQsIHplcm8tYmFzZWQgaW5jbHVzaXZlLlxuICAvLyBFbmQgb2Zmc2V0LCB6ZXJvLWJhc2VkIGV4Y2x1c2l2ZS5cbiAgZnVuY3Rpb24gU291cmNlTG9jYXRpb24obGV4ZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICB0aGlzLmxleGVyID0gdm9pZCAwO1xuICAgIHRoaXMuc3RhcnQgPSB2b2lkIDA7XG4gICAgdGhpcy5lbmQgPSB2b2lkIDA7XG4gICAgdGhpcy5sZXhlciA9IGxleGVyO1xuICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICB0aGlzLmVuZCA9IGVuZDtcbiAgfVxuICAvKipcbiAgICogTWVyZ2VzIHR3byBgU291cmNlTG9jYXRpb25gcyBmcm9tIGxvY2F0aW9uIHByb3ZpZGVycywgZ2l2ZW4gdGhleSBhcmVcbiAgICogcHJvdmlkZWQgaW4gb3JkZXIgb2YgYXBwZWFyYW5jZS5cbiAgICogLSBSZXR1cm5zIHRoZSBmaXJzdCBvbmUncyBsb2NhdGlvbiBpZiBvbmx5IHRoZSBmaXJzdCBpcyBwcm92aWRlZC5cbiAgICogLSBSZXR1cm5zIGEgbWVyZ2VkIHJhbmdlIG9mIHRoZSBmaXJzdCBhbmQgdGhlIGxhc3QgaWYgYm90aCBhcmUgcHJvdmlkZWRcbiAgICogICBhbmQgdGhlaXIgbGV4ZXJzIG1hdGNoLlxuICAgKiAtIE90aGVyd2lzZSwgcmV0dXJucyBudWxsLlxuICAgKi9cblxuXG4gIFNvdXJjZUxvY2F0aW9uLnJhbmdlID0gZnVuY3Rpb24gcmFuZ2UoZmlyc3QsIHNlY29uZCkge1xuICAgIGlmICghc2Vjb25kKSB7XG4gICAgICByZXR1cm4gZmlyc3QgJiYgZmlyc3QubG9jO1xuICAgIH0gZWxzZSBpZiAoIWZpcnN0IHx8ICFmaXJzdC5sb2MgfHwgIXNlY29uZC5sb2MgfHwgZmlyc3QubG9jLmxleGVyICE9PSBzZWNvbmQubG9jLmxleGVyKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBTb3VyY2VMb2NhdGlvbihmaXJzdC5sb2MubGV4ZXIsIGZpcnN0LmxvYy5zdGFydCwgc2Vjb25kLmxvYy5lbmQpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU291cmNlTG9jYXRpb247XG59KCk7XG5cblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvVG9rZW4uanNcblxuLyoqXG4gKiBJbnRlcmZhY2UgcmVxdWlyZWQgdG8gYnJlYWsgY2lyY3VsYXIgZGVwZW5kZW5jeSBiZXR3ZWVuIFRva2VuLCBMZXhlciwgYW5kXG4gKiBQYXJzZUVycm9yLlxuICovXG5cbi8qKlxuICogVGhlIHJlc3VsdGluZyB0b2tlbiByZXR1cm5lZCBmcm9tIGBsZXhgLlxuICpcbiAqIEl0IGNvbnNpc3RzIG9mIHRoZSB0b2tlbiB0ZXh0IHBsdXMgc29tZSBwb3NpdGlvbiBpbmZvcm1hdGlvbi5cbiAqIFRoZSBwb3NpdGlvbiBpbmZvcm1hdGlvbiBpcyBlc3NlbnRpYWxseSBhIHJhbmdlIGluIGFuIGlucHV0IHN0cmluZyxcbiAqIGJ1dCBpbnN0ZWFkIG9mIHJlZmVyZW5jaW5nIHRoZSBiYXJlIGlucHV0IHN0cmluZywgd2UgcmVmZXIgdG8gdGhlIGxleGVyLlxuICogVGhhdCB3YXkgaXQgaXMgcG9zc2libGUgdG8gYXR0YWNoIGV4dHJhIG1ldGFkYXRhIHRvIHRoZSBpbnB1dCBzdHJpbmcsXG4gKiBsaWtlIGZvciBleGFtcGxlIGEgZmlsZSBuYW1lIG9yIHNpbWlsYXIuXG4gKlxuICogVGhlIHBvc2l0aW9uIGluZm9ybWF0aW9uIGlzIG9wdGlvbmFsLCBzbyBpdCBpcyBPSyB0byBjb25zdHJ1Y3Qgc3ludGhldGljXG4gKiB0b2tlbnMgaWYgYXBwcm9wcmlhdGUuIE5vdCBwcm92aWRpbmcgYXZhaWxhYmxlIHBvc2l0aW9uIGluZm9ybWF0aW9uIG1heVxuICogbGVhZCB0byBkZWdyYWRlZCBlcnJvciByZXBvcnRpbmcsIHRob3VnaC5cbiAqL1xudmFyIFRva2VuX1Rva2VuID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVG9rZW4odGV4dCwgLy8gdGhlIHRleHQgb2YgdGhpcyB0b2tlblxuICBsb2MpIHtcbiAgICB0aGlzLnRleHQgPSB2b2lkIDA7XG4gICAgdGhpcy5sb2MgPSB2b2lkIDA7XG4gICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICB0aGlzLmxvYyA9IGxvYztcbiAgfVxuICAvKipcbiAgICogR2l2ZW4gYSBwYWlyIG9mIHRva2VucyAodGhpcyBhbmQgZW5kVG9rZW4pLCBjb21wdXRlIGEgYFRva2VuYCBlbmNvbXBhc3NpbmdcbiAgICogdGhlIHdob2xlIGlucHV0IHJhbmdlIGVuY2xvc2VkIGJ5IHRoZXNlIHR3by5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gVG9rZW4ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yYW5nZSA9IGZ1bmN0aW9uIHJhbmdlKGVuZFRva2VuLCAvLyBsYXN0IHRva2VuIG9mIHRoZSByYW5nZSwgaW5jbHVzaXZlXG4gIHRleHQpIC8vIHRoZSB0ZXh0IG9mIHRoZSBuZXdseSBjb25zdHJ1Y3RlZCB0b2tlblxuICB7XG4gICAgcmV0dXJuIG5ldyBUb2tlbih0ZXh0LCBTb3VyY2VMb2NhdGlvbi5yYW5nZSh0aGlzLCBlbmRUb2tlbikpO1xuICB9O1xuXG4gIHJldHVybiBUb2tlbjtcbn0oKTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL1BhcnNlRXJyb3IuanNcblxuXG4vKipcbiAqIFRoaXMgaXMgdGhlIFBhcnNlRXJyb3IgY2xhc3MsIHdoaWNoIGlzIHRoZSBtYWluIGVycm9yIHRocm93biBieSBLYVRlWFxuICogZnVuY3Rpb25zIHdoZW4gc29tZXRoaW5nIGhhcyBnb25lIHdyb25nLiBUaGlzIGlzIHVzZWQgdG8gZGlzdGluZ3Vpc2ggaW50ZXJuYWxcbiAqIGVycm9ycyBmcm9tIGVycm9ycyBpbiB0aGUgZXhwcmVzc2lvbiB0aGF0IHRoZSB1c2VyIHByb3ZpZGVkLlxuICpcbiAqIElmIHBvc3NpYmxlLCBhIGNhbGxlciBzaG91bGQgcHJvdmlkZSBhIFRva2VuIG9yIFBhcnNlTm9kZSB3aXRoIGluZm9ybWF0aW9uXG4gKiBhYm91dCB3aGVyZSBpbiB0aGUgc291cmNlIHN0cmluZyB0aGUgcHJvYmxlbSBvY2N1cnJlZC5cbiAqL1xudmFyIFBhcnNlRXJyb3IgPSAvLyBFcnJvciBwb3NpdGlvbiBiYXNlZCBvbiBwYXNzZWQtaW4gVG9rZW4gb3IgUGFyc2VOb2RlLlxuZnVuY3Rpb24gUGFyc2VFcnJvcihtZXNzYWdlLCAvLyBUaGUgZXJyb3IgbWVzc2FnZVxudG9rZW4pIC8vIEFuIG9iamVjdCBwcm92aWRpbmcgcG9zaXRpb24gaW5mb3JtYXRpb25cbntcbiAgdGhpcy5wb3NpdGlvbiA9IHZvaWQgMDtcbiAgdmFyIGVycm9yID0gXCJLYVRlWCBwYXJzZSBlcnJvcjogXCIgKyBtZXNzYWdlO1xuICB2YXIgc3RhcnQ7XG4gIHZhciBsb2MgPSB0b2tlbiAmJiB0b2tlbi5sb2M7XG5cbiAgaWYgKGxvYyAmJiBsb2Muc3RhcnQgPD0gbG9jLmVuZCkge1xuICAgIC8vIElmIHdlIGhhdmUgdGhlIGlucHV0IGFuZCBhIHBvc2l0aW9uLCBtYWtlIHRoZSBlcnJvciBhIGJpdCBmYW5jaWVyXG4gICAgLy8gR2V0IHRoZSBpbnB1dFxuICAgIHZhciBpbnB1dCA9IGxvYy5sZXhlci5pbnB1dDsgLy8gUHJlcGVuZCBzb21lIGluZm9ybWF0aW9uXG5cbiAgICBzdGFydCA9IGxvYy5zdGFydDtcbiAgICB2YXIgZW5kID0gbG9jLmVuZDtcblxuICAgIGlmIChzdGFydCA9PT0gaW5wdXQubGVuZ3RoKSB7XG4gICAgICBlcnJvciArPSBcIiBhdCBlbmQgb2YgaW5wdXQ6IFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBlcnJvciArPSBcIiBhdCBwb3NpdGlvbiBcIiArIChzdGFydCArIDEpICsgXCI6IFwiO1xuICAgIH0gLy8gVW5kZXJsaW5lIHRva2VuIGluIHF1ZXN0aW9uIHVzaW5nIGNvbWJpbmluZyB1bmRlcnNjb3Jlc1xuXG5cbiAgICB2YXIgdW5kZXJsaW5lZCA9IGlucHV0LnNsaWNlKHN0YXJ0LCBlbmQpLnJlcGxhY2UoL1teXS9nLCBcIiQmXFx1MDMzMlwiKTsgLy8gRXh0cmFjdCBzb21lIGNvbnRleHQgZnJvbSB0aGUgaW5wdXQgYW5kIGFkZCBpdCB0byB0aGUgZXJyb3JcblxuICAgIHZhciBsZWZ0O1xuXG4gICAgaWYgKHN0YXJ0ID4gMTUpIHtcbiAgICAgIGxlZnQgPSBcIuKAplwiICsgaW5wdXQuc2xpY2Uoc3RhcnQgLSAxNSwgc3RhcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZWZ0ID0gaW5wdXQuc2xpY2UoMCwgc3RhcnQpO1xuICAgIH1cblxuICAgIHZhciByaWdodDtcblxuICAgIGlmIChlbmQgKyAxNSA8IGlucHV0Lmxlbmd0aCkge1xuICAgICAgcmlnaHQgPSBpbnB1dC5zbGljZShlbmQsIGVuZCArIDE1KSArIFwi4oCmXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJpZ2h0ID0gaW5wdXQuc2xpY2UoZW5kKTtcbiAgICB9XG5cbiAgICBlcnJvciArPSBsZWZ0ICsgdW5kZXJsaW5lZCArIHJpZ2h0O1xuICB9IC8vIFNvbWUgaGFja2VyeSB0byBtYWtlIFBhcnNlRXJyb3IgYSBwcm90b3R5cGUgb2YgRXJyb3JcbiAgLy8gU2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzg0NjA3NTNcblxuXG4gIHZhciBzZWxmID0gbmV3IEVycm9yKGVycm9yKTtcbiAgc2VsZi5uYW1lID0gXCJQYXJzZUVycm9yXCI7IC8vICRGbG93Rml4TWVcblxuICBzZWxmLl9fcHJvdG9fXyA9IFBhcnNlRXJyb3IucHJvdG90eXBlOyAvLyAkRmxvd0ZpeE1lXG5cbiAgc2VsZi5wb3NpdGlvbiA9IHN0YXJ0O1xuICByZXR1cm4gc2VsZjtcbn07IC8vICRGbG93Rml4TWUgTW9yZSBoYWNrZXJ5XG5cblxuUGFyc2VFcnJvci5wcm90b3R5cGUuX19wcm90b19fID0gRXJyb3IucHJvdG90eXBlO1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgc3JjX1BhcnNlRXJyb3IgPSAoUGFyc2VFcnJvcik7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy91dGlscy5qc1xuLyoqXG4gKiBUaGlzIGZpbGUgY29udGFpbnMgYSBsaXN0IG9mIHV0aWxpdHkgZnVuY3Rpb25zIHdoaWNoIGFyZSB1c2VmdWwgaW4gb3RoZXJcbiAqIGZpbGVzLlxuICovXG5cbi8qKlxuICogUmV0dXJuIHdoZXRoZXIgYW4gZWxlbWVudCBpcyBjb250YWluZWQgaW4gYSBsaXN0XG4gKi9cbnZhciBjb250YWlucyA9IGZ1bmN0aW9uIGNvbnRhaW5zKGxpc3QsIGVsZW0pIHtcbiAgcmV0dXJuIGxpc3QuaW5kZXhPZihlbGVtKSAhPT0gLTE7XG59O1xuLyoqXG4gKiBQcm92aWRlIGEgZGVmYXVsdCB2YWx1ZSBpZiBhIHNldHRpbmcgaXMgdW5kZWZpbmVkXG4gKiBOT1RFOiBDb3VsZG4ndCB1c2UgYFRgIGFzIHRoZSBvdXRwdXQgdHlwZSBkdWUgdG8gZmFjZWJvb2svZmxvdyM1MDIyLlxuICovXG5cblxudmFyIGRlZmx0ID0gZnVuY3Rpb24gZGVmbHQoc2V0dGluZywgZGVmYXVsdElmVW5kZWZpbmVkKSB7XG4gIHJldHVybiBzZXR0aW5nID09PSB1bmRlZmluZWQgPyBkZWZhdWx0SWZVbmRlZmluZWQgOiBzZXR0aW5nO1xufTsgLy8gaHlwaGVuYXRlIGFuZCBlc2NhcGUgYWRhcHRlZCBmcm9tIEZhY2Vib29rJ3MgUmVhY3QgdW5kZXIgQXBhY2hlIDIgbGljZW5zZVxuXG5cbnZhciB1cHBlcmNhc2UgPSAvKFtBLVpdKS9nO1xuXG52YXIgaHlwaGVuYXRlID0gZnVuY3Rpb24gaHlwaGVuYXRlKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UodXBwZXJjYXNlLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIEVTQ0FQRV9MT09LVVAgPSB7XG4gIFwiJlwiOiBcIiZhbXA7XCIsXG4gIFwiPlwiOiBcIiZndDtcIixcbiAgXCI8XCI6IFwiJmx0O1wiLFxuICBcIlxcXCJcIjogXCImcXVvdDtcIixcbiAgXCInXCI6IFwiJiN4Mjc7XCJcbn07XG52YXIgRVNDQVBFX1JFR0VYID0gL1smPjxcIiddL2c7XG4vKipcbiAqIEVzY2FwZXMgdGV4dCB0byBwcmV2ZW50IHNjcmlwdGluZyBhdHRhY2tzLlxuICovXG5cbmZ1bmN0aW9uIHV0aWxzX2VzY2FwZSh0ZXh0KSB7XG4gIHJldHVybiBTdHJpbmcodGV4dCkucmVwbGFjZShFU0NBUEVfUkVHRVgsIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgIHJldHVybiBFU0NBUEVfTE9PS1VQW21hdGNoXTtcbiAgfSk7XG59XG4vKipcbiAqIFNvbWV0aW1lcyB3ZSB3YW50IHRvIHB1bGwgb3V0IHRoZSBpbm5lcm1vc3QgZWxlbWVudCBvZiBhIGdyb3VwLiBJbiBtb3N0XG4gKiBjYXNlcywgdGhpcyB3aWxsIGp1c3QgYmUgdGhlIGdyb3VwIGl0c2VsZiwgYnV0IHdoZW4gb3JkZ3JvdXBzIGFuZCBjb2xvcnMgaGF2ZVxuICogYSBzaW5nbGUgZWxlbWVudCwgd2Ugd2FudCB0byBwdWxsIHRoYXQgb3V0LlxuICovXG5cblxudmFyIGdldEJhc2VFbGVtID0gZnVuY3Rpb24gZ2V0QmFzZUVsZW0oZ3JvdXApIHtcbiAgaWYgKGdyb3VwLnR5cGUgPT09IFwib3JkZ3JvdXBcIikge1xuICAgIGlmIChncm91cC5ib2R5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIGdldEJhc2VFbGVtKGdyb3VwLmJvZHlbMF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZ3JvdXA7XG4gICAgfVxuICB9IGVsc2UgaWYgKGdyb3VwLnR5cGUgPT09IFwiY29sb3JcIikge1xuICAgIGlmIChncm91cC5ib2R5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIGdldEJhc2VFbGVtKGdyb3VwLmJvZHlbMF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZ3JvdXA7XG4gICAgfVxuICB9IGVsc2UgaWYgKGdyb3VwLnR5cGUgPT09IFwiZm9udFwiKSB7XG4gICAgcmV0dXJuIGdldEJhc2VFbGVtKGdyb3VwLmJvZHkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBncm91cDtcbiAgfVxufTtcbi8qKlxuICogVGVYYm9vayBhbGdvcml0aG1zIG9mdGVuIHJlZmVyZW5jZSBcImNoYXJhY3RlciBib3hlc1wiLCB3aGljaCBhcmUgc2ltcGx5IGdyb3Vwc1xuICogd2l0aCBhIHNpbmdsZSBjaGFyYWN0ZXIgaW4gdGhlbS4gVG8gZGVjaWRlIGlmIHNvbWV0aGluZyBpcyBhIGNoYXJhY3RlciBib3gsXG4gKiB3ZSBmaW5kIGl0cyBpbm5lcm1vc3QgZ3JvdXAsIGFuZCBzZWUgaWYgaXQgaXMgYSBzaW5nbGUgY2hhcmFjdGVyLlxuICovXG5cblxudmFyIHV0aWxzX2lzQ2hhcmFjdGVyQm94ID0gZnVuY3Rpb24gaXNDaGFyYWN0ZXJCb3goZ3JvdXApIHtcbiAgdmFyIGJhc2VFbGVtID0gZ2V0QmFzZUVsZW0oZ3JvdXApOyAvLyBUaGVzZSBhcmUgYWxsIHRoZXkgdHlwZXMgb2YgZ3JvdXBzIHdoaWNoIGhvbGQgc2luZ2xlIGNoYXJhY3RlcnNcblxuICByZXR1cm4gYmFzZUVsZW0udHlwZSA9PT0gXCJtYXRob3JkXCIgfHwgYmFzZUVsZW0udHlwZSA9PT0gXCJ0ZXh0b3JkXCIgfHwgYmFzZUVsZW0udHlwZSA9PT0gXCJhdG9tXCI7XG59O1xuXG52YXIgYXNzZXJ0ID0gZnVuY3Rpb24gYXNzZXJ0KHZhbHVlKSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIG5vbi1udWxsLCBidXQgZ290ICcgKyBTdHJpbmcodmFsdWUpKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn07XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciB1dGlscyA9ICh7XG4gIGNvbnRhaW5zOiBjb250YWlucyxcbiAgZGVmbHQ6IGRlZmx0LFxuICBlc2NhcGU6IHV0aWxzX2VzY2FwZSxcbiAgaHlwaGVuYXRlOiBoeXBoZW5hdGUsXG4gIGdldEJhc2VFbGVtOiBnZXRCYXNlRWxlbSxcbiAgaXNDaGFyYWN0ZXJCb3g6IHV0aWxzX2lzQ2hhcmFjdGVyQm94XG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL1NldHRpbmdzLmpzXG4vKiBlc2xpbnQgbm8tY29uc29sZTowICovXG5cbi8qKlxuICogVGhpcyBpcyBhIG1vZHVsZSBmb3Igc3RvcmluZyBzZXR0aW5ncyBwYXNzZWQgaW50byBLYVRlWC4gSXQgY29ycmVjdGx5IGhhbmRsZXNcbiAqIGRlZmF1bHQgc2V0dGluZ3MuXG4gKi9cblxuXG5cblxuLyoqXG4gKiBUaGUgbWFpbiBTZXR0aW5ncyBvYmplY3RcbiAqXG4gKiBUaGUgY3VycmVudCBvcHRpb25zIHN0b3JlZCBhcmU6XG4gKiAgLSBkaXNwbGF5TW9kZTogV2hldGhlciB0aGUgZXhwcmVzc2lvbiBzaG91bGQgYmUgdHlwZXNldCBhcyBpbmxpbmUgbWF0aFxuICogICAgICAgICAgICAgICAgIChmYWxzZSwgdGhlIGRlZmF1bHQpLCBtZWFuaW5nIHRoYXQgdGhlIG1hdGggc3RhcnRzIGluXG4gKiAgICAgICAgICAgICAgICAgXFx0ZXh0c3R5bGUgYW5kIGlzIHBsYWNlZCBpbiBhbiBpbmxpbmUtYmxvY2spOyBvciBhcyBkaXNwbGF5XG4gKiAgICAgICAgICAgICAgICAgbWF0aCAodHJ1ZSksIG1lYW5pbmcgdGhhdCB0aGUgbWF0aCBzdGFydHMgaW4gXFxkaXNwbGF5c3R5bGVcbiAqICAgICAgICAgICAgICAgICBhbmQgaXMgcGxhY2VkIGluIGEgYmxvY2sgd2l0aCB2ZXJ0aWNhbCBtYXJnaW4uXG4gKi9cbnZhciBTZXR0aW5nc19TZXR0aW5ncyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNldHRpbmdzKG9wdGlvbnMpIHtcbiAgICB0aGlzLmRpc3BsYXlNb2RlID0gdm9pZCAwO1xuICAgIHRoaXMubGVxbm8gPSB2b2lkIDA7XG4gICAgdGhpcy5mbGVxbiA9IHZvaWQgMDtcbiAgICB0aGlzLnRocm93T25FcnJvciA9IHZvaWQgMDtcbiAgICB0aGlzLmVycm9yQ29sb3IgPSB2b2lkIDA7XG4gICAgdGhpcy5tYWNyb3MgPSB2b2lkIDA7XG4gICAgdGhpcy5jb2xvcklzVGV4dENvbG9yID0gdm9pZCAwO1xuICAgIHRoaXMuc3RyaWN0ID0gdm9pZCAwO1xuICAgIHRoaXMubWF4U2l6ZSA9IHZvaWQgMDtcbiAgICB0aGlzLm1heEV4cGFuZCA9IHZvaWQgMDtcbiAgICB0aGlzLmFsbG93ZWRQcm90b2NvbHMgPSB2b2lkIDA7XG4gICAgLy8gYWxsb3cgbnVsbCBvcHRpb25zXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgdGhpcy5kaXNwbGF5TW9kZSA9IHV0aWxzLmRlZmx0KG9wdGlvbnMuZGlzcGxheU1vZGUsIGZhbHNlKTtcbiAgICB0aGlzLmxlcW5vID0gdXRpbHMuZGVmbHQob3B0aW9ucy5sZXFubywgZmFsc2UpO1xuICAgIHRoaXMuZmxlcW4gPSB1dGlscy5kZWZsdChvcHRpb25zLmZsZXFuLCBmYWxzZSk7XG4gICAgdGhpcy50aHJvd09uRXJyb3IgPSB1dGlscy5kZWZsdChvcHRpb25zLnRocm93T25FcnJvciwgdHJ1ZSk7XG4gICAgdGhpcy5lcnJvckNvbG9yID0gdXRpbHMuZGVmbHQob3B0aW9ucy5lcnJvckNvbG9yLCBcIiNjYzAwMDBcIik7XG4gICAgdGhpcy5tYWNyb3MgPSBvcHRpb25zLm1hY3JvcyB8fCB7fTtcbiAgICB0aGlzLmNvbG9ySXNUZXh0Q29sb3IgPSB1dGlscy5kZWZsdChvcHRpb25zLmNvbG9ySXNUZXh0Q29sb3IsIGZhbHNlKTtcbiAgICB0aGlzLnN0cmljdCA9IHV0aWxzLmRlZmx0KG9wdGlvbnMuc3RyaWN0LCBcIndhcm5cIik7XG4gICAgdGhpcy5tYXhTaXplID0gTWF0aC5tYXgoMCwgdXRpbHMuZGVmbHQob3B0aW9ucy5tYXhTaXplLCBJbmZpbml0eSkpO1xuICAgIHRoaXMubWF4RXhwYW5kID0gTWF0aC5tYXgoMCwgdXRpbHMuZGVmbHQob3B0aW9ucy5tYXhFeHBhbmQsIDEwMDApKTtcbiAgICB0aGlzLmFsbG93ZWRQcm90b2NvbHMgPSB1dGlscy5kZWZsdChvcHRpb25zLmFsbG93ZWRQcm90b2NvbHMsIFtcImh0dHBcIiwgXCJodHRwc1wiLCBcIm1haWx0b1wiLCBcIl9yZWxhdGl2ZVwiXSk7XG4gIH1cbiAgLyoqXG4gICAqIFJlcG9ydCBub25zdHJpY3QgKG5vbi1MYVRlWC1jb21wYXRpYmxlKSBpbnB1dC5cbiAgICogQ2FuIHNhZmVseSBub3QgYmUgY2FsbGVkIGlmIGB0aGlzLnN0cmljdGAgaXMgZmFsc2UgaW4gSmF2YVNjcmlwdC5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gU2V0dGluZ3MucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZXBvcnROb25zdHJpY3QgPSBmdW5jdGlvbiByZXBvcnROb25zdHJpY3QoZXJyb3JDb2RlLCBlcnJvck1zZywgdG9rZW4pIHtcbiAgICB2YXIgc3RyaWN0ID0gdGhpcy5zdHJpY3Q7XG5cbiAgICBpZiAodHlwZW9mIHN0cmljdCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAvLyBBbGxvdyByZXR1cm4gdmFsdWUgb2Ygc3RyaWN0IGZ1bmN0aW9uIHRvIGJlIGJvb2xlYW4gb3Igc3RyaW5nXG4gICAgICAvLyAob3IgbnVsbC91bmRlZmluZWQsIG1lYW5pbmcgbm8gZnVydGhlciBwcm9jZXNzaW5nKS5cbiAgICAgIHN0cmljdCA9IHN0cmljdChlcnJvckNvZGUsIGVycm9yTXNnLCB0b2tlbik7XG4gICAgfVxuXG4gICAgaWYgKCFzdHJpY3QgfHwgc3RyaWN0ID09PSBcImlnbm9yZVwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmIChzdHJpY3QgPT09IHRydWUgfHwgc3RyaWN0ID09PSBcImVycm9yXCIpIHtcbiAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIkxhVGVYLWluY29tcGF0aWJsZSBpbnB1dCBhbmQgc3RyaWN0IG1vZGUgaXMgc2V0IHRvICdlcnJvcic6IFwiICsgKGVycm9yTXNnICsgXCIgW1wiICsgZXJyb3JDb2RlICsgXCJdXCIpLCB0b2tlbik7XG4gICAgfSBlbHNlIGlmIChzdHJpY3QgPT09IFwid2FyblwiKSB7XG4gICAgICB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLndhcm4oXCJMYVRlWC1pbmNvbXBhdGlibGUgaW5wdXQgYW5kIHN0cmljdCBtb2RlIGlzIHNldCB0byAnd2Fybic6IFwiICsgKGVycm9yTXNnICsgXCIgW1wiICsgZXJyb3JDb2RlICsgXCJdXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gd29uJ3QgaGFwcGVuIGluIHR5cGUtc2FmZSBjb2RlXG4gICAgICB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLndhcm4oXCJMYVRlWC1pbmNvbXBhdGlibGUgaW5wdXQgYW5kIHN0cmljdCBtb2RlIGlzIHNldCB0byBcIiArIChcInVucmVjb2duaXplZCAnXCIgKyBzdHJpY3QgKyBcIic6IFwiICsgZXJyb3JNc2cgKyBcIiBbXCIgKyBlcnJvckNvZGUgKyBcIl1cIikpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2hlY2sgd2hldGhlciB0byBhcHBseSBzdHJpY3QgKExhVGVYLWFkaGVyaW5nKSBiZWhhdmlvciBmb3IgdW51c3VhbFxuICAgKiBpbnB1dCAobGlrZSBgXFxcXGApLiAgVW5saWtlIGBub25zdHJpY3RgLCB3aWxsIG5vdCB0aHJvdyBhbiBlcnJvcjtcbiAgICogaW5zdGVhZCwgXCJlcnJvclwiIHRyYW5zbGF0ZXMgdG8gYSByZXR1cm4gdmFsdWUgb2YgYHRydWVgLCB3aGlsZSBcImlnbm9yZVwiXG4gICAqIHRyYW5zbGF0ZXMgdG8gYSByZXR1cm4gdmFsdWUgb2YgYGZhbHNlYC4gIE1heSBzdGlsbCBwcmludCBhIHdhcm5pbmc6XG4gICAqIFwid2FyblwiIHByaW50cyBhIHdhcm5pbmcgYW5kIHJldHVybnMgYGZhbHNlYC5cbiAgICogVGhpcyBpcyBmb3IgdGhlIHNlY29uZCBjYXRlZ29yeSBvZiBgZXJyb3JDb2RlYHMgbGlzdGVkIGluIHRoZSBSRUFETUUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVzZVN0cmljdEJlaGF2aW9yID0gZnVuY3Rpb24gdXNlU3RyaWN0QmVoYXZpb3IoZXJyb3JDb2RlLCBlcnJvck1zZywgdG9rZW4pIHtcbiAgICB2YXIgc3RyaWN0ID0gdGhpcy5zdHJpY3Q7XG5cbiAgICBpZiAodHlwZW9mIHN0cmljdCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAvLyBBbGxvdyByZXR1cm4gdmFsdWUgb2Ygc3RyaWN0IGZ1bmN0aW9uIHRvIGJlIGJvb2xlYW4gb3Igc3RyaW5nXG4gICAgICAvLyAob3IgbnVsbC91bmRlZmluZWQsIG1lYW5pbmcgbm8gZnVydGhlciBwcm9jZXNzaW5nKS5cbiAgICAgIC8vIEJ1dCBjYXRjaCBhbnkgZXhjZXB0aW9ucyB0aHJvd24gYnkgZnVuY3Rpb24sIHRyZWF0aW5nIHRoZW1cbiAgICAgIC8vIGxpa2UgXCJlcnJvclwiLlxuICAgICAgdHJ5IHtcbiAgICAgICAgc3RyaWN0ID0gc3RyaWN0KGVycm9yQ29kZSwgZXJyb3JNc2csIHRva2VuKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHN0cmljdCA9IFwiZXJyb3JcIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXN0cmljdCB8fCBzdHJpY3QgPT09IFwiaWdub3JlXCIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHN0cmljdCA9PT0gdHJ1ZSB8fCBzdHJpY3QgPT09IFwiZXJyb3JcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChzdHJpY3QgPT09IFwid2FyblwiKSB7XG4gICAgICB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLndhcm4oXCJMYVRlWC1pbmNvbXBhdGlibGUgaW5wdXQgYW5kIHN0cmljdCBtb2RlIGlzIHNldCB0byAnd2Fybic6IFwiICsgKGVycm9yTXNnICsgXCIgW1wiICsgZXJyb3JDb2RlICsgXCJdXCIpKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gd29uJ3QgaGFwcGVuIGluIHR5cGUtc2FmZSBjb2RlXG4gICAgICB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLndhcm4oXCJMYVRlWC1pbmNvbXBhdGlibGUgaW5wdXQgYW5kIHN0cmljdCBtb2RlIGlzIHNldCB0byBcIiArIChcInVucmVjb2duaXplZCAnXCIgKyBzdHJpY3QgKyBcIic6IFwiICsgZXJyb3JNc2cgKyBcIiBbXCIgKyBlcnJvckNvZGUgKyBcIl1cIikpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU2V0dGluZ3M7XG59KCk7XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHNyY19TZXR0aW5ncyA9IChTZXR0aW5nc19TZXR0aW5ncyk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9TdHlsZS5qc1xuLyoqXG4gKiBUaGlzIGZpbGUgY29udGFpbnMgaW5mb3JtYXRpb24gYW5kIGNsYXNzZXMgZm9yIHRoZSB2YXJpb3VzIGtpbmRzIG9mIHN0eWxlc1xuICogdXNlZCBpbiBUZVguIEl0IHByb3ZpZGVzIGEgZ2VuZXJpYyBgU3R5bGVgIGNsYXNzLCB3aGljaCBob2xkcyBpbmZvcm1hdGlvblxuICogYWJvdXQgYSBzcGVjaWZpYyBzdHlsZS4gSXQgdGhlbiBwcm92aWRlcyBpbnN0YW5jZXMgb2YgYWxsIHRoZSBkaWZmZXJlbnQga2luZHNcbiAqIG9mIHN0eWxlcyBwb3NzaWJsZSwgYW5kIHByb3ZpZGVzIGZ1bmN0aW9ucyB0byBtb3ZlIGJldHdlZW4gdGhlbSBhbmQgZ2V0XG4gKiBpbmZvcm1hdGlvbiBhYm91dCB0aGVtLlxuICovXG5cbi8qKlxuICogVGhlIG1haW4gc3R5bGUgY2xhc3MuIENvbnRhaW5zIGEgdW5pcXVlIGlkIGZvciB0aGUgc3R5bGUsIGEgc2l6ZSAod2hpY2ggaXNcbiAqIHRoZSBzYW1lIGZvciBjcmFtcGVkIGFuZCB1bmNyYW1wZWQgdmVyc2lvbiBvZiBhIHN0eWxlKSwgYW5kIGEgY3JhbXBlZCBmbGFnLlxuICovXG52YXIgU3R5bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdHlsZShpZCwgc2l6ZSwgY3JhbXBlZCkge1xuICAgIHRoaXMuaWQgPSB2b2lkIDA7XG4gICAgdGhpcy5zaXplID0gdm9pZCAwO1xuICAgIHRoaXMuY3JhbXBlZCA9IHZvaWQgMDtcbiAgICB0aGlzLmlkID0gaWQ7XG4gICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgICB0aGlzLmNyYW1wZWQgPSBjcmFtcGVkO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIHN0eWxlIG9mIGEgc3VwZXJzY3JpcHQgZ2l2ZW4gYSBiYXNlIGluIHRoZSBjdXJyZW50IHN0eWxlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBTdHlsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnN1cCA9IGZ1bmN0aW9uIHN1cCgpIHtcbiAgICByZXR1cm4gU3R5bGVfc3R5bGVzW19zdXBbdGhpcy5pZF1dO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIHN0eWxlIG9mIGEgc3Vic2NyaXB0IGdpdmVuIGEgYmFzZSBpbiB0aGUgY3VycmVudCBzdHlsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uc3ViID0gZnVuY3Rpb24gc3ViKCkge1xuICAgIHJldHVybiBTdHlsZV9zdHlsZXNbX3N1Ylt0aGlzLmlkXV07XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgc3R5bGUgb2YgYSBmcmFjdGlvbiBudW1lcmF0b3IgZ2l2ZW4gdGhlIGZyYWN0aW9uIGluIHRoZSBjdXJyZW50XG4gICAqIHN0eWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5mcmFjTnVtID0gZnVuY3Rpb24gZnJhY051bSgpIHtcbiAgICByZXR1cm4gU3R5bGVfc3R5bGVzW19mcmFjTnVtW3RoaXMuaWRdXTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBzdHlsZSBvZiBhIGZyYWN0aW9uIGRlbm9taW5hdG9yIGdpdmVuIHRoZSBmcmFjdGlvbiBpbiB0aGUgY3VycmVudFxuICAgKiBzdHlsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZnJhY0RlbiA9IGZ1bmN0aW9uIGZyYWNEZW4oKSB7XG4gICAgcmV0dXJuIFN0eWxlX3N0eWxlc1tfZnJhY0Rlblt0aGlzLmlkXV07XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgY3JhbXBlZCB2ZXJzaW9uIG9mIGEgc3R5bGUgKGluIHBhcnRpY3VsYXIsIGNyYW1waW5nIGEgY3JhbXBlZCBzdHlsZVxuICAgKiBkb2Vzbid0IGNoYW5nZSB0aGUgc3R5bGUpLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmFtcCA9IGZ1bmN0aW9uIGNyYW1wKCkge1xuICAgIHJldHVybiBTdHlsZV9zdHlsZXNbX2NyYW1wW3RoaXMuaWRdXTtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgdGV4dCBvciBkaXNwbGF5IHZlcnNpb24gb2YgdGhpcyBzdHlsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udGV4dCA9IGZ1bmN0aW9uIHRleHQoKSB7XG4gICAgcmV0dXJuIFN0eWxlX3N0eWxlc1tfdGV4dFt0aGlzLmlkXV07XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB0cnVlIGlmIHRoaXMgc3R5bGUgaXMgdGlnaHRseSBzcGFjZWQgKHNjcmlwdHN0eWxlL3NjcmlwdHNjcmlwdHN0eWxlKVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pc1RpZ2h0ID0gZnVuY3Rpb24gaXNUaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy5zaXplID49IDI7XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlO1xufSgpOyAvLyBFeHBvcnQgYW4gaW50ZXJmYWNlIGZvciB0eXBlIGNoZWNraW5nLCBidXQgZG9uJ3QgZXhwb3NlIHRoZSBpbXBsZW1lbnRhdGlvbi5cbi8vIFRoaXMgd2F5LCBubyBtb3JlIHN0eWxlcyBjYW4gYmUgZ2VuZXJhdGVkLlxuXG5cbi8vIElEcyBvZiB0aGUgZGlmZmVyZW50IHN0eWxlc1xudmFyIEQgPSAwO1xudmFyIERjID0gMTtcbnZhciBUID0gMjtcbnZhciBUYyA9IDM7XG52YXIgUyA9IDQ7XG52YXIgU2MgPSA1O1xudmFyIFNTID0gNjtcbnZhciBTU2MgPSA3OyAvLyBJbnN0YW5jZXMgb2YgdGhlIGRpZmZlcmVudCBzdHlsZXNcblxudmFyIFN0eWxlX3N0eWxlcyA9IFtuZXcgU3R5bGUoRCwgMCwgZmFsc2UpLCBuZXcgU3R5bGUoRGMsIDAsIHRydWUpLCBuZXcgU3R5bGUoVCwgMSwgZmFsc2UpLCBuZXcgU3R5bGUoVGMsIDEsIHRydWUpLCBuZXcgU3R5bGUoUywgMiwgZmFsc2UpLCBuZXcgU3R5bGUoU2MsIDIsIHRydWUpLCBuZXcgU3R5bGUoU1MsIDMsIGZhbHNlKSwgbmV3IFN0eWxlKFNTYywgMywgdHJ1ZSldOyAvLyBMb29rdXAgdGFibGVzIGZvciBzd2l0Y2hpbmcgZnJvbSBvbmUgc3R5bGUgdG8gYW5vdGhlclxuXG52YXIgX3N1cCA9IFtTLCBTYywgUywgU2MsIFNTLCBTU2MsIFNTLCBTU2NdO1xudmFyIF9zdWIgPSBbU2MsIFNjLCBTYywgU2MsIFNTYywgU1NjLCBTU2MsIFNTY107XG52YXIgX2ZyYWNOdW0gPSBbVCwgVGMsIFMsIFNjLCBTUywgU1NjLCBTUywgU1NjXTtcbnZhciBfZnJhY0RlbiA9IFtUYywgVGMsIFNjLCBTYywgU1NjLCBTU2MsIFNTYywgU1NjXTtcbnZhciBfY3JhbXAgPSBbRGMsIERjLCBUYywgVGMsIFNjLCBTYywgU1NjLCBTU2NdO1xudmFyIF90ZXh0ID0gW0QsIERjLCBULCBUYywgVCwgVGMsIFQsIFRjXTsgLy8gV2Ugb25seSBleHBvcnQgc29tZSBvZiB0aGUgc3R5bGVzLlxuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBzcmNfU3R5bGUgPSAoe1xuICBESVNQTEFZOiBTdHlsZV9zdHlsZXNbRF0sXG4gIFRFWFQ6IFN0eWxlX3N0eWxlc1tUXSxcbiAgU0NSSVBUOiBTdHlsZV9zdHlsZXNbU10sXG4gIFNDUklQVFNDUklQVDogU3R5bGVfc3R5bGVzW1NTXVxufSk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy91bmljb2RlU2NyaXB0cy5qc1xuLypcbiAqIFRoaXMgZmlsZSBkZWZpbmVzIHRoZSBVbmljb2RlIHNjcmlwdHMgYW5kIHNjcmlwdCBmYW1pbGllcyB0aGF0IHdlXG4gKiBzdXBwb3J0LiBUbyBhZGQgbmV3IHNjcmlwdHMgb3IgZmFtaWxpZXMsIGp1c3QgYWRkIGEgbmV3IGVudHJ5IHRvIHRoZVxuICogc2NyaXB0RGF0YSBhcnJheSBiZWxvdy4gQWRkaW5nIHNjcmlwdHMgdG8gdGhlIHNjcmlwdERhdGEgYXJyYXkgYWxsb3dzXG4gKiBjaGFyYWN0ZXJzIGZyb20gdGhhdCBzY3JpcHQgdG8gYXBwZWFyIGluIFxcdGV4dHt9IGVudmlyb25tZW50cy5cbiAqL1xuXG4vKipcbiAqIEVhY2ggc2NyaXB0IG9yIHNjcmlwdCBmYW1pbHkgaGFzIGEgbmFtZSBhbmQgYW4gYXJyYXkgb2YgYmxvY2tzLlxuICogRWFjaCBibG9jayBpcyBhbiBhcnJheSBvZiB0d28gbnVtYmVycyB3aGljaCBzcGVjaWZ5IHRoZSBzdGFydCBhbmRcbiAqIGVuZCBwb2ludHMgKGluY2x1c2l2ZSkgb2YgYSBibG9jayBvZiBVbmljb2RlIGNvZGVwb2ludHMuXG4gKi9cblxuLyoqXG4gKiBVbmljb2RlIGJsb2NrIGRhdGEgZm9yIHRoZSBmYW1pbGllcyBvZiBzY3JpcHRzIHdlIHN1cHBvcnQgaW4gXFx0ZXh0e30uXG4gKiBTY3JpcHRzIG9ubHkgbmVlZCB0byBhcHBlYXIgaGVyZSBpZiB0aGV5IGRvIG5vdCBoYXZlIGZvbnQgbWV0cmljcy5cbiAqL1xudmFyIHNjcmlwdERhdGEgPSBbe1xuICAvLyBMYXRpbiBjaGFyYWN0ZXJzIGJleW9uZCB0aGUgTGF0aW4tMSBjaGFyYWN0ZXJzIHdlIGhhdmUgbWV0cmljcyBmb3IuXG4gIC8vIE5lZWRlZCBmb3IgQ3plY2gsIEh1bmdhcmlhbiBhbmQgVHVya2lzaCB0ZXh0LCBmb3IgZXhhbXBsZS5cbiAgbmFtZTogJ2xhdGluJyxcbiAgYmxvY2tzOiBbWzB4MDEwMCwgMHgwMjRmXSwgLy8gTGF0aW4gRXh0ZW5kZWQtQSBhbmQgTGF0aW4gRXh0ZW5kZWQtQlxuICBbMHgwMzAwLCAweDAzNmZdXVxufSwge1xuICAvLyBUaGUgQ3lyaWxsaWMgc2NyaXB0IHVzZWQgYnkgUnVzc2lhbiBhbmQgcmVsYXRlZCBsYW5ndWFnZXMuXG4gIC8vIEEgQ3lyaWxsaWMgc3Vic2V0IHVzZWQgdG8gYmUgc3VwcG9ydGVkIGFzIGV4cGxpY2l0bHkgZGVmaW5lZFxuICAvLyBzeW1ib2xzIGluIHN5bWJvbHMuanNcbiAgbmFtZTogJ2N5cmlsbGljJyxcbiAgYmxvY2tzOiBbWzB4MDQwMCwgMHgwNGZmXV1cbn0sIHtcbiAgLy8gVGhlIEJyYWhtaWMgc2NyaXB0cyBvZiBTb3V0aCBhbmQgU291dGhlYXN0IEFzaWFcbiAgLy8gRGV2YW5hZ2FyaSAoMDkwMOKAkzA5N0YpXG4gIC8vIEJlbmdhbGkgKDA5ODDigJMwOUZGKVxuICAvLyBHdXJtdWtoaSAoMEEwMOKAkzBBN0YpXG4gIC8vIEd1amFyYXRpICgwQTgw4oCTMEFGRilcbiAgLy8gT3JpeWEgKDBCMDDigJMwQjdGKVxuICAvLyBUYW1pbCAoMEI4MOKAkzBCRkYpXG4gIC8vIFRlbHVndSAoMEMwMOKAkzBDN0YpXG4gIC8vIEthbm5hZGEgKDBDODDigJMwQ0ZGKVxuICAvLyBNYWxheWFsYW0gKDBEMDDigJMwRDdGKVxuICAvLyBTaW5oYWxhICgwRDgw4oCTMERGRilcbiAgLy8gVGhhaSAoMEUwMOKAkzBFN0YpXG4gIC8vIExhbyAoMEU4MOKAkzBFRkYpXG4gIC8vIFRpYmV0YW4gKDBGMDDigJMwRkZGKVxuICAvLyBNeWFubWFyICgxMDAw4oCTMTA5RilcbiAgbmFtZTogJ2JyYWhtaWMnLFxuICBibG9ja3M6IFtbMHgwOTAwLCAweDEwOUZdXVxufSwge1xuICBuYW1lOiAnZ2VvcmdpYW4nLFxuICBibG9ja3M6IFtbMHgxMEEwLCAweDEwZmZdXVxufSwge1xuICAvLyBDaGluZXNlIGFuZCBKYXBhbmVzZS5cbiAgLy8gVGhlIFwia1wiIGluIGNqayBpcyBmb3IgS29yZWFuLCBidXQgd2UndmUgc2VwYXJhdGVkIEtvcmVhbiBvdXRcbiAgbmFtZTogXCJjamtcIixcbiAgYmxvY2tzOiBbWzB4MzAwMCwgMHgzMEZGXSwgLy8gQ0pLIHN5bWJvbHMgYW5kIHB1bmN0dWF0aW9uLCBIaXJhZ2FuYSwgS2F0YWthbmFcbiAgWzB4NEUwMCwgMHg5RkFGXSwgLy8gQ0pLIGlkZW9ncmFtc1xuICBbMHhGRjAwLCAweEZGNjBdXVxufSwge1xuICAvLyBLb3JlYW5cbiAgbmFtZTogJ2hhbmd1bCcsXG4gIGJsb2NrczogW1sweEFDMDAsIDB4RDdBRl1dXG59XTtcbi8qKlxuICogR2l2ZW4gYSBjb2RlcG9pbnQsIHJldHVybiB0aGUgbmFtZSBvZiB0aGUgc2NyaXB0IG9yIHNjcmlwdCBmYW1pbHlcbiAqIGl0IGlzIGZyb20sIG9yIG51bGwgaWYgaXQgaXMgbm90IHBhcnQgb2YgYSBrbm93biBibG9ja1xuICovXG5cbmZ1bmN0aW9uIHNjcmlwdEZyb21Db2RlcG9pbnQoY29kZXBvaW50KSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2NyaXB0RGF0YS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzY3JpcHQgPSBzY3JpcHREYXRhW2ldO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHNjcmlwdC5ibG9ja3MubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgYmxvY2sgPSBzY3JpcHQuYmxvY2tzW19pXTtcblxuICAgICAgaWYgKGNvZGVwb2ludCA+PSBibG9ja1swXSAmJiBjb2RlcG9pbnQgPD0gYmxvY2tbMV0pIHtcbiAgICAgICAgcmV0dXJuIHNjcmlwdC5uYW1lO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBBIGZsYXR0ZW5lZCB2ZXJzaW9uIG9mIGFsbCB0aGUgc3VwcG9ydGVkIGJsb2NrcyBpbiBhIHNpbmdsZSBhcnJheS5cbiAqIFRoaXMgaXMgYW4gb3B0aW1pemF0aW9uIHRvIG1ha2Ugc3VwcG9ydGVkQ29kZXBvaW50KCkgZmFzdC5cbiAqL1xuXG52YXIgYWxsQmxvY2tzID0gW107XG5zY3JpcHREYXRhLmZvckVhY2goZnVuY3Rpb24gKHMpIHtcbiAgcmV0dXJuIHMuYmxvY2tzLmZvckVhY2goZnVuY3Rpb24gKGIpIHtcbiAgICByZXR1cm4gYWxsQmxvY2tzLnB1c2guYXBwbHkoYWxsQmxvY2tzLCBiKTtcbiAgfSk7XG59KTtcbi8qKlxuICogR2l2ZW4gYSBjb2RlcG9pbnQsIHJldHVybiB0cnVlIGlmIGl0IGZhbGxzIHdpdGhpbiBvbmUgb2YgdGhlXG4gKiBzY3JpcHRzIG9yIHNjcmlwdCBmYW1pbGllcyBkZWZpbmVkIGFib3ZlIGFuZCBmYWxzZSBvdGhlcndpc2UuXG4gKlxuICogTWljcm8gYmVuY2htYXJrcyBzaG93cyB0aGF0IHRoaXMgaXMgZmFzdGVyIHRoYW5cbiAqIC9bXFx1MzAwMC1cXHUzMEZGXFx1NEUwMC1cXHU5RkFGXFx1RkYwMC1cXHVGRjYwXFx1QUMwMC1cXHVEN0FGXFx1MDkwMC1cXHUxMDlGXS8udGVzdCgpXG4gKiBpbiBGaXJlZm94LCBDaHJvbWUgYW5kIE5vZGUuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydGVkQ29kZXBvaW50KGNvZGVwb2ludCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbEJsb2Nrcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIGlmIChjb2RlcG9pbnQgPj0gYWxsQmxvY2tzW2ldICYmIGNvZGVwb2ludCA8PSBhbGxCbG9ja3NbaSArIDFdKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9zdmdHZW9tZXRyeS5qc1xuLyoqXG4gKiBUaGlzIGZpbGUgcHJvdmlkZXMgc3VwcG9ydCB0byBkb21UcmVlLmpzXG4gKiBJdCdzIGEgc3RvcmVob3VzZSBvZiBwYXRoIGdlb21ldHJ5IGZvciBTVkcgaW1hZ2VzLlxuICovXG4vLyBJbiBhbGwgcGF0aHMgYmVsb3csIHRoZSB2aWV3Qm94LXRvLWVtIHNjYWxlIGlzIDEwMDA6MS5cbnZhciBoTGluZVBhZCA9IDgwOyAvLyBwYWRkaW5nIGFib3ZlIGEgc3FydCB2aW5pY3VsdW0uXG5cbnZhciBzdmdHZW9tZXRyeV9wYXRoID0ge1xuICAvLyBzcXJ0TWFpbiBwYXRoIGdlb21ldHJ5IGlzIGZyb20gZ2x5cGggVTIyMUEgaW4gdGhlIGZvbnQgS2FUZVggTWFpblxuICAvLyBBbGwgc3VyZHMgaGF2ZSA4MCB1bml0cyBwYWRkaW5nIGFib3ZlIHRoZSB2aW5pY3VsdW1uLlxuICBzcXJ0TWFpbjogXCJNOTUsXCIgKyAoNjIyICsgaExpbmVQYWQpICsgXCJjLTIuNywwLC03LjE3LC0yLjcsLTEzLjUsLThjLTUuOCwtNS4zLC05LjUsXFxuLTEwLC05LjUsLTE0YzAsLTIsMC4zLC0zLjMsMSwtNGMxLjMsLTIuNywyMy44MywtMjAuNyw2Ny41LC01NGM0NC4yLC0zMy4zLDY1LjgsXFxuLTUwLjMsNjYuNSwtNTFjMS4zLC0xLjMsMywtMiw1LC0yYzQuNywwLDguNywzLjMsMTIsMTBzMTczLDM3OCwxNzMsMzc4YzAuNywwLFxcbjM1LjMsLTcxLDEwNCwtMjEzYzY4LjcsLTE0MiwxMzcuNSwtMjg1LDIwNi41LC00MjljNjksLTE0NCwxMDQuNSwtMjE3LjcsMTA2LjUsXFxuLTIyMWM1LjMsLTkuMywxMiwtMTQsMjAsLTE0SDQwMDAwMHY0MEg4NDUuMjcyNHMtMjI1LjI3Miw0NjcsLTIyNS4yNzIsNDY3XFxucy0yMzUsNDg2LC0yMzUsNDg2Yy0yLjcsNC43LC05LDcsLTE5LDdjLTYsMCwtMTAsLTEsLTEyLC0zcy0xOTQsLTQyMiwtMTk0LC00MjJcXG5zLTY1LDQ3LC02NSw0N3ogTTgzNCBcIiArIGhMaW5lUGFkICsgXCJINDAwMDAwdjQwSDg0NXpcIixcbiAgLy8gc2l6ZTEgaXMgZnJvbSBnbHlwaCBVMjIxQSBpbiB0aGUgZm9udCBLYVRlWF9TaXplMS1SZWd1bGFyXG4gIHNxcnRTaXplMTogXCJNMjYzLFwiICsgKDYwMSArIGhMaW5lUGFkKSArIFwiYzAuNywwLDE4LDM5LjcsNTIsMTE5YzM0LDc5LjMsNjguMTY3LFxcbjE1OC43LDEwMi41LDIzOGMzNC4zLDc5LjMsNTEuOCwxMTkuMyw1Mi41LDEyMGMzNDAsLTcwNC43LDUxMC43LC0xMDYwLjMsNTEyLC0xMDY3XFxuYzQuNywtNy4zLDExLC0xMSwxOSwtMTFINDAwMDB2NDBIMTAxMi4zcy0yNzEuMyw1NjcsLTI3MS4zLDU2N2MtMzguNyw4MC43LC04NCxcXG4xNzUsLTEzNiwyODNjLTUyLDEwOCwtODkuMTY3LDE4NS4zLC0xMTEuNSwyMzJjLTIyLjMsNDYuNywtMzMuOCw3MC4zLC0zNC41LDcxXFxuYy00LjcsNC43LC0xMi4zLDcsLTIzLDdzLTEyLC0xLC0xMiwtMXMtMTA5LC0yNTMsLTEwOSwtMjUzYy03Mi43LC0xNjgsLTEwOS4zLFxcbi0yNTIsLTExMCwtMjUyYy0xMC43LDgsLTIyLDE2LjcsLTM0LDI2Yy0yMiwxNy4zLC0zMy4zLDI2LC0zNCwyNnMtMjYsLTI2LC0yNiwtMjZcXG5zNzYsLTU5LDc2LC01OXM3NiwtNjAsNzYsLTYweiBNMTAwMSBcIiArIGhMaW5lUGFkICsgXCJINDAwMDB2NDBIMTAxMnpcIixcbiAgLy8gc2l6ZTIgaXMgZnJvbSBnbHlwaCBVMjIxQSBpbiB0aGUgZm9udCBLYVRlWF9TaXplMi1SZWd1bGFyXG4gIC8vIFRoZSA4MCB1bml0cyBwYWRkaW5nIGlzIG1vc3Qgb2J2aW91cyBoZXJlLiBOb3RlIHN0YXJ0IG5vZGUgYXQgTTEwMDEgODAuXG4gIHNxcnRTaXplMjogXCJNMTAwMSxcIiArIGhMaW5lUGFkICsgXCJINDAwMDAwdjQwSDEwMTMuMXMtODMuNCwyNjgsLTI2NC4xLDg0MGMtMTgwLjcsXFxuNTcyLC0yNzcsODc2LjMsLTI4OSw5MTNjLTQuNyw0LjcsLTEyLjcsNywtMjQsN3MtMTIsMCwtMTIsMGMtMS4zLC0zLjMsLTMuNywtMTEuNyxcXG4tNywtMjVjLTM1LjMsLTEyNS4zLC0xMDYuNywtMzczLjMsLTIxNCwtNzQ0Yy0xMCwxMiwtMjEsMjUsLTMzLDM5cy0zMiwzOSwtMzIsMzlcXG5jLTYsLTUuMywtMTUsLTE0LC0yNywtMjZzMjUsLTMwLDI1LC0zMGMyNi43LC0zMi43LDUyLC02Myw3NiwtOTFzNTIsLTYwLDUyLC02MFxcbnMyMDgsNzIyLDIwOCw3MjJjNTYsLTE3NS4zLDEyNi4zLC0zOTcuMywyMTEsLTY2NmM4NC43LC0yNjguNywxNTMuOCwtNDg4LjIsMjA3LjUsXFxuLTY1OC41YzUzLjcsLTE3MC4zLDg0LjUsLTI2Ni44LDkyLjUsLTI4OS41YzQsLTYuNywxMCwtMTAsMTgsLTEwelxcbk0xMDAxIFwiICsgaExpbmVQYWQgKyBcIkg0MDAwMDB2NDBIMTAxM3pcIixcbiAgLy8gc2l6ZTMgaXMgZnJvbSBnbHlwaCBVMjIxQSBpbiB0aGUgZm9udCBLYVRlWF9TaXplMy1SZWd1bGFyXG4gIHNxcnRTaXplMzogXCJNNDI0LFwiICsgKDIzOTggKyBoTGluZVBhZCkgKyBcImMtMS4zLC0wLjcsLTM4LjUsLTE3MiwtMTExLjUsLTUxNGMtNzMsXFxuLTM0MiwtMTA5LjgsLTUxMy4zLC0xMTAuNSwtNTE0YzAsLTIsLTEwLjcsMTQuMywtMzIsNDljLTQuNyw3LjMsLTkuOCwxNS43LC0xNS41LFxcbjI1Yy01LjcsOS4zLC05LjgsMTYsLTEyLjUsMjBzLTUsNywtNSw3Yy00LC0zLjMsLTguMywtNy43LC0xMywtMTNzLTEzLC0xMywtMTMsXFxuLTEzczc2LC0xMjIsNzYsLTEyMnM3NywtMTIxLDc3LC0xMjFzMjA5LDk2OCwyMDksOTY4YzAsLTIsODQuNywtMzYxLjcsMjU0LC0xMDc5XFxuYzE2OS4zLC03MTcuMywyNTQuNywtMTA3Ny43LDI1NiwtMTA4MWM0LC02LjcsMTAsLTEwLDE4LC0xMEg0MDAwMDB2NDBIMTAxNC42XFxucy04Ny4zLDM3OC43LC0yNzIuNiwxMTY2Yy0xODUuMyw3ODcuMywtMjc5LjMsMTE4Mi4zLC0yODIsMTE4NWMtMiw2LC0xMCw5LC0yNCw5XFxuYy04LDAsLTEyLC0wLjcsLTEyLC0yeiBNMTAwMSBcIiArIGhMaW5lUGFkICsgXCJINDAwMDAwdjQwSDEwMTR6XCIsXG4gIC8vIHNpemU0IGlzIGZyb20gZ2x5cGggVTIyMUEgaW4gdGhlIGZvbnQgS2FUZVhfU2l6ZTQtUmVndWxhclxuICBzcXJ0U2l6ZTQ6IFwiTTQ3MyxcIiArICgyNzEzICsgaExpbmVQYWQpICsgXCJjMzM5LjMsLTE3OTkuMyw1MDkuMywtMjcwMCw1MTAsLTI3MDJcXG5jMy4zLC03LjMsOS4zLC0xMSwxOCwtMTFINDAwMDAwdjQwSDEwMTcuN3MtOTAuNSw0NzgsLTI3Ni4yLDE0NjZjLTE4NS43LDk4OCxcXG4tMjc5LjUsMTQ4MywtMjgxLjUsMTQ4NWMtMiw2LC0xMCw5LC0yNCw5Yy04LDAsLTEyLC0wLjcsLTEyLC0yYzAsLTEuMywtNS4zLC0zMixcXG4tMTYsLTkyYy01MC43LC0yOTMuMywtMTE5LjcsLTY5My4zLC0yMDcsLTEyMDBjMCwtMS4zLC01LjMsOC43LC0xNiwzMGMtMTAuNyxcXG4yMS4zLC0yMS4zLDQyLjcsLTMyLDY0cy0xNiwzMywtMTYsMzNzLTI2LC0yNiwtMjYsLTI2czc2LC0xNTMsNzYsLTE1M3M3NywtMTUxLFxcbjc3LC0xNTFjMC43LDAuNywzNS43LDIwMiwxMDUsNjA0YzY3LjMsNDAwLjcsMTAyLDYwMi43LDEwNCw2MDZ6XFxuTTEwMDEgXCIgKyBoTGluZVBhZCArIFwiSDQwMDAwMHY0MEgxMDE3elwiLFxuICAvLyBUaGUgZG91YmxlbGVmdGFycm93IGdlb21ldHJ5IGlzIGZyb20gZ2x5cGggVSsyMUQwIGluIHRoZSBmb250IEthVGVYIE1haW5cbiAgZG91YmxlbGVmdGFycm93OiBcIk0yNjIgMTU3XFxubDEwLTEwYzM0LTM2IDYyLjctNzcgODYtMTIzIDMuMy04IDUtMTMuMyA1LTE2IDAtNS4zLTYuNy04LTIwLTgtNy4zXFxuIDAtMTIuMi41LTE0LjUgMS41LTIuMyAxLTQuOCA0LjUtNy41IDEwLjUtNDkuMyA5Ny4zLTEyMS43IDE2OS4zLTIxNyAyMTYtMjhcXG4gMTQtNTcuMyAyNS04OCAzMy02LjcgMi0xMSAzLjgtMTMgNS41LTIgMS43LTMgNC4yLTMgNy41czEgNS44IDMgNy41XFxuYzIgMS43IDYuMyAzLjUgMTMgNS41IDY4IDE3LjMgMTI4LjIgNDcuOCAxODAuNSA5MS41IDUyLjMgNDMuNyA5My44IDk2LjIgMTI0LjVcXG4gMTU3LjUgOS4zIDggMTUuMyAxMi4zIDE4IDEzaDZjMTItLjcgMTgtNCAxOC0xMCAwLTItMS43LTctNS0xNS0yMy4zLTQ2LTUyLTg3XFxuLTg2LTEyM2wtMTAtMTBoMzk5NzM4di00MEgyMThjMzI4IDAgMCAwIDAgMGwtMTAtOGMtMjYuNy0yMC02NS43LTQzLTExNy02OSAyLjdcXG4tMiA2LTMuNyAxMC01IDM2LjctMTYgNzIuMy0zNy4zIDEwNy02NGwxMC04aDM5OTc4MnYtNDB6XFxubTggMHY0MGgzOTk3MzB2LTQwem0wIDE5NHY0MGgzOTk3MzB2LTQwelwiLFxuICAvLyBkb3VibGVyaWdodGFycm93IGlzIGZyb20gZ2x5cGggVSsyMUQyIGluIGZvbnQgS2FUZVggTWFpblxuICBkb3VibGVyaWdodGFycm93OiBcIk0zOTk3MzggMzkybFxcbi0xMCAxMGMtMzQgMzYtNjIuNyA3Ny04NiAxMjMtMy4zIDgtNSAxMy4zLTUgMTYgMCA1LjMgNi43IDggMjAgOCA3LjMgMCAxMi4yLS41XFxuIDE0LjUtMS41IDIuMy0xIDQuOC00LjUgNy41LTEwLjUgNDkuMy05Ny4zIDEyMS43LTE2OS4zIDIxNy0yMTYgMjgtMTQgNTcuMy0yNSA4OFxcbi0zMyA2LjctMiAxMS0zLjggMTMtNS41IDItMS43IDMtNC4yIDMtNy41cy0xLTUuOC0zLTcuNWMtMi0xLjctNi4zLTMuNS0xMy01LjUtNjhcXG4tMTcuMy0xMjguMi00Ny44LTE4MC41LTkxLjUtNTIuMy00My43LTkzLjgtOTYuMi0xMjQuNS0xNTcuNS05LjMtOC0xNS4zLTEyLjMtMThcXG4tMTNoLTZjLTEyIC43LTE4IDQtMTggMTAgMCAyIDEuNyA3IDUgMTUgMjMuMyA0NiA1MiA4NyA4NiAxMjNsMTAgMTBIMHY0MGgzOTk3ODJcXG5jLTMyOCAwIDAgMCAwIDBsMTAgOGMyNi43IDIwIDY1LjcgNDMgMTE3IDY5LTIuNyAyLTYgMy43LTEwIDUtMzYuNyAxNi03Mi4zIDM3LjNcXG4tMTA3IDY0bC0xMCA4SDB2NDB6TTAgMTU3djQwaDM5OTczMHYtNDB6bTAgMTk0djQwaDM5OTczMHYtNDB6XCIsXG4gIC8vIGxlZnRhcnJvdyBpcyBmcm9tIGdseXBoIFUrMjE5MCBpbiBmb250IEthVGVYIE1haW5cbiAgbGVmdGFycm93OiBcIk00MDAwMDAgMjQxSDExMGwzLTNjNjguNy01Mi43IDExMy43LTEyMFxcbiAxMzUtMjAyIDQtMTQuNyA2LTIzIDYtMjUgMC03LjMtNy0xMS0yMS0xMS04IDAtMTMuMi44LTE1LjUgMi41LTIuMyAxLjctNC4yIDUuOFxcbi01LjUgMTIuNS0xLjMgNC43LTIuNyAxMC4zLTQgMTctMTIgNDguNy0zNC44IDkyLTY4LjUgMTMwUzY1LjMgMjI4LjMgMTggMjQ3XFxuYy0xMCA0LTE2IDcuNy0xOCAxMSAwIDguNyA2IDE0LjMgMTggMTcgNDcuMyAxOC43IDg3LjggNDcgMTIxLjUgODVTMTk2IDQ0MS4zIDIwOFxcbiA0OTBjLjcgMiAxLjMgNSAyIDlzMS4yIDYuNyAxLjUgOGMuMyAxLjMgMSAzLjMgMiA2czIuMiA0LjUgMy41IDUuNWMxLjMgMSAzLjNcXG4gMS44IDYgMi41czYgMSAxMCAxYzE0IDAgMjEtMy43IDIxLTExIDAtMi0yLTEwLjMtNi0yNS0yMC03OS4zLTY1LTE0Ni43LTEzNS0yMDJcXG4gbC0zLTNoMzk5ODkwek0xMDAgMjQxdjQwaDM5OTkwMHYtNDB6XCIsXG4gIC8vIG92ZXJicmFjZSBpcyBmcm9tIGdseXBocyBVKzIzQTkvMjNBOC8yM0E3IGluIGZvbnQgS2FUZVhfU2l6ZTQtUmVndWxhclxuICBsZWZ0YnJhY2U6IFwiTTYgNTQ4bC02LTZ2LTM1bDYtMTFjNTYtMTA0IDEzNS4zLTE4MS4zIDIzOC0yMzIgNTcuMy0yOC43IDExN1xcbi00NSAxNzktNTBoMzk5NTc3djEyMEg0MDNjLTQzLjMgNy04MSAxNS0xMTMgMjYtMTAwLjcgMzMtMTc5LjcgOTEtMjM3IDE3NC0yLjdcXG4gNS02IDktMTAgMTMtLjcgMS03LjMgMS0yMCAxSDZ6XCIsXG4gIGxlZnRicmFjZXVuZGVyOiBcIk0wIDZsNi02aDE3YzEyLjY4OCAwIDE5LjMxMy4zIDIwIDEgNCA0IDcuMzEzIDguMyAxMCAxM1xcbiAzNS4zMTMgNTEuMyA4MC44MTMgOTMuOCAxMzYuNSAxMjcuNSA1NS42ODggMzMuNyAxMTcuMTg4IDU1LjggMTg0LjUgNjYuNS42ODhcXG4gMCAyIC4zIDQgMSAxOC42ODggMi43IDc2IDQuMyAxNzIgNWgzOTk0NTB2MTIwSDQyOWwtNi0xYy0xMjQuNjg4LTgtMjM1LTYxLjdcXG4tMzMxLTE2MUM2MC42ODcgMTM4LjcgMzIuMzEyIDk5LjMgNyA1NEwwIDQxVjZ6XCIsXG4gIC8vIG92ZXJncm91cCBpcyBmcm9tIHRoZSBNblN5bWJvbCBwYWNrYWdlIChwdWJsaWMgZG9tYWluKVxuICBsZWZ0Z3JvdXA6IFwiTTQwMDAwMCA4MFxcbkg0MzVDNjQgODAgMTY4LjMgMjI5LjQgMjEgMjYwYy01LjkgMS4yLTE4IDAtMTggMC0yIDAtMy0xLTMtM3YtMzhDNzYgNjEgMjU3IDBcXG4gNDM1IDBoMzk5NTY1elwiLFxuICBsZWZ0Z3JvdXB1bmRlcjogXCJNNDAwMDAwIDI2Mlxcbkg0MzVDNjQgMjYyIDE2OC4zIDExMi42IDIxIDgyYy01LjktMS4yLTE4IDAtMTggMC0yIDAtMyAxLTMgM3YzOGM3NiAxNTggMjU3IDIxOVxcbiA0MzUgMjE5aDM5OTU2NXpcIixcbiAgLy8gSGFycG9vbnMgYXJlIGZyb20gZ2x5cGggVSsyMUJEIGluIGZvbnQgS2FUZVggTWFpblxuICBsZWZ0aGFycG9vbjogXCJNMCAyNjdjLjcgNS4zIDMgMTAgNyAxNGgzOTk5OTN2LTQwSDkzYzMuM1xcbi0zLjMgMTAuMi05LjUgMjAuNS0xOC41czE3LjgtMTUuOCAyMi41LTIwLjVjNTAuNy01MiA4OC0xMTAuMyAxMTItMTc1IDQtMTEuMyA1XFxuLTE4LjMgMy0yMS0xLjMtNC03LjMtNi0xOC02LTggMC0xMyAuNy0xNSAycy00LjcgNi43LTggMTZjLTQyIDk4LjctMTA3LjMgMTc0LjdcXG4tMTk2IDIyOC02LjcgNC43LTEwLjcgOC0xMiAxMC0xLjMgMi0yIDUuNy0yIDExem0xMDAtMjZ2NDBoMzk5OTAwdi00MHpcIixcbiAgbGVmdGhhcnBvb25wbHVzOiBcIk0wIDI2N2MuNyA1LjMgMyAxMCA3IDE0aDM5OTk5M3YtNDBIOTNjMy4zLTMuMyAxMC4yLTkuNVxcbiAyMC41LTE4LjVzMTcuOC0xNS44IDIyLjUtMjAuNWM1MC43LTUyIDg4LTExMC4zIDExMi0xNzUgNC0xMS4zIDUtMTguMyAzLTIxLTEuM1xcbi00LTcuMy02LTE4LTYtOCAwLTEzIC43LTE1IDJzLTQuNyA2LjctOCAxNmMtNDIgOTguNy0xMDcuMyAxNzQuNy0xOTYgMjI4LTYuNyA0LjdcXG4tMTAuNyA4LTEyIDEwLTEuMyAyLTIgNS43LTIgMTF6bTEwMC0yNnY0MGgzOTk5MDB2LTQwek0wIDQzNXY0MGg0MDAwMDB2LTQwelxcbm0wIDB2NDBoNDAwMDAwdi00MHpcIixcbiAgbGVmdGhhcnBvb25kb3duOiBcIk03IDI0MWMtNCA0LTYuMzMzIDguNjY3LTcgMTQgMCA1LjMzMy42NjcgOSAyIDExczUuMzMzXFxuIDUuMzMzIDEyIDEwYzkwLjY2NyA1NCAxNTYgMTMwIDE5NiAyMjggMy4zMzMgMTAuNjY3IDYuMzMzIDE2LjMzMyA5IDE3IDIgLjY2NyA1XFxuIDEgOSAxaDVjMTAuNjY3IDAgMTYuNjY3LTIgMTgtNiAyLTIuNjY3IDEtOS42NjctMy0yMS0zMi04Ny4zMzMtODIuNjY3LTE1Ny42NjdcXG4tMTUyLTIxMWwtMy0zaDM5OTkwN3YtNDB6TTkzIDI4MSBINDAwMDAwIHYtNDBMNyAyNDF6XCIsXG4gIGxlZnRoYXJwb29uZG93bnBsdXM6IFwiTTcgNDM1Yy00IDQtNi4zIDguNy03IDE0IDAgNS4zLjcgOSAyIDExczUuMyA1LjMgMTJcXG4gMTBjOTAuNyA1NCAxNTYgMTMwIDE5NiAyMjggMy4zIDEwLjcgNi4zIDE2LjMgOSAxNyAyIC43IDUgMSA5IDFoNWMxMC43IDAgMTYuN1xcbi0yIDE4LTYgMi0yLjcgMS05LjctMy0yMS0zMi04Ny4zLTgyLjctMTU3LjctMTUyLTIxMWwtMy0zaDM5OTkwN3YtNDBIN3ptOTMgMFxcbnY0MGgzOTk5MDB2LTQwek0wIDI0MXY0MGgzOTk5MDB2LTQwem0wIDB2NDBoMzk5OTAwdi00MHpcIixcbiAgLy8gaG9vayBpcyBmcm9tIGdseXBoIFUrMjFBOSBpbiBmb250IEthVGVYIE1haW5cbiAgbGVmdGhvb2s6IFwiTTQwMDAwMCAyODEgSDEwM3MtMzMtMTEuMi02MS0zMy41UzAgMTk3LjMgMCAxNjRzMTQuMi02MS4yIDQyLjVcXG4tODMuNUM3MC44IDU4LjIgMTA0IDQ3IDE0MiA0NyBjMTYuNyAwIDI1IDYuNyAyNSAyMCAwIDEyLTguNyAxOC43LTI2IDIwLTQwIDMuM1xcbi02OC43IDE1LjctODYgMzctMTAgMTItMTUgMjUuMy0xNSA0MCAwIDIyLjcgOS44IDQwLjcgMjkuNSA1NCAxOS43IDEzLjMgNDMuNSAyMVxcbiA3MS41IDIzaDM5OTg1OXpNMTAzIDI4MXYtNDBoMzk5ODk3djQwelwiLFxuICBsZWZ0bGluZXNlZ21lbnQ6IFwiTTQwIDI4MSBWNDI4IEgwIFY5NCBINDAgVjI0MSBINDAwMDAwIHY0MHpcXG5NNDAgMjgxIFY0MjggSDAgVjk0IEg0MCBWMjQxIEg0MDAwMDAgdjQwelwiLFxuICBsZWZ0bWFwc3RvOiBcIk00MCAyODEgVjQ0OEgwVjc0SDQwVjI0MUg0MDAwMDB2NDB6XFxuTTQwIDI4MSBWNDQ4SDBWNzRINDBWMjQxSDQwMDAwMHY0MHpcIixcbiAgLy8gdG9mcm9tIGlzIGZyb20gZ2x5cGggVSsyMUM0IGluIGZvbnQgS2FUZVggQU1TIFJlZ3VsYXJcbiAgbGVmdFRvRnJvbTogXCJNMCAxNDdoNDAwMDAwdjQwSDB6bTAgMjE0YzY4IDQwIDExNS43IDk1LjcgMTQzIDE2N2gyMmMxNS4zIDAgMjNcXG4tLjMgMjMtMSAwLTEuMy01LjMtMTMuNy0xNi0zNy0xOC0zNS4zLTQxLjMtNjktNzAtMTAxbC03LThoMzk5OTA1di00MEg5NWw3LThcXG5jMjguNy0zMiA1Mi02NS43IDcwLTEwMSAxMC43LTIzLjMgMTYtMzUuNyAxNi0zNyAwLS43LTcuNy0xLTIzLTFoLTIyQzExNS43IDI2NS4zXFxuIDY4IDMyMSAwIDM2MXptMC0xNzR2LTQwaDM5OTkwMHY0MHptMTAwIDE1NHY0MGgzOTk5MDB2LTQwelwiLFxuICBsb25nZXF1YWw6IFwiTTAgNTAgaDQwMDAwMCB2NDBIMHogbTAgMTk0aDQwMDAwdjQwSDB6XFxuTTAgNTAgaDQwMDAwMCB2NDBIMHogbTAgMTk0aDQwMDAwdjQwSDB6XCIsXG4gIG1pZGJyYWNlOiBcIk0yMDA0MjggMzM0XFxuYy0xMDAuNy04LjMtMTk1LjMtNDQtMjgwLTEwOC01NS4zLTQyLTEwMS43LTkzLTEzOS0xNTNsLTktMTRjLTIuNyA0LTUuNyA4LjctOSAxNFxcbi01My4zIDg2LjctMTIzLjcgMTUzLTIxMSAxOTktNjYuNyAzNi0xMzcuMyA1Ni4zLTIxMiA2MkgwVjIxNGgxOTk1NjhjMTc4LjMtMTEuN1xcbiAzMTEuNy03OC4zIDQwMy0yMDEgNi04IDkuNy0xMiAxMS0xMiAuNy0uNyA2LjctMSAxOC0xczE3LjMuMyAxOCAxYzEuMyAwIDUgNCAxMVxcbiAxMiA0NC43IDU5LjMgMTAxLjMgMTA2LjMgMTcwIDE0MXMxNDUuMyA1NC4zIDIyOSA2MGgxOTk1NzJ2MTIwelwiLFxuICBtaWRicmFjZXVuZGVyOiBcIk0xOTk1NzIgMjE0XFxuYzEwMC43IDguMyAxOTUuMyA0NCAyODAgMTA4IDU1LjMgNDIgMTAxLjcgOTMgMTM5IDE1M2w5IDE0YzIuNy00IDUuNy04LjcgOS0xNFxcbiA1My4zLTg2LjcgMTIzLjctMTUzIDIxMS0xOTkgNjYuNy0zNiAxMzcuMy01Ni4zIDIxMi02MmgxOTk1Njh2MTIwSDIwMDQzMmMtMTc4LjNcXG4gMTEuNy0zMTEuNyA3OC4zLTQwMyAyMDEtNiA4LTkuNyAxMi0xMSAxMi0uNy43LTYuNyAxLTE4IDFzLTE3LjMtLjMtMTgtMWMtMS4zIDBcXG4tNS00LTExLTEyLTQ0LjctNTkuMy0xMDEuMy0xMDYuMy0xNzAtMTQxcy0xNDUuMy01NC4zLTIyOS02MEgwVjIxNHpcIixcbiAgb2lpbnRTaXplMTogXCJNNTEyLjYgNzEuNmMyNzIuNiAwIDMyMC4zIDEwNi44IDMyMC4zIDE3OC4yIDAgNzAuOC00Ny43IDE3Ny42XFxuLTMyMC4zIDE3Ny42UzE5My4xIDMyMC42IDE5My4xIDI0OS44YzAtNzEuNCA0Ni45LTE3OC4yIDMxOS41LTE3OC4yelxcbm0zNjguMSAxNzguMmMwLTg2LjQtNjAuOS0yMTUuNC0zNjguMS0yMTUuNC0zMDYuNCAwLTM2Ny4zIDEyOS0zNjcuMyAyMTUuNCAwIDg1LjhcXG42MC45IDIxNC44IDM2Ny4zIDIxNC44IDMwNy4yIDAgMzY4LjEtMTI5IDM2OC4xLTIxNC44elwiLFxuICBvaWludFNpemUyOiBcIk03NTcuOCAxMDAuMWMzODQuNyAwIDQ1MS4xIDEzNy42IDQ1MS4xIDIzMCAwIDkxLjMtNjYuNCAyMjguOFxcbi00NTEuMSAyMjguOC0zODYuMyAwLTQ1Mi43LTEzNy41LTQ1Mi43LTIyOC44IDAtOTIuNCA2Ni40LTIzMCA0NTIuNy0yMzB6XFxubTUwMi40IDIzMGMwLTExMS4yLTgyLjQtMjc3LjItNTAyLjQtMjc3LjJzLTUwNCAxNjYtNTA0IDI3Ny4yXFxuYzAgMTEwIDg0IDI3NiA1MDQgMjc2czUwMi40LTE2NiA1MDIuNC0yNzZ6XCIsXG4gIG9paWludFNpemUxOiBcIk02ODEuNCA3MS42YzQwOC45IDAgNDgwLjUgMTA2LjggNDgwLjUgMTc4LjIgMCA3MC44LTcxLjYgMTc3LjZcXG4tNDgwLjUgMTc3LjZTMjAyLjEgMzIwLjYgMjAyLjEgMjQ5LjhjMC03MS40IDcwLjUtMTc4LjIgNDc5LjMtMTc4LjJ6XFxubTUyNS44IDE3OC4yYzAtODYuNC04Ni44LTIxNS40LTUyNS43LTIxNS40LTQzNy45IDAtNTI0LjcgMTI5LTUyNC43IDIxNS40IDBcXG44NS44IDg2LjggMjE0LjggNTI0LjcgMjE0LjggNDM4LjkgMCA1MjUuNy0xMjkgNTI1LjctMjE0Ljh6XCIsXG4gIG9paWludFNpemUyOiBcIk0xMDIxLjIgNTNjNjAzLjYgMCA3MDcuOCAxNjUuOCA3MDcuOCAyNzcuMiAwIDExMC0xMDQuMiAyNzUuOFxcbi03MDcuOCAyNzUuOC02MDYgMC03MTAuMi0xNjUuOC03MTAuMi0yNzUuOEMzMTEgMjE4LjggNDE1LjIgNTMgMTAyMS4yIDUzelxcbm03NzAuNCAyNzcuMWMwLTEzMS4yLTEyNi40LTMyNy42LTc3MC41LTMyNy42UzI0OC40IDE5OC45IDI0OC40IDMzMC4xXFxuYzAgMTMwIDEyOC44IDMyNi40IDc3Mi43IDMyNi40czc3MC41LTE5Ni40IDc3MC41LTMyNi40elwiLFxuICByaWdodGFycm93OiBcIk0wIDI0MXY0MGgzOTk4OTFjLTQ3LjMgMzUuMy04NCA3OC0xMTAgMTI4XFxuLTE2LjcgMzItMjcuNyA2My43LTMzIDk1IDAgMS4zLS4yIDIuNy0uNSA0LS4zIDEuMy0uNSAyLjMtLjUgMyAwIDcuMyA2LjcgMTEgMjBcXG4gMTEgOCAwIDEzLjItLjggMTUuNS0yLjUgMi4zLTEuNyA0LjItNS41IDUuNS0xMS41IDItMTMuMyA1LjctMjcgMTEtNDEgMTQuNy00NC43XFxuIDM5LTg0LjUgNzMtMTE5LjVzNzMuNy02MC4yIDExOS03NS41YzYtMiA5LTUuNyA5LTExcy0zLTktOS0xMWMtNDUuMy0xNS4zLTg1XFxuLTQwLjUtMTE5LTc1LjVzLTU4LjMtNzQuOC03My0xMTkuNWMtNC43LTE0LTguMy0yNy4zLTExLTQwLTEuMy02LjctMy4yLTEwLjgtNS41XFxuLTEyLjUtMi4zLTEuNy03LjUtMi41LTE1LjUtMi41LTE0IDAtMjEgMy43LTIxIDExIDAgMiAyIDEwLjMgNiAyNSAyMC43IDgzLjMgNjdcXG4gMTUxLjcgMTM5IDIwNXptMCAwdjQwaDM5OTkwMHYtNDB6XCIsXG4gIHJpZ2h0YnJhY2U6IFwiTTQwMDAwMCA1NDJsXFxuLTYgNmgtMTdjLTEyLjcgMC0xOS4zLS4zLTIwLTEtNC00LTcuMy04LjMtMTAtMTMtMzUuMy01MS4zLTgwLjgtOTMuOC0xMzYuNS0xMjcuNVxcbnMtMTE3LjItNTUuOC0xODQuNS02Ni41Yy0uNyAwLTItLjMtNC0xLTE4LjctMi43LTc2LTQuMy0xNzItNUgwVjIxNGgzOTk1NzFsNiAxXFxuYzEyNC43IDggMjM1IDYxLjcgMzMxIDE2MSAzMS4zIDMzLjMgNTkuNyA3Mi43IDg1IDExOGw3IDEzdjM1elwiLFxuICByaWdodGJyYWNldW5kZXI6IFwiTTM5OTk5NCAwbDYgNnYzNWwtNiAxMWMtNTYgMTA0LTEzNS4zIDE4MS4zLTIzOCAyMzItNTcuM1xcbiAyOC43LTExNyA0NS0xNzkgNTBILTMwMFYyMTRoMzk5ODk3YzQzLjMtNyA4MS0xNSAxMTMtMjYgMTAwLjctMzMgMTc5LjctOTEgMjM3XFxuLTE3NCAyLjctNSA2LTkgMTAtMTMgLjctMSA3LjMtMSAyMC0xaDE3elwiLFxuICByaWdodGdyb3VwOiBcIk0wIDgwaDM5OTU2NWMzNzEgMCAyNjYuNyAxNDkuNCA0MTQgMTgwIDUuOSAxLjIgMTggMCAxOCAwIDIgMFxcbiAzLTEgMy0zdi0zOGMtNzYtMTU4LTI1Ny0yMTktNDM1LTIxOUgwelwiLFxuICByaWdodGdyb3VwdW5kZXI6IFwiTTAgMjYyaDM5OTU2NWMzNzEgMCAyNjYuNy0xNDkuNCA0MTQtMTgwIDUuOS0xLjIgMTggMCAxOFxcbiAwIDIgMCAzIDEgMyAzdjM4Yy03NiAxNTgtMjU3IDIxOS00MzUgMjE5SDB6XCIsXG4gIHJpZ2h0aGFycG9vbjogXCJNMCAyNDF2NDBoMzk5OTkzYzQuNy00LjcgNy05LjMgNy0xNCAwLTkuM1xcbi0zLjctMTUuMy0xMS0xOC05Mi43LTU2LjctMTU5LTEzMy43LTE5OS0yMzEtMy4zLTkuMy02LTE0LjctOC0xNi0yLTEuMy03LTItMTUtMlxcbi0xMC43IDAtMTYuNyAyLTE4IDYtMiAyLjctMSA5LjcgMyAyMSAxNS4zIDQyIDM2LjcgODEuOCA2NCAxMTkuNSAyNy4zIDM3LjcgNThcXG4gNjkuMiA5MiA5NC41em0wIDB2NDBoMzk5OTAwdi00MHpcIixcbiAgcmlnaHRoYXJwb29ucGx1czogXCJNMCAyNDF2NDBoMzk5OTkzYzQuNy00LjcgNy05LjMgNy0xNCAwLTkuMy0zLjctMTUuMy0xMVxcbi0xOC05Mi43LTU2LjctMTU5LTEzMy43LTE5OS0yMzEtMy4zLTkuMy02LTE0LjctOC0xNi0yLTEuMy03LTItMTUtMi0xMC43IDAtMTYuN1xcbiAyLTE4IDYtMiAyLjctMSA5LjcgMyAyMSAxNS4zIDQyIDM2LjcgODEuOCA2NCAxMTkuNSAyNy4zIDM3LjcgNTggNjkuMiA5MiA5NC41elxcbm0wIDB2NDBoMzk5OTAwdi00MHogbTEwMCAxOTR2NDBoMzk5OTAwdi00MHptMCAwdjQwaDM5OTkwMHYtNDB6XCIsXG4gIHJpZ2h0aGFycG9vbmRvd246IFwiTTM5OTc0NyA1MTFjMCA3LjMgNi43IDExIDIwIDExIDggMCAxMy0uOCAxNS0yLjVzNC43LTYuOFxcbiA4LTE1LjVjNDAtOTQgOTkuMy0xNjYuMyAxNzgtMjE3IDEzLjMtOCAyMC4zLTEyLjMgMjEtMTMgNS4zLTMuMyA4LjUtNS44IDkuNVxcbi03LjUgMS0xLjcgMS41LTUuMiAxLjUtMTAuNXMtMi4zLTEwLjMtNy0xNUgwdjQwaDM5OTkwOGMtMzQgMjUuMy02NC43IDU3LTkyIDk1XFxuLTI3LjMgMzgtNDguNyA3Ny43LTY0IDExOS0zLjMgOC43LTUgMTQtNSAxNnpNMCAyNDF2NDBoMzk5OTAwdi00MHpcIixcbiAgcmlnaHRoYXJwb29uZG93bnBsdXM6IFwiTTM5OTc0NyA3MDVjMCA3LjMgNi43IDExIDIwIDExIDggMCAxMy0uOFxcbiAxNS0yLjVzNC43LTYuOCA4LTE1LjVjNDAtOTQgOTkuMy0xNjYuMyAxNzgtMjE3IDEzLjMtOCAyMC4zLTEyLjMgMjEtMTMgNS4zLTMuM1xcbiA4LjUtNS44IDkuNS03LjUgMS0xLjcgMS41LTUuMiAxLjUtMTAuNXMtMi4zLTEwLjMtNy0xNUgwdjQwaDM5OTkwOGMtMzQgMjUuM1xcbi02NC43IDU3LTkyIDk1LTI3LjMgMzgtNDguNyA3Ny43LTY0IDExOS0zLjMgOC43LTUgMTQtNSAxNnpNMCA0MzV2NDBoMzk5OTAwdi00MHpcXG5tMC0xOTR2NDBoNDAwMDAwdi00MHptMCAwdjQwaDQwMDAwMHYtNDB6XCIsXG4gIHJpZ2h0aG9vazogXCJNMzk5ODU5IDI0MWMtNzY0IDAgMCAwIDAgMCA0MC0zLjMgNjguNy0xNS43IDg2LTM3IDEwLTEyIDE1LTI1LjNcXG4gMTUtNDAgMC0yMi43LTkuOC00MC43LTI5LjUtNTQtMTkuNy0xMy4zLTQzLjUtMjEtNzEuNS0yMy0xNy4zLTEuMy0yNi04LTI2LTIwIDBcXG4tMTMuMyA4LjctMjAgMjYtMjAgMzggMCA3MSAxMS4yIDk5IDMzLjUgMCAwIDcgNS42IDIxIDE2LjcgMTQgMTEuMiAyMSAzMy41IDIxXFxuIDY2LjhzLTE0IDYxLjItNDIgODMuNWMtMjggMjIuMy02MSAzMy41LTk5IDMzLjVMMCAyNDF6IE0wIDI4MXYtNDBoMzk5ODU5djQwelwiLFxuICByaWdodGxpbmVzZWdtZW50OiBcIk0zOTk5NjAgMjQxIFY5NCBoNDAgVjQyOCBoLTQwIFYyODEgSDAgdi00MHpcXG5NMzk5OTYwIDI0MSBWOTQgaDQwIFY0MjggaC00MCBWMjgxIEgwIHYtNDB6XCIsXG4gIHJpZ2h0VG9Gcm9tOiBcIk00MDAwMDAgMTY3Yy03MC43LTQyLTExOC05Ny43LTE0Mi0xNjdoLTIzYy0xNS4zIDAtMjMgLjMtMjNcXG4gMSAwIDEuMyA1LjMgMTMuNyAxNiAzNyAxOCAzNS4zIDQxLjMgNjkgNzAgMTAxbDcgOEgwdjQwaDM5OTkwNWwtNyA4Yy0yOC43IDMyXFxuLTUyIDY1LjctNzAgMTAxLTEwLjcgMjMuMy0xNiAzNS43LTE2IDM3IDAgLjcgNy43IDEgMjMgMWgyM2MyNC02OS4zIDcxLjMtMTI1IDE0Mlxcbi0xNjd6IE0xMDAgMTQ3djQwaDM5OTkwMHYtNDB6TTAgMzQxdjQwaDM5OTkwMHYtNDB6XCIsXG4gIC8vIHR3b2hlYWRsZWZ0YXJyb3cgaXMgZnJvbSBnbHlwaCBVKzIxOUUgaW4gZm9udCBLYVRlWCBBTVMgUmVndWxhclxuICB0d29oZWFkbGVmdGFycm93OiBcIk0wIDE2N2M2OCA0MFxcbiAxMTUuNyA5NS43IDE0MyAxNjdoMjJjMTUuMyAwIDIzLS4zIDIzLTEgMC0xLjMtNS4zLTEzLjctMTYtMzctMTgtMzUuMy00MS4zLTY5XFxuLTcwLTEwMWwtNy04aDEyNWw5IDdjNTAuNyAzOS4zIDg1IDg2IDEwMyAxNDBoNDZjMC00LjctNi4zLTE4LjctMTktNDItMTgtMzUuM1xcbi00MC02Ny4zLTY2LTk2bC05LTloMzk5NzE2di00MEgyODRsOS05YzI2LTI4LjcgNDgtNjAuNyA2Ni05NiAxMi43LTIzLjMzMyAxOVxcbi0zNy4zMzMgMTktNDJoLTQ2Yy0xOCA1NC01Mi4zIDEwMC43LTEwMyAxNDBsLTkgN0g5NWw3LThjMjguNy0zMiA1Mi02NS43IDcwLTEwMVxcbiAxMC43LTIzLjMzMyAxNi0zNS43IDE2LTM3IDAtLjctNy43LTEtMjMtMWgtMjJDMTE1LjcgNzEuMyA2OCAxMjcgMCAxNjd6XCIsXG4gIHR3b2hlYWRyaWdodGFycm93OiBcIk00MDAwMDAgMTY3XFxuYy02OC00MC0xMTUuNy05NS43LTE0My0xNjdoLTIyYy0xNS4zIDAtMjMgLjMtMjMgMSAwIDEuMyA1LjMgMTMuNyAxNiAzNyAxOCAzNS4zXFxuIDQxLjMgNjkgNzAgMTAxbDcgOGgtMTI1bC05LTdjLTUwLjctMzkuMy04NS04Ni0xMDMtMTQwaC00NmMwIDQuNyA2LjMgMTguNyAxOSA0MlxcbiAxOCAzNS4zIDQwIDY3LjMgNjYgOTZsOSA5SDB2NDBoMzk5NzE2bC05IDljLTI2IDI4LjctNDggNjAuNy02NiA5Ni0xMi43IDIzLjMzM1xcbi0xOSAzNy4zMzMtMTkgNDJoNDZjMTgtNTQgNTIuMy0xMDAuNyAxMDMtMTQwbDktN2gxMjVsLTcgOGMtMjguNyAzMi01MiA2NS43LTcwXFxuIDEwMS0xMC43IDIzLjMzMy0xNiAzNS43LTE2IDM3IDAgLjcgNy43IDEgMjMgMWgyMmMyNy4zLTcxLjMgNzUtMTI3IDE0My0xNjd6XCIsXG4gIC8vIHRpbGRlMSBpcyBhIG1vZGlmaWVkIHZlcnNpb24gb2YgYSBnbHlwaCBmcm9tIHRoZSBNblN5bWJvbCBwYWNrYWdlXG4gIHRpbGRlMTogXCJNMjAwIDU1LjUzOGMtNzcgMC0xNjggNzMuOTUzLTE3NyA3My45NTMtMyAwLTdcXG4tMi4xNzUtOS01LjQzN0wyIDk3Yy0xLTItMi00LTItNiAwLTQgMi03IDUtOWwyMC0xMkMxMTYgMTIgMTcxIDAgMjA3IDBjODYgMFxcbiAxMTQgNjggMTkxIDY4IDc4IDAgMTY4LTY4IDE3Ny02OCA0IDAgNyAyIDkgNWwxMiAxOWMxIDIuMTc1IDIgNC4zNSAyIDYuNTI1IDBcXG4gNC4zNS0yIDcuNjEzLTUgOS43ODhsLTE5IDEzLjA1Yy05MiA2My4wNzctMTE2LjkzNyA3NS4zMDgtMTgzIDc2LjEyOFxcbi02OC4yNjcuODQ3LTExMy03My45NTItMTkxLTczLjk1MnpcIixcbiAgLy8gZGl0dG8gdGlsZGUyLCB0aWxkZTMsICYgdGlsZGU0XG4gIHRpbGRlMjogXCJNMzQ0IDU1LjI2NmMtMTQyIDAtMzAwLjYzOCA4MS4zMTYtMzExLjUgODYuNDE4XFxuLTguMDEgMy43NjItMjIuNSAxMC45MS0yMy41IDUuNTYyTDEgMTIwYy0xLTItMS0zLTEtNCAwLTUgMy05IDgtMTBsMTguNC05QzE2MC45XFxuIDMxLjkgMjgzIDAgMzU4IDBjMTQ4IDAgMTg4IDEyMiAzMzEgMTIyczMxNC05NyAzMjYtOTdjNCAwIDggMiAxMCA3bDcgMjEuMTE0XFxuYzEgMi4xNCAxIDMuMjEgMSA0LjI4IDAgNS4zNDctMyA5LjYyNi03IDEwLjY5NmwtMjIuMyAxMi42MjJDODUyLjYgMTU4LjM3MiA3NTFcXG4gMTgxLjQ3NiA2NzYgMTgxLjQ3NmMtMTQ5IDAtMTg5LTEyNi4yMS0zMzItMTI2LjIxelwiLFxuICB0aWxkZTM6IFwiTTc4NiA1OUM0NTcgNTkgMzIgMTc1LjI0MiAxMyAxNzUuMjQyYy02IDAtMTAtMy40NTdcXG4tMTEtMTAuMzdMLjE1IDEzOGMtMS03IDMtMTIgMTAtMTNsMTkuMi02LjRDMzc4LjQgNDAuNyA2MzQuMyAwIDgwNC4zIDBjMzM3IDBcXG4gNDExLjggMTU3IDc0Ni44IDE1NyAzMjggMCA3NTQtMTEyIDc3My0xMTIgNSAwIDEwIDMgMTEgOWwxIDE0LjA3NWMxIDguMDY2LS42OTdcXG4gMTYuNTk1LTYuNjk3IDE3LjQ5MmwtMjEuMDUyIDcuMzFjLTM2Ny45IDk4LjE0Ni02MDkuMTUgMTIyLjY5Ni03NzguMTUgMTIyLjY5NlxcbiAtMzM4IDAtNDA5LTE1Ni41NzMtNzQ0LTE1Ni41NzN6XCIsXG4gIHRpbGRlNDogXCJNNzg2IDU4QzQ1NyA1OCAzMiAxNzcuNDg3IDEzIDE3Ny40ODdjLTYgMC0xMC0zLjM0NVxcbi0xMS0xMC4wMzVMLjE1IDE0M2MtMS03IDMtMTIgMTAtMTNsMjItNi43QzM4MS4yIDM1IDYzNy4xNSAwIDgwNy4xNSAwYzMzNyAwIDQwOVxcbiAxNzcgNzQ0IDE3NyAzMjggMCA3NTQtMTI3IDc3My0xMjcgNSAwIDEwIDMgMTEgOWwxIDE0Ljc5NGMxIDcuODA1LTMgMTMuMzgtOVxcbiAxNC40OTVsLTIwLjcgNS41NzRjLTM2Ni44NSA5OS43OS02MDcuMyAxMzkuMzcyLTc3Ni4zIDEzOS4zNzItMzM4IDAtNDA5XFxuIC0xNzUuMjM2LTc0NC0xNzUuMjM2elwiLFxuICAvLyB2ZWMgaXMgZnJvbSBnbHlwaCBVKzIwRDcgaW4gZm9udCBLYVRlWCBNYWluXG4gIHZlYzogXCJNMzc3IDIwYzAtNS4zMzMgMS44MzMtMTAgNS41LTE0UzM5MSAwIDM5NyAwYzQuNjY3IDAgOC42NjcgMS42NjcgMTIgNVxcbjMuMzMzIDIuNjY3IDYuNjY3IDkgMTAgMTkgNi42NjcgMjQuNjY3IDIwLjMzMyA0My42NjcgNDEgNTcgNy4zMzMgNC42NjcgMTFcXG4xMC42NjcgMTEgMTggMCA2LTEgMTAtMyAxMnMtNi42NjcgNS0xNCA5Yy0yOC42NjcgMTQuNjY3LTUzLjY2NyAzNS42NjctNzUgNjNcXG4tMS4zMzMgMS4zMzMtMy4xNjcgMy41LTUuNSA2LjVzLTQgNC44MzMtNSA1LjVjLTEgLjY2Ny0yLjUgMS4zMzMtNC41IDJzLTQuMzMzIDFcXG4tNyAxYy00LjY2NyAwLTkuMTY3LTEuODMzLTEzLjUtNS41UzMzNyAxODQgMzM3IDE3OGMwLTEyLjY2NyAxNS42NjctMzIuMzMzIDQ3LTU5XFxuSDIxM2wtMTcxLTFjLTguNjY3LTYtMTMtMTIuMzMzLTEzLTE5IDAtNC42NjcgNC4zMzMtMTEuMzMzIDEzLTIwaDM1OVxcbmMtMTYtMjUuMzMzLTI0LTQ1LTI0LTU5elwiLFxuICAvLyB3aWRlaGF0MSBpcyBhIG1vZGlmaWVkIHZlcnNpb24gb2YgYSBnbHlwaCBmcm9tIHRoZSBNblN5bWJvbCBwYWNrYWdlXG4gIHdpZGVoYXQxOiBcIk01MjkgMGg1bDUxOSAxMTVjNSAxIDkgNSA5IDEwIDAgMS0xIDItMSAzbC00IDIyXFxuYy0xIDUtNSA5LTExIDloLTJMNTMyIDY3IDE5IDE1OWgtMmMtNSAwLTktNC0xMS05bC01LTIyYy0xLTYgMi0xMiA4LTEzelwiLFxuICAvLyBkaXR0byB3aWRlaGF0Miwgd2lkZWhhdDMsICYgd2lkZWhhdDRcbiAgd2lkZWhhdDI6IFwiTTExODEgMGgybDExNzEgMTc2YzYgMCAxMCA1IDEwIDExbC0yIDIzYy0xIDYtNSAxMFxcbi0xMSAxMGgtMUwxMTgyIDY3IDE1IDIyMGgtMWMtNiAwLTEwLTQtMTEtMTBsLTItMjNjLTEtNiA0LTExIDEwLTExelwiLFxuICB3aWRlaGF0MzogXCJNMTE4MSAwaDJsMTE3MSAyMzZjNiAwIDEwIDUgMTAgMTFsLTIgMjNjLTEgNi01IDEwXFxuLTExIDEwaC0xTDExODIgNjcgMTUgMjgwaC0xYy02IDAtMTAtNC0xMS0xMGwtMi0yM2MtMS02IDQtMTEgMTAtMTF6XCIsXG4gIHdpZGVoYXQ0OiBcIk0xMTgxIDBoMmwxMTcxIDI5NmM2IDAgMTAgNSAxMCAxMWwtMiAyM2MtMSA2LTUgMTBcXG4tMTEgMTBoLTFMMTE4MiA2NyAxNSAzNDBoLTFjLTYgMC0xMC00LTExLTEwbC0yLTIzYy0xLTYgNC0xMSAxMC0xMXpcIixcbiAgLy8gd2lkZWNoZWNrIHBhdGhzIGFyZSBhbGwgaW52ZXJ0ZWQgdmVyc2lvbnMgb2Ygd2lkZWhhdFxuICB3aWRlY2hlY2sxOiBcIk01MjksMTU5aDVsNTE5LC0xMTVjNSwtMSw5LC01LDksLTEwYzAsLTEsLTEsLTIsLTEsLTNsLTQsLTIyYy0xLFxcbi01LC01LC05LC0xMSwtOWgtMmwtNTEyLDkybC01MTMsLTkyaC0yYy01LDAsLTksNCwtMTEsOWwtNSwyMmMtMSw2LDIsMTIsOCwxM3pcIixcbiAgd2lkZWNoZWNrMjogXCJNMTE4MSwyMjBoMmwxMTcxLC0xNzZjNiwwLDEwLC01LDEwLC0xMWwtMiwtMjNjLTEsLTYsLTUsLTEwLFxcbi0xMSwtMTBoLTFsLTExNjgsMTUzbC0xMTY3LC0xNTNoLTFjLTYsMCwtMTAsNCwtMTEsMTBsLTIsMjNjLTEsNiw0LDExLDEwLDExelwiLFxuICB3aWRlY2hlY2szOiBcIk0xMTgxLDI4MGgybDExNzEsLTIzNmM2LDAsMTAsLTUsMTAsLTExbC0yLC0yM2MtMSwtNiwtNSwtMTAsXFxuLTExLC0xMGgtMWwtMTE2OCwyMTNsLTExNjcsLTIxM2gtMWMtNiwwLC0xMCw0LC0xMSwxMGwtMiwyM2MtMSw2LDQsMTEsMTAsMTF6XCIsXG4gIHdpZGVjaGVjazQ6IFwiTTExODEsMzQwaDJsMTE3MSwtMjk2YzYsMCwxMCwtNSwxMCwtMTFsLTIsLTIzYy0xLC02LC01LC0xMCxcXG4tMTEsLTEwaC0xbC0xMTY4LDI3M2wtMTE2NywtMjczaC0xYy02LDAsLTEwLDQsLTExLDEwbC0yLDIzYy0xLDYsNCwxMSwxMCwxMXpcIixcbiAgLy8gVGhlIG5leHQgdGVuIHBhdGhzIHN1cHBvcnQgcmVhY3Rpb24gYXJyb3dzIGZyb20gdGhlIG1oY2hlbSBwYWNrYWdlLlxuICAvLyBBcnJvd3MgZm9yIFxcY2V7PC0tPn0gYXJlIG9mZnNldCBmcm9tIHhBeGlzIGJ5IDAuMjJleCwgcGVyIG1oY2hlbSBpbiBMYVRlWFxuICAvLyBiYXJhYm92ZWxlZnRhcnJvdyBpcyBtb3N0bHkgZnJvbSBmcm9tIGdseXBoIFUrMjE5MCBpbiBmb250IEthVGVYIE1haW5cbiAgYmFyYWJvdmVsZWZ0YXJyb3c6IFwiTTQwMDAwMCA2MjBoLTM5OTg5MGwzIC0zYzY4LjcgLTUyLjcgMTEzLjcgLTEyMCAxMzUgLTIwMlxcbmM0IC0xNC43IDYgLTIzIDYgLTI1YzAgLTcuMyAtNyAtMTEgLTIxIC0xMWMtOCAwIC0xMy4yIDAuOCAtMTUuNSAyLjVcXG5jLTIuMyAxLjcgLTQuMiA1LjggLTUuNSAxMi41Yy0xLjMgNC43IC0yLjcgMTAuMyAtNCAxN2MtMTIgNDguNyAtMzQuOCA5MiAtNjguNSAxMzBcXG5zLTc0LjIgNjYuMyAtMTIxLjUgODVjLTEwIDQgLTE2IDcuNyAtMTggMTFjMCA4LjcgNiAxNC4zIDE4IDE3YzQ3LjMgMTguNyA4Ny44IDQ3XFxuMTIxLjUgODVzNTYuNSA4MS4zIDY4LjUgMTMwYzAuNyAyIDEuMyA1IDIgOXMxLjIgNi43IDEuNSA4YzAuMyAxLjMgMSAzLjMgMiA2XFxuczIuMiA0LjUgMy41IDUuNWMxLjMgMSAzLjMgMS44IDYgMi41czYgMSAxMCAxYzE0IDAgMjEgLTMuNyAyMSAtMTFcXG5jMCAtMiAtMiAtMTAuMyAtNiAtMjVjLTIwIC03OS4zIC02NSAtMTQ2LjcgLTEzNSAtMjAybC0zIC0zaDM5OTg5MHpcXG5NMTAwIDYyMHY0MGgzOTk5MDB2LTQweiBNMCAyNDF2NDBoMzk5OTAwdi00MHpNMCAyNDF2NDBoMzk5OTAwdi00MHpcIixcbiAgLy8gcmlnaHRhcnJvd2Fib3ZlYmFyIGlzIG1vc3RseSBmcm9tIGdseXBoIFUrMjE5MiwgS2FUZVggTWFpblxuICByaWdodGFycm93YWJvdmViYXI6IFwiTTAgMjQxdjQwaDM5OTg5MWMtNDcuMyAzNS4zLTg0IDc4LTExMCAxMjgtMTYuNyAzMlxcbi0yNy43IDYzLjctMzMgOTUgMCAxLjMtLjIgMi43LS41IDQtLjMgMS4zLS41IDIuMy0uNSAzIDAgNy4zIDYuNyAxMSAyMCAxMSA4IDBcXG4xMy4yLS44IDE1LjUtMi41IDIuMy0xLjcgNC4yLTUuNSA1LjUtMTEuNSAyLTEzLjMgNS43LTI3IDExLTQxIDE0LjctNDQuNyAzOVxcbi04NC41IDczLTExOS41czczLjctNjAuMiAxMTktNzUuNWM2LTIgOS01LjcgOS0xMXMtMy05LTktMTFjLTQ1LjMtMTUuMy04NS00MC41XFxuLTExOS03NS41cy01OC4zLTc0LjgtNzMtMTE5LjVjLTQuNy0xNC04LjMtMjcuMy0xMS00MC0xLjMtNi43LTMuMi0xMC44LTUuNVxcbi0xMi41LTIuMy0xLjctNy41LTIuNS0xNS41LTIuNS0xNCAwLTIxIDMuNy0yMSAxMSAwIDIgMiAxMC4zIDYgMjUgMjAuNyA4My4zIDY3XFxuMTUxLjcgMTM5IDIwNXptOTYgMzc5aDM5OTg5NHY0MEgwem0wIDBoMzk5OTA0djQwSDB6XCIsXG4gIC8vIFRoZSBzaG9ydCBsZWZ0IGhhcnBvb24gaGFzIDAuNWVtIChpLmUuIDUwMCB1bml0cykga2VybiBvbiB0aGUgbGVmdCBlbmQuXG4gIC8vIFJlZiBmcm9tIG1oY2hlbS5zdHk6IFxccmxhcHtcXHJhaXNlYm94ey0uMjJleH17JFxca2VybjAuNWVtXG4gIGJhcmFib3Zlc2hvcnRsZWZ0aGFycG9vbjogXCJNNTA3LDQzNWMtNCw0LC02LjMsOC43LC03LDE0YzAsNS4zLDAuNyw5LDIsMTFcXG5jMS4zLDIsNS4zLDUuMywxMiwxMGM5MC43LDU0LDE1NiwxMzAsMTk2LDIyOGMzLjMsMTAuNyw2LjMsMTYuMyw5LDE3XFxuYzIsMC43LDUsMSw5LDFjMCwwLDUsMCw1LDBjMTAuNywwLDE2LjcsLTIsMTgsLTZjMiwtMi43LDEsLTkuNywtMywtMjFcXG5jLTMyLC04Ny4zLC04Mi43LC0xNTcuNywtMTUyLC0yMTFjMCwwLC0zLC0zLC0zLC0zbDM5OTM1MSwwbDAsLTQwXFxuYy0zOTg1NzAsMCwtMzk5NDM3LDAsLTM5OTQzNywweiBNNTkzIDQzNSB2NDAgSDM5OTUwMCB2LTQwelxcbk0wIDI4MSB2LTQwIEgzOTk5MDggdjQweiBNMCAyODEgdi00MCBIMzk5OTA4IHY0MHpcIixcbiAgcmlnaHRoYXJwb29uYWJvdmVzaG9ydGJhcjogXCJNMCwyNDEgbDAsNDBjMzk5MTI2LDAsMzk5OTkzLDAsMzk5OTkzLDBcXG5jNC43LC00LjcsNywtOS4zLDcsLTE0YzAsLTkuMywtMy43LC0xNS4zLC0xMSwtMThjLTkyLjcsLTU2LjcsLTE1OSwtMTMzLjcsLTE5OSxcXG4tMjMxYy0zLjMsLTkuMywtNiwtMTQuNywtOCwtMTZjLTIsLTEuMywtNywtMiwtMTUsLTJjLTEwLjcsMCwtMTYuNywyLC0xOCw2XFxuYy0yLDIuNywtMSw5LjcsMywyMWMxNS4zLDQyLDM2LjcsODEuOCw2NCwxMTkuNWMyNy4zLDM3LjcsNTgsNjkuMiw5Miw5NC41elxcbk0wIDI0MSB2NDAgSDM5OTkwOCB2LTQweiBNMCA0NzUgdi00MCBIMzk5NTAwIHY0MHogTTAgNDc1IHYtNDAgSDM5OTUwMCB2NDB6XCIsXG4gIHNob3J0YmFyYWJvdmVsZWZ0aGFycG9vbjogXCJNNyw0MzVjLTQsNCwtNi4zLDguNywtNywxNGMwLDUuMywwLjcsOSwyLDExXFxuYzEuMywyLDUuMyw1LjMsMTIsMTBjOTAuNyw1NCwxNTYsMTMwLDE5NiwyMjhjMy4zLDEwLjcsNi4zLDE2LjMsOSwxN2MyLDAuNyw1LDEsOSxcXG4xYzAsMCw1LDAsNSwwYzEwLjcsMCwxNi43LC0yLDE4LC02YzIsLTIuNywxLC05LjcsLTMsLTIxYy0zMiwtODcuMywtODIuNywtMTU3LjcsXFxuLTE1MiwtMjExYzAsMCwtMywtMywtMywtM2wzOTk5MDcsMGwwLC00MGMtMzk5MTI2LDAsLTM5OTk5MywwLC0zOTk5OTMsMHpcXG5NOTMgNDM1IHY0MCBINDAwMDAwIHYtNDB6IE01MDAgMjQxIHY0MCBINDAwMDAwIHYtNDB6IE01MDAgMjQxIHY0MCBINDAwMDAwIHYtNDB6XCIsXG4gIHNob3J0cmlnaHRoYXJwb29uYWJvdmViYXI6IFwiTTUzLDI0MWwwLDQwYzM5ODU3MCwwLDM5OTQzNywwLDM5OTQzNywwXFxuYzQuNywtNC43LDcsLTkuMyw3LC0xNGMwLC05LjMsLTMuNywtMTUuMywtMTEsLTE4Yy05Mi43LC01Ni43LC0xNTksLTEzMy43LC0xOTksXFxuLTIzMWMtMy4zLC05LjMsLTYsLTE0LjcsLTgsLTE2Yy0yLC0xLjMsLTcsLTIsLTE1LC0yYy0xMC43LDAsLTE2LjcsMiwtMTgsNlxcbmMtMiwyLjcsLTEsOS43LDMsMjFjMTUuMyw0MiwzNi43LDgxLjgsNjQsMTE5LjVjMjcuMywzNy43LDU4LDY5LjIsOTIsOTQuNXpcXG5NNTAwIDI0MSB2NDAgSDM5OTQwOCB2LTQweiBNNTAwIDQzNSB2NDAgSDQwMDAwMCB2LTQwelwiXG59O1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgc3ZnR2VvbWV0cnkgPSAoe1xuICBwYXRoOiBzdmdHZW9tZXRyeV9wYXRoXG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3RyZWUuanNcblxuXG4vKipcbiAqIFRoaXMgbm9kZSByZXByZXNlbnRzIGEgZG9jdW1lbnQgZnJhZ21lbnQsIHdoaWNoIGNvbnRhaW5zIGVsZW1lbnRzLCBidXQgd2hlblxuICogcGxhY2VkIGludG8gdGhlIERPTSBkb2Vzbid0IGhhdmUgYW55IHJlcHJlc2VudGF0aW9uIGl0c2VsZi4gSXQgb25seSBjb250YWluc1xuICogY2hpbGRyZW4gYW5kIGRvZXNuJ3QgaGF2ZSBhbnkgRE9NIG5vZGUgcHJvcGVydGllcy5cbiAqL1xudmFyIHRyZWVfRG9jdW1lbnRGcmFnbWVudCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8vIEh0bWxEb21Ob2RlXG4gIC8vIE5ldmVyIHVzZWQ7IG5lZWRlZCBmb3Igc2F0aXNmeWluZyBpbnRlcmZhY2UuXG4gIGZ1bmN0aW9uIERvY3VtZW50RnJhZ21lbnQoY2hpbGRyZW4pIHtcbiAgICB0aGlzLmNoaWxkcmVuID0gdm9pZCAwO1xuICAgIHRoaXMuY2xhc3NlcyA9IHZvaWQgMDtcbiAgICB0aGlzLmhlaWdodCA9IHZvaWQgMDtcbiAgICB0aGlzLmRlcHRoID0gdm9pZCAwO1xuICAgIHRoaXMubWF4Rm9udFNpemUgPSB2b2lkIDA7XG4gICAgdGhpcy5zdHlsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgdGhpcy5jbGFzc2VzID0gW107XG4gICAgdGhpcy5oZWlnaHQgPSAwO1xuICAgIHRoaXMuZGVwdGggPSAwO1xuICAgIHRoaXMubWF4Rm9udFNpemUgPSAwO1xuICAgIHRoaXMuc3R5bGUgPSB7fTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBEb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZTtcblxuICBfcHJvdG8uaGFzQ2xhc3MgPSBmdW5jdGlvbiBoYXNDbGFzcyhjbGFzc05hbWUpIHtcbiAgICByZXR1cm4gdXRpbHMuY29udGFpbnModGhpcy5jbGFzc2VzLCBjbGFzc05hbWUpO1xuICB9XG4gIC8qKiBDb252ZXJ0IHRoZSBmcmFnbWVudCBpbnRvIGEgbm9kZS4gKi9cbiAgO1xuXG4gIF9wcm90by50b05vZGUgPSBmdW5jdGlvbiB0b05vZGUoKSB7XG4gICAgdmFyIGZyYWcgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZyYWcuYXBwZW5kQ2hpbGQodGhpcy5jaGlsZHJlbltpXS50b05vZGUoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZyYWc7XG4gIH1cbiAgLyoqIENvbnZlcnQgdGhlIGZyYWdtZW50IGludG8gSFRNTCBtYXJrdXAuICovXG4gIDtcblxuICBfcHJvdG8udG9NYXJrdXAgPSBmdW5jdGlvbiB0b01hcmt1cCgpIHtcbiAgICB2YXIgbWFya3VwID0gXCJcIjsgLy8gU2ltcGx5IGNvbmNhdGVuYXRlIHRoZSBtYXJrdXAgZm9yIHRoZSBjaGlsZHJlbiB0b2dldGhlci5cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgbWFya3VwICs9IHRoaXMuY2hpbGRyZW5baV0udG9NYXJrdXAoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFya3VwO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGUgbWF0aCBub2RlIGludG8gYSBzdHJpbmcsIHNpbWlsYXIgdG8gaW5uZXJUZXh0LiBBcHBsaWVzIHRvXG4gICAqIE1hdGhEb21Ob2RlJ3Mgb25seS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9UZXh0ID0gZnVuY3Rpb24gdG9UZXh0KCkge1xuICAgIC8vIFRvIGF2b2lkIHRoaXMsIHdlIHdvdWxkIHN1YmNsYXNzIGRvY3VtZW50RnJhZ21lbnQgc2VwYXJhdGVseSBmb3JcbiAgICAvLyBNYXRoTUwsIGJ1dCBwb2x5ZmlsbHMgZm9yIHN1YmNsYXNzaW5nIGlzIGV4cGVuc2l2ZSBwZXIgUFIgMTQ2OS5cbiAgICAvLyAkRmxvd0ZpeE1lOiBPbmx5IHdvcmtzIGZvciBDaGlsZFR5cGUgPSBNYXRoRG9tTm9kZS5cbiAgICB2YXIgdG9UZXh0ID0gZnVuY3Rpb24gdG9UZXh0KGNoaWxkKSB7XG4gICAgICByZXR1cm4gY2hpbGQudG9UZXh0KCk7XG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLmNoaWxkcmVuLm1hcCh0b1RleHQpLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgcmV0dXJuIERvY3VtZW50RnJhZ21lbnQ7XG59KCk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9kb21UcmVlLmpzXG4vKipcbiAqIFRoZXNlIG9iamVjdHMgc3RvcmUgdGhlIGRhdGEgYWJvdXQgdGhlIERPTSBub2RlcyB3ZSBjcmVhdGUsIGFzIHdlbGwgYXMgc29tZVxuICogZXh0cmEgZGF0YS4gVGhleSBjYW4gdGhlbiBiZSB0cmFuc2Zvcm1lZCBpbnRvIHJlYWwgRE9NIG5vZGVzIHdpdGggdGhlXG4gKiBgdG9Ob2RlYCBmdW5jdGlvbiBvciBIVE1MIG1hcmt1cCB1c2luZyBgdG9NYXJrdXBgLiBUaGV5IGFyZSB1c2VmdWwgZm9yIGJvdGhcbiAqIHN0b3JpbmcgZXh0cmEgcHJvcGVydGllcyBvbiB0aGUgbm9kZXMsIGFzIHdlbGwgYXMgcHJvdmlkaW5nIGEgd2F5IHRvIGVhc2lseVxuICogd29yayB3aXRoIHRoZSBET00uXG4gKlxuICogU2ltaWxhciBmdW5jdGlvbnMgZm9yIHdvcmtpbmcgd2l0aCBNYXRoTUwgbm9kZXMgZXhpc3QgaW4gbWF0aE1MVHJlZS5qcy5cbiAqXG4gKiBUT0RPOiByZWZhY3RvciBgc3BhbmAgYW5kIGBhbmNob3JgIGludG8gY29tbW9uIHN1cGVyY2xhc3Mgd2hlblxuICogdGFyZ2V0IGVudmlyb25tZW50cyBzdXBwb3J0IGNsYXNzIGluaGVyaXRhbmNlXG4gKi9cblxuXG5cblxuXG4vKipcbiAqIENyZWF0ZSBhbiBIVE1MIGNsYXNzTmFtZSBiYXNlZCBvbiBhIGxpc3Qgb2YgY2xhc3Nlcy4gSW4gYWRkaXRpb24gdG8gam9pbmluZ1xuICogd2l0aCBzcGFjZXMsIHdlIGFsc28gcmVtb3ZlIGVtcHR5IGNsYXNzZXMuXG4gKi9cbnZhciBjcmVhdGVDbGFzcyA9IGZ1bmN0aW9uIGNyZWF0ZUNsYXNzKGNsYXNzZXMpIHtcbiAgcmV0dXJuIGNsYXNzZXMuZmlsdGVyKGZ1bmN0aW9uIChjbHMpIHtcbiAgICByZXR1cm4gY2xzO1xuICB9KS5qb2luKFwiIFwiKTtcbn07XG5cbnZhciBpbml0Tm9kZSA9IGZ1bmN0aW9uIGluaXROb2RlKGNsYXNzZXMsIG9wdGlvbnMsIHN0eWxlKSB7XG4gIHRoaXMuY2xhc3NlcyA9IGNsYXNzZXMgfHwgW107XG4gIHRoaXMuYXR0cmlidXRlcyA9IHt9O1xuICB0aGlzLmhlaWdodCA9IDA7XG4gIHRoaXMuZGVwdGggPSAwO1xuICB0aGlzLm1heEZvbnRTaXplID0gMDtcbiAgdGhpcy5zdHlsZSA9IHN0eWxlIHx8IHt9O1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuc3R5bGUuaXNUaWdodCgpKSB7XG4gICAgICB0aGlzLmNsYXNzZXMucHVzaChcIm10aWdodFwiKTtcbiAgICB9XG5cbiAgICB2YXIgY29sb3IgPSBvcHRpb25zLmdldENvbG9yKCk7XG5cbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIHRoaXMuc3R5bGUuY29sb3IgPSBjb2xvcjtcbiAgICB9XG4gIH1cbn07XG4vKipcbiAqIENvbnZlcnQgaW50byBhbiBIVE1MIG5vZGVcbiAqL1xuXG5cbnZhciBfdG9Ob2RlID0gZnVuY3Rpb24gdG9Ob2RlKHRhZ05hbWUpIHtcbiAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpOyAvLyBBcHBseSB0aGUgY2xhc3NcblxuICBub2RlLmNsYXNzTmFtZSA9IGNyZWF0ZUNsYXNzKHRoaXMuY2xhc3Nlcyk7IC8vIEFwcGx5IGlubGluZSBzdHlsZXNcblxuICBmb3IgKHZhciBzdHlsZSBpbiB0aGlzLnN0eWxlKSB7XG4gICAgaWYgKHRoaXMuc3R5bGUuaGFzT3duUHJvcGVydHkoc3R5bGUpKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lIEZsb3cgZG9lc24ndCBzZWVtIHRvIHVuZGVyc3RhbmQgc3Bhbi5zdHlsZSdzIHR5cGUuXG4gICAgICBub2RlLnN0eWxlW3N0eWxlXSA9IHRoaXMuc3R5bGVbc3R5bGVdO1xuICAgIH1cbiAgfSAvLyBBcHBseSBhdHRyaWJ1dGVzXG5cblxuICBmb3IgKHZhciBhdHRyIGluIHRoaXMuYXR0cmlidXRlcykge1xuICAgIGlmICh0aGlzLmF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkoYXR0cikpIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHIsIHRoaXMuYXR0cmlidXRlc1thdHRyXSk7XG4gICAgfVxuICB9IC8vIEFwcGVuZCB0aGUgY2hpbGRyZW4sIGFsc28gYXMgSFRNTCBub2Rlc1xuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgbm9kZS5hcHBlbmRDaGlsZCh0aGlzLmNoaWxkcmVuW2ldLnRvTm9kZSgpKTtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufTtcbi8qKlxuICogQ29udmVydCBpbnRvIGFuIEhUTUwgbWFya3VwIHN0cmluZ1xuICovXG5cblxudmFyIF90b01hcmt1cCA9IGZ1bmN0aW9uIHRvTWFya3VwKHRhZ05hbWUpIHtcbiAgdmFyIG1hcmt1cCA9IFwiPFwiICsgdGFnTmFtZTsgLy8gQWRkIHRoZSBjbGFzc1xuXG4gIGlmICh0aGlzLmNsYXNzZXMubGVuZ3RoKSB7XG4gICAgbWFya3VwICs9IFwiIGNsYXNzPVxcXCJcIiArIHV0aWxzLmVzY2FwZShjcmVhdGVDbGFzcyh0aGlzLmNsYXNzZXMpKSArIFwiXFxcIlwiO1xuICB9XG5cbiAgdmFyIHN0eWxlcyA9IFwiXCI7IC8vIEFkZCB0aGUgc3R5bGVzLCBhZnRlciBoeXBoZW5hdGlvblxuXG4gIGZvciAodmFyIHN0eWxlIGluIHRoaXMuc3R5bGUpIHtcbiAgICBpZiAodGhpcy5zdHlsZS5oYXNPd25Qcm9wZXJ0eShzdHlsZSkpIHtcbiAgICAgIHN0eWxlcyArPSB1dGlscy5oeXBoZW5hdGUoc3R5bGUpICsgXCI6XCIgKyB0aGlzLnN0eWxlW3N0eWxlXSArIFwiO1wiO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdHlsZXMpIHtcbiAgICBtYXJrdXAgKz0gXCIgc3R5bGU9XFxcIlwiICsgdXRpbHMuZXNjYXBlKHN0eWxlcykgKyBcIlxcXCJcIjtcbiAgfSAvLyBBZGQgdGhlIGF0dHJpYnV0ZXNcblxuXG4gIGZvciAodmFyIGF0dHIgaW4gdGhpcy5hdHRyaWJ1dGVzKSB7XG4gICAgaWYgKHRoaXMuYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShhdHRyKSkge1xuICAgICAgbWFya3VwICs9IFwiIFwiICsgYXR0ciArIFwiPVxcXCJcIiArIHV0aWxzLmVzY2FwZSh0aGlzLmF0dHJpYnV0ZXNbYXR0cl0pICsgXCJcXFwiXCI7XG4gICAgfVxuICB9XG5cbiAgbWFya3VwICs9IFwiPlwiOyAvLyBBZGQgdGhlIG1hcmt1cCBvZiB0aGUgY2hpbGRyZW4sIGFsc28gYXMgbWFya3VwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgbWFya3VwICs9IHRoaXMuY2hpbGRyZW5baV0udG9NYXJrdXAoKTtcbiAgfVxuXG4gIG1hcmt1cCArPSBcIjwvXCIgKyB0YWdOYW1lICsgXCI+XCI7XG4gIHJldHVybiBtYXJrdXA7XG59OyAvLyBNYWtpbmcgdGhlIHR5cGUgYmVsb3cgZXhhY3Qgd2l0aCBhbGwgb3B0aW9uYWwgZmllbGRzIGRvZXNuJ3Qgd29yayBkdWUgdG9cbi8vIC0gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzQ1ODJcbi8vIC0gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzU2ODhcbi8vIEhvd2V2ZXIsIHNpbmNlICphbGwqIGZpZWxkcyBhcmUgb3B0aW9uYWwsICRTaGFwZTw+IHdvcmtzIGFzIHN1Z2dlc3RlZCBpbiA1Njg4XG4vLyBhYm92ZS5cbi8vIFRoaXMgdHlwZSBkb2VzIG5vdCBpbmNsdWRlIGFsbCBDU1MgcHJvcGVydGllcy4gQWRkaXRpb25hbCBwcm9wZXJ0aWVzIHNob3VsZFxuLy8gYmUgYWRkZWQgYXMgbmVlZGVkLlxuXG5cbi8qKlxuICogVGhpcyBub2RlIHJlcHJlc2VudHMgYSBzcGFuIG5vZGUsIHdpdGggYSBjbGFzc05hbWUsIGEgbGlzdCBvZiBjaGlsZHJlbiwgYW5kXG4gKiBhbiBpbmxpbmUgc3R5bGUuIEl0IGFsc28gY29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgaXRzIGhlaWdodCwgZGVwdGgsIGFuZFxuICogbWF4Rm9udFNpemUuXG4gKlxuICogUmVwcmVzZW50cyB0d28gdHlwZXMgd2l0aCBkaWZmZXJlbnQgdXNlczogU3ZnU3BhbiB0byB3cmFwIGFuIFNWRyBhbmQgRG9tU3BhblxuICogb3RoZXJ3aXNlLiBUaGlzIHR5cGVzYWZldHkgaXMgaW1wb3J0YW50IHdoZW4gSFRNTCBidWlsZGVycyBhY2Nlc3MgYSBzcGFuJ3NcbiAqIGNoaWxkcmVuLlxuICovXG52YXIgZG9tVHJlZV9TcGFuID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3BhbihjbGFzc2VzLCBjaGlsZHJlbiwgb3B0aW9ucywgc3R5bGUpIHtcbiAgICB0aGlzLmNoaWxkcmVuID0gdm9pZCAwO1xuICAgIHRoaXMuYXR0cmlidXRlcyA9IHZvaWQgMDtcbiAgICB0aGlzLmNsYXNzZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5oZWlnaHQgPSB2b2lkIDA7XG4gICAgdGhpcy5kZXB0aCA9IHZvaWQgMDtcbiAgICB0aGlzLndpZHRoID0gdm9pZCAwO1xuICAgIHRoaXMubWF4Rm9udFNpemUgPSB2b2lkIDA7XG4gICAgdGhpcy5zdHlsZSA9IHZvaWQgMDtcbiAgICBpbml0Tm9kZS5jYWxsKHRoaXMsIGNsYXNzZXMsIG9wdGlvbnMsIHN0eWxlKTtcbiAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW4gfHwgW107XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgYW4gYXJiaXRyYXJ5IGF0dHJpYnV0ZSBvbiB0aGUgc3Bhbi4gV2FybmluZzogdXNlIHRoaXMgd2lzZWx5LiBOb3RcbiAgICogYWxsIGJyb3dzZXJzIHN1cHBvcnQgYXR0cmlidXRlcyB0aGUgc2FtZSwgYW5kIGhhdmluZyB0b28gbWFueSBjdXN0b21cbiAgICogYXR0cmlidXRlcyBpcyBwcm9iYWJseSBiYWQuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFNwYW4ucHJvdG90eXBlO1xuXG4gIF9wcm90by5zZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbiBzZXRBdHRyaWJ1dGUoYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgIHRoaXMuYXR0cmlidXRlc1thdHRyaWJ1dGVdID0gdmFsdWU7XG4gIH07XG5cbiAgX3Byb3RvLmhhc0NsYXNzID0gZnVuY3Rpb24gaGFzQ2xhc3MoY2xhc3NOYW1lKSB7XG4gICAgcmV0dXJuIHV0aWxzLmNvbnRhaW5zKHRoaXMuY2xhc3NlcywgY2xhc3NOYW1lKTtcbiAgfTtcblxuICBfcHJvdG8udG9Ob2RlID0gZnVuY3Rpb24gdG9Ob2RlKCkge1xuICAgIHJldHVybiBfdG9Ob2RlLmNhbGwodGhpcywgXCJzcGFuXCIpO1xuICB9O1xuXG4gIF9wcm90by50b01hcmt1cCA9IGZ1bmN0aW9uIHRvTWFya3VwKCkge1xuICAgIHJldHVybiBfdG9NYXJrdXAuY2FsbCh0aGlzLCBcInNwYW5cIik7XG4gIH07XG5cbiAgcmV0dXJuIFNwYW47XG59KCk7XG4vKipcbiAqIFRoaXMgbm9kZSByZXByZXNlbnRzIGFuIGFuY2hvciAoPGE+KSBlbGVtZW50IHdpdGggYSBoeXBlcmxpbmsuICBTZWUgYHNwYW5gXG4gKiBmb3IgZnVydGhlciBkZXRhaWxzLlxuICovXG5cbnZhciBkb21UcmVlX0FuY2hvciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEFuY2hvcihocmVmLCBjbGFzc2VzLCBjaGlsZHJlbiwgb3B0aW9ucykge1xuICAgIHRoaXMuY2hpbGRyZW4gPSB2b2lkIDA7XG4gICAgdGhpcy5hdHRyaWJ1dGVzID0gdm9pZCAwO1xuICAgIHRoaXMuY2xhc3NlcyA9IHZvaWQgMDtcbiAgICB0aGlzLmhlaWdodCA9IHZvaWQgMDtcbiAgICB0aGlzLmRlcHRoID0gdm9pZCAwO1xuICAgIHRoaXMubWF4Rm9udFNpemUgPSB2b2lkIDA7XG4gICAgdGhpcy5zdHlsZSA9IHZvaWQgMDtcbiAgICBpbml0Tm9kZS5jYWxsKHRoaXMsIGNsYXNzZXMsIG9wdGlvbnMpO1xuICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbiB8fCBbXTtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICB9XG5cbiAgdmFyIF9wcm90bzIgPSBBbmNob3IucHJvdG90eXBlO1xuXG4gIF9wcm90bzIuc2V0QXR0cmlidXRlID0gZnVuY3Rpb24gc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICB0aGlzLmF0dHJpYnV0ZXNbYXR0cmlidXRlXSA9IHZhbHVlO1xuICB9O1xuXG4gIF9wcm90bzIuaGFzQ2xhc3MgPSBmdW5jdGlvbiBoYXNDbGFzcyhjbGFzc05hbWUpIHtcbiAgICByZXR1cm4gdXRpbHMuY29udGFpbnModGhpcy5jbGFzc2VzLCBjbGFzc05hbWUpO1xuICB9O1xuXG4gIF9wcm90bzIudG9Ob2RlID0gZnVuY3Rpb24gdG9Ob2RlKCkge1xuICAgIHJldHVybiBfdG9Ob2RlLmNhbGwodGhpcywgXCJhXCIpO1xuICB9O1xuXG4gIF9wcm90bzIudG9NYXJrdXAgPSBmdW5jdGlvbiB0b01hcmt1cCgpIHtcbiAgICByZXR1cm4gX3RvTWFya3VwLmNhbGwodGhpcywgXCJhXCIpO1xuICB9O1xuXG4gIHJldHVybiBBbmNob3I7XG59KCk7XG4vKipcbiAqIFRoaXMgbm9kZSByZXByZXNlbnRzIGFuIGltYWdlIGVtYmVkICg8aW1nPikgZWxlbWVudC5cbiAqL1xuXG52YXIgZG9tVHJlZV9JbWcgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBJbWcoc3JjLCBhbHQsIHN0eWxlKSB7XG4gICAgdGhpcy5zcmMgPSB2b2lkIDA7XG4gICAgdGhpcy5hbHQgPSB2b2lkIDA7XG4gICAgdGhpcy5jbGFzc2VzID0gdm9pZCAwO1xuICAgIHRoaXMuaGVpZ2h0ID0gdm9pZCAwO1xuICAgIHRoaXMuZGVwdGggPSB2b2lkIDA7XG4gICAgdGhpcy5tYXhGb250U2l6ZSA9IHZvaWQgMDtcbiAgICB0aGlzLnN0eWxlID0gdm9pZCAwO1xuICAgIHRoaXMuYWx0ID0gYWx0O1xuICAgIHRoaXMuc3JjID0gc3JjO1xuICAgIHRoaXMuY2xhc3NlcyA9IFtcIm1vcmRcIl07XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICB9XG5cbiAgdmFyIF9wcm90bzMgPSBJbWcucHJvdG90eXBlO1xuXG4gIF9wcm90bzMuaGFzQ2xhc3MgPSBmdW5jdGlvbiBoYXNDbGFzcyhjbGFzc05hbWUpIHtcbiAgICByZXR1cm4gdXRpbHMuY29udGFpbnModGhpcy5jbGFzc2VzLCBjbGFzc05hbWUpO1xuICB9O1xuXG4gIF9wcm90bzMudG9Ob2RlID0gZnVuY3Rpb24gdG9Ob2RlKCkge1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICBub2RlLnNyYyA9IHRoaXMuc3JjO1xuICAgIG5vZGUuYWx0ID0gdGhpcy5hbHQ7XG4gICAgbm9kZS5jbGFzc05hbWUgPSBcIm1vcmRcIjsgLy8gQXBwbHkgaW5saW5lIHN0eWxlc1xuXG4gICAgZm9yICh2YXIgc3R5bGUgaW4gdGhpcy5zdHlsZSkge1xuICAgICAgaWYgKHRoaXMuc3R5bGUuaGFzT3duUHJvcGVydHkoc3R5bGUpKSB7XG4gICAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgICAgbm9kZS5zdHlsZVtzdHlsZV0gPSB0aGlzLnN0eWxlW3N0eWxlXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICBfcHJvdG8zLnRvTWFya3VwID0gZnVuY3Rpb24gdG9NYXJrdXAoKSB7XG4gICAgdmFyIG1hcmt1cCA9IFwiPGltZyAgc3JjPSdcIiArIHRoaXMuc3JjICsgXCIgJ2FsdD0nXCIgKyB0aGlzLmFsdCArIFwiJyBcIjsgLy8gQWRkIHRoZSBzdHlsZXMsIGFmdGVyIGh5cGhlbmF0aW9uXG5cbiAgICB2YXIgc3R5bGVzID0gXCJcIjtcblxuICAgIGZvciAodmFyIHN0eWxlIGluIHRoaXMuc3R5bGUpIHtcbiAgICAgIGlmICh0aGlzLnN0eWxlLmhhc093blByb3BlcnR5KHN0eWxlKSkge1xuICAgICAgICBzdHlsZXMgKz0gdXRpbHMuaHlwaGVuYXRlKHN0eWxlKSArIFwiOlwiICsgdGhpcy5zdHlsZVtzdHlsZV0gKyBcIjtcIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3R5bGVzKSB7XG4gICAgICBtYXJrdXAgKz0gXCIgc3R5bGU9XFxcIlwiICsgdXRpbHMuZXNjYXBlKHN0eWxlcykgKyBcIlxcXCJcIjtcbiAgICB9XG5cbiAgICBtYXJrdXAgKz0gXCInLz5cIjtcbiAgICByZXR1cm4gbWFya3VwO1xuICB9O1xuXG4gIHJldHVybiBJbWc7XG59KCk7XG52YXIgaUNvbWJpbmF0aW9ucyA9IHtcbiAgJ8OuJzogXCJcXHUwMTMxXFx1MDMwMlwiLFxuICAnw68nOiBcIlxcdTAxMzFcXHUwMzA4XCIsXG4gICfDrSc6IFwiXFx1MDEzMVxcdTAzMDFcIixcbiAgLy8gJ8SrJzogJ1xcdTAxMzFcXHUwMzA0JywgLy8gZW5hYmxlIHdoZW4gd2UgYWRkIEV4dGVuZGVkIExhdGluXG4gICfDrCc6IFwiXFx1MDEzMVxcdTAzMDBcIlxufTtcbi8qKlxuICogQSBzeW1ib2wgbm9kZSBjb250YWlucyBpbmZvcm1hdGlvbiBhYm91dCBhIHNpbmdsZSBzeW1ib2wuIEl0IGVpdGhlciByZW5kZXJzXG4gKiB0byBhIHNpbmdsZSB0ZXh0IG5vZGUsIG9yIGEgc3BhbiB3aXRoIGEgc2luZ2xlIHRleHQgbm9kZSBpbiBpdCwgZGVwZW5kaW5nIG9uXG4gKiB3aGV0aGVyIGl0IGhhcyBDU1MgY2xhc3Nlcywgc3R5bGVzLCBvciBuZWVkcyBpdGFsaWMgY29ycmVjdGlvbi5cbiAqL1xuXG52YXIgZG9tVHJlZV9TeW1ib2xOb2RlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3ltYm9sTm9kZSh0ZXh0LCBoZWlnaHQsIGRlcHRoLCBpdGFsaWMsIHNrZXcsIHdpZHRoLCBjbGFzc2VzLCBzdHlsZSkge1xuICAgIHRoaXMudGV4dCA9IHZvaWQgMDtcbiAgICB0aGlzLmhlaWdodCA9IHZvaWQgMDtcbiAgICB0aGlzLmRlcHRoID0gdm9pZCAwO1xuICAgIHRoaXMuaXRhbGljID0gdm9pZCAwO1xuICAgIHRoaXMuc2tldyA9IHZvaWQgMDtcbiAgICB0aGlzLndpZHRoID0gdm9pZCAwO1xuICAgIHRoaXMubWF4Rm9udFNpemUgPSB2b2lkIDA7XG4gICAgdGhpcy5jbGFzc2VzID0gdm9pZCAwO1xuICAgIHRoaXMuc3R5bGUgPSB2b2lkIDA7XG4gICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodCB8fCAwO1xuICAgIHRoaXMuZGVwdGggPSBkZXB0aCB8fCAwO1xuICAgIHRoaXMuaXRhbGljID0gaXRhbGljIHx8IDA7XG4gICAgdGhpcy5za2V3ID0gc2tldyB8fCAwO1xuICAgIHRoaXMud2lkdGggPSB3aWR0aCB8fCAwO1xuICAgIHRoaXMuY2xhc3NlcyA9IGNsYXNzZXMgfHwgW107XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlIHx8IHt9O1xuICAgIHRoaXMubWF4Rm9udFNpemUgPSAwOyAvLyBNYXJrIHRleHQgZnJvbSBub24tTGF0aW4gc2NyaXB0cyB3aXRoIHNwZWNpZmljIGNsYXNzZXMgc28gdGhhdCB3ZVxuICAgIC8vIGNhbiBzcGVjaWZ5IHdoaWNoIGZvbnRzIHRvIHVzZS4gIFRoaXMgYWxsb3dzIHVzIHRvIHJlbmRlciB0aGVzZVxuICAgIC8vIGNoYXJhY3RlcnMgd2l0aCBhIHNlcmlmIGZvbnQgaW4gc2l0dWF0aW9ucyB3aGVyZSB0aGUgYnJvd3NlciB3b3VsZFxuICAgIC8vIGVpdGhlciBkZWZhdWx0IHRvIGEgc2FucyBzZXJpZiBvciByZW5kZXIgYSBwbGFjZWhvbGRlciBjaGFyYWN0ZXIuXG4gICAgLy8gV2UgdXNlIENTUyBjbGFzcyBuYW1lcyBsaWtlIGNqa19mYWxsYmFjaywgaGFuZ3VsX2ZhbGxiYWNrIGFuZFxuICAgIC8vIGJyYWhtaWNfZmFsbGJhY2suIFNlZSAuL3VuaWNvZGVTY3JpcHRzLmpzIGZvciB0aGUgc2V0IG9mIHBvc3NpYmxlXG4gICAgLy8gc2NyaXB0IG5hbWVzXG5cbiAgICB2YXIgc2NyaXB0ID0gc2NyaXB0RnJvbUNvZGVwb2ludCh0aGlzLnRleHQuY2hhckNvZGVBdCgwKSk7XG5cbiAgICBpZiAoc2NyaXB0KSB7XG4gICAgICB0aGlzLmNsYXNzZXMucHVzaChzY3JpcHQgKyBcIl9mYWxsYmFja1wiKTtcbiAgICB9XG5cbiAgICBpZiAoL1vDrsOvw63DrF0vLnRlc3QodGhpcy50ZXh0KSkge1xuICAgICAgLy8gYWRkIMSrIHdoZW4gd2UgYWRkIEV4dGVuZGVkIExhdGluXG4gICAgICB0aGlzLnRleHQgPSBpQ29tYmluYXRpb25zW3RoaXMudGV4dF07XG4gICAgfVxuICB9XG5cbiAgdmFyIF9wcm90bzQgPSBTeW1ib2xOb2RlLnByb3RvdHlwZTtcblxuICBfcHJvdG80Lmhhc0NsYXNzID0gZnVuY3Rpb24gaGFzQ2xhc3MoY2xhc3NOYW1lKSB7XG4gICAgcmV0dXJuIHV0aWxzLmNvbnRhaW5zKHRoaXMuY2xhc3NlcywgY2xhc3NOYW1lKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBhIHRleHQgbm9kZSBvciBzcGFuIGZyb20gYSBzeW1ib2wgbm9kZS4gTm90ZSB0aGF0IGEgc3BhbiBpcyBvbmx5XG4gICAqIGNyZWF0ZWQgaWYgaXQgaXMgbmVlZGVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90bzQudG9Ob2RlID0gZnVuY3Rpb24gdG9Ob2RlKCkge1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGhpcy50ZXh0KTtcbiAgICB2YXIgc3BhbiA9IG51bGw7XG5cbiAgICBpZiAodGhpcy5pdGFsaWMgPiAwKSB7XG4gICAgICBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICBzcGFuLnN0eWxlLm1hcmdpblJpZ2h0ID0gdGhpcy5pdGFsaWMgKyBcImVtXCI7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY2xhc3Nlcy5sZW5ndGggPiAwKSB7XG4gICAgICBzcGFuID0gc3BhbiB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgIHNwYW4uY2xhc3NOYW1lID0gY3JlYXRlQ2xhc3ModGhpcy5jbGFzc2VzKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBzdHlsZSBpbiB0aGlzLnN0eWxlKSB7XG4gICAgICBpZiAodGhpcy5zdHlsZS5oYXNPd25Qcm9wZXJ0eShzdHlsZSkpIHtcbiAgICAgICAgc3BhbiA9IHNwYW4gfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7IC8vICRGbG93Rml4TWUgRmxvdyBkb2Vzbid0IHNlZW0gdG8gdW5kZXJzdGFuZCBzcGFuLnN0eWxlJ3MgdHlwZS5cblxuICAgICAgICBzcGFuLnN0eWxlW3N0eWxlXSA9IHRoaXMuc3R5bGVbc3R5bGVdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzcGFuKSB7XG4gICAgICBzcGFuLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgcmV0dXJuIHNwYW47XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBtYXJrdXAgZm9yIGEgc3ltYm9sIG5vZGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvNC50b01hcmt1cCA9IGZ1bmN0aW9uIHRvTWFya3VwKCkge1xuICAgIC8vIFRPRE8oYWxwZXJ0KTogTW9yZSBkdXBsaWNhdGlvbiB0aGFuIEknZCBsaWtlIGZyb21cbiAgICAvLyBzcGFuLnByb3RvdHlwZS50b01hcmt1cCBhbmQgc3ltYm9sTm9kZS5wcm90b3R5cGUudG9Ob2RlLi4uXG4gICAgdmFyIG5lZWRzU3BhbiA9IGZhbHNlO1xuICAgIHZhciBtYXJrdXAgPSBcIjxzcGFuXCI7XG5cbiAgICBpZiAodGhpcy5jbGFzc2VzLmxlbmd0aCkge1xuICAgICAgbmVlZHNTcGFuID0gdHJ1ZTtcbiAgICAgIG1hcmt1cCArPSBcIiBjbGFzcz1cXFwiXCI7XG4gICAgICBtYXJrdXAgKz0gdXRpbHMuZXNjYXBlKGNyZWF0ZUNsYXNzKHRoaXMuY2xhc3NlcykpO1xuICAgICAgbWFya3VwICs9IFwiXFxcIlwiO1xuICAgIH1cblxuICAgIHZhciBzdHlsZXMgPSBcIlwiO1xuXG4gICAgaWYgKHRoaXMuaXRhbGljID4gMCkge1xuICAgICAgc3R5bGVzICs9IFwibWFyZ2luLXJpZ2h0OlwiICsgdGhpcy5pdGFsaWMgKyBcImVtO1wiO1xuICAgIH1cblxuICAgIGZvciAodmFyIHN0eWxlIGluIHRoaXMuc3R5bGUpIHtcbiAgICAgIGlmICh0aGlzLnN0eWxlLmhhc093blByb3BlcnR5KHN0eWxlKSkge1xuICAgICAgICBzdHlsZXMgKz0gdXRpbHMuaHlwaGVuYXRlKHN0eWxlKSArIFwiOlwiICsgdGhpcy5zdHlsZVtzdHlsZV0gKyBcIjtcIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3R5bGVzKSB7XG4gICAgICBuZWVkc1NwYW4gPSB0cnVlO1xuICAgICAgbWFya3VwICs9IFwiIHN0eWxlPVxcXCJcIiArIHV0aWxzLmVzY2FwZShzdHlsZXMpICsgXCJcXFwiXCI7XG4gICAgfVxuXG4gICAgdmFyIGVzY2FwZWQgPSB1dGlscy5lc2NhcGUodGhpcy50ZXh0KTtcblxuICAgIGlmIChuZWVkc1NwYW4pIHtcbiAgICAgIG1hcmt1cCArPSBcIj5cIjtcbiAgICAgIG1hcmt1cCArPSBlc2NhcGVkO1xuICAgICAgbWFya3VwICs9IFwiPC9zcGFuPlwiO1xuICAgICAgcmV0dXJuIG1hcmt1cDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVzY2FwZWQ7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTeW1ib2xOb2RlO1xufSgpO1xuLyoqXG4gKiBTVkcgbm9kZXMgYXJlIHVzZWQgdG8gcmVuZGVyIHN0cmV0Y2h5IHdpZGUgZWxlbWVudHMuXG4gKi9cblxudmFyIFN2Z05vZGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdmdOb2RlKGNoaWxkcmVuLCBhdHRyaWJ1dGVzKSB7XG4gICAgdGhpcy5jaGlsZHJlbiA9IHZvaWQgMDtcbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuIHx8IFtdO1xuICAgIHRoaXMuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXMgfHwge307XG4gIH1cblxuICB2YXIgX3Byb3RvNSA9IFN2Z05vZGUucHJvdG90eXBlO1xuXG4gIF9wcm90bzUudG9Ob2RlID0gZnVuY3Rpb24gdG9Ob2RlKCkge1xuICAgIHZhciBzdmdOUyA9IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmdOUywgXCJzdmdcIik7IC8vIEFwcGx5IGF0dHJpYnV0ZXNcblxuICAgIGZvciAodmFyIGF0dHIgaW4gdGhpcy5hdHRyaWJ1dGVzKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuYXR0cmlidXRlcywgYXR0cikpIHtcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0ciwgdGhpcy5hdHRyaWJ1dGVzW2F0dHJdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5vZGUuYXBwZW5kQ2hpbGQodGhpcy5jaGlsZHJlbltpXS50b05vZGUoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG5cbiAgX3Byb3RvNS50b01hcmt1cCA9IGZ1bmN0aW9uIHRvTWFya3VwKCkge1xuICAgIHZhciBtYXJrdXAgPSBcIjxzdmdcIjsgLy8gQXBwbHkgYXR0cmlidXRlc1xuXG4gICAgZm9yICh2YXIgYXR0ciBpbiB0aGlzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5hdHRyaWJ1dGVzLCBhdHRyKSkge1xuICAgICAgICBtYXJrdXAgKz0gXCIgXCIgKyBhdHRyICsgXCI9J1wiICsgdGhpcy5hdHRyaWJ1dGVzW2F0dHJdICsgXCInXCI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWFya3VwICs9IFwiPlwiO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBtYXJrdXAgKz0gdGhpcy5jaGlsZHJlbltpXS50b01hcmt1cCgpO1xuICAgIH1cblxuICAgIG1hcmt1cCArPSBcIjwvc3ZnPlwiO1xuICAgIHJldHVybiBtYXJrdXA7XG4gIH07XG5cbiAgcmV0dXJuIFN2Z05vZGU7XG59KCk7XG52YXIgZG9tVHJlZV9QYXRoTm9kZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFBhdGhOb2RlKHBhdGhOYW1lLCBhbHRlcm5hdGUpIHtcbiAgICB0aGlzLnBhdGhOYW1lID0gdm9pZCAwO1xuICAgIHRoaXMuYWx0ZXJuYXRlID0gdm9pZCAwO1xuICAgIHRoaXMucGF0aE5hbWUgPSBwYXRoTmFtZTtcbiAgICB0aGlzLmFsdGVybmF0ZSA9IGFsdGVybmF0ZTsgLy8gVXNlZCBvbmx5IGZvciB0YWxsIFxcc3FydFxuICB9XG5cbiAgdmFyIF9wcm90bzYgPSBQYXRoTm9kZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvNi50b05vZGUgPSBmdW5jdGlvbiB0b05vZGUoKSB7XG4gICAgdmFyIHN2Z05TID0gXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z05TLCBcInBhdGhcIik7XG5cbiAgICBpZiAodGhpcy5hbHRlcm5hdGUpIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwiZFwiLCB0aGlzLmFsdGVybmF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwiZFwiLCBzdmdHZW9tZXRyeS5wYXRoW3RoaXMucGF0aE5hbWVdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICBfcHJvdG82LnRvTWFya3VwID0gZnVuY3Rpb24gdG9NYXJrdXAoKSB7XG4gICAgaWYgKHRoaXMuYWx0ZXJuYXRlKSB7XG4gICAgICByZXR1cm4gXCI8cGF0aCBkPSdcIiArIHRoaXMuYWx0ZXJuYXRlICsgXCInLz5cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiPHBhdGggZD0nXCIgKyBzdmdHZW9tZXRyeS5wYXRoW3RoaXMucGF0aE5hbWVdICsgXCInLz5cIjtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFBhdGhOb2RlO1xufSgpO1xudmFyIExpbmVOb2RlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTGluZU5vZGUoYXR0cmlidXRlcykge1xuICAgIHRoaXMuYXR0cmlidXRlcyA9IHZvaWQgMDtcbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzIHx8IHt9O1xuICB9XG5cbiAgdmFyIF9wcm90bzcgPSBMaW5lTm9kZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvNy50b05vZGUgPSBmdW5jdGlvbiB0b05vZGUoKSB7XG4gICAgdmFyIHN2Z05TID0gXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z05TLCBcImxpbmVcIik7IC8vIEFwcGx5IGF0dHJpYnV0ZXNcblxuICAgIGZvciAodmFyIGF0dHIgaW4gdGhpcy5hdHRyaWJ1dGVzKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuYXR0cmlidXRlcywgYXR0cikpIHtcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0ciwgdGhpcy5hdHRyaWJ1dGVzW2F0dHJdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICBfcHJvdG83LnRvTWFya3VwID0gZnVuY3Rpb24gdG9NYXJrdXAoKSB7XG4gICAgdmFyIG1hcmt1cCA9IFwiPGxpbmVcIjtcblxuICAgIGZvciAodmFyIGF0dHIgaW4gdGhpcy5hdHRyaWJ1dGVzKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuYXR0cmlidXRlcywgYXR0cikpIHtcbiAgICAgICAgbWFya3VwICs9IFwiIFwiICsgYXR0ciArIFwiPSdcIiArIHRoaXMuYXR0cmlidXRlc1thdHRyXSArIFwiJ1wiO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1hcmt1cCArPSBcIi8+XCI7XG4gICAgcmV0dXJuIG1hcmt1cDtcbiAgfTtcblxuICByZXR1cm4gTGluZU5vZGU7XG59KCk7XG5mdW5jdGlvbiBhc3NlcnRTeW1ib2xEb21Ob2RlKGdyb3VwKSB7XG4gIGlmIChncm91cCBpbnN0YW5jZW9mIGRvbVRyZWVfU3ltYm9sTm9kZSkge1xuICAgIHJldHVybiBncm91cDtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBzeW1ib2xOb2RlIGJ1dCBnb3QgXCIgKyBTdHJpbmcoZ3JvdXApICsgXCIuXCIpO1xuICB9XG59XG5mdW5jdGlvbiBhc3NlcnRTcGFuKGdyb3VwKSB7XG4gIGlmIChncm91cCBpbnN0YW5jZW9mIGRvbVRyZWVfU3Bhbikge1xuICAgIHJldHVybiBncm91cDtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBzcGFuPEh0bWxEb21Ob2RlPiBidXQgZ290IFwiICsgU3RyaW5nKGdyb3VwKSArIFwiLlwiKTtcbiAgfVxufVxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zdWJtb2R1bGVzL2thdGV4LWZvbnRzL2ZvbnRNZXRyaWNzRGF0YS5qc1xuLy8gVGhpcyBmaWxlIGlzIEdFTkVSQVRFRCBieSBidWlsZE1ldHJpY3Muc2guIERPIE5PVCBNT0RJRlkuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBmb250TWV0cmljc0RhdGEgPSAoe1xuICBcIkFNUy1SZWd1bGFyXCI6IHtcbiAgICBcIjY1XCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjY2XCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjY3XCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjY4XCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjY5XCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjcwXCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjYxMTExXSxcbiAgICBcIjcxXCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjcyXCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjczXCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjM4ODg5XSxcbiAgICBcIjc0XCI6IFswLjE2NjY3LCAwLjY4ODg5LCAwLCAwLCAwLjVdLFxuICAgIFwiNzVcIjogWzAsIDAuNjg4ODksIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiNzZcIjogWzAsIDAuNjg4ODksIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiNzdcIjogWzAsIDAuNjg4ODksIDAsIDAsIDAuOTQ0NDVdLFxuICAgIFwiNzhcIjogWzAsIDAuNjg4ODksIDAsIDAsIDAuNzIyMjJdLFxuICAgIFwiNzlcIjogWzAuMTY2NjcsIDAuNjg4ODksIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODBcIjogWzAsIDAuNjg4ODksIDAsIDAsIDAuNjExMTFdLFxuICAgIFwiODFcIjogWzAuMTY2NjcsIDAuNjg4ODksIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODJcIjogWzAsIDAuNjg4ODksIDAsIDAsIDAuNzIyMjJdLFxuICAgIFwiODNcIjogWzAsIDAuNjg4ODksIDAsIDAsIDAuNTU1NTZdLFxuICAgIFwiODRcIjogWzAsIDAuNjg4ODksIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiODVcIjogWzAsIDAuNjg4ODksIDAsIDAsIDAuNzIyMjJdLFxuICAgIFwiODZcIjogWzAsIDAuNjg4ODksIDAsIDAsIDAuNzIyMjJdLFxuICAgIFwiODdcIjogWzAsIDAuNjg4ODksIDAsIDAsIDEuMF0sXG4gICAgXCI4OFwiOiBbMCwgMC42ODg4OSwgMCwgMCwgMC43MjIyMl0sXG4gICAgXCI4OVwiOiBbMCwgMC42ODg4OSwgMCwgMCwgMC43MjIyMl0sXG4gICAgXCI5MFwiOiBbMCwgMC42ODg4OSwgMCwgMCwgMC42NjY2N10sXG4gICAgXCIxMDdcIjogWzAsIDAuNjg4ODksIDAsIDAsIDAuNTU1NTZdLFxuICAgIFwiMTY1XCI6IFswLCAwLjY3NSwgMC4wMjUsIDAsIDAuNzVdLFxuICAgIFwiMTc0XCI6IFswLjE1NTU5LCAwLjY5MjI0LCAwLCAwLCAwLjk0NjY2XSxcbiAgICBcIjI0MFwiOiBbMCwgMC42ODg4OSwgMCwgMCwgMC41NTU1Nl0sXG4gICAgXCIyOTVcIjogWzAsIDAuNjg4ODksIDAsIDAsIDAuNTQwMjhdLFxuICAgIFwiNzEwXCI6IFswLCAwLjgyNSwgMCwgMCwgMi4zMzMzNF0sXG4gICAgXCI3MzJcIjogWzAsIDAuOSwgMCwgMCwgMi4zMzMzNF0sXG4gICAgXCI3NzBcIjogWzAsIDAuODI1LCAwLCAwLCAyLjMzMzM0XSxcbiAgICBcIjc3MVwiOiBbMCwgMC45LCAwLCAwLCAyLjMzMzM0XSxcbiAgICBcIjk4OVwiOiBbMC4wODE2NywgMC41ODE2NywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCIxMDA4XCI6IFswLCAwLjQzMDU2LCAwLjA0MDI4LCAwLCAwLjY2NjY3XSxcbiAgICBcIjgyNDVcIjogWzAsIDAuNTQ5ODYsIDAsIDAsIDAuMjc1XSxcbiAgICBcIjg0NjNcIjogWzAsIDAuNjg4ODksIDAsIDAsIDAuNTQwMjhdLFxuICAgIFwiODQ4N1wiOiBbMCwgMC42ODg4OSwgMCwgMCwgMC43MjIyMl0sXG4gICAgXCI4NDk4XCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjU1NTU2XSxcbiAgICBcIjg1MDJcIjogWzAsIDAuNjg4ODksIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiODUwM1wiOiBbMCwgMC42ODg4OSwgMCwgMCwgMC40NDQ0NV0sXG4gICAgXCI4NTA0XCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjg1MTNcIjogWzAsIDAuNjg4ODksIDAsIDAsIDAuNjM4ODldLFxuICAgIFwiODU5MlwiOiBbLTAuMDM1OTgsIDAuNDY0MDIsIDAsIDAsIDAuNV0sXG4gICAgXCI4NTk0XCI6IFstMC4wMzU5OCwgMC40NjQwMiwgMCwgMCwgMC41XSxcbiAgICBcIjg2MDJcIjogWy0wLjEzMzEzLCAwLjM2Njg3LCAwLCAwLCAxLjBdLFxuICAgIFwiODYwM1wiOiBbLTAuMTMzMTMsIDAuMzY2ODcsIDAsIDAsIDEuMF0sXG4gICAgXCI4NjA2XCI6IFswLjAxMzU0LCAwLjUyMjM5LCAwLCAwLCAxLjBdLFxuICAgIFwiODYwOFwiOiBbMC4wMTM1NCwgMC41MjIzOSwgMCwgMCwgMS4wXSxcbiAgICBcIjg2MTBcIjogWzAuMDEzNTQsIDAuNTIyMzksIDAsIDAsIDEuMTExMTFdLFxuICAgIFwiODYxMVwiOiBbMC4wMTM1NCwgMC41MjIzOSwgMCwgMCwgMS4xMTExMV0sXG4gICAgXCI4NjE5XCI6IFswLCAwLjU0OTg2LCAwLCAwLCAxLjBdLFxuICAgIFwiODYyMFwiOiBbMCwgMC41NDk4NiwgMCwgMCwgMS4wXSxcbiAgICBcIjg2MjFcIjogWy0wLjEzMzEzLCAwLjM3Nzg4LCAwLCAwLCAxLjM4ODg5XSxcbiAgICBcIjg2MjJcIjogWy0wLjEzMzEzLCAwLjM2Njg3LCAwLCAwLCAxLjBdLFxuICAgIFwiODYyNFwiOiBbMCwgMC42OTIyNCwgMCwgMCwgMC41XSxcbiAgICBcIjg2MjVcIjogWzAsIDAuNjkyMjQsIDAsIDAsIDAuNV0sXG4gICAgXCI4NjMwXCI6IFswLCAwLjQzMDU2LCAwLCAwLCAxLjBdLFxuICAgIFwiODYzMVwiOiBbMCwgMC40MzA1NiwgMCwgMCwgMS4wXSxcbiAgICBcIjg2MzRcIjogWzAuMDgxOTgsIDAuNTgxOTgsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODYzNVwiOiBbMC4wODE5OCwgMC41ODE5OCwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4NjM4XCI6IFswLjE5NDQ0LCAwLjY5MjI0LCAwLCAwLCAwLjQxNjY3XSxcbiAgICBcIjg2MzlcIjogWzAuMTk0NDQsIDAuNjkyMjQsIDAsIDAsIDAuNDE2NjddLFxuICAgIFwiODY0MlwiOiBbMC4xOTQ0NCwgMC42OTIyNCwgMCwgMCwgMC40MTY2N10sXG4gICAgXCI4NjQzXCI6IFswLjE5NDQ0LCAwLjY5MjI0LCAwLCAwLCAwLjQxNjY3XSxcbiAgICBcIjg2NDRcIjogWzAuMTgwOCwgMC42NzUsIDAsIDAsIDEuMF0sXG4gICAgXCI4NjQ2XCI6IFswLjE4MDgsIDAuNjc1LCAwLCAwLCAxLjBdLFxuICAgIFwiODY0N1wiOiBbMC4xODA4LCAwLjY3NSwgMCwgMCwgMS4wXSxcbiAgICBcIjg2NDhcIjogWzAuMTk0NDQsIDAuNjkyMjQsIDAsIDAsIDAuODMzMzRdLFxuICAgIFwiODY0OVwiOiBbMC4xODA4LCAwLjY3NSwgMCwgMCwgMS4wXSxcbiAgICBcIjg2NTBcIjogWzAuMTk0NDQsIDAuNjkyMjQsIDAsIDAsIDAuODMzMzRdLFxuICAgIFwiODY1MVwiOiBbMC4wMTM1NCwgMC41MjIzOSwgMCwgMCwgMS4wXSxcbiAgICBcIjg2NTJcIjogWzAuMDEzNTQsIDAuNTIyMzksIDAsIDAsIDEuMF0sXG4gICAgXCI4NjUzXCI6IFstMC4xMzMxMywgMC4zNjY4NywgMCwgMCwgMS4wXSxcbiAgICBcIjg2NTRcIjogWy0wLjEzMzEzLCAwLjM2Njg3LCAwLCAwLCAxLjBdLFxuICAgIFwiODY1NVwiOiBbLTAuMTMzMTMsIDAuMzY2ODcsIDAsIDAsIDEuMF0sXG4gICAgXCI4NjY2XCI6IFswLjEzNjY3LCAwLjYzNjY3LCAwLCAwLCAxLjBdLFxuICAgIFwiODY2N1wiOiBbMC4xMzY2NywgMC42MzY2NywgMCwgMCwgMS4wXSxcbiAgICBcIjg2NjlcIjogWy0wLjEzMzEzLCAwLjM3Nzg4LCAwLCAwLCAxLjBdLFxuICAgIFwiODY3MlwiOiBbLTAuMDY0LCAwLjQzNywgMCwgMCwgMS4zMzRdLFxuICAgIFwiODY3NFwiOiBbLTAuMDY0LCAwLjQzNywgMCwgMCwgMS4zMzRdLFxuICAgIFwiODcwNVwiOiBbMCwgMC44MjUsIDAsIDAsIDAuNV0sXG4gICAgXCI4NzA4XCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjU1NTU2XSxcbiAgICBcIjg3MDlcIjogWzAuMDgxNjcsIDAuNTgxNjcsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODcxN1wiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC40MjkxN10sXG4gICAgXCI4NzIyXCI6IFstMC4wMzU5OCwgMC40NjQwMiwgMCwgMCwgMC41XSxcbiAgICBcIjg3MjRcIjogWzAuMDgxOTgsIDAuNjkyMjQsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODcyNlwiOiBbMC4wODE2NywgMC41ODE2NywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4NzMzXCI6IFswLCAwLjY5MjI0LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg3MzZcIjogWzAsIDAuNjkyMjQsIDAsIDAsIDAuNzIyMjJdLFxuICAgIFwiODczN1wiOiBbMCwgMC42OTIyNCwgMCwgMCwgMC43MjIyMl0sXG4gICAgXCI4NzM4XCI6IFswLjAzNTE3LCAwLjUyMjM5LCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjg3MzlcIjogWzAuMDgxNjcsIDAuNTgxNjcsIDAsIDAsIDAuMjIyMjJdLFxuICAgIFwiODc0MFwiOiBbMC4yNTE0MiwgMC43NDExMSwgMCwgMCwgMC4yNzc3OF0sXG4gICAgXCI4NzQxXCI6IFswLjA4MTY3LCAwLjU4MTY3LCAwLCAwLCAwLjM4ODg5XSxcbiAgICBcIjg3NDJcIjogWzAuMjUxNDIsIDAuNzQxMTEsIDAsIDAsIDAuNV0sXG4gICAgXCI4NzU2XCI6IFswLCAwLjY5MjI0LCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjg3NTdcIjogWzAsIDAuNjkyMjQsIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiODc2NFwiOiBbLTAuMTMzMTMsIDAuMzY2ODcsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODc2NVwiOiBbLTAuMTMzMTMsIDAuMzc3ODgsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODc2OVwiOiBbLTAuMTMzMTMsIDAuMzY2ODcsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODc3MFwiOiBbLTAuMDM2MjUsIDAuNDYzNzUsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODc3NFwiOiBbMC4zMDI3NCwgMC43OTM4MywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4Nzc2XCI6IFstMC4wMTY4OCwgMC40ODMxMiwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4Nzc4XCI6IFswLjA4MTY3LCAwLjU4MTY3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg3ODJcIjogWzAuMDYwNjIsIDAuNTQ5ODYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODc4M1wiOiBbMC4wNjA2MiwgMC41NDk4NiwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4Nzg1XCI6IFswLjA4MTk4LCAwLjU4MTk4LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg3ODZcIjogWzAuMDgxOTgsIDAuNTgxOTgsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODc4N1wiOiBbMC4wODE5OCwgMC41ODE5OCwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4NzkwXCI6IFswLCAwLjY5MjI0LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg3OTFcIjogWzAuMjI5NTgsIDAuNzI5NTgsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODc5NlwiOiBbMC4wODE5OCwgMC45MTY2NywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODA2XCI6IFswLjI1NTgzLCAwLjc1NTgzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4MDdcIjogWzAuMjU1ODMsIDAuNzU1ODMsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODgwOFwiOiBbMC4yNTE0MiwgMC43NTcyNiwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODA5XCI6IFswLjI1MTQyLCAwLjc1NzI2LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4MTJcIjogWzAuMjU1ODMsIDAuNzU1ODMsIDAsIDAsIDAuNV0sXG4gICAgXCI4ODE0XCI6IFswLjIwNTc2LCAwLjcwNTc2LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4MTVcIjogWzAuMjA1NzYsIDAuNzA1NzYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODgxNlwiOiBbMC4zMDI3NCwgMC43OTM4MywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODE3XCI6IFswLjMwMjc0LCAwLjc5MzgzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4MThcIjogWzAuMjI5NTgsIDAuNzI5NTgsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODgxOVwiOiBbMC4yMjk1OCwgMC43Mjk1OCwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODIyXCI6IFswLjE4MDgsIDAuNjc1LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4MjNcIjogWzAuMTgwOCwgMC42NzUsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODgyOFwiOiBbMC4xMzY2NywgMC42MzY2NywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODI5XCI6IFswLjEzNjY3LCAwLjYzNjY3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4MzBcIjogWzAuMjI5NTgsIDAuNzI5NTgsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODgzMVwiOiBbMC4yMjk1OCwgMC43Mjk1OCwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODMyXCI6IFswLjIwNTc2LCAwLjcwNTc2LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4MzNcIjogWzAuMjA1NzYsIDAuNzA1NzYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODg0MFwiOiBbMC4zMDI3NCwgMC43OTM4MywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODQxXCI6IFswLjMwMjc0LCAwLjc5MzgzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4NDJcIjogWzAuMTM1OTcsIDAuNjM1OTcsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODg0M1wiOiBbMC4xMzU5NywgMC42MzU5NywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODQ3XCI6IFswLjAzNTE3LCAwLjU0OTg2LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4NDhcIjogWzAuMDM1MTcsIDAuNTQ5ODYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODg1OFwiOiBbMC4wODE5OCwgMC41ODE5OCwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODU5XCI6IFswLjA4MTk4LCAwLjU4MTk4LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4NjFcIjogWzAuMDgxOTgsIDAuNTgxOTgsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODg2MlwiOiBbMCwgMC42NzUsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODg2M1wiOiBbMCwgMC42NzUsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODg2NFwiOiBbMCwgMC42NzUsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODg2NVwiOiBbMCwgMC42NzUsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODg3MlwiOiBbMCwgMC42OTIyNCwgMCwgMCwgMC42MTExMV0sXG4gICAgXCI4ODczXCI6IFswLCAwLjY5MjI0LCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjg4NzRcIjogWzAsIDAuNjkyMjQsIDAsIDAsIDAuODg4ODldLFxuICAgIFwiODg3NlwiOiBbMCwgMC42ODg4OSwgMCwgMCwgMC42MTExMV0sXG4gICAgXCI4ODc3XCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjYxMTExXSxcbiAgICBcIjg4NzhcIjogWzAsIDAuNjg4ODksIDAsIDAsIDAuNzIyMjJdLFxuICAgIFwiODg3OVwiOiBbMCwgMC42ODg4OSwgMCwgMCwgMC43MjIyMl0sXG4gICAgXCI4ODgyXCI6IFswLjAzNTE3LCAwLjU0OTg2LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4ODNcIjogWzAuMDM1MTcsIDAuNTQ5ODYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODg4NFwiOiBbMC4xMzY2NywgMC42MzY2NywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODg1XCI6IFswLjEzNjY3LCAwLjYzNjY3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4ODhcIjogWzAsIDAuNTQ5ODYsIDAsIDAsIDEuMTExMTFdLFxuICAgIFwiODg5MFwiOiBbMC4xOTQ0NCwgMC40MzA1NiwgMCwgMCwgMC41NTU1Nl0sXG4gICAgXCI4ODkxXCI6IFswLjE5NDQ0LCAwLjY5MjI0LCAwLCAwLCAwLjYxMTExXSxcbiAgICBcIjg4OTJcIjogWzAuMTk0NDQsIDAuNjkyMjQsIDAsIDAsIDAuNjExMTFdLFxuICAgIFwiODkwMVwiOiBbMCwgMC41NDk4NiwgMCwgMCwgMC4yNzc3OF0sXG4gICAgXCI4OTAzXCI6IFswLjA4MTY3LCAwLjU4MTY3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg5MDVcIjogWzAuMDgxNjcsIDAuNTgxNjcsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODkwNlwiOiBbMC4wODE2NywgMC41ODE2NywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4OTA3XCI6IFswLCAwLjY5MjI0LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg5MDhcIjogWzAsIDAuNjkyMjQsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODkwOVwiOiBbLTAuMDM1OTgsIDAuNDY0MDIsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODkxMFwiOiBbMCwgMC41NDk4NiwgMCwgMCwgMC43NjA0Ml0sXG4gICAgXCI4OTExXCI6IFswLCAwLjU0OTg2LCAwLCAwLCAwLjc2MDQyXSxcbiAgICBcIjg5MTJcIjogWzAuMDM1MTcsIDAuNTQ5ODYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODkxM1wiOiBbMC4wMzUxNywgMC41NDk4NiwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4OTE0XCI6IFswLCAwLjU0OTg2LCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjg5MTVcIjogWzAsIDAuNTQ5ODYsIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiODkxNlwiOiBbMCwgMC42OTIyNCwgMCwgMCwgMC42NjY2N10sXG4gICAgXCI4OTE4XCI6IFswLjAzOTEsIDAuNTM5MSwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4OTE5XCI6IFswLjAzOTEsIDAuNTM5MSwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4OTIwXCI6IFswLjAzNTE3LCAwLjU0OTg2LCAwLCAwLCAxLjMzMzM0XSxcbiAgICBcIjg5MjFcIjogWzAuMDM1MTcsIDAuNTQ5ODYsIDAsIDAsIDEuMzMzMzRdLFxuICAgIFwiODkyMlwiOiBbMC4zODU2OSwgMC44ODU2OSwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4OTIzXCI6IFswLjM4NTY5LCAwLjg4NTY5LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg5MjZcIjogWzAuMTM2NjcsIDAuNjM2NjcsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODkyN1wiOiBbMC4xMzY2NywgMC42MzY2NywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4OTI4XCI6IFswLjMwMjc0LCAwLjc5MzgzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg5MjlcIjogWzAuMzAyNzQsIDAuNzkzODMsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODkzNFwiOiBbMC4yMzIyMiwgMC43NDExMSwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4OTM1XCI6IFswLjIzMjIyLCAwLjc0MTExLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg5MzZcIjogWzAuMjMyMjIsIDAuNzQxMTEsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODkzN1wiOiBbMC4yMzIyMiwgMC43NDExMSwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4OTM4XCI6IFswLjIwNTc2LCAwLjcwNTc2LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg5MzlcIjogWzAuMjA1NzYsIDAuNzA1NzYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODk0MFwiOiBbMC4zMDI3NCwgMC43OTM4MywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4OTQxXCI6IFswLjMwMjc0LCAwLjc5MzgzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg5OTRcIjogWzAuMTk0NDQsIDAuNjkyMjQsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODk5NVwiOiBbMC4xOTQ0NCwgMC42OTIyNCwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI5NDE2XCI6IFswLjE1NTU5LCAwLjY5MjI0LCAwLCAwLCAwLjkwMjIyXSxcbiAgICBcIjk0ODRcIjogWzAsIDAuNjkyMjQsIDAsIDAsIDAuNV0sXG4gICAgXCI5NDg4XCI6IFswLCAwLjY5MjI0LCAwLCAwLCAwLjVdLFxuICAgIFwiOTQ5MlwiOiBbMCwgMC4zNzc4OCwgMCwgMCwgMC41XSxcbiAgICBcIjk0OTZcIjogWzAsIDAuMzc3ODgsIDAsIDAsIDAuNV0sXG4gICAgXCI5NTg1XCI6IFswLjE5NDQ0LCAwLjY4ODg5LCAwLCAwLCAwLjg4ODg5XSxcbiAgICBcIjk1ODZcIjogWzAuMTk0NDQsIDAuNzQxMTEsIDAsIDAsIDAuODg4ODldLFxuICAgIFwiOTYzMlwiOiBbMCwgMC42NzUsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiOTYzM1wiOiBbMCwgMC42NzUsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiOTY1MFwiOiBbMCwgMC41NDk4NiwgMCwgMCwgMC43MjIyMl0sXG4gICAgXCI5NjUxXCI6IFswLCAwLjU0OTg2LCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjk2NTRcIjogWzAuMDM1MTcsIDAuNTQ5ODYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiOTY2MFwiOiBbMCwgMC41NDk4NiwgMCwgMCwgMC43MjIyMl0sXG4gICAgXCI5NjYxXCI6IFswLCAwLjU0OTg2LCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjk2NjRcIjogWzAuMDM1MTcsIDAuNTQ5ODYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiOTY3NFwiOiBbMC4xMTExMSwgMC42OTIyNCwgMCwgMCwgMC42NjY2N10sXG4gICAgXCI5NzMzXCI6IFswLjE5NDQ0LCAwLjY5MjI0LCAwLCAwLCAwLjk0NDQ1XSxcbiAgICBcIjEwMDAzXCI6IFswLCAwLjY5MjI0LCAwLCAwLCAwLjgzMzM0XSxcbiAgICBcIjEwMDE2XCI6IFswLCAwLjY5MjI0LCAwLCAwLCAwLjgzMzM0XSxcbiAgICBcIjEwNzMxXCI6IFswLjExMTExLCAwLjY5MjI0LCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjEwODQ2XCI6IFswLjE5NDQ0LCAwLjc1NTgzLCAwLCAwLCAwLjYxMTExXSxcbiAgICBcIjEwODc3XCI6IFswLjEzNjY3LCAwLjYzNjY3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjEwODc4XCI6IFswLjEzNjY3LCAwLjYzNjY3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjEwODg1XCI6IFswLjI1NTgzLCAwLjc1NTgzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjEwODg2XCI6IFswLjI1NTgzLCAwLjc1NTgzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjEwODg3XCI6IFswLjEzNTk3LCAwLjYzNTk3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjEwODg4XCI6IFswLjEzNTk3LCAwLjYzNTk3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjEwODg5XCI6IFswLjI2MTY3LCAwLjc1NzI2LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjEwODkwXCI6IFswLjI2MTY3LCAwLjc1NzI2LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjEwODkxXCI6IFswLjQ4MjU2LCAwLjk4MjU2LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjEwODkyXCI6IFswLjQ4MjU2LCAwLjk4MjU2LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjEwOTAxXCI6IFswLjEzNjY3LCAwLjYzNjY3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjEwOTAyXCI6IFswLjEzNjY3LCAwLjYzNjY3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjEwOTMzXCI6IFswLjI1MTQyLCAwLjc1NzI2LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjEwOTM0XCI6IFswLjI1MTQyLCAwLjc1NzI2LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjEwOTM1XCI6IFswLjI2MTY3LCAwLjc1NzI2LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjEwOTM2XCI6IFswLjI2MTY3LCAwLjc1NzI2LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjEwOTM3XCI6IFswLjI2MTY3LCAwLjc1NzI2LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjEwOTM4XCI6IFswLjI2MTY3LCAwLjc1NzI2LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjEwOTQ5XCI6IFswLjI1NTgzLCAwLjc1NTgzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjEwOTUwXCI6IFswLjI1NTgzLCAwLjc1NTgzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjEwOTU1XCI6IFswLjI4NDgxLCAwLjc5MzgzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjEwOTU2XCI6IFswLjI4NDgxLCAwLjc5MzgzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjU3MzUwXCI6IFswLjA4MTY3LCAwLjU4MTY3LCAwLCAwLCAwLjIyMjIyXSxcbiAgICBcIjU3MzUxXCI6IFswLjA4MTY3LCAwLjU4MTY3LCAwLCAwLCAwLjM4ODg5XSxcbiAgICBcIjU3MzUyXCI6IFswLjA4MTY3LCAwLjU4MTY3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjU3MzUzXCI6IFswLCAwLjQzMDU2LCAwLjA0MDI4LCAwLCAwLjY2NjY3XSxcbiAgICBcIjU3MzU2XCI6IFswLjI1MTQyLCAwLjc1NzI2LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjU3MzU3XCI6IFswLjI1MTQyLCAwLjc1NzI2LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjU3MzU4XCI6IFswLjQxOTUxLCAwLjkxOTUxLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjU3MzU5XCI6IFswLjMwMjc0LCAwLjc5MzgzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjU3MzYwXCI6IFswLjMwMjc0LCAwLjc5MzgzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjU3MzYxXCI6IFswLjQxOTUxLCAwLjkxOTUxLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjU3MzY2XCI6IFswLjI1MTQyLCAwLjc1NzI2LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjU3MzY3XCI6IFswLjI1MTQyLCAwLjc1NzI2LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjU3MzY4XCI6IFswLjI1MTQyLCAwLjc1NzI2LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjU3MzY5XCI6IFswLjI1MTQyLCAwLjc1NzI2LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjU3MzcwXCI6IFswLjEzNTk3LCAwLjYzNTk3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjU3MzcxXCI6IFswLjEzNTk3LCAwLjYzNTk3LCAwLCAwLCAwLjc3Nzc4XVxuICB9LFxuICBcIkNhbGlncmFwaGljLVJlZ3VsYXJcIjoge1xuICAgIFwiNDhcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuNV0sXG4gICAgXCI0OVwiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC41XSxcbiAgICBcIjUwXCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjVdLFxuICAgIFwiNTFcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAsIDAsIDAuNV0sXG4gICAgXCI1MlwiOiBbMC4xOTQ0NCwgMC40MzA1NiwgMCwgMCwgMC41XSxcbiAgICBcIjUzXCI6IFswLjE5NDQ0LCAwLjQzMDU2LCAwLCAwLCAwLjVdLFxuICAgIFwiNTRcIjogWzAsIDAuNjQ0NDQsIDAsIDAsIDAuNV0sXG4gICAgXCI1NVwiOiBbMC4xOTQ0NCwgMC40MzA1NiwgMCwgMCwgMC41XSxcbiAgICBcIjU2XCI6IFswLCAwLjY0NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiNTdcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAsIDAsIDAuNV0sXG4gICAgXCI2NVwiOiBbMCwgMC42ODMzMywgMCwgMC4xOTQ0NSwgMC43OTg0N10sXG4gICAgXCI2NlwiOiBbMCwgMC42ODMzMywgMC4wMzA0MSwgMC4xMzg4OSwgMC42NTY4MV0sXG4gICAgXCI2N1wiOiBbMCwgMC42ODMzMywgMC4wNTgzNCwgMC4xMzg4OSwgMC41MjY1M10sXG4gICAgXCI2OFwiOiBbMCwgMC42ODMzMywgMC4wMjc3OCwgMC4wODMzNCwgMC43NzEzOV0sXG4gICAgXCI2OVwiOiBbMCwgMC42ODMzMywgMC4wODk0NCwgMC4xMTExMSwgMC41Mjc3OF0sXG4gICAgXCI3MFwiOiBbMCwgMC42ODMzMywgMC4wOTkzMSwgMC4xMTExMSwgMC43MTg3NV0sXG4gICAgXCI3MVwiOiBbMC4wOTcyMiwgMC42ODMzMywgMC4wNTkzLCAwLjExMTExLCAwLjU5NDg3XSxcbiAgICBcIjcyXCI6IFswLCAwLjY4MzMzLCAwLjAwOTY1LCAwLjExMTExLCAwLjg0NDUyXSxcbiAgICBcIjczXCI6IFswLCAwLjY4MzMzLCAwLjA3MzgyLCAwLCAwLjU0NDUyXSxcbiAgICBcIjc0XCI6IFswLjA5NzIyLCAwLjY4MzMzLCAwLjE4NDcyLCAwLjE2NjY3LCAwLjY3Nzc4XSxcbiAgICBcIjc1XCI6IFswLCAwLjY4MzMzLCAwLjAxNDQ1LCAwLjA1NTU2LCAwLjc2MTk1XSxcbiAgICBcIjc2XCI6IFswLCAwLjY4MzMzLCAwLCAwLjEzODg5LCAwLjY4OTcyXSxcbiAgICBcIjc3XCI6IFswLCAwLjY4MzMzLCAwLCAwLjEzODg5LCAxLjIwMDldLFxuICAgIFwiNzhcIjogWzAsIDAuNjgzMzMsIDAuMTQ3MzYsIDAuMDgzMzQsIDAuODIwNDldLFxuICAgIFwiNzlcIjogWzAsIDAuNjgzMzMsIDAuMDI3NzgsIDAuMTExMTEsIDAuNzk2MTFdLFxuICAgIFwiODBcIjogWzAsIDAuNjgzMzMsIDAuMDgyMjIsIDAuMDgzMzQsIDAuNjk1NTZdLFxuICAgIFwiODFcIjogWzAuMDk3MjIsIDAuNjgzMzMsIDAsIDAuMTExMTEsIDAuODE2NjddLFxuICAgIFwiODJcIjogWzAsIDAuNjgzMzMsIDAsIDAuMDgzMzQsIDAuODQ3NV0sXG4gICAgXCI4M1wiOiBbMCwgMC42ODMzMywgMC4wNzUsIDAuMTM4ODksIDAuNjA1NTZdLFxuICAgIFwiODRcIjogWzAsIDAuNjgzMzMsIDAuMjU0MTcsIDAsIDAuNTQ0NjRdLFxuICAgIFwiODVcIjogWzAsIDAuNjgzMzMsIDAuMDk5MzEsIDAuMDgzMzQsIDAuNjI1ODNdLFxuICAgIFwiODZcIjogWzAsIDAuNjgzMzMsIDAuMDgyMjIsIDAsIDAuNjEyNzhdLFxuICAgIFwiODdcIjogWzAsIDAuNjgzMzMsIDAuMDgyMjIsIDAuMDgzMzQsIDAuOTg3NzhdLFxuICAgIFwiODhcIjogWzAsIDAuNjgzMzMsIDAuMTQ2NDMsIDAuMTM4ODksIDAuNzEzM10sXG4gICAgXCI4OVwiOiBbMC4wOTcyMiwgMC42ODMzMywgMC4wODIyMiwgMC4wODMzNCwgMC42NjgzNF0sXG4gICAgXCI5MFwiOiBbMCwgMC42ODMzMywgMC4wNzk0NCwgMC4xMzg4OSwgMC43MjQ3M11cbiAgfSxcbiAgXCJGcmFrdHVyLVJlZ3VsYXJcIjoge1xuICAgIFwiMzNcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuMjk1NzRdLFxuICAgIFwiMzRcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuMjE0NzFdLFxuICAgIFwiMzhcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuNzM3ODZdLFxuICAgIFwiMzlcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuMjEyMDFdLFxuICAgIFwiNDBcIjogWzAuMjQ5ODIsIDAuNzQ5NDcsIDAsIDAsIDAuMzg4NjVdLFxuICAgIFwiNDFcIjogWzAuMjQ5ODIsIDAuNzQ5NDcsIDAsIDAsIDAuMzg4NjVdLFxuICAgIFwiNDJcIjogWzAsIDAuNjIxMTksIDAsIDAsIDAuMjc3NjRdLFxuICAgIFwiNDNcIjogWzAuMDgzMTksIDAuNTgyODMsIDAsIDAsIDAuNzU2MjNdLFxuICAgIFwiNDRcIjogWzAsIDAuMTA4MDMsIDAsIDAsIDAuMjc3NjRdLFxuICAgIFwiNDVcIjogWzAuMDgzMTksIDAuNTgyODMsIDAsIDAsIDAuNzU2MjNdLFxuICAgIFwiNDZcIjogWzAsIDAuMTA4MDMsIDAsIDAsIDAuMjc3NjRdLFxuICAgIFwiNDdcIjogWzAuMjQ5ODIsIDAuNzQ5NDcsIDAsIDAsIDAuNTAxODFdLFxuICAgIFwiNDhcIjogWzAsIDAuNDc1MzQsIDAsIDAsIDAuNTAxODFdLFxuICAgIFwiNDlcIjogWzAsIDAuNDc1MzQsIDAsIDAsIDAuNTAxODFdLFxuICAgIFwiNTBcIjogWzAsIDAuNDc1MzQsIDAsIDAsIDAuNTAxODFdLFxuICAgIFwiNTFcIjogWzAuMTg5MDYsIDAuNDc1MzQsIDAsIDAsIDAuNTAxODFdLFxuICAgIFwiNTJcIjogWzAuMTg5MDYsIDAuNDc1MzQsIDAsIDAsIDAuNTAxODFdLFxuICAgIFwiNTNcIjogWzAuMTg5MDYsIDAuNDc1MzQsIDAsIDAsIDAuNTAxODFdLFxuICAgIFwiNTRcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuNTAxODFdLFxuICAgIFwiNTVcIjogWzAuMTg5MDYsIDAuNDc1MzQsIDAsIDAsIDAuNTAxODFdLFxuICAgIFwiNTZcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuNTAxODFdLFxuICAgIFwiNTdcIjogWzAuMTg5MDYsIDAuNDc1MzQsIDAsIDAsIDAuNTAxODFdLFxuICAgIFwiNThcIjogWzAsIDAuNDc1MzQsIDAsIDAsIDAuMjE2MDZdLFxuICAgIFwiNTlcIjogWzAuMTI2MDQsIDAuNDc1MzQsIDAsIDAsIDAuMjE2MDZdLFxuICAgIFwiNjFcIjogWy0wLjEzMDk5LCAwLjM2ODY2LCAwLCAwLCAwLjc1NjIzXSxcbiAgICBcIjYzXCI6IFswLCAwLjY5MTQxLCAwLCAwLCAwLjM2MjQ1XSxcbiAgICBcIjY1XCI6IFswLCAwLjY5MTQxLCAwLCAwLCAwLjcxNzZdLFxuICAgIFwiNjZcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuODgzOTddLFxuICAgIFwiNjdcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuNjEyNTRdLFxuICAgIFwiNjhcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuODMxNThdLFxuICAgIFwiNjlcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuNjYyNzhdLFxuICAgIFwiNzBcIjogWzAuMTI2MDQsIDAuNjkxNDEsIDAsIDAsIDAuNjExMTldLFxuICAgIFwiNzFcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuNzg1MzldLFxuICAgIFwiNzJcIjogWzAuMDYzMDIsIDAuNjkxNDEsIDAsIDAsIDAuNzIwM10sXG4gICAgXCI3M1wiOiBbMCwgMC42OTE0MSwgMCwgMCwgMC41NTQ0OF0sXG4gICAgXCI3NFwiOiBbMC4xMjYwNCwgMC42OTE0MSwgMCwgMCwgMC41NTIzMV0sXG4gICAgXCI3NVwiOiBbMCwgMC42OTE0MSwgMCwgMCwgMC42Njg0NV0sXG4gICAgXCI3NlwiOiBbMCwgMC42OTE0MSwgMCwgMCwgMC42NjYwMl0sXG4gICAgXCI3N1wiOiBbMCwgMC42OTE0MSwgMCwgMCwgMS4wNDk1M10sXG4gICAgXCI3OFwiOiBbMCwgMC42OTE0MSwgMCwgMCwgMC44MzIxMl0sXG4gICAgXCI3OVwiOiBbMCwgMC42OTE0MSwgMCwgMCwgMC44MjY5OV0sXG4gICAgXCI4MFwiOiBbMC4xODkwNiwgMC42OTE0MSwgMCwgMCwgMC44Mjc1M10sXG4gICAgXCI4MVwiOiBbMC4wMzc4MSwgMC42OTE0MSwgMCwgMCwgMC44MjY5OV0sXG4gICAgXCI4MlwiOiBbMCwgMC42OTE0MSwgMCwgMCwgMC44MjgwN10sXG4gICAgXCI4M1wiOiBbMCwgMC42OTE0MSwgMCwgMCwgMC44Mjg2MV0sXG4gICAgXCI4NFwiOiBbMCwgMC42OTE0MSwgMCwgMCwgMC42Njg5OV0sXG4gICAgXCI4NVwiOiBbMCwgMC42OTE0MSwgMCwgMCwgMC42NDU3Nl0sXG4gICAgXCI4NlwiOiBbMCwgMC42OTE0MSwgMCwgMCwgMC44MzEzMV0sXG4gICAgXCI4N1wiOiBbMCwgMC42OTE0MSwgMCwgMCwgMS4wNDYwMl0sXG4gICAgXCI4OFwiOiBbMCwgMC42OTE0MSwgMCwgMCwgMC43MTkyMl0sXG4gICAgXCI4OVwiOiBbMC4xODkwNiwgMC42OTE0MSwgMCwgMCwgMC44MzI5M10sXG4gICAgXCI5MFwiOiBbMC4xMjYwNCwgMC42OTE0MSwgMCwgMCwgMC42MDIwMV0sXG4gICAgXCI5MVwiOiBbMC4yNDk4MiwgMC43NDk0NywgMCwgMCwgMC4yNzc2NF0sXG4gICAgXCI5M1wiOiBbMC4yNDk4MiwgMC43NDk0NywgMCwgMCwgMC4yNzc2NF0sXG4gICAgXCI5NFwiOiBbMCwgMC42OTE0MSwgMCwgMCwgMC40OTk2NV0sXG4gICAgXCI5N1wiOiBbMCwgMC40NzUzNCwgMCwgMCwgMC41MDA0Nl0sXG4gICAgXCI5OFwiOiBbMCwgMC42OTE0MSwgMCwgMCwgMC41MTMxNV0sXG4gICAgXCI5OVwiOiBbMCwgMC40NzUzNCwgMCwgMCwgMC4zODk0Nl0sXG4gICAgXCIxMDBcIjogWzAsIDAuNjIxMTksIDAsIDAsIDAuNDk4NTddLFxuICAgIFwiMTAxXCI6IFswLCAwLjQ3NTM0LCAwLCAwLCAwLjQwMDUzXSxcbiAgICBcIjEwMlwiOiBbMC4xODkwNiwgMC42OTE0MSwgMCwgMCwgMC4zMjYyNl0sXG4gICAgXCIxMDNcIjogWzAuMTg5MDYsIDAuNDc1MzQsIDAsIDAsIDAuNTAzN10sXG4gICAgXCIxMDRcIjogWzAuMTg5MDYsIDAuNjkxNDEsIDAsIDAsIDAuNTIxMjZdLFxuICAgIFwiMTA1XCI6IFswLCAwLjY5MTQxLCAwLCAwLCAwLjI3ODk5XSxcbiAgICBcIjEwNlwiOiBbMCwgMC42OTE0MSwgMCwgMCwgMC4yODA4OF0sXG4gICAgXCIxMDdcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuMzg5NDZdLFxuICAgIFwiMTA4XCI6IFswLCAwLjY5MTQxLCAwLCAwLCAwLjI3OTUzXSxcbiAgICBcIjEwOVwiOiBbMCwgMC40NzUzNCwgMCwgMCwgMC43NjY3Nl0sXG4gICAgXCIxMTBcIjogWzAsIDAuNDc1MzQsIDAsIDAsIDAuNTI2NjZdLFxuICAgIFwiMTExXCI6IFswLCAwLjQ3NTM0LCAwLCAwLCAwLjQ4ODg1XSxcbiAgICBcIjExMlwiOiBbMC4xODkwNiwgMC41MjM5NiwgMCwgMCwgMC41MDA0Nl0sXG4gICAgXCIxMTNcIjogWzAuMTg5MDYsIDAuNDc1MzQsIDAsIDAsIDAuNDg5MTJdLFxuICAgIFwiMTE0XCI6IFswLCAwLjQ3NTM0LCAwLCAwLCAwLjM4OTE5XSxcbiAgICBcIjExNVwiOiBbMCwgMC40NzUzNCwgMCwgMCwgMC40NDI2Nl0sXG4gICAgXCIxMTZcIjogWzAsIDAuNjIxMTksIDAsIDAsIDAuMzMzMDFdLFxuICAgIFwiMTE3XCI6IFswLCAwLjQ3NTM0LCAwLCAwLCAwLjUxNzJdLFxuICAgIFwiMTE4XCI6IFswLCAwLjUyMzk2LCAwLCAwLCAwLjUxMThdLFxuICAgIFwiMTE5XCI6IFswLCAwLjUyMzk2LCAwLCAwLCAwLjc3MzUxXSxcbiAgICBcIjEyMFwiOiBbMC4xODkwNiwgMC40NzUzNCwgMCwgMCwgMC4zODg2NV0sXG4gICAgXCIxMjFcIjogWzAuMTg5MDYsIDAuNDc1MzQsIDAsIDAsIDAuNDk4ODRdLFxuICAgIFwiMTIyXCI6IFswLjE4OTA2LCAwLjQ3NTM0LCAwLCAwLCAwLjM5MDU0XSxcbiAgICBcIjgyMTZcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuMjE0NzFdLFxuICAgIFwiODIxN1wiOiBbMCwgMC42OTE0MSwgMCwgMCwgMC4yMTQ3MV0sXG4gICAgXCI1ODExMlwiOiBbMCwgMC42MjExOSwgMCwgMCwgMC40OTc0OV0sXG4gICAgXCI1ODExM1wiOiBbMCwgMC42MjExOSwgMCwgMCwgMC40OTgzXSxcbiAgICBcIjU4MTE0XCI6IFswLjE4OTA2LCAwLjY5MTQxLCAwLCAwLCAwLjMzMzI4XSxcbiAgICBcIjU4MTE1XCI6IFswLjE4OTA2LCAwLjY5MTQxLCAwLCAwLCAwLjMyOTIzXSxcbiAgICBcIjU4MTE2XCI6IFswLjE4OTA2LCAwLjQ3NTM0LCAwLCAwLCAwLjUwMzQzXSxcbiAgICBcIjU4MTE3XCI6IFswLCAwLjY5MTQxLCAwLCAwLCAwLjMzMzAxXSxcbiAgICBcIjU4MTE4XCI6IFswLCAwLjYyMTE5LCAwLCAwLCAwLjMzNDA5XSxcbiAgICBcIjU4MTE5XCI6IFswLCAwLjQ3NTM0LCAwLCAwLCAwLjUwMDczXVxuICB9LFxuICBcIk1haW4tQm9sZFwiOiB7XG4gICAgXCIzM1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC4zNV0sXG4gICAgXCIzNFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42MDI3OF0sXG4gICAgXCIzNVwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMC45NTgzM10sXG4gICAgXCIzNlwiOiBbMC4wNTU1NiwgMC43NSwgMCwgMCwgMC41NzVdLFxuICAgIFwiMzdcIjogWzAuMDU1NTYsIDAuNzUsIDAsIDAsIDAuOTU4MzNdLFxuICAgIFwiMzhcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiMzlcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuMzE5NDRdLFxuICAgIFwiNDBcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuNDQ3MjJdLFxuICAgIFwiNDFcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuNDQ3MjJdLFxuICAgIFwiNDJcIjogWzAsIDAuNzUsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjQzXCI6IFswLjEzMzMzLCAwLjYzMzMzLCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjQ0XCI6IFswLjE5NDQ0LCAwLjE1NTU2LCAwLCAwLCAwLjMxOTQ0XSxcbiAgICBcIjQ1XCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjM4MzMzXSxcbiAgICBcIjQ2XCI6IFswLCAwLjE1NTU2LCAwLCAwLCAwLjMxOTQ0XSxcbiAgICBcIjQ3XCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjU3NV0sXG4gICAgXCI0OFwiOiBbMCwgMC42NDQ0NCwgMCwgMCwgMC41NzVdLFxuICAgIFwiNDlcIjogWzAsIDAuNjQ0NDQsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjUwXCI6IFswLCAwLjY0NDQ0LCAwLCAwLCAwLjU3NV0sXG4gICAgXCI1MVwiOiBbMCwgMC42NDQ0NCwgMCwgMCwgMC41NzVdLFxuICAgIFwiNTJcIjogWzAsIDAuNjQ0NDQsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjUzXCI6IFswLCAwLjY0NDQ0LCAwLCAwLCAwLjU3NV0sXG4gICAgXCI1NFwiOiBbMCwgMC42NDQ0NCwgMCwgMCwgMC41NzVdLFxuICAgIFwiNTVcIjogWzAsIDAuNjQ0NDQsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjU2XCI6IFswLCAwLjY0NDQ0LCAwLCAwLCAwLjU3NV0sXG4gICAgXCI1N1wiOiBbMCwgMC42NDQ0NCwgMCwgMCwgMC41NzVdLFxuICAgIFwiNThcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuMzE5NDRdLFxuICAgIFwiNTlcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAsIDAsIDAuMzE5NDRdLFxuICAgIFwiNjBcIjogWzAuMDg1NTYsIDAuNTg1NTYsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiNjFcIjogWy0wLjEwODg5LCAwLjM5MTExLCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjYyXCI6IFswLjA4NTU2LCAwLjU4NTU2LCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjYzXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU0MzA1XSxcbiAgICBcIjY0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjY1XCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjg2OTQ0XSxcbiAgICBcIjY2XCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjgxODA1XSxcbiAgICBcIjY3XCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjgzMDU1XSxcbiAgICBcIjY4XCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjg4MTk0XSxcbiAgICBcIjY5XCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjc1NTU1XSxcbiAgICBcIjcwXCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjcyMzYxXSxcbiAgICBcIjcxXCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjkwNDE2XSxcbiAgICBcIjcyXCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjldLFxuICAgIFwiNzNcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuNDM2MTFdLFxuICAgIFwiNzRcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuNTk0NDRdLFxuICAgIFwiNzVcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuOTAxMzhdLFxuICAgIFwiNzZcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuNjkxNjZdLFxuICAgIFwiNzdcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDEuMDkxNjZdLFxuICAgIFwiNzhcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuOV0sXG4gICAgXCI3OVwiOiBbMCwgMC42ODYxMSwgMCwgMCwgMC44NjM4OF0sXG4gICAgXCI4MFwiOiBbMCwgMC42ODYxMSwgMCwgMCwgMC43ODYxMV0sXG4gICAgXCI4MVwiOiBbMC4xOTQ0NCwgMC42ODYxMSwgMCwgMCwgMC44NjM4OF0sXG4gICAgXCI4MlwiOiBbMCwgMC42ODYxMSwgMCwgMCwgMC44NjI1XSxcbiAgICBcIjgzXCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjYzODg5XSxcbiAgICBcIjg0XCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjhdLFxuICAgIFwiODVcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuODg0NzJdLFxuICAgIFwiODZcIjogWzAsIDAuNjg2MTEsIDAuMDE1OTcsIDAsIDAuODY5NDRdLFxuICAgIFwiODdcIjogWzAsIDAuNjg2MTEsIDAuMDE1OTcsIDAsIDEuMTg4ODhdLFxuICAgIFwiODhcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuODY5NDRdLFxuICAgIFwiODlcIjogWzAsIDAuNjg2MTEsIDAuMDI4NzUsIDAsIDAuODY5NDRdLFxuICAgIFwiOTBcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuNzAyNzddLFxuICAgIFwiOTFcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuMzE5NDRdLFxuICAgIFwiOTJcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjkzXCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjMxOTQ0XSxcbiAgICBcIjk0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU3NV0sXG4gICAgXCI5NVwiOiBbMC4zMSwgMC4xMzQ0NCwgMC4wMzE5NCwgMCwgMC41NzVdLFxuICAgIFwiOTdcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuNTU5MDJdLFxuICAgIFwiOThcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjM4ODldLFxuICAgIFwiOTlcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuNTExMTFdLFxuICAgIFwiMTAwXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjYzODg5XSxcbiAgICBcIjEwMVwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC41MjcwOF0sXG4gICAgXCIxMDJcIjogWzAsIDAuNjk0NDQsIDAuMTA5MDMsIDAsIDAuMzUxMzldLFxuICAgIFwiMTAzXCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLjAxNTk3LCAwLCAwLjU3NV0sXG4gICAgXCIxMDRcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjM4ODldLFxuICAgIFwiMTA1XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjMxOTQ0XSxcbiAgICBcIjEwNlwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMC4zNTEzOV0sXG4gICAgXCIxMDdcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjA2OTRdLFxuICAgIFwiMTA4XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjMxOTQ0XSxcbiAgICBcIjEwOVwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC45NTgzM10sXG4gICAgXCIxMTBcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuNjM4ODldLFxuICAgIFwiMTExXCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjU3NV0sXG4gICAgXCIxMTJcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAsIDAsIDAuNjM4ODldLFxuICAgIFwiMTEzXCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLCAwLCAwLjYwNjk0XSxcbiAgICBcIjExNFwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC40NzM2MV0sXG4gICAgXCIxMTVcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuNDUzNjFdLFxuICAgIFwiMTE2XCI6IFswLCAwLjYzNDkyLCAwLCAwLCAwLjQ0NzIyXSxcbiAgICBcIjExN1wiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC42Mzg4OV0sXG4gICAgXCIxMThcIjogWzAsIDAuNDQ0NDQsIDAuMDE1OTcsIDAsIDAuNjA2OTRdLFxuICAgIFwiMTE5XCI6IFswLCAwLjQ0NDQ0LCAwLjAxNTk3LCAwLCAwLjgzMDU1XSxcbiAgICBcIjEyMFwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC42MDY5NF0sXG4gICAgXCIxMjFcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAuMDE1OTcsIDAsIDAuNjA2OTRdLFxuICAgIFwiMTIyXCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjUxMTExXSxcbiAgICBcIjEyM1wiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC41NzVdLFxuICAgIFwiMTI0XCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjMxOTQ0XSxcbiAgICBcIjEyNVwiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC41NzVdLFxuICAgIFwiMTI2XCI6IFswLjM1LCAwLjM0NDQ0LCAwLCAwLCAwLjU3NV0sXG4gICAgXCIxNjhcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjE3MlwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC43NjY2Nl0sXG4gICAgXCIxNzZcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuODY5NDRdLFxuICAgIFwiMTc3XCI6IFswLjEzMzMzLCAwLjYzMzMzLCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjE4NFwiOiBbMC4xNzAxNCwgMCwgMCwgMCwgMC41MTExMV0sXG4gICAgXCIxOThcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDEuMDQxNjZdLFxuICAgIFwiMjE1XCI6IFswLjEzMzMzLCAwLjYzMzMzLCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjIxNlwiOiBbMC4wNDg2MSwgMC43MzQ3MiwgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCIyMjNcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTk3MjJdLFxuICAgIFwiMjMwXCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjgzMDU1XSxcbiAgICBcIjI0N1wiOiBbMC4xMzMzMywgMC42MzMzMywgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCIyNDhcIjogWzAuMDk3MjIsIDAuNTQxNjcsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjMwNVwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC4zMTk0NF0sXG4gICAgXCIzMzhcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDEuMTY5NDRdLFxuICAgIFwiMzM5XCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjU2N1wiOiBbMC4xOTQ0NCwgMC40NDQ0NCwgMCwgMCwgMC4zNTEzOV0sXG4gICAgXCI3MTBcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjcxMVwiOiBbMCwgMC42MzE5NCwgMCwgMCwgMC41NzVdLFxuICAgIFwiNzEzXCI6IFswLCAwLjU5NjExLCAwLCAwLCAwLjU3NV0sXG4gICAgXCI3MTRcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjcxNVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41NzVdLFxuICAgIFwiNzI4XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU3NV0sXG4gICAgXCI3MjlcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuMzE5NDRdLFxuICAgIFwiNzMwXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjg2OTQ0XSxcbiAgICBcIjczMlwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41NzVdLFxuICAgIFwiNzMzXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU3NV0sXG4gICAgXCI5MTVcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuNjkxNjZdLFxuICAgIFwiOTE2XCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjk1ODMzXSxcbiAgICBcIjkyMFwiOiBbMCwgMC42ODYxMSwgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCI5MjNcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuODA1NTVdLFxuICAgIFwiOTI2XCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjc2NjY2XSxcbiAgICBcIjkyOFwiOiBbMCwgMC42ODYxMSwgMCwgMCwgMC45XSxcbiAgICBcIjkzMVwiOiBbMCwgMC42ODYxMSwgMCwgMCwgMC44MzA1NV0sXG4gICAgXCI5MzNcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiOTM0XCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjgzMDU1XSxcbiAgICBcIjkzNlwiOiBbMCwgMC42ODYxMSwgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCI5MzdcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuODMwNTVdLFxuICAgIFwiODIxMVwiOiBbMCwgMC40NDQ0NCwgMC4wMzE5NCwgMCwgMC41NzVdLFxuICAgIFwiODIxMlwiOiBbMCwgMC40NDQ0NCwgMC4wMzE5NCwgMCwgMS4xNDk5OV0sXG4gICAgXCI4MjE2XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjMxOTQ0XSxcbiAgICBcIjgyMTdcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuMzE5NDRdLFxuICAgIFwiODIyMFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42MDI3OF0sXG4gICAgXCI4MjIxXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjYwMjc4XSxcbiAgICBcIjgyMjRcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDAuNTExMTFdLFxuICAgIFwiODIyNVwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMC41MTExMV0sXG4gICAgXCI4MjQyXCI6IFswLCAwLjU1NTU2LCAwLCAwLCAwLjM0NDQ0XSxcbiAgICBcIjg0MDdcIjogWzAsIDAuNzI0NDQsIDAuMTU0ODYsIDAsIDAuNTc1XSxcbiAgICBcIjg0NjNcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjY3NTldLFxuICAgIFwiODQ2NVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC44MzA1NV0sXG4gICAgXCI4NDY3XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjQ3MzYxXSxcbiAgICBcIjg0NzJcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAsIDAsIDAuNzQwMjddLFxuICAgIFwiODQ3NlwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC44MzA1NV0sXG4gICAgXCI4NTAxXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjcwMjc3XSxcbiAgICBcIjg1OTJcIjogWy0wLjEwODg5LCAwLjM5MTExLCAwLCAwLCAxLjE0OTk5XSxcbiAgICBcIjg1OTNcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjg1OTRcIjogWy0wLjEwODg5LCAwLjM5MTExLCAwLCAwLCAxLjE0OTk5XSxcbiAgICBcIjg1OTVcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjg1OTZcIjogWy0wLjEwODg5LCAwLjM5MTExLCAwLCAwLCAxLjE0OTk5XSxcbiAgICBcIjg1OTdcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjg1OThcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDEuMTQ5OTldLFxuICAgIFwiODU5OVwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMS4xNDk5OV0sXG4gICAgXCI4NjAwXCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAxLjE0OTk5XSxcbiAgICBcIjg2MDFcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDEuMTQ5OTldLFxuICAgIFwiODYzNlwiOiBbLTAuMTA4ODksIDAuMzkxMTEsIDAsIDAsIDEuMTQ5OTldLFxuICAgIFwiODYzN1wiOiBbLTAuMTA4ODksIDAuMzkxMTEsIDAsIDAsIDEuMTQ5OTldLFxuICAgIFwiODY0MFwiOiBbLTAuMTA4ODksIDAuMzkxMTEsIDAsIDAsIDEuMTQ5OTldLFxuICAgIFwiODY0MVwiOiBbLTAuMTA4ODksIDAuMzkxMTEsIDAsIDAsIDEuMTQ5OTldLFxuICAgIFwiODY1NlwiOiBbLTAuMTA4ODksIDAuMzkxMTEsIDAsIDAsIDEuMTQ5OTldLFxuICAgIFwiODY1N1wiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMC43MDI3N10sXG4gICAgXCI4NjU4XCI6IFstMC4xMDg4OSwgMC4zOTExMSwgMCwgMCwgMS4xNDk5OV0sXG4gICAgXCI4NjU5XCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAwLjcwMjc3XSxcbiAgICBcIjg2NjBcIjogWy0wLjEwODg5LCAwLjM5MTExLCAwLCAwLCAxLjE0OTk5XSxcbiAgICBcIjg2NjFcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuNzAyNzddLFxuICAgIFwiODcwNFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42Mzg4OV0sXG4gICAgXCI4NzA2XCI6IFswLCAwLjY5NDQ0LCAwLjA2Mzg5LCAwLCAwLjYyODQ3XSxcbiAgICBcIjg3MDdcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjM4ODldLFxuICAgIFwiODcwOVwiOiBbMC4wNTU1NiwgMC43NSwgMCwgMCwgMC41NzVdLFxuICAgIFwiODcxMVwiOiBbMCwgMC42ODYxMSwgMCwgMCwgMC45NTgzM10sXG4gICAgXCI4NzEyXCI6IFswLjA4NTU2LCAwLjU4NTU2LCAwLCAwLCAwLjc2NjY2XSxcbiAgICBcIjg3MTVcIjogWzAuMDg1NTYsIDAuNTg1NTYsIDAsIDAsIDAuNzY2NjZdLFxuICAgIFwiODcyMlwiOiBbMC4xMzMzMywgMC42MzMzMywgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCI4NzIzXCI6IFswLjEzMzMzLCAwLjYzMzMzLCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjg3MjVcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjg3MjZcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjg3MjdcIjogWy0wLjAyNzc4LCAwLjQ3MjIyLCAwLCAwLCAwLjU3NV0sXG4gICAgXCI4NzI4XCI6IFstMC4wMjYzOSwgMC40NzM2MSwgMCwgMCwgMC41NzVdLFxuICAgIFwiODcyOVwiOiBbLTAuMDI2MzksIDAuNDczNjEsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjg3MzBcIjogWzAuMTgsIDAuODIsIDAsIDAsIDAuOTU4MzNdLFxuICAgIFwiODczM1wiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCI4NzM0XCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAxLjE0OTk5XSxcbiAgICBcIjg3MzZcIjogWzAsIDAuNjkyMjQsIDAsIDAsIDAuNzIyMjJdLFxuICAgIFwiODczOVwiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC4zMTk0NF0sXG4gICAgXCI4NzQxXCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjU3NV0sXG4gICAgXCI4NzQzXCI6IFswLCAwLjU1NTU2LCAwLCAwLCAwLjc2NjY2XSxcbiAgICBcIjg3NDRcIjogWzAsIDAuNTU1NTYsIDAsIDAsIDAuNzY2NjZdLFxuICAgIFwiODc0NVwiOiBbMCwgMC41NTU1NiwgMCwgMCwgMC43NjY2Nl0sXG4gICAgXCI4NzQ2XCI6IFswLCAwLjU1NTU2LCAwLCAwLCAwLjc2NjY2XSxcbiAgICBcIjg3NDdcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAuMTI3NzgsIDAsIDAuNTY4NzVdLFxuICAgIFwiODc2NFwiOiBbLTAuMTA4ODksIDAuMzkxMTEsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiODc2OFwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMC4zMTk0NF0sXG4gICAgXCI4NzcxXCI6IFswLjAwMjIyLCAwLjUwMjIyLCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjg3NzZcIjogWzAuMDI0NDQsIDAuNTI0NDQsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiODc4MVwiOiBbMC4wMDIyMiwgMC41MDIyMiwgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCI4ODAxXCI6IFswLjAwMjIyLCAwLjUwMjIyLCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjg4MDRcIjogWzAuMTk2NjcsIDAuNjk2NjcsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiODgwNVwiOiBbMC4xOTY2NywgMC42OTY2NywgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCI4ODEwXCI6IFswLjA4NTU2LCAwLjU4NTU2LCAwLCAwLCAxLjE0OTk5XSxcbiAgICBcIjg4MTFcIjogWzAuMDg1NTYsIDAuNTg1NTYsIDAsIDAsIDEuMTQ5OTldLFxuICAgIFwiODgyNlwiOiBbMC4wODU1NiwgMC41ODU1NiwgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCI4ODI3XCI6IFswLjA4NTU2LCAwLjU4NTU2LCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjg4MzRcIjogWzAuMDg1NTYsIDAuNTg1NTYsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiODgzNVwiOiBbMC4wODU1NiwgMC41ODU1NiwgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCI4ODM4XCI6IFswLjE5NjY3LCAwLjY5NjY3LCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjg4MzlcIjogWzAuMTk2NjcsIDAuNjk2NjcsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiODg0NlwiOiBbMCwgMC41NTU1NiwgMCwgMCwgMC43NjY2Nl0sXG4gICAgXCI4ODQ5XCI6IFswLjE5NjY3LCAwLjY5NjY3LCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjg4NTBcIjogWzAuMTk2NjcsIDAuNjk2NjcsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiODg1MVwiOiBbMCwgMC41NTU1NiwgMCwgMCwgMC43NjY2Nl0sXG4gICAgXCI4ODUyXCI6IFswLCAwLjU1NTU2LCAwLCAwLCAwLjc2NjY2XSxcbiAgICBcIjg4NTNcIjogWzAuMTMzMzMsIDAuNjMzMzMsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiODg1NFwiOiBbMC4xMzMzMywgMC42MzMzMywgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCI4ODU1XCI6IFswLjEzMzMzLCAwLjYzMzMzLCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjg4NTZcIjogWzAuMTMzMzMsIDAuNjMzMzMsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiODg1N1wiOiBbMC4xMzMzMywgMC42MzMzMywgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCI4ODY2XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjcwMjc3XSxcbiAgICBcIjg4NjdcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNzAyNzddLFxuICAgIFwiODg2OFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCI4ODY5XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjg5MDBcIjogWy0wLjAyNjM5LCAwLjQ3MzYxLCAwLCAwLCAwLjU3NV0sXG4gICAgXCI4OTAxXCI6IFstMC4wMjYzOSwgMC40NzM2MSwgMCwgMCwgMC4zMTk0NF0sXG4gICAgXCI4OTAyXCI6IFstMC4wMjc3OCwgMC40NzIyMiwgMCwgMCwgMC41NzVdLFxuICAgIFwiODk2OFwiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC41MTExMV0sXG4gICAgXCI4OTY5XCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjUxMTExXSxcbiAgICBcIjg5NzBcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuNTExMTFdLFxuICAgIFwiODk3MVwiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC41MTExMV0sXG4gICAgXCI4OTk0XCI6IFstMC4xMzg4OSwgMC4zNjExMSwgMCwgMCwgMS4xNDk5OV0sXG4gICAgXCI4OTk1XCI6IFstMC4xMzg4OSwgMC4zNjExMSwgMCwgMCwgMS4xNDk5OV0sXG4gICAgXCI5NjUxXCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAxLjAyMjIyXSxcbiAgICBcIjk2NTdcIjogWy0wLjAyNzc4LCAwLjQ3MjIyLCAwLCAwLCAwLjU3NV0sXG4gICAgXCI5NjYxXCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAxLjAyMjIyXSxcbiAgICBcIjk2NjdcIjogWy0wLjAyNzc4LCAwLjQ3MjIyLCAwLCAwLCAwLjU3NV0sXG4gICAgXCI5NzExXCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAxLjE0OTk5XSxcbiAgICBcIjk4MjRcIjogWzAuMTI5NjMsIDAuNjk0NDQsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiOTgyNVwiOiBbMC4xMjk2MywgMC42OTQ0NCwgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCI5ODI2XCI6IFswLjEyOTYzLCAwLjY5NDQ0LCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjk4MjdcIjogWzAuMTI5NjMsIDAuNjk0NDQsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiOTgzN1wiOiBbMCwgMC43NSwgMCwgMCwgMC40NDcyMl0sXG4gICAgXCI5ODM4XCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAwLjQ0NzIyXSxcbiAgICBcIjk4MzlcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDAuNDQ3MjJdLFxuICAgIFwiMTAyMTZcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuNDQ3MjJdLFxuICAgIFwiMTAyMTdcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuNDQ3MjJdLFxuICAgIFwiMTA4MTVcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuOV0sXG4gICAgXCIxMDkyN1wiOiBbMC4xOTY2NywgMC42OTY2NywgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCIxMDkyOFwiOiBbMC4xOTY2NywgMC42OTY2NywgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCI1NzM3NlwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMF1cbiAgfSxcbiAgXCJNYWluLUJvbGRJdGFsaWNcIjoge1xuICAgIFwiMzNcIjogWzAsIDAuNjk0NDQsIDAuMTE0MTcsIDAsIDAuMzg2MTFdLFxuICAgIFwiMzRcIjogWzAsIDAuNjk0NDQsIDAuMDc5MzksIDAsIDAuNjIwNTVdLFxuICAgIFwiMzVcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAuMDY4MzMsIDAsIDAuOTQ0NDRdLFxuICAgIFwiMzdcIjogWzAuMDU1NTYsIDAuNzUsIDAuMTI4NjEsIDAsIDAuOTQ0NDRdLFxuICAgIFwiMzhcIjogWzAsIDAuNjk0NDQsIDAuMDg1MjgsIDAsIDAuODg1NTVdLFxuICAgIFwiMzlcIjogWzAsIDAuNjk0NDQsIDAuMTI5NDUsIDAsIDAuMzU1NTVdLFxuICAgIFwiNDBcIjogWzAuMjUsIDAuNzUsIDAuMTU4MDYsIDAsIDAuNDczMzNdLFxuICAgIFwiNDFcIjogWzAuMjUsIDAuNzUsIDAuMDMzMDYsIDAsIDAuNDczMzNdLFxuICAgIFwiNDJcIjogWzAsIDAuNzUsIDAuMTQzMzMsIDAsIDAuNTkxMTFdLFxuICAgIFwiNDNcIjogWzAuMTAzMzMsIDAuNjAzMzMsIDAuMDMzMDYsIDAsIDAuODg1NTVdLFxuICAgIFwiNDRcIjogWzAuMTk0NDQsIDAuMTQ3MjIsIDAsIDAsIDAuMzU1NTVdLFxuICAgIFwiNDVcIjogWzAsIDAuNDQ0NDQsIDAuMDI2MTEsIDAsIDAuNDE0NDRdLFxuICAgIFwiNDZcIjogWzAsIDAuMTQ3MjIsIDAsIDAsIDAuMzU1NTVdLFxuICAgIFwiNDdcIjogWzAuMjUsIDAuNzUsIDAuMTU4MDYsIDAsIDAuNTkxMTFdLFxuICAgIFwiNDhcIjogWzAsIDAuNjQ0NDQsIDAuMTMxNjcsIDAsIDAuNTkxMTFdLFxuICAgIFwiNDlcIjogWzAsIDAuNjQ0NDQsIDAuMTMxNjcsIDAsIDAuNTkxMTFdLFxuICAgIFwiNTBcIjogWzAsIDAuNjQ0NDQsIDAuMTMxNjcsIDAsIDAuNTkxMTFdLFxuICAgIFwiNTFcIjogWzAsIDAuNjQ0NDQsIDAuMTMxNjcsIDAsIDAuNTkxMTFdLFxuICAgIFwiNTJcIjogWzAuMTk0NDQsIDAuNjQ0NDQsIDAuMTMxNjcsIDAsIDAuNTkxMTFdLFxuICAgIFwiNTNcIjogWzAsIDAuNjQ0NDQsIDAuMTMxNjcsIDAsIDAuNTkxMTFdLFxuICAgIFwiNTRcIjogWzAsIDAuNjQ0NDQsIDAuMTMxNjcsIDAsIDAuNTkxMTFdLFxuICAgIFwiNTVcIjogWzAuMTk0NDQsIDAuNjQ0NDQsIDAuMTMxNjcsIDAsIDAuNTkxMTFdLFxuICAgIFwiNTZcIjogWzAsIDAuNjQ0NDQsIDAuMTMxNjcsIDAsIDAuNTkxMTFdLFxuICAgIFwiNTdcIjogWzAsIDAuNjQ0NDQsIDAuMTMxNjcsIDAsIDAuNTkxMTFdLFxuICAgIFwiNThcIjogWzAsIDAuNDQ0NDQsIDAuMDY2OTUsIDAsIDAuMzU1NTVdLFxuICAgIFwiNTlcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAuMDY2OTUsIDAsIDAuMzU1NTVdLFxuICAgIFwiNjFcIjogWy0wLjEwODg5LCAwLjM5MTExLCAwLjA2ODMzLCAwLCAwLjg4NTU1XSxcbiAgICBcIjYzXCI6IFswLCAwLjY5NDQ0LCAwLjExNDcyLCAwLCAwLjU5MTExXSxcbiAgICBcIjY0XCI6IFswLCAwLjY5NDQ0LCAwLjA5MjA4LCAwLCAwLjg4NTU1XSxcbiAgICBcIjY1XCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjg2NTU1XSxcbiAgICBcIjY2XCI6IFswLCAwLjY4NjExLCAwLjA5OTIsIDAsIDAuODE2NjZdLFxuICAgIFwiNjdcIjogWzAsIDAuNjg2MTEsIDAuMTQyMDgsIDAsIDAuODI2NjZdLFxuICAgIFwiNjhcIjogWzAsIDAuNjg2MTEsIDAuMDkwNjIsIDAsIDAuODc1NTVdLFxuICAgIFwiNjlcIjogWzAsIDAuNjg2MTEsIDAuMTE0MzEsIDAsIDAuNzU2NjZdLFxuICAgIFwiNzBcIjogWzAsIDAuNjg2MTEsIDAuMTI5MDMsIDAsIDAuNzI3MjJdLFxuICAgIFwiNzFcIjogWzAsIDAuNjg2MTEsIDAuMDczNDcsIDAsIDAuODk1MjddLFxuICAgIFwiNzJcIjogWzAsIDAuNjg2MTEsIDAuMTcyMDgsIDAsIDAuODk2MV0sXG4gICAgXCI3M1wiOiBbMCwgMC42ODYxMSwgMC4xNTY4MSwgMCwgMC40NzE2Nl0sXG4gICAgXCI3NFwiOiBbMCwgMC42ODYxMSwgMC4xNDUsIDAsIDAuNjEwNTVdLFxuICAgIFwiNzVcIjogWzAsIDAuNjg2MTEsIDAuMTQyMDgsIDAsIDAuODk0OTldLFxuICAgIFwiNzZcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuNjk3NzddLFxuICAgIFwiNzdcIjogWzAsIDAuNjg2MTEsIDAuMTcyMDgsIDAsIDEuMDcyNzddLFxuICAgIFwiNzhcIjogWzAsIDAuNjg2MTEsIDAuMTcyMDgsIDAsIDAuODk2MV0sXG4gICAgXCI3OVwiOiBbMCwgMC42ODYxMSwgMC4wOTA2MiwgMCwgMC44NTQ5OV0sXG4gICAgXCI4MFwiOiBbMCwgMC42ODYxMSwgMC4wOTkyLCAwLCAwLjc4NzIxXSxcbiAgICBcIjgxXCI6IFswLjE5NDQ0LCAwLjY4NjExLCAwLjA5MDYyLCAwLCAwLjg1NDk5XSxcbiAgICBcIjgyXCI6IFswLCAwLjY4NjExLCAwLjAyNTU5LCAwLCAwLjg1OTQ0XSxcbiAgICBcIjgzXCI6IFswLCAwLjY4NjExLCAwLjExMjY0LCAwLCAwLjY0OTk5XSxcbiAgICBcIjg0XCI6IFswLCAwLjY4NjExLCAwLjEyOTAzLCAwLCAwLjc5NjFdLFxuICAgIFwiODVcIjogWzAsIDAuNjg2MTEsIDAuMTcyMDgsIDAsIDAuODgwODNdLFxuICAgIFwiODZcIjogWzAsIDAuNjg2MTEsIDAuMTg2MjUsIDAsIDAuODY1NTVdLFxuICAgIFwiODdcIjogWzAsIDAuNjg2MTEsIDAuMTg2MjUsIDAsIDEuMTU5OTldLFxuICAgIFwiODhcIjogWzAsIDAuNjg2MTEsIDAuMTU2ODEsIDAsIDAuODY1NTVdLFxuICAgIFwiODlcIjogWzAsIDAuNjg2MTEsIDAuMTk4MDMsIDAsIDAuODY1NTVdLFxuICAgIFwiOTBcIjogWzAsIDAuNjg2MTEsIDAuMTQyMDgsIDAsIDAuNzA4ODhdLFxuICAgIFwiOTFcIjogWzAuMjUsIDAuNzUsIDAuMTg3NSwgMCwgMC4zNTYxMV0sXG4gICAgXCI5M1wiOiBbMC4yNSwgMC43NSwgMC4wOTk3MiwgMCwgMC4zNTYxMV0sXG4gICAgXCI5NFwiOiBbMCwgMC42OTQ0NCwgMC4wNjcwOSwgMCwgMC41OTExMV0sXG4gICAgXCI5NVwiOiBbMC4zMSwgMC4xMzQ0NCwgMC4wOTgxMSwgMCwgMC41OTExMV0sXG4gICAgXCI5N1wiOiBbMCwgMC40NDQ0NCwgMC4wOTQyNiwgMCwgMC41OTExMV0sXG4gICAgXCI5OFwiOiBbMCwgMC42OTQ0NCwgMC4wNzg2MSwgMCwgMC41MzIyMl0sXG4gICAgXCI5OVwiOiBbMCwgMC40NDQ0NCwgMC4wNTIyMiwgMCwgMC41MzIyMl0sXG4gICAgXCIxMDBcIjogWzAsIDAuNjk0NDQsIDAuMTA4NjEsIDAsIDAuNTkxMTFdLFxuICAgIFwiMTAxXCI6IFswLCAwLjQ0NDQ0LCAwLjA4NSwgMCwgMC41MzIyMl0sXG4gICAgXCIxMDJcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAuMjE3NzgsIDAsIDAuNF0sXG4gICAgXCIxMDNcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAuMTA1LCAwLCAwLjUzMjIyXSxcbiAgICBcIjEwNFwiOiBbMCwgMC42OTQ0NCwgMC4wOTQyNiwgMCwgMC41OTExMV0sXG4gICAgXCIxMDVcIjogWzAsIDAuNjkzMjYsIDAuMTEzODcsIDAsIDAuMzU1NTVdLFxuICAgIFwiMTA2XCI6IFswLjE5NDQ0LCAwLjY5MzI2LCAwLjE2NzIsIDAsIDAuMzU1NTVdLFxuICAgIFwiMTA3XCI6IFswLCAwLjY5NDQ0LCAwLjExMTExLCAwLCAwLjUzMjIyXSxcbiAgICBcIjEwOFwiOiBbMCwgMC42OTQ0NCwgMC4xMDg2MSwgMCwgMC4yOTY2Nl0sXG4gICAgXCIxMDlcIjogWzAsIDAuNDQ0NDQsIDAuMDk0MjYsIDAsIDAuOTQ0NDRdLFxuICAgIFwiMTEwXCI6IFswLCAwLjQ0NDQ0LCAwLjA5NDI2LCAwLCAwLjY0OTk5XSxcbiAgICBcIjExMVwiOiBbMCwgMC40NDQ0NCwgMC4wNzg2MSwgMCwgMC41OTExMV0sXG4gICAgXCIxMTJcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAuMDc4NjEsIDAsIDAuNTkxMTFdLFxuICAgIFwiMTEzXCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLjEwNSwgMCwgMC41MzIyMl0sXG4gICAgXCIxMTRcIjogWzAsIDAuNDQ0NDQsIDAuMTExMTEsIDAsIDAuNTAxNjddLFxuICAgIFwiMTE1XCI6IFswLCAwLjQ0NDQ0LCAwLjA4MTY3LCAwLCAwLjQ4Njk0XSxcbiAgICBcIjExNlwiOiBbMCwgMC42MzQ5MiwgMC4wOTYzOSwgMCwgMC4zODVdLFxuICAgIFwiMTE3XCI6IFswLCAwLjQ0NDQ0LCAwLjA5NDI2LCAwLCAwLjYyMDU1XSxcbiAgICBcIjExOFwiOiBbMCwgMC40NDQ0NCwgMC4xMTExMSwgMCwgMC41MzIyMl0sXG4gICAgXCIxMTlcIjogWzAsIDAuNDQ0NDQsIDAuMTExMTEsIDAsIDAuNzY3NzddLFxuICAgIFwiMTIwXCI6IFswLCAwLjQ0NDQ0LCAwLjEyNTgzLCAwLCAwLjU2MDU1XSxcbiAgICBcIjEyMVwiOiBbMC4xOTQ0NCwgMC40NDQ0NCwgMC4xMDUsIDAsIDAuNTYxNjZdLFxuICAgIFwiMTIyXCI6IFswLCAwLjQ0NDQ0LCAwLjEzODg5LCAwLCAwLjQ5MDU1XSxcbiAgICBcIjEyNlwiOiBbMC4zNSwgMC4zNDQ0NCwgMC4xMTQ3MiwgMCwgMC41OTExMV0sXG4gICAgXCIxNjNcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuODY4NTNdLFxuICAgIFwiMTY4XCI6IFswLCAwLjY5NDQ0LCAwLjExNDczLCAwLCAwLjU5MTExXSxcbiAgICBcIjE3NlwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC45NDg4OF0sXG4gICAgXCIxODRcIjogWzAuMTcwMTQsIDAsIDAsIDAsIDAuNTMyMjJdLFxuICAgIFwiMTk4XCI6IFswLCAwLjY4NjExLCAwLjExNDMxLCAwLCAxLjAyMjc3XSxcbiAgICBcIjIxNlwiOiBbMC4wNDg2MSwgMC43MzQ3MiwgMC4wOTA2MiwgMCwgMC44ODU1NV0sXG4gICAgXCIyMjNcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAuMDk3MzYsIDAsIDAuNjY1XSxcbiAgICBcIjIzMFwiOiBbMCwgMC40NDQ0NCwgMC4wODUsIDAsIDAuODI2NjZdLFxuICAgIFwiMjQ4XCI6IFswLjA5NzIyLCAwLjU0MTY3LCAwLjA5NDU4LCAwLCAwLjU5MTExXSxcbiAgICBcIjMwNVwiOiBbMCwgMC40NDQ0NCwgMC4wOTQyNiwgMCwgMC4zNTU1NV0sXG4gICAgXCIzMzhcIjogWzAsIDAuNjg2MTEsIDAuMTE0MzEsIDAsIDEuMTQwNTRdLFxuICAgIFwiMzM5XCI6IFswLCAwLjQ0NDQ0LCAwLjA4NSwgMCwgMC44MjY2Nl0sXG4gICAgXCI1NjdcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAuMDQ2MTEsIDAsIDAuMzg1XSxcbiAgICBcIjcxMFwiOiBbMCwgMC42OTQ0NCwgMC4wNjcwOSwgMCwgMC41OTExMV0sXG4gICAgXCI3MTFcIjogWzAsIDAuNjMxOTQsIDAuMDgyNzEsIDAsIDAuNTkxMTFdLFxuICAgIFwiNzEzXCI6IFswLCAwLjU5NDQ0LCAwLjEwNDQ0LCAwLCAwLjU5MTExXSxcbiAgICBcIjcxNFwiOiBbMCwgMC42OTQ0NCwgMC4wODUyOCwgMCwgMC41OTExMV0sXG4gICAgXCI3MTVcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTkxMTFdLFxuICAgIFwiNzI4XCI6IFswLCAwLjY5NDQ0LCAwLjEwMzMzLCAwLCAwLjU5MTExXSxcbiAgICBcIjcyOVwiOiBbMCwgMC42OTQ0NCwgMC4xMjk0NSwgMCwgMC4zNTU1NV0sXG4gICAgXCI3MzBcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuOTQ4ODhdLFxuICAgIFwiNzMyXCI6IFswLCAwLjY5NDQ0LCAwLjExNDcyLCAwLCAwLjU5MTExXSxcbiAgICBcIjczM1wiOiBbMCwgMC42OTQ0NCwgMC4xMTQ3MiwgMCwgMC41OTExMV0sXG4gICAgXCI5MTVcIjogWzAsIDAuNjg2MTEsIDAuMTI5MDMsIDAsIDAuNjk3NzddLFxuICAgIFwiOTE2XCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjk0NDQ0XSxcbiAgICBcIjkyMFwiOiBbMCwgMC42ODYxMSwgMC4wOTA2MiwgMCwgMC44ODU1NV0sXG4gICAgXCI5MjNcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuODA2NjZdLFxuICAgIFwiOTI2XCI6IFswLCAwLjY4NjExLCAwLjE1MDkyLCAwLCAwLjc2Nzc3XSxcbiAgICBcIjkyOFwiOiBbMCwgMC42ODYxMSwgMC4xNzIwOCwgMCwgMC44OTYxXSxcbiAgICBcIjkzMVwiOiBbMCwgMC42ODYxMSwgMC4xMTQzMSwgMCwgMC44MjY2Nl0sXG4gICAgXCI5MzNcIjogWzAsIDAuNjg2MTEsIDAuMTA3NzgsIDAsIDAuODg1NTVdLFxuICAgIFwiOTM0XCI6IFswLCAwLjY4NjExLCAwLjA1NjMyLCAwLCAwLjgyNjY2XSxcbiAgICBcIjkzNlwiOiBbMCwgMC42ODYxMSwgMC4xMDc3OCwgMCwgMC44ODU1NV0sXG4gICAgXCI5MzdcIjogWzAsIDAuNjg2MTEsIDAuMDk5MiwgMCwgMC44MjY2Nl0sXG4gICAgXCI4MjExXCI6IFswLCAwLjQ0NDQ0LCAwLjA5ODExLCAwLCAwLjU5MTExXSxcbiAgICBcIjgyMTJcIjogWzAsIDAuNDQ0NDQsIDAuMDk4MTEsIDAsIDEuMTgyMjFdLFxuICAgIFwiODIxNlwiOiBbMCwgMC42OTQ0NCwgMC4xMjk0NSwgMCwgMC4zNTU1NV0sXG4gICAgXCI4MjE3XCI6IFswLCAwLjY5NDQ0LCAwLjEyOTQ1LCAwLCAwLjM1NTU1XSxcbiAgICBcIjgyMjBcIjogWzAsIDAuNjk0NDQsIDAuMTY3NzIsIDAsIDAuNjIwNTVdLFxuICAgIFwiODIyMVwiOiBbMCwgMC42OTQ0NCwgMC4wNzkzOSwgMCwgMC42MjA1NV1cbiAgfSxcbiAgXCJNYWluLUl0YWxpY1wiOiB7XG4gICAgXCIzM1wiOiBbMCwgMC42OTQ0NCwgMC4xMjQxNywgMCwgMC4zMDY2N10sXG4gICAgXCIzNFwiOiBbMCwgMC42OTQ0NCwgMC4wNjk2MSwgMCwgMC41MTQ0NF0sXG4gICAgXCIzNVwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMC4wNjYxNiwgMCwgMC44MTc3N10sXG4gICAgXCIzN1wiOiBbMC4wNTU1NiwgMC43NSwgMC4xMzYzOSwgMCwgMC44MTc3N10sXG4gICAgXCIzOFwiOiBbMCwgMC42OTQ0NCwgMC4wOTY5NCwgMCwgMC43NjY2Nl0sXG4gICAgXCIzOVwiOiBbMCwgMC42OTQ0NCwgMC4xMjQxNywgMCwgMC4zMDY2N10sXG4gICAgXCI0MFwiOiBbMC4yNSwgMC43NSwgMC4xNjE5NCwgMCwgMC40MDg4OV0sXG4gICAgXCI0MVwiOiBbMC4yNSwgMC43NSwgMC4wMzY5NCwgMCwgMC40MDg4OV0sXG4gICAgXCI0MlwiOiBbMCwgMC43NSwgMC4xNDkxNywgMCwgMC41MTExMV0sXG4gICAgXCI0M1wiOiBbMC4wNTY2NywgMC41NjE2NywgMC4wMzY5NCwgMCwgMC43NjY2Nl0sXG4gICAgXCI0NFwiOiBbMC4xOTQ0NCwgMC4xMDU1NiwgMCwgMCwgMC4zMDY2N10sXG4gICAgXCI0NVwiOiBbMCwgMC40MzA1NiwgMC4wMjgyNiwgMCwgMC4zNTc3OF0sXG4gICAgXCI0NlwiOiBbMCwgMC4xMDU1NiwgMCwgMCwgMC4zMDY2N10sXG4gICAgXCI0N1wiOiBbMC4yNSwgMC43NSwgMC4xNjE5NCwgMCwgMC41MTExMV0sXG4gICAgXCI0OFwiOiBbMCwgMC42NDQ0NCwgMC4xMzU1NiwgMCwgMC41MTExMV0sXG4gICAgXCI0OVwiOiBbMCwgMC42NDQ0NCwgMC4xMzU1NiwgMCwgMC41MTExMV0sXG4gICAgXCI1MFwiOiBbMCwgMC42NDQ0NCwgMC4xMzU1NiwgMCwgMC41MTExMV0sXG4gICAgXCI1MVwiOiBbMCwgMC42NDQ0NCwgMC4xMzU1NiwgMCwgMC41MTExMV0sXG4gICAgXCI1MlwiOiBbMC4xOTQ0NCwgMC42NDQ0NCwgMC4xMzU1NiwgMCwgMC41MTExMV0sXG4gICAgXCI1M1wiOiBbMCwgMC42NDQ0NCwgMC4xMzU1NiwgMCwgMC41MTExMV0sXG4gICAgXCI1NFwiOiBbMCwgMC42NDQ0NCwgMC4xMzU1NiwgMCwgMC41MTExMV0sXG4gICAgXCI1NVwiOiBbMC4xOTQ0NCwgMC42NDQ0NCwgMC4xMzU1NiwgMCwgMC41MTExMV0sXG4gICAgXCI1NlwiOiBbMCwgMC42NDQ0NCwgMC4xMzU1NiwgMCwgMC41MTExMV0sXG4gICAgXCI1N1wiOiBbMCwgMC42NDQ0NCwgMC4xMzU1NiwgMCwgMC41MTExMV0sXG4gICAgXCI1OFwiOiBbMCwgMC40MzA1NiwgMC4wNTgyLCAwLCAwLjMwNjY3XSxcbiAgICBcIjU5XCI6IFswLjE5NDQ0LCAwLjQzMDU2LCAwLjA1ODIsIDAsIDAuMzA2NjddLFxuICAgIFwiNjFcIjogWy0wLjEzMzEzLCAwLjM2Njg3LCAwLjA2NjE2LCAwLCAwLjc2NjY2XSxcbiAgICBcIjYzXCI6IFswLCAwLjY5NDQ0LCAwLjEyMjUsIDAsIDAuNTExMTFdLFxuICAgIFwiNjRcIjogWzAsIDAuNjk0NDQsIDAuMDk1OTcsIDAsIDAuNzY2NjZdLFxuICAgIFwiNjVcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNzQzMzNdLFxuICAgIFwiNjZcIjogWzAsIDAuNjgzMzMsIDAuMTAyNTcsIDAsIDAuNzAzODldLFxuICAgIFwiNjdcIjogWzAsIDAuNjgzMzMsIDAuMTQ1MjgsIDAsIDAuNzE1NTVdLFxuICAgIFwiNjhcIjogWzAsIDAuNjgzMzMsIDAuMDk0MDMsIDAsIDAuNzU1XSxcbiAgICBcIjY5XCI6IFswLCAwLjY4MzMzLCAwLjEyMDI4LCAwLCAwLjY3ODMzXSxcbiAgICBcIjcwXCI6IFswLCAwLjY4MzMzLCAwLjEzMzA1LCAwLCAwLjY1Mjc3XSxcbiAgICBcIjcxXCI6IFswLCAwLjY4MzMzLCAwLjA4NzIyLCAwLCAwLjc3MzYxXSxcbiAgICBcIjcyXCI6IFswLCAwLjY4MzMzLCAwLjE2Mzg5LCAwLCAwLjc0MzMzXSxcbiAgICBcIjczXCI6IFswLCAwLjY4MzMzLCAwLjE1ODA2LCAwLCAwLjM4NTU1XSxcbiAgICBcIjc0XCI6IFswLCAwLjY4MzMzLCAwLjE0MDI4LCAwLCAwLjUyNV0sXG4gICAgXCI3NVwiOiBbMCwgMC42ODMzMywgMC4xNDUyOCwgMCwgMC43Njg4OF0sXG4gICAgXCI3NlwiOiBbMCwgMC42ODMzMywgMCwgMCwgMC42MjcyMl0sXG4gICAgXCI3N1wiOiBbMCwgMC42ODMzMywgMC4xNjM4OSwgMCwgMC44OTY2Nl0sXG4gICAgXCI3OFwiOiBbMCwgMC42ODMzMywgMC4xNjM4OSwgMCwgMC43NDMzM10sXG4gICAgXCI3OVwiOiBbMCwgMC42ODMzMywgMC4wOTQwMywgMCwgMC43NjY2Nl0sXG4gICAgXCI4MFwiOiBbMCwgMC42ODMzMywgMC4xMDI1NywgMCwgMC42NzgzM10sXG4gICAgXCI4MVwiOiBbMC4xOTQ0NCwgMC42ODMzMywgMC4wOTQwMywgMCwgMC43NjY2Nl0sXG4gICAgXCI4MlwiOiBbMCwgMC42ODMzMywgMC4wMzg2OCwgMCwgMC43Mjk0NF0sXG4gICAgXCI4M1wiOiBbMCwgMC42ODMzMywgMC4xMTk3MiwgMCwgMC41NjIyMl0sXG4gICAgXCI4NFwiOiBbMCwgMC42ODMzMywgMC4xMzMwNSwgMCwgMC43MTU1NV0sXG4gICAgXCI4NVwiOiBbMCwgMC42ODMzMywgMC4xNjM4OSwgMCwgMC43NDMzM10sXG4gICAgXCI4NlwiOiBbMCwgMC42ODMzMywgMC4xODM2MSwgMCwgMC43NDMzM10sXG4gICAgXCI4N1wiOiBbMCwgMC42ODMzMywgMC4xODM2MSwgMCwgMC45OTg4OF0sXG4gICAgXCI4OFwiOiBbMCwgMC42ODMzMywgMC4xNTgwNiwgMCwgMC43NDMzM10sXG4gICAgXCI4OVwiOiBbMCwgMC42ODMzMywgMC4xOTM4MywgMCwgMC43NDMzM10sXG4gICAgXCI5MFwiOiBbMCwgMC42ODMzMywgMC4xNDUyOCwgMCwgMC42MTMzM10sXG4gICAgXCI5MVwiOiBbMC4yNSwgMC43NSwgMC4xODc1LCAwLCAwLjMwNjY3XSxcbiAgICBcIjkzXCI6IFswLjI1LCAwLjc1LCAwLjEwNTI4LCAwLCAwLjMwNjY3XSxcbiAgICBcIjk0XCI6IFswLCAwLjY5NDQ0LCAwLjA2NjQ2LCAwLCAwLjUxMTExXSxcbiAgICBcIjk1XCI6IFswLjMxLCAwLjEyMDU2LCAwLjA5MjA4LCAwLCAwLjUxMTExXSxcbiAgICBcIjk3XCI6IFswLCAwLjQzMDU2LCAwLjA3NjcxLCAwLCAwLjUxMTExXSxcbiAgICBcIjk4XCI6IFswLCAwLjY5NDQ0LCAwLjA2MzEyLCAwLCAwLjQ2XSxcbiAgICBcIjk5XCI6IFswLCAwLjQzMDU2LCAwLjA1NjUzLCAwLCAwLjQ2XSxcbiAgICBcIjEwMFwiOiBbMCwgMC42OTQ0NCwgMC4xMDMzMywgMCwgMC41MTExMV0sXG4gICAgXCIxMDFcIjogWzAsIDAuNDMwNTYsIDAuMDc1MTQsIDAsIDAuNDZdLFxuICAgIFwiMTAyXCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLjIxMTk0LCAwLCAwLjMwNjY3XSxcbiAgICBcIjEwM1wiOiBbMC4xOTQ0NCwgMC40MzA1NiwgMC4wODg0NywgMCwgMC40Nl0sXG4gICAgXCIxMDRcIjogWzAsIDAuNjk0NDQsIDAuMDc2NzEsIDAsIDAuNTExMTFdLFxuICAgIFwiMTA1XCI6IFswLCAwLjY1NTM2LCAwLjEwMTksIDAsIDAuMzA2NjddLFxuICAgIFwiMTA2XCI6IFswLjE5NDQ0LCAwLjY1NTM2LCAwLjE0NDY3LCAwLCAwLjMwNjY3XSxcbiAgICBcIjEwN1wiOiBbMCwgMC42OTQ0NCwgMC4xMDc2NCwgMCwgMC40Nl0sXG4gICAgXCIxMDhcIjogWzAsIDAuNjk0NDQsIDAuMTAzMzMsIDAsIDAuMjU1NTVdLFxuICAgIFwiMTA5XCI6IFswLCAwLjQzMDU2LCAwLjA3NjcxLCAwLCAwLjgxNzc3XSxcbiAgICBcIjExMFwiOiBbMCwgMC40MzA1NiwgMC4wNzY3MSwgMCwgMC41NjIyMl0sXG4gICAgXCIxMTFcIjogWzAsIDAuNDMwNTYsIDAuMDYzMTIsIDAsIDAuNTExMTFdLFxuICAgIFwiMTEyXCI6IFswLjE5NDQ0LCAwLjQzMDU2LCAwLjA2MzEyLCAwLCAwLjUxMTExXSxcbiAgICBcIjExM1wiOiBbMC4xOTQ0NCwgMC40MzA1NiwgMC4wODg0NywgMCwgMC40Nl0sXG4gICAgXCIxMTRcIjogWzAsIDAuNDMwNTYsIDAuMTA3NjQsIDAsIDAuNDIxNjZdLFxuICAgIFwiMTE1XCI6IFswLCAwLjQzMDU2LCAwLjA4MjA4LCAwLCAwLjQwODg5XSxcbiAgICBcIjExNlwiOiBbMCwgMC42MTUwOCwgMC4wOTQ4NiwgMCwgMC4zMzIyMl0sXG4gICAgXCIxMTdcIjogWzAsIDAuNDMwNTYsIDAuMDc2NzEsIDAsIDAuNTM2NjZdLFxuICAgIFwiMTE4XCI6IFswLCAwLjQzMDU2LCAwLjEwNzY0LCAwLCAwLjQ2XSxcbiAgICBcIjExOVwiOiBbMCwgMC40MzA1NiwgMC4xMDc2NCwgMCwgMC42NjQ0NF0sXG4gICAgXCIxMjBcIjogWzAsIDAuNDMwNTYsIDAuMTIwNDIsIDAsIDAuNDYzODldLFxuICAgIFwiMTIxXCI6IFswLjE5NDQ0LCAwLjQzMDU2LCAwLjA4ODQ3LCAwLCAwLjQ4NTU1XSxcbiAgICBcIjEyMlwiOiBbMCwgMC40MzA1NiwgMC4xMjI5MiwgMCwgMC40MDg4OV0sXG4gICAgXCIxMjZcIjogWzAuMzUsIDAuMzE3ODYsIDAuMTE1ODUsIDAsIDAuNTExMTFdLFxuICAgIFwiMTYzXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjc2OTA5XSxcbiAgICBcIjE2OFwiOiBbMCwgMC42Njc4NiwgMC4xMDQ3NCwgMCwgMC41MTExMV0sXG4gICAgXCIxNzZcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuODMxMjldLFxuICAgIFwiMTg0XCI6IFswLjE3MDE0LCAwLCAwLCAwLCAwLjQ2XSxcbiAgICBcIjE5OFwiOiBbMCwgMC42ODMzMywgMC4xMjAyOCwgMCwgMC44ODI3N10sXG4gICAgXCIyMTZcIjogWzAuMDQ4NjEsIDAuNzMxOTQsIDAuMDk0MDMsIDAsIDAuNzY2NjZdLFxuICAgIFwiMjIzXCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLjEwNTE0LCAwLCAwLjUzNjY2XSxcbiAgICBcIjIzMFwiOiBbMCwgMC40MzA1NiwgMC4wNzUxNCwgMCwgMC43MTU1NV0sXG4gICAgXCIyNDhcIjogWzAuMDk3MjIsIDAuNTI3NzgsIDAuMDkxOTQsIDAsIDAuNTExMTFdLFxuICAgIFwiMzA1XCI6IFswLCAwLjQzMDU2LCAwLCAwLjAyNzc4LCAwLjMyMjQ2XSxcbiAgICBcIjMzOFwiOiBbMCwgMC42ODMzMywgMC4xMjAyOCwgMCwgMC45ODQ5OV0sXG4gICAgXCIzMzlcIjogWzAsIDAuNDMwNTYsIDAuMDc1MTQsIDAsIDAuNzE1NTVdLFxuICAgIFwiNTY3XCI6IFswLjE5NDQ0LCAwLjQzMDU2LCAwLCAwLjA4MzM0LCAwLjM4NDAzXSxcbiAgICBcIjcxMFwiOiBbMCwgMC42OTQ0NCwgMC4wNjY0NiwgMCwgMC41MTExMV0sXG4gICAgXCI3MTFcIjogWzAsIDAuNjI4NDcsIDAuMDgyOTUsIDAsIDAuNTExMTFdLFxuICAgIFwiNzEzXCI6IFswLCAwLjU2MTY3LCAwLjEwMzMzLCAwLCAwLjUxMTExXSxcbiAgICBcIjcxNFwiOiBbMCwgMC42OTQ0NCwgMC4wOTY5NCwgMCwgMC41MTExMV0sXG4gICAgXCI3MTVcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTExMTFdLFxuICAgIFwiNzI4XCI6IFswLCAwLjY5NDQ0LCAwLjEwODA2LCAwLCAwLjUxMTExXSxcbiAgICBcIjcyOVwiOiBbMCwgMC42Njc4NiwgMC4xMTc1MiwgMCwgMC4zMDY2N10sXG4gICAgXCI3MzBcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuODMxMjldLFxuICAgIFwiNzMyXCI6IFswLCAwLjY2Nzg2LCAwLjExNTg1LCAwLCAwLjUxMTExXSxcbiAgICBcIjczM1wiOiBbMCwgMC42OTQ0NCwgMC4xMjI1LCAwLCAwLjUxMTExXSxcbiAgICBcIjkxNVwiOiBbMCwgMC42ODMzMywgMC4xMzMwNSwgMCwgMC42MjcyMl0sXG4gICAgXCI5MTZcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuODE3NzddLFxuICAgIFwiOTIwXCI6IFswLCAwLjY4MzMzLCAwLjA5NDAzLCAwLCAwLjc2NjY2XSxcbiAgICBcIjkyM1wiOiBbMCwgMC42ODMzMywgMCwgMCwgMC42OTIyMl0sXG4gICAgXCI5MjZcIjogWzAsIDAuNjgzMzMsIDAuMTUyOTQsIDAsIDAuNjY0NDRdLFxuICAgIFwiOTI4XCI6IFswLCAwLjY4MzMzLCAwLjE2Mzg5LCAwLCAwLjc0MzMzXSxcbiAgICBcIjkzMVwiOiBbMCwgMC42ODMzMywgMC4xMjAyOCwgMCwgMC43MTU1NV0sXG4gICAgXCI5MzNcIjogWzAsIDAuNjgzMzMsIDAuMTExMTEsIDAsIDAuNzY2NjZdLFxuICAgIFwiOTM0XCI6IFswLCAwLjY4MzMzLCAwLjA1OTg2LCAwLCAwLjcxNTU1XSxcbiAgICBcIjkzNlwiOiBbMCwgMC42ODMzMywgMC4xMTExMSwgMCwgMC43NjY2Nl0sXG4gICAgXCI5MzdcIjogWzAsIDAuNjgzMzMsIDAuMTAyNTcsIDAsIDAuNzE1NTVdLFxuICAgIFwiODIxMVwiOiBbMCwgMC40MzA1NiwgMC4wOTIwOCwgMCwgMC41MTExMV0sXG4gICAgXCI4MjEyXCI6IFswLCAwLjQzMDU2LCAwLjA5MjA4LCAwLCAxLjAyMjIyXSxcbiAgICBcIjgyMTZcIjogWzAsIDAuNjk0NDQsIDAuMTI0MTcsIDAsIDAuMzA2NjddLFxuICAgIFwiODIxN1wiOiBbMCwgMC42OTQ0NCwgMC4xMjQxNywgMCwgMC4zMDY2N10sXG4gICAgXCI4MjIwXCI6IFswLCAwLjY5NDQ0LCAwLjE2ODUsIDAsIDAuNTE0NDRdLFxuICAgIFwiODIyMVwiOiBbMCwgMC42OTQ0NCwgMC4wNjk2MSwgMCwgMC41MTQ0NF0sXG4gICAgXCI4NDYzXCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjU0MDI4XVxuICB9LFxuICBcIk1haW4tUmVndWxhclwiOiB7XG4gICAgXCIzMlwiOiBbMCwgMCwgMCwgMCwgMC4yNV0sXG4gICAgXCIzM1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC4yNzc3OF0sXG4gICAgXCIzNFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41XSxcbiAgICBcIjM1XCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAwLjgzMzM0XSxcbiAgICBcIjM2XCI6IFswLjA1NTU2LCAwLjc1LCAwLCAwLCAwLjVdLFxuICAgIFwiMzdcIjogWzAuMDU1NTYsIDAuNzUsIDAsIDAsIDAuODMzMzRdLFxuICAgIFwiMzhcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiMzlcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuMjc3NzhdLFxuICAgIFwiNDBcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuMzg4ODldLFxuICAgIFwiNDFcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuMzg4ODldLFxuICAgIFwiNDJcIjogWzAsIDAuNzUsIDAsIDAsIDAuNV0sXG4gICAgXCI0M1wiOiBbMC4wODMzMywgMC41ODMzMywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI0NFwiOiBbMC4xOTQ0NCwgMC4xMDU1NiwgMCwgMCwgMC4yNzc3OF0sXG4gICAgXCI0NVwiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC4zMzMzM10sXG4gICAgXCI0NlwiOiBbMCwgMC4xMDU1NiwgMCwgMCwgMC4yNzc3OF0sXG4gICAgXCI0N1wiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC41XSxcbiAgICBcIjQ4XCI6IFswLCAwLjY0NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiNDlcIjogWzAsIDAuNjQ0NDQsIDAsIDAsIDAuNV0sXG4gICAgXCI1MFwiOiBbMCwgMC42NDQ0NCwgMCwgMCwgMC41XSxcbiAgICBcIjUxXCI6IFswLCAwLjY0NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiNTJcIjogWzAsIDAuNjQ0NDQsIDAsIDAsIDAuNV0sXG4gICAgXCI1M1wiOiBbMCwgMC42NDQ0NCwgMCwgMCwgMC41XSxcbiAgICBcIjU0XCI6IFswLCAwLjY0NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiNTVcIjogWzAsIDAuNjQ0NDQsIDAsIDAsIDAuNV0sXG4gICAgXCI1NlwiOiBbMCwgMC42NDQ0NCwgMCwgMCwgMC41XSxcbiAgICBcIjU3XCI6IFswLCAwLjY0NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiNThcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuMjc3NzhdLFxuICAgIFwiNTlcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAsIDAsIDAuMjc3NzhdLFxuICAgIFwiNjBcIjogWzAuMDM5MSwgMC41MzkxLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjYxXCI6IFstMC4xMzMxMywgMC4zNjY4NywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI2MlwiOiBbMC4wMzkxLCAwLjUzOTEsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiNjNcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNDcyMjJdLFxuICAgIFwiNjRcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiNjVcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNzVdLFxuICAgIFwiNjZcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNzA4MzRdLFxuICAgIFwiNjdcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNzIyMjJdLFxuICAgIFwiNjhcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNzYzODldLFxuICAgIFwiNjlcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNjgwNTZdLFxuICAgIFwiNzBcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNjUyNzhdLFxuICAgIFwiNzFcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNzg0NzJdLFxuICAgIFwiNzJcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNzVdLFxuICAgIFwiNzNcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuMzYxMTFdLFxuICAgIFwiNzRcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNTEzODldLFxuICAgIFwiNzVcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiNzZcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNjI1XSxcbiAgICBcIjc3XCI6IFswLCAwLjY4MzMzLCAwLCAwLCAwLjkxNjY3XSxcbiAgICBcIjc4XCI6IFswLCAwLjY4MzMzLCAwLCAwLCAwLjc1XSxcbiAgICBcIjc5XCI6IFswLCAwLjY4MzMzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjgwXCI6IFswLCAwLjY4MzMzLCAwLCAwLCAwLjY4MDU2XSxcbiAgICBcIjgxXCI6IFswLjE5NDQ0LCAwLjY4MzMzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjgyXCI6IFswLCAwLjY4MzMzLCAwLCAwLCAwLjczNjExXSxcbiAgICBcIjgzXCI6IFswLCAwLjY4MzMzLCAwLCAwLCAwLjU1NTU2XSxcbiAgICBcIjg0XCI6IFswLCAwLjY4MzMzLCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjg1XCI6IFswLCAwLjY4MzMzLCAwLCAwLCAwLjc1XSxcbiAgICBcIjg2XCI6IFswLCAwLjY4MzMzLCAwLjAxMzg5LCAwLCAwLjc1XSxcbiAgICBcIjg3XCI6IFswLCAwLjY4MzMzLCAwLjAxMzg5LCAwLCAxLjAyNzc4XSxcbiAgICBcIjg4XCI6IFswLCAwLjY4MzMzLCAwLCAwLCAwLjc1XSxcbiAgICBcIjg5XCI6IFswLCAwLjY4MzMzLCAwLjAyNSwgMCwgMC43NV0sXG4gICAgXCI5MFwiOiBbMCwgMC42ODMzMywgMCwgMCwgMC42MTExMV0sXG4gICAgXCI5MVwiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC4yNzc3OF0sXG4gICAgXCI5MlwiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC41XSxcbiAgICBcIjkzXCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjI3Nzc4XSxcbiAgICBcIjk0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiOTVcIjogWzAuMzEsIDAuMTIwNTYsIDAuMDI3NzgsIDAsIDAuNV0sXG4gICAgXCI5N1wiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC41XSxcbiAgICBcIjk4XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU1NTU2XSxcbiAgICBcIjk5XCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjQ0NDQ1XSxcbiAgICBcIjEwMFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41NTU1Nl0sXG4gICAgXCIxMDFcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuNDQ0NDVdLFxuICAgIFwiMTAyXCI6IFswLCAwLjY5NDQ0LCAwLjA3Nzc4LCAwLCAwLjMwNTU2XSxcbiAgICBcIjEwM1wiOiBbMC4xOTQ0NCwgMC40MzA1NiwgMC4wMTM4OSwgMCwgMC41XSxcbiAgICBcIjEwNFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41NTU1Nl0sXG4gICAgXCIxMDVcIjogWzAsIDAuNjY3ODYsIDAsIDAsIDAuMjc3NzhdLFxuICAgIFwiMTA2XCI6IFswLjE5NDQ0LCAwLjY2Nzg2LCAwLCAwLCAwLjMwNTU2XSxcbiAgICBcIjEwN1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41Mjc3OF0sXG4gICAgXCIxMDhcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuMjc3NzhdLFxuICAgIFwiMTA5XCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjgzMzM0XSxcbiAgICBcIjExMFwiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC41NTU1Nl0sXG4gICAgXCIxMTFcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuNV0sXG4gICAgXCIxMTJcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAsIDAsIDAuNTU1NTZdLFxuICAgIFwiMTEzXCI6IFswLjE5NDQ0LCAwLjQzMDU2LCAwLCAwLCAwLjUyNzc4XSxcbiAgICBcIjExNFwiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC4zOTE2N10sXG4gICAgXCIxMTVcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuMzk0NDVdLFxuICAgIFwiMTE2XCI6IFswLCAwLjYxNTA4LCAwLCAwLCAwLjM4ODg5XSxcbiAgICBcIjExN1wiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC41NTU1Nl0sXG4gICAgXCIxMThcIjogWzAsIDAuNDMwNTYsIDAuMDEzODksIDAsIDAuNTI3NzhdLFxuICAgIFwiMTE5XCI6IFswLCAwLjQzMDU2LCAwLjAxMzg5LCAwLCAwLjcyMjIyXSxcbiAgICBcIjEyMFwiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC41Mjc3OF0sXG4gICAgXCIxMjFcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAuMDEzODksIDAsIDAuNTI3NzhdLFxuICAgIFwiMTIyXCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjQ0NDQ1XSxcbiAgICBcIjEyM1wiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC41XSxcbiAgICBcIjEyNFwiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC4yNzc3OF0sXG4gICAgXCIxMjVcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuNV0sXG4gICAgXCIxMjZcIjogWzAuMzUsIDAuMzE3ODYsIDAsIDAsIDAuNV0sXG4gICAgXCIxNjBcIjogWzAsIDAsIDAsIDAsIDAuMjVdLFxuICAgIFwiMTY3XCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAwLjQ0NDQ1XSxcbiAgICBcIjE2OFwiOiBbMCwgMC42Njc4NiwgMCwgMCwgMC41XSxcbiAgICBcIjE3MlwiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC42NjY2N10sXG4gICAgXCIxNzZcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNzVdLFxuICAgIFwiMTc3XCI6IFswLjA4MzMzLCAwLjU4MzMzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjE4MlwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMC42MTExMV0sXG4gICAgXCIxODRcIjogWzAuMTcwMTQsIDAsIDAsIDAsIDAuNDQ0NDVdLFxuICAgIFwiMTk4XCI6IFswLCAwLjY4MzMzLCAwLCAwLCAwLjkwMjc4XSxcbiAgICBcIjIxNVwiOiBbMC4wODMzMywgMC41ODMzMywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCIyMTZcIjogWzAuMDQ4NjEsIDAuNzMxOTQsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiMjIzXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiMjMwXCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjI0N1wiOiBbMC4wODMzMywgMC41ODMzMywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCIyNDhcIjogWzAuMDk3MjIsIDAuNTI3NzgsIDAsIDAsIDAuNV0sXG4gICAgXCIzMDVcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuMjc3NzhdLFxuICAgIFwiMzM4XCI6IFswLCAwLjY4MzMzLCAwLCAwLCAxLjAxMzg5XSxcbiAgICBcIjMzOVwiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI1NjdcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAsIDAsIDAuMzA1NTZdLFxuICAgIFwiNzEwXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiNzExXCI6IFswLCAwLjYyODQ3LCAwLCAwLCAwLjVdLFxuICAgIFwiNzEzXCI6IFswLCAwLjU2Nzc4LCAwLCAwLCAwLjVdLFxuICAgIFwiNzE0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiNzE1XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiNzI4XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiNzI5XCI6IFswLCAwLjY2Nzg2LCAwLCAwLCAwLjI3Nzc4XSxcbiAgICBcIjczMFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43NV0sXG4gICAgXCI3MzJcIjogWzAsIDAuNjY3ODYsIDAsIDAsIDAuNV0sXG4gICAgXCI3MzNcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNV0sXG4gICAgXCI5MTVcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNjI1XSxcbiAgICBcIjkxNlwiOiBbMCwgMC42ODMzMywgMCwgMCwgMC44MzMzNF0sXG4gICAgXCI5MjBcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiOTIzXCI6IFswLCAwLjY4MzMzLCAwLCAwLCAwLjY5NDQ1XSxcbiAgICBcIjkyNlwiOiBbMCwgMC42ODMzMywgMCwgMCwgMC42NjY2N10sXG4gICAgXCI5MjhcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNzVdLFxuICAgIFwiOTMxXCI6IFswLCAwLjY4MzMzLCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjkzM1wiOiBbMCwgMC42ODMzMywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI5MzRcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNzIyMjJdLFxuICAgIFwiOTM2XCI6IFswLCAwLjY4MzMzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjkzN1wiOiBbMCwgMC42ODMzMywgMCwgMCwgMC43MjIyMl0sXG4gICAgXCI4MjExXCI6IFswLCAwLjQzMDU2LCAwLjAyNzc4LCAwLCAwLjVdLFxuICAgIFwiODIxMlwiOiBbMCwgMC40MzA1NiwgMC4wMjc3OCwgMCwgMS4wXSxcbiAgICBcIjgyMTZcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuMjc3NzhdLFxuICAgIFwiODIxN1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC4yNzc3OF0sXG4gICAgXCI4MjIwXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiODIyMVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41XSxcbiAgICBcIjgyMjRcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDAuNDQ0NDVdLFxuICAgIFwiODIyNVwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMC40NDQ0NV0sXG4gICAgXCI4MjMwXCI6IFswLCAwLjEyLCAwLCAwLCAxLjE3Ml0sXG4gICAgXCI4MjQyXCI6IFswLCAwLjU1NTU2LCAwLCAwLCAwLjI3NV0sXG4gICAgXCI4NDA3XCI6IFswLCAwLjcxNDQ0LCAwLjE1MzgyLCAwLCAwLjVdLFxuICAgIFwiODQ2M1wiOiBbMCwgMC42ODg4OSwgMCwgMCwgMC41NDAyOF0sXG4gICAgXCI4NDY1XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjg0NjdcIjogWzAsIDAuNjk0NDQsIDAsIDAuMTExMTEsIDAuNDE2NjddLFxuICAgIFwiODQ3MlwiOiBbMC4xOTQ0NCwgMC40MzA1NiwgMCwgMC4xMTExMSwgMC42MzY0Nl0sXG4gICAgXCI4NDc2XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjg1MDFcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjExMTFdLFxuICAgIFwiODU5MlwiOiBbLTAuMTMzMTMsIDAuMzY2ODcsIDAsIDAsIDEuMF0sXG4gICAgXCI4NTkzXCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiODU5NFwiOiBbLTAuMTMzMTMsIDAuMzY2ODcsIDAsIDAsIDEuMF0sXG4gICAgXCI4NTk1XCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiODU5NlwiOiBbLTAuMTMzMTMsIDAuMzY2ODcsIDAsIDAsIDEuMF0sXG4gICAgXCI4NTk3XCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjVdLFxuICAgIFwiODU5OFwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMS4wXSxcbiAgICBcIjg1OTlcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDEuMF0sXG4gICAgXCI4NjAwXCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAxLjBdLFxuICAgIFwiODYwMVwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMS4wXSxcbiAgICBcIjg2MTRcIjogWzAuMDExLCAwLjUxMSwgMCwgMCwgMS4wXSxcbiAgICBcIjg2MTdcIjogWzAuMDExLCAwLjUxMSwgMCwgMCwgMS4xMjZdLFxuICAgIFwiODYxOFwiOiBbMC4wMTEsIDAuNTExLCAwLCAwLCAxLjEyNl0sXG4gICAgXCI4NjM2XCI6IFstMC4xMzMxMywgMC4zNjY4NywgMCwgMCwgMS4wXSxcbiAgICBcIjg2MzdcIjogWy0wLjEzMzEzLCAwLjM2Njg3LCAwLCAwLCAxLjBdLFxuICAgIFwiODY0MFwiOiBbLTAuMTMzMTMsIDAuMzY2ODcsIDAsIDAsIDEuMF0sXG4gICAgXCI4NjQxXCI6IFstMC4xMzMxMywgMC4zNjY4NywgMCwgMCwgMS4wXSxcbiAgICBcIjg2NTJcIjogWzAuMDExLCAwLjY3MSwgMCwgMCwgMS4wXSxcbiAgICBcIjg2NTZcIjogWy0wLjEzMzEzLCAwLjM2Njg3LCAwLCAwLCAxLjBdLFxuICAgIFwiODY1N1wiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMC42MTExMV0sXG4gICAgXCI4NjU4XCI6IFstMC4xMzMxMywgMC4zNjY4NywgMCwgMCwgMS4wXSxcbiAgICBcIjg2NTlcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDAuNjExMTFdLFxuICAgIFwiODY2MFwiOiBbLTAuMTMzMTMsIDAuMzY2ODcsIDAsIDAsIDEuMF0sXG4gICAgXCI4NjYxXCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjYxMTExXSxcbiAgICBcIjg3MDRcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTU1NTZdLFxuICAgIFwiODcwNlwiOiBbMCwgMC42OTQ0NCwgMC4wNTU1NiwgMC4wODMzNCwgMC41MzA5XSxcbiAgICBcIjg3MDdcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTU1NTZdLFxuICAgIFwiODcwOVwiOiBbMC4wNTU1NiwgMC43NSwgMCwgMCwgMC41XSxcbiAgICBcIjg3MTFcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuODMzMzRdLFxuICAgIFwiODcxMlwiOiBbMC4wMzkxLCAwLjUzOTEsIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiODcxNVwiOiBbMC4wMzkxLCAwLjUzOTEsIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiODcyMlwiOiBbMC4wODMzMywgMC41ODMzMywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4NzIzXCI6IFswLjA4MzMzLCAwLjU4MzMzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg3MjVcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuNV0sXG4gICAgXCI4NzI2XCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjVdLFxuICAgIFwiODcyN1wiOiBbLTAuMDM0NzIsIDAuNDY1MjgsIDAsIDAsIDAuNV0sXG4gICAgXCI4NzI4XCI6IFstMC4wNTU1NSwgMC40NDQ0NSwgMCwgMCwgMC41XSxcbiAgICBcIjg3MjlcIjogWy0wLjA1NTU1LCAwLjQ0NDQ1LCAwLCAwLCAwLjVdLFxuICAgIFwiODczMFwiOiBbMC4yLCAwLjgsIDAsIDAsIDAuODMzMzRdLFxuICAgIFwiODczM1wiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4NzM0XCI6IFswLCAwLjQzMDU2LCAwLCAwLCAxLjBdLFxuICAgIFwiODczNlwiOiBbMCwgMC42OTIyNCwgMCwgMCwgMC43MjIyMl0sXG4gICAgXCI4NzM5XCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjI3Nzc4XSxcbiAgICBcIjg3NDFcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuNV0sXG4gICAgXCI4NzQzXCI6IFswLCAwLjU1NTU2LCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjg3NDRcIjogWzAsIDAuNTU1NTYsIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiODc0NVwiOiBbMCwgMC41NTU1NiwgMCwgMCwgMC42NjY2N10sXG4gICAgXCI4NzQ2XCI6IFswLCAwLjU1NTU2LCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjg3NDdcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAuMTExMTEsIDAsIDAuNDE2NjddLFxuICAgIFwiODc2NFwiOiBbLTAuMTMzMTMsIDAuMzY2ODcsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODc2OFwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMC4yNzc3OF0sXG4gICAgXCI4NzcxXCI6IFstMC4wMzYyNSwgMC40NjM3NSwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4NzczXCI6IFstMC4wMjIsIDAuNTg5LCAwLCAwLCAxLjBdLFxuICAgIFwiODc3NlwiOiBbLTAuMDE2ODgsIDAuNDgzMTIsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODc4MVwiOiBbLTAuMDM2MjUsIDAuNDYzNzUsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODc4NFwiOiBbLTAuMTMzLCAwLjY3LCAwLCAwLCAwLjc3OF0sXG4gICAgXCI4ODAxXCI6IFstMC4wMzYyNSwgMC40NjM3NSwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODA0XCI6IFswLjEzNTk3LCAwLjYzNTk3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4MDVcIjogWzAuMTM1OTcsIDAuNjM1OTcsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODgxMFwiOiBbMC4wMzkxLCAwLjUzOTEsIDAsIDAsIDEuMF0sXG4gICAgXCI4ODExXCI6IFswLjAzOTEsIDAuNTM5MSwgMCwgMCwgMS4wXSxcbiAgICBcIjg4MjZcIjogWzAuMDM5MSwgMC41MzkxLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4MjdcIjogWzAuMDM5MSwgMC41MzkxLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4MzRcIjogWzAuMDM5MSwgMC41MzkxLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4MzVcIjogWzAuMDM5MSwgMC41MzkxLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4MzhcIjogWzAuMTM1OTcsIDAuNjM1OTcsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODgzOVwiOiBbMC4xMzU5NywgMC42MzU5NywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODQ2XCI6IFswLCAwLjU1NTU2LCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjg4NDlcIjogWzAuMTM1OTcsIDAuNjM1OTcsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODg1MFwiOiBbMC4xMzU5NywgMC42MzU5NywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODUxXCI6IFswLCAwLjU1NTU2LCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjg4NTJcIjogWzAsIDAuNTU1NTYsIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiODg1M1wiOiBbMC4wODMzMywgMC41ODMzMywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODU0XCI6IFswLjA4MzMzLCAwLjU4MzMzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4NTVcIjogWzAuMDgzMzMsIDAuNTgzMzMsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODg1NlwiOiBbMC4wODMzMywgMC41ODMzMywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODU3XCI6IFswLjA4MzMzLCAwLjU4MzMzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4NjZcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjExMTFdLFxuICAgIFwiODg2N1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42MTExMV0sXG4gICAgXCI4ODY4XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4NjlcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODg3MlwiOiBbMC4yNDksIDAuNzUsIDAsIDAsIDAuODY3XSxcbiAgICBcIjg5MDBcIjogWy0wLjA1NTU1LCAwLjQ0NDQ1LCAwLCAwLCAwLjVdLFxuICAgIFwiODkwMVwiOiBbLTAuMDU1NTUsIDAuNDQ0NDUsIDAsIDAsIDAuMjc3NzhdLFxuICAgIFwiODkwMlwiOiBbLTAuMDM0NzIsIDAuNDY1MjgsIDAsIDAsIDAuNV0sXG4gICAgXCI4OTA0XCI6IFswLjAwNSwgMC41MDUsIDAsIDAsIDAuOV0sXG4gICAgXCI4OTQyXCI6IFswLjAzLCAwLjksIDAsIDAsIDAuMjc4XSxcbiAgICBcIjg5NDNcIjogWy0wLjE5LCAwLjMxLCAwLCAwLCAxLjE3Ml0sXG4gICAgXCI4OTQ1XCI6IFstMC4xLCAwLjgyLCAwLCAwLCAxLjI4Ml0sXG4gICAgXCI4OTY4XCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjQ0NDQ1XSxcbiAgICBcIjg5NjlcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuNDQ0NDVdLFxuICAgIFwiODk3MFwiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC40NDQ0NV0sXG4gICAgXCI4OTcxXCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjQ0NDQ1XSxcbiAgICBcIjg5OTRcIjogWy0wLjE0MjM2LCAwLjM1NzY0LCAwLCAwLCAxLjBdLFxuICAgIFwiODk5NVwiOiBbLTAuMTQyMzYsIDAuMzU3NjQsIDAsIDAsIDEuMF0sXG4gICAgXCI5MTM2XCI6IFswLjI0NCwgMC43NDQsIDAsIDAsIDAuNDEyXSxcbiAgICBcIjkxMzdcIjogWzAuMjQ0LCAwLjc0NCwgMCwgMCwgMC40MTJdLFxuICAgIFwiOTY1MVwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMC44ODg4OV0sXG4gICAgXCI5NjU3XCI6IFstMC4wMzQ3MiwgMC40NjUyOCwgMCwgMCwgMC41XSxcbiAgICBcIjk2NjFcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDAuODg4ODldLFxuICAgIFwiOTY2N1wiOiBbLTAuMDM0NzIsIDAuNDY1MjgsIDAsIDAsIDAuNV0sXG4gICAgXCI5NzExXCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAxLjBdLFxuICAgIFwiOTgyNFwiOiBbMC4xMjk2MywgMC42OTQ0NCwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI5ODI1XCI6IFswLjEyOTYzLCAwLjY5NDQ0LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjk4MjZcIjogWzAuMTI5NjMsIDAuNjk0NDQsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiOTgyN1wiOiBbMC4xMjk2MywgMC42OTQ0NCwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI5ODM3XCI6IFswLCAwLjc1LCAwLCAwLCAwLjM4ODg5XSxcbiAgICBcIjk4MzhcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDAuMzg4ODldLFxuICAgIFwiOTgzOVwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMC4zODg4OV0sXG4gICAgXCIxMDIxNlwiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC4zODg4OV0sXG4gICAgXCIxMDIxN1wiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC4zODg4OV0sXG4gICAgXCIxMDIyMlwiOiBbMC4yNDQsIDAuNzQ0LCAwLCAwLCAwLjQxMl0sXG4gICAgXCIxMDIyM1wiOiBbMC4yNDQsIDAuNzQ0LCAwLCAwLCAwLjQxMl0sXG4gICAgXCIxMDIyOVwiOiBbMC4wMTEsIDAuNTExLCAwLCAwLCAxLjYwOV0sXG4gICAgXCIxMDIzMFwiOiBbMC4wMTEsIDAuNTExLCAwLCAwLCAxLjYzOF0sXG4gICAgXCIxMDIzMVwiOiBbMC4wMTEsIDAuNTExLCAwLCAwLCAxLjg1OV0sXG4gICAgXCIxMDIzMlwiOiBbMC4wMjQsIDAuNTI1LCAwLCAwLCAxLjYwOV0sXG4gICAgXCIxMDIzM1wiOiBbMC4wMjQsIDAuNTI1LCAwLCAwLCAxLjYzOF0sXG4gICAgXCIxMDIzNFwiOiBbMC4wMjQsIDAuNTI1LCAwLCAwLCAxLjg1OF0sXG4gICAgXCIxMDIzNlwiOiBbMC4wMTEsIDAuNTExLCAwLCAwLCAxLjYzOF0sXG4gICAgXCIxMDgxNVwiOiBbMCwgMC42ODMzMywgMCwgMCwgMC43NV0sXG4gICAgXCIxMDkyN1wiOiBbMC4xMzU5NywgMC42MzU5NywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCIxMDkyOFwiOiBbMC4xMzU5NywgMC42MzU5NywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI1NzM3NlwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMF1cbiAgfSxcbiAgXCJNYXRoLUJvbGRJdGFsaWNcIjoge1xuICAgIFwiNjVcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuODY5NDRdLFxuICAgIFwiNjZcIjogWzAsIDAuNjg2MTEsIDAuMDQ4MzUsIDAsIDAuODY2NF0sXG4gICAgXCI2N1wiOiBbMCwgMC42ODYxMSwgMC4wNjk3OSwgMCwgMC44MTY5NF0sXG4gICAgXCI2OFwiOiBbMCwgMC42ODYxMSwgMC4wMzE5NCwgMCwgMC45MzgxMl0sXG4gICAgXCI2OVwiOiBbMCwgMC42ODYxMSwgMC4wNTQ1MSwgMCwgMC44MTAwN10sXG4gICAgXCI3MFwiOiBbMCwgMC42ODYxMSwgMC4xNTk3MiwgMCwgMC42ODg4OV0sXG4gICAgXCI3MVwiOiBbMCwgMC42ODYxMSwgMCwgMCwgMC44ODY3M10sXG4gICAgXCI3MlwiOiBbMCwgMC42ODYxMSwgMC4wODIyOSwgMCwgMC45ODIyOV0sXG4gICAgXCI3M1wiOiBbMCwgMC42ODYxMSwgMC4wNzc3OCwgMCwgMC41MTExMV0sXG4gICAgXCI3NFwiOiBbMCwgMC42ODYxMSwgMC4xMDA2OSwgMCwgMC42MzEyNV0sXG4gICAgXCI3NVwiOiBbMCwgMC42ODYxMSwgMC4wNjk3OSwgMCwgMC45NzExOF0sXG4gICAgXCI3NlwiOiBbMCwgMC42ODYxMSwgMCwgMCwgMC43NTU1NV0sXG4gICAgXCI3N1wiOiBbMCwgMC42ODYxMSwgMC4xMTQyNCwgMCwgMS4xNDIwMV0sXG4gICAgXCI3OFwiOiBbMCwgMC42ODYxMSwgMC4xMTQyNCwgMCwgMC45NTAzNF0sXG4gICAgXCI3OVwiOiBbMCwgMC42ODYxMSwgMC4wMzE5NCwgMCwgMC44MzY2Nl0sXG4gICAgXCI4MFwiOiBbMCwgMC42ODYxMSwgMC4xNTk3MiwgMCwgMC43MjMwOV0sXG4gICAgXCI4MVwiOiBbMC4xOTQ0NCwgMC42ODYxMSwgMCwgMCwgMC44Njg2MV0sXG4gICAgXCI4MlwiOiBbMCwgMC42ODYxMSwgMC4wMDQyMSwgMCwgMC44NzIzNV0sXG4gICAgXCI4M1wiOiBbMCwgMC42ODYxMSwgMC4wNTM4MiwgMCwgMC42OTI3MV0sXG4gICAgXCI4NFwiOiBbMCwgMC42ODYxMSwgMC4xNTk3MiwgMCwgMC42MzY2M10sXG4gICAgXCI4NVwiOiBbMCwgMC42ODYxMSwgMC4xMTQyNCwgMCwgMC44MDAyN10sXG4gICAgXCI4NlwiOiBbMCwgMC42ODYxMSwgMC4yNTU1NSwgMCwgMC42Nzc3OF0sXG4gICAgXCI4N1wiOiBbMCwgMC42ODYxMSwgMC4xNTk3MiwgMCwgMS4wOTMwNV0sXG4gICAgXCI4OFwiOiBbMCwgMC42ODYxMSwgMC4wNzc3OCwgMCwgMC45NDcyMl0sXG4gICAgXCI4OVwiOiBbMCwgMC42ODYxMSwgMC4yNTU1NSwgMCwgMC42NzQ1OF0sXG4gICAgXCI5MFwiOiBbMCwgMC42ODYxMSwgMC4wNjk3OSwgMCwgMC43NzI1N10sXG4gICAgXCI5N1wiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC42MzI4N10sXG4gICAgXCI5OFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41MjA4M10sXG4gICAgXCI5OVwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC41MTM0Ml0sXG4gICAgXCIxMDBcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjA5NzJdLFxuICAgIFwiMTAxXCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjU1MzYxXSxcbiAgICBcIjEwMlwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMC4xMTA0MiwgMCwgMC41NjgwNl0sXG4gICAgXCIxMDNcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAuMDM3MDQsIDAsIDAuNTQ0OV0sXG4gICAgXCIxMDRcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjY3NTldLFxuICAgIFwiMTA1XCI6IFswLCAwLjY5MzI2LCAwLCAwLCAwLjQwNDhdLFxuICAgIFwiMTA2XCI6IFswLjE5NDQ0LCAwLjY5MzI2LCAwLjA2MjIsIDAsIDAuNDcwODNdLFxuICAgIFwiMTA3XCI6IFswLCAwLjY5NDQ0LCAwLjAxODUyLCAwLCAwLjYwMzddLFxuICAgIFwiMTA4XCI6IFswLCAwLjY5NDQ0LCAwLjAwODgsIDAsIDAuMzQ4MTVdLFxuICAgIFwiMTA5XCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAxLjAzMjRdLFxuICAgIFwiMTEwXCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjcxMjk2XSxcbiAgICBcIjExMVwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC41ODQ3Ml0sXG4gICAgXCIxMTJcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAsIDAsIDAuNjAwOTJdLFxuICAgIFwiMTEzXCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLjAzNzA0LCAwLCAwLjU0MjEzXSxcbiAgICBcIjExNFwiOiBbMCwgMC40NDQ0NCwgMC4wMzE5NCwgMCwgMC41Mjg3XSxcbiAgICBcIjExNVwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC41MzEyNV0sXG4gICAgXCIxMTZcIjogWzAsIDAuNjM0OTIsIDAsIDAsIDAuNDE1MjhdLFxuICAgIFwiMTE3XCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjY4MTAyXSxcbiAgICBcIjExOFwiOiBbMCwgMC40NDQ0NCwgMC4wMzcwNCwgMCwgMC41NjY2Nl0sXG4gICAgXCIxMTlcIjogWzAsIDAuNDQ0NDQsIDAuMDI3NzgsIDAsIDAuODMxNDhdLFxuICAgIFwiMTIwXCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjY1OTAzXSxcbiAgICBcIjEyMVwiOiBbMC4xOTQ0NCwgMC40NDQ0NCwgMC4wMzcwNCwgMCwgMC41OTAyOF0sXG4gICAgXCIxMjJcIjogWzAsIDAuNDQ0NDQsIDAuMDQyMTMsIDAsIDAuNTU1MDldLFxuICAgIFwiOTE1XCI6IFswLCAwLjY4NjExLCAwLjE1OTcyLCAwLCAwLjY1Njk0XSxcbiAgICBcIjkxNlwiOiBbMCwgMC42ODYxMSwgMCwgMCwgMC45NTgzM10sXG4gICAgXCI5MjBcIjogWzAsIDAuNjg2MTEsIDAuMDMxOTQsIDAsIDAuODY3MjJdLFxuICAgIFwiOTIzXCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjgwNTU1XSxcbiAgICBcIjkyNlwiOiBbMCwgMC42ODYxMSwgMC4wNzQ1OCwgMCwgMC44NDEyNV0sXG4gICAgXCI5MjhcIjogWzAsIDAuNjg2MTEsIDAuMDgyMjksIDAsIDAuOTgyMjldLFxuICAgIFwiOTMxXCI6IFswLCAwLjY4NjExLCAwLjA1NDUxLCAwLCAwLjg4NTA3XSxcbiAgICBcIjkzM1wiOiBbMCwgMC42ODYxMSwgMC4xNTk3MiwgMCwgMC42NzA4M10sXG4gICAgXCI5MzRcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuNzY2NjZdLFxuICAgIFwiOTM2XCI6IFswLCAwLjY4NjExLCAwLjExNjUzLCAwLCAwLjcxNDAyXSxcbiAgICBcIjkzN1wiOiBbMCwgMC42ODYxMSwgMC4wNDgzNSwgMCwgMC44Nzg5XSxcbiAgICBcIjk0NVwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC43NjA2NF0sXG4gICAgXCI5NDZcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAuMDM0MDMsIDAsIDAuNjU5NzJdLFxuICAgIFwiOTQ3XCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLjA2Mzg5LCAwLCAwLjU5MDAzXSxcbiAgICBcIjk0OFwiOiBbMCwgMC42OTQ0NCwgMC4wMzgxOSwgMCwgMC41MjIyMl0sXG4gICAgXCI5NDlcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuNTI4ODJdLFxuICAgIFwiOTUwXCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLjA2MjE1LCAwLCAwLjUwODMzXSxcbiAgICBcIjk1MVwiOiBbMC4xOTQ0NCwgMC40NDQ0NCwgMC4wMzcwNCwgMCwgMC42XSxcbiAgICBcIjk1MlwiOiBbMCwgMC42OTQ0NCwgMC4wMzE5NCwgMCwgMC41NjE4XSxcbiAgICBcIjk1M1wiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC40MTIwNF0sXG4gICAgXCI5NTRcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuNjY3NTldLFxuICAgIFwiOTU1XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjY3MDgzXSxcbiAgICBcIjk1NlwiOiBbMC4xOTQ0NCwgMC40NDQ0NCwgMCwgMCwgMC43MDc4N10sXG4gICAgXCI5NTdcIjogWzAsIDAuNDQ0NDQsIDAuMDY4OTgsIDAsIDAuNTc2ODVdLFxuICAgIFwiOTU4XCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLjAzMDIxLCAwLCAwLjUwODMzXSxcbiAgICBcIjk1OVwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC41ODQ3Ml0sXG4gICAgXCI5NjBcIjogWzAsIDAuNDQ0NDQsIDAuMDM3MDQsIDAsIDAuNjgyNDFdLFxuICAgIFwiOTYxXCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLCAwLCAwLjYxMThdLFxuICAgIFwiOTYyXCI6IFswLjA5NzIyLCAwLjQ0NDQ0LCAwLjA3OTE3LCAwLCAwLjQyMzYxXSxcbiAgICBcIjk2M1wiOiBbMCwgMC40NDQ0NCwgMC4wMzcwNCwgMCwgMC42ODU4OF0sXG4gICAgXCI5NjRcIjogWzAsIDAuNDQ0NDQsIDAuMTM0NzIsIDAsIDAuNTIwODNdLFxuICAgIFwiOTY1XCI6IFswLCAwLjQ0NDQ0LCAwLjAzNzA0LCAwLCAwLjYzMDU1XSxcbiAgICBcIjk2NlwiOiBbMC4xOTQ0NCwgMC40NDQ0NCwgMCwgMCwgMC43NDcyMl0sXG4gICAgXCI5NjdcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAsIDAsIDAuNzE4MDVdLFxuICAgIFwiOTY4XCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLjAzNzA0LCAwLCAwLjc1ODMzXSxcbiAgICBcIjk2OVwiOiBbMCwgMC40NDQ0NCwgMC4wMzcwNCwgMCwgMC43MTc4Ml0sXG4gICAgXCI5NzdcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjkxNTVdLFxuICAgIFwiOTgxXCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAwLjcxMjVdLFxuICAgIFwiOTgyXCI6IFswLCAwLjQ0NDQ0LCAwLjAzMTk0LCAwLCAwLjk3NV0sXG4gICAgXCIxMDA5XCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLCAwLCAwLjYxMThdLFxuICAgIFwiMTAxM1wiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC40ODMzM11cbiAgfSxcbiAgXCJNYXRoLUl0YWxpY1wiOiB7XG4gICAgXCI2NVwiOiBbMCwgMC42ODMzMywgMCwgMC4xMzg4OSwgMC43NV0sXG4gICAgXCI2NlwiOiBbMCwgMC42ODMzMywgMC4wNTAxNywgMC4wODMzNCwgMC43NTg1MV0sXG4gICAgXCI2N1wiOiBbMCwgMC42ODMzMywgMC4wNzE1MywgMC4wODMzNCwgMC43MTQ3Ml0sXG4gICAgXCI2OFwiOiBbMCwgMC42ODMzMywgMC4wMjc3OCwgMC4wNTU1NiwgMC44Mjc5Ml0sXG4gICAgXCI2OVwiOiBbMCwgMC42ODMzMywgMC4wNTc2NCwgMC4wODMzNCwgMC43MzgyXSxcbiAgICBcIjcwXCI6IFswLCAwLjY4MzMzLCAwLjEzODg5LCAwLjA4MzM0LCAwLjY0MzA2XSxcbiAgICBcIjcxXCI6IFswLCAwLjY4MzMzLCAwLCAwLjA4MzM0LCAwLjc4NjI1XSxcbiAgICBcIjcyXCI6IFswLCAwLjY4MzMzLCAwLjA4MTI1LCAwLjA1NTU2LCAwLjgzMTI1XSxcbiAgICBcIjczXCI6IFswLCAwLjY4MzMzLCAwLjA3ODQ3LCAwLjExMTExLCAwLjQzOTU4XSxcbiAgICBcIjc0XCI6IFswLCAwLjY4MzMzLCAwLjA5NjE4LCAwLjE2NjY3LCAwLjU1NDUxXSxcbiAgICBcIjc1XCI6IFswLCAwLjY4MzMzLCAwLjA3MTUzLCAwLjA1NTU2LCAwLjg0OTMxXSxcbiAgICBcIjc2XCI6IFswLCAwLjY4MzMzLCAwLCAwLjAyNzc4LCAwLjY4MDU2XSxcbiAgICBcIjc3XCI6IFswLCAwLjY4MzMzLCAwLjEwOTAzLCAwLjA4MzM0LCAwLjk3MDE0XSxcbiAgICBcIjc4XCI6IFswLCAwLjY4MzMzLCAwLjEwOTAzLCAwLjA4MzM0LCAwLjgwMzQ3XSxcbiAgICBcIjc5XCI6IFswLCAwLjY4MzMzLCAwLjAyNzc4LCAwLjA4MzM0LCAwLjc2Mjc4XSxcbiAgICBcIjgwXCI6IFswLCAwLjY4MzMzLCAwLjEzODg5LCAwLjA4MzM0LCAwLjY0MjAxXSxcbiAgICBcIjgxXCI6IFswLjE5NDQ0LCAwLjY4MzMzLCAwLCAwLjA4MzM0LCAwLjc5MDU2XSxcbiAgICBcIjgyXCI6IFswLCAwLjY4MzMzLCAwLjAwNzczLCAwLjA4MzM0LCAwLjc1OTI5XSxcbiAgICBcIjgzXCI6IFswLCAwLjY4MzMzLCAwLjA1NzY0LCAwLjA4MzM0LCAwLjYxMzJdLFxuICAgIFwiODRcIjogWzAsIDAuNjgzMzMsIDAuMTM4ODksIDAuMDgzMzQsIDAuNTg0MzhdLFxuICAgIFwiODVcIjogWzAsIDAuNjgzMzMsIDAuMTA5MDMsIDAuMDI3NzgsIDAuNjgyNzhdLFxuICAgIFwiODZcIjogWzAsIDAuNjgzMzMsIDAuMjIyMjIsIDAsIDAuNTgzMzNdLFxuICAgIFwiODdcIjogWzAsIDAuNjgzMzMsIDAuMTM4ODksIDAsIDAuOTQ0NDVdLFxuICAgIFwiODhcIjogWzAsIDAuNjgzMzMsIDAuMDc4NDcsIDAuMDgzMzQsIDAuODI4NDddLFxuICAgIFwiODlcIjogWzAsIDAuNjgzMzMsIDAuMjIyMjIsIDAsIDAuNTgwNTZdLFxuICAgIFwiOTBcIjogWzAsIDAuNjgzMzMsIDAuMDcxNTMsIDAuMDgzMzQsIDAuNjgyNjRdLFxuICAgIFwiOTdcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuNTI4NTldLFxuICAgIFwiOThcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNDI5MTddLFxuICAgIFwiOTlcIjogWzAsIDAuNDMwNTYsIDAsIDAuMDU1NTYsIDAuNDMyNzZdLFxuICAgIFwiMTAwXCI6IFswLCAwLjY5NDQ0LCAwLCAwLjE2NjY3LCAwLjUyMDQ5XSxcbiAgICBcIjEwMVwiOiBbMCwgMC40MzA1NiwgMCwgMC4wNTU1NiwgMC40NjU2M10sXG4gICAgXCIxMDJcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAuMTA3NjQsIDAuMTY2NjcsIDAuNDg5NTldLFxuICAgIFwiMTAzXCI6IFswLjE5NDQ0LCAwLjQzMDU2LCAwLjAzNTg4LCAwLjAyNzc4LCAwLjQ3Njk3XSxcbiAgICBcIjEwNFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41NzYxNl0sXG4gICAgXCIxMDVcIjogWzAsIDAuNjU5NTIsIDAsIDAsIDAuMzQ0NTFdLFxuICAgIFwiMTA2XCI6IFswLjE5NDQ0LCAwLjY1OTUyLCAwLjA1NzI0LCAwLCAwLjQxMTgxXSxcbiAgICBcIjEwN1wiOiBbMCwgMC42OTQ0NCwgMC4wMzE0OCwgMCwgMC41MjA2XSxcbiAgICBcIjEwOFwiOiBbMCwgMC42OTQ0NCwgMC4wMTk2OCwgMC4wODMzNCwgMC4yOTgzOF0sXG4gICAgXCIxMDlcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuODc4MDFdLFxuICAgIFwiMTEwXCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjYwMDIzXSxcbiAgICBcIjExMVwiOiBbMCwgMC40MzA1NiwgMCwgMC4wNTU1NiwgMC40ODQ3Ml0sXG4gICAgXCIxMTJcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAsIDAuMDgzMzQsIDAuNTAzMTNdLFxuICAgIFwiMTEzXCI6IFswLjE5NDQ0LCAwLjQzMDU2LCAwLjAzNTg4LCAwLjA4MzM0LCAwLjQ0NjQxXSxcbiAgICBcIjExNFwiOiBbMCwgMC40MzA1NiwgMC4wMjc3OCwgMC4wNTU1NiwgMC40NTExNl0sXG4gICAgXCIxMTVcIjogWzAsIDAuNDMwNTYsIDAsIDAuMDU1NTYsIDAuNDY4NzVdLFxuICAgIFwiMTE2XCI6IFswLCAwLjYxNTA4LCAwLCAwLjA4MzM0LCAwLjM2MTExXSxcbiAgICBcIjExN1wiOiBbMCwgMC40MzA1NiwgMCwgMC4wMjc3OCwgMC41NzI0Nl0sXG4gICAgXCIxMThcIjogWzAsIDAuNDMwNTYsIDAuMDM1ODgsIDAuMDI3NzgsIDAuNDg0NzJdLFxuICAgIFwiMTE5XCI6IFswLCAwLjQzMDU2LCAwLjAyNjkxLCAwLjA4MzM0LCAwLjcxNTkyXSxcbiAgICBcIjEyMFwiOiBbMCwgMC40MzA1NiwgMCwgMC4wMjc3OCwgMC41NzE1M10sXG4gICAgXCIxMjFcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAuMDM1ODgsIDAuMDU1NTYsIDAuNDkwMjhdLFxuICAgIFwiMTIyXCI6IFswLCAwLjQzMDU2LCAwLjA0Mzk4LCAwLjA1NTU2LCAwLjQ2NTA1XSxcbiAgICBcIjkxNVwiOiBbMCwgMC42ODMzMywgMC4xMzg4OSwgMC4wODMzNCwgMC42MTUyOF0sXG4gICAgXCI5MTZcIjogWzAsIDAuNjgzMzMsIDAsIDAuMTY2NjcsIDAuODMzMzRdLFxuICAgIFwiOTIwXCI6IFswLCAwLjY4MzMzLCAwLjAyNzc4LCAwLjA4MzM0LCAwLjc2Mjc4XSxcbiAgICBcIjkyM1wiOiBbMCwgMC42ODMzMywgMCwgMC4xNjY2NywgMC42OTQ0NV0sXG4gICAgXCI5MjZcIjogWzAsIDAuNjgzMzMsIDAuMDc1NjksIDAuMDgzMzQsIDAuNzQyMzZdLFxuICAgIFwiOTI4XCI6IFswLCAwLjY4MzMzLCAwLjA4MTI1LCAwLjA1NTU2LCAwLjgzMTI1XSxcbiAgICBcIjkzMVwiOiBbMCwgMC42ODMzMywgMC4wNTc2NCwgMC4wODMzNCwgMC43Nzk4Nl0sXG4gICAgXCI5MzNcIjogWzAsIDAuNjgzMzMsIDAuMTM4ODksIDAuMDU1NTYsIDAuNTgzMzNdLFxuICAgIFwiOTM0XCI6IFswLCAwLjY4MzMzLCAwLCAwLjA4MzM0LCAwLjY2NjY3XSxcbiAgICBcIjkzNlwiOiBbMCwgMC42ODMzMywgMC4xMSwgMC4wNTU1NiwgMC42MTIyMl0sXG4gICAgXCI5MzdcIjogWzAsIDAuNjgzMzMsIDAuMDUwMTcsIDAuMDgzMzQsIDAuNzcyNF0sXG4gICAgXCI5NDVcIjogWzAsIDAuNDMwNTYsIDAuMDAzNywgMC4wMjc3OCwgMC42Mzk3XSxcbiAgICBcIjk0NlwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMC4wNTI3OCwgMC4wODMzNCwgMC41NjU2M10sXG4gICAgXCI5NDdcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAuMDU1NTYsIDAsIDAuNTE3NzNdLFxuICAgIFwiOTQ4XCI6IFswLCAwLjY5NDQ0LCAwLjAzNzg1LCAwLjA1NTU2LCAwLjQ0NDQ0XSxcbiAgICBcIjk0OVwiOiBbMCwgMC40MzA1NiwgMCwgMC4wODMzNCwgMC40NjYzMl0sXG4gICAgXCI5NTBcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAuMDczNzgsIDAuMDgzMzQsIDAuNDM3NV0sXG4gICAgXCI5NTFcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAuMDM1ODgsIDAuMDU1NTYsIDAuNDk2NTNdLFxuICAgIFwiOTUyXCI6IFswLCAwLjY5NDQ0LCAwLjAyNzc4LCAwLjA4MzM0LCAwLjQ2OTQ0XSxcbiAgICBcIjk1M1wiOiBbMCwgMC40MzA1NiwgMCwgMC4wNTU1NiwgMC4zNTM5NF0sXG4gICAgXCI5NTRcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuNTc2MTZdLFxuICAgIFwiOTU1XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU4MzM0XSxcbiAgICBcIjk1NlwiOiBbMC4xOTQ0NCwgMC40MzA1NiwgMCwgMC4wMjc3OCwgMC42MDI1NV0sXG4gICAgXCI5NTdcIjogWzAsIDAuNDMwNTYsIDAuMDYzNjYsIDAuMDI3NzgsIDAuNDkzOThdLFxuICAgIFwiOTU4XCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLjA0NjAxLCAwLjExMTExLCAwLjQzNzVdLFxuICAgIFwiOTU5XCI6IFswLCAwLjQzMDU2LCAwLCAwLjA1NTU2LCAwLjQ4NDcyXSxcbiAgICBcIjk2MFwiOiBbMCwgMC40MzA1NiwgMC4wMzU4OCwgMCwgMC41NzAwM10sXG4gICAgXCI5NjFcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAsIDAuMDgzMzQsIDAuNTE3MDJdLFxuICAgIFwiOTYyXCI6IFswLjA5NzIyLCAwLjQzMDU2LCAwLjA3OTg2LCAwLjA4MzM0LCAwLjM2Mjg1XSxcbiAgICBcIjk2M1wiOiBbMCwgMC40MzA1NiwgMC4wMzU4OCwgMCwgMC41NzE0MV0sXG4gICAgXCI5NjRcIjogWzAsIDAuNDMwNTYsIDAuMTEzMiwgMC4wMjc3OCwgMC40MzcxNV0sXG4gICAgXCI5NjVcIjogWzAsIDAuNDMwNTYsIDAuMDM1ODgsIDAuMDI3NzgsIDAuNTQwMjhdLFxuICAgIFwiOTY2XCI6IFswLjE5NDQ0LCAwLjQzMDU2LCAwLCAwLjA4MzM0LCAwLjY1NDE3XSxcbiAgICBcIjk2N1wiOiBbMC4xOTQ0NCwgMC40MzA1NiwgMCwgMC4wNTU1NiwgMC42MjU2OV0sXG4gICAgXCI5NjhcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAuMDM1ODgsIDAuMTExMTEsIDAuNjUxMzldLFxuICAgIFwiOTY5XCI6IFswLCAwLjQzMDU2LCAwLjAzNTg4LCAwLCAwLjYyMjQ1XSxcbiAgICBcIjk3N1wiOiBbMCwgMC42OTQ0NCwgMCwgMC4wODMzNCwgMC41OTE0NF0sXG4gICAgXCI5ODFcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAuMDgzMzQsIDAuNTk1ODNdLFxuICAgIFwiOTgyXCI6IFswLCAwLjQzMDU2LCAwLjAyNzc4LCAwLCAwLjgyODEzXSxcbiAgICBcIjEwMDlcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAsIDAuMDgzMzQsIDAuNTE3MDJdLFxuICAgIFwiMTAxM1wiOiBbMCwgMC40MzA1NiwgMCwgMC4wNTU1NiwgMC40MDU5XVxuICB9LFxuICBcIk1hdGgtUmVndWxhclwiOiB7XG4gICAgXCI2NVwiOiBbMCwgMC42ODMzMywgMCwgMC4xMzg4OSwgMC43NV0sXG4gICAgXCI2NlwiOiBbMCwgMC42ODMzMywgMC4wNTAxNywgMC4wODMzNCwgMC43NTg1MV0sXG4gICAgXCI2N1wiOiBbMCwgMC42ODMzMywgMC4wNzE1MywgMC4wODMzNCwgMC43MTQ3Ml0sXG4gICAgXCI2OFwiOiBbMCwgMC42ODMzMywgMC4wMjc3OCwgMC4wNTU1NiwgMC44Mjc5Ml0sXG4gICAgXCI2OVwiOiBbMCwgMC42ODMzMywgMC4wNTc2NCwgMC4wODMzNCwgMC43MzgyXSxcbiAgICBcIjcwXCI6IFswLCAwLjY4MzMzLCAwLjEzODg5LCAwLjA4MzM0LCAwLjY0MzA2XSxcbiAgICBcIjcxXCI6IFswLCAwLjY4MzMzLCAwLCAwLjA4MzM0LCAwLjc4NjI1XSxcbiAgICBcIjcyXCI6IFswLCAwLjY4MzMzLCAwLjA4MTI1LCAwLjA1NTU2LCAwLjgzMTI1XSxcbiAgICBcIjczXCI6IFswLCAwLjY4MzMzLCAwLjA3ODQ3LCAwLjExMTExLCAwLjQzOTU4XSxcbiAgICBcIjc0XCI6IFswLCAwLjY4MzMzLCAwLjA5NjE4LCAwLjE2NjY3LCAwLjU1NDUxXSxcbiAgICBcIjc1XCI6IFswLCAwLjY4MzMzLCAwLjA3MTUzLCAwLjA1NTU2LCAwLjg0OTMxXSxcbiAgICBcIjc2XCI6IFswLCAwLjY4MzMzLCAwLCAwLjAyNzc4LCAwLjY4MDU2XSxcbiAgICBcIjc3XCI6IFswLCAwLjY4MzMzLCAwLjEwOTAzLCAwLjA4MzM0LCAwLjk3MDE0XSxcbiAgICBcIjc4XCI6IFswLCAwLjY4MzMzLCAwLjEwOTAzLCAwLjA4MzM0LCAwLjgwMzQ3XSxcbiAgICBcIjc5XCI6IFswLCAwLjY4MzMzLCAwLjAyNzc4LCAwLjA4MzM0LCAwLjc2Mjc4XSxcbiAgICBcIjgwXCI6IFswLCAwLjY4MzMzLCAwLjEzODg5LCAwLjA4MzM0LCAwLjY0MjAxXSxcbiAgICBcIjgxXCI6IFswLjE5NDQ0LCAwLjY4MzMzLCAwLCAwLjA4MzM0LCAwLjc5MDU2XSxcbiAgICBcIjgyXCI6IFswLCAwLjY4MzMzLCAwLjAwNzczLCAwLjA4MzM0LCAwLjc1OTI5XSxcbiAgICBcIjgzXCI6IFswLCAwLjY4MzMzLCAwLjA1NzY0LCAwLjA4MzM0LCAwLjYxMzJdLFxuICAgIFwiODRcIjogWzAsIDAuNjgzMzMsIDAuMTM4ODksIDAuMDgzMzQsIDAuNTg0MzhdLFxuICAgIFwiODVcIjogWzAsIDAuNjgzMzMsIDAuMTA5MDMsIDAuMDI3NzgsIDAuNjgyNzhdLFxuICAgIFwiODZcIjogWzAsIDAuNjgzMzMsIDAuMjIyMjIsIDAsIDAuNTgzMzNdLFxuICAgIFwiODdcIjogWzAsIDAuNjgzMzMsIDAuMTM4ODksIDAsIDAuOTQ0NDVdLFxuICAgIFwiODhcIjogWzAsIDAuNjgzMzMsIDAuMDc4NDcsIDAuMDgzMzQsIDAuODI4NDddLFxuICAgIFwiODlcIjogWzAsIDAuNjgzMzMsIDAuMjIyMjIsIDAsIDAuNTgwNTZdLFxuICAgIFwiOTBcIjogWzAsIDAuNjgzMzMsIDAuMDcxNTMsIDAuMDgzMzQsIDAuNjgyNjRdLFxuICAgIFwiOTdcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuNTI4NTldLFxuICAgIFwiOThcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNDI5MTddLFxuICAgIFwiOTlcIjogWzAsIDAuNDMwNTYsIDAsIDAuMDU1NTYsIDAuNDMyNzZdLFxuICAgIFwiMTAwXCI6IFswLCAwLjY5NDQ0LCAwLCAwLjE2NjY3LCAwLjUyMDQ5XSxcbiAgICBcIjEwMVwiOiBbMCwgMC40MzA1NiwgMCwgMC4wNTU1NiwgMC40NjU2M10sXG4gICAgXCIxMDJcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAuMTA3NjQsIDAuMTY2NjcsIDAuNDg5NTldLFxuICAgIFwiMTAzXCI6IFswLjE5NDQ0LCAwLjQzMDU2LCAwLjAzNTg4LCAwLjAyNzc4LCAwLjQ3Njk3XSxcbiAgICBcIjEwNFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41NzYxNl0sXG4gICAgXCIxMDVcIjogWzAsIDAuNjU5NTIsIDAsIDAsIDAuMzQ0NTFdLFxuICAgIFwiMTA2XCI6IFswLjE5NDQ0LCAwLjY1OTUyLCAwLjA1NzI0LCAwLCAwLjQxMTgxXSxcbiAgICBcIjEwN1wiOiBbMCwgMC42OTQ0NCwgMC4wMzE0OCwgMCwgMC41MjA2XSxcbiAgICBcIjEwOFwiOiBbMCwgMC42OTQ0NCwgMC4wMTk2OCwgMC4wODMzNCwgMC4yOTgzOF0sXG4gICAgXCIxMDlcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuODc4MDFdLFxuICAgIFwiMTEwXCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjYwMDIzXSxcbiAgICBcIjExMVwiOiBbMCwgMC40MzA1NiwgMCwgMC4wNTU1NiwgMC40ODQ3Ml0sXG4gICAgXCIxMTJcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAsIDAuMDgzMzQsIDAuNTAzMTNdLFxuICAgIFwiMTEzXCI6IFswLjE5NDQ0LCAwLjQzMDU2LCAwLjAzNTg4LCAwLjA4MzM0LCAwLjQ0NjQxXSxcbiAgICBcIjExNFwiOiBbMCwgMC40MzA1NiwgMC4wMjc3OCwgMC4wNTU1NiwgMC40NTExNl0sXG4gICAgXCIxMTVcIjogWzAsIDAuNDMwNTYsIDAsIDAuMDU1NTYsIDAuNDY4NzVdLFxuICAgIFwiMTE2XCI6IFswLCAwLjYxNTA4LCAwLCAwLjA4MzM0LCAwLjM2MTExXSxcbiAgICBcIjExN1wiOiBbMCwgMC40MzA1NiwgMCwgMC4wMjc3OCwgMC41NzI0Nl0sXG4gICAgXCIxMThcIjogWzAsIDAuNDMwNTYsIDAuMDM1ODgsIDAuMDI3NzgsIDAuNDg0NzJdLFxuICAgIFwiMTE5XCI6IFswLCAwLjQzMDU2LCAwLjAyNjkxLCAwLjA4MzM0LCAwLjcxNTkyXSxcbiAgICBcIjEyMFwiOiBbMCwgMC40MzA1NiwgMCwgMC4wMjc3OCwgMC41NzE1M10sXG4gICAgXCIxMjFcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAuMDM1ODgsIDAuMDU1NTYsIDAuNDkwMjhdLFxuICAgIFwiMTIyXCI6IFswLCAwLjQzMDU2LCAwLjA0Mzk4LCAwLjA1NTU2LCAwLjQ2NTA1XSxcbiAgICBcIjkxNVwiOiBbMCwgMC42ODMzMywgMC4xMzg4OSwgMC4wODMzNCwgMC42MTUyOF0sXG4gICAgXCI5MTZcIjogWzAsIDAuNjgzMzMsIDAsIDAuMTY2NjcsIDAuODMzMzRdLFxuICAgIFwiOTIwXCI6IFswLCAwLjY4MzMzLCAwLjAyNzc4LCAwLjA4MzM0LCAwLjc2Mjc4XSxcbiAgICBcIjkyM1wiOiBbMCwgMC42ODMzMywgMCwgMC4xNjY2NywgMC42OTQ0NV0sXG4gICAgXCI5MjZcIjogWzAsIDAuNjgzMzMsIDAuMDc1NjksIDAuMDgzMzQsIDAuNzQyMzZdLFxuICAgIFwiOTI4XCI6IFswLCAwLjY4MzMzLCAwLjA4MTI1LCAwLjA1NTU2LCAwLjgzMTI1XSxcbiAgICBcIjkzMVwiOiBbMCwgMC42ODMzMywgMC4wNTc2NCwgMC4wODMzNCwgMC43Nzk4Nl0sXG4gICAgXCI5MzNcIjogWzAsIDAuNjgzMzMsIDAuMTM4ODksIDAuMDU1NTYsIDAuNTgzMzNdLFxuICAgIFwiOTM0XCI6IFswLCAwLjY4MzMzLCAwLCAwLjA4MzM0LCAwLjY2NjY3XSxcbiAgICBcIjkzNlwiOiBbMCwgMC42ODMzMywgMC4xMSwgMC4wNTU1NiwgMC42MTIyMl0sXG4gICAgXCI5MzdcIjogWzAsIDAuNjgzMzMsIDAuMDUwMTcsIDAuMDgzMzQsIDAuNzcyNF0sXG4gICAgXCI5NDVcIjogWzAsIDAuNDMwNTYsIDAuMDAzNywgMC4wMjc3OCwgMC42Mzk3XSxcbiAgICBcIjk0NlwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMC4wNTI3OCwgMC4wODMzNCwgMC41NjU2M10sXG4gICAgXCI5NDdcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAuMDU1NTYsIDAsIDAuNTE3NzNdLFxuICAgIFwiOTQ4XCI6IFswLCAwLjY5NDQ0LCAwLjAzNzg1LCAwLjA1NTU2LCAwLjQ0NDQ0XSxcbiAgICBcIjk0OVwiOiBbMCwgMC40MzA1NiwgMCwgMC4wODMzNCwgMC40NjYzMl0sXG4gICAgXCI5NTBcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAuMDczNzgsIDAuMDgzMzQsIDAuNDM3NV0sXG4gICAgXCI5NTFcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAuMDM1ODgsIDAuMDU1NTYsIDAuNDk2NTNdLFxuICAgIFwiOTUyXCI6IFswLCAwLjY5NDQ0LCAwLjAyNzc4LCAwLjA4MzM0LCAwLjQ2OTQ0XSxcbiAgICBcIjk1M1wiOiBbMCwgMC40MzA1NiwgMCwgMC4wNTU1NiwgMC4zNTM5NF0sXG4gICAgXCI5NTRcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuNTc2MTZdLFxuICAgIFwiOTU1XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU4MzM0XSxcbiAgICBcIjk1NlwiOiBbMC4xOTQ0NCwgMC40MzA1NiwgMCwgMC4wMjc3OCwgMC42MDI1NV0sXG4gICAgXCI5NTdcIjogWzAsIDAuNDMwNTYsIDAuMDYzNjYsIDAuMDI3NzgsIDAuNDkzOThdLFxuICAgIFwiOTU4XCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLjA0NjAxLCAwLjExMTExLCAwLjQzNzVdLFxuICAgIFwiOTU5XCI6IFswLCAwLjQzMDU2LCAwLCAwLjA1NTU2LCAwLjQ4NDcyXSxcbiAgICBcIjk2MFwiOiBbMCwgMC40MzA1NiwgMC4wMzU4OCwgMCwgMC41NzAwM10sXG4gICAgXCI5NjFcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAsIDAuMDgzMzQsIDAuNTE3MDJdLFxuICAgIFwiOTYyXCI6IFswLjA5NzIyLCAwLjQzMDU2LCAwLjA3OTg2LCAwLjA4MzM0LCAwLjM2Mjg1XSxcbiAgICBcIjk2M1wiOiBbMCwgMC40MzA1NiwgMC4wMzU4OCwgMCwgMC41NzE0MV0sXG4gICAgXCI5NjRcIjogWzAsIDAuNDMwNTYsIDAuMTEzMiwgMC4wMjc3OCwgMC40MzcxNV0sXG4gICAgXCI5NjVcIjogWzAsIDAuNDMwNTYsIDAuMDM1ODgsIDAuMDI3NzgsIDAuNTQwMjhdLFxuICAgIFwiOTY2XCI6IFswLjE5NDQ0LCAwLjQzMDU2LCAwLCAwLjA4MzM0LCAwLjY1NDE3XSxcbiAgICBcIjk2N1wiOiBbMC4xOTQ0NCwgMC40MzA1NiwgMCwgMC4wNTU1NiwgMC42MjU2OV0sXG4gICAgXCI5NjhcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAuMDM1ODgsIDAuMTExMTEsIDAuNjUxMzldLFxuICAgIFwiOTY5XCI6IFswLCAwLjQzMDU2LCAwLjAzNTg4LCAwLCAwLjYyMjQ1XSxcbiAgICBcIjk3N1wiOiBbMCwgMC42OTQ0NCwgMCwgMC4wODMzNCwgMC41OTE0NF0sXG4gICAgXCI5ODFcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAuMDgzMzQsIDAuNTk1ODNdLFxuICAgIFwiOTgyXCI6IFswLCAwLjQzMDU2LCAwLjAyNzc4LCAwLCAwLjgyODEzXSxcbiAgICBcIjEwMDlcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAsIDAuMDgzMzQsIDAuNTE3MDJdLFxuICAgIFwiMTAxM1wiOiBbMCwgMC40MzA1NiwgMCwgMC4wNTU1NiwgMC40MDU5XVxuICB9LFxuICBcIlNhbnNTZXJpZi1Cb2xkXCI6IHtcbiAgICBcIjMzXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjM2NjY3XSxcbiAgICBcIjM0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU1ODM0XSxcbiAgICBcIjM1XCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAwLjkxNjY3XSxcbiAgICBcIjM2XCI6IFswLjA1NTU2LCAwLjc1LCAwLCAwLCAwLjU1XSxcbiAgICBcIjM3XCI6IFswLjA1NTU2LCAwLjc1LCAwLCAwLCAxLjAyOTEyXSxcbiAgICBcIjM4XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjgzMDU2XSxcbiAgICBcIjM5XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjMwNTU2XSxcbiAgICBcIjQwXCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjQyNzc4XSxcbiAgICBcIjQxXCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjQyNzc4XSxcbiAgICBcIjQyXCI6IFswLCAwLjc1LCAwLCAwLCAwLjU1XSxcbiAgICBcIjQzXCI6IFswLjExNjY3LCAwLjYxNjY3LCAwLCAwLCAwLjg1NTU2XSxcbiAgICBcIjQ0XCI6IFswLjEwNTU2LCAwLjEzMDU2LCAwLCAwLCAwLjMwNTU2XSxcbiAgICBcIjQ1XCI6IFswLCAwLjQ1ODMzLCAwLCAwLCAwLjM2NjY3XSxcbiAgICBcIjQ2XCI6IFswLCAwLjEzMDU2LCAwLCAwLCAwLjMwNTU2XSxcbiAgICBcIjQ3XCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjU1XSxcbiAgICBcIjQ4XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU1XSxcbiAgICBcIjQ5XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU1XSxcbiAgICBcIjUwXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU1XSxcbiAgICBcIjUxXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU1XSxcbiAgICBcIjUyXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU1XSxcbiAgICBcIjUzXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU1XSxcbiAgICBcIjU0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU1XSxcbiAgICBcIjU1XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU1XSxcbiAgICBcIjU2XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU1XSxcbiAgICBcIjU3XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU1XSxcbiAgICBcIjU4XCI6IFswLCAwLjQ1ODMzLCAwLCAwLCAwLjMwNTU2XSxcbiAgICBcIjU5XCI6IFswLjEwNTU2LCAwLjQ1ODMzLCAwLCAwLCAwLjMwNTU2XSxcbiAgICBcIjYxXCI6IFstMC4wOTM3NSwgMC40MDYyNSwgMCwgMCwgMC44NTU1Nl0sXG4gICAgXCI2M1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41MTk0NV0sXG4gICAgXCI2NFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43MzMzNF0sXG4gICAgXCI2NVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43MzMzNF0sXG4gICAgXCI2NlwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43MzMzNF0sXG4gICAgXCI2N1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43MDI3OF0sXG4gICAgXCI2OFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43OTQ0NV0sXG4gICAgXCI2OVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42NDE2N10sXG4gICAgXCI3MFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42MTExMV0sXG4gICAgXCI3MVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43MzMzNF0sXG4gICAgXCI3MlwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43OTQ0NV0sXG4gICAgXCI3M1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC4zMzA1Nl0sXG4gICAgXCI3NFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41MTk0NV0sXG4gICAgXCI3NVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43NjM4OV0sXG4gICAgXCI3NlwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41ODA1Nl0sXG4gICAgXCI3N1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC45Nzc3OF0sXG4gICAgXCI3OFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43OTQ0NV0sXG4gICAgXCI3OVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43OTQ0NV0sXG4gICAgXCI4MFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43MDI3OF0sXG4gICAgXCI4MVwiOiBbMC4xMDU1NiwgMC42OTQ0NCwgMCwgMCwgMC43OTQ0NV0sXG4gICAgXCI4MlwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43MDI3OF0sXG4gICAgXCI4M1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42MTExMV0sXG4gICAgXCI4NFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43MzMzNF0sXG4gICAgXCI4NVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43NjM4OV0sXG4gICAgXCI4NlwiOiBbMCwgMC42OTQ0NCwgMC4wMTUyOCwgMCwgMC43MzMzNF0sXG4gICAgXCI4N1wiOiBbMCwgMC42OTQ0NCwgMC4wMTUyOCwgMCwgMS4wMzg4OV0sXG4gICAgXCI4OFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43MzMzNF0sXG4gICAgXCI4OVwiOiBbMCwgMC42OTQ0NCwgMC4wMjc1LCAwLCAwLjczMzM0XSxcbiAgICBcIjkwXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjY3MjIzXSxcbiAgICBcIjkxXCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjM0MzA2XSxcbiAgICBcIjkzXCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjM0MzA2XSxcbiAgICBcIjk0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU1XSxcbiAgICBcIjk1XCI6IFswLjM1LCAwLjEwODMzLCAwLjAzMDU2LCAwLCAwLjU1XSxcbiAgICBcIjk3XCI6IFswLCAwLjQ1ODMzLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI5OFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41NjExMV0sXG4gICAgXCI5OVwiOiBbMCwgMC40NTgzMywgMCwgMCwgMC40ODg4OV0sXG4gICAgXCIxMDBcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTYxMTFdLFxuICAgIFwiMTAxXCI6IFswLCAwLjQ1ODMzLCAwLCAwLCAwLjUxMTExXSxcbiAgICBcIjEwMlwiOiBbMCwgMC42OTQ0NCwgMC4wNzYzOSwgMCwgMC4zMzYxMV0sXG4gICAgXCIxMDNcIjogWzAuMTk0NDQsIDAuNDU4MzMsIDAuMDE1MjgsIDAsIDAuNTVdLFxuICAgIFwiMTA0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU2MTExXSxcbiAgICBcIjEwNVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC4yNTU1Nl0sXG4gICAgXCIxMDZcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDAuMjg2MTFdLFxuICAgIFwiMTA3XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjUzMDU2XSxcbiAgICBcIjEwOFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC4yNTU1Nl0sXG4gICAgXCIxMDlcIjogWzAsIDAuNDU4MzMsIDAsIDAsIDAuODY2NjddLFxuICAgIFwiMTEwXCI6IFswLCAwLjQ1ODMzLCAwLCAwLCAwLjU2MTExXSxcbiAgICBcIjExMVwiOiBbMCwgMC40NTgzMywgMCwgMCwgMC41NV0sXG4gICAgXCIxMTJcIjogWzAuMTk0NDQsIDAuNDU4MzMsIDAsIDAsIDAuNTYxMTFdLFxuICAgIFwiMTEzXCI6IFswLjE5NDQ0LCAwLjQ1ODMzLCAwLCAwLCAwLjU2MTExXSxcbiAgICBcIjExNFwiOiBbMCwgMC40NTgzMywgMC4wMTUyOCwgMCwgMC4zNzIyMl0sXG4gICAgXCIxMTVcIjogWzAsIDAuNDU4MzMsIDAsIDAsIDAuNDIxNjddLFxuICAgIFwiMTE2XCI6IFswLCAwLjU4OTI5LCAwLCAwLCAwLjQwNDE3XSxcbiAgICBcIjExN1wiOiBbMCwgMC40NTgzMywgMCwgMCwgMC41NjExMV0sXG4gICAgXCIxMThcIjogWzAsIDAuNDU4MzMsIDAuMDE1MjgsIDAsIDAuNV0sXG4gICAgXCIxMTlcIjogWzAsIDAuNDU4MzMsIDAuMDE1MjgsIDAsIDAuNzQ0NDVdLFxuICAgIFwiMTIwXCI6IFswLCAwLjQ1ODMzLCAwLCAwLCAwLjVdLFxuICAgIFwiMTIxXCI6IFswLjE5NDQ0LCAwLjQ1ODMzLCAwLjAxNTI4LCAwLCAwLjVdLFxuICAgIFwiMTIyXCI6IFswLCAwLjQ1ODMzLCAwLCAwLCAwLjQ3NjM5XSxcbiAgICBcIjEyNlwiOiBbMC4zNSwgMC4zNDQ0NCwgMCwgMCwgMC41NV0sXG4gICAgXCIxNjhcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTVdLFxuICAgIFwiMTc2XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjczMzM0XSxcbiAgICBcIjE4MFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41NV0sXG4gICAgXCIxODRcIjogWzAuMTcwMTQsIDAsIDAsIDAsIDAuNDg4ODldLFxuICAgIFwiMzA1XCI6IFswLCAwLjQ1ODMzLCAwLCAwLCAwLjI1NTU2XSxcbiAgICBcIjU2N1wiOiBbMC4xOTQ0NCwgMC40NTgzMywgMCwgMCwgMC4yODYxMV0sXG4gICAgXCI3MTBcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTVdLFxuICAgIFwiNzExXCI6IFswLCAwLjYzNTQyLCAwLCAwLCAwLjU1XSxcbiAgICBcIjcxM1wiOiBbMCwgMC42Mzc3OCwgMCwgMCwgMC41NV0sXG4gICAgXCI3MjhcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTVdLFxuICAgIFwiNzI5XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjMwNTU2XSxcbiAgICBcIjczMFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43MzMzNF0sXG4gICAgXCI3MzJcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTVdLFxuICAgIFwiNzMzXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU1XSxcbiAgICBcIjkxNVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41ODA1Nl0sXG4gICAgXCI5MTZcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuOTE2NjddLFxuICAgIFwiOTIwXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjg1NTU2XSxcbiAgICBcIjkyM1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42NzIyM10sXG4gICAgXCI5MjZcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNzMzMzRdLFxuICAgIFwiOTI4XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjc5NDQ1XSxcbiAgICBcIjkzMVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43OTQ0NV0sXG4gICAgXCI5MzNcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuODU1NTZdLFxuICAgIFwiOTM0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjc5NDQ1XSxcbiAgICBcIjkzNlwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC44NTU1Nl0sXG4gICAgXCI5MzdcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNzk0NDVdLFxuICAgIFwiODIxMVwiOiBbMCwgMC40NTgzMywgMC4wMzA1NiwgMCwgMC41NV0sXG4gICAgXCI4MjEyXCI6IFswLCAwLjQ1ODMzLCAwLjAzMDU2LCAwLCAxLjEwMDAxXSxcbiAgICBcIjgyMTZcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuMzA1NTZdLFxuICAgIFwiODIxN1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC4zMDU1Nl0sXG4gICAgXCI4MjIwXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU1ODM0XSxcbiAgICBcIjgyMjFcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTU4MzRdXG4gIH0sXG4gIFwiU2Fuc1NlcmlmLUl0YWxpY1wiOiB7XG4gICAgXCIzM1wiOiBbMCwgMC42OTQ0NCwgMC4wNTczMywgMCwgMC4zMTk0NV0sXG4gICAgXCIzNFwiOiBbMCwgMC42OTQ0NCwgMC4wMDMxNiwgMCwgMC41XSxcbiAgICBcIjM1XCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLjA1MDg3LCAwLCAwLjgzMzM0XSxcbiAgICBcIjM2XCI6IFswLjA1NTU2LCAwLjc1LCAwLjExMTU2LCAwLCAwLjVdLFxuICAgIFwiMzdcIjogWzAuMDU1NTYsIDAuNzUsIDAuMDMxMjYsIDAsIDAuODMzMzRdLFxuICAgIFwiMzhcIjogWzAsIDAuNjk0NDQsIDAuMDMwNTgsIDAsIDAuNzU4MzRdLFxuICAgIFwiMzlcIjogWzAsIDAuNjk0NDQsIDAuMDc4MTYsIDAsIDAuMjc3NzhdLFxuICAgIFwiNDBcIjogWzAuMjUsIDAuNzUsIDAuMTMxNjQsIDAsIDAuMzg4ODldLFxuICAgIFwiNDFcIjogWzAuMjUsIDAuNzUsIDAuMDI1MzYsIDAsIDAuMzg4ODldLFxuICAgIFwiNDJcIjogWzAsIDAuNzUsIDAuMTE3NzUsIDAsIDAuNV0sXG4gICAgXCI0M1wiOiBbMC4wODMzMywgMC41ODMzMywgMC4wMjUzNiwgMCwgMC43Nzc3OF0sXG4gICAgXCI0NFwiOiBbMC4xMjUsIDAuMDgzMzMsIDAsIDAsIDAuMjc3NzhdLFxuICAgIFwiNDVcIjogWzAsIDAuNDQ0NDQsIDAuMDE5NDYsIDAsIDAuMzMzMzNdLFxuICAgIFwiNDZcIjogWzAsIDAuMDgzMzMsIDAsIDAsIDAuMjc3NzhdLFxuICAgIFwiNDdcIjogWzAuMjUsIDAuNzUsIDAuMTMxNjQsIDAsIDAuNV0sXG4gICAgXCI0OFwiOiBbMCwgMC42NTU1NiwgMC4xMTE1NiwgMCwgMC41XSxcbiAgICBcIjQ5XCI6IFswLCAwLjY1NTU2LCAwLjExMTU2LCAwLCAwLjVdLFxuICAgIFwiNTBcIjogWzAsIDAuNjU1NTYsIDAuMTExNTYsIDAsIDAuNV0sXG4gICAgXCI1MVwiOiBbMCwgMC42NTU1NiwgMC4xMTE1NiwgMCwgMC41XSxcbiAgICBcIjUyXCI6IFswLCAwLjY1NTU2LCAwLjExMTU2LCAwLCAwLjVdLFxuICAgIFwiNTNcIjogWzAsIDAuNjU1NTYsIDAuMTExNTYsIDAsIDAuNV0sXG4gICAgXCI1NFwiOiBbMCwgMC42NTU1NiwgMC4xMTE1NiwgMCwgMC41XSxcbiAgICBcIjU1XCI6IFswLCAwLjY1NTU2LCAwLjExMTU2LCAwLCAwLjVdLFxuICAgIFwiNTZcIjogWzAsIDAuNjU1NTYsIDAuMTExNTYsIDAsIDAuNV0sXG4gICAgXCI1N1wiOiBbMCwgMC42NTU1NiwgMC4xMTE1NiwgMCwgMC41XSxcbiAgICBcIjU4XCI6IFswLCAwLjQ0NDQ0LCAwLjAyNTAyLCAwLCAwLjI3Nzc4XSxcbiAgICBcIjU5XCI6IFswLjEyNSwgMC40NDQ0NCwgMC4wMjUwMiwgMCwgMC4yNzc3OF0sXG4gICAgXCI2MVwiOiBbLTAuMTMsIDAuMzcsIDAuMDUwODcsIDAsIDAuNzc3NzhdLFxuICAgIFwiNjNcIjogWzAsIDAuNjk0NDQsIDAuMTE4MDksIDAsIDAuNDcyMjJdLFxuICAgIFwiNjRcIjogWzAsIDAuNjk0NDQsIDAuMDc1NTUsIDAsIDAuNjY2NjddLFxuICAgIFwiNjVcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiNjZcIjogWzAsIDAuNjk0NDQsIDAuMDgyOTMsIDAsIDAuNjY2NjddLFxuICAgIFwiNjdcIjogWzAsIDAuNjk0NDQsIDAuMTE5ODMsIDAsIDAuNjM4ODldLFxuICAgIFwiNjhcIjogWzAsIDAuNjk0NDQsIDAuMDc1NTUsIDAsIDAuNzIyMjNdLFxuICAgIFwiNjlcIjogWzAsIDAuNjk0NDQsIDAuMTE5ODMsIDAsIDAuNTk3MjJdLFxuICAgIFwiNzBcIjogWzAsIDAuNjk0NDQsIDAuMTMzNzIsIDAsIDAuNTY5NDVdLFxuICAgIFwiNzFcIjogWzAsIDAuNjk0NDQsIDAuMTE5ODMsIDAsIDAuNjY2NjddLFxuICAgIFwiNzJcIjogWzAsIDAuNjk0NDQsIDAuMDgwOTQsIDAsIDAuNzA4MzRdLFxuICAgIFwiNzNcIjogWzAsIDAuNjk0NDQsIDAuMTMzNzIsIDAsIDAuMjc3NzhdLFxuICAgIFwiNzRcIjogWzAsIDAuNjk0NDQsIDAuMDgwOTQsIDAsIDAuNDcyMjJdLFxuICAgIFwiNzVcIjogWzAsIDAuNjk0NDQsIDAuMTE5ODMsIDAsIDAuNjk0NDVdLFxuICAgIFwiNzZcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTQxNjddLFxuICAgIFwiNzdcIjogWzAsIDAuNjk0NDQsIDAuMDgwOTQsIDAsIDAuODc1XSxcbiAgICBcIjc4XCI6IFswLCAwLjY5NDQ0LCAwLjA4MDk0LCAwLCAwLjcwODM0XSxcbiAgICBcIjc5XCI6IFswLCAwLjY5NDQ0LCAwLjA3NTU1LCAwLCAwLjczNjExXSxcbiAgICBcIjgwXCI6IFswLCAwLjY5NDQ0LCAwLjA4MjkzLCAwLCAwLjYzODg5XSxcbiAgICBcIjgxXCI6IFswLjEyNSwgMC42OTQ0NCwgMC4wNzU1NSwgMCwgMC43MzYxMV0sXG4gICAgXCI4MlwiOiBbMCwgMC42OTQ0NCwgMC4wODI5MywgMCwgMC42NDU4NF0sXG4gICAgXCI4M1wiOiBbMCwgMC42OTQ0NCwgMC4wOTIwNSwgMCwgMC41NTU1Nl0sXG4gICAgXCI4NFwiOiBbMCwgMC42OTQ0NCwgMC4xMzM3MiwgMCwgMC42ODA1Nl0sXG4gICAgXCI4NVwiOiBbMCwgMC42OTQ0NCwgMC4wODA5NCwgMCwgMC42ODc1XSxcbiAgICBcIjg2XCI6IFswLCAwLjY5NDQ0LCAwLjE2MTUsIDAsIDAuNjY2NjddLFxuICAgIFwiODdcIjogWzAsIDAuNjk0NDQsIDAuMTYxNSwgMCwgMC45NDQ0NV0sXG4gICAgXCI4OFwiOiBbMCwgMC42OTQ0NCwgMC4xMzM3MiwgMCwgMC42NjY2N10sXG4gICAgXCI4OVwiOiBbMCwgMC42OTQ0NCwgMC4xNzI2MSwgMCwgMC42NjY2N10sXG4gICAgXCI5MFwiOiBbMCwgMC42OTQ0NCwgMC4xMTk4MywgMCwgMC42MTExMV0sXG4gICAgXCI5MVwiOiBbMC4yNSwgMC43NSwgMC4xNTk0MiwgMCwgMC4yODg4OV0sXG4gICAgXCI5M1wiOiBbMC4yNSwgMC43NSwgMC4wODcxOSwgMCwgMC4yODg4OV0sXG4gICAgXCI5NFwiOiBbMCwgMC42OTQ0NCwgMC4wNzk5LCAwLCAwLjVdLFxuICAgIFwiOTVcIjogWzAuMzUsIDAuMDk0NDQsIDAuMDg2MTYsIDAsIDAuNV0sXG4gICAgXCI5N1wiOiBbMCwgMC40NDQ0NCwgMC4wMDk4MSwgMCwgMC40ODA1Nl0sXG4gICAgXCI5OFwiOiBbMCwgMC42OTQ0NCwgMC4wMzA1NywgMCwgMC41MTY2N10sXG4gICAgXCI5OVwiOiBbMCwgMC40NDQ0NCwgMC4wODMzNiwgMCwgMC40NDQ0NV0sXG4gICAgXCIxMDBcIjogWzAsIDAuNjk0NDQsIDAuMDk0ODMsIDAsIDAuNTE2NjddLFxuICAgIFwiMTAxXCI6IFswLCAwLjQ0NDQ0LCAwLjA2Nzc4LCAwLCAwLjQ0NDQ1XSxcbiAgICBcIjEwMlwiOiBbMCwgMC42OTQ0NCwgMC4yMTcwNSwgMCwgMC4zMDU1Nl0sXG4gICAgXCIxMDNcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAuMTA4MzYsIDAsIDAuNV0sXG4gICAgXCIxMDRcIjogWzAsIDAuNjk0NDQsIDAuMDE3NzgsIDAsIDAuNTE2NjddLFxuICAgIFwiMTA1XCI6IFswLCAwLjY3OTM3LCAwLjA5NzE4LCAwLCAwLjIzODg5XSxcbiAgICBcIjEwNlwiOiBbMC4xOTQ0NCwgMC42NzkzNywgMC4wOTE2MiwgMCwgMC4yNjY2N10sXG4gICAgXCIxMDdcIjogWzAsIDAuNjk0NDQsIDAuMDgzMzYsIDAsIDAuNDg4ODldLFxuICAgIFwiMTA4XCI6IFswLCAwLjY5NDQ0LCAwLjA5NDgzLCAwLCAwLjIzODg5XSxcbiAgICBcIjEwOVwiOiBbMCwgMC40NDQ0NCwgMC4wMTc3OCwgMCwgMC43OTQ0NV0sXG4gICAgXCIxMTBcIjogWzAsIDAuNDQ0NDQsIDAuMDE3NzgsIDAsIDAuNTE2NjddLFxuICAgIFwiMTExXCI6IFswLCAwLjQ0NDQ0LCAwLjA2NjEzLCAwLCAwLjVdLFxuICAgIFwiMTEyXCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLjAzODksIDAsIDAuNTE2NjddLFxuICAgIFwiMTEzXCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLjA0MTY5LCAwLCAwLjUxNjY3XSxcbiAgICBcIjExNFwiOiBbMCwgMC40NDQ0NCwgMC4xMDgzNiwgMCwgMC4zNDE2N10sXG4gICAgXCIxMTVcIjogWzAsIDAuNDQ0NDQsIDAuMDc3OCwgMCwgMC4zODMzM10sXG4gICAgXCIxMTZcIjogWzAsIDAuNTcxNDMsIDAuMDcyMjUsIDAsIDAuMzYxMTFdLFxuICAgIFwiMTE3XCI6IFswLCAwLjQ0NDQ0LCAwLjA0MTY5LCAwLCAwLjUxNjY3XSxcbiAgICBcIjExOFwiOiBbMCwgMC40NDQ0NCwgMC4xMDgzNiwgMCwgMC40NjExMV0sXG4gICAgXCIxMTlcIjogWzAsIDAuNDQ0NDQsIDAuMTA4MzYsIDAsIDAuNjgzMzRdLFxuICAgIFwiMTIwXCI6IFswLCAwLjQ0NDQ0LCAwLjA5MTY5LCAwLCAwLjQ2MTExXSxcbiAgICBcIjEyMVwiOiBbMC4xOTQ0NCwgMC40NDQ0NCwgMC4xMDgzNiwgMCwgMC40NjExMV0sXG4gICAgXCIxMjJcIjogWzAsIDAuNDQ0NDQsIDAuMDg3NTIsIDAsIDAuNDM0NzJdLFxuICAgIFwiMTI2XCI6IFswLjM1LCAwLjMyNjU5LCAwLjA4ODI2LCAwLCAwLjVdLFxuICAgIFwiMTY4XCI6IFswLCAwLjY3OTM3LCAwLjA2Mzg1LCAwLCAwLjVdLFxuICAgIFwiMTc2XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjczNzUyXSxcbiAgICBcIjE4NFwiOiBbMC4xNzAxNCwgMCwgMCwgMCwgMC40NDQ0NV0sXG4gICAgXCIzMDVcIjogWzAsIDAuNDQ0NDQsIDAuMDQxNjksIDAsIDAuMjM4ODldLFxuICAgIFwiNTY3XCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLjA0MTY5LCAwLCAwLjI2NjY3XSxcbiAgICBcIjcxMFwiOiBbMCwgMC42OTQ0NCwgMC4wNzk5LCAwLCAwLjVdLFxuICAgIFwiNzExXCI6IFswLCAwLjYzMTk0LCAwLjA4NDMyLCAwLCAwLjVdLFxuICAgIFwiNzEzXCI6IFswLCAwLjYwODg5LCAwLjA4Nzc2LCAwLCAwLjVdLFxuICAgIFwiNzE0XCI6IFswLCAwLjY5NDQ0LCAwLjA5MjA1LCAwLCAwLjVdLFxuICAgIFwiNzE1XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiNzI4XCI6IFswLCAwLjY5NDQ0LCAwLjA5NDgzLCAwLCAwLjVdLFxuICAgIFwiNzI5XCI6IFswLCAwLjY3OTM3LCAwLjA3Nzc0LCAwLCAwLjI3Nzc4XSxcbiAgICBcIjczMFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43Mzc1Ml0sXG4gICAgXCI3MzJcIjogWzAsIDAuNjc2NTksIDAuMDg4MjYsIDAsIDAuNV0sXG4gICAgXCI3MzNcIjogWzAsIDAuNjk0NDQsIDAuMDkyMDUsIDAsIDAuNV0sXG4gICAgXCI5MTVcIjogWzAsIDAuNjk0NDQsIDAuMTMzNzIsIDAsIDAuNTQxNjddLFxuICAgIFwiOTE2XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjgzMzM0XSxcbiAgICBcIjkyMFwiOiBbMCwgMC42OTQ0NCwgMC4wNzU1NSwgMCwgMC43Nzc3OF0sXG4gICAgXCI5MjNcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjExMTFdLFxuICAgIFwiOTI2XCI6IFswLCAwLjY5NDQ0LCAwLjEyODE2LCAwLCAwLjY2NjY3XSxcbiAgICBcIjkyOFwiOiBbMCwgMC42OTQ0NCwgMC4wODA5NCwgMCwgMC43MDgzNF0sXG4gICAgXCI5MzFcIjogWzAsIDAuNjk0NDQsIDAuMTE5ODMsIDAsIDAuNzIyMjJdLFxuICAgIFwiOTMzXCI6IFswLCAwLjY5NDQ0LCAwLjA5MDMxLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjkzNFwiOiBbMCwgMC42OTQ0NCwgMC4wNDYwMywgMCwgMC43MjIyMl0sXG4gICAgXCI5MzZcIjogWzAsIDAuNjk0NDQsIDAuMDkwMzEsIDAsIDAuNzc3NzhdLFxuICAgIFwiOTM3XCI6IFswLCAwLjY5NDQ0LCAwLjA4MjkzLCAwLCAwLjcyMjIyXSxcbiAgICBcIjgyMTFcIjogWzAsIDAuNDQ0NDQsIDAuMDg2MTYsIDAsIDAuNV0sXG4gICAgXCI4MjEyXCI6IFswLCAwLjQ0NDQ0LCAwLjA4NjE2LCAwLCAxLjBdLFxuICAgIFwiODIxNlwiOiBbMCwgMC42OTQ0NCwgMC4wNzgxNiwgMCwgMC4yNzc3OF0sXG4gICAgXCI4MjE3XCI6IFswLCAwLjY5NDQ0LCAwLjA3ODE2LCAwLCAwLjI3Nzc4XSxcbiAgICBcIjgyMjBcIjogWzAsIDAuNjk0NDQsIDAuMTQyMDUsIDAsIDAuNV0sXG4gICAgXCI4MjIxXCI6IFswLCAwLjY5NDQ0LCAwLjAwMzE2LCAwLCAwLjVdXG4gIH0sXG4gIFwiU2Fuc1NlcmlmLVJlZ3VsYXJcIjoge1xuICAgIFwiMzNcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuMzE5NDVdLFxuICAgIFwiMzRcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNV0sXG4gICAgXCIzNVwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMC44MzMzNF0sXG4gICAgXCIzNlwiOiBbMC4wNTU1NiwgMC43NSwgMCwgMCwgMC41XSxcbiAgICBcIjM3XCI6IFswLjA1NTU2LCAwLjc1LCAwLCAwLCAwLjgzMzM0XSxcbiAgICBcIjM4XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjc1ODM0XSxcbiAgICBcIjM5XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjI3Nzc4XSxcbiAgICBcIjQwXCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjM4ODg5XSxcbiAgICBcIjQxXCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjM4ODg5XSxcbiAgICBcIjQyXCI6IFswLCAwLjc1LCAwLCAwLCAwLjVdLFxuICAgIFwiNDNcIjogWzAuMDgzMzMsIDAuNTgzMzMsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiNDRcIjogWzAuMTI1LCAwLjA4MzMzLCAwLCAwLCAwLjI3Nzc4XSxcbiAgICBcIjQ1XCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjMzMzMzXSxcbiAgICBcIjQ2XCI6IFswLCAwLjA4MzMzLCAwLCAwLCAwLjI3Nzc4XSxcbiAgICBcIjQ3XCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjVdLFxuICAgIFwiNDhcIjogWzAsIDAuNjU1NTYsIDAsIDAsIDAuNV0sXG4gICAgXCI0OVwiOiBbMCwgMC42NTU1NiwgMCwgMCwgMC41XSxcbiAgICBcIjUwXCI6IFswLCAwLjY1NTU2LCAwLCAwLCAwLjVdLFxuICAgIFwiNTFcIjogWzAsIDAuNjU1NTYsIDAsIDAsIDAuNV0sXG4gICAgXCI1MlwiOiBbMCwgMC42NTU1NiwgMCwgMCwgMC41XSxcbiAgICBcIjUzXCI6IFswLCAwLjY1NTU2LCAwLCAwLCAwLjVdLFxuICAgIFwiNTRcIjogWzAsIDAuNjU1NTYsIDAsIDAsIDAuNV0sXG4gICAgXCI1NVwiOiBbMCwgMC42NTU1NiwgMCwgMCwgMC41XSxcbiAgICBcIjU2XCI6IFswLCAwLjY1NTU2LCAwLCAwLCAwLjVdLFxuICAgIFwiNTdcIjogWzAsIDAuNjU1NTYsIDAsIDAsIDAuNV0sXG4gICAgXCI1OFwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC4yNzc3OF0sXG4gICAgXCI1OVwiOiBbMC4xMjUsIDAuNDQ0NDQsIDAsIDAsIDAuMjc3NzhdLFxuICAgIFwiNjFcIjogWy0wLjEzLCAwLjM3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjYzXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjQ3MjIyXSxcbiAgICBcIjY0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjY1XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjY2XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjY3XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjYzODg5XSxcbiAgICBcIjY4XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjcyMjIzXSxcbiAgICBcIjY5XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU5NzIyXSxcbiAgICBcIjcwXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU2OTQ1XSxcbiAgICBcIjcxXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjcyXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjcwODM0XSxcbiAgICBcIjczXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjI3Nzc4XSxcbiAgICBcIjc0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjQ3MjIyXSxcbiAgICBcIjc1XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjY5NDQ1XSxcbiAgICBcIjc2XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU0MTY3XSxcbiAgICBcIjc3XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjg3NV0sXG4gICAgXCI3OFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43MDgzNF0sXG4gICAgXCI3OVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43MzYxMV0sXG4gICAgXCI4MFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42Mzg4OV0sXG4gICAgXCI4MVwiOiBbMC4xMjUsIDAuNjk0NDQsIDAsIDAsIDAuNzM2MTFdLFxuICAgIFwiODJcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjQ1ODRdLFxuICAgIFwiODNcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTU1NTZdLFxuICAgIFwiODRcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjgwNTZdLFxuICAgIFwiODVcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjg3NV0sXG4gICAgXCI4NlwiOiBbMCwgMC42OTQ0NCwgMC4wMTM4OSwgMCwgMC42NjY2N10sXG4gICAgXCI4N1wiOiBbMCwgMC42OTQ0NCwgMC4wMTM4OSwgMCwgMC45NDQ0NV0sXG4gICAgXCI4OFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42NjY2N10sXG4gICAgXCI4OVwiOiBbMCwgMC42OTQ0NCwgMC4wMjUsIDAsIDAuNjY2NjddLFxuICAgIFwiOTBcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjExMTFdLFxuICAgIFwiOTFcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuMjg4ODldLFxuICAgIFwiOTNcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuMjg4ODldLFxuICAgIFwiOTRcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNV0sXG4gICAgXCI5NVwiOiBbMC4zNSwgMC4wOTQ0NCwgMC4wMjc3OCwgMCwgMC41XSxcbiAgICBcIjk3XCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjQ4MDU2XSxcbiAgICBcIjk4XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjUxNjY3XSxcbiAgICBcIjk5XCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjQ0NDQ1XSxcbiAgICBcIjEwMFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41MTY2N10sXG4gICAgXCIxMDFcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuNDQ0NDVdLFxuICAgIFwiMTAyXCI6IFswLCAwLjY5NDQ0LCAwLjA2OTQ0LCAwLCAwLjMwNTU2XSxcbiAgICBcIjEwM1wiOiBbMC4xOTQ0NCwgMC40NDQ0NCwgMC4wMTM4OSwgMCwgMC41XSxcbiAgICBcIjEwNFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41MTY2N10sXG4gICAgXCIxMDVcIjogWzAsIDAuNjc5MzcsIDAsIDAsIDAuMjM4ODldLFxuICAgIFwiMTA2XCI6IFswLjE5NDQ0LCAwLjY3OTM3LCAwLCAwLCAwLjI2NjY3XSxcbiAgICBcIjEwN1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC40ODg4OV0sXG4gICAgXCIxMDhcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuMjM4ODldLFxuICAgIFwiMTA5XCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjc5NDQ1XSxcbiAgICBcIjExMFwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC41MTY2N10sXG4gICAgXCIxMTFcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuNV0sXG4gICAgXCIxMTJcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAsIDAsIDAuNTE2NjddLFxuICAgIFwiMTEzXCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLCAwLCAwLjUxNjY3XSxcbiAgICBcIjExNFwiOiBbMCwgMC40NDQ0NCwgMC4wMTM4OSwgMCwgMC4zNDE2N10sXG4gICAgXCIxMTVcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuMzgzMzNdLFxuICAgIFwiMTE2XCI6IFswLCAwLjU3MTQzLCAwLCAwLCAwLjM2MTExXSxcbiAgICBcIjExN1wiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC41MTY2N10sXG4gICAgXCIxMThcIjogWzAsIDAuNDQ0NDQsIDAuMDEzODksIDAsIDAuNDYxMTFdLFxuICAgIFwiMTE5XCI6IFswLCAwLjQ0NDQ0LCAwLjAxMzg5LCAwLCAwLjY4MzM0XSxcbiAgICBcIjEyMFwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC40NjExMV0sXG4gICAgXCIxMjFcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAuMDEzODksIDAsIDAuNDYxMTFdLFxuICAgIFwiMTIyXCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjQzNDcyXSxcbiAgICBcIjEyNlwiOiBbMC4zNSwgMC4zMjY1OSwgMCwgMCwgMC41XSxcbiAgICBcIjE2OFwiOiBbMCwgMC42NzkzNywgMCwgMCwgMC41XSxcbiAgICBcIjE3NlwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42NjY2N10sXG4gICAgXCIxODRcIjogWzAuMTcwMTQsIDAsIDAsIDAsIDAuNDQ0NDVdLFxuICAgIFwiMzA1XCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjIzODg5XSxcbiAgICBcIjU2N1wiOiBbMC4xOTQ0NCwgMC40NDQ0NCwgMCwgMCwgMC4yNjY2N10sXG4gICAgXCI3MTBcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNV0sXG4gICAgXCI3MTFcIjogWzAsIDAuNjMxOTQsIDAsIDAsIDAuNV0sXG4gICAgXCI3MTNcIjogWzAsIDAuNjA4ODksIDAsIDAsIDAuNV0sXG4gICAgXCI3MTRcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNV0sXG4gICAgXCI3MTVcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNV0sXG4gICAgXCI3MjhcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNV0sXG4gICAgXCI3MjlcIjogWzAsIDAuNjc5MzcsIDAsIDAsIDAuMjc3NzhdLFxuICAgIFwiNzMwXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjczMlwiOiBbMCwgMC42NzY1OSwgMCwgMCwgMC41XSxcbiAgICBcIjczM1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41XSxcbiAgICBcIjkxNVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41NDE2N10sXG4gICAgXCI5MTZcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuODMzMzRdLFxuICAgIFwiOTIwXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjkyM1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42MTExMV0sXG4gICAgXCI5MjZcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiOTI4XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjcwODM0XSxcbiAgICBcIjkzMVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43MjIyMl0sXG4gICAgXCI5MzNcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiOTM0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjkzNlwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI5MzdcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNzIyMjJdLFxuICAgIFwiODIxMVwiOiBbMCwgMC40NDQ0NCwgMC4wMjc3OCwgMCwgMC41XSxcbiAgICBcIjgyMTJcIjogWzAsIDAuNDQ0NDQsIDAuMDI3NzgsIDAsIDEuMF0sXG4gICAgXCI4MjE2XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjI3Nzc4XSxcbiAgICBcIjgyMTdcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuMjc3NzhdLFxuICAgIFwiODIyMFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41XSxcbiAgICBcIjgyMjFcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNV1cbiAgfSxcbiAgXCJTY3JpcHQtUmVndWxhclwiOiB7XG4gICAgXCI2NVwiOiBbMCwgMC43LCAwLjIyOTI1LCAwLCAwLjgwMjUzXSxcbiAgICBcIjY2XCI6IFswLCAwLjcsIDAuMDQwODcsIDAsIDAuOTA3NTddLFxuICAgIFwiNjdcIjogWzAsIDAuNywgMC4xNjg5LCAwLCAwLjY2NjE5XSxcbiAgICBcIjY4XCI6IFswLCAwLjcsIDAuMDkzNzEsIDAsIDAuNzc0NDNdLFxuICAgIFwiNjlcIjogWzAsIDAuNywgMC4xODU4MywgMCwgMC41NjE2Ml0sXG4gICAgXCI3MFwiOiBbMCwgMC43LCAwLjEzNjM0LCAwLCAwLjg5NTQ0XSxcbiAgICBcIjcxXCI6IFswLCAwLjcsIDAuMTczMjIsIDAsIDAuNjA5NjFdLFxuICAgIFwiNzJcIjogWzAsIDAuNywgMC4yOTY5NCwgMCwgMC45NjkxOV0sXG4gICAgXCI3M1wiOiBbMCwgMC43LCAwLjE5MTg5LCAwLCAwLjgwOTA3XSxcbiAgICBcIjc0XCI6IFswLjI3Nzc4LCAwLjcsIDAuMTkxODksIDAsIDEuMDUxNTldLFxuICAgIFwiNzVcIjogWzAsIDAuNywgMC4zMTI1OSwgMCwgMC45MTM2NF0sXG4gICAgXCI3NlwiOiBbMCwgMC43LCAwLjE5MTg5LCAwLCAwLjg3MzczXSxcbiAgICBcIjc3XCI6IFswLCAwLjcsIDAuMTU5ODEsIDAsIDEuMDgwMzFdLFxuICAgIFwiNzhcIjogWzAsIDAuNywgMC4zNTI1LCAwLCAwLjkwMTVdLFxuICAgIFwiNzlcIjogWzAsIDAuNywgMC4wODA3OCwgMCwgMC43Mzc4N10sXG4gICAgXCI4MFwiOiBbMCwgMC43LCAwLjA4MDc4LCAwLCAxLjAxMjYyXSxcbiAgICBcIjgxXCI6IFswLCAwLjcsIDAuMDMzMDUsIDAsIDAuODgyODJdLFxuICAgIFwiODJcIjogWzAsIDAuNywgMC4wNjI1OSwgMCwgMC44NV0sXG4gICAgXCI4M1wiOiBbMCwgMC43LCAwLjE5MTg5LCAwLCAwLjg2NzY3XSxcbiAgICBcIjg0XCI6IFswLCAwLjcsIDAuMjkwODcsIDAsIDAuNzQ2OTddLFxuICAgIFwiODVcIjogWzAsIDAuNywgMC4yNTgxNSwgMCwgMC43OTk5Nl0sXG4gICAgXCI4NlwiOiBbMCwgMC43LCAwLjI3NTIzLCAwLCAwLjYyMjA0XSxcbiAgICBcIjg3XCI6IFswLCAwLjcsIDAuMjc1MjMsIDAsIDAuODA1MzJdLFxuICAgIFwiODhcIjogWzAsIDAuNywgMC4yNjAwNiwgMCwgMC45NDQ0NV0sXG4gICAgXCI4OVwiOiBbMCwgMC43LCAwLjI5MzksIDAsIDAuNzA5NjFdLFxuICAgIFwiOTBcIjogWzAsIDAuNywgMC4yNDAzNywgMCwgMC44MjEyXVxuICB9LFxuICBcIlNpemUxLVJlZ3VsYXJcIjoge1xuICAgIFwiNDBcIjogWzAuMzUwMDEsIDAuODUsIDAsIDAsIDAuNDU4MzRdLFxuICAgIFwiNDFcIjogWzAuMzUwMDEsIDAuODUsIDAsIDAsIDAuNDU4MzRdLFxuICAgIFwiNDdcIjogWzAuMzUwMDEsIDAuODUsIDAsIDAsIDAuNTc3NzhdLFxuICAgIFwiOTFcIjogWzAuMzUwMDEsIDAuODUsIDAsIDAsIDAuNDE2NjddLFxuICAgIFwiOTJcIjogWzAuMzUwMDEsIDAuODUsIDAsIDAsIDAuNTc3NzhdLFxuICAgIFwiOTNcIjogWzAuMzUwMDEsIDAuODUsIDAsIDAsIDAuNDE2NjddLFxuICAgIFwiMTIzXCI6IFswLjM1MDAxLCAwLjg1LCAwLCAwLCAwLjU4MzM0XSxcbiAgICBcIjEyNVwiOiBbMC4zNTAwMSwgMC44NSwgMCwgMCwgMC41ODMzNF0sXG4gICAgXCI3MTBcIjogWzAsIDAuNzIyMjIsIDAsIDAsIDAuNTU1NTZdLFxuICAgIFwiNzMyXCI6IFswLCAwLjcyMjIyLCAwLCAwLCAwLjU1NTU2XSxcbiAgICBcIjc3MFwiOiBbMCwgMC43MjIyMiwgMCwgMCwgMC41NTU1Nl0sXG4gICAgXCI3NzFcIjogWzAsIDAuNzIyMjIsIDAsIDAsIDAuNTU1NTZdLFxuICAgIFwiODIxNFwiOiBbLTAuMDAwOTksIDAuNjAxLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg1OTNcIjogWzFlLTA1LCAwLjYsIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiODU5NVwiOiBbMWUtMDUsIDAuNiwgMCwgMCwgMC42NjY2N10sXG4gICAgXCI4NjU3XCI6IFsxZS0wNSwgMC42LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg2NTlcIjogWzFlLTA1LCAwLjYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODcxOVwiOiBbMC4yNTAwMSwgMC43NSwgMCwgMCwgMC45NDQ0NV0sXG4gICAgXCI4NzIwXCI6IFswLjI1MDAxLCAwLjc1LCAwLCAwLCAwLjk0NDQ1XSxcbiAgICBcIjg3MjFcIjogWzAuMjUwMDEsIDAuNzUsIDAsIDAsIDEuMDU1NTZdLFxuICAgIFwiODczMFwiOiBbMC4zNTAwMSwgMC44NSwgMCwgMCwgMS4wXSxcbiAgICBcIjg3MzlcIjogWy0wLjAwNTk5LCAwLjYwNiwgMCwgMCwgMC4zMzMzM10sXG4gICAgXCI4NzQxXCI6IFstMC4wMDU5OSwgMC42MDYsIDAsIDAsIDAuNTU1NTZdLFxuICAgIFwiODc0N1wiOiBbMC4zMDYxMiwgMC44MDUsIDAuMTk0NDUsIDAsIDAuNDcyMjJdLFxuICAgIFwiODc0OFwiOiBbMC4zMDYsIDAuODA1LCAwLjE5NDQ1LCAwLCAwLjQ3MjIyXSxcbiAgICBcIjg3NDlcIjogWzAuMzA2LCAwLjgwNSwgMC4xOTQ0NSwgMCwgMC40NzIyMl0sXG4gICAgXCI4NzUwXCI6IFswLjMwNjEyLCAwLjgwNSwgMC4xOTQ0NSwgMCwgMC40NzIyMl0sXG4gICAgXCI4ODk2XCI6IFswLjI1MDAxLCAwLjc1LCAwLCAwLCAwLjgzMzM0XSxcbiAgICBcIjg4OTdcIjogWzAuMjUwMDEsIDAuNzUsIDAsIDAsIDAuODMzMzRdLFxuICAgIFwiODg5OFwiOiBbMC4yNTAwMSwgMC43NSwgMCwgMCwgMC44MzMzNF0sXG4gICAgXCI4ODk5XCI6IFswLjI1MDAxLCAwLjc1LCAwLCAwLCAwLjgzMzM0XSxcbiAgICBcIjg5NjhcIjogWzAuMzUwMDEsIDAuODUsIDAsIDAsIDAuNDcyMjJdLFxuICAgIFwiODk2OVwiOiBbMC4zNTAwMSwgMC44NSwgMCwgMCwgMC40NzIyMl0sXG4gICAgXCI4OTcwXCI6IFswLjM1MDAxLCAwLjg1LCAwLCAwLCAwLjQ3MjIyXSxcbiAgICBcIjg5NzFcIjogWzAuMzUwMDEsIDAuODUsIDAsIDAsIDAuNDcyMjJdLFxuICAgIFwiOTE2OFwiOiBbLTAuMDAwOTksIDAuNjAxLCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjEwMjE2XCI6IFswLjM1MDAxLCAwLjg1LCAwLCAwLCAwLjQ3MjIyXSxcbiAgICBcIjEwMjE3XCI6IFswLjM1MDAxLCAwLjg1LCAwLCAwLCAwLjQ3MjIyXSxcbiAgICBcIjEwNzUyXCI6IFswLjI1MDAxLCAwLjc1LCAwLCAwLCAxLjExMTExXSxcbiAgICBcIjEwNzUzXCI6IFswLjI1MDAxLCAwLjc1LCAwLCAwLCAxLjExMTExXSxcbiAgICBcIjEwNzU0XCI6IFswLjI1MDAxLCAwLjc1LCAwLCAwLCAxLjExMTExXSxcbiAgICBcIjEwNzU2XCI6IFswLjI1MDAxLCAwLjc1LCAwLCAwLCAwLjgzMzM0XSxcbiAgICBcIjEwNzU4XCI6IFswLjI1MDAxLCAwLjc1LCAwLCAwLCAwLjgzMzM0XVxuICB9LFxuICBcIlNpemUyLVJlZ3VsYXJcIjoge1xuICAgIFwiNDBcIjogWzAuNjUwMDIsIDEuMTUsIDAsIDAsIDAuNTk3MjJdLFxuICAgIFwiNDFcIjogWzAuNjUwMDIsIDEuMTUsIDAsIDAsIDAuNTk3MjJdLFxuICAgIFwiNDdcIjogWzAuNjUwMDIsIDEuMTUsIDAsIDAsIDAuODExMTFdLFxuICAgIFwiOTFcIjogWzAuNjUwMDIsIDEuMTUsIDAsIDAsIDAuNDcyMjJdLFxuICAgIFwiOTJcIjogWzAuNjUwMDIsIDEuMTUsIDAsIDAsIDAuODExMTFdLFxuICAgIFwiOTNcIjogWzAuNjUwMDIsIDEuMTUsIDAsIDAsIDAuNDcyMjJdLFxuICAgIFwiMTIzXCI6IFswLjY1MDAyLCAxLjE1LCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjEyNVwiOiBbMC42NTAwMiwgMS4xNSwgMCwgMCwgMC42NjY2N10sXG4gICAgXCI3MTBcIjogWzAsIDAuNzUsIDAsIDAsIDEuMF0sXG4gICAgXCI3MzJcIjogWzAsIDAuNzUsIDAsIDAsIDEuMF0sXG4gICAgXCI3NzBcIjogWzAsIDAuNzUsIDAsIDAsIDEuMF0sXG4gICAgXCI3NzFcIjogWzAsIDAuNzUsIDAsIDAsIDEuMF0sXG4gICAgXCI4NzE5XCI6IFswLjU1MDAxLCAxLjA1LCAwLCAwLCAxLjI3Nzc4XSxcbiAgICBcIjg3MjBcIjogWzAuNTUwMDEsIDEuMDUsIDAsIDAsIDEuMjc3NzhdLFxuICAgIFwiODcyMVwiOiBbMC41NTAwMSwgMS4wNSwgMCwgMCwgMS40NDQ0NV0sXG4gICAgXCI4NzMwXCI6IFswLjY1MDAyLCAxLjE1LCAwLCAwLCAxLjBdLFxuICAgIFwiODc0N1wiOiBbMC44NjIyNSwgMS4zNiwgMC40NDQ0NSwgMCwgMC41NTU1Nl0sXG4gICAgXCI4NzQ4XCI6IFswLjg2MiwgMS4zNiwgMC40NDQ0NSwgMCwgMC41NTU1Nl0sXG4gICAgXCI4NzQ5XCI6IFswLjg2MiwgMS4zNiwgMC40NDQ0NSwgMCwgMC41NTU1Nl0sXG4gICAgXCI4NzUwXCI6IFswLjg2MjI1LCAxLjM2LCAwLjQ0NDQ1LCAwLCAwLjU1NTU2XSxcbiAgICBcIjg4OTZcIjogWzAuNTUwMDEsIDEuMDUsIDAsIDAsIDEuMTExMTFdLFxuICAgIFwiODg5N1wiOiBbMC41NTAwMSwgMS4wNSwgMCwgMCwgMS4xMTExMV0sXG4gICAgXCI4ODk4XCI6IFswLjU1MDAxLCAxLjA1LCAwLCAwLCAxLjExMTExXSxcbiAgICBcIjg4OTlcIjogWzAuNTUwMDEsIDEuMDUsIDAsIDAsIDEuMTExMTFdLFxuICAgIFwiODk2OFwiOiBbMC42NTAwMiwgMS4xNSwgMCwgMCwgMC41Mjc3OF0sXG4gICAgXCI4OTY5XCI6IFswLjY1MDAyLCAxLjE1LCAwLCAwLCAwLjUyNzc4XSxcbiAgICBcIjg5NzBcIjogWzAuNjUwMDIsIDEuMTUsIDAsIDAsIDAuNTI3NzhdLFxuICAgIFwiODk3MVwiOiBbMC42NTAwMiwgMS4xNSwgMCwgMCwgMC41Mjc3OF0sXG4gICAgXCIxMDIxNlwiOiBbMC42NTAwMiwgMS4xNSwgMCwgMCwgMC42MTExMV0sXG4gICAgXCIxMDIxN1wiOiBbMC42NTAwMiwgMS4xNSwgMCwgMCwgMC42MTExMV0sXG4gICAgXCIxMDc1MlwiOiBbMC41NTAwMSwgMS4wNSwgMCwgMCwgMS41MTExMl0sXG4gICAgXCIxMDc1M1wiOiBbMC41NTAwMSwgMS4wNSwgMCwgMCwgMS41MTExMl0sXG4gICAgXCIxMDc1NFwiOiBbMC41NTAwMSwgMS4wNSwgMCwgMCwgMS41MTExMl0sXG4gICAgXCIxMDc1NlwiOiBbMC41NTAwMSwgMS4wNSwgMCwgMCwgMS4xMTExMV0sXG4gICAgXCIxMDc1OFwiOiBbMC41NTAwMSwgMS4wNSwgMCwgMCwgMS4xMTExMV1cbiAgfSxcbiAgXCJTaXplMy1SZWd1bGFyXCI6IHtcbiAgICBcIjQwXCI6IFswLjk1MDAzLCAxLjQ1LCAwLCAwLCAwLjczNjExXSxcbiAgICBcIjQxXCI6IFswLjk1MDAzLCAxLjQ1LCAwLCAwLCAwLjczNjExXSxcbiAgICBcIjQ3XCI6IFswLjk1MDAzLCAxLjQ1LCAwLCAwLCAxLjA0NDQ1XSxcbiAgICBcIjkxXCI6IFswLjk1MDAzLCAxLjQ1LCAwLCAwLCAwLjUyNzc4XSxcbiAgICBcIjkyXCI6IFswLjk1MDAzLCAxLjQ1LCAwLCAwLCAxLjA0NDQ1XSxcbiAgICBcIjkzXCI6IFswLjk1MDAzLCAxLjQ1LCAwLCAwLCAwLjUyNzc4XSxcbiAgICBcIjEyM1wiOiBbMC45NTAwMywgMS40NSwgMCwgMCwgMC43NV0sXG4gICAgXCIxMjVcIjogWzAuOTUwMDMsIDEuNDUsIDAsIDAsIDAuNzVdLFxuICAgIFwiNzEwXCI6IFswLCAwLjc1LCAwLCAwLCAxLjQ0NDQ1XSxcbiAgICBcIjczMlwiOiBbMCwgMC43NSwgMCwgMCwgMS40NDQ0NV0sXG4gICAgXCI3NzBcIjogWzAsIDAuNzUsIDAsIDAsIDEuNDQ0NDVdLFxuICAgIFwiNzcxXCI6IFswLCAwLjc1LCAwLCAwLCAxLjQ0NDQ1XSxcbiAgICBcIjg3MzBcIjogWzAuOTUwMDMsIDEuNDUsIDAsIDAsIDEuMF0sXG4gICAgXCI4OTY4XCI6IFswLjk1MDAzLCAxLjQ1LCAwLCAwLCAwLjU4MzM0XSxcbiAgICBcIjg5NjlcIjogWzAuOTUwMDMsIDEuNDUsIDAsIDAsIDAuNTgzMzRdLFxuICAgIFwiODk3MFwiOiBbMC45NTAwMywgMS40NSwgMCwgMCwgMC41ODMzNF0sXG4gICAgXCI4OTcxXCI6IFswLjk1MDAzLCAxLjQ1LCAwLCAwLCAwLjU4MzM0XSxcbiAgICBcIjEwMjE2XCI6IFswLjk1MDAzLCAxLjQ1LCAwLCAwLCAwLjc1XSxcbiAgICBcIjEwMjE3XCI6IFswLjk1MDAzLCAxLjQ1LCAwLCAwLCAwLjc1XVxuICB9LFxuICBcIlNpemU0LVJlZ3VsYXJcIjoge1xuICAgIFwiNDBcIjogWzEuMjUwMDMsIDEuNzUsIDAsIDAsIDAuNzkxNjddLFxuICAgIFwiNDFcIjogWzEuMjUwMDMsIDEuNzUsIDAsIDAsIDAuNzkxNjddLFxuICAgIFwiNDdcIjogWzEuMjUwMDMsIDEuNzUsIDAsIDAsIDEuMjc3NzhdLFxuICAgIFwiOTFcIjogWzEuMjUwMDMsIDEuNzUsIDAsIDAsIDAuNTgzMzRdLFxuICAgIFwiOTJcIjogWzEuMjUwMDMsIDEuNzUsIDAsIDAsIDEuMjc3NzhdLFxuICAgIFwiOTNcIjogWzEuMjUwMDMsIDEuNzUsIDAsIDAsIDAuNTgzMzRdLFxuICAgIFwiMTIzXCI6IFsxLjI1MDAzLCAxLjc1LCAwLCAwLCAwLjgwNTU2XSxcbiAgICBcIjEyNVwiOiBbMS4yNTAwMywgMS43NSwgMCwgMCwgMC44MDU1Nl0sXG4gICAgXCI3MTBcIjogWzAsIDAuODI1LCAwLCAwLCAxLjg4ODldLFxuICAgIFwiNzMyXCI6IFswLCAwLjgyNSwgMCwgMCwgMS44ODg5XSxcbiAgICBcIjc3MFwiOiBbMCwgMC44MjUsIDAsIDAsIDEuODg4OV0sXG4gICAgXCI3NzFcIjogWzAsIDAuODI1LCAwLCAwLCAxLjg4ODldLFxuICAgIFwiODczMFwiOiBbMS4yNTAwMywgMS43NSwgMCwgMCwgMS4wXSxcbiAgICBcIjg5NjhcIjogWzEuMjUwMDMsIDEuNzUsIDAsIDAsIDAuNjM4ODldLFxuICAgIFwiODk2OVwiOiBbMS4yNTAwMywgMS43NSwgMCwgMCwgMC42Mzg4OV0sXG4gICAgXCI4OTcwXCI6IFsxLjI1MDAzLCAxLjc1LCAwLCAwLCAwLjYzODg5XSxcbiAgICBcIjg5NzFcIjogWzEuMjUwMDMsIDEuNzUsIDAsIDAsIDAuNjM4ODldLFxuICAgIFwiOTExNVwiOiBbMC42NDUwMiwgMS4xNTUsIDAsIDAsIDAuODc1XSxcbiAgICBcIjkxMTZcIjogWzFlLTA1LCAwLjYsIDAsIDAsIDAuODc1XSxcbiAgICBcIjkxMTdcIjogWzAuNjQ1MDIsIDEuMTU1LCAwLCAwLCAwLjg3NV0sXG4gICAgXCI5MTE4XCI6IFswLjY0NTAyLCAxLjE1NSwgMCwgMCwgMC44NzVdLFxuICAgIFwiOTExOVwiOiBbMWUtMDUsIDAuNiwgMCwgMCwgMC44NzVdLFxuICAgIFwiOTEyMFwiOiBbMC42NDUwMiwgMS4xNTUsIDAsIDAsIDAuODc1XSxcbiAgICBcIjkxMjFcIjogWzAuNjQ1MDIsIDEuMTU1LCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjkxMjJcIjogWy0wLjAwMDk5LCAwLjYwMSwgMCwgMCwgMC42NjY2N10sXG4gICAgXCI5MTIzXCI6IFswLjY0NTAyLCAxLjE1NSwgMCwgMCwgMC42NjY2N10sXG4gICAgXCI5MTI0XCI6IFswLjY0NTAyLCAxLjE1NSwgMCwgMCwgMC42NjY2N10sXG4gICAgXCI5MTI1XCI6IFstMC4wMDA5OSwgMC42MDEsIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiOTEyNlwiOiBbMC42NDUwMiwgMS4xNTUsIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiOTEyN1wiOiBbMWUtMDUsIDAuOSwgMCwgMCwgMC44ODg4OV0sXG4gICAgXCI5MTI4XCI6IFswLjY1MDAyLCAxLjE1LCAwLCAwLCAwLjg4ODg5XSxcbiAgICBcIjkxMjlcIjogWzAuOTAwMDEsIDAsIDAsIDAsIDAuODg4ODldLFxuICAgIFwiOTEzMFwiOiBbMCwgMC4zLCAwLCAwLCAwLjg4ODg5XSxcbiAgICBcIjkxMzFcIjogWzFlLTA1LCAwLjksIDAsIDAsIDAuODg4ODldLFxuICAgIFwiOTEzMlwiOiBbMC42NTAwMiwgMS4xNSwgMCwgMCwgMC44ODg4OV0sXG4gICAgXCI5MTMzXCI6IFswLjkwMDAxLCAwLCAwLCAwLCAwLjg4ODg5XSxcbiAgICBcIjkxNDNcIjogWzAuODg1MDIsIDAuOTE1LCAwLCAwLCAxLjA1NTU2XSxcbiAgICBcIjEwMjE2XCI6IFsxLjI1MDAzLCAxLjc1LCAwLCAwLCAwLjgwNTU2XSxcbiAgICBcIjEwMjE3XCI6IFsxLjI1MDAzLCAxLjc1LCAwLCAwLCAwLjgwNTU2XSxcbiAgICBcIjU3MzQ0XCI6IFstMC4wMDQ5OSwgMC42MDUsIDAsIDAsIDEuMDU1NTZdLFxuICAgIFwiNTczNDVcIjogWy0wLjAwNDk5LCAwLjYwNSwgMCwgMCwgMS4wNTU1Nl0sXG4gICAgXCI1NzY4MFwiOiBbMCwgMC4xMiwgMCwgMCwgMC40NV0sXG4gICAgXCI1NzY4MVwiOiBbMCwgMC4xMiwgMCwgMCwgMC40NV0sXG4gICAgXCI1NzY4MlwiOiBbMCwgMC4xMiwgMCwgMCwgMC40NV0sXG4gICAgXCI1NzY4M1wiOiBbMCwgMC4xMiwgMCwgMCwgMC40NV1cbiAgfSxcbiAgXCJUeXBld3JpdGVyLVJlZ3VsYXJcIjoge1xuICAgIFwiMzJcIjogWzAsIDAsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjMzXCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCIzNFwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiMzVcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjM2XCI6IFswLjA4MzMzLCAwLjY5NDQ0LCAwLCAwLCAwLjUyNV0sXG4gICAgXCIzN1wiOiBbMC4wODMzMywgMC42OTQ0NCwgMCwgMCwgMC41MjVdLFxuICAgIFwiMzhcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjM5XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI0MFwiOiBbMC4wODMzMywgMC42OTQ0NCwgMCwgMCwgMC41MjVdLFxuICAgIFwiNDFcIjogWzAuMDgzMzMsIDAuNjk0NDQsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjQyXCI6IFswLCAwLjUyMDgzLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI0M1wiOiBbLTAuMDgwNTYsIDAuNTMwNTUsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjQ0XCI6IFswLjEzODg5LCAwLjEyNSwgMCwgMCwgMC41MjVdLFxuICAgIFwiNDVcIjogWy0wLjA4MDU2LCAwLjUzMDU1LCAwLCAwLCAwLjUyNV0sXG4gICAgXCI0NlwiOiBbMCwgMC4xMjUsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjQ3XCI6IFswLjA4MzMzLCAwLjY5NDQ0LCAwLCAwLCAwLjUyNV0sXG4gICAgXCI0OFwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiNDlcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjUwXCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI1MVwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiNTJcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjUzXCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI1NFwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiNTVcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjU2XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI1N1wiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiNThcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjU5XCI6IFswLjEzODg5LCAwLjQzMDU2LCAwLCAwLCAwLjUyNV0sXG4gICAgXCI2MFwiOiBbLTAuMDU1NTYsIDAuNTU1NTYsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjYxXCI6IFstMC4xOTU0OSwgMC40MTU2MiwgMCwgMCwgMC41MjVdLFxuICAgIFwiNjJcIjogWy0wLjA1NTU2LCAwLjU1NTU2LCAwLCAwLCAwLjUyNV0sXG4gICAgXCI2M1wiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiNjRcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjY1XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI2NlwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiNjdcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjY4XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI2OVwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiNzBcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjcxXCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI3MlwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiNzNcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjc0XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI3NVwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiNzZcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjc3XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI3OFwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiNzlcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjgwXCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI4MVwiOiBbMC4xMzg4OSwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiODJcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjgzXCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI4NFwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiODVcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjg2XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI4N1wiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiODhcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjg5XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI5MFwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiOTFcIjogWzAuMDgzMzMsIDAuNjk0NDQsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjkyXCI6IFswLjA4MzMzLCAwLjY5NDQ0LCAwLCAwLCAwLjUyNV0sXG4gICAgXCI5M1wiOiBbMC4wODMzMywgMC42OTQ0NCwgMCwgMCwgMC41MjVdLFxuICAgIFwiOTRcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjk1XCI6IFswLjA5NTE0LCAwLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI5NlwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiOTdcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjk4XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI5OVwiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC41MjVdLFxuICAgIFwiMTAwXCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCIxMDFcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjEwMlwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiMTAzXCI6IFswLjIyMjIyLCAwLjQzMDU2LCAwLCAwLCAwLjUyNV0sXG4gICAgXCIxMDRcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjEwNVwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiMTA2XCI6IFswLjIyMjIyLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCIxMDdcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjEwOFwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiMTA5XCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjUyNV0sXG4gICAgXCIxMTBcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjExMVwiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC41MjVdLFxuICAgIFwiMTEyXCI6IFswLjIyMjIyLCAwLjQzMDU2LCAwLCAwLCAwLjUyNV0sXG4gICAgXCIxMTNcIjogWzAuMjIyMjIsIDAuNDMwNTYsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjExNFwiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC41MjVdLFxuICAgIFwiMTE1XCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjUyNV0sXG4gICAgXCIxMTZcIjogWzAsIDAuNTUzNTgsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjExN1wiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC41MjVdLFxuICAgIFwiMTE4XCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjUyNV0sXG4gICAgXCIxMTlcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjEyMFwiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC41MjVdLFxuICAgIFwiMTIxXCI6IFswLjIyMjIyLCAwLjQzMDU2LCAwLCAwLCAwLjUyNV0sXG4gICAgXCIxMjJcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjEyM1wiOiBbMC4wODMzMywgMC42OTQ0NCwgMCwgMCwgMC41MjVdLFxuICAgIFwiMTI0XCI6IFswLjA4MzMzLCAwLjY5NDQ0LCAwLCAwLCAwLjUyNV0sXG4gICAgXCIxMjVcIjogWzAuMDgzMzMsIDAuNjk0NDQsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjEyNlwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiMTI3XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCIxNjBcIjogWzAsIDAsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjE3NlwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiMTg0XCI6IFswLjE5NDQ1LCAwLCAwLCAwLCAwLjUyNV0sXG4gICAgXCIzMDVcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjU2N1wiOiBbMC4yMjIyMiwgMC40MzA1NiwgMCwgMCwgMC41MjVdLFxuICAgIFwiNzExXCI6IFswLCAwLjU2NTk3LCAwLCAwLCAwLjUyNV0sXG4gICAgXCI3MTNcIjogWzAsIDAuNTY1NTUsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjcxNFwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiNzE1XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI3MjhcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjczMFwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiNzcwXCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI3NzFcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjc3NlwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiOTE1XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI5MTZcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjkyMFwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiOTIzXCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI5MjZcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjkyOFwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiOTMxXCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI5MzNcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjkzNFwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiOTM2XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI5MzdcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjgyMTZcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjgyMTdcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjgyNDJcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjkyNTFcIjogWzAuMTExMTEsIDAuMjE5NDQsIDAsIDAsIDAuNTI1XVxuICB9XG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2ZvbnRNZXRyaWNzLmpzXG5cblxuLyoqXG4gKiBUaGlzIGZpbGUgY29udGFpbnMgbWV0cmljcyByZWdhcmRpbmcgZm9udHMgYW5kIGluZGl2aWR1YWwgc3ltYm9scy4gVGhlIHNpZ21hXG4gKiBhbmQgeGkgdmFyaWFibGVzLCBhcyB3ZWxsIGFzIHRoZSBtZXRyaWNNYXAgbWFwIGNvbnRhaW4gZGF0YSBleHRyYWN0ZWQgZnJvbVxuICogVGVYLCBUZVggZm9udCBtZXRyaWNzLCBhbmQgdGhlIFRURiBmaWxlcy4gVGhlc2UgZGF0YSBhcmUgdGhlbiBleHBvc2VkIHZpYSB0aGVcbiAqIGBtZXRyaWNzYCB2YXJpYWJsZSBhbmQgdGhlIGdldENoYXJhY3Rlck1ldHJpY3MgZnVuY3Rpb24uXG4gKi9cbi8vIEluIFRlWCwgdGhlcmUgYXJlIGFjdHVhbGx5IHRocmVlIHNldHMgb2YgZGltZW5zaW9ucywgb25lIGZvciBlYWNoIG9mXG4vLyB0ZXh0c3R5bGUgKHNpemUgaW5kZXggNSBhbmQgaGlnaGVyOiA+PTlwdCksIHNjcmlwdHN0eWxlIChzaXplIGluZGV4IDMgYW5kIDQ6XG4vLyA3LThwdCksIGFuZCBzY3JpcHRzY3JpcHRzdHlsZSAoc2l6ZSBpbmRleCAxIGFuZCAyOiA1LTZwdCkuICBUaGVzZSBhcmVcbi8vIHByb3ZpZGVkIGluIHRoZSB0aGUgYXJyYXlzIGJlbG93LCBpbiB0aGF0IG9yZGVyLlxuLy9cbi8vIFRoZSBmb250IG1ldHJpY3MgYXJlIHN0b3JlZCBpbiBmb250cyBjbXN5MTAsIGNtc3k3LCBhbmQgY21zeTUgcmVzcHNlY3RpdmVseS5cbi8vIFRoaXMgd2FzIGRldGVybWluZWQgYnkgcnVubmluZyB0aGUgZm9sbG93aW5nIHNjcmlwdDpcbi8vXG4vLyAgICAgbGF0ZXggLWludGVyYWN0aW9uPW5vbnN0b3Btb2RlIFxcXG4vLyAgICAgJ1xcZG9jdW1lbnRjbGFzc3thcnRpY2xlfVxcdXNlcGFja2FnZXthbXNtYXRofVxcYmVnaW57ZG9jdW1lbnR9JyBcXFxuLy8gICAgICckYSQgXFxleHBhbmRhZnRlclxcc2hvd1xcdGhlXFx0ZXh0Zm9udDInIFxcXG4vLyAgICAgJ1xcZXhwYW5kYWZ0ZXJcXHNob3dcXHRoZVxcc2NyaXB0Zm9udDInIFxcXG4vLyAgICAgJ1xcZXhwYW5kYWZ0ZXJcXHNob3dcXHRoZVxcc2NyaXB0c2NyaXB0Zm9udDInIFxcXG4vLyAgICAgJ1xcc3RvcCdcbi8vXG4vLyBUaGUgbWV0cmljcyB0aGVtc2VsdmVzIHdlcmUgcmV0cmVpdmVkIHVzaW5nIHRoZSBmb2xsb3dpbmcgY29tbWFuZHM6XG4vL1xuLy8gICAgIHRmdG9wbCBjbXN5MTBcbi8vICAgICB0ZnRvcGwgY21zeTdcbi8vICAgICB0ZnRvcGwgY21zeTVcbi8vXG4vLyBUaGUgb3V0cHV0IG9mIGVhY2ggb2YgdGhlc2UgY29tbWFuZHMgaXMgcXVpdGUgbGVuZ3RoeS4gIFRoZSBvbmx5IHBhcnQgd2Vcbi8vIGNhcmUgYWJvdXQgaXMgdGhlIEZPTlRESU1FTiBzZWN0aW9uLiBFYWNoIHZhbHVlIGlzIG1lYXN1cmVkIGluIEVNcy5cbnZhciBzaWdtYXNBbmRYaXMgPSB7XG4gIHNsYW50OiBbMC4yNTAsIDAuMjUwLCAwLjI1MF0sXG4gIC8vIHNpZ21hMVxuICBzcGFjZTogWzAuMDAwLCAwLjAwMCwgMC4wMDBdLFxuICAvLyBzaWdtYTJcbiAgc3RyZXRjaDogWzAuMDAwLCAwLjAwMCwgMC4wMDBdLFxuICAvLyBzaWdtYTNcbiAgc2hyaW5rOiBbMC4wMDAsIDAuMDAwLCAwLjAwMF0sXG4gIC8vIHNpZ21hNFxuICB4SGVpZ2h0OiBbMC40MzEsIDAuNDMxLCAwLjQzMV0sXG4gIC8vIHNpZ21hNVxuICBxdWFkOiBbMS4wMDAsIDEuMTcxLCAxLjQ3Ml0sXG4gIC8vIHNpZ21hNlxuICBleHRyYVNwYWNlOiBbMC4wMDAsIDAuMDAwLCAwLjAwMF0sXG4gIC8vIHNpZ21hN1xuICBudW0xOiBbMC42NzcsIDAuNzMyLCAwLjkyNV0sXG4gIC8vIHNpZ21hOFxuICBudW0yOiBbMC4zOTQsIDAuMzg0LCAwLjM4N10sXG4gIC8vIHNpZ21hOVxuICBudW0zOiBbMC40NDQsIDAuNDcxLCAwLjUwNF0sXG4gIC8vIHNpZ21hMTBcbiAgZGVub20xOiBbMC42ODYsIDAuNzUyLCAxLjAyNV0sXG4gIC8vIHNpZ21hMTFcbiAgZGVub20yOiBbMC4zNDUsIDAuMzQ0LCAwLjUzMl0sXG4gIC8vIHNpZ21hMTJcbiAgc3VwMTogWzAuNDEzLCAwLjUwMywgMC41MDRdLFxuICAvLyBzaWdtYTEzXG4gIHN1cDI6IFswLjM2MywgMC40MzEsIDAuNDA0XSxcbiAgLy8gc2lnbWExNFxuICBzdXAzOiBbMC4yODksIDAuMjg2LCAwLjI5NF0sXG4gIC8vIHNpZ21hMTVcbiAgc3ViMTogWzAuMTUwLCAwLjE0MywgMC4yMDBdLFxuICAvLyBzaWdtYTE2XG4gIHN1YjI6IFswLjI0NywgMC4yODYsIDAuNDAwXSxcbiAgLy8gc2lnbWExN1xuICBzdXBEcm9wOiBbMC4zODYsIDAuMzUzLCAwLjQ5NF0sXG4gIC8vIHNpZ21hMThcbiAgc3ViRHJvcDogWzAuMDUwLCAwLjA3MSwgMC4xMDBdLFxuICAvLyBzaWdtYTE5XG4gIGRlbGltMTogWzIuMzkwLCAxLjcwMCwgMS45ODBdLFxuICAvLyBzaWdtYTIwXG4gIGRlbGltMjogWzEuMDEwLCAxLjE1NywgMS40MjBdLFxuICAvLyBzaWdtYTIxXG4gIGF4aXNIZWlnaHQ6IFswLjI1MCwgMC4yNTAsIDAuMjUwXSxcbiAgLy8gc2lnbWEyMlxuICAvLyBUaGVzZSBmb250IG1ldHJpY3MgYXJlIGV4dHJhY3RlZCBmcm9tIFRlWCBieSB1c2luZyB0ZnRvcGwgb24gY21leDEwLnRmbTtcbiAgLy8gdGhleSBjb3JyZXNwb25kIHRvIHRoZSBmb250IHBhcmFtZXRlcnMgb2YgdGhlIGV4dGVuc2lvbiBmb250cyAoZmFtaWx5IDMpLlxuICAvLyBTZWUgdGhlIFRlWGJvb2ssIHBhZ2UgNDQxLiBJbiBBTVNUZVgsIHRoZSBleHRlbnNpb24gZm9udHMgc2NhbGU7IHRvXG4gIC8vIG1hdGNoIGNtZXg3LCB3ZSdkIHVzZSBjbWV4Ny50Zm0gdmFsdWVzIGZvciBzY3JpcHQgYW5kIHNjcmlwdHNjcmlwdFxuICAvLyB2YWx1ZXMuXG4gIGRlZmF1bHRSdWxlVGhpY2tuZXNzOiBbMC4wNCwgMC4wNDksIDAuMDQ5XSxcbiAgLy8geGk4OyBjbWV4NzogMC4wNDlcbiAgYmlnT3BTcGFjaW5nMTogWzAuMTExLCAwLjExMSwgMC4xMTFdLFxuICAvLyB4aTlcbiAgYmlnT3BTcGFjaW5nMjogWzAuMTY2LCAwLjE2NiwgMC4xNjZdLFxuICAvLyB4aTEwXG4gIGJpZ09wU3BhY2luZzM6IFswLjIsIDAuMiwgMC4yXSxcbiAgLy8geGkxMVxuICBiaWdPcFNwYWNpbmc0OiBbMC42LCAwLjYxMSwgMC42MTFdLFxuICAvLyB4aTEyOyBjbWV4NzogMC42MTFcbiAgYmlnT3BTcGFjaW5nNTogWzAuMSwgMC4xNDMsIDAuMTQzXSxcbiAgLy8geGkxMzsgY21leDc6IDAuMTQzXG4gIC8vIFRoZSBcXHNxcnQgcnVsZSB3aWR0aCBpcyB0YWtlbiBmcm9tIHRoZSBoZWlnaHQgb2YgdGhlIHN1cmQgY2hhcmFjdGVyLlxuICAvLyBTaW5jZSB3ZSB1c2UgdGhlIHNhbWUgZm9udCBhdCBhbGwgc2l6ZXMsIHRoaXMgdGhpY2tuZXNzIGRvZXNuJ3Qgc2NhbGUuXG4gIHNxcnRSdWxlVGhpY2tuZXNzOiBbMC4wNCwgMC4wNCwgMC4wNF0sXG4gIC8vIFRoaXMgdmFsdWUgZGV0ZXJtaW5lcyBob3cgbGFyZ2UgYSBwdCBpcywgZm9yIG1ldHJpY3Mgd2hpY2ggYXJlIGRlZmluZWRcbiAgLy8gaW4gdGVybXMgb2YgcHRzLlxuICAvLyBUaGlzIHZhbHVlIGlzIGFsc28gdXNlZCBpbiBrYXRleC5sZXNzOyBpZiB5b3UgY2hhbmdlIGl0IG1ha2Ugc3VyZSB0aGVcbiAgLy8gdmFsdWVzIG1hdGNoLlxuICBwdFBlckVtOiBbMTAuMCwgMTAuMCwgMTAuMF0sXG4gIC8vIFRoZSBzcGFjZSBiZXR3ZWVuIGFkamFjZW50IGB8YCBjb2x1bW5zIGluIGFuIGFycmF5IGRlZmluaXRpb24uIEZyb21cbiAgLy8gYFxcc2hvd3RoZVxcZG91YmxlcnVsZXNlcGAgaW4gTGFUZVguIEVxdWFscyAyLjAgLyBwdFBlckVtLlxuICBkb3VibGVSdWxlU2VwOiBbMC4yLCAwLjIsIDAuMl1cbn07IC8vIFRoaXMgbWFwIGNvbnRhaW5zIGEgbWFwcGluZyBmcm9tIGZvbnQgbmFtZSBhbmQgY2hhcmFjdGVyIGNvZGUgdG8gY2hhcmFjdGVyXG4vLyBtZXRyaWNzLCBpbmNsdWRpbmcgaGVpZ2h0LCBkZXB0aCwgaXRhbGljIGNvcnJlY3Rpb24sIGFuZCBza2V3IChrZXJuIGZyb20gdGhlXG4vLyBjaGFyYWN0ZXIgdG8gdGhlIGNvcnJlc3BvbmRpbmcgXFxza2V3Y2hhcilcbi8vIFRoaXMgbWFwIGlzIGdlbmVyYXRlZCB2aWEgYG1ha2UgbWV0cmljc2AuIEl0IHNob3VsZCBub3QgYmUgY2hhbmdlZCBtYW51YWxseS5cblxuIC8vIFRoZXNlIGFyZSB2ZXJ5IHJvdWdoIGFwcHJveGltYXRpb25zLiAgV2UgZGVmYXVsdCB0byBUaW1lcyBOZXcgUm9tYW4gd2hpY2hcbi8vIHNob3VsZCBoYXZlIExhdGluLTEgYW5kIEN5cmlsbGljIGNoYXJhY3RlcnMsIGJ1dCBtYXkgbm90IGRlcGVuZGluZyBvbiB0aGVcbi8vIG9wZXJhdGluZyBzeXN0ZW0uICBUaGUgbWV0cmljcyBkbyBub3QgYWNjb3VudCBmb3IgZXh0cmEgaGVpZ2h0IGZyb20gdGhlXG4vLyBhY2NlbnRzLiAgSW4gdGhlIGNhc2Ugb2YgQ3lyaWxsaWMgY2hhcmFjdGVycyB3aGljaCBoYXZlIGJvdGggYXNjZW5kZXJzIGFuZFxuLy8gZGVzY2VuZGVycyB3ZSBwcmVmZXIgYXBwcm94aW1hdGlvbnMgd2l0aCBhc2NlbmRlcnMsIHByaW1hcmlseSB0byBwcmV2ZW50XG4vLyB0aGUgZnJhY3Rpb24gYmFyIG9yIHJvb3QgbGluZSBmcm9tIGludGVyc2VjdGluZyB0aGUgZ2x5cGguXG4vLyBUT0RPKGtldmluYikgYWxsb3cgdW5pb24gb2YgbXVsdGlwbGUgZ2x5cGggbWV0cmljcyBmb3IgYmV0dGVyIGFjY3VyYWN5LlxuXG52YXIgZXh0cmFDaGFyYWN0ZXJNYXAgPSB7XG4gIC8vIExhdGluLTFcbiAgJ8OFJzogJ0EnLFxuICAnw4cnOiAnQycsXG4gICfDkCc6ICdEJyxcbiAgJ8OeJzogJ28nLFxuICAnw6UnOiAnYScsXG4gICfDpyc6ICdjJyxcbiAgJ8OwJzogJ2QnLFxuICAnw74nOiAnbycsXG4gIC8vIEN5cmlsbGljXG4gICfQkCc6ICdBJyxcbiAgJ9CRJzogJ0InLFxuICAn0JInOiAnQicsXG4gICfQkyc6ICdGJyxcbiAgJ9CUJzogJ0EnLFxuICAn0JUnOiAnRScsXG4gICfQlic6ICdLJyxcbiAgJ9CXJzogJzMnLFxuICAn0JgnOiAnTicsXG4gICfQmSc6ICdOJyxcbiAgJ9CaJzogJ0snLFxuICAn0JsnOiAnTicsXG4gICfQnCc6ICdNJyxcbiAgJ9CdJzogJ0gnLFxuICAn0J4nOiAnTycsXG4gICfQnyc6ICdOJyxcbiAgJ9CgJzogJ1AnLFxuICAn0KEnOiAnQycsXG4gICfQoic6ICdUJyxcbiAgJ9CjJzogJ3knLFxuICAn0KQnOiAnTycsXG4gICfQpSc6ICdYJyxcbiAgJ9CmJzogJ1UnLFxuICAn0KcnOiAnaCcsXG4gICfQqCc6ICdXJyxcbiAgJ9CpJzogJ1cnLFxuICAn0KonOiAnQicsXG4gICfQqyc6ICdYJyxcbiAgJ9CsJzogJ0InLFxuICAn0K0nOiAnMycsXG4gICfQric6ICdYJyxcbiAgJ9CvJzogJ1InLFxuICAn0LAnOiAnYScsXG4gICfQsSc6ICdiJyxcbiAgJ9CyJzogJ2EnLFxuICAn0LMnOiAncicsXG4gICfQtCc6ICd5JyxcbiAgJ9C1JzogJ2UnLFxuICAn0LYnOiAnbScsXG4gICfQtyc6ICdlJyxcbiAgJ9C4JzogJ24nLFxuICAn0LknOiAnbicsXG4gICfQuic6ICduJyxcbiAgJ9C7JzogJ24nLFxuICAn0LwnOiAnbScsXG4gICfQvSc6ICduJyxcbiAgJ9C+JzogJ28nLFxuICAn0L8nOiAnbicsXG4gICfRgCc6ICdwJyxcbiAgJ9GBJzogJ2MnLFxuICAn0YInOiAnbycsXG4gICfRgyc6ICd5JyxcbiAgJ9GEJzogJ2InLFxuICAn0YUnOiAneCcsXG4gICfRhic6ICduJyxcbiAgJ9GHJzogJ24nLFxuICAn0YgnOiAndycsXG4gICfRiSc6ICd3JyxcbiAgJ9GKJzogJ2EnLFxuICAn0YsnOiAnbScsXG4gICfRjCc6ICdhJyxcbiAgJ9GNJzogJ2UnLFxuICAn0Y4nOiAnbScsXG4gICfRjyc6ICdyJ1xufTtcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFkZHMgbmV3IGZvbnQgbWV0cmljcyB0byBkZWZhdWx0IG1ldHJpY01hcFxuICogSXQgY2FuIGFsc28gb3ZlcnJpZGUgZXhpc3RpbmcgbWV0cmljc1xuICovXG5mdW5jdGlvbiBzZXRGb250TWV0cmljcyhmb250TmFtZSwgbWV0cmljcykge1xuICBmb250TWV0cmljc0RhdGFbZm9udE5hbWVdID0gbWV0cmljcztcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBhIGNvbnZlbmllbmNlIGZ1bmN0aW9uIGZvciBsb29raW5nIHVwIGluZm9ybWF0aW9uIGluIHRoZVxuICogbWV0cmljTWFwIHRhYmxlLiBJdCB0YWtlcyBhIGNoYXJhY3RlciBhcyBhIHN0cmluZywgYW5kIGEgZm9udC5cbiAqXG4gKiBOb3RlOiB0aGUgYHdpZHRoYCBwcm9wZXJ0eSBtYXkgYmUgdW5kZWZpbmVkIGlmIGZvbnRNZXRyaWNzRGF0YS5qcyB3YXNuJ3RcbiAqIGJ1aWx0IHVzaW5nIGBNYWtlIGV4dGVuZGVkX21ldHJpY3NgLlxuICovXG5cbmZ1bmN0aW9uIGdldENoYXJhY3Rlck1ldHJpY3MoY2hhcmFjdGVyLCBmb250LCBtb2RlKSB7XG4gIGlmICghZm9udE1ldHJpY3NEYXRhW2ZvbnRdKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRm9udCBtZXRyaWNzIG5vdCBmb3VuZCBmb3IgZm9udDogXCIgKyBmb250ICsgXCIuXCIpO1xuICB9XG5cbiAgdmFyIGNoID0gY2hhcmFjdGVyLmNoYXJDb2RlQXQoMCk7XG4gIHZhciBtZXRyaWNzID0gZm9udE1ldHJpY3NEYXRhW2ZvbnRdW2NoXTtcblxuICBpZiAoIW1ldHJpY3MgJiYgY2hhcmFjdGVyWzBdIGluIGV4dHJhQ2hhcmFjdGVyTWFwKSB7XG4gICAgY2ggPSBleHRyYUNoYXJhY3Rlck1hcFtjaGFyYWN0ZXJbMF1dLmNoYXJDb2RlQXQoMCk7XG4gICAgbWV0cmljcyA9IGZvbnRNZXRyaWNzRGF0YVtmb250XVtjaF07XG4gIH1cblxuICBpZiAoIW1ldHJpY3MgJiYgbW9kZSA9PT0gJ3RleHQnKSB7XG4gICAgLy8gV2UgZG9uJ3QgdHlwaWNhbGx5IGhhdmUgZm9udCBtZXRyaWNzIGZvciBBc2lhbiBzY3JpcHRzLlxuICAgIC8vIEJ1dCBzaW5jZSB3ZSBzdXBwb3J0IHRoZW0gaW4gdGV4dCBtb2RlLCB3ZSBuZWVkIHRvIHJldHVyblxuICAgIC8vIHNvbWUgc29ydCBvZiBtZXRyaWNzLlxuICAgIC8vIFNvIGlmIHRoZSBjaGFyYWN0ZXIgaXMgaW4gYSBzY3JpcHQgd2Ugc3VwcG9ydCBidXQgd2VcbiAgICAvLyBkb24ndCBoYXZlIG1ldHJpY3MgZm9yIGl0LCBqdXN0IHVzZSB0aGUgbWV0cmljcyBmb3JcbiAgICAvLyB0aGUgTGF0aW4gY2FwaXRhbCBsZXR0ZXIgTS4gVGhpcyBpcyBjbG9zZSBlbm91Z2ggYmVjYXVzZVxuICAgIC8vIHdlIChjdXJyZW50bHkpIG9ubHkgY2FyZSBhYm91dCB0aGUgaGVpZ2h0IG9mIHRoZSBnbHB5aFxuICAgIC8vIG5vdCBpdHMgd2lkdGguXG4gICAgaWYgKHN1cHBvcnRlZENvZGVwb2ludChjaCkpIHtcbiAgICAgIG1ldHJpY3MgPSBmb250TWV0cmljc0RhdGFbZm9udF1bNzddOyAvLyA3NyBpcyB0aGUgY2hhcmNvZGUgZm9yICdNJ1xuICAgIH1cbiAgfVxuXG4gIGlmIChtZXRyaWNzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRlcHRoOiBtZXRyaWNzWzBdLFxuICAgICAgaGVpZ2h0OiBtZXRyaWNzWzFdLFxuICAgICAgaXRhbGljOiBtZXRyaWNzWzJdLFxuICAgICAgc2tldzogbWV0cmljc1szXSxcbiAgICAgIHdpZHRoOiBtZXRyaWNzWzRdXG4gICAgfTtcbiAgfVxufVxudmFyIGZvbnRNZXRyaWNzQnlTaXplSW5kZXggPSB7fTtcbi8qKlxuICogR2V0IHRoZSBmb250IG1ldHJpY3MgZm9yIGEgZ2l2ZW4gc2l6ZS5cbiAqL1xuXG5mdW5jdGlvbiBnZXRHbG9iYWxNZXRyaWNzKHNpemUpIHtcbiAgdmFyIHNpemVJbmRleDtcblxuICBpZiAoc2l6ZSA+PSA1KSB7XG4gICAgc2l6ZUluZGV4ID0gMDtcbiAgfSBlbHNlIGlmIChzaXplID49IDMpIHtcbiAgICBzaXplSW5kZXggPSAxO1xuICB9IGVsc2Uge1xuICAgIHNpemVJbmRleCA9IDI7XG4gIH1cblxuICBpZiAoIWZvbnRNZXRyaWNzQnlTaXplSW5kZXhbc2l6ZUluZGV4XSkge1xuICAgIHZhciBtZXRyaWNzID0gZm9udE1ldHJpY3NCeVNpemVJbmRleFtzaXplSW5kZXhdID0ge1xuICAgICAgY3NzRW1QZXJNdTogc2lnbWFzQW5kWGlzLnF1YWRbc2l6ZUluZGV4XSAvIDE4XG4gICAgfTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzaWdtYXNBbmRYaXMpIHtcbiAgICAgIGlmIChzaWdtYXNBbmRYaXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBtZXRyaWNzW2tleV0gPSBzaWdtYXNBbmRYaXNba2V5XVtzaXplSW5kZXhdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmb250TWV0cmljc0J5U2l6ZUluZGV4W3NpemVJbmRleF07XG59XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9zeW1ib2xzLmpzXG4vKipcbiAqIFRoaXMgZmlsZSBob2xkcyBhIGxpc3Qgb2YgYWxsIG5vLWFyZ3VtZW50IGZ1bmN0aW9ucyBhbmQgc2luZ2xlLWNoYXJhY3RlclxuICogc3ltYm9scyAobGlrZSAnYScgb3IgJzsnKS5cbiAqXG4gKiBGb3IgZWFjaCBvZiB0aGUgc3ltYm9scywgdGhlcmUgYXJlIHRocmVlIHByb3BlcnRpZXMgdGhleSBjYW4gaGF2ZTpcbiAqIC0gZm9udCAocmVxdWlyZWQpOiB0aGUgZm9udCB0byBiZSB1c2VkIGZvciB0aGlzIHN5bWJvbC4gRWl0aGVyIFwibWFpblwiICh0aGVcbiAgICAgbm9ybWFsIGZvbnQpLCBvciBcImFtc1wiICh0aGUgYW1zIGZvbnRzKS5cbiAqIC0gZ3JvdXAgKHJlcXVpcmVkKTogdGhlIFBhcnNlTm9kZSBncm91cCB0eXBlIHRoZSBzeW1ib2wgc2hvdWxkIGhhdmUgKGkuZS5cbiAgICAgXCJ0ZXh0b3JkXCIsIFwibWF0aG9yZFwiLCBldGMpLlxuICAgICBTZWUgaHR0cHM6Ly9naXRodWIuY29tL0thVGVYL0thVGVYL3dpa2kvRXhhbWluaW5nLVRlWCNncm91cC10eXBlc1xuICogLSByZXBsYWNlOiB0aGUgY2hhcmFjdGVyIHRoYXQgdGhpcyBzeW1ib2wgb3IgZnVuY3Rpb24gc2hvdWxkIGJlXG4gKiAgIHJlcGxhY2VkIHdpdGggKGkuZS4gXCJcXHBoaVwiIGhhcyBhIHJlcGxhY2UgdmFsdWUgb2YgXCJcXHUwM2Q1XCIsIHRoZSBwaGlcbiAqICAgY2hhcmFjdGVyIGluIHRoZSBtYWluIGZvbnQpLlxuICpcbiAqIFRoZSBvdXRlcm1vc3QgbWFwIGluIHRoZSB0YWJsZSBpbmRpY2F0ZXMgd2hhdCBtb2RlIHRoZSBzeW1ib2xzIHNob3VsZCBiZVxuICogYWNjZXB0ZWQgaW4gKGUuZy4gXCJtYXRoXCIgb3IgXCJ0ZXh0XCIpLlxuICovXG4vLyBTb21lIG9mIHRoZXNlIGhhdmUgYSBcIi10b2tlblwiIHN1ZmZpeCBzaW5jZSB0aGVzZSBhcmUgYWxzbyB1c2VkIGFzIGBQYXJzZU5vZGVgXG4vLyB0eXBlcyBmb3IgcmF3IHRleHQgdG9rZW5zLCBhbmQgd2Ugd2FudCB0byBhdm9pZCBjb25mbGljdHMgd2l0aCBoaWdoZXItbGV2ZWxcbi8vIGBQYXJzZU5vZGVgIHR5cGVzLiBUaGVzZSBgUGFyc2VOb2RlYHMgYXJlIGNvbnN0cnVjdGVkIHdpdGhpbiBgUGFyc2VyYCBieVxuLy8gbG9va2luZyB1cCB0aGUgYHN5bWJvbHNgIG1hcC5cbnZhciBBVE9NUyA9IHtcbiAgXCJiaW5cIjogMSxcbiAgXCJjbG9zZVwiOiAxLFxuICBcImlubmVyXCI6IDEsXG4gIFwib3BlblwiOiAxLFxuICBcInB1bmN0XCI6IDEsXG4gIFwicmVsXCI6IDFcbn07XG52YXIgTk9OX0FUT01TID0ge1xuICBcImFjY2VudC10b2tlblwiOiAxLFxuICBcIm1hdGhvcmRcIjogMSxcbiAgXCJvcC10b2tlblwiOiAxLFxuICBcInNwYWNpbmdcIjogMSxcbiAgXCJ0ZXh0b3JkXCI6IDFcbn07XG52YXIgc3ltYm9scyA9IHtcbiAgXCJtYXRoXCI6IHt9LFxuICBcInRleHRcIjoge31cbn07XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBzcmNfc3ltYm9scyA9IChzeW1ib2xzKTtcbi8qKiBgYWNjZXB0VW5pY29kZUNoYXIgPSB0cnVlYCBpcyBvbmx5IGFwcGxpY2FibGUgaWYgYHJlcGxhY2VgIGlzIHNldC4gKi9cblxuZnVuY3Rpb24gZGVmaW5lU3ltYm9sKG1vZGUsIGZvbnQsIGdyb3VwLCByZXBsYWNlLCBuYW1lLCBhY2NlcHRVbmljb2RlQ2hhcikge1xuICBzeW1ib2xzW21vZGVdW25hbWVdID0ge1xuICAgIGZvbnQ6IGZvbnQsXG4gICAgZ3JvdXA6IGdyb3VwLFxuICAgIHJlcGxhY2U6IHJlcGxhY2VcbiAgfTtcblxuICBpZiAoYWNjZXB0VW5pY29kZUNoYXIgJiYgcmVwbGFjZSkge1xuICAgIHN5bWJvbHNbbW9kZV1bcmVwbGFjZV0gPSBzeW1ib2xzW21vZGVdW25hbWVdO1xuICB9XG59IC8vIFNvbWUgYWJicmV2aWF0aW9ucyBmb3IgY29tbW9ubHkgdXNlZCBzdHJpbmdzLlxuLy8gVGhpcyBoZWxwcyBtaW5pZnkgdGhlIGNvZGUsIGFuZCBhbHNvIHNwb3R0aW5nIHR5cG9zIHVzaW5nIGpzaGludC5cbi8vIG1vZGVzOlxuXG52YXIgc3ltYm9sc19tYXRoID0gXCJtYXRoXCI7XG52YXIgc3ltYm9sc190ZXh0ID0gXCJ0ZXh0XCI7IC8vIGZvbnRzOlxuXG52YXIgbWFpbiA9IFwibWFpblwiO1xudmFyIGFtcyA9IFwiYW1zXCI7IC8vIGdyb3VwczpcblxudmFyIHN5bWJvbHNfYWNjZW50ID0gXCJhY2NlbnQtdG9rZW5cIjtcbnZhciBiaW4gPSBcImJpblwiO1xudmFyIHN5bWJvbHNfY2xvc2UgPSBcImNsb3NlXCI7XG52YXIgc3ltYm9sc19pbm5lciA9IFwiaW5uZXJcIjtcbnZhciBtYXRob3JkID0gXCJtYXRob3JkXCI7XG52YXIgb3AgPSBcIm9wLXRva2VuXCI7XG52YXIgc3ltYm9sc19vcGVuID0gXCJvcGVuXCI7XG52YXIgcHVuY3QgPSBcInB1bmN0XCI7XG52YXIgcmVsID0gXCJyZWxcIjtcbnZhciBzeW1ib2xzX3NwYWNpbmcgPSBcInNwYWNpbmdcIjtcbnZhciBzeW1ib2xzX3RleHRvcmQgPSBcInRleHRvcmRcIjsgLy8gTm93IGNvbWVzIHRoZSBzeW1ib2wgdGFibGVcbi8vIFJlbGF0aW9uIFN5bWJvbHNcblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIyNjFcIiwgXCJcXFxcZXF1aXZcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MjI3QVwiLCBcIlxcXFxwcmVjXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIyN0JcIiwgXCJcXFxcc3VjY1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHJlbCwgXCJcXHUyMjNDXCIsIFwiXFxcXHNpbVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHJlbCwgXCJcXHUyMkE1XCIsIFwiXFxcXHBlcnBcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MkFBRlwiLCBcIlxcXFxwcmVjZXFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MkFCMFwiLCBcIlxcXFxzdWNjZXFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MjI0M1wiLCBcIlxcXFxzaW1lcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHJlbCwgXCJcXHUyMjIzXCIsIFwiXFxcXG1pZFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHJlbCwgXCJcXHUyMjZBXCIsIFwiXFxcXGxsXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIyNkJcIiwgXCJcXFxcZ2dcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MjI0RFwiLCBcIlxcXFxhc3ltcFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHJlbCwgXCJcXHUyMjI1XCIsIFwiXFxcXHBhcmFsbGVsXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIyQzhcIiwgXCJcXFxcYm93dGllXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIzMjNcIiwgXCJcXFxcc21pbGVcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MjI5MVwiLCBcIlxcXFxzcXN1YnNldGVxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIyOTJcIiwgXCJcXFxcc3FzdXBzZXRlcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHJlbCwgXCJcXHUyMjUwXCIsIFwiXFxcXGRvdGVxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIzMjJcIiwgXCJcXFxcZnJvd25cIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MjIwQlwiLCBcIlxcXFxuaVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHJlbCwgXCJcXHUyMjFEXCIsIFwiXFxcXHByb3B0b1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHJlbCwgXCJcXHUyMkEyXCIsIFwiXFxcXHZkYXNoXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIyQTNcIiwgXCJcXFxcZGFzaHZcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MjIwQlwiLCBcIlxcXFxvd25zXCIpOyAvLyBQdW5jdHVhdGlvblxuXG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBwdW5jdCwgXCIuXCIsIFwiXFxcXGxkb3RwXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgcHVuY3QsIFwiXFx1MjJDNVwiLCBcIlxcXFxjZG90cFwiKTsgLy8gTWlzYyBTeW1ib2xzXG5cbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCIjXCIsIFwiXFxcXCNcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiI1wiLCBcIlxcXFwjXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIiZcIiwgXCJcXFxcJlwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCImXCIsIFwiXFxcXCZcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjEzNVwiLCBcIlxcXFxhbGVwaFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyMjAwXCIsIFwiXFxcXGZvcmFsbFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyMTBGXCIsIFwiXFxcXGhiYXJcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjIwM1wiLCBcIlxcXFxleGlzdHNcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjIwN1wiLCBcIlxcXFxuYWJsYVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyNjZEXCIsIFwiXFxcXGZsYXRcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjExM1wiLCBcIlxcXFxlbGxcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjY2RVwiLCBcIlxcXFxuYXR1cmFsXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIlxcdTI2NjNcIiwgXCJcXFxcY2x1YnN1aXRcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjExOFwiLCBcIlxcXFx3cFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyNjZGXCIsIFwiXFxcXHNoYXJwXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIlxcdTI2NjJcIiwgXCJcXFxcZGlhbW9uZHN1aXRcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjExQ1wiLCBcIlxcXFxSZVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyNjYxXCIsIFwiXFxcXGhlYXJ0c3VpdFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyMTExXCIsIFwiXFxcXEltXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIlxcdTI2NjBcIiwgXCJcXFxcc3BhZGVzdWl0XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIlxceEE3XCIsIFwiXFxcXFNcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx4QjZcIiwgXCJcXFxcUFwiLCB0cnVlKTsgLy8gTWF0aCBhbmQgVGV4dFxuXG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjAyMFwiLCBcIlxcXFxkYWdcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjAyMFwiLCBcIlxcXFxkYWdcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjAyMFwiLCBcIlxcXFx0ZXh0ZGFnZ2VyXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIlxcdTIwMjFcIiwgXCJcXFxcZGRhZ1wiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyMDIxXCIsIFwiXFxcXGRkYWdcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjAyMVwiLCBcIlxcXFx0ZXh0ZGFnZ2VyZGJsXCIpOyAvLyBMYXJnZSBEZWxpbWl0ZXJzXG5cbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfY2xvc2UsIFwiXFx1MjNCMVwiLCBcIlxcXFxybW91c3RhY2hlXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgc3ltYm9sc19vcGVuLCBcIlxcdTIzQjBcIiwgXCJcXFxcbG1vdXN0YWNoZVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfY2xvc2UsIFwiXFx1MjdFRlwiLCBcIlxcXFxyZ3JvdXBcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX29wZW4sIFwiXFx1MjdFRVwiLCBcIlxcXFxsZ3JvdXBcIiwgdHJ1ZSk7IC8vIEJpbmFyeSBPcGVyYXRvcnNcblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgYmluLCBcIlxcdTIyMTNcIiwgXCJcXFxcbXBcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBiaW4sIFwiXFx1MjI5NlwiLCBcIlxcXFxvbWludXNcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBiaW4sIFwiXFx1MjI4RVwiLCBcIlxcXFx1cGx1c1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIGJpbiwgXCJcXHUyMjkzXCIsIFwiXFxcXHNxY2FwXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgYmluLCBcIlxcdTIyMTdcIiwgXCJcXFxcYXN0XCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgYmluLCBcIlxcdTIyOTRcIiwgXCJcXFxcc3FjdXBcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBiaW4sIFwiXFx1MjVFRlwiLCBcIlxcXFxiaWdjaXJjXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgYmluLCBcIlxcdTIyMTlcIiwgXCJcXFxcYnVsbGV0XCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgYmluLCBcIlxcdTIwMjFcIiwgXCJcXFxcZGRhZ2dlclwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIGJpbiwgXCJcXHUyMjQwXCIsIFwiXFxcXHdyXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgYmluLCBcIlxcdTJBM0ZcIiwgXCJcXFxcYW1hbGdcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBiaW4sIFwiJlwiLCBcIlxcXFxBbmRcIik7IC8vIGZyb20gYW1zbWF0aFxuLy8gQXJyb3cgU3ltYm9sc1xuXG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MjdGNVwiLCBcIlxcXFxsb25nbGVmdGFycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIxRDBcIiwgXCJcXFxcTGVmdGFycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgcmVsLCBcIlxcdTI3RjhcIiwgXCJcXFxcTG9uZ2xlZnRhcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHJlbCwgXCJcXHUyN0Y2XCIsIFwiXFxcXGxvbmdyaWdodGFycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIxRDJcIiwgXCJcXFxcUmlnaHRhcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHJlbCwgXCJcXHUyN0Y5XCIsIFwiXFxcXExvbmdyaWdodGFycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIxOTRcIiwgXCJcXFxcbGVmdHJpZ2h0YXJyb3dcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MjdGN1wiLCBcIlxcXFxsb25nbGVmdHJpZ2h0YXJyb3dcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MjFENFwiLCBcIlxcXFxMZWZ0cmlnaHRhcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHJlbCwgXCJcXHUyN0ZBXCIsIFwiXFxcXExvbmdsZWZ0cmlnaHRhcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHJlbCwgXCJcXHUyMUE2XCIsIFwiXFxcXG1hcHN0b1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHJlbCwgXCJcXHUyN0ZDXCIsIFwiXFxcXGxvbmdtYXBzdG9cIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MjE5N1wiLCBcIlxcXFxuZWFycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIxQTlcIiwgXCJcXFxcaG9va2xlZnRhcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHJlbCwgXCJcXHUyMUFBXCIsIFwiXFxcXGhvb2tyaWdodGFycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIxOThcIiwgXCJcXFxcc2VhcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHJlbCwgXCJcXHUyMUJDXCIsIFwiXFxcXGxlZnRoYXJwb29udXBcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MjFDMFwiLCBcIlxcXFxyaWdodGhhcnBvb251cFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHJlbCwgXCJcXHUyMTk5XCIsIFwiXFxcXHN3YXJyb3dcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MjFCRFwiLCBcIlxcXFxsZWZ0aGFycG9vbmRvd25cIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MjFDMVwiLCBcIlxcXFxyaWdodGhhcnBvb25kb3duXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIxOTZcIiwgXCJcXFxcbndhcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHJlbCwgXCJcXHUyMUNDXCIsIFwiXFxcXHJpZ2h0bGVmdGhhcnBvb25zXCIsIHRydWUpOyAvLyBBTVMgTmVnYXRlZCBCaW5hcnkgUmVsYXRpb25zXG5cbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyNkVcIiwgXCJcXFxcbmxlc3NcIiwgdHJ1ZSk7IC8vIFN5bWJvbCBuYW1lcyBwcmVjZWVkZWQgYnkgXCJAXCIgZWFjaCBoYXZlIGEgY29ycmVzcG9uZGluZyBtYWNyby5cblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1RTAxMFwiLCBcIlxcXFxAbmxlcXNsYW50XCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1RTAxMVwiLCBcIlxcXFxAbmxlcXFcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyQTg3XCIsIFwiXFxcXGxuZXFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjY4XCIsIFwiXFxcXGxuZXFxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1RTAwQ1wiLCBcIlxcXFxAbHZlcnRuZXFxXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjJFNlwiLCBcIlxcXFxsbnNpbVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTJBODlcIiwgXCJcXFxcbG5hcHByb3hcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjgwXCIsIFwiXFxcXG5wcmVjXCIsIHRydWUpOyAvLyB1bmljb2RlLW1hdGggbWFwcyBcXHUyMmUwIHRvIFxcbnByZWNjdXJseWVxLiBXZSdsbCB1c2UgdGhlIEFNUyBzeW5vbnltLlxuXG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMkUwXCIsIFwiXFxcXG5wcmVjZXFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMkU4XCIsIFwiXFxcXHByZWNuc2ltXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MkFCOVwiLCBcIlxcXFxwcmVjbmFwcHJveFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyNDFcIiwgXCJcXFxcbnNpbVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdUUwMDZcIiwgXCJcXFxcQG5zaG9ydG1pZFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyMjRcIiwgXCJcXFxcbm1pZFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyQUNcIiwgXCJcXFxcbnZkYXNoXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjJBRFwiLCBcIlxcXFxudkRhc2hcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMkVBXCIsIFwiXFxcXG50cmlhbmdsZWxlZnRcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMkVDXCIsIFwiXFxcXG50cmlhbmdsZWxlZnRlcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyOEFcIiwgXCJcXFxcc3Vic2V0bmVxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1RTAxQVwiLCBcIlxcXFxAdmFyc3Vic2V0bmVxXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MkFDQlwiLCBcIlxcXFxzdWJzZXRuZXFxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1RTAxN1wiLCBcIlxcXFxAdmFyc3Vic2V0bmVxcVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyNkZcIiwgXCJcXFxcbmd0clwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdUUwMEZcIiwgXCJcXFxcQG5nZXFzbGFudFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdUUwMEVcIiwgXCJcXFxcQG5nZXFxXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MkE4OFwiLCBcIlxcXFxnbmVxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjI2OVwiLCBcIlxcXFxnbmVxcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdUUwMERcIiwgXCJcXFxcQGd2ZXJ0bmVxcVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyRTdcIiwgXCJcXFxcZ25zaW1cIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyQThBXCIsIFwiXFxcXGduYXBwcm94XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjI4MVwiLCBcIlxcXFxuc3VjY1wiLCB0cnVlKTsgLy8gdW5pY29kZS1tYXRoIG1hcHMgXFx1MjJlMSB0byBcXG5zdWNjY3VybHllcS4gV2UnbGwgdXNlIHRoZSBBTVMgc3lub255bS5cblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjJFMVwiLCBcIlxcXFxuc3VjY2VxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjJFOVwiLCBcIlxcXFxzdWNjbnNpbVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTJBQkFcIiwgXCJcXFxcc3VjY25hcHByb3hcIiwgdHJ1ZSk7IC8vIHVuaWNvZGUtbWF0aCBtYXBzIFxcdTIyNDYgdG8gXFxzaW1uZXFxLiBXZSdsbCB1c2UgdGhlIEFNUyBzeW5vbnltLlxuXG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjQ2XCIsIFwiXFxcXG5jb25nXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1RTAwN1wiLCBcIlxcXFxAbnNob3J0cGFyYWxsZWxcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjI2XCIsIFwiXFxcXG5wYXJhbGxlbFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyQUZcIiwgXCJcXFxcblZEYXNoXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjJFQlwiLCBcIlxcXFxudHJpYW5nbGVyaWdodFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyRURcIiwgXCJcXFxcbnRyaWFuZ2xlcmlnaHRlcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdUUwMThcIiwgXCJcXFxcQG5zdXBzZXRlcXFcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjhCXCIsIFwiXFxcXHN1cHNldG5lcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdUUwMUJcIiwgXCJcXFxcQHZhcnN1cHNldG5lcVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTJBQ0NcIiwgXCJcXFxcc3Vwc2V0bmVxcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdUUwMTlcIiwgXCJcXFxcQHZhcnN1cHNldG5lcXFcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMkFFXCIsIFwiXFxcXG5WZGFzaFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTJBQjVcIiwgXCJcXFxccHJlY25lcXFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyQUI2XCIsIFwiXFxcXHN1Y2NuZXFxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1RTAxNlwiLCBcIlxcXFxAbnN1YnNldGVxcVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgYmluLCBcIlxcdTIyQjRcIiwgXCJcXFxcdW5saGRcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIGJpbiwgXCJcXHUyMkI1XCIsIFwiXFxcXHVucmhkXCIpOyAvLyBBTVMgTmVnYXRlZCBBcnJvd3NcblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjE5QVwiLCBcIlxcXFxubGVmdGFycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjE5QlwiLCBcIlxcXFxucmlnaHRhcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIxQ0RcIiwgXCJcXFxcbkxlZnRhcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIxQ0ZcIiwgXCJcXFxcblJpZ2h0YXJyb3dcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMUFFXCIsIFwiXFxcXG5sZWZ0cmlnaHRhcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIxQ0VcIiwgXCJcXFxcbkxlZnRyaWdodGFycm93XCIsIHRydWUpOyAvLyBBTVMgTWlzY1xuXG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyNUIzXCIsIFwiXFxcXHZhcnRyaWFuZ2xlXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjEwRlwiLCBcIlxcXFxoc2xhc2hcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyNUJEXCIsIFwiXFxcXHRyaWFuZ2xlZG93blwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgc3ltYm9sc190ZXh0b3JkLCBcIlxcdTI1Q0FcIiwgXCJcXFxcbG96ZW5nZVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgc3ltYm9sc190ZXh0b3JkLCBcIlxcdTI0QzhcIiwgXCJcXFxcY2lyY2xlZFNcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHhBRVwiLCBcIlxcXFxjaXJjbGVkUlwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIGFtcywgc3ltYm9sc190ZXh0b3JkLCBcIlxceEFFXCIsIFwiXFxcXGNpcmNsZWRSXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjIyMVwiLCBcIlxcXFxtZWFzdXJlZGFuZ2xlXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjIwNFwiLCBcIlxcXFxuZXhpc3RzXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjEyN1wiLCBcIlxcXFxtaG9cIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyMTMyXCIsIFwiXFxcXEZpbnZcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyMTQxXCIsIFwiXFxcXEdhbWVcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyMDM1XCIsIFwiXFxcXGJhY2twcmltZVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgc3ltYm9sc190ZXh0b3JkLCBcIlxcdTI1QjJcIiwgXCJcXFxcYmxhY2t0cmlhbmdsZVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgc3ltYm9sc190ZXh0b3JkLCBcIlxcdTI1QkNcIiwgXCJcXFxcYmxhY2t0cmlhbmdsZWRvd25cIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyNUEwXCIsIFwiXFxcXGJsYWNrc3F1YXJlXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjlFQlwiLCBcIlxcXFxibGFja2xvemVuZ2VcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyNjA1XCIsIFwiXFxcXGJpZ3N0YXJcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyMjIyXCIsIFwiXFxcXHNwaGVyaWNhbGFuZ2xlXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjIwMVwiLCBcIlxcXFxjb21wbGVtZW50XCIsIHRydWUpOyAvLyB1bmljb2RlLW1hdGggbWFwcyBVK0YwICjDsCkgdG8gXFxtYXRoZXRoLiBXZSBtYXAgdG8gQU1TIGZ1bmN0aW9uIFxcZXRoXG5cbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgc3ltYm9sc190ZXh0b3JkLCBcIlxceEYwXCIsIFwiXFxcXGV0aFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgc3ltYm9sc190ZXh0b3JkLCBcIlxcdTI1NzFcIiwgXCJcXFxcZGlhZ3VwXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjU3MlwiLCBcIlxcXFxkaWFnZG93blwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgc3ltYm9sc190ZXh0b3JkLCBcIlxcdTI1QTFcIiwgXCJcXFxcc3F1YXJlXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjVBMVwiLCBcIlxcXFxCb3hcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyNUNBXCIsIFwiXFxcXERpYW1vbmRcIik7IC8vIHVuaWNvZGUtbWF0aCBtYXBzIFUrQTUgdG8gXFxtYXRoeWVuLiBXZSBtYXAgdG8gQU1TIGZ1bmN0aW9uIFxceWVuXG5cbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgc3ltYm9sc190ZXh0b3JkLCBcIlxceEE1XCIsIFwiXFxcXHllblwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIGFtcywgc3ltYm9sc190ZXh0b3JkLCBcIlxceEE1XCIsIFwiXFxcXHllblwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgc3ltYm9sc190ZXh0b3JkLCBcIlxcdTI3MTNcIiwgXCJcXFxcY2hlY2ttYXJrXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgYW1zLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjcxM1wiLCBcIlxcXFxjaGVja21hcmtcIik7IC8vIEFNUyBIZWJyZXdcblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjEzNlwiLCBcIlxcXFxiZXRoXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjEzOFwiLCBcIlxcXFxkYWxldGhcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyMTM3XCIsIFwiXFxcXGdpbWVsXCIsIHRydWUpOyAvLyBBTVMgR3JlZWtcblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MDNERFwiLCBcIlxcXFxkaWdhbW1hXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MDNGMFwiLCBcIlxcXFx2YXJrYXBwYVwiKTsgLy8gQU1TIERlbGltaXRlcnNcblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBzeW1ib2xzX29wZW4sIFwiXFx1MjUwQ1wiLCBcIlxcXFx1bGNvcm5lclwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgc3ltYm9sc19jbG9zZSwgXCJcXHUyNTEwXCIsIFwiXFxcXHVyY29ybmVyXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBzeW1ib2xzX29wZW4sIFwiXFx1MjUxNFwiLCBcIlxcXFxsbGNvcm5lclwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgc3ltYm9sc19jbG9zZSwgXCJcXHUyNTE4XCIsIFwiXFxcXGxyY29ybmVyXCIsIHRydWUpOyAvLyBBTVMgQmluYXJ5IFJlbGF0aW9uc1xuXG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjY2XCIsIFwiXFxcXGxlcXFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyQTdEXCIsIFwiXFxcXGxlcXNsYW50XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MkE5NVwiLCBcIlxcXFxlcXNsYW50bGVzc1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyNzJcIiwgXCJcXFxcbGVzc3NpbVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTJBODVcIiwgXCJcXFxcbGVzc2FwcHJveFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyNEFcIiwgXCJcXFxcYXBwcm94ZXFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIGJpbiwgXCJcXHUyMkQ2XCIsIFwiXFxcXGxlc3Nkb3RcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMkQ4XCIsIFwiXFxcXGxsbFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyNzZcIiwgXCJcXFxcbGVzc2d0clwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyREFcIiwgXCJcXFxcbGVzc2VxZ3RyXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MkE4QlwiLCBcIlxcXFxsZXNzZXFxZ3RyXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjI1MVwiLCBcIlxcXFxkb3RlcWRvdFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyNTNcIiwgXCJcXFxccmlzaW5nZG90c2VxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjI1MlwiLCBcIlxcXFxmYWxsaW5nZG90c2VxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjIzRFwiLCBcIlxcXFxiYWNrc2ltXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjJDRFwiLCBcIlxcXFxiYWNrc2ltZXFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyQUM1XCIsIFwiXFxcXHN1YnNldGVxcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyRDBcIiwgXCJcXFxcU3Vic2V0XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjI4RlwiLCBcIlxcXFxzcXN1YnNldFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyN0NcIiwgXCJcXFxccHJlY2N1cmx5ZXFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMkRFXCIsIFwiXFxcXGN1cmx5ZXFwcmVjXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjI3RVwiLCBcIlxcXFxwcmVjc2ltXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MkFCN1wiLCBcIlxcXFxwcmVjYXBwcm94XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjJCMlwiLCBcIlxcXFx2YXJ0cmlhbmdsZWxlZnRcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMkI0XCIsIFwiXFxcXHRyaWFuZ2xlbGVmdGVxXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjJBOFwiLCBcIlxcXFx2RGFzaFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyQUFcIiwgXCJcXFxcVnZkYXNoXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjMyM1wiLCBcIlxcXFxzbWFsbHNtaWxlXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjMyMlwiLCBcIlxcXFxzbWFsbGZyb3duXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjI0RlwiLCBcIlxcXFxidW1wZXFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjRFXCIsIFwiXFxcXEJ1bXBlcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyNjdcIiwgXCJcXFxcZ2VxcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTJBN0VcIiwgXCJcXFxcZ2Vxc2xhbnRcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyQTk2XCIsIFwiXFxcXGVxc2xhbnRndHJcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjczXCIsIFwiXFxcXGd0cnNpbVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTJBODZcIiwgXCJcXFxcZ3RyYXBwcm94XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBiaW4sIFwiXFx1MjJEN1wiLCBcIlxcXFxndHJkb3RcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMkQ5XCIsIFwiXFxcXGdnZ1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyNzdcIiwgXCJcXFxcZ3RybGVzc1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyREJcIiwgXCJcXFxcZ3RyZXFsZXNzXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MkE4Q1wiLCBcIlxcXFxndHJlcXFsZXNzXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjI1NlwiLCBcIlxcXFxlcWNpcmNcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjU3XCIsIFwiXFxcXGNpcmNlcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyNUNcIiwgXCJcXFxcdHJpYW5nbGVxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjIzQ1wiLCBcIlxcXFx0aGlja3NpbVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyNDhcIiwgXCJcXFxcdGhpY2thcHByb3hcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyQUM2XCIsIFwiXFxcXHN1cHNldGVxcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyRDFcIiwgXCJcXFxcU3Vwc2V0XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjI5MFwiLCBcIlxcXFxzcXN1cHNldFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyN0RcIiwgXCJcXFxcc3VjY2N1cmx5ZXFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMkRGXCIsIFwiXFxcXGN1cmx5ZXFzdWNjXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjI3RlwiLCBcIlxcXFxzdWNjc2ltXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MkFCOFwiLCBcIlxcXFxzdWNjYXBwcm94XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjJCM1wiLCBcIlxcXFx2YXJ0cmlhbmdsZXJpZ2h0XCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjJCNVwiLCBcIlxcXFx0cmlhbmdsZXJpZ2h0ZXFcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMkE5XCIsIFwiXFxcXFZkYXNoXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjIyM1wiLCBcIlxcXFxzaG9ydG1pZFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyMjVcIiwgXCJcXFxcc2hvcnRwYXJhbGxlbFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyNkNcIiwgXCJcXFxcYmV0d2VlblwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyRDRcIiwgXCJcXFxccGl0Y2hmb3JrXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjIxRFwiLCBcIlxcXFx2YXJwcm9wdG9cIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyNUMwXCIsIFwiXFxcXGJsYWNrdHJpYW5nbGVsZWZ0XCIpOyAvLyB1bmljb2RlLW1hdGggc2F5cyB0aGF0IFxcdGhlcmVmb3JlIGlzIGEgbWF0aG9yZCBhdG9tLlxuLy8gV2Uga2VwdCB0aGUgYW1zc3ltYiBhdG9tIHR5cGUsIHdoaWNoIGlzIHJlbC5cblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjIzNFwiLCBcIlxcXFx0aGVyZWZvcmVcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjBEXCIsIFwiXFxcXGJhY2tlcHNpbG9uXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjVCNlwiLCBcIlxcXFxibGFja3RyaWFuZ2xlcmlnaHRcIik7IC8vIHVuaWNvZGUtbWF0aCBzYXlzIHRoYXQgXFxiZWNhdXNlIGlzIGEgbWF0aG9yZCBhdG9tLlxuLy8gV2Uga2VwdCB0aGUgYW1zc3ltYiBhdG9tIHR5cGUsIHdoaWNoIGlzIHJlbC5cblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjIzNVwiLCBcIlxcXFxiZWNhdXNlXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjJEOFwiLCBcIlxcXFxsbGxlc3NcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMkQ5XCIsIFwiXFxcXGdnZ3RyXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBiaW4sIFwiXFx1MjJCMlwiLCBcIlxcXFxsaGRcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIGJpbiwgXCJcXHUyMkIzXCIsIFwiXFxcXHJoZFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIyNDJcIiwgXCJcXFxcZXFzaW1cIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MjJDOFwiLCBcIlxcXFxKb2luXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjI1MVwiLCBcIlxcXFxEb3RlcVwiLCB0cnVlKTsgLy8gQU1TIEJpbmFyeSBPcGVyYXRvcnNcblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBiaW4sIFwiXFx1MjIxNFwiLCBcIlxcXFxkb3RwbHVzXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBiaW4sIFwiXFx1MjIxNlwiLCBcIlxcXFxzbWFsbHNldG1pbnVzXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBiaW4sIFwiXFx1MjJEMlwiLCBcIlxcXFxDYXBcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIGJpbiwgXCJcXHUyMkQzXCIsIFwiXFxcXEN1cFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgYmluLCBcIlxcdTJBNUVcIiwgXCJcXFxcZG91YmxlYmFyd2VkZ2VcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIGJpbiwgXCJcXHUyMjlGXCIsIFwiXFxcXGJveG1pbnVzXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBiaW4sIFwiXFx1MjI5RVwiLCBcIlxcXFxib3hwbHVzXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBiaW4sIFwiXFx1MjJDN1wiLCBcIlxcXFxkaXZpZGVvbnRpbWVzXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBiaW4sIFwiXFx1MjJDOVwiLCBcIlxcXFxsdGltZXNcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIGJpbiwgXCJcXHUyMkNBXCIsIFwiXFxcXHJ0aW1lc1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgYmluLCBcIlxcdTIyQ0JcIiwgXCJcXFxcbGVmdHRocmVldGltZXNcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIGJpbiwgXCJcXHUyMkNDXCIsIFwiXFxcXHJpZ2h0dGhyZWV0aW1lc1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgYmluLCBcIlxcdTIyQ0ZcIiwgXCJcXFxcY3VybHl3ZWRnZVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgYmluLCBcIlxcdTIyQ0VcIiwgXCJcXFxcY3VybHl2ZWVcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIGJpbiwgXCJcXHUyMjlEXCIsIFwiXFxcXGNpcmNsZWRkYXNoXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBiaW4sIFwiXFx1MjI5QlwiLCBcIlxcXFxjaXJjbGVkYXN0XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBiaW4sIFwiXFx1MjJDNVwiLCBcIlxcXFxjZW50ZXJkb3RcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIGJpbiwgXCJcXHUyMkJBXCIsIFwiXFxcXGludGVyY2FsXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBiaW4sIFwiXFx1MjJEMlwiLCBcIlxcXFxkb3VibGVjYXBcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIGJpbiwgXCJcXHUyMkQzXCIsIFwiXFxcXGRvdWJsZWN1cFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgYmluLCBcIlxcdTIyQTBcIiwgXCJcXFxcYm94dGltZXNcIiwgdHJ1ZSk7IC8vIEFNUyBBcnJvd3Ncbi8vIE5vdGU6IHVuaWNvZGUtbWF0aCBtYXBzIFxcdTIxZTIgdG8gdGhlaXIgb3duIGZ1bmN0aW9uIFxccmlnaHRkYXNoYXJyb3cuXG4vLyBXZSdsbCBtYXAgaXQgdG8gQU1TIGZ1bmN0aW9uIFxcZGFzaHJpZ2h0YXJyb3cuIEl0IHByb2R1Y2VzIHRoZSBzYW1lIGF0b20uXG5cbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIxRTJcIiwgXCJcXFxcZGFzaHJpZ2h0YXJyb3dcIiwgdHJ1ZSk7IC8vIHVuaWNvZGUtbWF0aCBtYXBzIFxcdTIxZTAgdG8gXFxsZWZ0ZGFzaGFycm93LiBXZSdsbCB1c2UgdGhlIEFNUyBzeW5vbnltLlxuXG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMUUwXCIsIFwiXFxcXGRhc2hsZWZ0YXJyb3dcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMUM3XCIsIFwiXFxcXGxlZnRsZWZ0YXJyb3dzXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjFDNlwiLCBcIlxcXFxsZWZ0cmlnaHRhcnJvd3NcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMURBXCIsIFwiXFxcXExsZWZ0YXJyb3dcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMTlFXCIsIFwiXFxcXHR3b2hlYWRsZWZ0YXJyb3dcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMUEyXCIsIFwiXFxcXGxlZnRhcnJvd3RhaWxcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMUFCXCIsIFwiXFxcXGxvb3BhcnJvd2xlZnRcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMUNCXCIsIFwiXFxcXGxlZnRyaWdodGhhcnBvb25zXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjFCNlwiLCBcIlxcXFxjdXJ2ZWFycm93bGVmdFwiLCB0cnVlKTsgLy8gdW5pY29kZS1tYXRoIG1hcHMgXFx1MjFiYSB0byBcXGFjd29wZW5jaXJjbGVhcnJvdy4gV2UnbGwgdXNlIHRoZSBBTVMgc3lub255bS5cblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjFCQVwiLCBcIlxcXFxjaXJjbGVhcnJvd2xlZnRcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMUIwXCIsIFwiXFxcXExzaFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIxQzhcIiwgXCJcXFxcdXB1cGFycm93c1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIxQkZcIiwgXCJcXFxcdXBoYXJwb29ubGVmdFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIxQzNcIiwgXCJcXFxcZG93bmhhcnBvb25sZWZ0XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjJCOFwiLCBcIlxcXFxtdWx0aW1hcFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIxQURcIiwgXCJcXFxcbGVmdHJpZ2h0c3F1aWdhcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIxQzlcIiwgXCJcXFxccmlnaHRyaWdodGFycm93c1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIxQzRcIiwgXCJcXFxccmlnaHRsZWZ0YXJyb3dzXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjFBMFwiLCBcIlxcXFx0d29oZWFkcmlnaHRhcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIxQTNcIiwgXCJcXFxccmlnaHRhcnJvd3RhaWxcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMUFDXCIsIFwiXFxcXGxvb3BhcnJvd3JpZ2h0XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjFCN1wiLCBcIlxcXFxjdXJ2ZWFycm93cmlnaHRcIiwgdHJ1ZSk7IC8vIHVuaWNvZGUtbWF0aCBtYXBzIFxcdTIxYmIgdG8gXFxjd29wZW5jaXJjbGVhcnJvdy4gV2UnbGwgdXNlIHRoZSBBTVMgc3lub255bS5cblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjFCQlwiLCBcIlxcXFxjaXJjbGVhcnJvd3JpZ2h0XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjFCMVwiLCBcIlxcXFxSc2hcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMUNBXCIsIFwiXFxcXGRvd25kb3duYXJyb3dzXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjFCRVwiLCBcIlxcXFx1cGhhcnBvb25yaWdodFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIxQzJcIiwgXCJcXFxcZG93bmhhcnBvb25yaWdodFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIxRERcIiwgXCJcXFxccmlnaHRzcXVpZ2Fycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjFERFwiLCBcIlxcXFxsZWFkc3RvXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjFEQlwiLCBcIlxcXFxScmlnaHRhcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgcmVsLCBcIlxcdTIxQkVcIiwgXCJcXFxccmVzdHJpY3Rpb25cIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjAxOFwiLCBcImBcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiJFwiLCBcIlxcXFwkXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIiRcIiwgXCJcXFxcJFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCIkXCIsIFwiXFxcXHRleHRkb2xsYXJcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiJVwiLCBcIlxcXFwlXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIiVcIiwgXCJcXFxcJVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJfXCIsIFwiXFxcXF9cIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiX1wiLCBcIlxcXFxfXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIl9cIiwgXCJcXFxcdGV4dHVuZGVyc2NvcmVcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjIyMFwiLCBcIlxcXFxhbmdsZVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyMjFFXCIsIFwiXFxcXGluZnR5XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIlxcdTIwMzJcIiwgXCJcXFxccHJpbWVcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjVCM1wiLCBcIlxcXFx0cmlhbmdsZVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUwMzkzXCIsIFwiXFxcXEdhbW1hXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIlxcdTAzOTRcIiwgXCJcXFxcRGVsdGFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MDM5OFwiLCBcIlxcXFxUaGV0YVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUwMzlCXCIsIFwiXFxcXExhbWJkYVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUwMzlFXCIsIFwiXFxcXFhpXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIlxcdTAzQTBcIiwgXCJcXFxcUGlcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MDNBM1wiLCBcIlxcXFxTaWdtYVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUwM0E1XCIsIFwiXFxcXFVwc2lsb25cIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MDNBNlwiLCBcIlxcXFxQaGlcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MDNBOFwiLCBcIlxcXFxQc2lcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MDNBOVwiLCBcIlxcXFxPbWVnYVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJBXCIsIFwiXFx1MDM5MVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJCXCIsIFwiXFx1MDM5MlwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJFXCIsIFwiXFx1MDM5NVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJaXCIsIFwiXFx1MDM5NlwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJIXCIsIFwiXFx1MDM5N1wiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJJXCIsIFwiXFx1MDM5OVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJLXCIsIFwiXFx1MDM5QVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJNXCIsIFwiXFx1MDM5Q1wiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJOXCIsIFwiXFx1MDM5RFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJPXCIsIFwiXFx1MDM5RlwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJQXCIsIFwiXFx1MDNBMVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJUXCIsIFwiXFx1MDNBNFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJYXCIsIFwiXFx1MDNBN1wiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHhBQ1wiLCBcIlxcXFxuZWdcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx4QUNcIiwgXCJcXFxcbG5vdFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyMkE0XCIsIFwiXFxcXHRvcFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyMkE1XCIsIFwiXFxcXGJvdFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyMjA1XCIsIFwiXFxcXGVtcHR5c2V0XCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjIwNVwiLCBcIlxcXFx2YXJub3RoaW5nXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgbWF0aG9yZCwgXCJcXHUwM0IxXCIsIFwiXFxcXGFscGhhXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgbWF0aG9yZCwgXCJcXHUwM0IyXCIsIFwiXFxcXGJldGFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBtYXRob3JkLCBcIlxcdTAzQjNcIiwgXCJcXFxcZ2FtbWFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBtYXRob3JkLCBcIlxcdTAzQjRcIiwgXCJcXFxcZGVsdGFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBtYXRob3JkLCBcIlxcdTAzRjVcIiwgXCJcXFxcZXBzaWxvblwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNCNlwiLCBcIlxcXFx6ZXRhXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgbWF0aG9yZCwgXCJcXHUwM0I3XCIsIFwiXFxcXGV0YVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNCOFwiLCBcIlxcXFx0aGV0YVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNCOVwiLCBcIlxcXFxpb3RhXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgbWF0aG9yZCwgXCJcXHUwM0JBXCIsIFwiXFxcXGthcHBhXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgbWF0aG9yZCwgXCJcXHUwM0JCXCIsIFwiXFxcXGxhbWJkYVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNCQ1wiLCBcIlxcXFxtdVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNCRFwiLCBcIlxcXFxudVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNCRVwiLCBcIlxcXFx4aVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNCRlwiLCBcIlxcXFxvbWljcm9uXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgbWF0aG9yZCwgXCJcXHUwM0MwXCIsIFwiXFxcXHBpXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgbWF0aG9yZCwgXCJcXHUwM0MxXCIsIFwiXFxcXHJob1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNDM1wiLCBcIlxcXFxzaWdtYVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNDNFwiLCBcIlxcXFx0YXVcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBtYXRob3JkLCBcIlxcdTAzQzVcIiwgXCJcXFxcdXBzaWxvblwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNENVwiLCBcIlxcXFxwaGlcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBtYXRob3JkLCBcIlxcdTAzQzdcIiwgXCJcXFxcY2hpXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgbWF0aG9yZCwgXCJcXHUwM0M4XCIsIFwiXFxcXHBzaVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNDOVwiLCBcIlxcXFxvbWVnYVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNCNVwiLCBcIlxcXFx2YXJlcHNpbG9uXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgbWF0aG9yZCwgXCJcXHUwM0QxXCIsIFwiXFxcXHZhcnRoZXRhXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgbWF0aG9yZCwgXCJcXHUwM0Q2XCIsIFwiXFxcXHZhcnBpXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgbWF0aG9yZCwgXCJcXHUwM0YxXCIsIFwiXFxcXHZhcnJob1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNDMlwiLCBcIlxcXFx2YXJzaWdtYVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNDNlwiLCBcIlxcXFx2YXJwaGlcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBiaW4sIFwiXFx1MjIxN1wiLCBcIipcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBiaW4sIFwiK1wiLCBcIitcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBiaW4sIFwiXFx1MjIxMlwiLCBcIi1cIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBiaW4sIFwiXFx1MjJDNVwiLCBcIlxcXFxjZG90XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgYmluLCBcIlxcdTIyMThcIiwgXCJcXFxcY2lyY1wiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIGJpbiwgXCJcXHhGN1wiLCBcIlxcXFxkaXZcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBiaW4sIFwiXFx4QjFcIiwgXCJcXFxccG1cIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBiaW4sIFwiXFx4RDdcIiwgXCJcXFxcdGltZXNcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBiaW4sIFwiXFx1MjIyOVwiLCBcIlxcXFxjYXBcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBiaW4sIFwiXFx1MjIyQVwiLCBcIlxcXFxjdXBcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBiaW4sIFwiXFx1MjIxNlwiLCBcIlxcXFxzZXRtaW51c1wiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIGJpbiwgXCJcXHUyMjI3XCIsIFwiXFxcXGxhbmRcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBiaW4sIFwiXFx1MjIyOFwiLCBcIlxcXFxsb3JcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBiaW4sIFwiXFx1MjIyN1wiLCBcIlxcXFx3ZWRnZVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIGJpbiwgXCJcXHUyMjI4XCIsIFwiXFxcXHZlZVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyMjFBXCIsIFwiXFxcXHN1cmRcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX29wZW4sIFwiKFwiLCBcIihcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX29wZW4sIFwiW1wiLCBcIltcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX29wZW4sIFwiXFx1MjdFOFwiLCBcIlxcXFxsYW5nbGVcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX29wZW4sIFwiXFx1MjIyM1wiLCBcIlxcXFxsdmVydFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfb3BlbiwgXCJcXHUyMjI1XCIsIFwiXFxcXGxWZXJ0XCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgc3ltYm9sc19jbG9zZSwgXCIpXCIsIFwiKVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfY2xvc2UsIFwiXVwiLCBcIl1cIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX2Nsb3NlLCBcIj9cIiwgXCI/XCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgc3ltYm9sc19jbG9zZSwgXCIhXCIsIFwiIVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfY2xvc2UsIFwiXFx1MjdFOVwiLCBcIlxcXFxyYW5nbGVcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX2Nsb3NlLCBcIlxcdTIyMjNcIiwgXCJcXFxccnZlcnRcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX2Nsb3NlLCBcIlxcdTIyMjVcIiwgXCJcXFxcclZlcnRcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiPVwiLCBcIj1cIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiPFwiLCBcIjxcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiPlwiLCBcIj5cIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiOlwiLCBcIjpcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MjI0OFwiLCBcIlxcXFxhcHByb3hcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MjI0NVwiLCBcIlxcXFxjb25nXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIyNjVcIiwgXCJcXFxcZ2VcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MjI2NVwiLCBcIlxcXFxnZXFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MjE5MFwiLCBcIlxcXFxnZXRzXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgcmVsLCBcIj5cIiwgXCJcXFxcZ3RcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MjIwOFwiLCBcIlxcXFxpblwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHJlbCwgXCJcXHVFMDIwXCIsIFwiXFxcXEBub3RcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MjI4MlwiLCBcIlxcXFxzdWJzZXRcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MjI4M1wiLCBcIlxcXFxzdXBzZXRcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MjI4NlwiLCBcIlxcXFxzdWJzZXRlcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHJlbCwgXCJcXHUyMjg3XCIsIFwiXFxcXHN1cHNldGVxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCByZWwsIFwiXFx1MjI4OFwiLCBcIlxcXFxuc3Vic2V0ZXFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjg5XCIsIFwiXFxcXG5zdXBzZXRlcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHJlbCwgXCJcXHUyMkE4XCIsIFwiXFxcXG1vZGVsc1wiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHJlbCwgXCJcXHUyMTkwXCIsIFwiXFxcXGxlZnRhcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHJlbCwgXCJcXHUyMjY0XCIsIFwiXFxcXGxlXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIyNjRcIiwgXCJcXFxcbGVxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgcmVsLCBcIjxcIiwgXCJcXFxcbHRcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MjE5MlwiLCBcIlxcXFxyaWdodGFycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIxOTJcIiwgXCJcXFxcdG9cIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjcxXCIsIFwiXFxcXG5nZXFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjcwXCIsIFwiXFxcXG5sZXFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3NwYWNpbmcsIFwiXFx4QTBcIiwgXCJcXFxcIFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfc3BhY2luZywgXCJcXHhBMFwiLCBcIn5cIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3NwYWNpbmcsIFwiXFx4QTBcIiwgXCJcXFxcc3BhY2VcIik7IC8vIFJlZjogTGFUZVggU291cmNlIDJlOiBcXERlY2xhcmVSb2J1c3RDb21tYW5ke1xcbm9icmVha3NwYWNlfXslXG5cbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfc3BhY2luZywgXCJcXHhBMFwiLCBcIlxcXFxub2JyZWFrc3BhY2VcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3NwYWNpbmcsIFwiXFx4QTBcIiwgXCJcXFxcIFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfc3BhY2luZywgXCJcXHhBMFwiLCBcIn5cIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3NwYWNpbmcsIFwiXFx4QTBcIiwgXCJcXFxcc3BhY2VcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3NwYWNpbmcsIFwiXFx4QTBcIiwgXCJcXFxcbm9icmVha3NwYWNlXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgc3ltYm9sc19zcGFjaW5nLCBudWxsLCBcIlxcXFxub2JyZWFrXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgc3ltYm9sc19zcGFjaW5nLCBudWxsLCBcIlxcXFxhbGxvd2JyZWFrXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgcHVuY3QsIFwiLFwiLCBcIixcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBwdW5jdCwgXCI7XCIsIFwiO1wiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgYmluLCBcIlxcdTIyQkNcIiwgXCJcXFxcYmFyd2VkZ2VcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIGJpbiwgXCJcXHUyMkJCXCIsIFwiXFxcXHZlZWJhclwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIGJpbiwgXCJcXHUyMjk5XCIsIFwiXFxcXG9kb3RcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBiaW4sIFwiXFx1MjI5NVwiLCBcIlxcXFxvcGx1c1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIGJpbiwgXCJcXHUyMjk3XCIsIFwiXFxcXG90aW1lc1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyMjAyXCIsIFwiXFxcXHBhcnRpYWxcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBiaW4sIFwiXFx1MjI5OFwiLCBcIlxcXFxvc2xhc2hcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIGJpbiwgXCJcXHUyMjlBXCIsIFwiXFxcXGNpcmNsZWRjaXJjXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBiaW4sIFwiXFx1MjJBMVwiLCBcIlxcXFxib3hkb3RcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBiaW4sIFwiXFx1MjVCM1wiLCBcIlxcXFxiaWd0cmlhbmdsZXVwXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgYmluLCBcIlxcdTI1QkRcIiwgXCJcXFxcYmlndHJpYW5nbGVkb3duXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgYmluLCBcIlxcdTIwMjBcIiwgXCJcXFxcZGFnZ2VyXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgYmluLCBcIlxcdTIyQzRcIiwgXCJcXFxcZGlhbW9uZFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIGJpbiwgXCJcXHUyMkM2XCIsIFwiXFxcXHN0YXJcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBiaW4sIFwiXFx1MjVDM1wiLCBcIlxcXFx0cmlhbmdsZWxlZnRcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBiaW4sIFwiXFx1MjVCOVwiLCBcIlxcXFx0cmlhbmdsZXJpZ2h0XCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgc3ltYm9sc19vcGVuLCBcIntcIiwgXCJcXFxce1wiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJ7XCIsIFwiXFxcXHtcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwie1wiLCBcIlxcXFx0ZXh0YnJhY2VsZWZ0XCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgc3ltYm9sc19jbG9zZSwgXCJ9XCIsIFwiXFxcXH1cIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwifVwiLCBcIlxcXFx9XCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIn1cIiwgXCJcXFxcdGV4dGJyYWNlcmlnaHRcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX29wZW4sIFwie1wiLCBcIlxcXFxsYnJhY2VcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX2Nsb3NlLCBcIn1cIiwgXCJcXFxccmJyYWNlXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgc3ltYm9sc19vcGVuLCBcIltcIiwgXCJcXFxcbGJyYWNrXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIltcIiwgXCJcXFxcbGJyYWNrXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgc3ltYm9sc19jbG9zZSwgXCJdXCIsIFwiXFxcXHJicmFja1wiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJdXCIsIFwiXFxcXHJicmFja1wiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfb3BlbiwgXCIoXCIsIFwiXFxcXGxwYXJlblwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfY2xvc2UsIFwiKVwiLCBcIlxcXFxycGFyZW5cIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiPFwiLCBcIlxcXFx0ZXh0bGVzc1wiKTsgLy8gaW4gVDEgZm9udGVuY1xuXG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiPlwiLCBcIlxcXFx0ZXh0Z3JlYXRlclwiKTsgLy8gaW4gVDEgZm9udGVuY1xuXG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX29wZW4sIFwiXFx1MjMwQVwiLCBcIlxcXFxsZmxvb3JcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX2Nsb3NlLCBcIlxcdTIzMEJcIiwgXCJcXFxccmZsb29yXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgc3ltYm9sc19vcGVuLCBcIlxcdTIzMDhcIiwgXCJcXFxcbGNlaWxcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX2Nsb3NlLCBcIlxcdTIzMDlcIiwgXCJcXFxccmNlaWxcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFxcXFwiLCBcIlxcXFxiYWNrc2xhc2hcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjIyM1wiLCBcInxcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjIyM1wiLCBcIlxcXFx2ZXJ0XCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcInxcIiwgXCJcXFxcdGV4dGJhclwiKTsgLy8gaW4gVDEgZm9udGVuY1xuXG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjIyNVwiLCBcIlxcXFx8XCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIlxcdTIyMjVcIiwgXCJcXFxcVmVydFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyMjI1XCIsIFwiXFxcXHRleHRiYXJkYmxcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiflwiLCBcIlxcXFx0ZXh0YXNjaWl0aWxkZVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXFxcXCIsIFwiXFxcXHRleHRiYWNrc2xhc2hcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXlwiLCBcIlxcXFx0ZXh0YXNjaWljaXJjdW1cIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCByZWwsIFwiXFx1MjE5MVwiLCBcIlxcXFx1cGFycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIxRDFcIiwgXCJcXFxcVXBhcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHJlbCwgXCJcXHUyMTkzXCIsIFwiXFxcXGRvd25hcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHJlbCwgXCJcXHUyMUQzXCIsIFwiXFxcXERvd25hcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHJlbCwgXCJcXHUyMTk1XCIsIFwiXFxcXHVwZG93bmFycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIxRDVcIiwgXCJcXFxcVXBkb3duYXJyb3dcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBvcCwgXCJcXHUyMjEwXCIsIFwiXFxcXGNvcHJvZFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG9wLCBcIlxcdTIyQzFcIiwgXCJcXFxcYmlndmVlXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgb3AsIFwiXFx1MjJDMFwiLCBcIlxcXFxiaWd3ZWRnZVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG9wLCBcIlxcdTJBMDRcIiwgXCJcXFxcYmlndXBsdXNcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBvcCwgXCJcXHUyMkMyXCIsIFwiXFxcXGJpZ2NhcFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG9wLCBcIlxcdTIyQzNcIiwgXCJcXFxcYmlnY3VwXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgb3AsIFwiXFx1MjIyQlwiLCBcIlxcXFxpbnRcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBvcCwgXCJcXHUyMjJCXCIsIFwiXFxcXGludG9wXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgb3AsIFwiXFx1MjIyQ1wiLCBcIlxcXFxpaW50XCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgb3AsIFwiXFx1MjIyRFwiLCBcIlxcXFxpaWludFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG9wLCBcIlxcdTIyMEZcIiwgXCJcXFxccHJvZFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG9wLCBcIlxcdTIyMTFcIiwgXCJcXFxcc3VtXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgb3AsIFwiXFx1MkEwMlwiLCBcIlxcXFxiaWdvdGltZXNcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBvcCwgXCJcXHUyQTAxXCIsIFwiXFxcXGJpZ29wbHVzXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgb3AsIFwiXFx1MkEwMFwiLCBcIlxcXFxiaWdvZG90XCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgb3AsIFwiXFx1MjIyRVwiLCBcIlxcXFxvaW50XCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgb3AsIFwiXFx1MjIyRlwiLCBcIlxcXFxvaWludFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG9wLCBcIlxcdTIyMzBcIiwgXCJcXFxcb2lpaW50XCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgb3AsIFwiXFx1MkEwNlwiLCBcIlxcXFxiaWdzcWN1cFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG9wLCBcIlxcdTIyMkJcIiwgXCJcXFxcc21hbGxpbnRcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX2lubmVyLCBcIlxcdTIwMjZcIiwgXCJcXFxcdGV4dGVsbGlwc2lzXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgc3ltYm9sc19pbm5lciwgXCJcXHUyMDI2XCIsIFwiXFxcXG1hdGhlbGxpcHNpc1wiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfaW5uZXIsIFwiXFx1MjAyNlwiLCBcIlxcXFxsZG90c1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfaW5uZXIsIFwiXFx1MjAyNlwiLCBcIlxcXFxsZG90c1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfaW5uZXIsIFwiXFx1MjJFRlwiLCBcIlxcXFxAY2RvdHNcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX2lubmVyLCBcIlxcdTIyRjFcIiwgXCJcXFxcZGRvdHNcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjJFRVwiLCBcIlxcXFx2YXJ2ZG90c1wiKTsgLy8gXFx2ZG90cyBpcyBhIG1hY3JvXG5cbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfYWNjZW50LCBcIlxcdTAyQ0FcIiwgXCJcXFxcYWN1dGVcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX2FjY2VudCwgXCJcXHUwMkNCXCIsIFwiXFxcXGdyYXZlXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgc3ltYm9sc19hY2NlbnQsIFwiXFx4QThcIiwgXCJcXFxcZGRvdFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfYWNjZW50LCBcIn5cIiwgXCJcXFxcdGlsZGVcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX2FjY2VudCwgXCJcXHUwMkM5XCIsIFwiXFxcXGJhclwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfYWNjZW50LCBcIlxcdTAyRDhcIiwgXCJcXFxcYnJldmVcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX2FjY2VudCwgXCJcXHUwMkM3XCIsIFwiXFxcXGNoZWNrXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgc3ltYm9sc19hY2NlbnQsIFwiXlwiLCBcIlxcXFxoYXRcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBzeW1ib2xzX2FjY2VudCwgXCJcXHUyMEQ3XCIsIFwiXFxcXHZlY1wiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfYWNjZW50LCBcIlxcdTAyRDlcIiwgXCJcXFxcZG90XCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgc3ltYm9sc19hY2NlbnQsIFwiXFx1MDJEQVwiLCBcIlxcXFxtYXRocmluZ1wiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDEzMVwiLCBcIlxcXFxpbWF0aFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDIzN1wiLCBcIlxcXFxqbWF0aFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUwMTMxXCIsIFwiXFxcXGlcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MDIzN1wiLCBcIlxcXFxqXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIlxceERGXCIsIFwiXFxcXHNzXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIlxceEU2XCIsIFwiXFxcXGFlXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIlxceEU2XCIsIFwiXFxcXGFlXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIlxcdTAxNTNcIiwgXCJcXFxcb2VcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx4RjhcIiwgXCJcXFxcb1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHhDNlwiLCBcIlxcXFxBRVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUwMTUyXCIsIFwiXFxcXE9FXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIlxceEQ4XCIsIFwiXFxcXE9cIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX2FjY2VudCwgXCJcXHUwMkNBXCIsIFwiXFxcXCdcIik7IC8vIGFjdXRlXG5cbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfYWNjZW50LCBcIlxcdTAyQ0JcIiwgXCJcXFxcYFwiKTsgLy8gZ3JhdmVcblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc19hY2NlbnQsIFwiXFx1MDJDNlwiLCBcIlxcXFxeXCIpOyAvLyBjaXJjdW1mbGV4XG5cbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfYWNjZW50LCBcIlxcdTAyRENcIiwgXCJcXFxcflwiKTsgLy8gdGlsZGVcblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc19hY2NlbnQsIFwiXFx1MDJDOVwiLCBcIlxcXFw9XCIpOyAvLyBtYWNyb25cblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc19hY2NlbnQsIFwiXFx1MDJEOFwiLCBcIlxcXFx1XCIpOyAvLyBicmV2ZVxuXG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX2FjY2VudCwgXCJcXHUwMkQ5XCIsIFwiXFxcXC5cIik7IC8vIGRvdCBhYm92ZVxuXG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX2FjY2VudCwgXCJcXHUwMkRBXCIsIFwiXFxcXHJcIik7IC8vIHJpbmcgYWJvdmVcblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc19hY2NlbnQsIFwiXFx1MDJDN1wiLCBcIlxcXFx2XCIpOyAvLyBjYXJvblxuXG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX2FjY2VudCwgXCJcXHhBOFwiLCAnXFxcXFwiJyk7IC8vIGRpYXJlc2lzXG5cbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfYWNjZW50LCBcIlxcdTAyRERcIiwgXCJcXFxcSFwiKTsgLy8gZG91YmxlIGFjdXRlXG5cbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfYWNjZW50LCBcIlxcdTI1RUZcIiwgXCJcXFxcdGV4dGNpcmNsZWRcIik7IC8vIFxcYmlnY2lyYyBnbHlwaFxuLy8gVGhlc2UgbGlnYXR1cmVzIGFyZSBkZXRlY3RlZCBhbmQgY3JlYXRlZCBpbiBQYXJzZXIuanMncyBgZm9ybUxpZ2F0dXJlc2AuXG5cbnZhciBsaWdhdHVyZXMgPSB7XG4gIFwiLS1cIjogdHJ1ZSxcbiAgXCItLS1cIjogdHJ1ZSxcbiAgXCJgYFwiOiB0cnVlLFxuICBcIicnXCI6IHRydWVcbn07XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjAxM1wiLCBcIi0tXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIlxcdTIwMTNcIiwgXCJcXFxcdGV4dGVuZGFzaFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyMDE0XCIsIFwiLS0tXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIlxcdTIwMTRcIiwgXCJcXFxcdGV4dGVtZGFzaFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyMDE4XCIsIFwiYFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyMDE4XCIsIFwiXFxcXHRleHRxdW90ZWxlZnRcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjAxOVwiLCBcIidcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjAxOVwiLCBcIlxcXFx0ZXh0cXVvdGVyaWdodFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyMDFDXCIsIFwiYGBcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjAxQ1wiLCBcIlxcXFx0ZXh0cXVvdGVkYmxsZWZ0XCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIlxcdTIwMURcIiwgXCInJ1wiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyMDFEXCIsIFwiXFxcXHRleHRxdW90ZWRibHJpZ2h0XCIpOyAvLyAgXFxkZWdyZWUgZnJvbSBnZW5zeW1iIHBhY2thZ2VcblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIlxceEIwXCIsIFwiXFxcXGRlZ3JlZVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHhCMFwiLCBcIlxcXFxkZWdyZWVcIik7IC8vIFxcdGV4dGRlZ3JlZSBmcm9tIGlucHV0ZW5jIHBhY2thZ2VcblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIlxceEIwXCIsIFwiXFxcXHRleHRkZWdyZWVcIiwgdHJ1ZSk7IC8vIFRPRE86IEluIExhVGVYLCBcXHBvdW5kcyBjYW4gZ2VuZXJhdGUgYSBkaWZmZXJlbnQgY2hhcmFjdGVyIGluIHRleHQgYW5kIG1hdGhcbi8vIG1vZGUsIGJ1dCBhbW9uZyBvdXIgZm9udHMsIG9ubHkgTWFpbi1JdGFsaWMgZGVmaW5lcyB0aGlzIGNoYXJhY3RlciBcIjE2M1wiLlxuXG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBtYXRob3JkLCBcIlxceEEzXCIsIFwiXFxcXHBvdW5kc1wiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx4QTNcIiwgXCJcXFxcbWF0aHN0ZXJsaW5nXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgbWF0aG9yZCwgXCJcXHhBM1wiLCBcIlxcXFxwb3VuZHNcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBtYXRob3JkLCBcIlxceEEzXCIsIFwiXFxcXHRleHRzdGVybGluZ1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgc3ltYm9sc190ZXh0b3JkLCBcIlxcdTI3MjBcIiwgXCJcXFxcbWFsdGVzZVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIGFtcywgc3ltYm9sc190ZXh0b3JkLCBcIlxcdTI3MjBcIiwgXCJcXFxcbWFsdGVzZVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfc3BhY2luZywgXCJcXHhBMFwiLCBcIlxcXFwgXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc19zcGFjaW5nLCBcIlxceEEwXCIsIFwiIFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfc3BhY2luZywgXCJcXHhBMFwiLCBcIn5cIik7IC8vIFRoZXJlIGFyZSBsb3RzIG9mIHN5bWJvbHMgd2hpY2ggYXJlIHRoZSBzYW1lLCBzbyB3ZSBhZGQgdGhlbSBpbiBhZnRlcndhcmRzLlxuLy8gQWxsIG9mIHRoZXNlIGFyZSB0ZXh0b3JkcyBpbiBtYXRoIG1vZGVcblxudmFyIG1hdGhUZXh0U3ltYm9scyA9IFwiMDEyMzQ1Njc4OS9ALlxcXCJcIjtcblxuZm9yICh2YXIgc3ltYm9sc19pID0gMDsgc3ltYm9sc19pIDwgbWF0aFRleHRTeW1ib2xzLmxlbmd0aDsgc3ltYm9sc19pKyspIHtcbiAgdmFyIHN5bWJvbHNfY2ggPSBtYXRoVGV4dFN5bWJvbHMuY2hhckF0KHN5bWJvbHNfaSk7XG4gIGRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgc3ltYm9sc19jaCwgc3ltYm9sc19jaCk7XG59IC8vIEFsbCBvZiB0aGVzZSBhcmUgdGV4dG9yZHMgaW4gdGV4dCBtb2RlXG5cblxudmFyIHRleHRTeW1ib2xzID0gXCIwMTIzNDU2Nzg5IUAqKCktPStbXTw+fFxcXCI7Oj8vLixcIjtcblxuZm9yICh2YXIgc3JjX3N5bWJvbHNfaSA9IDA7IHNyY19zeW1ib2xzX2kgPCB0ZXh0U3ltYm9scy5sZW5ndGg7IHNyY19zeW1ib2xzX2krKykge1xuICB2YXIgX2NoID0gdGV4dFN5bWJvbHMuY2hhckF0KHNyY19zeW1ib2xzX2kpO1xuXG4gIGRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgX2NoLCBfY2gpO1xufSAvLyBBbGwgb2YgdGhlc2UgYXJlIHRleHRvcmRzIGluIHRleHQgbW9kZSwgYW5kIG1hdGhvcmRzIGluIG1hdGggbW9kZVxuXG5cbnZhciBsZXR0ZXJzID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCI7XG5cbmZvciAodmFyIHN5bWJvbHNfaTIgPSAwOyBzeW1ib2xzX2kyIDwgbGV0dGVycy5sZW5ndGg7IHN5bWJvbHNfaTIrKykge1xuICB2YXIgX2NoMiA9IGxldHRlcnMuY2hhckF0KHN5bWJvbHNfaTIpO1xuXG4gIGRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG1hdGhvcmQsIF9jaDIsIF9jaDIpO1xuICBkZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIF9jaDIsIF9jaDIpO1xufSAvLyBCbGFja2JvYXJkIGJvbGQgYW5kIHNjcmlwdCBsZXR0ZXJzIGluIFVuaWNvZGUgcmFuZ2VcblxuXG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHN5bWJvbHNfdGV4dG9yZCwgXCJDXCIsIFwiXFx1MjEwMlwiKTsgLy8gYmxhY2tib2FyZCBib2xkXG5cbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIGFtcywgc3ltYm9sc190ZXh0b3JkLCBcIkNcIiwgXCJcXHUyMTAyXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBzeW1ib2xzX3RleHRvcmQsIFwiSFwiLCBcIlxcdTIxMERcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBhbXMsIHN5bWJvbHNfdGV4dG9yZCwgXCJIXCIsIFwiXFx1MjEwRFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgc3ltYm9sc190ZXh0b3JkLCBcIk5cIiwgXCJcXHUyMTE1XCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgYW1zLCBzeW1ib2xzX3RleHRvcmQsIFwiTlwiLCBcIlxcdTIxMTVcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHN5bWJvbHNfdGV4dG9yZCwgXCJQXCIsIFwiXFx1MjExOVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIGFtcywgc3ltYm9sc190ZXh0b3JkLCBcIlBcIiwgXCJcXHUyMTE5XCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgYW1zLCBzeW1ib2xzX3RleHRvcmQsIFwiUVwiLCBcIlxcdTIxMUFcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBhbXMsIHN5bWJvbHNfdGV4dG9yZCwgXCJRXCIsIFwiXFx1MjExQVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIGFtcywgc3ltYm9sc190ZXh0b3JkLCBcIlJcIiwgXCJcXHUyMTFEXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgYW1zLCBzeW1ib2xzX3RleHRvcmQsIFwiUlwiLCBcIlxcdTIxMURcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBhbXMsIHN5bWJvbHNfdGV4dG9yZCwgXCJaXCIsIFwiXFx1MjEyNFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIGFtcywgc3ltYm9sc190ZXh0b3JkLCBcIlpcIiwgXCJcXHUyMTI0XCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgbWF0aG9yZCwgXCJoXCIsIFwiXFx1MjEwRVwiKTsgLy8gaXRhbGljIGgsIFBsYW5jayBjb25zdGFudFxuXG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBtYXRob3JkLCBcImhcIiwgXCJcXHUyMTBFXCIpOyAvLyBUaGUgbmV4dCBsb29wIGxvYWRzIHdpZGUgKHN1cnJvZ2F0ZSBwYWlyKSBjaGFyYWN0ZXJzLlxuLy8gV2Ugc3VwcG9ydCBzb21lIGxldHRlcnMgaW4gdGhlIFVuaWNvZGUgcmFuZ2UgVSsxRDQwMCB0byBVKzFEN0ZGLFxuLy8gTWF0aGVtYXRpY2FsIEFscGhhbnVtZXJpYyBTeW1ib2xzLlxuLy8gU29tZSBlZGl0b3JzIGRvIG5vdCBkZWFsIHdlbGwgd2l0aCB3aWRlIGNoYXJhY3RlcnMuIFNvIGRvbid0IHdyaXRlIHRoZVxuLy8gc3RyaW5nIGludG8gdGhpcyBmaWxlLiBJbnN0ZWFkLCBjcmVhdGUgdGhlIHN0cmluZyBmcm9tIHRoZSBzdXJyb2dhdGUgcGFpci5cblxudmFyIHN5bWJvbHNfd2lkZUNoYXIgPSBcIlwiO1xuXG5mb3IgKHZhciBzeW1ib2xzX2kzID0gMDsgc3ltYm9sc19pMyA8IGxldHRlcnMubGVuZ3RoOyBzeW1ib2xzX2kzKyspIHtcbiAgdmFyIF9jaDMgPSBsZXR0ZXJzLmNoYXJBdChzeW1ib2xzX2kzKTsgLy8gVGhlIGhleCBudW1iZXJzIGluIHRoZSBuZXh0IGxpbmUgYXJlIGEgc3Vycm9nYXRlIHBhaXIuXG4gIC8vIDB4RDgzNSBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgZm9yIGFsbCBsZXR0ZXJzIGluIHRoZSByYW5nZSB3ZSBzdXBwb3J0LlxuICAvLyAweERDMDAgaXMgdGhlIGxvdyBzdXJyb2dhdGUgZm9yIGJvbGQgQS5cblxuXG4gIHN5bWJvbHNfd2lkZUNoYXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RDgzNSwgMHhEQzAwICsgc3ltYm9sc19pMyk7IC8vIEEtWiBhLXogYm9sZFxuXG4gIGRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG1hdGhvcmQsIF9jaDMsIHN5bWJvbHNfd2lkZUNoYXIpO1xuICBkZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIF9jaDMsIHN5bWJvbHNfd2lkZUNoYXIpO1xuICBzeW1ib2xzX3dpZGVDaGFyID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweEQ4MzUsIDB4REMzNCArIHN5bWJvbHNfaTMpOyAvLyBBLVogYS16IGl0YWxpY1xuXG4gIGRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG1hdGhvcmQsIF9jaDMsIHN5bWJvbHNfd2lkZUNoYXIpO1xuICBkZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIF9jaDMsIHN5bWJvbHNfd2lkZUNoYXIpO1xuICBzeW1ib2xzX3dpZGVDaGFyID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweEQ4MzUsIDB4REM2OCArIHN5bWJvbHNfaTMpOyAvLyBBLVogYS16IGJvbGQgaXRhbGljXG5cbiAgZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgbWF0aG9yZCwgX2NoMywgc3ltYm9sc193aWRlQ2hhcik7XG4gIGRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgX2NoMywgc3ltYm9sc193aWRlQ2hhcik7XG4gIHN5bWJvbHNfd2lkZUNoYXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RDgzNSwgMHhERDA0ICsgc3ltYm9sc19pMyk7IC8vIEEtWiBhLXogRnJhY3R1clxuXG4gIGRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG1hdGhvcmQsIF9jaDMsIHN5bWJvbHNfd2lkZUNoYXIpO1xuICBkZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIF9jaDMsIHN5bWJvbHNfd2lkZUNoYXIpO1xuICBzeW1ib2xzX3dpZGVDaGFyID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweEQ4MzUsIDB4RERBMCArIHN5bWJvbHNfaTMpOyAvLyBBLVogYS16IHNhbnMtc2VyaWZcblxuICBkZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBtYXRob3JkLCBfY2gzLCBzeW1ib2xzX3dpZGVDaGFyKTtcbiAgZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBfY2gzLCBzeW1ib2xzX3dpZGVDaGFyKTtcbiAgc3ltYm9sc193aWRlQ2hhciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhEODM1LCAweERERDQgKyBzeW1ib2xzX2kzKTsgLy8gQS1aIGEteiBzYW5zIGJvbGRcblxuICBkZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBtYXRob3JkLCBfY2gzLCBzeW1ib2xzX3dpZGVDaGFyKTtcbiAgZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBfY2gzLCBzeW1ib2xzX3dpZGVDaGFyKTtcbiAgc3ltYm9sc193aWRlQ2hhciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhEODM1LCAweERFMDggKyBzeW1ib2xzX2kzKTsgLy8gQS1aIGEteiBzYW5zIGl0YWxpY1xuXG4gIGRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG1hdGhvcmQsIF9jaDMsIHN5bWJvbHNfd2lkZUNoYXIpO1xuICBkZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIF9jaDMsIHN5bWJvbHNfd2lkZUNoYXIpO1xuICBzeW1ib2xzX3dpZGVDaGFyID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweEQ4MzUsIDB4REU3MCArIHN5bWJvbHNfaTMpOyAvLyBBLVogYS16IG1vbm9zcGFjZVxuXG4gIGRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG1hdGhvcmQsIF9jaDMsIHN5bWJvbHNfd2lkZUNoYXIpO1xuICBkZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIF9jaDMsIHN5bWJvbHNfd2lkZUNoYXIpO1xuXG4gIGlmIChzeW1ib2xzX2kzIDwgMjYpIHtcbiAgICAvLyBLYVRlWCBmb250cyBoYXZlIG9ubHkgY2FwaXRhbCBsZXR0ZXJzIGZvciBibGFja2JvYXJkIGJvbGQgYW5kIHNjcmlwdC5cbiAgICAvLyBTZWUgZXhjZXB0aW9uIGZvciBrIGJlbG93LlxuICAgIHN5bWJvbHNfd2lkZUNoYXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RDgzNSwgMHhERDM4ICsgc3ltYm9sc19pMyk7IC8vIEEtWiBkb3VibGUgc3RydWNrXG5cbiAgICBkZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBtYXRob3JkLCBfY2gzLCBzeW1ib2xzX3dpZGVDaGFyKTtcbiAgICBkZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIF9jaDMsIHN5bWJvbHNfd2lkZUNoYXIpO1xuICAgIHN5bWJvbHNfd2lkZUNoYXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RDgzNSwgMHhEQzlDICsgc3ltYm9sc19pMyk7IC8vIEEtWiBzY3JpcHRcblxuICAgIGRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG1hdGhvcmQsIF9jaDMsIHN5bWJvbHNfd2lkZUNoYXIpO1xuICAgIGRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgX2NoMywgc3ltYm9sc193aWRlQ2hhcik7XG4gIH0gLy8gVE9ETzogQWRkIGJvbGQgc2NyaXB0IHdoZW4gaXQgaXMgc3VwcG9ydGVkIGJ5IGEgS2FUZVggZm9udC5cblxufSAvLyBcImtcIiBpcyB0aGUgb25seSBkb3VibGUgc3RydWNrIGxvd2VyIGNhc2UgbGV0dGVyIGluIHRoZSBLYVRlWCBmb250cy5cblxuXG5zeW1ib2xzX3dpZGVDaGFyID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweEQ4MzUsIDB4REQ1Qyk7IC8vIGsgZG91YmxlIHN0cnVja1xuXG5kZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBtYXRob3JkLCBcImtcIiwgc3ltYm9sc193aWRlQ2hhcik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwia1wiLCBzeW1ib2xzX3dpZGVDaGFyKTsgLy8gTmV4dCwgc29tZSB3aWRlIGNoYXJhY3RlciBudW1lcmFsc1xuXG5mb3IgKHZhciBzeW1ib2xzX2k0ID0gMDsgc3ltYm9sc19pNCA8IDEwOyBzeW1ib2xzX2k0KyspIHtcbiAgdmFyIF9jaDQgPSBzeW1ib2xzX2k0LnRvU3RyaW5nKCk7XG5cbiAgc3ltYm9sc193aWRlQ2hhciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhEODM1LCAweERGQ0UgKyBzeW1ib2xzX2k0KTsgLy8gMC05IGJvbGRcblxuICBkZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBtYXRob3JkLCBfY2g0LCBzeW1ib2xzX3dpZGVDaGFyKTtcbiAgZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBfY2g0LCBzeW1ib2xzX3dpZGVDaGFyKTtcbiAgc3ltYm9sc193aWRlQ2hhciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhEODM1LCAweERGRTIgKyBzeW1ib2xzX2k0KTsgLy8gMC05IHNhbnMgc2VyaWZcblxuICBkZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBtYXRob3JkLCBfY2g0LCBzeW1ib2xzX3dpZGVDaGFyKTtcbiAgZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBfY2g0LCBzeW1ib2xzX3dpZGVDaGFyKTtcbiAgc3ltYm9sc193aWRlQ2hhciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhEODM1LCAweERGRUMgKyBzeW1ib2xzX2k0KTsgLy8gMC05IGJvbGQgc2Fuc1xuXG4gIGRlZmluZVN5bWJvbChzeW1ib2xzX21hdGgsIG1haW4sIG1hdGhvcmQsIF9jaDQsIHN5bWJvbHNfd2lkZUNoYXIpO1xuICBkZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIF9jaDQsIHN5bWJvbHNfd2lkZUNoYXIpO1xuICBzeW1ib2xzX3dpZGVDaGFyID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweEQ4MzUsIDB4REZGNiArIHN5bWJvbHNfaTQpOyAvLyAwLTkgbW9ub3NwYWNlXG5cbiAgZGVmaW5lU3ltYm9sKHN5bWJvbHNfbWF0aCwgbWFpbiwgbWF0aG9yZCwgX2NoNCwgc3ltYm9sc193aWRlQ2hhcik7XG4gIGRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgX2NoNCwgc3ltYm9sc193aWRlQ2hhcik7XG59IC8vIFdlIGFkZCB0aGVzZSBMYXRpbi0xIGxldHRlcnMgYXMgc3ltYm9scyBmb3IgYmFja3dhcmRzLWNvbXBhdGliaWxpdHksXG4vLyBidXQgdGhleSBhcmUgbm90IGFjdHVhbGx5IGluIHRoZSBmb250LCBub3IgYXJlIHRoZXkgc3VwcG9ydGVkIGJ5IHRoZVxuLy8gVW5pY29kZSBhY2NlbnQgbWVjaGFuaXNtLCBzbyB0aGV5IGZhbGwgYmFjayB0byBUaW1lcyBmb250IGFuZCBsb29rIHVnbHkuXG4vLyBUT0RPKGVkZW1haW5lKTogRml4IHRoaXMuXG5cblxudmFyIGV4dHJhTGF0aW4gPSBcIsOHw5DDnsOnw75cIjtcblxuZm9yICh2YXIgX2k1ID0gMDsgX2k1IDwgZXh0cmFMYXRpbi5sZW5ndGg7IF9pNSsrKSB7XG4gIHZhciBfY2g1ID0gZXh0cmFMYXRpbi5jaGFyQXQoX2k1KTtcblxuICBkZWZpbmVTeW1ib2woc3ltYm9sc19tYXRoLCBtYWluLCBtYXRob3JkLCBfY2g1LCBfY2g1KTtcbiAgZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBfY2g1LCBfY2g1KTtcbn1cblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIsOwXCIsIFwiw7BcIik7IC8vIFVuaWNvZGUgdmVyc2lvbnMgb2YgZXhpc3RpbmcgY2hhcmFjdGVyc1xuXG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjAxM1wiLCBcIuKAk1wiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyMDE0XCIsIFwi4oCUXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIlxcdTIwMThcIiwgXCLigJhcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBzeW1ib2xzX3RleHRvcmQsIFwiXFx1MjAxOVwiLCBcIuKAmVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHN5bWJvbHNfdGV4dG9yZCwgXCJcXHUyMDFDXCIsIFwi4oCcXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3ltYm9sc190ZXh0b3JkLCBcIlxcdTIwMURcIiwgXCLigJ1cIik7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy93aWRlLWNoYXJhY3Rlci5qc1xuLyoqXG4gKiBUaGlzIGZpbGUgcHJvdmlkZXMgc3VwcG9ydCBmb3IgVW5pY29kZSByYW5nZSBVKzFENDAwIHRvIFUrMUQ3RkYsXG4gKiBNYXRoZW1hdGljYWwgQWxwaGFudW1lcmljIFN5bWJvbHMuXG4gKlxuICogRnVuY3Rpb24gd2lkZUNoYXJhY3RlckZvbnQgdGFrZXMgYSB3aWRlIGNoYXJhY3RlciBhcyBpbnB1dCBhbmQgcmV0dXJuc1xuICogdGhlIGZvbnQgaW5mb3JtYXRpb24gbmVjZXNzYXJ5IHRvIHJlbmRlciBpdCBwcm9wZXJseS5cbiAqL1xuXG4vKipcbiAqIERhdGEgYmVsb3cgaXMgZnJvbSBodHRwczovL3d3dy51bmljb2RlLm9yZy9jaGFydHMvUERGL1UxRDQwMC5wZGZcbiAqIFRoYXQgZG9jdW1lbnQgc29ydHMgY2hhcmFjdGVycyBpbnRvIGdyb3VwcyBieSBmb250IHR5cGUsIHNheSBib2xkIG9yIGl0YWxpYy5cbiAqXG4gKiBJbiB0aGUgYXJyYXlzIGJlbG93LCBlYWNoIHN1YmFycmF5IGNvbnNpc3RzIHRocmVlIGVsZW1lbnRzOlxuICogICAgICAqIFRoZSBDU1MgY2xhc3Mgb2YgdGhhdCBncm91cCB3aGVuIGluIG1hdGggbW9kZS5cbiAqICAgICAgKiBUaGUgQ1NTIGNsYXNzIG9mIHRoYXQgZ3JvdXAgd2hlbiBpbiB0ZXh0IG1vZGUuXG4gKiAgICAgICogVGhlIGZvbnQgbmFtZSwgc28gdGhhdCBLYVRlWCBjYW4gZ2V0IGZvbnQgbWV0cmljcy5cbiAqL1xuXG52YXIgd2lkZUxhdGluTGV0dGVyRGF0YSA9IFtbXCJtYXRoYmZcIiwgXCJ0ZXh0YmZcIiwgXCJNYWluLUJvbGRcIl0sIC8vIEEtWiBib2xkIHVwcmlnaHRcbltcIm1hdGhiZlwiLCBcInRleHRiZlwiLCBcIk1haW4tQm9sZFwiXSwgLy8gYS16IGJvbGQgdXByaWdodFxuW1wibWF0aGRlZmF1bHRcIiwgXCJ0ZXh0aXRcIiwgXCJNYXRoLUl0YWxpY1wiXSwgLy8gQS1aIGl0YWxpY1xuW1wibWF0aGRlZmF1bHRcIiwgXCJ0ZXh0aXRcIiwgXCJNYXRoLUl0YWxpY1wiXSwgLy8gYS16IGl0YWxpY1xuW1wiYm9sZHN5bWJvbFwiLCBcImJvbGRzeW1ib2xcIiwgXCJNYWluLUJvbGRJdGFsaWNcIl0sIC8vIEEtWiBib2xkIGl0YWxpY1xuW1wiYm9sZHN5bWJvbFwiLCBcImJvbGRzeW1ib2xcIiwgXCJNYWluLUJvbGRJdGFsaWNcIl0sIC8vIGEteiBib2xkIGl0YWxpY1xuLy8gTWFwIGZhbmN5IEEtWiBsZXR0ZXJzIHRvIHNjcmlwdCwgbm90IGNhbGxpZ3JhcGhpYy5cbi8vIFRoaXMgYWxpZ25zIHdpdGggdW5pY29kZS1tYXRoIGFuZCBtYXRoIGZvbnRzIChleGNlcHQgQ2FtYnJpYSBNYXRoKS5cbltcIm1hdGhzY3JcIiwgXCJ0ZXh0c2NyXCIsIFwiU2NyaXB0LVJlZ3VsYXJcIl0sIC8vIEEtWiBzY3JpcHRcbltcIlwiLCBcIlwiLCBcIlwiXSwgLy8gYS16IHNjcmlwdC4gIE5vIGZvbnRcbltcIlwiLCBcIlwiLCBcIlwiXSwgLy8gQS1aIGJvbGQgc2NyaXB0LiBObyBmb250XG5bXCJcIiwgXCJcIiwgXCJcIl0sIC8vIGEteiBib2xkIHNjcmlwdC4gTm8gZm9udFxuW1wibWF0aGZyYWtcIiwgXCJ0ZXh0ZnJha1wiLCBcIkZyYWt0dXItUmVndWxhclwiXSwgLy8gQS1aIEZyYWt0dXJcbltcIm1hdGhmcmFrXCIsIFwidGV4dGZyYWtcIiwgXCJGcmFrdHVyLVJlZ3VsYXJcIl0sIC8vIGEteiBGcmFrdHVyXG5bXCJtYXRoYmJcIiwgXCJ0ZXh0YmJcIiwgXCJBTVMtUmVndWxhclwiXSwgLy8gQS1aIGRvdWJsZS1zdHJ1Y2tcbltcIm1hdGhiYlwiLCBcInRleHRiYlwiLCBcIkFNUy1SZWd1bGFyXCJdLCAvLyBrIGRvdWJsZS1zdHJ1Y2tcbltcIlwiLCBcIlwiLCBcIlwiXSwgLy8gQS1aIGJvbGQgRnJha3R1ciBObyBmb250IG1ldHJpY3NcbltcIlwiLCBcIlwiLCBcIlwiXSwgLy8gYS16IGJvbGQgRnJha3R1ci4gICBObyBmb250LlxuW1wibWF0aHNmXCIsIFwidGV4dHNmXCIsIFwiU2Fuc1NlcmlmLVJlZ3VsYXJcIl0sIC8vIEEtWiBzYW5zLXNlcmlmXG5bXCJtYXRoc2ZcIiwgXCJ0ZXh0c2ZcIiwgXCJTYW5zU2VyaWYtUmVndWxhclwiXSwgLy8gYS16IHNhbnMtc2VyaWZcbltcIm1hdGhib2xkc2ZcIiwgXCJ0ZXh0Ym9sZHNmXCIsIFwiU2Fuc1NlcmlmLUJvbGRcIl0sIC8vIEEtWiBib2xkIHNhbnMtc2VyaWZcbltcIm1hdGhib2xkc2ZcIiwgXCJ0ZXh0Ym9sZHNmXCIsIFwiU2Fuc1NlcmlmLUJvbGRcIl0sIC8vIGEteiBib2xkIHNhbnMtc2VyaWZcbltcIm1hdGhpdHNmXCIsIFwidGV4dGl0c2ZcIiwgXCJTYW5zU2VyaWYtSXRhbGljXCJdLCAvLyBBLVogaXRhbGljIHNhbnMtc2VyaWZcbltcIm1hdGhpdHNmXCIsIFwidGV4dGl0c2ZcIiwgXCJTYW5zU2VyaWYtSXRhbGljXCJdLCAvLyBhLXogaXRhbGljIHNhbnMtc2VyaWZcbltcIlwiLCBcIlwiLCBcIlwiXSwgLy8gQS1aIGJvbGQgaXRhbGljIHNhbnMuIE5vIGZvbnRcbltcIlwiLCBcIlwiLCBcIlwiXSwgLy8gYS16IGJvbGQgaXRhbGljIHNhbnMuIE5vIGZvbnRcbltcIm1hdGh0dFwiLCBcInRleHR0dFwiLCBcIlR5cGV3cml0ZXItUmVndWxhclwiXSwgLy8gQS1aIG1vbm9zcGFjZVxuW1wibWF0aHR0XCIsIFwidGV4dHR0XCIsIFwiVHlwZXdyaXRlci1SZWd1bGFyXCJdXTtcbnZhciB3aWRlTnVtZXJhbERhdGEgPSBbW1wibWF0aGJmXCIsIFwidGV4dGJmXCIsIFwiTWFpbi1Cb2xkXCJdLCAvLyAwLTkgYm9sZFxuW1wiXCIsIFwiXCIsIFwiXCJdLCAvLyAwLTkgZG91YmxlLXN0cnVjay4gTm8gS2FUZVggZm9udC5cbltcIm1hdGhzZlwiLCBcInRleHRzZlwiLCBcIlNhbnNTZXJpZi1SZWd1bGFyXCJdLCAvLyAwLTkgc2Fucy1zZXJpZlxuW1wibWF0aGJvbGRzZlwiLCBcInRleHRib2xkc2ZcIiwgXCJTYW5zU2VyaWYtQm9sZFwiXSwgLy8gMC05IGJvbGQgc2Fucy1zZXJpZlxuW1wibWF0aHR0XCIsIFwidGV4dHR0XCIsIFwiVHlwZXdyaXRlci1SZWd1bGFyXCJdXTtcbnZhciB3aWRlX2NoYXJhY3Rlcl93aWRlQ2hhcmFjdGVyRm9udCA9IGZ1bmN0aW9uIHdpZGVDaGFyYWN0ZXJGb250KHdpZGVDaGFyLCBtb2RlKSB7XG4gIC8vIElFIGRvZXNuJ3Qgc3VwcG9ydCBjb2RlUG9pbnRBdCgpLiBTbyB3b3JrIHdpdGggdGhlIHN1cnJvZ2F0ZSBwYWlyLlxuICB2YXIgSCA9IHdpZGVDaGFyLmNoYXJDb2RlQXQoMCk7IC8vIGhpZ2ggc3Vycm9nYXRlXG5cbiAgdmFyIEwgPSB3aWRlQ2hhci5jaGFyQ29kZUF0KDEpOyAvLyBsb3cgc3Vycm9nYXRlXG5cbiAgdmFyIGNvZGVQb2ludCA9IChIIC0gMHhEODAwKSAqIDB4NDAwICsgKEwgLSAweERDMDApICsgMHgxMDAwMDtcbiAgdmFyIGogPSBtb2RlID09PSBcIm1hdGhcIiA/IDAgOiAxOyAvLyBjb2x1bW4gaW5kZXggZm9yIENTUyBjbGFzcy5cblxuICBpZiAoMHgxRDQwMCA8PSBjb2RlUG9pbnQgJiYgY29kZVBvaW50IDwgMHgxRDZBNCkge1xuICAgIC8vIHdpZGVMYXRpbkxldHRlckRhdGEgY29udGFpbnMgZXhhY3RseSAyNiBjaGFycyBvbiBlYWNoIHJvdy5cbiAgICAvLyBTbyB3ZSBjYW4gY2FsY3VsYXRlIHRoZSByZWxldmFudCByb3cuIE5vIHRyYXZlcnNlIG5lY2Vzc2FyeS5cbiAgICB2YXIgaSA9IE1hdGguZmxvb3IoKGNvZGVQb2ludCAtIDB4MUQ0MDApIC8gMjYpO1xuICAgIHJldHVybiBbd2lkZUxhdGluTGV0dGVyRGF0YVtpXVsyXSwgd2lkZUxhdGluTGV0dGVyRGF0YVtpXVtqXV07XG4gIH0gZWxzZSBpZiAoMHgxRDdDRSA8PSBjb2RlUG9pbnQgJiYgY29kZVBvaW50IDw9IDB4MUQ3RkYpIHtcbiAgICAvLyBOdW1lcmFscywgdGVuIHBlciByb3cuXG4gICAgdmFyIF9pID0gTWF0aC5mbG9vcigoY29kZVBvaW50IC0gMHgxRDdDRSkgLyAxMCk7XG5cbiAgICByZXR1cm4gW3dpZGVOdW1lcmFsRGF0YVtfaV1bMl0sIHdpZGVOdW1lcmFsRGF0YVtfaV1bal1dO1xuICB9IGVsc2UgaWYgKGNvZGVQb2ludCA9PT0gMHgxRDZBNSB8fCBjb2RlUG9pbnQgPT09IDB4MUQ2QTYpIHtcbiAgICAvLyBkb3RsZXNzIGkgb3IgalxuICAgIHJldHVybiBbd2lkZUxhdGluTGV0dGVyRGF0YVswXVsyXSwgd2lkZUxhdGluTGV0dGVyRGF0YVswXVtqXV07XG4gIH0gZWxzZSBpZiAoMHgxRDZBNiA8IGNvZGVQb2ludCAmJiBjb2RlUG9pbnQgPCAweDFEN0NFKSB7XG4gICAgLy8gR3JlZWsgbGV0dGVycy4gTm90IHN1cHBvcnRlZCwgeWV0LlxuICAgIHJldHVybiBbXCJcIiwgXCJcIl07XG4gIH0gZWxzZSB7XG4gICAgLy8gV2UgZG9uJ3Qgc3VwcG9ydCBhbnkgd2lkZSBjaGFyYWN0ZXJzIG91dHNpZGUgMUQ0MDDigJMxRDdGRi5cbiAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJVbnN1cHBvcnRlZCBjaGFyYWN0ZXI6IFwiICsgd2lkZUNoYXIpO1xuICB9XG59O1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvT3B0aW9ucy5qc1xuLyoqXG4gKiBUaGlzIGZpbGUgY29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9wdGlvbnMgdGhhdCB0aGUgUGFyc2VyIGNhcnJpZXNcbiAqIGFyb3VuZCB3aXRoIGl0IHdoaWxlIHBhcnNpbmcuIERhdGEgaXMgaGVsZCBpbiBhbiBgT3B0aW9uc2Agb2JqZWN0LCBhbmQgd2hlblxuICogcmVjdXJzaW5nLCBhIG5ldyBgT3B0aW9uc2Agb2JqZWN0IGNhbiBiZSBjcmVhdGVkIHdpdGggdGhlIGAud2l0aCpgIGFuZFxuICogYC5yZXNldGAgZnVuY3Rpb25zLlxuICovXG5cbnZhciBzaXplU3R5bGVNYXAgPSBbLy8gRWFjaCBlbGVtZW50IGNvbnRhaW5zIFt0ZXh0c2l6ZSwgc2NyaXB0c2l6ZSwgc2NyaXB0c2NyaXB0c2l6ZV0uXG4vLyBUaGUgc2l6ZSBtYXBwaW5ncyBhcmUgdGFrZW4gZnJvbSBUZVggd2l0aCBcXG5vcm1hbHNpemU9MTBwdC5cblsxLCAxLCAxXSwgLy8gc2l6ZTE6IFs1LCA1LCA1XSAgICAgICAgICAgICAgXFx0aW55XG5bMiwgMSwgMV0sIC8vIHNpemUyOiBbNiwgNSwgNV1cblszLCAxLCAxXSwgLy8gc2l6ZTM6IFs3LCA1LCA1XSAgICAgICAgICAgICAgXFxzY3JpcHRzaXplXG5bNCwgMiwgMV0sIC8vIHNpemU0OiBbOCwgNiwgNV0gICAgICAgICAgICAgIFxcZm9vdG5vdGVzaXplXG5bNSwgMiwgMV0sIC8vIHNpemU1OiBbOSwgNiwgNV0gICAgICAgICAgICAgIFxcc21hbGxcbls2LCAzLCAxXSwgLy8gc2l6ZTY6IFsxMCwgNywgNV0gICAgICAgICAgICAgXFxub3JtYWxzaXplXG5bNywgNCwgMl0sIC8vIHNpemU3OiBbMTIsIDgsIDZdICAgICAgICAgICAgIFxcbGFyZ2Vcbls4LCA2LCAzXSwgLy8gc2l6ZTg6IFsxNC40LCAxMCwgN10gICAgICAgICAgXFxMYXJnZVxuWzksIDcsIDZdLCAvLyBzaXplOTogWzE3LjI4LCAxMiwgMTBdICAgICAgICBcXExBUkdFXG5bMTAsIDgsIDddLCAvLyBzaXplMTA6IFsyMC43NCwgMTQuNCwgMTJdICAgICBcXGh1Z2VcblsxMSwgMTAsIDldXTtcbnZhciBzaXplTXVsdGlwbGllcnMgPSBbLy8gZm9udE1ldHJpY3MuanM6Z2V0R2xvYmFsTWV0cmljcyBhbHNvIHVzZXMgc2l6ZSBpbmRleGVzLCBzbyBpZlxuLy8geW91IGNoYW5nZSBzaXplIGluZGV4ZXMsIGNoYW5nZSB0aGF0IGZ1bmN0aW9uLlxuMC41LCAwLjYsIDAuNywgMC44LCAwLjksIDEuMCwgMS4yLCAxLjQ0LCAxLjcyOCwgMi4wNzQsIDIuNDg4XTtcblxudmFyIHNpemVBdFN0eWxlID0gZnVuY3Rpb24gc2l6ZUF0U3R5bGUoc2l6ZSwgc3R5bGUpIHtcbiAgcmV0dXJuIHN0eWxlLnNpemUgPCAyID8gc2l6ZSA6IHNpemVTdHlsZU1hcFtzaXplIC0gMV1bc3R5bGUuc2l6ZSAtIDFdO1xufTsgLy8gSW4gdGhlc2UgdHlwZXMsIFwiXCIgKGVtcHR5IHN0cmluZykgbWVhbnMgXCJubyBjaGFuZ2VcIi5cblxuXG4vKipcbiAqIFRoaXMgaXMgdGhlIG1haW4gb3B0aW9ucyBjbGFzcy4gSXQgY29udGFpbnMgdGhlIGN1cnJlbnQgc3R5bGUsIHNpemUsIGNvbG9yLFxuICogYW5kIGZvbnQuXG4gKlxuICogT3B0aW9ucyBvYmplY3RzIHNob3VsZCBub3QgYmUgbW9kaWZpZWQuIFRvIGNyZWF0ZSBhIG5ldyBPcHRpb25zIHdpdGhcbiAqIGRpZmZlcmVudCBwcm9wZXJ0aWVzLCBjYWxsIGEgYC5oYXZpbmcqYCBtZXRob2QuXG4gKi9cbnZhciBPcHRpb25zX09wdGlvbnMgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvLyBBIGZvbnQgZmFtaWx5IGFwcGxpZXMgdG8gYSBncm91cCBvZiBmb250cyAoaS5lLiBTYW5zU2VyaWYpLCB3aGlsZSBhIGZvbnRcbiAgLy8gcmVwcmVzZW50cyBhIHNwZWNpZmljIGZvbnQgKGkuZS4gU2Fuc1NlcmlmIEJvbGQpLlxuICAvLyBTZWU6IGh0dHBzOi8vdGV4LnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy8yMjM1MC9kaWZmZXJlbmNlLWJldHdlZW4tdGV4dHJtLWFuZC1tYXRocm1cblxuICAvKipcbiAgICogVGhlIGJhc2Ugc2l6ZSBpbmRleC5cbiAgICovXG4gIGZ1bmN0aW9uIE9wdGlvbnMoZGF0YSkge1xuICAgIHRoaXMuc3R5bGUgPSB2b2lkIDA7XG4gICAgdGhpcy5jb2xvciA9IHZvaWQgMDtcbiAgICB0aGlzLnNpemUgPSB2b2lkIDA7XG4gICAgdGhpcy50ZXh0U2l6ZSA9IHZvaWQgMDtcbiAgICB0aGlzLnBoYW50b20gPSB2b2lkIDA7XG4gICAgdGhpcy5mb250ID0gdm9pZCAwO1xuICAgIHRoaXMuZm9udEZhbWlseSA9IHZvaWQgMDtcbiAgICB0aGlzLmZvbnRXZWlnaHQgPSB2b2lkIDA7XG4gICAgdGhpcy5mb250U2hhcGUgPSB2b2lkIDA7XG4gICAgdGhpcy5zaXplTXVsdGlwbGllciA9IHZvaWQgMDtcbiAgICB0aGlzLm1heFNpemUgPSB2b2lkIDA7XG4gICAgdGhpcy5fZm9udE1ldHJpY3MgPSB2b2lkIDA7XG4gICAgdGhpcy5zdHlsZSA9IGRhdGEuc3R5bGU7XG4gICAgdGhpcy5jb2xvciA9IGRhdGEuY29sb3I7XG4gICAgdGhpcy5zaXplID0gZGF0YS5zaXplIHx8IE9wdGlvbnMuQkFTRVNJWkU7XG4gICAgdGhpcy50ZXh0U2l6ZSA9IGRhdGEudGV4dFNpemUgfHwgdGhpcy5zaXplO1xuICAgIHRoaXMucGhhbnRvbSA9ICEhZGF0YS5waGFudG9tO1xuICAgIHRoaXMuZm9udCA9IGRhdGEuZm9udCB8fCBcIlwiO1xuICAgIHRoaXMuZm9udEZhbWlseSA9IGRhdGEuZm9udEZhbWlseSB8fCBcIlwiO1xuICAgIHRoaXMuZm9udFdlaWdodCA9IGRhdGEuZm9udFdlaWdodCB8fCAnJztcbiAgICB0aGlzLmZvbnRTaGFwZSA9IGRhdGEuZm9udFNoYXBlIHx8ICcnO1xuICAgIHRoaXMuc2l6ZU11bHRpcGxpZXIgPSBzaXplTXVsdGlwbGllcnNbdGhpcy5zaXplIC0gMV07XG4gICAgdGhpcy5tYXhTaXplID0gZGF0YS5tYXhTaXplO1xuICAgIHRoaXMuX2ZvbnRNZXRyaWNzID0gdW5kZWZpbmVkO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IG9wdGlvbnMgb2JqZWN0IHdpdGggdGhlIHNhbWUgcHJvcGVydGllcyBhcyBcInRoaXNcIi4gIFByb3BlcnRpZXNcbiAgICogZnJvbSBcImV4dGVuc2lvblwiIHdpbGwgYmUgY29waWVkIHRvIHRoZSBuZXcgb3B0aW9ucyBvYmplY3QuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IE9wdGlvbnMucHJvdG90eXBlO1xuXG4gIF9wcm90by5leHRlbmQgPSBmdW5jdGlvbiBleHRlbmQoZXh0ZW5zaW9uKSB7XG4gICAgdmFyIGRhdGEgPSB7XG4gICAgICBzdHlsZTogdGhpcy5zdHlsZSxcbiAgICAgIHNpemU6IHRoaXMuc2l6ZSxcbiAgICAgIHRleHRTaXplOiB0aGlzLnRleHRTaXplLFxuICAgICAgY29sb3I6IHRoaXMuY29sb3IsXG4gICAgICBwaGFudG9tOiB0aGlzLnBoYW50b20sXG4gICAgICBmb250OiB0aGlzLmZvbnQsXG4gICAgICBmb250RmFtaWx5OiB0aGlzLmZvbnRGYW1pbHksXG4gICAgICBmb250V2VpZ2h0OiB0aGlzLmZvbnRXZWlnaHQsXG4gICAgICBmb250U2hhcGU6IHRoaXMuZm9udFNoYXBlLFxuICAgICAgbWF4U2l6ZTogdGhpcy5tYXhTaXplXG4gICAgfTtcblxuICAgIGZvciAodmFyIGtleSBpbiBleHRlbnNpb24pIHtcbiAgICAgIGlmIChleHRlbnNpb24uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBkYXRhW2tleV0gPSBleHRlbnNpb25ba2V5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IE9wdGlvbnMoZGF0YSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBhbiBvcHRpb25zIG9iamVjdCB3aXRoIHRoZSBnaXZlbiBzdHlsZS4gSWYgYHRoaXMuc3R5bGUgPT09IHN0eWxlYCxcbiAgICogcmV0dXJucyBgdGhpc2AuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhdmluZ1N0eWxlID0gZnVuY3Rpb24gaGF2aW5nU3R5bGUoc3R5bGUpIHtcbiAgICBpZiAodGhpcy5zdHlsZSA9PT0gc3R5bGUpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5leHRlbmQoe1xuICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgIHNpemU6IHNpemVBdFN0eWxlKHRoaXMudGV4dFNpemUsIHN0eWxlKVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gb3B0aW9ucyBvYmplY3Qgd2l0aCBhIGNyYW1wZWQgdmVyc2lvbiBvZiB0aGUgY3VycmVudCBzdHlsZS4gSWZcbiAgICogdGhlIGN1cnJlbnQgc3R5bGUgaXMgY3JhbXBlZCwgcmV0dXJucyBgdGhpc2AuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhdmluZ0NyYW1wZWRTdHlsZSA9IGZ1bmN0aW9uIGhhdmluZ0NyYW1wZWRTdHlsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5oYXZpbmdTdHlsZSh0aGlzLnN0eWxlLmNyYW1wKCkpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gb3B0aW9ucyBvYmplY3Qgd2l0aCB0aGUgZ2l2ZW4gc2l6ZSBhbmQgaW4gYXQgbGVhc3QgYFxcdGV4dHN0eWxlYC5cbiAgICogUmV0dXJucyBgdGhpc2AgaWYgYXBwcm9wcmlhdGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhdmluZ1NpemUgPSBmdW5jdGlvbiBoYXZpbmdTaXplKHNpemUpIHtcbiAgICBpZiAodGhpcy5zaXplID09PSBzaXplICYmIHRoaXMudGV4dFNpemUgPT09IHNpemUpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5leHRlbmQoe1xuICAgICAgICBzdHlsZTogdGhpcy5zdHlsZS50ZXh0KCksXG4gICAgICAgIHNpemU6IHNpemUsXG4gICAgICAgIHRleHRTaXplOiBzaXplLFxuICAgICAgICBzaXplTXVsdGlwbGllcjogc2l6ZU11bHRpcGxpZXJzW3NpemUgLSAxXVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBMaWtlIGB0aGlzLmhhdmluZ1NpemUoQkFTRVNJWkUpLmhhdmluZ1N0eWxlKHN0eWxlKWAuIElmIGBzdHlsZWAgaXMgb21pdHRlZCxcbiAgICogY2hhbmdlcyB0byBhdCBsZWFzdCBgXFx0ZXh0c3R5bGVgLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYXZpbmdCYXNlU3R5bGUgPSBmdW5jdGlvbiBoYXZpbmdCYXNlU3R5bGUoc3R5bGUpIHtcbiAgICBzdHlsZSA9IHN0eWxlIHx8IHRoaXMuc3R5bGUudGV4dCgpO1xuICAgIHZhciB3YW50U2l6ZSA9IHNpemVBdFN0eWxlKE9wdGlvbnMuQkFTRVNJWkUsIHN0eWxlKTtcblxuICAgIGlmICh0aGlzLnNpemUgPT09IHdhbnRTaXplICYmIHRoaXMudGV4dFNpemUgPT09IE9wdGlvbnMuQkFTRVNJWkUgJiYgdGhpcy5zdHlsZSA9PT0gc3R5bGUpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5leHRlbmQoe1xuICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgIHNpemU6IHdhbnRTaXplXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGUgZWZmZWN0IG9mIHNpemluZyBjaGFuZ2VzIHN1Y2ggYXMgXFxIdWdlLlxuICAgKiBLZWVwIHRoZSBlZmZlY3Qgb2YgdGhlIGN1cnJlbnQgc3R5bGUsIHN1Y2ggYXMgXFxzY3JpcHRzdHlsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGF2aW5nQmFzZVNpemluZyA9IGZ1bmN0aW9uIGhhdmluZ0Jhc2VTaXppbmcoKSB7XG4gICAgdmFyIHNpemU7XG5cbiAgICBzd2l0Y2ggKHRoaXMuc3R5bGUuaWQpIHtcbiAgICAgIGNhc2UgNDpcbiAgICAgIGNhc2UgNTpcbiAgICAgICAgc2l6ZSA9IDM7IC8vIG5vcm1hbHNpemUgaW4gc2NyaXB0c3R5bGVcblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA2OlxuICAgICAgY2FzZSA3OlxuICAgICAgICBzaXplID0gMTsgLy8gbm9ybWFsc2l6ZSBpbiBzY3JpcHRzY3JpcHRzdHlsZVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBzaXplID0gNjtcbiAgICAgIC8vIG5vcm1hbHNpemUgaW4gdGV4dHN0eWxlIG9yIGRpc3BsYXlzdHlsZVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmV4dGVuZCh7XG4gICAgICBzdHlsZTogdGhpcy5zdHlsZS50ZXh0KCksXG4gICAgICBzaXplOiBzaXplXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBvcHRpb25zIG9iamVjdCB3aXRoIHRoZSBnaXZlbiBjb2xvci5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ud2l0aENvbG9yID0gZnVuY3Rpb24gd2l0aENvbG9yKGNvbG9yKSB7XG4gICAgcmV0dXJuIHRoaXMuZXh0ZW5kKHtcbiAgICAgIGNvbG9yOiBjb2xvclxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgb3B0aW9ucyBvYmplY3Qgd2l0aCBcInBoYW50b21cIiBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ud2l0aFBoYW50b20gPSBmdW5jdGlvbiB3aXRoUGhhbnRvbSgpIHtcbiAgICByZXR1cm4gdGhpcy5leHRlbmQoe1xuICAgICAgcGhhbnRvbTogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IG9wdGlvbnMgb2JqZWN0IHdpdGggdGhlIGdpdmVuIG1hdGggZm9udCBvciBvbGQgdGV4dCBmb250LlxuICAgKiBAdHlwZSB7W3R5cGVdfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by53aXRoRm9udCA9IGZ1bmN0aW9uIHdpdGhGb250KGZvbnQpIHtcbiAgICByZXR1cm4gdGhpcy5leHRlbmQoe1xuICAgICAgZm9udDogZm9udFxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgb3B0aW9ucyBvYmplY3RzIHdpdGggdGhlIGdpdmVuIGZvbnRGYW1pbHkuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLndpdGhUZXh0Rm9udEZhbWlseSA9IGZ1bmN0aW9uIHdpdGhUZXh0Rm9udEZhbWlseShmb250RmFtaWx5KSB7XG4gICAgcmV0dXJuIHRoaXMuZXh0ZW5kKHtcbiAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICBmb250OiBcIlwiXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgb3B0aW9ucyBvYmplY3Qgd2l0aCB0aGUgZ2l2ZW4gZm9udCB3ZWlnaHRcbiAgICovXG4gIDtcblxuICBfcHJvdG8ud2l0aFRleHRGb250V2VpZ2h0ID0gZnVuY3Rpb24gd2l0aFRleHRGb250V2VpZ2h0KGZvbnRXZWlnaHQpIHtcbiAgICByZXR1cm4gdGhpcy5leHRlbmQoe1xuICAgICAgZm9udFdlaWdodDogZm9udFdlaWdodCxcbiAgICAgIGZvbnQ6IFwiXCJcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBvcHRpb25zIG9iamVjdCB3aXRoIHRoZSBnaXZlbiBmb250IHdlaWdodFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by53aXRoVGV4dEZvbnRTaGFwZSA9IGZ1bmN0aW9uIHdpdGhUZXh0Rm9udFNoYXBlKGZvbnRTaGFwZSkge1xuICAgIHJldHVybiB0aGlzLmV4dGVuZCh7XG4gICAgICBmb250U2hhcGU6IGZvbnRTaGFwZSxcbiAgICAgIGZvbnQ6IFwiXCJcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHRoZSBDU1Mgc2l6aW5nIGNsYXNzZXMgcmVxdWlyZWQgdG8gc3dpdGNoIGZyb20gZW5jbG9zaW5nIG9wdGlvbnNcbiAgICogYG9sZE9wdGlvbnNgIHRvIGB0aGlzYC4gUmV0dXJucyBhbiBhcnJheSBvZiBjbGFzc2VzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zaXppbmdDbGFzc2VzID0gZnVuY3Rpb24gc2l6aW5nQ2xhc3NlcyhvbGRPcHRpb25zKSB7XG4gICAgaWYgKG9sZE9wdGlvbnMuc2l6ZSAhPT0gdGhpcy5zaXplKSB7XG4gICAgICByZXR1cm4gW1wic2l6aW5nXCIsIFwicmVzZXQtc2l6ZVwiICsgb2xkT3B0aW9ucy5zaXplLCBcInNpemVcIiArIHRoaXMuc2l6ZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgQ1NTIHNpemluZyBjbGFzc2VzIHJlcXVpcmVkIHRvIHN3aXRjaCB0byB0aGUgYmFzZSBzaXplLiBMaWtlXG4gICAqIGB0aGlzLmhhdmluZ1NpemUoQkFTRVNJWkUpLnNpemluZ0NsYXNzZXModGhpcylgLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5iYXNlU2l6aW5nQ2xhc3NlcyA9IGZ1bmN0aW9uIGJhc2VTaXppbmdDbGFzc2VzKCkge1xuICAgIGlmICh0aGlzLnNpemUgIT09IE9wdGlvbnMuQkFTRVNJWkUpIHtcbiAgICAgIHJldHVybiBbXCJzaXppbmdcIiwgXCJyZXNldC1zaXplXCIgKyB0aGlzLnNpemUsIFwic2l6ZVwiICsgT3B0aW9ucy5CQVNFU0laRV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgZm9udCBtZXRyaWNzIGZvciB0aGlzIHNpemUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmZvbnRNZXRyaWNzID0gZnVuY3Rpb24gZm9udE1ldHJpY3MoKSB7XG4gICAgaWYgKCF0aGlzLl9mb250TWV0cmljcykge1xuICAgICAgdGhpcy5fZm9udE1ldHJpY3MgPSBnZXRHbG9iYWxNZXRyaWNzKHRoaXMuc2l6ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2ZvbnRNZXRyaWNzO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBDU1MgY29sb3Igb2YgdGhlIGN1cnJlbnQgb3B0aW9ucyBvYmplY3RcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0Q29sb3IgPSBmdW5jdGlvbiBnZXRDb2xvcigpIHtcbiAgICBpZiAodGhpcy5waGFudG9tKSB7XG4gICAgICByZXR1cm4gXCJ0cmFuc3BhcmVudFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5jb2xvcjtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIE9wdGlvbnM7XG59KCk7XG5cbk9wdGlvbnNfT3B0aW9ucy5CQVNFU0laRSA9IDY7XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBzcmNfT3B0aW9ucyA9IChPcHRpb25zX09wdGlvbnMpO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvdW5pdHMuanNcbi8qKlxuICogVGhpcyBmaWxlIGRvZXMgY29udmVyc2lvbiBiZXR3ZWVuIHVuaXRzLiAgSW4gcGFydGljdWxhciwgaXQgcHJvdmlkZXNcbiAqIGNhbGN1bGF0ZVNpemUgdG8gY29udmVydCBvdGhlciB1bml0cyBpbnRvIGVtcy5cbiAqL1xuXG4gLy8gVGhpcyB0YWJsZSBnaXZlcyB0aGUgbnVtYmVyIG9mIFRlWCBwdHMgaW4gb25lIG9mIGVhY2ggKmFic29sdXRlKiBUZVggdW5pdC5cbi8vIFRodXMsIG11bHRpcGx5aW5nIGEgbGVuZ3RoIGJ5IHRoaXMgbnVtYmVyIGNvbnZlcnRzIHRoZSBsZW5ndGggZnJvbSB1bml0c1xuLy8gaW50byBwdHMuICBEaXZpZGluZyB0aGUgcmVzdWx0IGJ5IHB0UGVyRW0gZ2l2ZXMgdGhlIG51bWJlciBvZiBlbXNcbi8vICphc3N1bWluZyogYSBmb250IHNpemUgb2YgcHRQZXJFbSAobm9ybWFsIHNpemUsIG5vcm1hbCBzdHlsZSkuXG5cbnZhciBwdFBlclVuaXQgPSB7XG4gIC8vIGh0dHBzOi8vZW4ud2lraWJvb2tzLm9yZy93aWtpL0xhVGVYL0xlbmd0aHMgYW5kXG4gIC8vIGh0dHBzOi8vdGV4LnN0YWNrZXhjaGFuZ2UuY29tL2EvODI2M1xuICBcInB0XCI6IDEsXG4gIC8vIFRlWCBwb2ludFxuICBcIm1tXCI6IDcyMjcgLyAyNTQwLFxuICAvLyBtaWxsaW1ldGVyXG4gIFwiY21cIjogNzIyNyAvIDI1NCxcbiAgLy8gY2VudGltZXRlclxuICBcImluXCI6IDcyLjI3LFxuICAvLyBpbmNoXG4gIFwiYnBcIjogODAzIC8gODAwLFxuICAvLyBiaWcgKFBvc3RTY3JpcHQpIHBvaW50c1xuICBcInBjXCI6IDEyLFxuICAvLyBwaWNhXG4gIFwiZGRcIjogMTIzOCAvIDExNTcsXG4gIC8vIGRpZG90XG4gIFwiY2NcIjogMTQ4NTYgLyAxMTU3LFxuICAvLyBjaWNlcm8gKDEyIGRpZG90KVxuICBcIm5kXCI6IDY4NSAvIDY0MixcbiAgLy8gbmV3IGRpZG90XG4gIFwibmNcIjogMTM3MCAvIDEwNyxcbiAgLy8gbmV3IGNpY2VybyAoMTIgbmV3IGRpZG90KVxuICBcInNwXCI6IDEgLyA2NTUzNixcbiAgLy8gc2NhbGVkIHBvaW50IChUZVgncyBpbnRlcm5hbCBzbWFsbGVzdCB1bml0KVxuICAvLyBodHRwczovL3RleC5zdGFja2V4Y2hhbmdlLmNvbS9hLzQxMzcxXG4gIFwicHhcIjogODAzIC8gODAwIC8vIFxccGRmcHhkaW1lbiBkZWZhdWx0cyB0byAxIGJwIGluIHBkZlRlWCBhbmQgTHVhVGVYXG5cbn07IC8vIERpY3Rpb25hcnkgb2YgcmVsYXRpdmUgdW5pdHMsIGZvciBmYXN0IHZhbGlkaXR5IHRlc3RpbmcuXG5cbnZhciByZWxhdGl2ZVVuaXQgPSB7XG4gIFwiZXhcIjogdHJ1ZSxcbiAgXCJlbVwiOiB0cnVlLFxuICBcIm11XCI6IHRydWVcbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIHNwZWNpZmllZCB1bml0IChlaXRoZXIgYSBzdHJpbmcgZGVmaW5pbmcgdGhlIHVuaXRcbiAqIG9yIGEgXCJzaXplXCIgcGFyc2Ugbm9kZSBjb250YWluaW5nIGEgdW5pdCBmaWVsZCkgaXMgdmFsaWQuXG4gKi9cbnZhciB2YWxpZFVuaXQgPSBmdW5jdGlvbiB2YWxpZFVuaXQodW5pdCkge1xuICBpZiAodHlwZW9mIHVuaXQgIT09IFwic3RyaW5nXCIpIHtcbiAgICB1bml0ID0gdW5pdC51bml0O1xuICB9XG5cbiAgcmV0dXJuIHVuaXQgaW4gcHRQZXJVbml0IHx8IHVuaXQgaW4gcmVsYXRpdmVVbml0IHx8IHVuaXQgPT09IFwiZXhcIjtcbn07XG4vKlxuICogQ29udmVydCBhIFwic2l6ZVwiIHBhcnNlIG5vZGUgKHdpdGggbnVtZXJpYyBcIm51bWJlclwiIGFuZCBzdHJpbmcgXCJ1bml0XCIgZmllbGRzLFxuICogYXMgcGFyc2VkIGJ5IGZ1bmN0aW9ucy5qcyBhcmdUeXBlIFwic2l6ZVwiKSBpbnRvIGEgQ1NTIGVtIHZhbHVlIGZvciB0aGVcbiAqIGN1cnJlbnQgc3R5bGUvc2NhbGUuICBgb3B0aW9uc2AgZ2l2ZXMgdGhlIGN1cnJlbnQgb3B0aW9ucy5cbiAqL1xuXG52YXIgdW5pdHNfY2FsY3VsYXRlU2l6ZSA9IGZ1bmN0aW9uIGNhbGN1bGF0ZVNpemUoc2l6ZVZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciBzY2FsZTtcblxuICBpZiAoc2l6ZVZhbHVlLnVuaXQgaW4gcHRQZXJVbml0KSB7XG4gICAgLy8gQWJzb2x1dGUgdW5pdHNcbiAgICBzY2FsZSA9IHB0UGVyVW5pdFtzaXplVmFsdWUudW5pdF0gLy8gQ29udmVydCB1bml0IHRvIHB0XG4gICAgLyBvcHRpb25zLmZvbnRNZXRyaWNzKCkucHRQZXJFbSAvLyBDb252ZXJ0IHB0IHRvIENTUyBlbVxuICAgIC8gb3B0aW9ucy5zaXplTXVsdGlwbGllcjsgLy8gVW5zY2FsZSB0byBtYWtlIGFic29sdXRlIHVuaXRzXG4gIH0gZWxzZSBpZiAoc2l6ZVZhbHVlLnVuaXQgPT09IFwibXVcIikge1xuICAgIC8vIGBtdWAgdW5pdHMgc2NhbGUgd2l0aCBzY3JpcHRzdHlsZS9zY3JpcHRzY3JpcHRzdHlsZS5cbiAgICBzY2FsZSA9IG9wdGlvbnMuZm9udE1ldHJpY3MoKS5jc3NFbVBlck11O1xuICB9IGVsc2Uge1xuICAgIC8vIE90aGVyIHJlbGF0aXZlIHVuaXRzIGFsd2F5cyByZWZlciB0byB0aGUgKnRleHRzdHlsZSogZm9udFxuICAgIC8vIGluIHRoZSBjdXJyZW50IHNpemUuXG4gICAgdmFyIHVuaXRPcHRpb25zO1xuXG4gICAgaWYgKG9wdGlvbnMuc3R5bGUuaXNUaWdodCgpKSB7XG4gICAgICAvLyBpc1RpZ2h0KCkgbWVhbnMgY3VycmVudCBzdHlsZSBpcyBzY3JpcHQvc2NyaXB0c2NyaXB0LlxuICAgICAgdW5pdE9wdGlvbnMgPSBvcHRpb25zLmhhdmluZ1N0eWxlKG9wdGlvbnMuc3R5bGUudGV4dCgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdW5pdE9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH0gLy8gVE9ETzogSW4gVGVYIHRoZXNlIHVuaXRzIGFyZSByZWxhdGl2ZSB0byB0aGUgcXVhZCBvZiB0aGUgY3VycmVudFxuICAgIC8vICp0ZXh0KiBmb250LCBlLmcuIGNtcjEwLiBLYVRlWCBpbnN0ZWFkIHVzZXMgdmFsdWVzIGZyb20gdGhlXG4gICAgLy8gY29tcGFyYWJseS1zaXplZCAqQ29tcHV0ZXIgTW9kZXJuIHN5bWJvbCogZm9udC4gQXQgMTBwdCwgdGhlc2VcbiAgICAvLyBtYXRjaC4gQXQgN3B0IGFuZCA1cHQsIHRoZXkgZGlmZmVyOiBjbXI3PTEuMTM4ODk0LCBjbXN5Nz0xLjE3MDY0MTtcbiAgICAvLyBjbXI1PTEuMzYxMTMzLCBjbXN5NT0xLjQ3MjI0MS4gQ29uc2lkZXIgJFxcc2NyaXB0c2l6ZSBhXFxrZXJuMWVtYiQuXG4gICAgLy8gVGVYIFxcc2hvd2xpc3RzIHNob3dzIGEga2VybiBvZiAxLjEzODg5ICogZm9udHNpemU7XG4gICAgLy8gS2FUZVggc2hvd3MgYSBrZXJuIG9mIDEuMTcxICogZm9udHNpemUuXG5cblxuICAgIGlmIChzaXplVmFsdWUudW5pdCA9PT0gXCJleFwiKSB7XG4gICAgICBzY2FsZSA9IHVuaXRPcHRpb25zLmZvbnRNZXRyaWNzKCkueEhlaWdodDtcbiAgICB9IGVsc2UgaWYgKHNpemVWYWx1ZS51bml0ID09PSBcImVtXCIpIHtcbiAgICAgIHNjYWxlID0gdW5pdE9wdGlvbnMuZm9udE1ldHJpY3MoKS5xdWFkO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJJbnZhbGlkIHVuaXQ6ICdcIiArIHNpemVWYWx1ZS51bml0ICsgXCInXCIpO1xuICAgIH1cblxuICAgIGlmICh1bml0T3B0aW9ucyAhPT0gb3B0aW9ucykge1xuICAgICAgc2NhbGUgKj0gdW5pdE9wdGlvbnMuc2l6ZU11bHRpcGxpZXIgLyBvcHRpb25zLnNpemVNdWx0aXBsaWVyO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBNYXRoLm1pbihzaXplVmFsdWUubnVtYmVyICogc2NhbGUsIG9wdGlvbnMubWF4U2l6ZSk7XG59O1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvYnVpbGRDb21tb24uanNcbi8qIGVzbGludCBuby1jb25zb2xlOjAgKi9cblxuLyoqXG4gKiBUaGlzIG1vZHVsZSBjb250YWlucyBnZW5lcmFsIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIGZvciBidWlsZGluZ1xuICogZGlmZmVyZW50IGtpbmRzIG9mIGRvbVRyZWUgbm9kZXMgaW4gYSBjb25zaXN0ZW50IG1hbm5lci5cbiAqL1xuXG5cblxuXG5cblxuXG4vLyBUaGUgZm9sbG93aW5nIGhhdmUgdG8gYmUgbG9hZGVkIGZyb20gTWFpbi1JdGFsaWMgZm9udCwgdXNpbmcgY2xhc3MgbWF0aGl0XG52YXIgbWF0aGl0TGV0dGVycyA9IFtcIlxcXFxpbWF0aFwiLCBcIsSxXCIsIC8vIGRvdGxlc3MgaVxuXCJcXFxcam1hdGhcIiwgXCLIt1wiLCAvLyBkb3RsZXNzIGpcblwiXFxcXHBvdW5kc1wiLCBcIlxcXFxtYXRoc3RlcmxpbmdcIiwgXCJcXFxcdGV4dHN0ZXJsaW5nXCIsIFwiwqNcIl07XG4vKipcbiAqIExvb2tzIHVwIHRoZSBnaXZlbiBzeW1ib2wgaW4gZm9udE1ldHJpY3MsIGFmdGVyIGFwcGx5aW5nIGFueSBzeW1ib2xcbiAqIHJlcGxhY2VtZW50cyBkZWZpbmVkIGluIHN5bWJvbC5qc1xuICovXG5cbnZhciBidWlsZENvbW1vbl9sb29rdXBTeW1ib2wgPSBmdW5jdGlvbiBsb29rdXBTeW1ib2wodmFsdWUsIC8vIFRPRE8oIzk2Myk6IFVzZSBhIHVuaW9uIHR5cGUgZm9yIHRoaXMuXG5mb250TmFtZSwgbW9kZSkge1xuICAvLyBSZXBsYWNlIHRoZSB2YWx1ZSB3aXRoIGl0cyByZXBsYWNlZCB2YWx1ZSBmcm9tIHN5bWJvbC5qc1xuICBpZiAoc3JjX3N5bWJvbHNbbW9kZV1bdmFsdWVdICYmIHNyY19zeW1ib2xzW21vZGVdW3ZhbHVlXS5yZXBsYWNlKSB7XG4gICAgdmFsdWUgPSBzcmNfc3ltYm9sc1ttb2RlXVt2YWx1ZV0ucmVwbGFjZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIG1ldHJpY3M6IGdldENoYXJhY3Rlck1ldHJpY3ModmFsdWUsIGZvbnROYW1lLCBtb2RlKVxuICB9O1xufTtcbi8qKlxuICogTWFrZXMgYSBzeW1ib2xOb2RlIGFmdGVyIHRyYW5zbGF0aW9uIHZpYSB0aGUgbGlzdCBvZiBzeW1ib2xzIGluIHN5bWJvbHMuanMuXG4gKiBDb3JyZWN0bHkgcHVsbHMgb3V0IG1ldHJpY3MgZm9yIHRoZSBjaGFyYWN0ZXIsIGFuZCBvcHRpb25hbGx5IHRha2VzIGEgbGlzdCBvZlxuICogY2xhc3NlcyB0byBiZSBhdHRhY2hlZCB0byB0aGUgbm9kZS5cbiAqXG4gKiBUT0RPOiBtYWtlIGFyZ3VtZW50IG9yZGVyIGNsb3NlciB0byBtYWtlU3BhblxuICogVE9ETzogYWRkIGEgc2VwYXJhdGUgYXJndW1lbnQgZm9yIG1hdGggY2xhc3MgKGUuZy4gYG1vcGAsIGBtYmluYCksIHdoaWNoXG4gKiBzaG91bGQgaWYgcHJlc2VudCBjb21lIGZpcnN0IGluIGBjbGFzc2VzYC5cbiAqIFRPRE8oIzk1Myk6IE1ha2UgYG9wdGlvbnNgIG1hbmRhdG9yeSBhbmQgYWx3YXlzIHBhc3MgaXQgaW4uXG4gKi9cblxuXG52YXIgYnVpbGRDb21tb25fbWFrZVN5bWJvbCA9IGZ1bmN0aW9uIG1ha2VTeW1ib2wodmFsdWUsIGZvbnROYW1lLCBtb2RlLCBvcHRpb25zLCBjbGFzc2VzKSB7XG4gIHZhciBsb29rdXAgPSBidWlsZENvbW1vbl9sb29rdXBTeW1ib2wodmFsdWUsIGZvbnROYW1lLCBtb2RlKTtcbiAgdmFyIG1ldHJpY3MgPSBsb29rdXAubWV0cmljcztcbiAgdmFsdWUgPSBsb29rdXAudmFsdWU7XG4gIHZhciBzeW1ib2xOb2RlO1xuXG4gIGlmIChtZXRyaWNzKSB7XG4gICAgdmFyIGl0YWxpYyA9IG1ldHJpY3MuaXRhbGljO1xuXG4gICAgaWYgKG1vZGUgPT09IFwidGV4dFwiIHx8IG9wdGlvbnMgJiYgb3B0aW9ucy5mb250ID09PSBcIm1hdGhpdFwiKSB7XG4gICAgICBpdGFsaWMgPSAwO1xuICAgIH1cblxuICAgIHN5bWJvbE5vZGUgPSBuZXcgZG9tVHJlZV9TeW1ib2xOb2RlKHZhbHVlLCBtZXRyaWNzLmhlaWdodCwgbWV0cmljcy5kZXB0aCwgaXRhbGljLCBtZXRyaWNzLnNrZXcsIG1ldHJpY3Mud2lkdGgsIGNsYXNzZXMpO1xuICB9IGVsc2Uge1xuICAgIC8vIFRPRE8oZW1pbHkpOiBGaWd1cmUgb3V0IGEgZ29vZCB3YXkgdG8gb25seSBwcmludCB0aGlzIGluIGRldmVsb3BtZW50XG4gICAgdHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29uc29sZS53YXJuKFwiTm8gY2hhcmFjdGVyIG1ldHJpY3MgZm9yICdcIiArIHZhbHVlICsgXCInIGluIHN0eWxlICdcIiArIGZvbnROYW1lICsgXCInXCIpO1xuICAgIHN5bWJvbE5vZGUgPSBuZXcgZG9tVHJlZV9TeW1ib2xOb2RlKHZhbHVlLCAwLCAwLCAwLCAwLCAwLCBjbGFzc2VzKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgc3ltYm9sTm9kZS5tYXhGb250U2l6ZSA9IG9wdGlvbnMuc2l6ZU11bHRpcGxpZXI7XG5cbiAgICBpZiAob3B0aW9ucy5zdHlsZS5pc1RpZ2h0KCkpIHtcbiAgICAgIHN5bWJvbE5vZGUuY2xhc3Nlcy5wdXNoKFwibXRpZ2h0XCIpO1xuICAgIH1cblxuICAgIHZhciBjb2xvciA9IG9wdGlvbnMuZ2V0Q29sb3IoKTtcblxuICAgIGlmIChjb2xvcikge1xuICAgICAgc3ltYm9sTm9kZS5zdHlsZS5jb2xvciA9IGNvbG9yO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzeW1ib2xOb2RlO1xufTtcbi8qKlxuICogTWFrZXMgYSBzeW1ib2wgaW4gTWFpbi1SZWd1bGFyIG9yIEFNUy1SZWd1bGFyLlxuICogVXNlZCBmb3IgcmVsLCBiaW4sIG9wZW4sIGNsb3NlLCBpbm5lciwgYW5kIHB1bmN0LlxuICpcbiAqIFRPRE8oIzk1Myk6IE1ha2UgYG9wdGlvbnNgIG1hbmRhdG9yeSBhbmQgYWx3YXlzIHBhc3MgaXQgaW4uXG4gKi9cblxuXG52YXIgYnVpbGRDb21tb25fbWF0aHN5bSA9IGZ1bmN0aW9uIG1hdGhzeW0odmFsdWUsIG1vZGUsIG9wdGlvbnMsIGNsYXNzZXMpIHtcbiAgaWYgKGNsYXNzZXMgPT09IHZvaWQgMCkge1xuICAgIGNsYXNzZXMgPSBbXTtcbiAgfVxuXG4gIC8vIERlY2lkZSB3aGF0IGZvbnQgdG8gcmVuZGVyIHRoZSBzeW1ib2wgaW4gYnkgaXRzIGVudHJ5IGluIHRoZSBzeW1ib2xzXG4gIC8vIHRhYmxlLlxuICAvLyBIYXZlIGEgc3BlY2lhbCBjYXNlIGZvciB3aGVuIHRoZSB2YWx1ZSA9IFxcIGJlY2F1c2UgdGhlIFxcIGlzIHVzZWQgYXMgYVxuICAvLyB0ZXh0b3JkIGluIHVuc3VwcG9ydGVkIGNvbW1hbmQgZXJyb3JzIGJ1dCBjYW5ub3QgYmUgcGFyc2VkIGFzIGEgcmVndWxhclxuICAvLyB0ZXh0IG9yZGluYWwgYW5kIGlzIHRoZXJlZm9yZSBub3QgcHJlc2VudCBhcyBhIHN5bWJvbCBpbiB0aGUgc3ltYm9sc1xuICAvLyB0YWJsZSBmb3IgdGV4dCwgYXMgd2VsbCBhcyBhIHNwZWNpYWwgY2FzZSBmb3IgYm9sZHN5bWJvbCBiZWNhdXNlIGl0XG4gIC8vIGNhbiBiZSB1c2VkIGZvciBib2xkICsgYW5kIC1cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5mb250ICYmIG9wdGlvbnMuZm9udCA9PT0gXCJib2xkc3ltYm9sXCIgJiYgYnVpbGRDb21tb25fbG9va3VwU3ltYm9sKHZhbHVlLCBcIk1haW4tQm9sZFwiLCBtb2RlKS5tZXRyaWNzKSB7XG4gICAgcmV0dXJuIGJ1aWxkQ29tbW9uX21ha2VTeW1ib2wodmFsdWUsIFwiTWFpbi1Cb2xkXCIsIG1vZGUsIG9wdGlvbnMsIGNsYXNzZXMuY29uY2F0KFtcIm1hdGhiZlwiXSkpO1xuICB9IGVsc2UgaWYgKHZhbHVlID09PSBcIlxcXFxcIiB8fCBzcmNfc3ltYm9sc1ttb2RlXVt2YWx1ZV0uZm9udCA9PT0gXCJtYWluXCIpIHtcbiAgICByZXR1cm4gYnVpbGRDb21tb25fbWFrZVN5bWJvbCh2YWx1ZSwgXCJNYWluLVJlZ3VsYXJcIiwgbW9kZSwgb3B0aW9ucywgY2xhc3Nlcyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJ1aWxkQ29tbW9uX21ha2VTeW1ib2wodmFsdWUsIFwiQU1TLVJlZ3VsYXJcIiwgbW9kZSwgb3B0aW9ucywgY2xhc3Nlcy5jb25jYXQoW1wiYW1zcm1cIl0pKTtcbiAgfVxufTtcbi8qKlxuICogRGV0ZXJtaW5lcyB3aGljaCBvZiB0aGUgdHdvIGZvbnQgbmFtZXMgKE1haW4tSXRhbGljIGFuZCBNYXRoLUl0YWxpYykgYW5kXG4gKiBjb3JyZXNwb25kaW5nIHN0eWxlIHRhZ3MgKG1haW5kZWZhdWx0IG9yIG1hdGhpdCkgdG8gdXNlIGZvciBkZWZhdWx0IG1hdGggZm9udCxcbiAqIGRlcGVuZGluZyBvbiB0aGUgc3ltYm9sLlxuICovXG5cblxudmFyIGJ1aWxkQ29tbW9uX21hdGhkZWZhdWx0ID0gZnVuY3Rpb24gbWF0aGRlZmF1bHQodmFsdWUsIG1vZGUsIG9wdGlvbnMsIGNsYXNzZXMpIHtcbiAgaWYgKC9bMC05XS8udGVzdCh2YWx1ZS5jaGFyQXQoMCkpIHx8IC8vIGdseXBocyBmb3IgXFxpbWF0aCBhbmQgXFxqbWF0aCBkbyBub3QgZXhpc3QgaW4gTWF0aC1JdGFsaWMgc28gd2VcbiAgLy8gbmVlZCB0byB1c2UgTWFpbi1JdGFsaWMgaW5zdGVhZFxuICB1dGlscy5jb250YWlucyhtYXRoaXRMZXR0ZXJzLCB2YWx1ZSkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9udE5hbWU6IFwiTWFpbi1JdGFsaWNcIixcbiAgICAgIGZvbnRDbGFzczogXCJtYXRoaXRcIlxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvbnROYW1lOiBcIk1hdGgtSXRhbGljXCIsXG4gICAgICBmb250Q2xhc3M6IFwibWF0aGRlZmF1bHRcIlxuICAgIH07XG4gIH1cbn07XG4vKipcbiAqIERldGVybWluZXMgd2hpY2ggb2YgdGhlIGZvbnQgbmFtZXMgKE1haW4tSXRhbGljLCBNYXRoLUl0YWxpYywgYW5kIENhbGlncmFwaGljKVxuICogYW5kIGNvcnJlc3BvbmRpbmcgc3R5bGUgdGFncyAobWF0aGl0LCBtYXRoZGVmYXVsdCwgb3IgbWF0aGNhbCkgdG8gdXNlIGZvciBmb250XG4gKiBcIm1hdGhub3JtYWxcIiwgZGVwZW5kaW5nIG9uIHRoZSBzeW1ib2wuICBVc2UgdGhpcyBmdW5jdGlvbiBpbnN0ZWFkIG9mIGZvbnRNYXAgZm9yXG4gKiBmb250IFwibWF0aG5vcm1hbFwiLlxuICovXG5cblxudmFyIGJ1aWxkQ29tbW9uX21hdGhub3JtYWwgPSBmdW5jdGlvbiBtYXRobm9ybWFsKHZhbHVlLCBtb2RlLCBvcHRpb25zLCBjbGFzc2VzKSB7XG4gIGlmICh1dGlscy5jb250YWlucyhtYXRoaXRMZXR0ZXJzLCB2YWx1ZSkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9udE5hbWU6IFwiTWFpbi1JdGFsaWNcIixcbiAgICAgIGZvbnRDbGFzczogXCJtYXRoaXRcIlxuICAgIH07XG4gIH0gZWxzZSBpZiAoL1swLTldLy50ZXN0KHZhbHVlLmNoYXJBdCgwKSkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9udE5hbWU6IFwiQ2FsaWdyYXBoaWMtUmVndWxhclwiLFxuICAgICAgZm9udENsYXNzOiBcIm1hdGhjYWxcIlxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvbnROYW1lOiBcIk1hdGgtSXRhbGljXCIsXG4gICAgICBmb250Q2xhc3M6IFwibWF0aGRlZmF1bHRcIlxuICAgIH07XG4gIH1cbn07XG4vKipcbiAqIERldGVybWluZXMgd2hpY2ggb2YgdGhlIHR3byBmb250IG5hbWVzIChNYWluLUJvbGQgYW5kIE1hdGgtQm9sZEl0YWxpYykgYW5kXG4gKiBjb3JyZXNwb25kaW5nIHN0eWxlIHRhZ3MgKG1hdGhiZiBvciBib2xkc3ltYm9sKSB0byB1c2UgZm9yIGZvbnQgXCJib2xkc3ltYm9sXCIsXG4gKiBkZXBlbmRpbmcgb24gdGhlIHN5bWJvbC4gIFVzZSB0aGlzIGZ1bmN0aW9uIGluc3RlYWQgb2YgZm9udE1hcCBmb3IgZm9udFxuICogXCJib2xkc3ltYm9sXCIuXG4gKi9cblxuXG52YXIgYm9sZHN5bWJvbCA9IGZ1bmN0aW9uIGJvbGRzeW1ib2wodmFsdWUsIG1vZGUsIG9wdGlvbnMsIGNsYXNzZXMpIHtcbiAgaWYgKGJ1aWxkQ29tbW9uX2xvb2t1cFN5bWJvbCh2YWx1ZSwgXCJNYXRoLUJvbGRJdGFsaWNcIiwgbW9kZSkubWV0cmljcykge1xuICAgIHJldHVybiB7XG4gICAgICBmb250TmFtZTogXCJNYXRoLUJvbGRJdGFsaWNcIixcbiAgICAgIGZvbnRDbGFzczogXCJib2xkc3ltYm9sXCJcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIC8vIFNvbWUgZ2x5cGhzIGRvIG5vdCBleGlzdCBpbiBNYXRoLUJvbGRJdGFsaWMgc28gd2UgbmVlZCB0byB1c2VcbiAgICAvLyBNYWluLUJvbGQgaW5zdGVhZC5cbiAgICByZXR1cm4ge1xuICAgICAgZm9udE5hbWU6IFwiTWFpbi1Cb2xkXCIsXG4gICAgICBmb250Q2xhc3M6IFwibWF0aGJmXCJcbiAgICB9O1xuICB9XG59O1xuLyoqXG4gKiBNYWtlcyBlaXRoZXIgYSBtYXRob3JkIG9yIHRleHRvcmQgaW4gdGhlIGNvcnJlY3QgZm9udCBhbmQgY29sb3IuXG4gKi9cblxuXG52YXIgYnVpbGRDb21tb25fbWFrZU9yZCA9IGZ1bmN0aW9uIG1ha2VPcmQoZ3JvdXAsIG9wdGlvbnMsIHR5cGUpIHtcbiAgdmFyIG1vZGUgPSBncm91cC5tb2RlO1xuICB2YXIgdGV4dCA9IGdyb3VwLnRleHQ7XG4gIHZhciBjbGFzc2VzID0gW1wibW9yZFwiXTsgLy8gTWF0aCBtb2RlIG9yIE9sZCBmb250IChpLmUuIFxccm0pXG5cbiAgdmFyIGlzRm9udCA9IG1vZGUgPT09IFwibWF0aFwiIHx8IG1vZGUgPT09IFwidGV4dFwiICYmIG9wdGlvbnMuZm9udDtcbiAgdmFyIGZvbnRPckZhbWlseSA9IGlzRm9udCA/IG9wdGlvbnMuZm9udCA6IG9wdGlvbnMuZm9udEZhbWlseTtcblxuICBpZiAodGV4dC5jaGFyQ29kZUF0KDApID09PSAweEQ4MzUpIHtcbiAgICAvLyBzdXJyb2dhdGUgcGFpcnMgZ2V0IHNwZWNpYWwgdHJlYXRtZW50XG4gICAgdmFyIF93aWRlQ2hhcmFjdGVyRm9udCA9IHdpZGVfY2hhcmFjdGVyX3dpZGVDaGFyYWN0ZXJGb250KHRleHQsIG1vZGUpLFxuICAgICAgICB3aWRlRm9udE5hbWUgPSBfd2lkZUNoYXJhY3RlckZvbnRbMF0sXG4gICAgICAgIHdpZGVGb250Q2xhc3MgPSBfd2lkZUNoYXJhY3RlckZvbnRbMV07XG5cbiAgICByZXR1cm4gYnVpbGRDb21tb25fbWFrZVN5bWJvbCh0ZXh0LCB3aWRlRm9udE5hbWUsIG1vZGUsIG9wdGlvbnMsIGNsYXNzZXMuY29uY2F0KHdpZGVGb250Q2xhc3MpKTtcbiAgfSBlbHNlIGlmIChmb250T3JGYW1pbHkpIHtcbiAgICB2YXIgZm9udE5hbWU7XG4gICAgdmFyIGZvbnRDbGFzc2VzO1xuXG4gICAgaWYgKGZvbnRPckZhbWlseSA9PT0gXCJib2xkc3ltYm9sXCIgfHwgZm9udE9yRmFtaWx5ID09PSBcIm1hdGhub3JtYWxcIikge1xuICAgICAgdmFyIGZvbnREYXRhID0gZm9udE9yRmFtaWx5ID09PSBcImJvbGRzeW1ib2xcIiA/IGJvbGRzeW1ib2wodGV4dCwgbW9kZSwgb3B0aW9ucywgY2xhc3NlcykgOiBidWlsZENvbW1vbl9tYXRobm9ybWFsKHRleHQsIG1vZGUsIG9wdGlvbnMsIGNsYXNzZXMpO1xuICAgICAgZm9udE5hbWUgPSBmb250RGF0YS5mb250TmFtZTtcbiAgICAgIGZvbnRDbGFzc2VzID0gW2ZvbnREYXRhLmZvbnRDbGFzc107XG4gICAgfSBlbHNlIGlmICh1dGlscy5jb250YWlucyhtYXRoaXRMZXR0ZXJzLCB0ZXh0KSkge1xuICAgICAgZm9udE5hbWUgPSBcIk1haW4tSXRhbGljXCI7XG4gICAgICBmb250Q2xhc3NlcyA9IFtcIm1hdGhpdFwiXTtcbiAgICB9IGVsc2UgaWYgKGlzRm9udCkge1xuICAgICAgZm9udE5hbWUgPSBmb250TWFwW2ZvbnRPckZhbWlseV0uZm9udE5hbWU7XG4gICAgICBmb250Q2xhc3NlcyA9IFtmb250T3JGYW1pbHldO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb250TmFtZSA9IHJldHJpZXZlVGV4dEZvbnROYW1lKGZvbnRPckZhbWlseSwgb3B0aW9ucy5mb250V2VpZ2h0LCBvcHRpb25zLmZvbnRTaGFwZSk7XG4gICAgICBmb250Q2xhc3NlcyA9IFtmb250T3JGYW1pbHksIG9wdGlvbnMuZm9udFdlaWdodCwgb3B0aW9ucy5mb250U2hhcGVdO1xuICAgIH1cblxuICAgIGlmIChidWlsZENvbW1vbl9sb29rdXBTeW1ib2wodGV4dCwgZm9udE5hbWUsIG1vZGUpLm1ldHJpY3MpIHtcbiAgICAgIHJldHVybiBidWlsZENvbW1vbl9tYWtlU3ltYm9sKHRleHQsIGZvbnROYW1lLCBtb2RlLCBvcHRpb25zLCBjbGFzc2VzLmNvbmNhdChmb250Q2xhc3NlcykpO1xuICAgIH0gZWxzZSBpZiAobGlnYXR1cmVzLmhhc093blByb3BlcnR5KHRleHQpICYmIGZvbnROYW1lLnN1YnN0cigwLCAxMCkgPT09IFwiVHlwZXdyaXRlclwiKSB7XG4gICAgICAvLyBEZWNvbnN0cnVjdCBsaWdhdHVyZXMgaW4gbW9ub3NwYWNlIGZvbnRzIChcXHRleHR0dCwgXFx0dCkuXG4gICAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHBhcnRzLnB1c2goYnVpbGRDb21tb25fbWFrZVN5bWJvbCh0ZXh0W2ldLCBmb250TmFtZSwgbW9kZSwgb3B0aW9ucywgY2xhc3Nlcy5jb25jYXQoZm9udENsYXNzZXMpKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBidWlsZENvbW1vbl9tYWtlRnJhZ21lbnQocGFydHMpO1xuICAgIH1cbiAgfSAvLyBNYWtlcyBhIHN5bWJvbCBpbiB0aGUgZGVmYXVsdCBmb250IGZvciBtYXRob3JkcyBhbmQgdGV4dG9yZHMuXG5cblxuICBpZiAodHlwZSA9PT0gXCJtYXRob3JkXCIpIHtcbiAgICB2YXIgZm9udExvb2t1cCA9IGJ1aWxkQ29tbW9uX21hdGhkZWZhdWx0KHRleHQsIG1vZGUsIG9wdGlvbnMsIGNsYXNzZXMpO1xuICAgIHJldHVybiBidWlsZENvbW1vbl9tYWtlU3ltYm9sKHRleHQsIGZvbnRMb29rdXAuZm9udE5hbWUsIG1vZGUsIG9wdGlvbnMsIGNsYXNzZXMuY29uY2F0KFtmb250TG9va3VwLmZvbnRDbGFzc10pKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSBcInRleHRvcmRcIikge1xuICAgIHZhciBmb250ID0gc3JjX3N5bWJvbHNbbW9kZV1bdGV4dF0gJiYgc3JjX3N5bWJvbHNbbW9kZV1bdGV4dF0uZm9udDtcblxuICAgIGlmIChmb250ID09PSBcImFtc1wiKSB7XG4gICAgICB2YXIgX2ZvbnROYW1lID0gcmV0cmlldmVUZXh0Rm9udE5hbWUoXCJhbXNybVwiLCBvcHRpb25zLmZvbnRXZWlnaHQsIG9wdGlvbnMuZm9udFNoYXBlKTtcblxuICAgICAgcmV0dXJuIGJ1aWxkQ29tbW9uX21ha2VTeW1ib2wodGV4dCwgX2ZvbnROYW1lLCBtb2RlLCBvcHRpb25zLCBjbGFzc2VzLmNvbmNhdChcImFtc3JtXCIsIG9wdGlvbnMuZm9udFdlaWdodCwgb3B0aW9ucy5mb250U2hhcGUpKTtcbiAgICB9IGVsc2UgaWYgKGZvbnQgPT09IFwibWFpblwiIHx8ICFmb250KSB7XG4gICAgICB2YXIgX2ZvbnROYW1lMiA9IHJldHJpZXZlVGV4dEZvbnROYW1lKFwidGV4dHJtXCIsIG9wdGlvbnMuZm9udFdlaWdodCwgb3B0aW9ucy5mb250U2hhcGUpO1xuXG4gICAgICByZXR1cm4gYnVpbGRDb21tb25fbWFrZVN5bWJvbCh0ZXh0LCBfZm9udE5hbWUyLCBtb2RlLCBvcHRpb25zLCBjbGFzc2VzLmNvbmNhdChvcHRpb25zLmZvbnRXZWlnaHQsIG9wdGlvbnMuZm9udFNoYXBlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZvbnRzIGFkZGVkIGJ5IHBsdWdpbnNcbiAgICAgIHZhciBfZm9udE5hbWUzID0gcmV0cmlldmVUZXh0Rm9udE5hbWUoZm9udCwgb3B0aW9ucy5mb250V2VpZ2h0LCBvcHRpb25zLmZvbnRTaGFwZSk7IC8vIFdlIGFkZCBmb250IG5hbWUgYXMgYSBjc3MgY2xhc3NcblxuXG4gICAgICByZXR1cm4gYnVpbGRDb21tb25fbWFrZVN5bWJvbCh0ZXh0LCBfZm9udE5hbWUzLCBtb2RlLCBvcHRpb25zLCBjbGFzc2VzLmNvbmNhdChfZm9udE5hbWUzLCBvcHRpb25zLmZvbnRXZWlnaHQsIG9wdGlvbnMuZm9udFNoYXBlKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcInVuZXhwZWN0ZWQgdHlwZTogXCIgKyB0eXBlICsgXCIgaW4gbWFrZU9yZFwiKTtcbiAgfVxufTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHN1YnNlcXVlbnQgc3ltYm9sTm9kZXMgaGF2ZSB0aGUgc2FtZSBjbGFzc2VzLCBza2V3LCBtYXhGb250LFxuICogYW5kIHN0eWxlcy5cbiAqL1xuXG5cbnZhciBidWlsZENvbW1vbl9jYW5Db21iaW5lID0gZnVuY3Rpb24gY2FuQ29tYmluZShwcmV2LCBuZXh0KSB7XG4gIGlmIChjcmVhdGVDbGFzcyhwcmV2LmNsYXNzZXMpICE9PSBjcmVhdGVDbGFzcyhuZXh0LmNsYXNzZXMpIHx8IHByZXYuc2tldyAhPT0gbmV4dC5za2V3IHx8IHByZXYubWF4Rm9udFNpemUgIT09IG5leHQubWF4Rm9udFNpemUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKHZhciBzdHlsZSBpbiBwcmV2LnN0eWxlKSB7XG4gICAgaWYgKHByZXYuc3R5bGUuaGFzT3duUHJvcGVydHkoc3R5bGUpICYmIHByZXYuc3R5bGVbc3R5bGVdICE9PSBuZXh0LnN0eWxlW3N0eWxlXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIF9zdHlsZSBpbiBuZXh0LnN0eWxlKSB7XG4gICAgaWYgKG5leHQuc3R5bGUuaGFzT3duUHJvcGVydHkoX3N0eWxlKSAmJiBwcmV2LnN0eWxlW19zdHlsZV0gIT09IG5leHQuc3R5bGVbX3N0eWxlXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcbi8qKlxuICogQ29tYmluZSBjb25zZXF1ZXRpdmUgZG9tVHJlZS5zeW1ib2xOb2RlcyBpbnRvIGEgc2luZ2xlIHN5bWJvbE5vZGUuXG4gKiBOb3RlOiB0aGlzIGZ1bmN0aW9uIG11dGF0ZXMgdGhlIGFyZ3VtZW50LlxuICovXG5cblxudmFyIGJ1aWxkQ29tbW9uX3RyeUNvbWJpbmVDaGFycyA9IGZ1bmN0aW9uIHRyeUNvbWJpbmVDaGFycyhjaGFycykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgIHZhciBwcmV2ID0gY2hhcnNbaV07XG4gICAgdmFyIG5leHQgPSBjaGFyc1tpICsgMV07XG5cbiAgICBpZiAocHJldiBpbnN0YW5jZW9mIGRvbVRyZWVfU3ltYm9sTm9kZSAmJiBuZXh0IGluc3RhbmNlb2YgZG9tVHJlZV9TeW1ib2xOb2RlICYmIGJ1aWxkQ29tbW9uX2NhbkNvbWJpbmUocHJldiwgbmV4dCkpIHtcbiAgICAgIHByZXYudGV4dCArPSBuZXh0LnRleHQ7XG4gICAgICBwcmV2LmhlaWdodCA9IE1hdGgubWF4KHByZXYuaGVpZ2h0LCBuZXh0LmhlaWdodCk7XG4gICAgICBwcmV2LmRlcHRoID0gTWF0aC5tYXgocHJldi5kZXB0aCwgbmV4dC5kZXB0aCk7IC8vIFVzZSB0aGUgbGFzdCBjaGFyYWN0ZXIncyBpdGFsaWMgY29ycmVjdGlvbiBzaW5jZSB3ZSB1c2VcbiAgICAgIC8vIGl0IHRvIGFkZCBwYWRkaW5nIHRvIHRoZSByaWdodCBvZiB0aGUgc3BhbiBjcmVhdGVkIGZyb21cbiAgICAgIC8vIHRoZSBjb21iaW5lZCBjaGFyYWN0ZXJzLlxuXG4gICAgICBwcmV2Lml0YWxpYyA9IG5leHQuaXRhbGljO1xuICAgICAgY2hhcnMuc3BsaWNlKGkgKyAxLCAxKTtcbiAgICAgIGktLTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2hhcnM7XG59O1xuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIGhlaWdodCwgZGVwdGgsIGFuZCBtYXhGb250U2l6ZSBvZiBhbiBlbGVtZW50IGJhc2VkIG9uIGl0c1xuICogY2hpbGRyZW4uXG4gKi9cblxuXG52YXIgc2l6ZUVsZW1lbnRGcm9tQ2hpbGRyZW4gPSBmdW5jdGlvbiBzaXplRWxlbWVudEZyb21DaGlsZHJlbihlbGVtKSB7XG4gIHZhciBoZWlnaHQgPSAwO1xuICB2YXIgZGVwdGggPSAwO1xuICB2YXIgbWF4Rm9udFNpemUgPSAwO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjaGlsZCA9IGVsZW0uY2hpbGRyZW5baV07XG5cbiAgICBpZiAoY2hpbGQuaGVpZ2h0ID4gaGVpZ2h0KSB7XG4gICAgICBoZWlnaHQgPSBjaGlsZC5oZWlnaHQ7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkLmRlcHRoID4gZGVwdGgpIHtcbiAgICAgIGRlcHRoID0gY2hpbGQuZGVwdGg7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkLm1heEZvbnRTaXplID4gbWF4Rm9udFNpemUpIHtcbiAgICAgIG1heEZvbnRTaXplID0gY2hpbGQubWF4Rm9udFNpemU7XG4gICAgfVxuICB9XG5cbiAgZWxlbS5oZWlnaHQgPSBoZWlnaHQ7XG4gIGVsZW0uZGVwdGggPSBkZXB0aDtcbiAgZWxlbS5tYXhGb250U2l6ZSA9IG1heEZvbnRTaXplO1xufTtcbi8qKlxuICogTWFrZXMgYSBzcGFuIHdpdGggdGhlIGdpdmVuIGxpc3Qgb2YgY2xhc3NlcywgbGlzdCBvZiBjaGlsZHJlbiwgYW5kIG9wdGlvbnMuXG4gKlxuICogVE9ETygjOTUzKTogRW5zdXJlIHRoYXQgYG9wdGlvbnNgIGlzIGFsd2F5cyBwcm92aWRlZCAoY3VycmVudGx5IHNvbWUgY2FsbFxuICogc2l0ZXMgZG9uJ3QgcGFzcyBpdCkgYW5kIG1ha2UgdGhlIHR5cGUgYmVsb3cgbWFuZGF0b3J5LlxuICogVE9ETzogYWRkIGEgc2VwYXJhdGUgYXJndW1lbnQgZm9yIG1hdGggY2xhc3MgKGUuZy4gYG1vcGAsIGBtYmluYCksIHdoaWNoXG4gKiBzaG91bGQgaWYgcHJlc2VudCBjb21lIGZpcnN0IGluIGBjbGFzc2VzYC5cbiAqL1xuXG5cbnZhciBidWlsZENvbW1vbl9tYWtlU3BhbiA9IGZ1bmN0aW9uIG1ha2VTcGFuKGNsYXNzZXMsIGNoaWxkcmVuLCBvcHRpb25zLCBzdHlsZSkge1xuICB2YXIgc3BhbiA9IG5ldyBkb21UcmVlX1NwYW4oY2xhc3NlcywgY2hpbGRyZW4sIG9wdGlvbnMsIHN0eWxlKTtcbiAgc2l6ZUVsZW1lbnRGcm9tQ2hpbGRyZW4oc3Bhbik7XG4gIHJldHVybiBzcGFuO1xufTsgLy8gU1ZHIG9uZSBpcyBzaW1wbGVyIC0tIGRvZXNuJ3QgcmVxdWlyZSBoZWlnaHQsIGRlcHRoLCBtYXgtZm9udCBzZXR0aW5nLlxuLy8gVGhpcyBpcyBhbHNvIGEgc2VwYXJhdGUgbWV0aG9kIGZvciB0eXBlc2FmZXR5LlxuXG5cbnZhciBidWlsZENvbW1vbl9tYWtlU3ZnU3BhbiA9IGZ1bmN0aW9uIG1ha2VTdmdTcGFuKGNsYXNzZXMsIGNoaWxkcmVuLCBvcHRpb25zLCBzdHlsZSkge1xuICByZXR1cm4gbmV3IGRvbVRyZWVfU3BhbihjbGFzc2VzLCBjaGlsZHJlbiwgb3B0aW9ucywgc3R5bGUpO1xufTtcblxudmFyIG1ha2VMaW5lU3BhbiA9IGZ1bmN0aW9uIG1ha2VMaW5lU3BhbihjbGFzc05hbWUsIG9wdGlvbnMsIHRoaWNrbmVzcykge1xuICB2YXIgbGluZSA9IGJ1aWxkQ29tbW9uX21ha2VTcGFuKFtjbGFzc05hbWVdLCBbXSwgb3B0aW9ucyk7XG4gIGxpbmUuaGVpZ2h0ID0gdGhpY2tuZXNzIHx8IG9wdGlvbnMuZm9udE1ldHJpY3MoKS5kZWZhdWx0UnVsZVRoaWNrbmVzcztcbiAgbGluZS5zdHlsZS5ib3JkZXJCb3R0b21XaWR0aCA9IGxpbmUuaGVpZ2h0ICsgXCJlbVwiO1xuICBsaW5lLm1heEZvbnRTaXplID0gMS4wO1xuICByZXR1cm4gbGluZTtcbn07XG4vKipcbiAqIE1ha2VzIGFuIGFuY2hvciB3aXRoIHRoZSBnaXZlbiBocmVmLCBsaXN0IG9mIGNsYXNzZXMsIGxpc3Qgb2YgY2hpbGRyZW4sXG4gKiBhbmQgb3B0aW9ucy5cbiAqL1xuXG5cbnZhciBidWlsZENvbW1vbl9tYWtlQW5jaG9yID0gZnVuY3Rpb24gbWFrZUFuY2hvcihocmVmLCBjbGFzc2VzLCBjaGlsZHJlbiwgb3B0aW9ucykge1xuICB2YXIgYW5jaG9yID0gbmV3IGRvbVRyZWVfQW5jaG9yKGhyZWYsIGNsYXNzZXMsIGNoaWxkcmVuLCBvcHRpb25zKTtcbiAgc2l6ZUVsZW1lbnRGcm9tQ2hpbGRyZW4oYW5jaG9yKTtcbiAgcmV0dXJuIGFuY2hvcjtcbn07XG4vKipcbiAqIE1ha2VzIGEgZG9jdW1lbnQgZnJhZ21lbnQgd2l0aCB0aGUgZ2l2ZW4gbGlzdCBvZiBjaGlsZHJlbi5cbiAqL1xuXG5cbnZhciBidWlsZENvbW1vbl9tYWtlRnJhZ21lbnQgPSBmdW5jdGlvbiBtYWtlRnJhZ21lbnQoY2hpbGRyZW4pIHtcbiAgdmFyIGZyYWdtZW50ID0gbmV3IHRyZWVfRG9jdW1lbnRGcmFnbWVudChjaGlsZHJlbik7XG4gIHNpemVFbGVtZW50RnJvbUNoaWxkcmVuKGZyYWdtZW50KTtcbiAgcmV0dXJuIGZyYWdtZW50O1xufTtcbi8qKlxuICogV3JhcHMgZ3JvdXAgaW4gYSBzcGFuIGlmIGl0J3MgYSBkb2N1bWVudCBmcmFnbWVudCwgYWxsb3dpbmcgdG8gYXBwbHkgY2xhc3Nlc1xuICogYW5kIHN0eWxlc1xuICovXG5cblxudmFyIGJ1aWxkQ29tbW9uX3dyYXBGcmFnbWVudCA9IGZ1bmN0aW9uIHdyYXBGcmFnbWVudChncm91cCwgb3B0aW9ucykge1xuICBpZiAoZ3JvdXAgaW5zdGFuY2VvZiB0cmVlX0RvY3VtZW50RnJhZ21lbnQpIHtcbiAgICByZXR1cm4gYnVpbGRDb21tb25fbWFrZVNwYW4oW10sIFtncm91cF0sIG9wdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIGdyb3VwO1xufTsgLy8gVGhlc2UgYXJlIGV4YWN0IG9iamVjdCB0eXBlcyB0byBjYXRjaCB0eXBvcyBpbiB0aGUgbmFtZXMgb2YgdGhlIG9wdGlvbmFsIGZpZWxkcy5cblxuXG4vLyBDb21wdXRlcyB0aGUgdXBkYXRlZCBgY2hpbGRyZW5gIGxpc3QgYW5kIHRoZSBvdmVyYWxsIGRlcHRoLlxuLy9cbi8vIFRoaXMgaGVscGVyIGZ1bmN0aW9uIGZvciBtYWtlVkxpc3QgbWFrZXMgaXQgZWFzaWVyIHRvIGVuZm9yY2UgdHlwZSBzYWZldHkgYnlcbi8vIGFsbG93aW5nIGVhcmx5IGV4aXRzIChyZXR1cm5zKSBpbiB0aGUgbG9naWMuXG52YXIgZ2V0Vkxpc3RDaGlsZHJlbkFuZERlcHRoID0gZnVuY3Rpb24gZ2V0Vkxpc3RDaGlsZHJlbkFuZERlcHRoKHBhcmFtcykge1xuICBpZiAocGFyYW1zLnBvc2l0aW9uVHlwZSA9PT0gXCJpbmRpdmlkdWFsU2hpZnRcIikge1xuICAgIHZhciBvbGRDaGlsZHJlbiA9IHBhcmFtcy5jaGlsZHJlbjtcbiAgICB2YXIgY2hpbGRyZW4gPSBbb2xkQ2hpbGRyZW5bMF1dOyAvLyBBZGQgaW4ga2VybnMgdG8gdGhlIGxpc3Qgb2YgcGFyYW1zLmNoaWxkcmVuIHRvIGdldCBlYWNoIGVsZW1lbnQgdG8gYmVcbiAgICAvLyBzaGlmdGVkIHRvIHRoZSBjb3JyZWN0IHNwZWNpZmllZCBzaGlmdFxuXG4gICAgdmFyIF9kZXB0aCA9IC1vbGRDaGlsZHJlblswXS5zaGlmdCAtIG9sZENoaWxkcmVuWzBdLmVsZW0uZGVwdGg7XG5cbiAgICB2YXIgY3VyclBvcyA9IF9kZXB0aDtcblxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgb2xkQ2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkaWZmID0gLW9sZENoaWxkcmVuW2ldLnNoaWZ0IC0gY3VyclBvcyAtIG9sZENoaWxkcmVuW2ldLmVsZW0uZGVwdGg7XG4gICAgICB2YXIgc2l6ZSA9IGRpZmYgLSAob2xkQ2hpbGRyZW5baSAtIDFdLmVsZW0uaGVpZ2h0ICsgb2xkQ2hpbGRyZW5baSAtIDFdLmVsZW0uZGVwdGgpO1xuICAgICAgY3VyclBvcyA9IGN1cnJQb3MgKyBkaWZmO1xuICAgICAgY2hpbGRyZW4ucHVzaCh7XG4gICAgICAgIHR5cGU6IFwia2VyblwiLFxuICAgICAgICBzaXplOiBzaXplXG4gICAgICB9KTtcbiAgICAgIGNoaWxkcmVuLnB1c2gob2xkQ2hpbGRyZW5baV0pO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgICBkZXB0aDogX2RlcHRoXG4gICAgfTtcbiAgfVxuXG4gIHZhciBkZXB0aDtcblxuICBpZiAocGFyYW1zLnBvc2l0aW9uVHlwZSA9PT0gXCJ0b3BcIikge1xuICAgIC8vIFdlIGFsd2F5cyBzdGFydCBhdCB0aGUgYm90dG9tLCBzbyBjYWxjdWxhdGUgdGhlIGJvdHRvbSBieSBhZGRpbmcgdXBcbiAgICAvLyBhbGwgdGhlIHNpemVzXG4gICAgdmFyIGJvdHRvbSA9IHBhcmFtcy5wb3NpdGlvbkRhdGE7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgcGFyYW1zLmNoaWxkcmVuLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGNoaWxkID0gcGFyYW1zLmNoaWxkcmVuW19pXTtcbiAgICAgIGJvdHRvbSAtPSBjaGlsZC50eXBlID09PSBcImtlcm5cIiA/IGNoaWxkLnNpemUgOiBjaGlsZC5lbGVtLmhlaWdodCArIGNoaWxkLmVsZW0uZGVwdGg7XG4gICAgfVxuXG4gICAgZGVwdGggPSBib3R0b207XG4gIH0gZWxzZSBpZiAocGFyYW1zLnBvc2l0aW9uVHlwZSA9PT0gXCJib3R0b21cIikge1xuICAgIGRlcHRoID0gLXBhcmFtcy5wb3NpdGlvbkRhdGE7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGZpcnN0Q2hpbGQgPSBwYXJhbXMuY2hpbGRyZW5bMF07XG5cbiAgICBpZiAoZmlyc3RDaGlsZC50eXBlICE9PSBcImVsZW1cIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGaXJzdCBjaGlsZCBtdXN0IGhhdmUgdHlwZSBcImVsZW1cIi4nKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnBvc2l0aW9uVHlwZSA9PT0gXCJzaGlmdFwiKSB7XG4gICAgICBkZXB0aCA9IC1maXJzdENoaWxkLmVsZW0uZGVwdGggLSBwYXJhbXMucG9zaXRpb25EYXRhO1xuICAgIH0gZWxzZSBpZiAocGFyYW1zLnBvc2l0aW9uVHlwZSA9PT0gXCJmaXJzdEJhc2VsaW5lXCIpIHtcbiAgICAgIGRlcHRoID0gLWZpcnN0Q2hpbGQuZWxlbS5kZXB0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwb3NpdGlvblR5cGUgXCIgKyBwYXJhbXMucG9zaXRpb25UeXBlICsgXCIuXCIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgY2hpbGRyZW46IHBhcmFtcy5jaGlsZHJlbixcbiAgICBkZXB0aDogZGVwdGhcbiAgfTtcbn07XG4vKipcbiAqIE1ha2VzIGEgdmVydGljYWwgbGlzdCBieSBzdGFja2luZyBlbGVtZW50cyBhbmQga2VybnMgb24gdG9wIG9mIGVhY2ggb3RoZXIuXG4gKiBBbGxvd3MgZm9yIG1hbnkgZGlmZmVyZW50IHdheXMgb2Ygc3BlY2lmeWluZyB0aGUgcG9zaXRpb25pbmcgbWV0aG9kLlxuICpcbiAqIFNlZSBWTGlzdFBhcmFtIGRvY3VtZW50YXRpb24gYWJvdmUuXG4gKi9cblxuXG52YXIgYnVpbGRDb21tb25fbWFrZVZMaXN0ID0gZnVuY3Rpb24gbWFrZVZMaXN0KHBhcmFtcywgb3B0aW9ucykge1xuICB2YXIgX2dldFZMaXN0Q2hpbGRyZW5BbmREID0gZ2V0Vkxpc3RDaGlsZHJlbkFuZERlcHRoKHBhcmFtcyksXG4gICAgICBjaGlsZHJlbiA9IF9nZXRWTGlzdENoaWxkcmVuQW5kRC5jaGlsZHJlbixcbiAgICAgIGRlcHRoID0gX2dldFZMaXN0Q2hpbGRyZW5BbmRELmRlcHRoOyAvLyBDcmVhdGUgYSBzdHJ1dCB0aGF0IGlzIHRhbGxlciB0aGFuIGFueSBsaXN0IGl0ZW0uIFRoZSBzdHJ1dCBpcyBhZGRlZCB0b1xuICAvLyBlYWNoIGl0ZW0sIHdoZXJlIGl0IHdpbGwgZGV0ZXJtaW5lIHRoZSBpdGVtJ3MgYmFzZWxpbmUuIFNpbmNlIGl0IGhhc1xuICAvLyBgb3ZlcmZsb3c6aGlkZGVuYCwgdGhlIHN0cnV0J3MgdG9wIGVkZ2Ugd2lsbCBzaXQgb24gdGhlIGl0ZW0ncyBsaW5lIGJveCdzXG4gIC8vIHRvcCBlZGdlIGFuZCB0aGUgc3RydXQncyBib3R0b20gZWRnZSB3aWxsIHNpdCBvbiB0aGUgaXRlbSdzIGJhc2VsaW5lLFxuICAvLyB3aXRoIG5vIGFkZGl0aW9uYWwgbGluZS1oZWlnaHQgc3BhY2luZy4gVGhpcyBhbGxvd3MgdGhlIGl0ZW0gYmFzZWxpbmUgdG9cbiAgLy8gYmUgcG9zaXRpb25lZCBwcmVjaXNlbHkgd2l0aG91dCB3b3JyeWluZyBhYm91dCBmb250IGFzY2VudCBhbmRcbiAgLy8gbGluZS1oZWlnaHQuXG5cblxuICB2YXIgcHN0cnV0U2l6ZSA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuXG4gICAgaWYgKGNoaWxkLnR5cGUgPT09IFwiZWxlbVwiKSB7XG4gICAgICB2YXIgZWxlbSA9IGNoaWxkLmVsZW07XG4gICAgICBwc3RydXRTaXplID0gTWF0aC5tYXgocHN0cnV0U2l6ZSwgZWxlbS5tYXhGb250U2l6ZSwgZWxlbS5oZWlnaHQpO1xuICAgIH1cbiAgfVxuXG4gIHBzdHJ1dFNpemUgKz0gMjtcbiAgdmFyIHBzdHJ1dCA9IGJ1aWxkQ29tbW9uX21ha2VTcGFuKFtcInBzdHJ1dFwiXSwgW10pO1xuICBwc3RydXQuc3R5bGUuaGVpZ2h0ID0gcHN0cnV0U2l6ZSArIFwiZW1cIjsgLy8gQ3JlYXRlIGEgbmV3IGxpc3Qgb2YgYWN0dWFsIGNoaWxkcmVuIGF0IHRoZSBjb3JyZWN0IG9mZnNldHNcblxuICB2YXIgcmVhbENoaWxkcmVuID0gW107XG4gIHZhciBtaW5Qb3MgPSBkZXB0aDtcbiAgdmFyIG1heFBvcyA9IGRlcHRoO1xuICB2YXIgY3VyclBvcyA9IGRlcHRoO1xuXG4gIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IGNoaWxkcmVuLmxlbmd0aDsgX2kyKyspIHtcbiAgICB2YXIgX2NoaWxkID0gY2hpbGRyZW5bX2kyXTtcblxuICAgIGlmIChfY2hpbGQudHlwZSA9PT0gXCJrZXJuXCIpIHtcbiAgICAgIGN1cnJQb3MgKz0gX2NoaWxkLnNpemU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfZWxlbSA9IF9jaGlsZC5lbGVtO1xuICAgICAgdmFyIGNsYXNzZXMgPSBfY2hpbGQud3JhcHBlckNsYXNzZXMgfHwgW107XG4gICAgICB2YXIgc3R5bGUgPSBfY2hpbGQud3JhcHBlclN0eWxlIHx8IHt9O1xuICAgICAgdmFyIGNoaWxkV3JhcCA9IGJ1aWxkQ29tbW9uX21ha2VTcGFuKGNsYXNzZXMsIFtwc3RydXQsIF9lbGVtXSwgdW5kZWZpbmVkLCBzdHlsZSk7XG4gICAgICBjaGlsZFdyYXAuc3R5bGUudG9wID0gLXBzdHJ1dFNpemUgLSBjdXJyUG9zIC0gX2VsZW0uZGVwdGggKyBcImVtXCI7XG5cbiAgICAgIGlmIChfY2hpbGQubWFyZ2luTGVmdCkge1xuICAgICAgICBjaGlsZFdyYXAuc3R5bGUubWFyZ2luTGVmdCA9IF9jaGlsZC5tYXJnaW5MZWZ0O1xuICAgICAgfVxuXG4gICAgICBpZiAoX2NoaWxkLm1hcmdpblJpZ2h0KSB7XG4gICAgICAgIGNoaWxkV3JhcC5zdHlsZS5tYXJnaW5SaWdodCA9IF9jaGlsZC5tYXJnaW5SaWdodDtcbiAgICAgIH1cblxuICAgICAgcmVhbENoaWxkcmVuLnB1c2goY2hpbGRXcmFwKTtcbiAgICAgIGN1cnJQb3MgKz0gX2VsZW0uaGVpZ2h0ICsgX2VsZW0uZGVwdGg7XG4gICAgfVxuXG4gICAgbWluUG9zID0gTWF0aC5taW4obWluUG9zLCBjdXJyUG9zKTtcbiAgICBtYXhQb3MgPSBNYXRoLm1heChtYXhQb3MsIGN1cnJQb3MpO1xuICB9IC8vIFRoZSB2bGlzdCBjb250ZW50cyBnbyBpbiBhIHRhYmxlLWNlbGwgd2l0aCBgdmVydGljYWwtYWxpZ246Ym90dG9tYC5cbiAgLy8gVGhpcyBjZWxsJ3MgYm90dG9tIGVkZ2Ugd2lsbCBkZXRlcm1pbmUgdGhlIGNvbnRhaW5pbmcgdGFibGUncyBiYXNlbGluZVxuICAvLyB3aXRob3V0IG92ZXJseSBleHBhbmRpbmcgdGhlIGNvbnRhaW5pbmcgbGluZS1ib3guXG5cblxuICB2YXIgdmxpc3QgPSBidWlsZENvbW1vbl9tYWtlU3BhbihbXCJ2bGlzdFwiXSwgcmVhbENoaWxkcmVuKTtcbiAgdmxpc3Quc3R5bGUuaGVpZ2h0ID0gbWF4UG9zICsgXCJlbVwiOyAvLyBBIHNlY29uZCByb3cgaXMgdXNlZCBpZiBuZWNlc3NhcnkgdG8gcmVwcmVzZW50IHRoZSB2bGlzdCdzIGRlcHRoLlxuXG4gIHZhciByb3dzO1xuXG4gIGlmIChtaW5Qb3MgPCAwKSB7XG4gICAgLy8gV2Ugd2lsbCBkZWZpbmUgZGVwdGggaW4gYW4gZW1wdHkgc3BhbiB3aXRoIGRpc3BsYXk6IHRhYmxlLWNlbGwuXG4gICAgLy8gSXQgc2hvdWxkIHJlbmRlciB3aXRoIHRoZSBoZWlnaHQgdGhhdCB3ZSBkZWZpbmUuIEJ1dCBDaHJvbWUsIGluXG4gICAgLy8gY29udGVudGVkaXRhYmxlIG1vZGUgb25seSwgdHJlYXRzIHRoYXQgc3BhbiBhcyBpZiBpdCBjb250YWlucyBzb21lXG4gICAgLy8gdGV4dCBjb250ZW50LiBBbmQgdGhhdCBtaW4taGVpZ2h0IG92ZXItcmlkZXMgb3VyIGRlc2lyZWQgaGVpZ2h0LlxuICAgIC8vIFNvIHdlIHB1dCBhbm90aGVyIGVtcHR5IHNwYW4gaW5zaWRlIHRoZSBkZXB0aCBzdHJ1dCBzcGFuLlxuICAgIHZhciBlbXB0eVNwYW4gPSBidWlsZENvbW1vbl9tYWtlU3BhbihbXSwgW10pO1xuICAgIHZhciBkZXB0aFN0cnV0ID0gYnVpbGRDb21tb25fbWFrZVNwYW4oW1widmxpc3RcIl0sIFtlbXB0eVNwYW5dKTtcbiAgICBkZXB0aFN0cnV0LnN0eWxlLmhlaWdodCA9IC1taW5Qb3MgKyBcImVtXCI7IC8vIFNhZmFyaSB3YW50cyB0aGUgZmlyc3Qgcm93IHRvIGhhdmUgaW5saW5lIGNvbnRlbnQ7IG90aGVyd2lzZSBpdFxuICAgIC8vIHB1dHMgdGhlIGJvdHRvbSBvZiB0aGUgKnNlY29uZCogcm93IG9uIHRoZSBiYXNlbGluZS5cblxuICAgIHZhciB0b3BTdHJ1dCA9IGJ1aWxkQ29tbW9uX21ha2VTcGFuKFtcInZsaXN0LXNcIl0sIFtuZXcgZG9tVHJlZV9TeW1ib2xOb2RlKFwiXFx1MjAwQlwiKV0pO1xuICAgIHJvd3MgPSBbYnVpbGRDb21tb25fbWFrZVNwYW4oW1widmxpc3QtclwiXSwgW3ZsaXN0LCB0b3BTdHJ1dF0pLCBidWlsZENvbW1vbl9tYWtlU3BhbihbXCJ2bGlzdC1yXCJdLCBbZGVwdGhTdHJ1dF0pXTtcbiAgfSBlbHNlIHtcbiAgICByb3dzID0gW2J1aWxkQ29tbW9uX21ha2VTcGFuKFtcInZsaXN0LXJcIl0sIFt2bGlzdF0pXTtcbiAgfVxuXG4gIHZhciB2dGFibGUgPSBidWlsZENvbW1vbl9tYWtlU3BhbihbXCJ2bGlzdC10XCJdLCByb3dzKTtcblxuICBpZiAocm93cy5sZW5ndGggPT09IDIpIHtcbiAgICB2dGFibGUuY2xhc3Nlcy5wdXNoKFwidmxpc3QtdDJcIik7XG4gIH1cblxuICB2dGFibGUuaGVpZ2h0ID0gbWF4UG9zO1xuICB2dGFibGUuZGVwdGggPSAtbWluUG9zO1xuICByZXR1cm4gdnRhYmxlO1xufTsgLy8gR2x1ZSBpcyBhIGNvbmNlcHQgZnJvbSBUZVggd2hpY2ggaXMgYSBmbGV4aWJsZSBzcGFjZSBiZXR3ZWVuIGVsZW1lbnRzIGluXG4vLyBlaXRoZXIgYSB2ZXJ0aWNhbCBvciBob3Jpem9udGFsIGxpc3QuIEluIEthVGVYLCBhdCBsZWFzdCBmb3Igbm93LCBpdCdzXG4vLyBzdGF0aWMgc3BhY2UgYmV0d2VlbiBlbGVtZW50cyBpbiBhIGhvcml6b250YWwgbGF5b3V0LlxuXG5cbnZhciBidWlsZENvbW1vbl9tYWtlR2x1ZSA9IGZ1bmN0aW9uIG1ha2VHbHVlKG1lYXN1cmVtZW50LCBvcHRpb25zKSB7XG4gIC8vIE1ha2UgYW4gZW1wdHkgc3BhbiBmb3IgdGhlIHNwYWNlXG4gIHZhciBydWxlID0gYnVpbGRDb21tb25fbWFrZVNwYW4oW1wibXNwYWNlXCJdLCBbXSwgb3B0aW9ucyk7XG4gIHZhciBzaXplID0gdW5pdHNfY2FsY3VsYXRlU2l6ZShtZWFzdXJlbWVudCwgb3B0aW9ucyk7XG4gIHJ1bGUuc3R5bGUubWFyZ2luUmlnaHQgPSBzaXplICsgXCJlbVwiO1xuICByZXR1cm4gcnVsZTtcbn07IC8vIFRha2VzIGZvbnQgb3B0aW9ucywgYW5kIHJldHVybnMgdGhlIGFwcHJvcHJpYXRlIGZvbnRMb29rdXAgbmFtZVxuXG5cbnZhciByZXRyaWV2ZVRleHRGb250TmFtZSA9IGZ1bmN0aW9uIHJldHJpZXZlVGV4dEZvbnROYW1lKGZvbnRGYW1pbHksIGZvbnRXZWlnaHQsIGZvbnRTaGFwZSkge1xuICB2YXIgYmFzZUZvbnROYW1lID0gXCJcIjtcblxuICBzd2l0Y2ggKGZvbnRGYW1pbHkpIHtcbiAgICBjYXNlIFwiYW1zcm1cIjpcbiAgICAgIGJhc2VGb250TmFtZSA9IFwiQU1TXCI7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgXCJ0ZXh0cm1cIjpcbiAgICAgIGJhc2VGb250TmFtZSA9IFwiTWFpblwiO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFwidGV4dHNmXCI6XG4gICAgICBiYXNlRm9udE5hbWUgPSBcIlNhbnNTZXJpZlwiO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFwidGV4dHR0XCI6XG4gICAgICBiYXNlRm9udE5hbWUgPSBcIlR5cGV3cml0ZXJcIjtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIGJhc2VGb250TmFtZSA9IGZvbnRGYW1pbHk7XG4gICAgLy8gdXNlIGZvbnRzIGFkZGVkIGJ5IGEgcGx1Z2luXG4gIH1cblxuICB2YXIgZm9udFN0eWxlc05hbWU7XG5cbiAgaWYgKGZvbnRXZWlnaHQgPT09IFwidGV4dGJmXCIgJiYgZm9udFNoYXBlID09PSBcInRleHRpdFwiKSB7XG4gICAgZm9udFN0eWxlc05hbWUgPSBcIkJvbGRJdGFsaWNcIjtcbiAgfSBlbHNlIGlmIChmb250V2VpZ2h0ID09PSBcInRleHRiZlwiKSB7XG4gICAgZm9udFN0eWxlc05hbWUgPSBcIkJvbGRcIjtcbiAgfSBlbHNlIGlmIChmb250V2VpZ2h0ID09PSBcInRleHRpdFwiKSB7XG4gICAgZm9udFN0eWxlc05hbWUgPSBcIkl0YWxpY1wiO1xuICB9IGVsc2Uge1xuICAgIGZvbnRTdHlsZXNOYW1lID0gXCJSZWd1bGFyXCI7XG4gIH1cblxuICByZXR1cm4gYmFzZUZvbnROYW1lICsgXCItXCIgKyBmb250U3R5bGVzTmFtZTtcbn07XG4vKipcbiAqIE1hcHMgVGVYIGZvbnQgY29tbWFuZHMgdG8gb2JqZWN0cyBjb250YWluaW5nOlxuICogLSB2YXJpYW50OiBzdHJpbmcgdXNlZCBmb3IgXCJtYXRodmFyaWFudFwiIGF0dHJpYnV0ZSBpbiBidWlsZE1hdGhNTC5qc1xuICogLSBmb250TmFtZTogdGhlIFwic3R5bGVcIiBwYXJhbWV0ZXIgdG8gZm9udE1ldHJpY3MuZ2V0Q2hhcmFjdGVyTWV0cmljc1xuICovXG4vLyBBIG1hcCBiZXR3ZWVuIHRleCBmb250IGNvbW1hbmRzIGFuIE1hdGhNTCBtYXRodmFyaWFudCBhdHRyaWJ1dGUgdmFsdWVzXG5cblxudmFyIGZvbnRNYXAgPSB7XG4gIC8vIHN0eWxlc1xuICBcIm1hdGhiZlwiOiB7XG4gICAgdmFyaWFudDogXCJib2xkXCIsXG4gICAgZm9udE5hbWU6IFwiTWFpbi1Cb2xkXCJcbiAgfSxcbiAgXCJtYXRocm1cIjoge1xuICAgIHZhcmlhbnQ6IFwibm9ybWFsXCIsXG4gICAgZm9udE5hbWU6IFwiTWFpbi1SZWd1bGFyXCJcbiAgfSxcbiAgXCJ0ZXh0aXRcIjoge1xuICAgIHZhcmlhbnQ6IFwiaXRhbGljXCIsXG4gICAgZm9udE5hbWU6IFwiTWFpbi1JdGFsaWNcIlxuICB9LFxuICBcIm1hdGhpdFwiOiB7XG4gICAgdmFyaWFudDogXCJpdGFsaWNcIixcbiAgICBmb250TmFtZTogXCJNYWluLUl0YWxpY1wiXG4gIH0sXG4gIC8vIERlZmF1bHQgbWF0aCBmb250LCBcIm1hdGhub3JtYWxcIiBhbmQgXCJib2xkc3ltYm9sXCIgYXJlIG1pc3NpbmcgYmVjYXVzZSB0aGV5XG4gIC8vIHJlcXVpcmUgdGhlIHVzZSBvZiBzZXZlcmFsIGZvbnRzOiBNYWluLUl0YWxpYyBhbmQgTWF0aC1JdGFsaWMgZm9yIGRlZmF1bHRcbiAgLy8gbWF0aCBmb250LCBNYWluLUl0YWxpYywgTWF0aC1JdGFsaWMsIENhbGlncmFwaGljIGZvciBcIm1hdGhub3JtYWxcIiwgYW5kXG4gIC8vIE1hdGgtQm9sZEl0YWxpYyBhbmQgTWFpbi1Cb2xkIGZvciBcImJvbGRzeW1ib2xcIi4gIFRoaXMgaXMgaGFuZGxlZCBieSBhXG4gIC8vIHNwZWNpYWwgY2FzZSBpbiBtYWtlT3JkIHdoaWNoIGVuZHMgdXAgY2FsbGluZyBtYXRoZGVmYXVsdCwgbWF0aG5vcm1hbCxcbiAgLy8gYW5kIGJvbGRzeW1ib2wuXG4gIC8vIGZhbWlsaWVzXG4gIFwibWF0aGJiXCI6IHtcbiAgICB2YXJpYW50OiBcImRvdWJsZS1zdHJ1Y2tcIixcbiAgICBmb250TmFtZTogXCJBTVMtUmVndWxhclwiXG4gIH0sXG4gIFwibWF0aGNhbFwiOiB7XG4gICAgdmFyaWFudDogXCJzY3JpcHRcIixcbiAgICBmb250TmFtZTogXCJDYWxpZ3JhcGhpYy1SZWd1bGFyXCJcbiAgfSxcbiAgXCJtYXRoZnJha1wiOiB7XG4gICAgdmFyaWFudDogXCJmcmFrdHVyXCIsXG4gICAgZm9udE5hbWU6IFwiRnJha3R1ci1SZWd1bGFyXCJcbiAgfSxcbiAgXCJtYXRoc2NyXCI6IHtcbiAgICB2YXJpYW50OiBcInNjcmlwdFwiLFxuICAgIGZvbnROYW1lOiBcIlNjcmlwdC1SZWd1bGFyXCJcbiAgfSxcbiAgXCJtYXRoc2ZcIjoge1xuICAgIHZhcmlhbnQ6IFwic2Fucy1zZXJpZlwiLFxuICAgIGZvbnROYW1lOiBcIlNhbnNTZXJpZi1SZWd1bGFyXCJcbiAgfSxcbiAgXCJtYXRodHRcIjoge1xuICAgIHZhcmlhbnQ6IFwibW9ub3NwYWNlXCIsXG4gICAgZm9udE5hbWU6IFwiVHlwZXdyaXRlci1SZWd1bGFyXCJcbiAgfVxufTtcbnZhciBzdmdEYXRhID0ge1xuICAvLyAgIHBhdGgsIHdpZHRoLCBoZWlnaHRcbiAgdmVjOiBbXCJ2ZWNcIiwgMC40NzEsIDAuNzE0XSxcbiAgLy8gdmFsdWVzIGZyb20gdGhlIGZvbnQgZ2x5cGhcbiAgb2lpbnRTaXplMTogW1wib2lpbnRTaXplMVwiLCAwLjk1NywgMC40OTldLFxuICAvLyBvdmFsIHRvIG92ZXJsYXkgdGhlIGludGVncmFuZFxuICBvaWludFNpemUyOiBbXCJvaWludFNpemUyXCIsIDEuNDcyLCAwLjY1OV0sXG4gIG9paWludFNpemUxOiBbXCJvaWlpbnRTaXplMVwiLCAxLjMwNCwgMC40OTldLFxuICBvaWlpbnRTaXplMjogW1wib2lpaW50U2l6ZTJcIiwgMS45OCwgMC42NTldXG59O1xuXG52YXIgYnVpbGRDb21tb25fc3RhdGljU3ZnID0gZnVuY3Rpb24gc3RhdGljU3ZnKHZhbHVlLCBvcHRpb25zKSB7XG4gIC8vIENyZWF0ZSBhIHNwYW4gd2l0aCBpbmxpbmUgU1ZHIGZvciB0aGUgZWxlbWVudC5cbiAgdmFyIF9zdmdEYXRhJHZhbHVlID0gc3ZnRGF0YVt2YWx1ZV0sXG4gICAgICBwYXRoTmFtZSA9IF9zdmdEYXRhJHZhbHVlWzBdLFxuICAgICAgd2lkdGggPSBfc3ZnRGF0YSR2YWx1ZVsxXSxcbiAgICAgIGhlaWdodCA9IF9zdmdEYXRhJHZhbHVlWzJdO1xuICB2YXIgcGF0aCA9IG5ldyBkb21UcmVlX1BhdGhOb2RlKHBhdGhOYW1lKTtcbiAgdmFyIHN2Z05vZGUgPSBuZXcgU3ZnTm9kZShbcGF0aF0sIHtcbiAgICBcIndpZHRoXCI6IHdpZHRoICsgXCJlbVwiLFxuICAgIFwiaGVpZ2h0XCI6IGhlaWdodCArIFwiZW1cIixcbiAgICAvLyBPdmVycmlkZSBDU1MgcnVsZSBgLmthdGV4IHN2ZyB7IHdpZHRoOiAxMDAlIH1gXG4gICAgXCJzdHlsZVwiOiBcIndpZHRoOlwiICsgd2lkdGggKyBcImVtXCIsXG4gICAgXCJ2aWV3Qm94XCI6IFwiMCAwIFwiICsgMTAwMCAqIHdpZHRoICsgXCIgXCIgKyAxMDAwICogaGVpZ2h0LFxuICAgIFwicHJlc2VydmVBc3BlY3RSYXRpb1wiOiBcInhNaW5ZTWluXCJcbiAgfSk7XG4gIHZhciBzcGFuID0gYnVpbGRDb21tb25fbWFrZVN2Z1NwYW4oW1wib3ZlcmxheVwiXSwgW3N2Z05vZGVdLCBvcHRpb25zKTtcbiAgc3Bhbi5oZWlnaHQgPSBoZWlnaHQ7XG4gIHNwYW4uc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgXCJlbVwiO1xuICBzcGFuLnN0eWxlLndpZHRoID0gd2lkdGggKyBcImVtXCI7XG4gIHJldHVybiBzcGFuO1xufTtcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgYnVpbGRDb21tb24gPSAoe1xuICBmb250TWFwOiBmb250TWFwLFxuICBtYWtlU3ltYm9sOiBidWlsZENvbW1vbl9tYWtlU3ltYm9sLFxuICBtYXRoc3ltOiBidWlsZENvbW1vbl9tYXRoc3ltLFxuICBtYWtlU3BhbjogYnVpbGRDb21tb25fbWFrZVNwYW4sXG4gIG1ha2VTdmdTcGFuOiBidWlsZENvbW1vbl9tYWtlU3ZnU3BhbixcbiAgbWFrZUxpbmVTcGFuOiBtYWtlTGluZVNwYW4sXG4gIG1ha2VBbmNob3I6IGJ1aWxkQ29tbW9uX21ha2VBbmNob3IsXG4gIG1ha2VGcmFnbWVudDogYnVpbGRDb21tb25fbWFrZUZyYWdtZW50LFxuICB3cmFwRnJhZ21lbnQ6IGJ1aWxkQ29tbW9uX3dyYXBGcmFnbWVudCxcbiAgbWFrZVZMaXN0OiBidWlsZENvbW1vbl9tYWtlVkxpc3QsXG4gIG1ha2VPcmQ6IGJ1aWxkQ29tbW9uX21ha2VPcmQsXG4gIG1ha2VHbHVlOiBidWlsZENvbW1vbl9tYWtlR2x1ZSxcbiAgc3RhdGljU3ZnOiBidWlsZENvbW1vbl9zdGF0aWNTdmcsXG4gIHN2Z0RhdGE6IHN2Z0RhdGEsXG4gIHRyeUNvbWJpbmVDaGFyczogYnVpbGRDb21tb25fdHJ5Q29tYmluZUNoYXJzXG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3BhcnNlTm9kZS5qc1xuXG5cbi8qKlxuICogQXNzZXJ0cyB0aGF0IHRoZSBub2RlIGlzIG9mIHRoZSBnaXZlbiB0eXBlIGFuZCByZXR1cm5zIGl0IHdpdGggc3RyaWN0ZXJcbiAqIHR5cGluZy4gVGhyb3dzIGlmIHRoZSBub2RlJ3MgdHlwZSBkb2VzIG5vdCBtYXRjaC5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0Tm9kZVR5cGUobm9kZSwgdHlwZSkge1xuICB2YXIgdHlwZWROb2RlID0gY2hlY2tOb2RlVHlwZShub2RlLCB0eXBlKTtcblxuICBpZiAoIXR5cGVkTm9kZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIG5vZGUgb2YgdHlwZSBcIiArIHR5cGUgKyBcIiwgYnV0IGdvdCBcIiArIChub2RlID8gXCJub2RlIG9mIHR5cGUgXCIgKyBub2RlLnR5cGUgOiBTdHJpbmcobm9kZSkpKTtcbiAgfSAvLyAkRmxvd0ZpeE1lOiBVbnN1cmUgd2h5LlxuXG5cbiAgcmV0dXJuIHR5cGVkTm9kZTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbm9kZSBtb3JlIHN0cmljdGx5IHR5cGVkIGlmZiBpdCBpcyBvZiB0aGUgZ2l2ZW4gdHlwZS4gT3RoZXJ3aXNlLFxuICogcmV0dXJucyBudWxsLlxuICovXG5cbmZ1bmN0aW9uIGNoZWNrTm9kZVR5cGUobm9kZSwgdHlwZSkge1xuICBpZiAobm9kZSAmJiBub2RlLnR5cGUgPT09IHR5cGUpIHtcbiAgICAvLyBUaGUgZGVmaW5pdGlvbiBvZiBQYXJzZU5vZGU8VFlQRT4gZG9lc24ndCBjb21tdW5pY2F0ZSB0byBmbG93IHRoYXRcbiAgICAvLyBgdHlwZTogVFlQRWAgKGFzIHRoYXQncyBub3QgZXhwbGljaXRseSBtZW50aW9uZWQgYW55d2hlcmUpLCB0aG91Z2ggdGhhdFxuICAgIC8vIGhhcHBlbnMgdG8gYmUgdHJ1ZSBmb3IgYWxsIG91ciB2YWx1ZSB0eXBlcy5cbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogQXNzZXJ0cyB0aGF0IHRoZSBub2RlIGlzIG9mIHRoZSBnaXZlbiB0eXBlIGFuZCByZXR1cm5zIGl0IHdpdGggc3RyaWN0ZXJcbiAqIHR5cGluZy4gVGhyb3dzIGlmIHRoZSBub2RlJ3MgdHlwZSBkb2VzIG5vdCBtYXRjaC5cbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRBdG9tRmFtaWx5KG5vZGUsIGZhbWlseSkge1xuICB2YXIgdHlwZWROb2RlID0gY2hlY2tBdG9tRmFtaWx5KG5vZGUsIGZhbWlseSk7XG5cbiAgaWYgKCF0eXBlZE5vZGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBub2RlIG9mIHR5cGUgXFxcImF0b21cXFwiIGFuZCBmYW1pbHkgXFxcIlwiICsgZmFtaWx5ICsgXCJcXFwiLCBidXQgZ290IFwiICsgKG5vZGUgPyBub2RlLnR5cGUgPT09IFwiYXRvbVwiID8gXCJhdG9tIG9mIGZhbWlseSBcIiArIG5vZGUuZmFtaWx5IDogXCJub2RlIG9mIHR5cGUgXCIgKyBub2RlLnR5cGUgOiBTdHJpbmcobm9kZSkpKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlZE5vZGU7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIG5vZGUgbW9yZSBzdHJpY3RseSB0eXBlZCBpZmYgaXQgaXMgb2YgdGhlIGdpdmVuIHR5cGUuIE90aGVyd2lzZSxcbiAqIHJldHVybnMgbnVsbC5cbiAqL1xuXG5mdW5jdGlvbiBjaGVja0F0b21GYW1pbHkobm9kZSwgZmFtaWx5KSB7XG4gIHJldHVybiBub2RlICYmIG5vZGUudHlwZSA9PT0gXCJhdG9tXCIgJiYgbm9kZS5mYW1pbHkgPT09IGZhbWlseSA/IG5vZGUgOiBudWxsO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBub2RlIG1vcmUgc3RyaWN0bHkgdHlwZWQgaWZmIGl0IGlzIG9mIHRoZSBnaXZlbiB0eXBlLiBPdGhlcndpc2UsXG4gKiByZXR1cm5zIG51bGwuXG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0U3ltYm9sTm9kZVR5cGUobm9kZSkge1xuICB2YXIgdHlwZWROb2RlID0gY2hlY2tTeW1ib2xOb2RlVHlwZShub2RlKTtcblxuICBpZiAoIXR5cGVkTm9kZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIG5vZGUgb2Ygc3ltYm9sIGdyb3VwIHR5cGUsIGJ1dCBnb3QgXCIgKyAobm9kZSA/IFwibm9kZSBvZiB0eXBlIFwiICsgbm9kZS50eXBlIDogU3RyaW5nKG5vZGUpKSk7XG4gIH1cblxuICByZXR1cm4gdHlwZWROb2RlO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBub2RlIG1vcmUgc3RyaWN0bHkgdHlwZWQgaWZmIGl0IGlzIG9mIHRoZSBnaXZlbiB0eXBlLiBPdGhlcndpc2UsXG4gKiByZXR1cm5zIG51bGwuXG4gKi9cblxuZnVuY3Rpb24gY2hlY2tTeW1ib2xOb2RlVHlwZShub2RlKSB7XG4gIGlmIChub2RlICYmIChub2RlLnR5cGUgPT09IFwiYXRvbVwiIHx8IE5PTl9BVE9NUy5oYXNPd25Qcm9wZXJ0eShub2RlLnR5cGUpKSkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvc3BhY2luZ0RhdGEuanNcbi8qKlxuICogRGVzY3JpYmVzIHNwYWNlcyBiZXR3ZWVuIGRpZmZlcmVudCBjbGFzc2VzIG9mIGF0b21zLlxuICovXG52YXIgdGhpbnNwYWNlID0ge1xuICBudW1iZXI6IDMsXG4gIHVuaXQ6IFwibXVcIlxufTtcbnZhciBtZWRpdW1zcGFjZSA9IHtcbiAgbnVtYmVyOiA0LFxuICB1bml0OiBcIm11XCJcbn07XG52YXIgdGhpY2tzcGFjZSA9IHtcbiAgbnVtYmVyOiA1LFxuICB1bml0OiBcIm11XCJcbn07IC8vIE1ha2luZyB0aGUgdHlwZSBiZWxvdyBleGFjdCB3aXRoIGFsbCBvcHRpb25hbCBmaWVsZHMgZG9lc24ndCB3b3JrIGR1ZSB0b1xuLy8gLSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvNDU4MlxuLy8gLSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvNTY4OFxuLy8gSG93ZXZlciwgc2luY2UgKmFsbCogZmllbGRzIGFyZSBvcHRpb25hbCwgJFNoYXBlPD4gd29ya3MgYXMgc3VnZ2VzdGVkIGluIDU2ODhcbi8vIGFib3ZlLlxuXG4vLyBTcGFjaW5nIHJlbGF0aW9uc2hpcHMgZm9yIGRpc3BsYXkgYW5kIHRleHQgc3R5bGVzXG52YXIgc3BhY2luZ3MgPSB7XG4gIG1vcmQ6IHtcbiAgICBtb3A6IHRoaW5zcGFjZSxcbiAgICBtYmluOiBtZWRpdW1zcGFjZSxcbiAgICBtcmVsOiB0aGlja3NwYWNlLFxuICAgIG1pbm5lcjogdGhpbnNwYWNlXG4gIH0sXG4gIG1vcDoge1xuICAgIG1vcmQ6IHRoaW5zcGFjZSxcbiAgICBtb3A6IHRoaW5zcGFjZSxcbiAgICBtcmVsOiB0aGlja3NwYWNlLFxuICAgIG1pbm5lcjogdGhpbnNwYWNlXG4gIH0sXG4gIG1iaW46IHtcbiAgICBtb3JkOiBtZWRpdW1zcGFjZSxcbiAgICBtb3A6IG1lZGl1bXNwYWNlLFxuICAgIG1vcGVuOiBtZWRpdW1zcGFjZSxcbiAgICBtaW5uZXI6IG1lZGl1bXNwYWNlXG4gIH0sXG4gIG1yZWw6IHtcbiAgICBtb3JkOiB0aGlja3NwYWNlLFxuICAgIG1vcDogdGhpY2tzcGFjZSxcbiAgICBtb3BlbjogdGhpY2tzcGFjZSxcbiAgICBtaW5uZXI6IHRoaWNrc3BhY2VcbiAgfSxcbiAgbW9wZW46IHt9LFxuICBtY2xvc2U6IHtcbiAgICBtb3A6IHRoaW5zcGFjZSxcbiAgICBtYmluOiBtZWRpdW1zcGFjZSxcbiAgICBtcmVsOiB0aGlja3NwYWNlLFxuICAgIG1pbm5lcjogdGhpbnNwYWNlXG4gIH0sXG4gIG1wdW5jdDoge1xuICAgIG1vcmQ6IHRoaW5zcGFjZSxcbiAgICBtb3A6IHRoaW5zcGFjZSxcbiAgICBtcmVsOiB0aGlja3NwYWNlLFxuICAgIG1vcGVuOiB0aGluc3BhY2UsXG4gICAgbWNsb3NlOiB0aGluc3BhY2UsXG4gICAgbXB1bmN0OiB0aGluc3BhY2UsXG4gICAgbWlubmVyOiB0aGluc3BhY2VcbiAgfSxcbiAgbWlubmVyOiB7XG4gICAgbW9yZDogdGhpbnNwYWNlLFxuICAgIG1vcDogdGhpbnNwYWNlLFxuICAgIG1iaW46IG1lZGl1bXNwYWNlLFxuICAgIG1yZWw6IHRoaWNrc3BhY2UsXG4gICAgbW9wZW46IHRoaW5zcGFjZSxcbiAgICBtcHVuY3Q6IHRoaW5zcGFjZSxcbiAgICBtaW5uZXI6IHRoaW5zcGFjZVxuICB9XG59OyAvLyBTcGFjaW5nIHJlbGF0aW9uc2hpcHMgZm9yIHNjcmlwdCBhbmQgc2NyaXB0c2NyaXB0IHN0eWxlc1xuXG52YXIgdGlnaHRTcGFjaW5ncyA9IHtcbiAgbW9yZDoge1xuICAgIG1vcDogdGhpbnNwYWNlXG4gIH0sXG4gIG1vcDoge1xuICAgIG1vcmQ6IHRoaW5zcGFjZSxcbiAgICBtb3A6IHRoaW5zcGFjZVxuICB9LFxuICBtYmluOiB7fSxcbiAgbXJlbDoge30sXG4gIG1vcGVuOiB7fSxcbiAgbWNsb3NlOiB7XG4gICAgbW9wOiB0aGluc3BhY2VcbiAgfSxcbiAgbXB1bmN0OiB7fSxcbiAgbWlubmVyOiB7XG4gICAgbW9wOiB0aGluc3BhY2VcbiAgfVxufTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2RlZmluZUZ1bmN0aW9uLmpzXG5cblxuLyoqXG4gKiBBbGwgcmVnaXN0ZXJlZCBmdW5jdGlvbnMuXG4gKiBgZnVuY3Rpb25zLmpzYCBqdXN0IGV4cG9ydHMgdGhpcyBzYW1lIGRpY3Rpb25hcnkgYWdhaW4gYW5kIG1ha2VzIGl0IHB1YmxpYy5cbiAqIGBQYXJzZXIuanNgIHJlcXVpcmVzIHRoaXMgZGljdGlvbmFyeS5cbiAqL1xudmFyIF9mdW5jdGlvbnMgPSB7fTtcbi8qKlxuICogQWxsIEhUTUwgYnVpbGRlcnMuIFNob3VsZCBiZSBvbmx5IHVzZWQgaW4gdGhlIGBkZWZpbmUqYCBhbmQgdGhlIGBidWlsZCpNTGBcbiAqIGZ1bmN0aW9ucy5cbiAqL1xuXG52YXIgX2h0bWxHcm91cEJ1aWxkZXJzID0ge307XG4vKipcbiAqIEFsbCBNYXRoTUwgYnVpbGRlcnMuIFNob3VsZCBiZSBvbmx5IHVzZWQgaW4gdGhlIGBkZWZpbmUqYCBhbmQgdGhlIGBidWlsZCpNTGBcbiAqIGZ1bmN0aW9ucy5cbiAqL1xuXG52YXIgX21hdGhtbEdyb3VwQnVpbGRlcnMgPSB7fTtcbmZ1bmN0aW9uIGRlZmluZUZ1bmN0aW9uKF9yZWYpIHtcbiAgdmFyIHR5cGUgPSBfcmVmLnR5cGUsXG4gICAgICBub2RlVHlwZSA9IF9yZWYubm9kZVR5cGUsXG4gICAgICBuYW1lcyA9IF9yZWYubmFtZXMsXG4gICAgICBwcm9wcyA9IF9yZWYucHJvcHMsXG4gICAgICBoYW5kbGVyID0gX3JlZi5oYW5kbGVyLFxuICAgICAgaHRtbEJ1aWxkZXIgPSBfcmVmLmh0bWxCdWlsZGVyLFxuICAgICAgbWF0aG1sQnVpbGRlciA9IF9yZWYubWF0aG1sQnVpbGRlcjtcbiAgLy8gU2V0IGRlZmF1bHQgdmFsdWVzIG9mIGZ1bmN0aW9uc1xuICB2YXIgZGF0YSA9IHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIG51bUFyZ3M6IHByb3BzLm51bUFyZ3MsXG4gICAgYXJnVHlwZXM6IHByb3BzLmFyZ1R5cGVzLFxuICAgIGdyZWVkaW5lc3M6IHByb3BzLmdyZWVkaW5lc3MgPT09IHVuZGVmaW5lZCA/IDEgOiBwcm9wcy5ncmVlZGluZXNzLFxuICAgIGFsbG93ZWRJblRleHQ6ICEhcHJvcHMuYWxsb3dlZEluVGV4dCxcbiAgICBhbGxvd2VkSW5NYXRoOiBwcm9wcy5hbGxvd2VkSW5NYXRoID09PSB1bmRlZmluZWQgPyB0cnVlIDogcHJvcHMuYWxsb3dlZEluTWF0aCxcbiAgICBudW1PcHRpb25hbEFyZ3M6IHByb3BzLm51bU9wdGlvbmFsQXJncyB8fCAwLFxuICAgIGluZml4OiAhIXByb3BzLmluZml4LFxuICAgIGNvbnN1bWVNb2RlOiBwcm9wcy5jb25zdW1lTW9kZSxcbiAgICBoYW5kbGVyOiBoYW5kbGVyXG4gIH07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7ICsraSkge1xuICAgIC8vIFRPRE86IFRoZSB2YWx1ZSB0eXBlIG9mIF9mdW5jdGlvbnMgc2hvdWxkIGJlIGEgdHlwZSB1bmlvbiBvZiBhbGxcbiAgICAvLyBwb3NzaWJsZSBgRnVuY3Rpb25TcGVjPD5gIHBvc3NpYmlsaXRpZXMgaW5zdGVhZCBvZiBgRnVuY3Rpb25TcGVjPCo+YCxcbiAgICAvLyB3aGljaCBpcyBhbiBleGlzdGVudGlhbCB0eXBlLlxuICAgIC8vICRGbG93Rml4TWVcbiAgICBfZnVuY3Rpb25zW25hbWVzW2ldXSA9IGRhdGE7XG4gIH1cblxuICBpZiAodHlwZSkge1xuICAgIGlmIChodG1sQnVpbGRlcikge1xuICAgICAgX2h0bWxHcm91cEJ1aWxkZXJzW3R5cGVdID0gaHRtbEJ1aWxkZXI7XG4gICAgfVxuXG4gICAgaWYgKG1hdGhtbEJ1aWxkZXIpIHtcbiAgICAgIF9tYXRobWxHcm91cEJ1aWxkZXJzW3R5cGVdID0gbWF0aG1sQnVpbGRlcjtcbiAgICB9XG4gIH1cbn1cbi8qKlxuICogVXNlIHRoaXMgdG8gcmVnaXN0ZXIgb25seSB0aGUgSFRNTCBhbmQgTWF0aE1MIGJ1aWxkZXJzIGZvciBhIGZ1bmN0aW9uIChlLmcuXG4gKiBpZiB0aGUgZnVuY3Rpb24ncyBQYXJzZU5vZGUgaXMgZ2VuZXJhdGVkIGluIFBhcnNlci5qcyByYXRoZXIgdGhhbiB2aWEgYVxuICogc3RhbmQtYWxvbmUgaGFuZGxlciBwcm92aWRlZCB0byBgZGVmaW5lRnVuY3Rpb25gKS5cbiAqL1xuXG5mdW5jdGlvbiBkZWZpbmVGdW5jdGlvbkJ1aWxkZXJzKF9yZWYyKSB7XG4gIHZhciB0eXBlID0gX3JlZjIudHlwZSxcbiAgICAgIGh0bWxCdWlsZGVyID0gX3JlZjIuaHRtbEJ1aWxkZXIsXG4gICAgICBtYXRobWxCdWlsZGVyID0gX3JlZjIubWF0aG1sQnVpbGRlcjtcbiAgZGVmaW5lRnVuY3Rpb24oe1xuICAgIHR5cGU6IHR5cGUsXG4gICAgbmFtZXM6IFtdLFxuICAgIHByb3BzOiB7XG4gICAgICBudW1BcmdzOiAwXG4gICAgfSxcbiAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTaG91bGQgbmV2ZXIgYmUgY2FsbGVkLicpO1xuICAgIH0sXG4gICAgaHRtbEJ1aWxkZXI6IGh0bWxCdWlsZGVyLFxuICAgIG1hdGhtbEJ1aWxkZXI6IG1hdGhtbEJ1aWxkZXJcbiAgfSk7XG59IC8vIFNpbmNlIHRoZSBjb3JyZXNwb25kaW5nIGJ1aWxkSFRNTC9idWlsZE1hdGhNTCBmdW5jdGlvbiBleHBlY3RzIGFcbi8vIGxpc3Qgb2YgZWxlbWVudHMsIHdlIG5vcm1hbGl6ZSBmb3IgZGlmZmVyZW50IGtpbmRzIG9mIGFyZ3VtZW50c1xuXG52YXIgZGVmaW5lRnVuY3Rpb25fb3JkYXJndW1lbnQgPSBmdW5jdGlvbiBvcmRhcmd1bWVudChhcmcpIHtcbiAgdmFyIG5vZGUgPSBjaGVja05vZGVUeXBlKGFyZywgXCJvcmRncm91cFwiKTtcbiAgcmV0dXJuIG5vZGUgPyBub2RlLmJvZHkgOiBbYXJnXTtcbn07XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9idWlsZEhUTUwuanNcbi8qKlxuICogVGhpcyBmaWxlIGRvZXMgdGhlIG1haW4gd29yayBvZiBidWlsZGluZyBhIGRvbVRyZWUgc3RydWN0dXJlIGZyb20gYSBwYXJzZVxuICogdHJlZS4gVGhlIGVudHJ5IHBvaW50IGlzIHRoZSBgYnVpbGRIVE1MYCBmdW5jdGlvbiwgd2hpY2ggdGFrZXMgYSBwYXJzZSB0cmVlLlxuICogVGhlbiwgdGhlIGJ1aWxkRXhwcmVzc2lvbiwgYnVpbGRHcm91cCwgYW5kIHZhcmlvdXMgZ3JvdXBCdWlsZGVycyBmdW5jdGlvbnNcbiAqIGFyZSBjYWxsZWQsIHRvIHByb2R1Y2UgYSBmaW5hbCBIVE1MIHRyZWUuXG4gKi9cblxuXG5cblxuXG5cblxuXG5cbnZhciBidWlsZEhUTUxfbWFrZVNwYW4gPSBidWlsZENvbW1vbi5tYWtlU3BhbjsgLy8gQmluYXJ5IGF0b21zIChmaXJzdCBjbGFzcyBgbWJpbmApIGNoYW5nZSBpbnRvIG9yZGluYXJ5IGF0b21zIChgbW9yZGApXG4vLyBkZXBlbmRpbmcgb24gdGhlaXIgc3Vycm91bmRpbmdzLiBTZWUgVGVYYm9vayBwZy4gNDQyLTQ0NiwgUnVsZXMgNSBhbmQgNixcbi8vIGFuZCB0aGUgdGV4dCBiZWZvcmUgUnVsZSAxOS5cblxudmFyIGJpbkxlZnRDYW5jZWxsZXIgPSBbXCJsZWZ0bW9zdFwiLCBcIm1iaW5cIiwgXCJtb3BlblwiLCBcIm1yZWxcIiwgXCJtb3BcIiwgXCJtcHVuY3RcIl07XG52YXIgYmluUmlnaHRDYW5jZWxsZXIgPSBbXCJyaWdodG1vc3RcIiwgXCJtcmVsXCIsIFwibWNsb3NlXCIsIFwibXB1bmN0XCJdO1xudmFyIGJ1aWxkSFRNTF9zdHlsZU1hcCA9IHtcbiAgXCJkaXNwbGF5XCI6IHNyY19TdHlsZS5ESVNQTEFZLFxuICBcInRleHRcIjogc3JjX1N0eWxlLlRFWFQsXG4gIFwic2NyaXB0XCI6IHNyY19TdHlsZS5TQ1JJUFQsXG4gIFwic2NyaXB0c2NyaXB0XCI6IHNyY19TdHlsZS5TQ1JJUFRTQ1JJUFRcbn07XG52YXIgRG9tRW51bSA9IHtcbiAgbW9yZDogXCJtb3JkXCIsXG4gIG1vcDogXCJtb3BcIixcbiAgbWJpbjogXCJtYmluXCIsXG4gIG1yZWw6IFwibXJlbFwiLFxuICBtb3BlbjogXCJtb3BlblwiLFxuICBtY2xvc2U6IFwibWNsb3NlXCIsXG4gIG1wdW5jdDogXCJtcHVuY3RcIixcbiAgbWlubmVyOiBcIm1pbm5lclwiXG59O1xuXG4vKipcbiAqIFRha2UgYSBsaXN0IG9mIG5vZGVzLCBidWlsZCB0aGVtIGluIG9yZGVyLCBhbmQgcmV0dXJuIGEgbGlzdCBvZiB0aGUgYnVpbHRcbiAqIG5vZGVzLiBkb2N1bWVudEZyYWdtZW50cyBhcmUgZmxhdHRlbmVkIGludG8gdGhlaXIgY29udGVudHMsIHNvIHRoZVxuICogcmV0dXJuZWQgbGlzdCBjb250YWlucyBubyBmcmFnbWVudHMuIGBpc1JlYWxHcm91cGAgaXMgdHJ1ZSBpZiBgZXhwcmVzc2lvbmBcbiAqIGlzIGEgcmVhbCBncm91cCAobm8gYXRvbXMgd2lsbCBiZSBhZGRlZCBvbiBlaXRoZXIgc2lkZSksIGFzIG9wcG9zZWQgdG9cbiAqIGEgcGFydGlhbCBncm91cCAoZS5nLiBvbmUgY3JlYXRlZCBieSBcXGNvbG9yKS4gYHN1cnJvdW5kaW5nYCBpcyBhbiBhcnJheVxuICogY29uc2lzdGluZyB0eXBlIG9mIG5vZGVzIHRoYXQgd2lsbCBiZSBhZGRlZCB0byB0aGUgbGVmdCBhbmQgcmlnaHQuXG4gKi9cbnZhciBidWlsZEhUTUxfYnVpbGRFeHByZXNzaW9uID0gZnVuY3Rpb24gYnVpbGRFeHByZXNzaW9uKGV4cHJlc3Npb24sIG9wdGlvbnMsIGlzUmVhbEdyb3VwLCBzdXJyb3VuZGluZykge1xuICBpZiAoc3Vycm91bmRpbmcgPT09IHZvaWQgMCkge1xuICAgIHN1cnJvdW5kaW5nID0gW251bGwsIG51bGxdO1xuICB9XG5cbiAgLy8gUGFyc2UgZXhwcmVzc2lvbnMgaW50byBgZ3JvdXBzYC5cbiAgdmFyIGdyb3VwcyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwcmVzc2lvbi5sZW5ndGg7IGkrKykge1xuICAgIHZhciBvdXRwdXQgPSBidWlsZEhUTUxfYnVpbGRHcm91cChleHByZXNzaW9uW2ldLCBvcHRpb25zKTtcblxuICAgIGlmIChvdXRwdXQgaW5zdGFuY2VvZiB0cmVlX0RvY3VtZW50RnJhZ21lbnQpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IG91dHB1dC5jaGlsZHJlbjtcbiAgICAgIGdyb3Vwcy5wdXNoLmFwcGx5KGdyb3VwcywgY2hpbGRyZW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICBncm91cHMucHVzaChvdXRwdXQpO1xuICAgIH1cbiAgfSAvLyBJZiBgZXhwcmVzc2lvbmAgaXMgYSBwYXJ0aWFsIGdyb3VwLCBsZXQgdGhlIHBhcmVudCBoYW5kbGUgc3BhY2luZ3NcbiAgLy8gdG8gYXZvaWQgcHJvY2Vzc2luZyBncm91cHMgbXVsdGlwbGUgdGltZXMuXG5cblxuICBpZiAoIWlzUmVhbEdyb3VwKSB7XG4gICAgcmV0dXJuIGdyb3VwcztcbiAgfVxuXG4gIHZhciBnbHVlT3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgaWYgKGV4cHJlc3Npb24ubGVuZ3RoID09PSAxKSB7XG4gICAgdmFyIG5vZGUgPSBjaGVja05vZGVUeXBlKGV4cHJlc3Npb25bMF0sIFwic2l6aW5nXCIpIHx8IGNoZWNrTm9kZVR5cGUoZXhwcmVzc2lvblswXSwgXCJzdHlsaW5nXCIpO1xuXG4gICAgaWYgKCFub2RlKSB7Ly8gTm8gbWF0Y2guXG4gICAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09IFwic2l6aW5nXCIpIHtcbiAgICAgIGdsdWVPcHRpb25zID0gb3B0aW9ucy5oYXZpbmdTaXplKG5vZGUuc2l6ZSk7XG4gICAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09IFwic3R5bGluZ1wiKSB7XG4gICAgICBnbHVlT3B0aW9ucyA9IG9wdGlvbnMuaGF2aW5nU3R5bGUoYnVpbGRIVE1MX3N0eWxlTWFwW25vZGUuc3R5bGVdKTtcbiAgICB9XG4gIH0gLy8gRHVtbXkgc3BhbnMgZm9yIGRldGVybWluaW5nIHNwYWNpbmdzIGJldHdlZW4gc3Vycm91bmRpbmcgYXRvbXMuXG4gIC8vIElmIGBleHByZXNzaW9uYCBoYXMgbm8gYXRvbXMgb24gdGhlIGxlZnQgb3IgcmlnaHQsIGNsYXNzIFwibGVmdG1vc3RcIlxuICAvLyBvciBcInJpZ2h0bW9zdFwiLCByZXNwZWN0aXZlbHksIGlzIHVzZWQgdG8gaW5kaWNhdGUgaXQuXG5cblxuICB2YXIgZHVtbXlQcmV2ID0gYnVpbGRIVE1MX21ha2VTcGFuKFtzdXJyb3VuZGluZ1swXSB8fCBcImxlZnRtb3N0XCJdLCBbXSwgb3B0aW9ucyk7XG4gIHZhciBkdW1teU5leHQgPSBidWlsZEhUTUxfbWFrZVNwYW4oW3N1cnJvdW5kaW5nWzFdIHx8IFwicmlnaHRtb3N0XCJdLCBbXSwgb3B0aW9ucyk7IC8vIFRPRE86IFRoZXNlIGNvZGUgYXNzdW1lcyB0aGF0IGEgbm9kZSdzIG1hdGggY2xhc3MgaXMgdGhlIGZpcnN0IGVsZW1lbnRcbiAgLy8gb2YgaXRzIGBjbGFzc2VzYCBhcnJheS4gQSBsYXRlciBjbGVhbnVwIHNob3VsZCBlbnN1cmUgdGhpcywgZm9yXG4gIC8vIGluc3RhbmNlIGJ5IGNoYW5naW5nIHRoZSBzaWduYXR1cmUgb2YgYG1ha2VTcGFuYC5cbiAgLy8gQmVmb3JlIGRldGVybWluaW5nIHdoYXQgc3BhY2VzIHRvIGluc2VydCwgcGVyZm9ybSBiaW4gY2FuY2VsbGF0aW9uLlxuICAvLyBCaW5hcnkgb3BlcmF0b3JzIGNoYW5nZSB0byBvcmRpbmFyeSBzeW1ib2xzIGluIHNvbWUgY29udGV4dHMuXG5cbiAgdHJhdmVyc2VOb25TcGFjZU5vZGVzKGdyb3VwcywgZnVuY3Rpb24gKG5vZGUsIHByZXYpIHtcbiAgICB2YXIgcHJldlR5cGUgPSBwcmV2LmNsYXNzZXNbMF07XG4gICAgdmFyIHR5cGUgPSBub2RlLmNsYXNzZXNbMF07XG5cbiAgICBpZiAocHJldlR5cGUgPT09IFwibWJpblwiICYmIHV0aWxzLmNvbnRhaW5zKGJpblJpZ2h0Q2FuY2VsbGVyLCB0eXBlKSkge1xuICAgICAgcHJldi5jbGFzc2VzWzBdID0gXCJtb3JkXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBcIm1iaW5cIiAmJiB1dGlscy5jb250YWlucyhiaW5MZWZ0Q2FuY2VsbGVyLCBwcmV2VHlwZSkpIHtcbiAgICAgIG5vZGUuY2xhc3Nlc1swXSA9IFwibW9yZFwiO1xuICAgIH1cbiAgfSwge1xuICAgIG5vZGU6IGR1bW15UHJldlxuICB9LCBkdW1teU5leHQpO1xuICB0cmF2ZXJzZU5vblNwYWNlTm9kZXMoZ3JvdXBzLCBmdW5jdGlvbiAobm9kZSwgcHJldikge1xuICAgIHZhciBwcmV2VHlwZSA9IGdldFR5cGVPZkRvbVRyZWUocHJldik7XG4gICAgdmFyIHR5cGUgPSBnZXRUeXBlT2ZEb21UcmVlKG5vZGUpOyAvLyAnbXRpZ2h0JyBpbmRpY2F0ZXMgdGhhdCB0aGUgbm9kZSBpcyBzY3JpcHQgb3Igc2NyaXB0c2NyaXB0IHN0eWxlLlxuXG4gICAgdmFyIHNwYWNlID0gcHJldlR5cGUgJiYgdHlwZSA/IG5vZGUuaGFzQ2xhc3MoXCJtdGlnaHRcIikgPyB0aWdodFNwYWNpbmdzW3ByZXZUeXBlXVt0eXBlXSA6IHNwYWNpbmdzW3ByZXZUeXBlXVt0eXBlXSA6IG51bGw7XG5cbiAgICBpZiAoc3BhY2UpIHtcbiAgICAgIC8vIEluc2VydCBnbHVlIChzcGFjaW5nKSBhZnRlciB0aGUgYHByZXZgLlxuICAgICAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VHbHVlKHNwYWNlLCBnbHVlT3B0aW9ucyk7XG4gICAgfVxuICB9LCB7XG4gICAgbm9kZTogZHVtbXlQcmV2XG4gIH0sIGR1bW15TmV4dCk7XG4gIHJldHVybiBncm91cHM7XG59OyAvLyBEZXB0aC1maXJzdCB0cmF2ZXJzZSBub24tc3BhY2UgYG5vZGVzYCwgY2FsbGluZyBgY2FsbGJhY2tgIHdpdGggdGhlIGN1cnJlbnQgYW5kXG4vLyBwcmV2aW91cyBub2RlIGFzIGFyZ3VtZW50cywgb3B0aW9uYWxseSByZXR1cm5pbmcgYSBub2RlIHRvIGluc2VydCBhZnRlciB0aGVcbi8vIHByZXZpb3VzIG5vZGUuIGBwcmV2YCBpcyBhbiBvYmplY3Qgd2l0aCB0aGUgcHJldmlvdXMgbm9kZSBhbmQgYGluc2VydEFmdGVyYFxuLy8gZnVuY3Rpb24gdG8gaW5zZXJ0IGFmdGVyIGl0LiBgbmV4dGAgaXMgYSBub2RlIHRoYXQgd2lsbCBiZSBhZGRlZCB0byB0aGUgcmlnaHQuXG4vLyBVc2VkIGZvciBiaW4gY2FuY2VsbGF0aW9uIGFuZCBpbnNlcnRpbmcgc3BhY2luZ3MuXG5cbnZhciB0cmF2ZXJzZU5vblNwYWNlTm9kZXMgPSBmdW5jdGlvbiB0cmF2ZXJzZU5vblNwYWNlTm9kZXMobm9kZXMsIGNhbGxiYWNrLCBwcmV2LCBuZXh0KSB7XG4gIGlmIChuZXh0KSB7XG4gICAgLy8gdGVtcG9yYXJpbHkgYXBwZW5kIHRoZSByaWdodCBub2RlLCBpZiBleGlzdHNcbiAgICBub2Rlcy5wdXNoKG5leHQpO1xuICB9XG5cbiAgdmFyIGkgPSAwO1xuXG4gIGZvciAoOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgIHZhciBwYXJ0aWFsR3JvdXAgPSBidWlsZEhUTUxfY2hlY2tQYXJ0aWFsR3JvdXAobm9kZSk7XG5cbiAgICBpZiAocGFydGlhbEdyb3VwKSB7XG4gICAgICAvLyBSZWN1cnNpdmUgREZTXG4gICAgICB0cmF2ZXJzZU5vblNwYWNlTm9kZXMocGFydGlhbEdyb3VwLmNoaWxkcmVuLCBjYWxsYmFjaywgcHJldik7XG4gICAgICBjb250aW51ZTtcbiAgICB9IC8vIElnbm9yZSBleHBsaWNpdCBzcGFjZXMgKGUuZy4sIFxcOywgXFwsKSB3aGVuIGRldGVybWluaW5nIHdoYXQgaW1wbGljaXRcbiAgICAvLyBzcGFjaW5nIHNob3VsZCBnbyBiZXR3ZWVuIGF0b21zIG9mIGRpZmZlcmVudCBjbGFzc2VzXG5cblxuICAgIGlmIChub2RlLmNsYXNzZXNbMF0gPT09IFwibXNwYWNlXCIpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQgPSBjYWxsYmFjayhub2RlLCBwcmV2Lm5vZGUpO1xuXG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgaWYgKHByZXYuaW5zZXJ0QWZ0ZXIpIHtcbiAgICAgICAgcHJldi5pbnNlcnRBZnRlcihyZXN1bHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaW5zZXJ0IGF0IGZyb250XG4gICAgICAgIG5vZGVzLnVuc2hpZnQocmVzdWx0KTtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHByZXYubm9kZSA9IG5vZGU7XG5cbiAgICBwcmV2Lmluc2VydEFmdGVyID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgbm9kZXMuc3BsaWNlKGluZGV4ICsgMSwgMCwgbik7XG4gICAgICAgIGkrKztcbiAgICAgIH07XG4gICAgfShpKTtcbiAgfVxuXG4gIGlmIChuZXh0KSB7XG4gICAgbm9kZXMucG9wKCk7XG4gIH1cbn07IC8vIENoZWNrIGlmIGdpdmVuIG5vZGUgaXMgYSBwYXJ0aWFsIGdyb3VwLCBpLmUuLCBkb2VzIG5vdCBhZmZlY3Qgc3BhY2luZyBhcm91bmQuXG5cblxudmFyIGJ1aWxkSFRNTF9jaGVja1BhcnRpYWxHcm91cCA9IGZ1bmN0aW9uIGNoZWNrUGFydGlhbEdyb3VwKG5vZGUpIHtcbiAgaWYgKG5vZGUgaW5zdGFuY2VvZiB0cmVlX0RvY3VtZW50RnJhZ21lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIGRvbVRyZWVfQW5jaG9yKSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07IC8vIFJldHVybiB0aGUgb3V0ZXJtb3N0IG5vZGUgb2YgYSBkb21UcmVlLlxuXG5cbnZhciBnZXRPdXRlcm1vc3ROb2RlID0gZnVuY3Rpb24gZ2V0T3V0ZXJtb3N0Tm9kZShub2RlLCBzaWRlKSB7XG4gIHZhciBwYXJ0aWFsR3JvdXAgPSBidWlsZEhUTUxfY2hlY2tQYXJ0aWFsR3JvdXAobm9kZSk7XG5cbiAgaWYgKHBhcnRpYWxHcm91cCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHBhcnRpYWxHcm91cC5jaGlsZHJlbjtcblxuICAgIGlmIChjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIGlmIChzaWRlID09PSBcInJpZ2h0XCIpIHtcbiAgICAgICAgcmV0dXJuIGdldE91dGVybW9zdE5vZGUoY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0sIFwicmlnaHRcIik7XG4gICAgICB9IGVsc2UgaWYgKHNpZGUgPT09IFwibGVmdFwiKSB7XG4gICAgICAgIHJldHVybiBnZXRPdXRlcm1vc3ROb2RlKGNoaWxkcmVuWzBdLCBcImxlZnRcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59OyAvLyBSZXR1cm4gbWF0aCBhdG9tIGNsYXNzIChtY2xhc3MpIG9mIGEgZG9tVHJlZS5cbi8vIElmIGBzaWRlYCBpcyBnaXZlbiwgaXQgd2lsbCBnZXQgdGhlIHR5cGUgb2YgdGhlIG91dGVybW9zdCBub2RlIGF0IGdpdmVuIHNpZGUuXG5cblxudmFyIGdldFR5cGVPZkRvbVRyZWUgPSBmdW5jdGlvbiBnZXRUeXBlT2ZEb21UcmVlKG5vZGUsIHNpZGUpIHtcbiAgaWYgKCFub2RlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoc2lkZSkge1xuICAgIG5vZGUgPSBnZXRPdXRlcm1vc3ROb2RlKG5vZGUsIHNpZGUpO1xuICB9IC8vIFRoaXMgbWFrZXMgYSBsb3Qgb2YgYXNzdW1wdGlvbnMgYXMgdG8gd2hlcmUgdGhlIHR5cGUgb2YgYXRvbVxuICAvLyBhcHBlYXJzLiAgV2Ugc2hvdWxkIGRvIGEgYmV0dGVyIGpvYiBvZiBlbmZvcmNpbmcgdGhpcy5cblxuXG4gIHJldHVybiBEb21FbnVtW25vZGUuY2xhc3Nlc1swXV0gfHwgbnVsbDtcbn07XG52YXIgbWFrZU51bGxEZWxpbWl0ZXIgPSBmdW5jdGlvbiBtYWtlTnVsbERlbGltaXRlcihvcHRpb25zLCBjbGFzc2VzKSB7XG4gIHZhciBtb3JlQ2xhc3NlcyA9IFtcIm51bGxkZWxpbWl0ZXJcIl0uY29uY2F0KG9wdGlvbnMuYmFzZVNpemluZ0NsYXNzZXMoKSk7XG4gIHJldHVybiBidWlsZEhUTUxfbWFrZVNwYW4oY2xhc3Nlcy5jb25jYXQobW9yZUNsYXNzZXMpKTtcbn07XG4vKipcbiAqIGJ1aWxkR3JvdXAgaXMgdGhlIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSBncm91cCBhbmQgY2FsbHMgdGhlIGNvcnJlY3QgZ3JvdXBUeXBlXG4gKiBmdW5jdGlvbiBmb3IgaXQuIEl0IGFsc28gaGFuZGxlcyB0aGUgaW50ZXJhY3Rpb24gb2Ygc2l6ZSBhbmQgc3R5bGUgY2hhbmdlc1xuICogYmV0d2VlbiBwYXJlbnRzIGFuZCBjaGlsZHJlbi5cbiAqL1xuXG52YXIgYnVpbGRIVE1MX2J1aWxkR3JvdXAgPSBmdW5jdGlvbiBidWlsZEdyb3VwKGdyb3VwLCBvcHRpb25zLCBiYXNlT3B0aW9ucykge1xuICBpZiAoIWdyb3VwKSB7XG4gICAgcmV0dXJuIGJ1aWxkSFRNTF9tYWtlU3BhbigpO1xuICB9XG5cbiAgaWYgKF9odG1sR3JvdXBCdWlsZGVyc1tncm91cC50eXBlXSkge1xuICAgIC8vIENhbGwgdGhlIGdyb3VwQnVpbGRlcnMgZnVuY3Rpb25cbiAgICB2YXIgZ3JvdXBOb2RlID0gX2h0bWxHcm91cEJ1aWxkZXJzW2dyb3VwLnR5cGVdKGdyb3VwLCBvcHRpb25zKTsgLy8gSWYgdGhlIHNpemUgY2hhbmdlZCBiZXR3ZWVuIHRoZSBwYXJlbnQgYW5kIHRoZSBjdXJyZW50IGdyb3VwLCBhY2NvdW50XG4gICAgLy8gZm9yIHRoYXQgc2l6ZSBkaWZmZXJlbmNlLlxuXG4gICAgaWYgKGJhc2VPcHRpb25zICYmIG9wdGlvbnMuc2l6ZSAhPT0gYmFzZU9wdGlvbnMuc2l6ZSkge1xuICAgICAgZ3JvdXBOb2RlID0gYnVpbGRIVE1MX21ha2VTcGFuKG9wdGlvbnMuc2l6aW5nQ2xhc3NlcyhiYXNlT3B0aW9ucyksIFtncm91cE5vZGVdLCBvcHRpb25zKTtcbiAgICAgIHZhciBtdWx0aXBsaWVyID0gb3B0aW9ucy5zaXplTXVsdGlwbGllciAvIGJhc2VPcHRpb25zLnNpemVNdWx0aXBsaWVyO1xuICAgICAgZ3JvdXBOb2RlLmhlaWdodCAqPSBtdWx0aXBsaWVyO1xuICAgICAgZ3JvdXBOb2RlLmRlcHRoICo9IG11bHRpcGxpZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdyb3VwTm9kZTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJHb3QgZ3JvdXAgb2YgdW5rbm93biB0eXBlOiAnXCIgKyBncm91cC50eXBlICsgXCInXCIpO1xuICB9XG59O1xuLyoqXG4gKiBDb21iaW5lIGFuIGFycmF5IG9mIEhUTUwgRE9NIG5vZGVzIChlLmcuLCB0aGUgb3V0cHV0IG9mIGBidWlsZEV4cHJlc3Npb25gKVxuICogaW50byBhbiB1bmJyZWFrYWJsZSBIVE1MIG5vZGUgb2YgY2xhc3MgLmJhc2UsIHdpdGggcHJvcGVyIHN0cnV0cyB0b1xuICogZ3VhcmFudGVlIGNvcnJlY3QgdmVydGljYWwgZXh0ZW50LiAgYGJ1aWxkSFRNTGAgY2FsbHMgdGhpcyByZXBlYXRlZGx5IHRvXG4gKiBtYWtlIHVwIHRoZSBlbnRpcmUgZXhwcmVzc2lvbiBhcyBhIHNlcXVlbmNlIG9mIHVuYnJlYWthYmxlIHVuaXRzLlxuICovXG5cbmZ1bmN0aW9uIGJ1aWxkSFRNTFVuYnJlYWthYmxlKGNoaWxkcmVuLCBvcHRpb25zKSB7XG4gIC8vIENvbXB1dGUgaGVpZ2h0IGFuZCBkZXB0aCBvZiB0aGlzIGNodW5rLlxuICB2YXIgYm9keSA9IGJ1aWxkSFRNTF9tYWtlU3BhbihbXCJiYXNlXCJdLCBjaGlsZHJlbiwgb3B0aW9ucyk7IC8vIEFkZCBzdHJ1dCwgd2hpY2ggZW5zdXJlcyB0aGF0IHRoZSB0b3Agb2YgdGhlIEhUTUwgZWxlbWVudCBmYWxscyBhdFxuICAvLyB0aGUgaGVpZ2h0IG9mIHRoZSBleHByZXNzaW9uLCBhbmQgdGhlIGJvdHRvbSBvZiB0aGUgSFRNTCBlbGVtZW50XG4gIC8vIGZhbGxzIGF0IHRoZSBkZXB0aCBvZiB0aGUgZXhwcmVzc2lvbi5cbiAgLy8gV2UgdXNlZCB0byBoYXZlIHNlcGFyYXRlIHRvcCBhbmQgYm90dG9tIHN0cnV0cywgd2hlcmUgdGhlIGJvdHRvbSBzdHJ1dFxuICAvLyB3b3VsZCBsaWtlIHRvIHVzZSBgdmVydGljYWwtYWxpZ246IHRvcGAsIGJ1dCBpbiBJRSA5IHRoaXMgbG93ZXJzIHRoZVxuICAvLyBiYXNlbGluZSBvZiB0aGUgYm94IHRvIHRoZSBib3R0b20gb2YgdGhpcyBzdHJ1dCAoaW5zdGVhZCBvZiBzdGF5aW5nIGluXG4gIC8vIHRoZSBub3JtYWwgcGxhY2UpIHNvIHdlIHVzZSBhbiBhYnNvbHV0ZSB2YWx1ZSBmb3IgdmVydGljYWwtYWxpZ24gaW5zdGVhZC5cblxuICB2YXIgc3RydXQgPSBidWlsZEhUTUxfbWFrZVNwYW4oW1wic3RydXRcIl0pO1xuICBzdHJ1dC5zdHlsZS5oZWlnaHQgPSBib2R5LmhlaWdodCArIGJvZHkuZGVwdGggKyBcImVtXCI7XG4gIHN0cnV0LnN0eWxlLnZlcnRpY2FsQWxpZ24gPSAtYm9keS5kZXB0aCArIFwiZW1cIjtcbiAgYm9keS5jaGlsZHJlbi51bnNoaWZ0KHN0cnV0KTtcbiAgcmV0dXJuIGJvZHk7XG59XG4vKipcbiAqIFRha2UgYW4gZW50aXJlIHBhcnNlIHRyZWUsIGFuZCBidWlsZCBpdCBpbnRvIGFuIGFwcHJvcHJpYXRlIHNldCBvZiBIVE1MXG4gKiBub2Rlcy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJ1aWxkSFRNTCh0cmVlLCBvcHRpb25zKSB7XG4gIC8vIFN0cmlwIG9mZiBvdXRlciB0YWcgd3JhcHBlciBmb3IgcHJvY2Vzc2luZyBiZWxvdy5cbiAgdmFyIHRhZyA9IG51bGw7XG5cbiAgaWYgKHRyZWUubGVuZ3RoID09PSAxICYmIHRyZWVbMF0udHlwZSA9PT0gXCJ0YWdcIikge1xuICAgIHRhZyA9IHRyZWVbMF0udGFnO1xuICAgIHRyZWUgPSB0cmVlWzBdLmJvZHk7XG4gIH0gLy8gQnVpbGQgdGhlIGV4cHJlc3Npb24gY29udGFpbmVkIGluIHRoZSB0cmVlXG5cblxuICB2YXIgZXhwcmVzc2lvbiA9IGJ1aWxkSFRNTF9idWlsZEV4cHJlc3Npb24odHJlZSwgb3B0aW9ucywgdHJ1ZSk7XG4gIHZhciBjaGlsZHJlbiA9IFtdOyAvLyBDcmVhdGUgb25lIGJhc2Ugbm9kZSBmb3IgZWFjaCBjaHVuayBiZXR3ZWVuIHBvdGVudGlhbCBsaW5lIGJyZWFrcy5cbiAgLy8gVGhlIFRlWEJvb2sgW3AuMTczXSBzYXlzIFwiQSBmb3JtdWxhIHdpbGwgYmUgYnJva2VuIG9ubHkgYWZ0ZXIgYVxuICAvLyByZWxhdGlvbiBzeW1ib2wgbGlrZSAkPSQgb3IgJDwkIG9yICRcXHJpZ2h0YXJyb3ckLCBvciBhZnRlciBhIGJpbmFyeVxuICAvLyBvcGVyYXRpb24gc3ltYm9sIGxpa2UgJCskIG9yICQtJCBvciAkXFx0aW1lcyQsIHdoZXJlIHRoZSByZWxhdGlvbiBvclxuICAvLyBiaW5hcnkgb3BlcmF0aW9uIGlzIG9uIHRoZSBgYG91dGVyIGxldmVsJycgb2YgdGhlIGZvcm11bGEgKGkuZS4sIG5vdFxuICAvLyBlbmNsb3NlZCBpbiB7Li4ufSBhbmQgbm90IHBhcnQgb2YgYW4gXFxvdmVyIGNvbnN0cnVjdGlvbikuXCJcblxuICB2YXIgcGFydHMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cHJlc3Npb24ubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKGV4cHJlc3Npb25baV0pO1xuXG4gICAgaWYgKGV4cHJlc3Npb25baV0uaGFzQ2xhc3MoXCJtYmluXCIpIHx8IGV4cHJlc3Npb25baV0uaGFzQ2xhc3MoXCJtcmVsXCIpIHx8IGV4cHJlc3Npb25baV0uaGFzQ2xhc3MoXCJhbGxvd2JyZWFrXCIpKSB7XG4gICAgICAvLyBQdXQgYW55IHBvc3Qtb3BlcmF0b3IgZ2x1ZSBvbiBzYW1lIGxpbmUgYXMgb3BlcmF0b3IuXG4gICAgICAvLyBXYXRjaCBmb3IgXFxub2JyZWFrIGFsb25nIHRoZSB3YXksIGFuZCBzdG9wIGF0IFxcbmV3bGluZS5cbiAgICAgIHZhciBub2JyZWFrID0gZmFsc2U7XG5cbiAgICAgIHdoaWxlIChpIDwgZXhwcmVzc2lvbi5sZW5ndGggLSAxICYmIGV4cHJlc3Npb25baSArIDFdLmhhc0NsYXNzKFwibXNwYWNlXCIpICYmICFleHByZXNzaW9uW2kgKyAxXS5oYXNDbGFzcyhcIm5ld2xpbmVcIikpIHtcbiAgICAgICAgaSsrO1xuICAgICAgICBwYXJ0cy5wdXNoKGV4cHJlc3Npb25baV0pO1xuXG4gICAgICAgIGlmIChleHByZXNzaW9uW2ldLmhhc0NsYXNzKFwibm9icmVha1wiKSkge1xuICAgICAgICAgIG5vYnJlYWsgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IC8vIERvbid0IGFsbG93IGJyZWFrIGlmIFxcbm9icmVhayBhbW9uZyB0aGUgcG9zdC1vcGVyYXRvciBnbHVlLlxuXG5cbiAgICAgIGlmICghbm9icmVhaykge1xuICAgICAgICBjaGlsZHJlbi5wdXNoKGJ1aWxkSFRNTFVuYnJlYWthYmxlKHBhcnRzLCBvcHRpb25zKSk7XG4gICAgICAgIHBhcnRzID0gW107XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChleHByZXNzaW9uW2ldLmhhc0NsYXNzKFwibmV3bGluZVwiKSkge1xuICAgICAgLy8gV3JpdGUgdGhlIGxpbmUgZXhjZXB0IHRoZSBuZXdsaW5lXG4gICAgICBwYXJ0cy5wb3AoKTtcblxuICAgICAgaWYgKHBhcnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY2hpbGRyZW4ucHVzaChidWlsZEhUTUxVbmJyZWFrYWJsZShwYXJ0cywgb3B0aW9ucykpO1xuICAgICAgICBwYXJ0cyA9IFtdO1xuICAgICAgfSAvLyBQdXQgdGhlIG5ld2xpbmUgYXQgdGhlIHRvcCBsZXZlbFxuXG5cbiAgICAgIGNoaWxkcmVuLnB1c2goZXhwcmVzc2lvbltpXSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHBhcnRzLmxlbmd0aCA+IDApIHtcbiAgICBjaGlsZHJlbi5wdXNoKGJ1aWxkSFRNTFVuYnJlYWthYmxlKHBhcnRzLCBvcHRpb25zKSk7XG4gIH0gLy8gTm93LCBpZiB0aGVyZSB3YXMgYSB0YWcsIGJ1aWxkIGl0IHRvbyBhbmQgYXBwZW5kIGl0IGFzIGEgZmluYWwgY2hpbGQuXG5cblxuICB2YXIgdGFnQ2hpbGQ7XG5cbiAgaWYgKHRhZykge1xuICAgIHRhZ0NoaWxkID0gYnVpbGRIVE1MVW5icmVha2FibGUoYnVpbGRIVE1MX2J1aWxkRXhwcmVzc2lvbih0YWcsIG9wdGlvbnMsIHRydWUpKTtcbiAgICB0YWdDaGlsZC5jbGFzc2VzID0gW1widGFnXCJdO1xuICAgIGNoaWxkcmVuLnB1c2godGFnQ2hpbGQpO1xuICB9XG5cbiAgdmFyIGh0bWxOb2RlID0gYnVpbGRIVE1MX21ha2VTcGFuKFtcImthdGV4LWh0bWxcIl0sIGNoaWxkcmVuKTtcbiAgaHRtbE5vZGUuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiwgXCJ0cnVlXCIpOyAvLyBBZGp1c3QgdGhlIHN0cnV0IG9mIHRoZSB0YWcgdG8gYmUgdGhlIG1heGltdW0gaGVpZ2h0IG9mIGFsbCBjaGlsZHJlblxuICAvLyAodGhlIGhlaWdodCBvZiB0aGUgZW5jbG9zaW5nIGh0bWxOb2RlKSBmb3IgcHJvcGVyIHZlcnRpY2FsIGFsaWdubWVudC5cblxuICBpZiAodGFnQ2hpbGQpIHtcbiAgICB2YXIgc3RydXQgPSB0YWdDaGlsZC5jaGlsZHJlblswXTtcbiAgICBzdHJ1dC5zdHlsZS5oZWlnaHQgPSBodG1sTm9kZS5oZWlnaHQgKyBodG1sTm9kZS5kZXB0aCArIFwiZW1cIjtcbiAgICBzdHJ1dC5zdHlsZS52ZXJ0aWNhbEFsaWduID0gLWh0bWxOb2RlLmRlcHRoICsgXCJlbVwiO1xuICB9XG5cbiAgcmV0dXJuIGh0bWxOb2RlO1xufVxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvbWF0aE1MVHJlZS5qc1xuLyoqXG4gKiBUaGVzZSBvYmplY3RzIHN0b3JlIGRhdGEgYWJvdXQgTWF0aE1MIG5vZGVzLiBUaGlzIGlzIHRoZSBNYXRoTUwgZXF1aXZhbGVudFxuICogb2YgdGhlIHR5cGVzIGluIGRvbVRyZWUuanMuIFNpbmNlIE1hdGhNTCBoYW5kbGVzIGl0cyBvd24gcmVuZGVyaW5nLCBhbmRcbiAqIHNpbmNlIHdlJ3JlIG1haW5seSB1c2luZyBNYXRoTUwgdG8gaW1wcm92ZSBhY2Nlc3NpYmlsaXR5LCB3ZSBkb24ndCBtYW5hZ2VcbiAqIGFueSBvZiB0aGUgc3R5bGluZyBzdGF0ZSB0aGF0IHRoZSBwbGFpbiBET00gbm9kZXMgZG8uXG4gKlxuICogVGhlIGB0b05vZGVgIGFuZCBgdG9NYXJrdXBgIGZ1bmN0aW9ucyB3b3JrIHNpbWxhcmx5IHRvIGhvdyB0aGV5IGRvIGluXG4gKiBkb21UcmVlLmpzLCBjcmVhdGluZyBuYW1lc3BhY2VkIERPTSBub2RlcyBhbmQgSFRNTCB0ZXh0IG1hcmt1cCByZXNwZWN0aXZlbHkuXG4gKi9cblxuXG5mdW5jdGlvbiBuZXdEb2N1bWVudEZyYWdtZW50KGNoaWxkcmVuKSB7XG4gIHJldHVybiBuZXcgdHJlZV9Eb2N1bWVudEZyYWdtZW50KGNoaWxkcmVuKTtcbn1cbi8qKlxuICogVGhpcyBub2RlIHJlcHJlc2VudHMgYSBnZW5lcmFsIHB1cnBvc2UgTWF0aE1MIG5vZGUgb2YgYW55IHR5cGUuIFRoZVxuICogY29uc3RydWN0b3IgcmVxdWlyZXMgdGhlIHR5cGUgb2Ygbm9kZSB0byBjcmVhdGUgKGZvciBleGFtcGxlLCBgXCJtb1wiYCBvclxuICogYFwibXNwYWNlXCJgLCBjb3JyZXNwb25kaW5nIHRvIGA8bW8+YCBhbmQgYDxtc3BhY2U+YCB0YWdzKS5cbiAqL1xuXG52YXIgbWF0aE1MVHJlZV9NYXRoTm9kZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE1hdGhOb2RlKHR5cGUsIGNoaWxkcmVuKSB7XG4gICAgdGhpcy50eXBlID0gdm9pZCAwO1xuICAgIHRoaXMuYXR0cmlidXRlcyA9IHZvaWQgMDtcbiAgICB0aGlzLmNoaWxkcmVuID0gdm9pZCAwO1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5hdHRyaWJ1dGVzID0ge307XG4gICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuIHx8IFtdO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIGFuIGF0dHJpYnV0ZSBvbiBhIE1hdGhNTCBub2RlLiBNYXRoTUwgZGVwZW5kcyBvbiBhdHRyaWJ1dGVzIHRvIGNvbnZleSBhXG4gICAqIHNlbWFudGljIGNvbnRlbnQsIHNvIHRoaXMgaXMgdXNlZCBoZWF2aWx5LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBNYXRoTm9kZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnNldEF0dHJpYnV0ZSA9IGZ1bmN0aW9uIHNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkge1xuICAgIHRoaXMuYXR0cmlidXRlc1tuYW1lXSA9IHZhbHVlO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIGFuIGF0dHJpYnV0ZSBvbiBhIE1hdGhNTCBub2RlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbiBnZXRBdHRyaWJ1dGUobmFtZSkge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXNbbmFtZV07XG4gIH1cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSBtYXRoIG5vZGUgaW50byBhIE1hdGhNTC1uYW1lc3BhY2VkIERPTSBlbGVtZW50LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b05vZGUgPSBmdW5jdGlvbiB0b05vZGUoKSB7XG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsIHRoaXMudHlwZSk7XG5cbiAgICBmb3IgKHZhciBhdHRyIGluIHRoaXMuYXR0cmlidXRlcykge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmF0dHJpYnV0ZXMsIGF0dHIpKSB7XG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHIsIHRoaXMuYXR0cmlidXRlc1thdHRyXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBub2RlLmFwcGVuZENoaWxkKHRoaXMuY2hpbGRyZW5baV0udG9Ob2RlKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGUgbWF0aCBub2RlIGludG8gYW4gSFRNTCBtYXJrdXAgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b01hcmt1cCA9IGZ1bmN0aW9uIHRvTWFya3VwKCkge1xuICAgIHZhciBtYXJrdXAgPSBcIjxcIiArIHRoaXMudHlwZTsgLy8gQWRkIHRoZSBhdHRyaWJ1dGVzXG5cbiAgICBmb3IgKHZhciBhdHRyIGluIHRoaXMuYXR0cmlidXRlcykge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmF0dHJpYnV0ZXMsIGF0dHIpKSB7XG4gICAgICAgIG1hcmt1cCArPSBcIiBcIiArIGF0dHIgKyBcIj1cXFwiXCI7XG4gICAgICAgIG1hcmt1cCArPSB1dGlscy5lc2NhcGUodGhpcy5hdHRyaWJ1dGVzW2F0dHJdKTtcbiAgICAgICAgbWFya3VwICs9IFwiXFxcIlwiO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1hcmt1cCArPSBcIj5cIjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgbWFya3VwICs9IHRoaXMuY2hpbGRyZW5baV0udG9NYXJrdXAoKTtcbiAgICB9XG5cbiAgICBtYXJrdXAgKz0gXCI8L1wiICsgdGhpcy50eXBlICsgXCI+XCI7XG4gICAgcmV0dXJuIG1hcmt1cDtcbiAgfVxuICAvKipcbiAgICogQ29udmVydHMgdGhlIG1hdGggbm9kZSBpbnRvIGEgc3RyaW5nLCBzaW1pbGFyIHRvIGlubmVyVGV4dCwgYnV0IGVzY2FwZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvVGV4dCA9IGZ1bmN0aW9uIHRvVGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICByZXR1cm4gY2hpbGQudG9UZXh0KCk7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICByZXR1cm4gTWF0aE5vZGU7XG59KCk7XG4vKipcbiAqIFRoaXMgbm9kZSByZXByZXNlbnRzIGEgcGllY2Ugb2YgdGV4dC5cbiAqL1xuXG52YXIgbWF0aE1MVHJlZV9UZXh0Tm9kZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFRleHROb2RlKHRleHQpIHtcbiAgICB0aGlzLnRleHQgPSB2b2lkIDA7XG4gICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgfVxuICAvKipcbiAgICogQ29udmVydHMgdGhlIHRleHQgbm9kZSBpbnRvIGEgRE9NIHRleHQgbm9kZS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvMiA9IFRleHROb2RlLnByb3RvdHlwZTtcblxuICBfcHJvdG8yLnRvTm9kZSA9IGZ1bmN0aW9uIHRvTm9kZSgpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGhpcy50ZXh0KTtcbiAgfVxuICAvKipcbiAgICogQ29udmVydHMgdGhlIHRleHQgbm9kZSBpbnRvIGVzY2FwZWQgSFRNTCBtYXJrdXBcbiAgICogKHJlcHJlc2VudGluZyB0aGUgdGV4dCBpdHNlbGYpLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90bzIudG9NYXJrdXAgPSBmdW5jdGlvbiB0b01hcmt1cCgpIHtcbiAgICByZXR1cm4gdXRpbHMuZXNjYXBlKHRoaXMudG9UZXh0KCkpO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGUgdGV4dCBub2RlIGludG8gYSBzdHJpbmdcbiAgICogKHJlcHJlc2VudGluZyB0aGUgdGV4dCBpdGVzZWxmKS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8yLnRvVGV4dCA9IGZ1bmN0aW9uIHRvVGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0O1xuICB9O1xuXG4gIHJldHVybiBUZXh0Tm9kZTtcbn0oKTtcbi8qKlxuICogVGhpcyBub2RlIHJlcHJlc2VudHMgYSBzcGFjZSwgYnV0IG1heSByZW5kZXIgYXMgPG1zcGFjZS4uLi8+IG9yIGFzIHRleHQsXG4gKiBkZXBlbmRpbmcgb24gdGhlIHdpZHRoLlxuICovXG5cbnZhciBTcGFjZU5vZGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ3JlYXRlIGEgU3BhY2Ugbm9kZSB3aXRoIHdpZHRoIGdpdmVuIGluIENTUyBlbXMuXG4gICAqL1xuICBmdW5jdGlvbiBTcGFjZU5vZGUod2lkdGgpIHtcbiAgICB0aGlzLndpZHRoID0gdm9pZCAwO1xuICAgIHRoaXMuY2hhcmFjdGVyID0gdm9pZCAwO1xuICAgIHRoaXMud2lkdGggPSB3aWR0aDsgLy8gU2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAwL1dELU1hdGhNTDItMjAwMDAzMjgvY2hhcHRlcjYuaHRtbFxuICAgIC8vIGZvciBhIHRhYmxlIG9mIHNwYWNlLWxpa2UgY2hhcmFjdGVycy4gIFdlIHVzZSBVbmljb2RlXG4gICAgLy8gcmVwcmVzZW50YXRpb25zIGluc3RlYWQgb2YgJkxvbmdOYW1lczsgYXMgaXQncyBub3QgY2xlYXIgaG93IHRvXG4gICAgLy8gbWFrZSB0aGUgbGF0dGVyIHZpYSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZS5cblxuICAgIGlmICh3aWR0aCA+PSAwLjA1NTU1ICYmIHdpZHRoIDw9IDAuMDU1NTYpIHtcbiAgICAgIHRoaXMuY2hhcmFjdGVyID0gXCJcXHUyMDBBXCI7IC8vICZWZXJ5VGhpblNwYWNlO1xuICAgIH0gZWxzZSBpZiAod2lkdGggPj0gMC4xNjY2ICYmIHdpZHRoIDw9IDAuMTY2Nykge1xuICAgICAgdGhpcy5jaGFyYWN0ZXIgPSBcIlxcdTIwMDlcIjsgLy8gJlRoaW5TcGFjZTtcbiAgICB9IGVsc2UgaWYgKHdpZHRoID49IDAuMjIyMiAmJiB3aWR0aCA8PSAwLjIyMjMpIHtcbiAgICAgIHRoaXMuY2hhcmFjdGVyID0gXCJcXHUyMDA1XCI7IC8vICZNZWRpdW1TcGFjZTtcbiAgICB9IGVsc2UgaWYgKHdpZHRoID49IDAuMjc3NyAmJiB3aWR0aCA8PSAwLjI3NzgpIHtcbiAgICAgIHRoaXMuY2hhcmFjdGVyID0gXCJcXHUyMDA1XFx1MjAwQVwiOyAvLyAmVGhpY2tTcGFjZTtcbiAgICB9IGVsc2UgaWYgKHdpZHRoID49IC0wLjA1NTU2ICYmIHdpZHRoIDw9IC0wLjA1NTU1KSB7XG4gICAgICB0aGlzLmNoYXJhY3RlciA9IFwiXFx1MjAwQVxcdTIwNjNcIjsgLy8gJk5lZ2F0aXZlVmVyeVRoaW5TcGFjZTtcbiAgICB9IGVsc2UgaWYgKHdpZHRoID49IC0wLjE2NjcgJiYgd2lkdGggPD0gLTAuMTY2Nikge1xuICAgICAgdGhpcy5jaGFyYWN0ZXIgPSBcIlxcdTIwMDlcXHUyMDYzXCI7IC8vICZOZWdhdGl2ZVRoaW5TcGFjZTtcbiAgICB9IGVsc2UgaWYgKHdpZHRoID49IC0wLjIyMjMgJiYgd2lkdGggPD0gLTAuMjIyMikge1xuICAgICAgdGhpcy5jaGFyYWN0ZXIgPSBcIlxcdTIwNUZcXHUyMDYzXCI7IC8vICZOZWdhdGl2ZU1lZGl1bVNwYWNlO1xuICAgIH0gZWxzZSBpZiAod2lkdGggPj0gLTAuMjc3OCAmJiB3aWR0aCA8PSAtMC4yNzc3KSB7XG4gICAgICB0aGlzLmNoYXJhY3RlciA9IFwiXFx1MjAwNVxcdTIwNjNcIjsgLy8gJk5lZ2F0aXZlVGhpY2tTcGFjZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jaGFyYWN0ZXIgPSBudWxsO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ29udmVydHMgdGhlIG1hdGggbm9kZSBpbnRvIGEgTWF0aE1MLW5hbWVzcGFjZWQgRE9NIGVsZW1lbnQuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90bzMgPSBTcGFjZU5vZGUucHJvdG90eXBlO1xuXG4gIF9wcm90bzMudG9Ob2RlID0gZnVuY3Rpb24gdG9Ob2RlKCkge1xuICAgIGlmICh0aGlzLmNoYXJhY3Rlcikge1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMuY2hhcmFjdGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsIFwibXNwYWNlXCIpO1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCB0aGlzLndpZHRoICsgXCJlbVwiKTtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ29udmVydHMgdGhlIG1hdGggbm9kZSBpbnRvIGFuIEhUTUwgbWFya3VwIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8zLnRvTWFya3VwID0gZnVuY3Rpb24gdG9NYXJrdXAoKSB7XG4gICAgaWYgKHRoaXMuY2hhcmFjdGVyKSB7XG4gICAgICByZXR1cm4gXCI8bXRleHQ+XCIgKyB0aGlzLmNoYXJhY3RlciArIFwiPC9tdGV4dD5cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiPG1zcGFjZSB3aWR0aD1cXFwiXCIgKyB0aGlzLndpZHRoICsgXCJlbVxcXCIvPlwiO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ29udmVydHMgdGhlIG1hdGggbm9kZSBpbnRvIGEgc3RyaW5nLCBzaW1pbGFyIHRvIGlubmVyVGV4dC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8zLnRvVGV4dCA9IGZ1bmN0aW9uIHRvVGV4dCgpIHtcbiAgICBpZiAodGhpcy5jaGFyYWN0ZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiIFwiO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3BhY2VOb2RlO1xufSgpO1xuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBtYXRoTUxUcmVlID0gKHtcbiAgTWF0aE5vZGU6IG1hdGhNTFRyZWVfTWF0aE5vZGUsXG4gIFRleHROb2RlOiBtYXRoTUxUcmVlX1RleHROb2RlLFxuICBTcGFjZU5vZGU6IFNwYWNlTm9kZSxcbiAgbmV3RG9jdW1lbnRGcmFnbWVudDogbmV3RG9jdW1lbnRGcmFnbWVudFxufSk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9idWlsZE1hdGhNTC5qc1xuLyoqXG4gKiBUaGlzIGZpbGUgY29udmVydHMgYSBwYXJzZSB0cmVlIGludG8gYSBjb29yZXNwb25kaW5nIE1hdGhNTCB0cmVlLiBUaGUgbWFpblxuICogZW50cnkgcG9pbnQgaXMgdGhlIGBidWlsZE1hdGhNTGAgZnVuY3Rpb24sIHdoaWNoIHRha2VzIGEgcGFyc2UgdHJlZSBmcm9tIHRoZVxuICogcGFyc2VyLlxuICovXG5cblxuXG5cblxuXG5cblxuXG4vKipcbiAqIFRha2VzIGEgc3ltYm9sIGFuZCBjb252ZXJ0cyBpdCBpbnRvIGEgTWF0aE1MIHRleHQgbm9kZSBhZnRlciBwZXJmb3JtaW5nXG4gKiBvcHRpb25hbCByZXBsYWNlbWVudCBmcm9tIHN5bWJvbHMuanMuXG4gKi9cbnZhciBidWlsZE1hdGhNTF9tYWtlVGV4dCA9IGZ1bmN0aW9uIG1ha2VUZXh0KHRleHQsIG1vZGUsIG9wdGlvbnMpIHtcbiAgaWYgKHNyY19zeW1ib2xzW21vZGVdW3RleHRdICYmIHNyY19zeW1ib2xzW21vZGVdW3RleHRdLnJlcGxhY2UgJiYgdGV4dC5jaGFyQ29kZUF0KDApICE9PSAweEQ4MzUgJiYgIShsaWdhdHVyZXMuaGFzT3duUHJvcGVydHkodGV4dCkgJiYgb3B0aW9ucyAmJiAob3B0aW9ucy5mb250RmFtaWx5ICYmIG9wdGlvbnMuZm9udEZhbWlseS5zdWJzdHIoNCwgMikgPT09IFwidHRcIiB8fCBvcHRpb25zLmZvbnQgJiYgb3B0aW9ucy5mb250LnN1YnN0cig0LCAyKSA9PT0gXCJ0dFwiKSkpIHtcbiAgICB0ZXh0ID0gc3JjX3N5bWJvbHNbbW9kZV1bdGV4dF0ucmVwbGFjZTtcbiAgfVxuXG4gIHJldHVybiBuZXcgbWF0aE1MVHJlZS5UZXh0Tm9kZSh0ZXh0KTtcbn07XG4vKipcbiAqIFdyYXAgdGhlIGdpdmVuIGFycmF5IG9mIG5vZGVzIGluIGFuIDxtcm93PiBub2RlIGlmIG5lZWRlZCwgaS5lLixcbiAqIHVubGVzcyB0aGUgYXJyYXkgaGFzIGxlbmd0aCAxLiAgQWx3YXlzIHJldHVybnMgYSBzaW5nbGUgbm9kZS5cbiAqL1xuXG52YXIgYnVpbGRNYXRoTUxfbWFrZVJvdyA9IGZ1bmN0aW9uIG1ha2VSb3coYm9keSkge1xuICBpZiAoYm9keS5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gYm9keVswXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtcm93XCIsIGJvZHkpO1xuICB9XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBtYXRoIHZhcmlhbnQgYXMgYSBzdHJpbmcgb3IgbnVsbCBpZiBub25lIGlzIHJlcXVpcmVkLlxuICovXG5cbnZhciBidWlsZE1hdGhNTF9nZXRWYXJpYW50ID0gZnVuY3Rpb24gZ2V0VmFyaWFudChncm91cCwgb3B0aW9ucykge1xuICAvLyBIYW5kbGUgXFx0ZXh0Li4uIGZvbnQgc3BlY2lmaWVycyBhcyBiZXN0IHdlIGNhbi5cbiAgLy8gTWF0aE1MIGhhcyBhIGxpbWl0ZWQgbGlzdCBvZiBhbGxvd2FibGUgbWF0aHZhcmlhbnQgc3BlY2lmaWVyczsgc2VlXG4gIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9NYXRoTUwzL2NoYXB0ZXIzLmh0bWwjcHJlc20uY29tbWF0dFxuICBpZiAob3B0aW9ucy5mb250RmFtaWx5ID09PSBcInRleHR0dFwiKSB7XG4gICAgcmV0dXJuIFwibW9ub3NwYWNlXCI7XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5mb250RmFtaWx5ID09PSBcInRleHRzZlwiKSB7XG4gICAgaWYgKG9wdGlvbnMuZm9udFNoYXBlID09PSBcInRleHRpdFwiICYmIG9wdGlvbnMuZm9udFdlaWdodCA9PT0gXCJ0ZXh0YmZcIikge1xuICAgICAgcmV0dXJuIFwic2Fucy1zZXJpZi1ib2xkLWl0YWxpY1wiO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5mb250U2hhcGUgPT09IFwidGV4dGl0XCIpIHtcbiAgICAgIHJldHVybiBcInNhbnMtc2VyaWYtaXRhbGljXCI7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLmZvbnRXZWlnaHQgPT09IFwidGV4dGJmXCIpIHtcbiAgICAgIHJldHVybiBcImJvbGQtc2Fucy1zZXJpZlwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJzYW5zLXNlcmlmXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKG9wdGlvbnMuZm9udFNoYXBlID09PSBcInRleHRpdFwiICYmIG9wdGlvbnMuZm9udFdlaWdodCA9PT0gXCJ0ZXh0YmZcIikge1xuICAgIHJldHVybiBcImJvbGQtaXRhbGljXCI7XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5mb250U2hhcGUgPT09IFwidGV4dGl0XCIpIHtcbiAgICByZXR1cm4gXCJpdGFsaWNcIjtcbiAgfSBlbHNlIGlmIChvcHRpb25zLmZvbnRXZWlnaHQgPT09IFwidGV4dGJmXCIpIHtcbiAgICByZXR1cm4gXCJib2xkXCI7XG4gIH1cblxuICB2YXIgZm9udCA9IG9wdGlvbnMuZm9udDtcblxuICBpZiAoIWZvbnQgfHwgZm9udCA9PT0gXCJtYXRobm9ybWFsXCIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBtb2RlID0gZ3JvdXAubW9kZTtcblxuICBpZiAoZm9udCA9PT0gXCJtYXRoaXRcIikge1xuICAgIHJldHVybiBcIml0YWxpY1wiO1xuICB9IGVsc2UgaWYgKGZvbnQgPT09IFwiYm9sZHN5bWJvbFwiKSB7XG4gICAgcmV0dXJuIFwiYm9sZC1pdGFsaWNcIjtcbiAgfVxuXG4gIHZhciB0ZXh0ID0gZ3JvdXAudGV4dDtcblxuICBpZiAodXRpbHMuY29udGFpbnMoW1wiXFxcXGltYXRoXCIsIFwiXFxcXGptYXRoXCJdLCB0ZXh0KSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHNyY19zeW1ib2xzW21vZGVdW3RleHRdICYmIHNyY19zeW1ib2xzW21vZGVdW3RleHRdLnJlcGxhY2UpIHtcbiAgICB0ZXh0ID0gc3JjX3N5bWJvbHNbbW9kZV1bdGV4dF0ucmVwbGFjZTtcbiAgfVxuXG4gIHZhciBmb250TmFtZSA9IGJ1aWxkQ29tbW9uLmZvbnRNYXBbZm9udF0uZm9udE5hbWU7XG5cbiAgaWYgKGdldENoYXJhY3Rlck1ldHJpY3ModGV4dCwgZm9udE5hbWUsIG1vZGUpKSB7XG4gICAgcmV0dXJuIGJ1aWxkQ29tbW9uLmZvbnRNYXBbZm9udF0udmFyaWFudDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcbi8qKlxuICogVGFrZXMgYSBsaXN0IG9mIG5vZGVzLCBidWlsZHMgdGhlbSwgYW5kIHJldHVybnMgYSBsaXN0IG9mIHRoZSBnZW5lcmF0ZWRcbiAqIE1hdGhNTCBub2Rlcy4gIEFsc28gY29tYmluZSBjb25zZWN1dGl2ZSA8bXRleHQ+IG91dHB1dHMgaW50byBhIHNpbmdsZVxuICogPG10ZXh0PiB0YWcuXG4gKi9cblxudmFyIGJ1aWxkTWF0aE1MX2J1aWxkRXhwcmVzc2lvbiA9IGZ1bmN0aW9uIGJ1aWxkRXhwcmVzc2lvbihleHByZXNzaW9uLCBvcHRpb25zKSB7XG4gIHZhciBncm91cHMgPSBbXTtcbiAgdmFyIGxhc3RHcm91cDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cHJlc3Npb24ubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZ3JvdXAgPSBidWlsZE1hdGhNTF9idWlsZEdyb3VwKGV4cHJlc3Npb25baV0sIG9wdGlvbnMpO1xuXG4gICAgaWYgKGdyb3VwIGluc3RhbmNlb2YgbWF0aE1MVHJlZV9NYXRoTm9kZSAmJiBsYXN0R3JvdXAgaW5zdGFuY2VvZiBtYXRoTUxUcmVlX01hdGhOb2RlKSB7XG4gICAgICAvLyBDb25jYXRlbmF0ZSBhZGphY2VudCA8bXRleHQ+c1xuICAgICAgaWYgKGdyb3VwLnR5cGUgPT09ICdtdGV4dCcgJiYgbGFzdEdyb3VwLnR5cGUgPT09ICdtdGV4dCcgJiYgZ3JvdXAuZ2V0QXR0cmlidXRlKCdtYXRodmFyaWFudCcpID09PSBsYXN0R3JvdXAuZ2V0QXR0cmlidXRlKCdtYXRodmFyaWFudCcpKSB7XG4gICAgICAgIHZhciBfbGFzdEdyb3VwJGNoaWxkcmVuO1xuXG4gICAgICAgIChfbGFzdEdyb3VwJGNoaWxkcmVuID0gbGFzdEdyb3VwLmNoaWxkcmVuKS5wdXNoLmFwcGx5KF9sYXN0R3JvdXAkY2hpbGRyZW4sIGdyb3VwLmNoaWxkcmVuKTtcblxuICAgICAgICBjb250aW51ZTsgLy8gQ29uY2F0ZW5hdGUgYWRqYWNlbnQgPG1uPnNcbiAgICAgIH0gZWxzZSBpZiAoZ3JvdXAudHlwZSA9PT0gJ21uJyAmJiBsYXN0R3JvdXAudHlwZSA9PT0gJ21uJykge1xuICAgICAgICB2YXIgX2xhc3RHcm91cCRjaGlsZHJlbjI7XG5cbiAgICAgICAgKF9sYXN0R3JvdXAkY2hpbGRyZW4yID0gbGFzdEdyb3VwLmNoaWxkcmVuKS5wdXNoLmFwcGx5KF9sYXN0R3JvdXAkY2hpbGRyZW4yLCBncm91cC5jaGlsZHJlbik7XG5cbiAgICAgICAgY29udGludWU7IC8vIENvbmNhdGVuYXRlIDxtbj4uLi48L21uPiBmb2xsb3dlZCBieSA8bWk+LjwvbWk+XG4gICAgICB9IGVsc2UgaWYgKGdyb3VwLnR5cGUgPT09ICdtaScgJiYgZ3JvdXAuY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmIGxhc3RHcm91cC50eXBlID09PSAnbW4nKSB7XG4gICAgICAgIHZhciBjaGlsZCA9IGdyb3VwLmNoaWxkcmVuWzBdO1xuXG4gICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIG1hdGhNTFRyZWVfVGV4dE5vZGUgJiYgY2hpbGQudGV4dCA9PT0gJy4nKSB7XG4gICAgICAgICAgdmFyIF9sYXN0R3JvdXAkY2hpbGRyZW4zO1xuXG4gICAgICAgICAgKF9sYXN0R3JvdXAkY2hpbGRyZW4zID0gbGFzdEdyb3VwLmNoaWxkcmVuKS5wdXNoLmFwcGx5KF9sYXN0R3JvdXAkY2hpbGRyZW4zLCBncm91cC5jaGlsZHJlbik7XG5cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChsYXN0R3JvdXAudHlwZSA9PT0gJ21pJyAmJiBsYXN0R3JvdXAuY2hpbGRyZW4ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHZhciBsYXN0Q2hpbGQgPSBsYXN0R3JvdXAuY2hpbGRyZW5bMF07XG5cbiAgICAgICAgaWYgKGxhc3RDaGlsZCBpbnN0YW5jZW9mIG1hdGhNTFRyZWVfVGV4dE5vZGUgJiYgbGFzdENoaWxkLnRleHQgPT09IFwiXFx1MDMzOFwiICYmIChncm91cC50eXBlID09PSAnbW8nIHx8IGdyb3VwLnR5cGUgPT09ICdtaScgfHwgZ3JvdXAudHlwZSA9PT0gJ21uJykpIHtcbiAgICAgICAgICB2YXIgX2NoaWxkID0gZ3JvdXAuY2hpbGRyZW5bMF07XG5cbiAgICAgICAgICBpZiAoX2NoaWxkIGluc3RhbmNlb2YgbWF0aE1MVHJlZV9UZXh0Tm9kZSAmJiBfY2hpbGQudGV4dC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyBPdmVybGF5IHdpdGggY29tYmluaW5nIGNoYXJhY3RlciBsb25nIHNvbGlkdXNcbiAgICAgICAgICAgIF9jaGlsZC50ZXh0ID0gX2NoaWxkLnRleHQuc2xpY2UoMCwgMSkgKyBcIlxcdTAzMzhcIiArIF9jaGlsZC50ZXh0LnNsaWNlKDEpO1xuICAgICAgICAgICAgZ3JvdXBzLnBvcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGdyb3Vwcy5wdXNoKGdyb3VwKTtcbiAgICBsYXN0R3JvdXAgPSBncm91cDtcbiAgfVxuXG4gIHJldHVybiBncm91cHM7XG59O1xuLyoqXG4gKiBFcXVpdmFsZW50IHRvIGJ1aWxkRXhwcmVzc2lvbiwgYnV0IHdyYXBzIHRoZSBlbGVtZW50cyBpbiBhbiA8bXJvdz5cbiAqIGlmIHRoZXJlJ3MgbW9yZSB0aGFuIG9uZS4gIFJldHVybnMgYSBzaW5nbGUgbm9kZSBpbnN0ZWFkIG9mIGFuIGFycmF5LlxuICovXG5cbnZhciBidWlsZEV4cHJlc3Npb25Sb3cgPSBmdW5jdGlvbiBidWlsZEV4cHJlc3Npb25Sb3coZXhwcmVzc2lvbiwgb3B0aW9ucykge1xuICByZXR1cm4gYnVpbGRNYXRoTUxfbWFrZVJvdyhidWlsZE1hdGhNTF9idWlsZEV4cHJlc3Npb24oZXhwcmVzc2lvbiwgb3B0aW9ucykpO1xufTtcbi8qKlxuICogVGFrZXMgYSBncm91cCBmcm9tIHRoZSBwYXJzZXIgYW5kIGNhbGxzIHRoZSBhcHByb3ByaWF0ZSBncm91cEJ1aWxkZXJzIGZ1bmN0aW9uXG4gKiBvbiBpdCB0byBwcm9kdWNlIGEgTWF0aE1MIG5vZGUuXG4gKi9cblxudmFyIGJ1aWxkTWF0aE1MX2J1aWxkR3JvdXAgPSBmdW5jdGlvbiBidWlsZEdyb3VwKGdyb3VwLCBvcHRpb25zKSB7XG4gIGlmICghZ3JvdXApIHtcbiAgICByZXR1cm4gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtcm93XCIpO1xuICB9XG5cbiAgaWYgKF9tYXRobWxHcm91cEJ1aWxkZXJzW2dyb3VwLnR5cGVdKSB7XG4gICAgLy8gQ2FsbCB0aGUgZ3JvdXBCdWlsZGVycyBmdW5jdGlvblxuICAgIHZhciByZXN1bHQgPSBfbWF0aG1sR3JvdXBCdWlsZGVyc1tncm91cC50eXBlXShncm91cCwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJHb3QgZ3JvdXAgb2YgdW5rbm93biB0eXBlOiAnXCIgKyBncm91cC50eXBlICsgXCInXCIpO1xuICB9XG59O1xuLyoqXG4gKiBUYWtlcyBhIGZ1bGwgcGFyc2UgdHJlZSBhbmQgc2V0dGluZ3MgYW5kIGJ1aWxkcyBhIE1hdGhNTCByZXByZXNlbnRhdGlvbiBvZlxuICogaXQuIEluIHBhcnRpY3VsYXIsIHdlIHB1dCB0aGUgZWxlbWVudHMgZnJvbSBidWlsZGluZyB0aGUgcGFyc2UgdHJlZSBpbnRvIGFcbiAqIDxzZW1hbnRpY3M+IHRhZyBzbyB3ZSBjYW4gYWxzbyBpbmNsdWRlIHRoYXQgVGVYIHNvdXJjZSBhcyBhbiBhbm5vdGF0aW9uLlxuICpcbiAqIE5vdGUgdGhhdCB3ZSBhY3R1YWxseSByZXR1cm4gYSBkb21UcmVlIGVsZW1lbnQgd2l0aCBhIGA8bWF0aD5gIGluc2lkZSBpdCBzb1xuICogd2UgY2FuIGRvIGFwcHJvcHJpYXRlIHN0eWxpbmcuXG4gKi9cblxuZnVuY3Rpb24gYnVpbGRNYXRoTUwodHJlZSwgdGV4RXhwcmVzc2lvbiwgb3B0aW9ucykge1xuICB2YXIgZXhwcmVzc2lvbiA9IGJ1aWxkTWF0aE1MX2J1aWxkRXhwcmVzc2lvbih0cmVlLCBvcHRpb25zKTsgLy8gV3JhcCB1cCB0aGUgZXhwcmVzc2lvbiBpbiBhbiBtcm93IHNvIGl0IGlzIHByZXNlbnRlZCBpbiB0aGUgc2VtYW50aWNzXG4gIC8vIHRhZyBjb3JyZWN0bHksIHVubGVzcyBpdCdzIGEgc2luZ2xlIDxtcm93PiBvciA8bXRhYmxlPi5cblxuICB2YXIgd3JhcHBlcjtcblxuICBpZiAoZXhwcmVzc2lvbi5sZW5ndGggPT09IDEgJiYgZXhwcmVzc2lvblswXSBpbnN0YW5jZW9mIG1hdGhNTFRyZWVfTWF0aE5vZGUgJiYgdXRpbHMuY29udGFpbnMoW1wibXJvd1wiLCBcIm10YWJsZVwiXSwgZXhwcmVzc2lvblswXS50eXBlKSkge1xuICAgIHdyYXBwZXIgPSBleHByZXNzaW9uWzBdO1xuICB9IGVsc2Uge1xuICAgIHdyYXBwZXIgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1yb3dcIiwgZXhwcmVzc2lvbik7XG4gIH0gLy8gQnVpbGQgYSBUZVggYW5ub3RhdGlvbiBvZiB0aGUgc291cmNlXG5cblxuICB2YXIgYW5ub3RhdGlvbiA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwiYW5ub3RhdGlvblwiLCBbbmV3IG1hdGhNTFRyZWUuVGV4dE5vZGUodGV4RXhwcmVzc2lvbildKTtcbiAgYW5ub3RhdGlvbi5zZXRBdHRyaWJ1dGUoXCJlbmNvZGluZ1wiLCBcImFwcGxpY2F0aW9uL3gtdGV4XCIpO1xuICB2YXIgc2VtYW50aWNzID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJzZW1hbnRpY3NcIiwgW3dyYXBwZXIsIGFubm90YXRpb25dKTtcbiAgdmFyIG1hdGggPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1hdGhcIiwgW3NlbWFudGljc10pOyAvLyBZb3UgY2FuJ3Qgc3R5bGUgPG1hdGg+IG5vZGVzLCBzbyB3ZSB3cmFwIHRoZSBub2RlIGluIGEgc3Bhbi5cbiAgLy8gTk9URTogVGhlIHNwYW4gY2xhc3MgaXMgbm90IHR5cGVkIHRvIGhhdmUgPG1hdGg+IG5vZGVzIGFzIGNoaWxkcmVuLCBhbmRcbiAgLy8gd2UgZG9uJ3Qgd2FudCB0byBtYWtlIHRoZSBjaGlsZHJlbiB0eXBlIG1vcmUgZ2VuZXJpYyBzaW5jZSB0aGUgY2hpbGRyZW5cbiAgLy8gb2Ygc3BhbiBhcmUgZXhwZWN0ZWQgdG8gaGF2ZSBtb3JlIGZpZWxkcyBpbiBgYnVpbGRIdG1sYCBjb250ZXh0cy5cbiAgLy8gJEZsb3dGaXhNZVxuXG4gIHJldHVybiBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJrYXRleC1tYXRobWxcIl0sIFttYXRoXSk7XG59XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9idWlsZFRyZWUuanNcblxuXG5cblxuXG5cblxudmFyIGJ1aWxkVHJlZV9vcHRpb25zRnJvbVNldHRpbmdzID0gZnVuY3Rpb24gb3B0aW9uc0Zyb21TZXR0aW5ncyhzZXR0aW5ncykge1xuICByZXR1cm4gbmV3IHNyY19PcHRpb25zKHtcbiAgICBzdHlsZTogc2V0dGluZ3MuZGlzcGxheU1vZGUgPyBzcmNfU3R5bGUuRElTUExBWSA6IHNyY19TdHlsZS5URVhULFxuICAgIG1heFNpemU6IHNldHRpbmdzLm1heFNpemVcbiAgfSk7XG59O1xuXG52YXIgYnVpbGRUcmVlX2Rpc3BsYXlXcmFwID0gZnVuY3Rpb24gZGlzcGxheVdyYXAobm9kZSwgc2V0dGluZ3MpIHtcbiAgaWYgKHNldHRpbmdzLmRpc3BsYXlNb2RlKSB7XG4gICAgdmFyIGNsYXNzZXMgPSBbXCJrYXRleC1kaXNwbGF5XCJdO1xuXG4gICAgaWYgKHNldHRpbmdzLmxlcW5vKSB7XG4gICAgICBjbGFzc2VzLnB1c2goXCJsZXFub1wiKTtcbiAgICB9XG5cbiAgICBpZiAoc2V0dGluZ3MuZmxlcW4pIHtcbiAgICAgIGNsYXNzZXMucHVzaChcImZsZXFuXCIpO1xuICAgIH1cblxuICAgIG5vZGUgPSBidWlsZENvbW1vbi5tYWtlU3BhbihjbGFzc2VzLCBbbm9kZV0pO1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59O1xuXG52YXIgYnVpbGRUcmVlX2J1aWxkVHJlZSA9IGZ1bmN0aW9uIGJ1aWxkVHJlZSh0cmVlLCBleHByZXNzaW9uLCBzZXR0aW5ncykge1xuICB2YXIgb3B0aW9ucyA9IGJ1aWxkVHJlZV9vcHRpb25zRnJvbVNldHRpbmdzKHNldHRpbmdzKTtcbiAgdmFyIG1hdGhNTE5vZGUgPSBidWlsZE1hdGhNTCh0cmVlLCBleHByZXNzaW9uLCBvcHRpb25zKTtcbiAgdmFyIGh0bWxOb2RlID0gYnVpbGRIVE1MKHRyZWUsIG9wdGlvbnMpO1xuICB2YXIga2F0ZXhOb2RlID0gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wia2F0ZXhcIl0sIFttYXRoTUxOb2RlLCBodG1sTm9kZV0pO1xuICByZXR1cm4gYnVpbGRUcmVlX2Rpc3BsYXlXcmFwKGthdGV4Tm9kZSwgc2V0dGluZ3MpO1xufTtcbnZhciBidWlsZFRyZWVfYnVpbGRIVE1MVHJlZSA9IGZ1bmN0aW9uIGJ1aWxkSFRNTFRyZWUodHJlZSwgZXhwcmVzc2lvbiwgc2V0dGluZ3MpIHtcbiAgdmFyIG9wdGlvbnMgPSBidWlsZFRyZWVfb3B0aW9uc0Zyb21TZXR0aW5ncyhzZXR0aW5ncyk7XG4gIHZhciBodG1sTm9kZSA9IGJ1aWxkSFRNTCh0cmVlLCBvcHRpb25zKTtcbiAgdmFyIGthdGV4Tm9kZSA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcImthdGV4XCJdLCBbaHRtbE5vZGVdKTtcbiAgcmV0dXJuIGJ1aWxkVHJlZV9kaXNwbGF5V3JhcChrYXRleE5vZGUsIHNldHRpbmdzKTtcbn07XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBzcmNfYnVpbGRUcmVlID0gKGJ1aWxkVHJlZV9idWlsZFRyZWUpO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvc3RyZXRjaHkuanNcbi8qKlxuICogVGhpcyBmaWxlIHByb3ZpZGVzIHN1cHBvcnQgdG8gYnVpbGRNYXRoTUwuanMgYW5kIGJ1aWxkSFRNTC5qc1xuICogZm9yIHN0cmV0Y2h5IHdpZGUgZWxlbWVudHMgcmVuZGVyZWQgZnJvbSBTVkcgZmlsZXNcbiAqIGFuZCBvdGhlciBDU1MgdHJpY2tlcnkuXG4gKi9cblxuXG5cblxudmFyIHN0cmV0Y2h5Q29kZVBvaW50ID0ge1xuICB3aWRlaGF0OiBcIl5cIixcbiAgd2lkZWNoZWNrOiBcIsuHXCIsXG4gIHdpZGV0aWxkZTogXCJ+XCIsXG4gIHV0aWxkZTogXCJ+XCIsXG4gIG92ZXJsZWZ0YXJyb3c6IFwiXFx1MjE5MFwiLFxuICB1bmRlcmxlZnRhcnJvdzogXCJcXHUyMTkwXCIsXG4gIHhsZWZ0YXJyb3c6IFwiXFx1MjE5MFwiLFxuICBvdmVycmlnaHRhcnJvdzogXCJcXHUyMTkyXCIsXG4gIHVuZGVycmlnaHRhcnJvdzogXCJcXHUyMTkyXCIsXG4gIHhyaWdodGFycm93OiBcIlxcdTIxOTJcIixcbiAgdW5kZXJicmFjZTogXCJcXHUyM0RGXCIsXG4gIG92ZXJicmFjZTogXCJcXHUyM0RFXCIsXG4gIG92ZXJncm91cDogXCJcXHUyM0UwXCIsXG4gIHVuZGVyZ3JvdXA6IFwiXFx1MjNFMVwiLFxuICBvdmVybGVmdHJpZ2h0YXJyb3c6IFwiXFx1MjE5NFwiLFxuICB1bmRlcmxlZnRyaWdodGFycm93OiBcIlxcdTIxOTRcIixcbiAgeGxlZnRyaWdodGFycm93OiBcIlxcdTIxOTRcIixcbiAgT3ZlcnJpZ2h0YXJyb3c6IFwiXFx1MjFEMlwiLFxuICB4UmlnaHRhcnJvdzogXCJcXHUyMUQyXCIsXG4gIG92ZXJsZWZ0aGFycG9vbjogXCJcXHUyMUJDXCIsXG4gIHhsZWZ0aGFycG9vbnVwOiBcIlxcdTIxQkNcIixcbiAgb3ZlcnJpZ2h0aGFycG9vbjogXCJcXHUyMUMwXCIsXG4gIHhyaWdodGhhcnBvb251cDogXCJcXHUyMUMwXCIsXG4gIHhMZWZ0YXJyb3c6IFwiXFx1MjFEMFwiLFxuICB4TGVmdHJpZ2h0YXJyb3c6IFwiXFx1MjFENFwiLFxuICB4aG9va2xlZnRhcnJvdzogXCJcXHUyMUE5XCIsXG4gIHhob29rcmlnaHRhcnJvdzogXCJcXHUyMUFBXCIsXG4gIHhtYXBzdG86IFwiXFx1MjFBNlwiLFxuICB4cmlnaHRoYXJwb29uZG93bjogXCJcXHUyMUMxXCIsXG4gIHhsZWZ0aGFycG9vbmRvd246IFwiXFx1MjFCRFwiLFxuICB4cmlnaHRsZWZ0aGFycG9vbnM6IFwiXFx1MjFDQ1wiLFxuICB4bGVmdHJpZ2h0aGFycG9vbnM6IFwiXFx1MjFDQlwiLFxuICB4dHdvaGVhZGxlZnRhcnJvdzogXCJcXHUyMTlFXCIsXG4gIHh0d29oZWFkcmlnaHRhcnJvdzogXCJcXHUyMUEwXCIsXG4gIHhsb25nZXF1YWw6IFwiPVwiLFxuICB4dG9mcm9tOiBcIlxcdTIxQzRcIixcbiAgeHJpZ2h0bGVmdGFycm93czogXCJcXHUyMUM0XCIsXG4gIHhyaWdodGVxdWlsaWJyaXVtOiBcIlxcdTIxQ0NcIixcbiAgLy8gTm90IGEgcGVyZmVjdCBtYXRjaC5cbiAgeGxlZnRlcXVpbGlicml1bTogXCJcXHUyMUNCXCIgLy8gTm9uZSBiZXR0ZXIgYXZhaWxhYmxlLlxuXG59O1xuXG52YXIgc3RyZXRjaHlfbWF0aE1Mbm9kZSA9IGZ1bmN0aW9uIG1hdGhNTG5vZGUobGFiZWwpIHtcbiAgdmFyIG5vZGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1vXCIsIFtuZXcgbWF0aE1MVHJlZS5UZXh0Tm9kZShzdHJldGNoeUNvZGVQb2ludFtsYWJlbC5zdWJzdHIoMSldKV0pO1xuICBub2RlLnNldEF0dHJpYnV0ZShcInN0cmV0Y2h5XCIsIFwidHJ1ZVwiKTtcbiAgcmV0dXJuIG5vZGU7XG59OyAvLyBNYW55IG9mIHRoZSBLYVRlWCBTVkcgaW1hZ2VzIGhhdmUgYmVlbiBhZGFwdGVkIGZyb20gZ2x5cGhzIGluIEthVGVYIGZvbnRzLlxuLy8gQ29weXJpZ2h0IChjKSAyMDA5LTIwMTAsIERlc2lnbiBTY2llbmNlLCBJbmMuICg8d3d3Lm1hdGhqYXgub3JnPilcbi8vIENvcHlyaWdodCAoYykgMjAxNC0yMDE3IEtoYW4gQWNhZGVteSAoPHd3dy5raGFuYWNhZGVteS5vcmc+KVxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIFNJTCBPcGVuIEZvbnQgTGljZW5zZSwgVmVyc2lvbiAxLjEuXG4vLyBTZWUgXFxuaHR0cDovL3NjcmlwdHMuc2lsLm9yZy9PRkxcbi8vIFZlcnkgTG9uZyBTVkdzXG4vLyAgICBNYW55IG9mIHRoZSBLYVRlWCBzdHJldGNoeSB3aWRlIGVsZW1lbnRzIHVzZSBhIGxvbmcgU1ZHIGltYWdlIGFuZCBhblxuLy8gICAgb3ZlcmZsb3c6IGhpZGRlbiB0YWN0aWMgdG8gYWNoaWV2ZSBhIHN0cmV0Y2h5IGltYWdlIHdoaWxlIGF2b2lkaW5nXG4vLyAgICBkaXN0b3J0aW9uIG9mIGFycm93aGVhZHMgb3IgYnJhY2UgY29ybmVycy5cbi8vICAgIFRoZSBTVkcgdHlwaWNhbGx5IGNvbnRhaW5zIGEgdmVyeSBsb25nICg0MDAgZW0pIGFycm93LlxuLy8gICAgVGhlIFNWRyBpcyBpbiBhIGNvbnRhaW5lciBzcGFuIHRoYXQgaGFzIG92ZXJmbG93OiBoaWRkZW4sIHNvIHRoZSBzcGFuXG4vLyAgICBhY3RzIGxpa2UgYSB3aW5kb3cgdGhhdCBleHBvc2VzIG9ubHkgcGFydCBvZiB0aGUgIFNWRy5cbi8vICAgIFRoZSBTVkcgYWx3YXlzIGhhcyBhIGxvbmdlciwgdGhpbm5lciBhc3BlY3QgcmF0aW8gdGhhbiB0aGUgY29udGFpbmVyIHNwYW4uXG4vLyAgICBBZnRlciB0aGUgU1ZHIGZpbGxzIDEwMCUgb2YgdGhlIGhlaWdodCBvZiB0aGUgY29udGFpbmVyIHNwYW4sXG4vLyAgICB0aGVyZSBpcyBhIGxvbmcgYXJyb3cgc2hhZnQgbGVmdCBvdmVyLiBUaGF0IGxlZnQtb3ZlciBzaGFmdCBpcyBub3Qgc2hvd24uXG4vLyAgICBJbnN0ZWFkLCBpdCBpcyBzbGljZWQgb2ZmIGJlY2F1c2UgdGhlIHNwYW4ncyBDU1MgaGFzIG92ZXJmbG93OiBoaWRkZW4uXG4vLyAgICBUaHVzLCB0aGUgcmVhZGVyIHNlZXMgYW4gYXJyb3cgdGhhdCBtYXRjaGVzIHRoZSBzdWJqZWN0IG1hdHRlciB3aWR0aFxuLy8gICAgd2l0aG91dCBkaXN0b3J0aW9uLlxuLy8gICAgU29tZSBmdW5jdGlvbnMsIHN1Y2ggYXMgXFxjYW5jZWwsIG5lZWQgdG8gdmFyeSB0aGVpciBhc3BlY3QgcmF0aW8uIFRoZXNlXG4vLyAgICBmdW5jdGlvbnMgZG8gbm90IGdldCB0aGUgb3ZlcmZsb3cgU1ZHIHRyZWF0bWVudC5cbi8vIFNlY29uZCBCcnVzaCBTdHJva2Vcbi8vICAgIExvdyByZXNvbHV0aW9uIG1vbml0b3JzIHN0cnVnZ2xlIHRvIGRpc3BsYXkgaW1hZ2VzIGluIGZpbmUgZGV0YWlsLlxuLy8gICAgU28gYnJvd3NlcnMgYXBwbHkgYW50aS1hbGlhc2luZy4gQSBsb25nIHN0cmFpZ2h0IGFycm93IHNoYWZ0IHRoZXJlZm9yZVxuLy8gICAgd2lsbCBzb21ldGltZXMgYXBwZWFyIGFzIGlmIGl0IGhhcyBhIGJsdXJyZWQgZWRnZS5cbi8vICAgIFRvIG1pdGlnYXRlIHRoaXMsIHRoZXNlIFNWRyBmaWxlcyBjb250YWluIGEgc2Vjb25kIFwiYnJ1c2gtc3Ryb2tlXCIgb24gdGhlXG4vLyAgICBhcnJvdyBzaGFmdHMuIFRoYXQgaXMsIGEgc2Vjb25kIGxvbmcgdGhpbiByZWN0YW5ndWxhciBTVkcgcGF0aCBoYXMgYmVlblxuLy8gICAgd3JpdHRlbiBkaXJlY3RseSBvbiB0b3Agb2YgZWFjaCBhcnJvdyBzaGFmdC4gVGhpcyByZWluZm9yY2VtZW50IGNhdXNlc1xuLy8gICAgc29tZSBvZiB0aGUgc2NyZWVuIHBpeGVscyB0byBkaXNwbGF5IGFzIGJsYWNrIGluc3RlYWQgb2YgdGhlIGFudGktYWxpYXNlZFxuLy8gICAgZ3JheSBwaXhlbCB0aGF0IGEgIHNpbmdsZSBwYXRoIHdvdWxkIGdlbmVyYXRlLiBTbyB3ZSBnZXQgYXJyb3cgc2hhZnRzXG4vLyAgICB3aG9zZSBlZGdlcyBhcHBlYXIgdG8gYmUgc2hhcnBlci5cbi8vIEluIHRoZSBrYXRleEltYWdlc0RhdGEgb2JqZWN0IGp1c3QgYmVsb3csIHRoZSBkaW1lbnNpb25zIGFsbFxuLy8gY29ycmVzcG9uZCB0byBwYXRoIGdlb21ldHJ5IGluc2lkZSB0aGUgcmVsZXZhbnQgU1ZHLlxuLy8gRm9yIGV4YW1wbGUsIFxcb3ZlcnJpZ2h0YXJyb3cgdXNlcyB0aGUgc2FtZSBhcnJvd2hlYWQgYXMgZ2x5cGggVSsyMTkyXG4vLyBmcm9tIHRoZSBLYVRlWCBNYWluIGZvbnQuIFRoZSBzY2FsaW5nIGZhY3RvciBpcyAxMDAwLlxuLy8gVGhhdCBpcywgaW5zaWRlIHRoZSBmb250LCB0aGF0IGFycm93aGVhZCBpcyA1MjIgdW5pdHMgdGFsbCwgd2hpY2hcbi8vIGNvcnJlc3BvbmRzIHRvIDAuNTIyIGVtIGluc2lkZSB0aGUgZG9jdW1lbnQuXG5cblxudmFyIGthdGV4SW1hZ2VzRGF0YSA9IHtcbiAgLy8gICBwYXRoKHMpLCBtaW5XaWR0aCwgaGVpZ2h0LCBhbGlnblxuICBvdmVycmlnaHRhcnJvdzogW1tcInJpZ2h0YXJyb3dcIl0sIDAuODg4LCA1MjIsIFwieE1heFlNaW5cIl0sXG4gIG92ZXJsZWZ0YXJyb3c6IFtbXCJsZWZ0YXJyb3dcIl0sIDAuODg4LCA1MjIsIFwieE1pbllNaW5cIl0sXG4gIHVuZGVycmlnaHRhcnJvdzogW1tcInJpZ2h0YXJyb3dcIl0sIDAuODg4LCA1MjIsIFwieE1heFlNaW5cIl0sXG4gIHVuZGVybGVmdGFycm93OiBbW1wibGVmdGFycm93XCJdLCAwLjg4OCwgNTIyLCBcInhNaW5ZTWluXCJdLFxuICB4cmlnaHRhcnJvdzogW1tcInJpZ2h0YXJyb3dcIl0sIDEuNDY5LCA1MjIsIFwieE1heFlNaW5cIl0sXG4gIHhsZWZ0YXJyb3c6IFtbXCJsZWZ0YXJyb3dcIl0sIDEuNDY5LCA1MjIsIFwieE1pbllNaW5cIl0sXG4gIE92ZXJyaWdodGFycm93OiBbW1wiZG91YmxlcmlnaHRhcnJvd1wiXSwgMC44ODgsIDU2MCwgXCJ4TWF4WU1pblwiXSxcbiAgeFJpZ2h0YXJyb3c6IFtbXCJkb3VibGVyaWdodGFycm93XCJdLCAxLjUyNiwgNTYwLCBcInhNYXhZTWluXCJdLFxuICB4TGVmdGFycm93OiBbW1wiZG91YmxlbGVmdGFycm93XCJdLCAxLjUyNiwgNTYwLCBcInhNaW5ZTWluXCJdLFxuICBvdmVybGVmdGhhcnBvb246IFtbXCJsZWZ0aGFycG9vblwiXSwgMC44ODgsIDUyMiwgXCJ4TWluWU1pblwiXSxcbiAgeGxlZnRoYXJwb29udXA6IFtbXCJsZWZ0aGFycG9vblwiXSwgMC44ODgsIDUyMiwgXCJ4TWluWU1pblwiXSxcbiAgeGxlZnRoYXJwb29uZG93bjogW1tcImxlZnRoYXJwb29uZG93blwiXSwgMC44ODgsIDUyMiwgXCJ4TWluWU1pblwiXSxcbiAgb3ZlcnJpZ2h0aGFycG9vbjogW1tcInJpZ2h0aGFycG9vblwiXSwgMC44ODgsIDUyMiwgXCJ4TWF4WU1pblwiXSxcbiAgeHJpZ2h0aGFycG9vbnVwOiBbW1wicmlnaHRoYXJwb29uXCJdLCAwLjg4OCwgNTIyLCBcInhNYXhZTWluXCJdLFxuICB4cmlnaHRoYXJwb29uZG93bjogW1tcInJpZ2h0aGFycG9vbmRvd25cIl0sIDAuODg4LCA1MjIsIFwieE1heFlNaW5cIl0sXG4gIHhsb25nZXF1YWw6IFtbXCJsb25nZXF1YWxcIl0sIDAuODg4LCAzMzQsIFwieE1pbllNaW5cIl0sXG4gIHh0d29oZWFkbGVmdGFycm93OiBbW1widHdvaGVhZGxlZnRhcnJvd1wiXSwgMC44ODgsIDMzNCwgXCJ4TWluWU1pblwiXSxcbiAgeHR3b2hlYWRyaWdodGFycm93OiBbW1widHdvaGVhZHJpZ2h0YXJyb3dcIl0sIDAuODg4LCAzMzQsIFwieE1heFlNaW5cIl0sXG4gIG92ZXJsZWZ0cmlnaHRhcnJvdzogW1tcImxlZnRhcnJvd1wiLCBcInJpZ2h0YXJyb3dcIl0sIDAuODg4LCA1MjJdLFxuICBvdmVyYnJhY2U6IFtbXCJsZWZ0YnJhY2VcIiwgXCJtaWRicmFjZVwiLCBcInJpZ2h0YnJhY2VcIl0sIDEuNiwgNTQ4XSxcbiAgdW5kZXJicmFjZTogW1tcImxlZnRicmFjZXVuZGVyXCIsIFwibWlkYnJhY2V1bmRlclwiLCBcInJpZ2h0YnJhY2V1bmRlclwiXSwgMS42LCA1NDhdLFxuICB1bmRlcmxlZnRyaWdodGFycm93OiBbW1wibGVmdGFycm93XCIsIFwicmlnaHRhcnJvd1wiXSwgMC44ODgsIDUyMl0sXG4gIHhsZWZ0cmlnaHRhcnJvdzogW1tcImxlZnRhcnJvd1wiLCBcInJpZ2h0YXJyb3dcIl0sIDEuNzUsIDUyMl0sXG4gIHhMZWZ0cmlnaHRhcnJvdzogW1tcImRvdWJsZWxlZnRhcnJvd1wiLCBcImRvdWJsZXJpZ2h0YXJyb3dcIl0sIDEuNzUsIDU2MF0sXG4gIHhyaWdodGxlZnRoYXJwb29uczogW1tcImxlZnRoYXJwb29uZG93bnBsdXNcIiwgXCJyaWdodGhhcnBvb25wbHVzXCJdLCAxLjc1LCA3MTZdLFxuICB4bGVmdHJpZ2h0aGFycG9vbnM6IFtbXCJsZWZ0aGFycG9vbnBsdXNcIiwgXCJyaWdodGhhcnBvb25kb3ducGx1c1wiXSwgMS43NSwgNzE2XSxcbiAgeGhvb2tsZWZ0YXJyb3c6IFtbXCJsZWZ0YXJyb3dcIiwgXCJyaWdodGhvb2tcIl0sIDEuMDgsIDUyMl0sXG4gIHhob29rcmlnaHRhcnJvdzogW1tcImxlZnRob29rXCIsIFwicmlnaHRhcnJvd1wiXSwgMS4wOCwgNTIyXSxcbiAgb3ZlcmxpbmVzZWdtZW50OiBbW1wibGVmdGxpbmVzZWdtZW50XCIsIFwicmlnaHRsaW5lc2VnbWVudFwiXSwgMC44ODgsIDUyMl0sXG4gIHVuZGVybGluZXNlZ21lbnQ6IFtbXCJsZWZ0bGluZXNlZ21lbnRcIiwgXCJyaWdodGxpbmVzZWdtZW50XCJdLCAwLjg4OCwgNTIyXSxcbiAgb3Zlcmdyb3VwOiBbW1wibGVmdGdyb3VwXCIsIFwicmlnaHRncm91cFwiXSwgMC44ODgsIDM0Ml0sXG4gIHVuZGVyZ3JvdXA6IFtbXCJsZWZ0Z3JvdXB1bmRlclwiLCBcInJpZ2h0Z3JvdXB1bmRlclwiXSwgMC44ODgsIDM0Ml0sXG4gIHhtYXBzdG86IFtbXCJsZWZ0bWFwc3RvXCIsIFwicmlnaHRhcnJvd1wiXSwgMS41LCA1MjJdLFxuICB4dG9mcm9tOiBbW1wibGVmdFRvRnJvbVwiLCBcInJpZ2h0VG9Gcm9tXCJdLCAxLjc1LCA1MjhdLFxuICAvLyBUaGUgbmV4dCB0aHJlZSBhcnJvd3MgYXJlIGZyb20gdGhlIG1oY2hlbSBwYWNrYWdlLlxuICAvLyBJbiBtaGNoZW0uc3R5LCBtaW4tbGVuZ3RoIGlzIDIuMGVtLiBCdXQgdGhlc2UgYXJyb3dzIG1pZ2h0IGFwcGVhciBpbiB0aGVcbiAgLy8gZG9jdW1lbnQgYXMgXFx4cmlnaHRhcnJvdyBvciBcXHhyaWdodGxlZnRoYXJwb29ucy4gVGhvc2UgaGF2ZVxuICAvLyBtaW4tbGVuZ3RoID0gMS43NWVtLCBzbyB3ZSBzZXQgbWluLWxlbmd0aCBvbiB0aGVzZSBuZXh0IHRocmVlIHRvIG1hdGNoLlxuICB4cmlnaHRsZWZ0YXJyb3dzOiBbW1wiYmFyYWJvdmVsZWZ0YXJyb3dcIiwgXCJyaWdodGFycm93YWJvdmViYXJcIl0sIDEuNzUsIDkwMV0sXG4gIHhyaWdodGVxdWlsaWJyaXVtOiBbW1wiYmFyYWJvdmVzaG9ydGxlZnRoYXJwb29uXCIsIFwicmlnaHRoYXJwb29uYWJvdmVzaG9ydGJhclwiXSwgMS43NSwgNzE2XSxcbiAgeGxlZnRlcXVpbGlicml1bTogW1tcInNob3J0YmFyYWJvdmVsZWZ0aGFycG9vblwiLCBcInNob3J0cmlnaHRoYXJwb29uYWJvdmViYXJcIl0sIDEuNzUsIDcxNl1cbn07XG5cbnZhciBncm91cExlbmd0aCA9IGZ1bmN0aW9uIGdyb3VwTGVuZ3RoKGFyZykge1xuICBpZiAoYXJnLnR5cGUgPT09IFwib3JkZ3JvdXBcIikge1xuICAgIHJldHVybiBhcmcuYm9keS5sZW5ndGg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbn07XG5cbnZhciBzdHJldGNoeV9zdmdTcGFuID0gZnVuY3Rpb24gc3ZnU3Bhbihncm91cCwgb3B0aW9ucykge1xuICAvLyBDcmVhdGUgYSBzcGFuIHdpdGggaW5saW5lIFNWRyBmb3IgdGhlIGVsZW1lbnQuXG4gIGZ1bmN0aW9uIGJ1aWxkU3ZnU3Bhbl8oKSB7XG4gICAgdmFyIHZpZXdCb3hXaWR0aCA9IDQwMDAwMDsgLy8gZGVmYXVsdFxuXG4gICAgdmFyIGxhYmVsID0gZ3JvdXAubGFiZWwuc3Vic3RyKDEpO1xuXG4gICAgaWYgKHV0aWxzLmNvbnRhaW5zKFtcIndpZGVoYXRcIiwgXCJ3aWRlY2hlY2tcIiwgXCJ3aWRldGlsZGVcIiwgXCJ1dGlsZGVcIl0sIGxhYmVsKSkge1xuICAgICAgLy8gRWFjaCB0eXBlIGluIHRoZSBgaWZgIHN0YXRlbWVudCBjb3JyZXNwb25kcyB0byBvbmUgb2YgdGhlIFBhcnNlTm9kZVxuICAgICAgLy8gdHlwZXMgYmVsb3cuIFRoaXMgbmFycm93aW5nIGlzIHJlcXVpcmVkIHRvIGFjY2VzcyBgZ3JwLmJhc2VgLlxuICAgICAgdmFyIGdycCA9IGdyb3VwOyAvLyBUaGVyZSBhcmUgZm91ciBTVkcgaW1hZ2VzIGF2YWlsYWJsZSBmb3IgZWFjaCBmdW5jdGlvbi5cbiAgICAgIC8vIENob29zZSBhIHRhbGxlciBpbWFnZSB3aGVuIHRoZXJlIGFyZSBtb3JlIGNoYXJhY3RlcnMuXG5cbiAgICAgIHZhciBudW1DaGFycyA9IGdyb3VwTGVuZ3RoKGdycC5iYXNlKTtcbiAgICAgIHZhciB2aWV3Qm94SGVpZ2h0O1xuICAgICAgdmFyIHBhdGhOYW1lO1xuXG4gICAgICB2YXIgX2hlaWdodDtcblxuICAgICAgaWYgKG51bUNoYXJzID4gNSkge1xuICAgICAgICBpZiAobGFiZWwgPT09IFwid2lkZWhhdFwiIHx8IGxhYmVsID09PSBcIndpZGVjaGVja1wiKSB7XG4gICAgICAgICAgdmlld0JveEhlaWdodCA9IDQyMDtcbiAgICAgICAgICB2aWV3Qm94V2lkdGggPSAyMzY0O1xuICAgICAgICAgIF9oZWlnaHQgPSAwLjQyO1xuICAgICAgICAgIHBhdGhOYW1lID0gbGFiZWwgKyBcIjRcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2aWV3Qm94SGVpZ2h0ID0gMzEyO1xuICAgICAgICAgIHZpZXdCb3hXaWR0aCA9IDIzNDA7XG4gICAgICAgICAgX2hlaWdodCA9IDAuMzQ7XG4gICAgICAgICAgcGF0aE5hbWUgPSBcInRpbGRlNFwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaW1nSW5kZXggPSBbMSwgMSwgMiwgMiwgMywgM11bbnVtQ2hhcnNdO1xuXG4gICAgICAgIGlmIChsYWJlbCA9PT0gXCJ3aWRlaGF0XCIgfHwgbGFiZWwgPT09IFwid2lkZWNoZWNrXCIpIHtcbiAgICAgICAgICB2aWV3Qm94V2lkdGggPSBbMCwgMTA2MiwgMjM2NCwgMjM2NCwgMjM2NF1baW1nSW5kZXhdO1xuICAgICAgICAgIHZpZXdCb3hIZWlnaHQgPSBbMCwgMjM5LCAzMDAsIDM2MCwgNDIwXVtpbWdJbmRleF07XG4gICAgICAgICAgX2hlaWdodCA9IFswLCAwLjI0LCAwLjMsIDAuMywgMC4zNiwgMC40Ml1baW1nSW5kZXhdO1xuICAgICAgICAgIHBhdGhOYW1lID0gbGFiZWwgKyBpbWdJbmRleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2aWV3Qm94V2lkdGggPSBbMCwgNjAwLCAxMDMzLCAyMzM5LCAyMzQwXVtpbWdJbmRleF07XG4gICAgICAgICAgdmlld0JveEhlaWdodCA9IFswLCAyNjAsIDI4NiwgMzA2LCAzMTJdW2ltZ0luZGV4XTtcbiAgICAgICAgICBfaGVpZ2h0ID0gWzAsIDAuMjYsIDAuMjg2LCAwLjMsIDAuMzA2LCAwLjM0XVtpbWdJbmRleF07XG4gICAgICAgICAgcGF0aE5hbWUgPSBcInRpbGRlXCIgKyBpbWdJbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgcGF0aCA9IG5ldyBkb21UcmVlX1BhdGhOb2RlKHBhdGhOYW1lKTtcbiAgICAgIHZhciBzdmdOb2RlID0gbmV3IFN2Z05vZGUoW3BhdGhdLCB7XG4gICAgICAgIFwid2lkdGhcIjogXCIxMDAlXCIsXG4gICAgICAgIFwiaGVpZ2h0XCI6IF9oZWlnaHQgKyBcImVtXCIsXG4gICAgICAgIFwidmlld0JveFwiOiBcIjAgMCBcIiArIHZpZXdCb3hXaWR0aCArIFwiIFwiICsgdmlld0JveEhlaWdodCxcbiAgICAgICAgXCJwcmVzZXJ2ZUFzcGVjdFJhdGlvXCI6IFwibm9uZVwiXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNwYW46IGJ1aWxkQ29tbW9uLm1ha2VTdmdTcGFuKFtdLCBbc3ZnTm9kZV0sIG9wdGlvbnMpLFxuICAgICAgICBtaW5XaWR0aDogMCxcbiAgICAgICAgaGVpZ2h0OiBfaGVpZ2h0XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc3BhbnMgPSBbXTtcbiAgICAgIHZhciBkYXRhID0ga2F0ZXhJbWFnZXNEYXRhW2xhYmVsXTtcbiAgICAgIHZhciBwYXRocyA9IGRhdGFbMF0sXG4gICAgICAgICAgX21pbldpZHRoID0gZGF0YVsxXSxcbiAgICAgICAgICBfdmlld0JveEhlaWdodCA9IGRhdGFbMl07XG5cbiAgICAgIHZhciBfaGVpZ2h0MiA9IF92aWV3Qm94SGVpZ2h0IC8gMTAwMDtcblxuICAgICAgdmFyIG51bVN2Z0NoaWxkcmVuID0gcGF0aHMubGVuZ3RoO1xuICAgICAgdmFyIHdpZHRoQ2xhc3NlcztcbiAgICAgIHZhciBhbGlnbnM7XG5cbiAgICAgIGlmIChudW1TdmdDaGlsZHJlbiA9PT0gMSkge1xuICAgICAgICAvLyAkRmxvd0ZpeE1lOiBBbGwgdGhlc2UgY2FzZXMgbXVzdCBiZSBvZiB0aGUgNC10dXBsZSB0eXBlLlxuICAgICAgICB2YXIgYWxpZ24xID0gZGF0YVszXTtcbiAgICAgICAgd2lkdGhDbGFzc2VzID0gW1wiaGlkZS10YWlsXCJdO1xuICAgICAgICBhbGlnbnMgPSBbYWxpZ24xXTtcbiAgICAgIH0gZWxzZSBpZiAobnVtU3ZnQ2hpbGRyZW4gPT09IDIpIHtcbiAgICAgICAgd2lkdGhDbGFzc2VzID0gW1wiaGFsZmFycm93LWxlZnRcIiwgXCJoYWxmYXJyb3ctcmlnaHRcIl07XG4gICAgICAgIGFsaWducyA9IFtcInhNaW5ZTWluXCIsIFwieE1heFlNaW5cIl07XG4gICAgICB9IGVsc2UgaWYgKG51bVN2Z0NoaWxkcmVuID09PSAzKSB7XG4gICAgICAgIHdpZHRoQ2xhc3NlcyA9IFtcImJyYWNlLWxlZnRcIiwgXCJicmFjZS1jZW50ZXJcIiwgXCJicmFjZS1yaWdodFwiXTtcbiAgICAgICAgYWxpZ25zID0gW1wieE1pbllNaW5cIiwgXCJ4TWlkWU1pblwiLCBcInhNYXhZTWluXCJdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29ycmVjdCBrYXRleEltYWdlc0RhdGEgb3IgdXBkYXRlIGNvZGUgaGVyZSB0byBzdXBwb3J0XFxuICAgICAgICAgICAgICAgICAgICBcIiArIG51bVN2Z0NoaWxkcmVuICsgXCIgY2hpbGRyZW4uXCIpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bVN2Z0NoaWxkcmVuOyBpKyspIHtcbiAgICAgICAgdmFyIF9wYXRoID0gbmV3IGRvbVRyZWVfUGF0aE5vZGUocGF0aHNbaV0pO1xuXG4gICAgICAgIHZhciBfc3ZnTm9kZSA9IG5ldyBTdmdOb2RlKFtfcGF0aF0sIHtcbiAgICAgICAgICBcIndpZHRoXCI6IFwiNDAwZW1cIixcbiAgICAgICAgICBcImhlaWdodFwiOiBfaGVpZ2h0MiArIFwiZW1cIixcbiAgICAgICAgICBcInZpZXdCb3hcIjogXCIwIDAgXCIgKyB2aWV3Qm94V2lkdGggKyBcIiBcIiArIF92aWV3Qm94SGVpZ2h0LFxuICAgICAgICAgIFwicHJlc2VydmVBc3BlY3RSYXRpb1wiOiBhbGlnbnNbaV0gKyBcIiBzbGljZVwiXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBfc3BhbiA9IGJ1aWxkQ29tbW9uLm1ha2VTdmdTcGFuKFt3aWR0aENsYXNzZXNbaV1dLCBbX3N2Z05vZGVdLCBvcHRpb25zKTtcblxuICAgICAgICBpZiAobnVtU3ZnQ2hpbGRyZW4gPT09IDEpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3BhbjogX3NwYW4sXG4gICAgICAgICAgICBtaW5XaWR0aDogX21pbldpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBfaGVpZ2h0MlxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3NwYW4uc3R5bGUuaGVpZ2h0ID0gX2hlaWdodDIgKyBcImVtXCI7XG4gICAgICAgICAgc3BhbnMucHVzaChfc3Bhbik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3BhbjogYnVpbGRDb21tb24ubWFrZVNwYW4oW1wic3RyZXRjaHlcIl0sIHNwYW5zLCBvcHRpb25zKSxcbiAgICAgICAgbWluV2lkdGg6IF9taW5XaWR0aCxcbiAgICAgICAgaGVpZ2h0OiBfaGVpZ2h0MlxuICAgICAgfTtcbiAgICB9XG4gIH0gLy8gYnVpbGRTdmdTcGFuXygpXG5cblxuICB2YXIgX2J1aWxkU3ZnU3Bhbl8gPSBidWlsZFN2Z1NwYW5fKCksXG4gICAgICBzcGFuID0gX2J1aWxkU3ZnU3Bhbl8uc3BhbixcbiAgICAgIG1pbldpZHRoID0gX2J1aWxkU3ZnU3Bhbl8ubWluV2lkdGgsXG4gICAgICBoZWlnaHQgPSBfYnVpbGRTdmdTcGFuXy5oZWlnaHQ7IC8vIE5vdGUgdGhhdCB3ZSBhcmUgcmV0dXJuaW5nIHNwYW4uZGVwdGggPSAwLlxuICAvLyBBbnkgYWRqdXN0bWVudHMgcmVsYXRpdmUgdG8gdGhlIGJhc2VsaW5lIG11c3QgYmUgZG9uZSBpbiBidWlsZEhUTUwuXG5cblxuICBzcGFuLmhlaWdodCA9IGhlaWdodDtcbiAgc3Bhbi5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyBcImVtXCI7XG5cbiAgaWYgKG1pbldpZHRoID4gMCkge1xuICAgIHNwYW4uc3R5bGUubWluV2lkdGggPSBtaW5XaWR0aCArIFwiZW1cIjtcbiAgfVxuXG4gIHJldHVybiBzcGFuO1xufTtcblxudmFyIHN0cmV0Y2h5X2VuY2xvc2VTcGFuID0gZnVuY3Rpb24gZW5jbG9zZVNwYW4oaW5uZXIsIGxhYmVsLCBwYWQsIG9wdGlvbnMpIHtcbiAgLy8gUmV0dXJuIGFuIGltYWdlIHNwYW4gZm9yIFxcY2FuY2VsLCBcXGJjYW5jZWwsIFxceGNhbmNlbCwgb3IgXFxmYm94XG4gIHZhciBpbWc7XG4gIHZhciB0b3RhbEhlaWdodCA9IGlubmVyLmhlaWdodCArIGlubmVyLmRlcHRoICsgMiAqIHBhZDtcblxuICBpZiAoL2Zib3h8Y29sb3IvLnRlc3QobGFiZWwpKSB7XG4gICAgaW1nID0gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wic3RyZXRjaHlcIiwgbGFiZWxdLCBbXSwgb3B0aW9ucyk7XG5cbiAgICBpZiAobGFiZWwgPT09IFwiZmJveFwiKSB7XG4gICAgICB2YXIgY29sb3IgPSBvcHRpb25zLmNvbG9yICYmIG9wdGlvbnMuZ2V0Q29sb3IoKTtcblxuICAgICAgaWYgKGNvbG9yKSB7XG4gICAgICAgIGltZy5zdHlsZS5ib3JkZXJDb2xvciA9IGNvbG9yO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBcXGNhbmNlbCwgXFxiY2FuY2VsLCBvciBcXHhjYW5jZWxcbiAgICAvLyBTaW5jZSBcXGNhbmNlbCdzIFNWRyBpcyBpbmxpbmUgYW5kIGl0IG9taXRzIHRoZSB2aWV3Qm94IGF0dHJpYnV0ZSxcbiAgICAvLyBpdHMgc3Ryb2tlLXdpZHRoIHdpbGwgbm90IHZhcnkgd2l0aCBzcGFuIGFyZWEuXG4gICAgdmFyIGxpbmVzID0gW107XG5cbiAgICBpZiAoL15bYnhdY2FuY2VsJC8udGVzdChsYWJlbCkpIHtcbiAgICAgIGxpbmVzLnB1c2gobmV3IExpbmVOb2RlKHtcbiAgICAgICAgXCJ4MVwiOiBcIjBcIixcbiAgICAgICAgXCJ5MVwiOiBcIjBcIixcbiAgICAgICAgXCJ4MlwiOiBcIjEwMCVcIixcbiAgICAgICAgXCJ5MlwiOiBcIjEwMCVcIixcbiAgICAgICAgXCJzdHJva2Utd2lkdGhcIjogXCIwLjA0NmVtXCJcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBpZiAoL154P2NhbmNlbCQvLnRlc3QobGFiZWwpKSB7XG4gICAgICBsaW5lcy5wdXNoKG5ldyBMaW5lTm9kZSh7XG4gICAgICAgIFwieDFcIjogXCIwXCIsXG4gICAgICAgIFwieTFcIjogXCIxMDAlXCIsXG4gICAgICAgIFwieDJcIjogXCIxMDAlXCIsXG4gICAgICAgIFwieTJcIjogXCIwXCIsXG4gICAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IFwiMC4wNDZlbVwiXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgdmFyIHN2Z05vZGUgPSBuZXcgU3ZnTm9kZShsaW5lcywge1xuICAgICAgXCJ3aWR0aFwiOiBcIjEwMCVcIixcbiAgICAgIFwiaGVpZ2h0XCI6IHRvdGFsSGVpZ2h0ICsgXCJlbVwiXG4gICAgfSk7XG4gICAgaW1nID0gYnVpbGRDb21tb24ubWFrZVN2Z1NwYW4oW10sIFtzdmdOb2RlXSwgb3B0aW9ucyk7XG4gIH1cblxuICBpbWcuaGVpZ2h0ID0gdG90YWxIZWlnaHQ7XG4gIGltZy5zdHlsZS5oZWlnaHQgPSB0b3RhbEhlaWdodCArIFwiZW1cIjtcbiAgcmV0dXJuIGltZztcbn07XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHN0cmV0Y2h5ID0gKHtcbiAgZW5jbG9zZVNwYW46IHN0cmV0Y2h5X2VuY2xvc2VTcGFuLFxuICBtYXRoTUxub2RlOiBzdHJldGNoeV9tYXRoTUxub2RlLFxuICBzdmdTcGFuOiBzdHJldGNoeV9zdmdTcGFuXG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2Z1bmN0aW9ucy9hY2NlbnQuanNcblxuXG5cblxuXG5cblxuXG5cbi8vIE5PVEU6IFVubGlrZSBtb3N0IGBodG1sQnVpbGRlcmBzLCB0aGlzIG9uZSBoYW5kbGVzIG5vdCBvbmx5IFwiYWNjZW50XCIsIGJ1dFxudmFyIGFjY2VudF9odG1sQnVpbGRlciA9IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdycCwgb3B0aW9ucykge1xuICAvLyBBY2NlbnRzIGFyZSBoYW5kbGVkIGluIHRoZSBUZVhib29rIHBnLiA0NDMsIHJ1bGUgMTIuXG4gIHZhciBiYXNlO1xuICB2YXIgZ3JvdXA7XG4gIHZhciBzdXBTdWIgPSBjaGVja05vZGVUeXBlKGdycCwgXCJzdXBzdWJcIik7XG4gIHZhciBzdXBTdWJHcm91cDtcblxuICBpZiAoc3VwU3ViKSB7XG4gICAgLy8gSWYgb3VyIGJhc2UgaXMgYSBjaGFyYWN0ZXIgYm94LCBhbmQgd2UgaGF2ZSBzdXBlcnNjcmlwdHMgYW5kXG4gICAgLy8gc3Vic2NyaXB0cywgdGhlIHN1cHN1YiB3aWxsIGRlZmVyIHRvIHVzLiBJbiBwYXJ0aWN1bGFyLCB3ZSB3YW50XG4gICAgLy8gdG8gYXR0YWNoIHRoZSBzdXBlcnNjcmlwdHMgYW5kIHN1YnNjcmlwdHMgdG8gdGhlIGlubmVyIGJvZHkgKHNvXG4gICAgLy8gdGhhdCB0aGUgcG9zaXRpb24gb2YgdGhlIHN1cGVyc2NyaXB0cyBhbmQgc3Vic2NyaXB0cyB3b24ndCBiZVxuICAgIC8vIGFmZmVjdGVkIGJ5IHRoZSBoZWlnaHQgb2YgdGhlIGFjY2VudCkuIFdlIGFjY29tcGxpc2ggdGhpcyBieVxuICAgIC8vIHN0aWNraW5nIHRoZSBiYXNlIG9mIHRoZSBhY2NlbnQgaW50byB0aGUgYmFzZSBvZiB0aGUgc3Vwc3ViLCBhbmRcbiAgICAvLyByZW5kZXJpbmcgdGhhdCwgd2hpbGUga2VlcGluZyB0cmFjayBvZiB3aGVyZSB0aGUgYWNjZW50IGlzLlxuICAgIC8vIFRoZSByZWFsIGFjY2VudCBncm91cCBpcyB0aGUgYmFzZSBvZiB0aGUgc3Vwc3ViIGdyb3VwXG4gICAgZ3JvdXAgPSBhc3NlcnROb2RlVHlwZShzdXBTdWIuYmFzZSwgXCJhY2NlbnRcIik7IC8vIFRoZSBjaGFyYWN0ZXIgYm94IGlzIHRoZSBiYXNlIG9mIHRoZSBhY2NlbnQgZ3JvdXBcblxuICAgIGJhc2UgPSBncm91cC5iYXNlOyAvLyBTdGljayB0aGUgY2hhcmFjdGVyIGJveCBpbnRvIHRoZSBiYXNlIG9mIHRoZSBzdXBzdWIgZ3JvdXBcblxuICAgIHN1cFN1Yi5iYXNlID0gYmFzZTsgLy8gUmVyZW5kZXIgdGhlIHN1cHN1YiBncm91cCB3aXRoIGl0cyBuZXcgYmFzZSwgYW5kIHN0b3JlIHRoYXRcbiAgICAvLyByZXN1bHQuXG5cbiAgICBzdXBTdWJHcm91cCA9IGFzc2VydFNwYW4oYnVpbGRIVE1MX2J1aWxkR3JvdXAoc3VwU3ViLCBvcHRpb25zKSk7IC8vIHJlc2V0IG9yaWdpbmFsIGJhc2VcblxuICAgIHN1cFN1Yi5iYXNlID0gZ3JvdXA7XG4gIH0gZWxzZSB7XG4gICAgZ3JvdXAgPSBhc3NlcnROb2RlVHlwZShncnAsIFwiYWNjZW50XCIpO1xuICAgIGJhc2UgPSBncm91cC5iYXNlO1xuICB9IC8vIEJ1aWxkIHRoZSBiYXNlIGdyb3VwXG5cblxuICB2YXIgYm9keSA9IGJ1aWxkSFRNTF9idWlsZEdyb3VwKGJhc2UsIG9wdGlvbnMuaGF2aW5nQ3JhbXBlZFN0eWxlKCkpOyAvLyBEb2VzIHRoZSBhY2NlbnQgbmVlZCB0byBzaGlmdCBmb3IgdGhlIHNrZXcgb2YgYSBjaGFyYWN0ZXI/XG5cbiAgdmFyIG11c3RTaGlmdCA9IGdyb3VwLmlzU2hpZnR5ICYmIHV0aWxzLmlzQ2hhcmFjdGVyQm94KGJhc2UpOyAvLyBDYWxjdWxhdGUgdGhlIHNrZXcgb2YgdGhlIGFjY2VudC4gVGhpcyBpcyBiYXNlZCBvbiB0aGUgbGluZSBcIklmIHRoZVxuICAvLyBudWNsZXVzIGlzIG5vdCBhIHNpbmdsZSBjaGFyYWN0ZXIsIGxldCBzID0gMDsgb3RoZXJ3aXNlIHNldCBzIHRvIHRoZVxuICAvLyBrZXJuIGFtb3VudCBmb3IgdGhlIG51Y2xldXMgZm9sbG93ZWQgYnkgdGhlIFxcc2tld2NoYXIgb2YgaXRzIGZvbnQuXCJcbiAgLy8gTm90ZSB0aGF0IG91ciBza2V3IG1ldHJpY3MgYXJlIGp1c3QgdGhlIGtlcm4gYmV0d2VlbiBlYWNoIGNoYXJhY3RlclxuICAvLyBhbmQgdGhlIHNrZXdjaGFyLlxuXG4gIHZhciBza2V3ID0gMDtcblxuICBpZiAobXVzdFNoaWZ0KSB7XG4gICAgLy8gSWYgdGhlIGJhc2UgaXMgYSBjaGFyYWN0ZXIgYm94LCB0aGVuIHdlIHdhbnQgdGhlIHNrZXcgb2YgdGhlXG4gICAgLy8gaW5uZXJtb3N0IGNoYXJhY3Rlci4gVG8gZG8gdGhhdCwgd2UgZmluZCB0aGUgaW5uZXJtb3N0IGNoYXJhY3RlcjpcbiAgICB2YXIgYmFzZUNoYXIgPSB1dGlscy5nZXRCYXNlRWxlbShiYXNlKTsgLy8gVGhlbiwgd2UgcmVuZGVyIGl0cyBncm91cCB0byBnZXQgdGhlIHN5bWJvbCBpbnNpZGUgaXRcblxuICAgIHZhciBiYXNlR3JvdXAgPSBidWlsZEhUTUxfYnVpbGRHcm91cChiYXNlQ2hhciwgb3B0aW9ucy5oYXZpbmdDcmFtcGVkU3R5bGUoKSk7IC8vIEZpbmFsbHksIHdlIHB1bGwgdGhlIHNrZXcgb2ZmIG9mIHRoZSBzeW1ib2wuXG5cbiAgICBza2V3ID0gYXNzZXJ0U3ltYm9sRG9tTm9kZShiYXNlR3JvdXApLnNrZXc7IC8vIE5vdGUgdGhhdCB3ZSBub3cgdGhyb3cgYXdheSBiYXNlR3JvdXAsIGJlY2F1c2UgdGhlIGxheWVycyB3ZVxuICAgIC8vIHJlbW92ZWQgd2l0aCBnZXRCYXNlRWxlbSBtaWdodCBjb250YWluIHRoaW5ncyBsaWtlIFxcY29sb3Igd2hpY2hcbiAgICAvLyB3ZSBjYW4ndCBnZXQgcmlkIG9mLlxuICAgIC8vIFRPRE8oZW1pbHkpOiBGaW5kIGEgYmV0dGVyIHdheSB0byBnZXQgdGhlIHNrZXdcbiAgfSAvLyBjYWxjdWxhdGUgdGhlIGFtb3VudCBvZiBzcGFjZSBiZXR3ZWVuIHRoZSBib2R5IGFuZCB0aGUgYWNjZW50XG5cblxuICB2YXIgY2xlYXJhbmNlID0gTWF0aC5taW4oYm9keS5oZWlnaHQsIG9wdGlvbnMuZm9udE1ldHJpY3MoKS54SGVpZ2h0KTsgLy8gQnVpbGQgdGhlIGFjY2VudFxuXG4gIHZhciBhY2NlbnRCb2R5O1xuXG4gIGlmICghZ3JvdXAuaXNTdHJldGNoeSkge1xuICAgIHZhciBhY2NlbnQ7XG4gICAgdmFyIHdpZHRoO1xuXG4gICAgaWYgKGdyb3VwLmxhYmVsID09PSBcIlxcXFx2ZWNcIikge1xuICAgICAgLy8gQmVmb3JlIHZlcnNpb24gMC45LCBcXHZlYyB1c2VkIHRoZSBjb21iaW5pbmcgZm9udCBnbHlwaCBVKzIwRDcuXG4gICAgICAvLyBCdXQgYnJvd3NlcnMsIGVzcGVjaWFsbHkgU2FmYXJpLCBhcmUgbm90IGNvbnNpc3RlbnQgaW4gaG93IHRoZXlcbiAgICAgIC8vIHJlbmRlciBjb21iaW5pbmcgY2hhcmFjdGVycyB3aGVuIG5vdCBwcmVjZWRlZCBieSBhIGNoYXJhY3Rlci5cbiAgICAgIC8vIFNvIG5vdyB3ZSB1c2UgYW4gU1ZHLlxuICAgICAgLy8gSWYgU2FmYXJpIHJlZm9ybXMsIHdlIHNob3VsZCBjb25zaWRlciByZXZlcnRpbmcgdG8gdGhlIGdseXBoLlxuICAgICAgYWNjZW50ID0gYnVpbGRDb21tb24uc3RhdGljU3ZnKFwidmVjXCIsIG9wdGlvbnMpO1xuICAgICAgd2lkdGggPSBidWlsZENvbW1vbi5zdmdEYXRhLnZlY1sxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWNjZW50ID0gYnVpbGRDb21tb24ubWFrZVN5bWJvbChncm91cC5sYWJlbCwgXCJNYWluLVJlZ3VsYXJcIiwgZ3JvdXAubW9kZSwgb3B0aW9ucyk7IC8vIFJlbW92ZSB0aGUgaXRhbGljIGNvcnJlY3Rpb24gb2YgdGhlIGFjY2VudCwgYmVjYXVzZSBpdCBvbmx5IHNlcnZlcyB0b1xuICAgICAgLy8gc2hpZnQgdGhlIGFjY2VudCBvdmVyIHRvIGEgcGxhY2Ugd2UgZG9uJ3Qgd2FudC5cblxuICAgICAgYWNjZW50Lml0YWxpYyA9IDA7XG4gICAgICB3aWR0aCA9IGFjY2VudC53aWR0aDtcbiAgICB9XG5cbiAgICBhY2NlbnRCb2R5ID0gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wiYWNjZW50LWJvZHlcIl0sIFthY2NlbnRdKTsgLy8gXCJGdWxsXCIgYWNjZW50cyBleHBhbmQgdGhlIHdpZHRoIG9mIHRoZSByZXN1bHRpbmcgc3ltYm9sIHRvIGJlXG4gICAgLy8gYXQgbGVhc3QgdGhlIHdpZHRoIG9mIHRoZSBhY2NlbnQsIGFuZCBvdmVybGFwIGRpcmVjdGx5IG9udG8gdGhlXG4gICAgLy8gY2hhcmFjdGVyIHdpdGhvdXQgYW55IHZlcnRpY2FsIG9mZnNldC5cblxuICAgIHZhciBhY2NlbnRGdWxsID0gZ3JvdXAubGFiZWwgPT09IFwiXFxcXHRleHRjaXJjbGVkXCI7XG5cbiAgICBpZiAoYWNjZW50RnVsbCkge1xuICAgICAgYWNjZW50Qm9keS5jbGFzc2VzLnB1c2goJ2FjY2VudC1mdWxsJyk7XG4gICAgICBjbGVhcmFuY2UgPSBib2R5LmhlaWdodDtcbiAgICB9IC8vIFNoaWZ0IHRoZSBhY2NlbnQgb3ZlciBieSB0aGUgc2tldy5cblxuXG4gICAgdmFyIGxlZnQgPSBza2V3OyAvLyBDU1MgZGVmaW5lcyBgLmthdGV4IC5hY2NlbnQgLmFjY2VudC1ib2R5Om5vdCguYWNjZW50LWZ1bGwpIHsgd2lkdGg6IDAgfWBcbiAgICAvLyBzbyB0aGF0IHRoZSBhY2NlbnQgZG9lc24ndCBjb250cmlidXRlIHRvIHRoZSBib3VuZGluZyBib3guXG4gICAgLy8gV2UgbmVlZCB0byBzaGlmdCB0aGUgY2hhcmFjdGVyIGJ5IGl0cyB3aWR0aCAoZWZmZWN0aXZlbHkgaGFsZlxuICAgIC8vIGl0cyB3aWR0aCkgdG8gY29tcGVuc2F0ZS5cblxuICAgIGlmICghYWNjZW50RnVsbCkge1xuICAgICAgbGVmdCAtPSB3aWR0aCAvIDI7XG4gICAgfVxuXG4gICAgYWNjZW50Qm9keS5zdHlsZS5sZWZ0ID0gbGVmdCArIFwiZW1cIjsgLy8gXFx0ZXh0Y2lyY2xlZCB1c2VzIHRoZSBcXGJpZ2NpcmMgZ2x5cGgsIHNvIGl0IG5lZWRzIHNvbWVcbiAgICAvLyB2ZXJ0aWNhbCBhZGp1c3RtZW50IHRvIG1hdGNoIExhVGVYLlxuXG4gICAgaWYgKGdyb3VwLmxhYmVsID09PSBcIlxcXFx0ZXh0Y2lyY2xlZFwiKSB7XG4gICAgICBhY2NlbnRCb2R5LnN0eWxlLnRvcCA9IFwiLjJlbVwiO1xuICAgIH1cblxuICAgIGFjY2VudEJvZHkgPSBidWlsZENvbW1vbi5tYWtlVkxpc3Qoe1xuICAgICAgcG9zaXRpb25UeXBlOiBcImZpcnN0QmFzZWxpbmVcIixcbiAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgZWxlbTogYm9keVxuICAgICAgfSwge1xuICAgICAgICB0eXBlOiBcImtlcm5cIixcbiAgICAgICAgc2l6ZTogLWNsZWFyYW5jZVxuICAgICAgfSwge1xuICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgZWxlbTogYWNjZW50Qm9keVxuICAgICAgfV1cbiAgICB9LCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBhY2NlbnRCb2R5ID0gc3RyZXRjaHkuc3ZnU3Bhbihncm91cCwgb3B0aW9ucyk7XG4gICAgYWNjZW50Qm9keSA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgICBwb3NpdGlvblR5cGU6IFwiZmlyc3RCYXNlbGluZVwiLFxuICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICBlbGVtOiBib2R5XG4gICAgICB9LCB7XG4gICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICBlbGVtOiBhY2NlbnRCb2R5LFxuICAgICAgICB3cmFwcGVyQ2xhc3NlczogW1wic3ZnLWFsaWduXCJdLFxuICAgICAgICB3cmFwcGVyU3R5bGU6IHNrZXcgPiAwID8ge1xuICAgICAgICAgIHdpZHRoOiBcImNhbGMoMTAwJSAtIFwiICsgMiAqIHNrZXcgKyBcImVtKVwiLFxuICAgICAgICAgIG1hcmdpbkxlZnQ6IDIgKiBza2V3ICsgXCJlbVwiXG4gICAgICAgIH0gOiB1bmRlZmluZWRcbiAgICAgIH1dXG4gICAgfSwgb3B0aW9ucyk7XG4gIH1cblxuICB2YXIgYWNjZW50V3JhcCA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm1vcmRcIiwgXCJhY2NlbnRcIl0sIFthY2NlbnRCb2R5XSwgb3B0aW9ucyk7XG5cbiAgaWYgKHN1cFN1Ykdyb3VwKSB7XG4gICAgLy8gSGVyZSwgd2UgcmVwbGFjZSB0aGUgXCJiYXNlXCIgY2hpbGQgb2YgdGhlIHN1cHN1YiB3aXRoIG91ciBuZXdseVxuICAgIC8vIGdlbmVyYXRlZCBhY2NlbnQuXG4gICAgc3VwU3ViR3JvdXAuY2hpbGRyZW5bMF0gPSBhY2NlbnRXcmFwOyAvLyBTaW5jZSB3ZSBkb24ndCByZXJ1biB0aGUgaGVpZ2h0IGNhbGN1bGF0aW9uIGFmdGVyIHJlcGxhY2luZyB0aGVcbiAgICAvLyBhY2NlbnQsIHdlIG1hbnVhbGx5IHJlY2FsY3VsYXRlIGhlaWdodC5cblxuICAgIHN1cFN1Ykdyb3VwLmhlaWdodCA9IE1hdGgubWF4KGFjY2VudFdyYXAuaGVpZ2h0LCBzdXBTdWJHcm91cC5oZWlnaHQpOyAvLyBBY2NlbnRzIHNob3VsZCBhbHdheXMgYmUgb3JkcywgZXZlbiB3aGVuIHRoZWlyIGlubmFyZHMgYXJlIG5vdC5cblxuICAgIHN1cFN1Ykdyb3VwLmNsYXNzZXNbMF0gPSBcIm1vcmRcIjtcbiAgICByZXR1cm4gc3VwU3ViR3JvdXA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGFjY2VudFdyYXA7XG4gIH1cbn07XG5cbnZhciBhY2NlbnRfbWF0aG1sQnVpbGRlciA9IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgdmFyIGFjY2VudE5vZGUgPSBncm91cC5pc1N0cmV0Y2h5ID8gc3RyZXRjaHkubWF0aE1Mbm9kZShncm91cC5sYWJlbCkgOiBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1vXCIsIFtidWlsZE1hdGhNTF9tYWtlVGV4dChncm91cC5sYWJlbCwgZ3JvdXAubW9kZSldKTtcbiAgdmFyIG5vZGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1vdmVyXCIsIFtidWlsZE1hdGhNTF9idWlsZEdyb3VwKGdyb3VwLmJhc2UsIG9wdGlvbnMpLCBhY2NlbnROb2RlXSk7XG4gIG5vZGUuc2V0QXR0cmlidXRlKFwiYWNjZW50XCIsIFwidHJ1ZVwiKTtcbiAgcmV0dXJuIG5vZGU7XG59O1xuXG52YXIgTk9OX1NUUkVUQ0hZX0FDQ0VOVF9SRUdFWCA9IG5ldyBSZWdFeHAoW1wiXFxcXGFjdXRlXCIsIFwiXFxcXGdyYXZlXCIsIFwiXFxcXGRkb3RcIiwgXCJcXFxcdGlsZGVcIiwgXCJcXFxcYmFyXCIsIFwiXFxcXGJyZXZlXCIsIFwiXFxcXGNoZWNrXCIsIFwiXFxcXGhhdFwiLCBcIlxcXFx2ZWNcIiwgXCJcXFxcZG90XCIsIFwiXFxcXG1hdGhyaW5nXCJdLm1hcChmdW5jdGlvbiAoYWNjZW50KSB7XG4gIHJldHVybiBcIlxcXFxcIiArIGFjY2VudDtcbn0pLmpvaW4oXCJ8XCIpKTsgLy8gQWNjZW50c1xuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwiYWNjZW50XCIsXG4gIG5hbWVzOiBbXCJcXFxcYWN1dGVcIiwgXCJcXFxcZ3JhdmVcIiwgXCJcXFxcZGRvdFwiLCBcIlxcXFx0aWxkZVwiLCBcIlxcXFxiYXJcIiwgXCJcXFxcYnJldmVcIiwgXCJcXFxcY2hlY2tcIiwgXCJcXFxcaGF0XCIsIFwiXFxcXHZlY1wiLCBcIlxcXFxkb3RcIiwgXCJcXFxcbWF0aHJpbmdcIiwgXCJcXFxcd2lkZWNoZWNrXCIsIFwiXFxcXHdpZGVoYXRcIiwgXCJcXFxcd2lkZXRpbGRlXCIsIFwiXFxcXG92ZXJyaWdodGFycm93XCIsIFwiXFxcXG92ZXJsZWZ0YXJyb3dcIiwgXCJcXFxcT3ZlcnJpZ2h0YXJyb3dcIiwgXCJcXFxcb3ZlcmxlZnRyaWdodGFycm93XCIsIFwiXFxcXG92ZXJncm91cFwiLCBcIlxcXFxvdmVybGluZXNlZ21lbnRcIiwgXCJcXFxcb3ZlcmxlZnRoYXJwb29uXCIsIFwiXFxcXG92ZXJyaWdodGhhcnBvb25cIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKGNvbnRleHQsIGFyZ3MpIHtcbiAgICB2YXIgYmFzZSA9IGFyZ3NbMF07XG4gICAgdmFyIGlzU3RyZXRjaHkgPSAhTk9OX1NUUkVUQ0hZX0FDQ0VOVF9SRUdFWC50ZXN0KGNvbnRleHQuZnVuY05hbWUpO1xuICAgIHZhciBpc1NoaWZ0eSA9ICFpc1N0cmV0Y2h5IHx8IGNvbnRleHQuZnVuY05hbWUgPT09IFwiXFxcXHdpZGVoYXRcIiB8fCBjb250ZXh0LmZ1bmNOYW1lID09PSBcIlxcXFx3aWRldGlsZGVcIiB8fCBjb250ZXh0LmZ1bmNOYW1lID09PSBcIlxcXFx3aWRlY2hlY2tcIjtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJhY2NlbnRcIixcbiAgICAgIG1vZGU6IGNvbnRleHQucGFyc2VyLm1vZGUsXG4gICAgICBsYWJlbDogY29udGV4dC5mdW5jTmFtZSxcbiAgICAgIGlzU3RyZXRjaHk6IGlzU3RyZXRjaHksXG4gICAgICBpc1NoaWZ0eTogaXNTaGlmdHksXG4gICAgICBiYXNlOiBiYXNlXG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGFjY2VudF9odG1sQnVpbGRlcixcbiAgbWF0aG1sQnVpbGRlcjogYWNjZW50X21hdGhtbEJ1aWxkZXJcbn0pOyAvLyBUZXh0LW1vZGUgYWNjZW50c1xuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwiYWNjZW50XCIsXG4gIG5hbWVzOiBbXCJcXFxcJ1wiLCBcIlxcXFxgXCIsIFwiXFxcXF5cIiwgXCJcXFxcflwiLCBcIlxcXFw9XCIsIFwiXFxcXHVcIiwgXCJcXFxcLlwiLCAnXFxcXFwiJywgXCJcXFxcclwiLCBcIlxcXFxIXCIsIFwiXFxcXHZcIiwgXCJcXFxcdGV4dGNpcmNsZWRcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMSxcbiAgICBhbGxvd2VkSW5UZXh0OiB0cnVlLFxuICAgIGFsbG93ZWRJbk1hdGg6IGZhbHNlXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoY29udGV4dCwgYXJncykge1xuICAgIHZhciBiYXNlID0gYXJnc1swXTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJhY2NlbnRcIixcbiAgICAgIG1vZGU6IGNvbnRleHQucGFyc2VyLm1vZGUsXG4gICAgICBsYWJlbDogY29udGV4dC5mdW5jTmFtZSxcbiAgICAgIGlzU3RyZXRjaHk6IGZhbHNlLFxuICAgICAgaXNTaGlmdHk6IHRydWUsXG4gICAgICBiYXNlOiBiYXNlXG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGFjY2VudF9odG1sQnVpbGRlcixcbiAgbWF0aG1sQnVpbGRlcjogYWNjZW50X21hdGhtbEJ1aWxkZXJcbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL2FjY2VudHVuZGVyLmpzXG4vLyBIb3Jpem9udGFsIG92ZXJsYXAgZnVuY3Rpb25zXG5cblxuXG5cblxuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwiYWNjZW50VW5kZXJcIixcbiAgbmFtZXM6IFtcIlxcXFx1bmRlcmxlZnRhcnJvd1wiLCBcIlxcXFx1bmRlcnJpZ2h0YXJyb3dcIiwgXCJcXFxcdW5kZXJsZWZ0cmlnaHRhcnJvd1wiLCBcIlxcXFx1bmRlcmdyb3VwXCIsIFwiXFxcXHVuZGVybGluZXNlZ21lbnRcIiwgXCJcXFxcdXRpbGRlXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDFcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmLCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYucGFyc2VyLFxuICAgICAgICBmdW5jTmFtZSA9IF9yZWYuZnVuY05hbWU7XG4gICAgdmFyIGJhc2UgPSBhcmdzWzBdO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImFjY2VudFVuZGVyXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIGxhYmVsOiBmdW5jTmFtZSxcbiAgICAgIGJhc2U6IGJhc2VcbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogZnVuY3Rpb24gaHRtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICAvLyBUcmVhdCB1bmRlciBhY2NlbnRzIG11Y2ggbGlrZSB1bmRlcmxpbmVzLlxuICAgIHZhciBpbm5lckdyb3VwID0gYnVpbGRIVE1MX2J1aWxkR3JvdXAoZ3JvdXAuYmFzZSwgb3B0aW9ucyk7XG4gICAgdmFyIGFjY2VudEJvZHkgPSBzdHJldGNoeS5zdmdTcGFuKGdyb3VwLCBvcHRpb25zKTtcbiAgICB2YXIga2VybiA9IGdyb3VwLmxhYmVsID09PSBcIlxcXFx1dGlsZGVcIiA/IDAuMTIgOiAwOyAvLyBHZW5lcmF0ZSB0aGUgdmxpc3QsIHdpdGggdGhlIGFwcHJvcHJpYXRlIGtlcm5zXG5cbiAgICB2YXIgdmxpc3QgPSBidWlsZENvbW1vbi5tYWtlVkxpc3Qoe1xuICAgICAgcG9zaXRpb25UeXBlOiBcImJvdHRvbVwiLFxuICAgICAgcG9zaXRpb25EYXRhOiBhY2NlbnRCb2R5LmhlaWdodCArIGtlcm4sXG4gICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IGFjY2VudEJvZHksXG4gICAgICAgIHdyYXBwZXJDbGFzc2VzOiBbXCJzdmctYWxpZ25cIl1cbiAgICAgIH0sIHtcbiAgICAgICAgdHlwZTogXCJrZXJuXCIsXG4gICAgICAgIHNpemU6IGtlcm5cbiAgICAgIH0sIHtcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IGlubmVyR3JvdXBcbiAgICAgIH1dXG4gICAgfSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm1vcmRcIiwgXCJhY2NlbnR1bmRlclwiXSwgW3ZsaXN0XSwgb3B0aW9ucyk7XG4gIH0sXG4gIG1hdGhtbEJ1aWxkZXI6IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgYWNjZW50Tm9kZSA9IHN0cmV0Y2h5Lm1hdGhNTG5vZGUoZ3JvdXAubGFiZWwpO1xuICAgIHZhciBub2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtdW5kZXJcIiwgW2J1aWxkTWF0aE1MX2J1aWxkR3JvdXAoZ3JvdXAuYmFzZSwgb3B0aW9ucyksIGFjY2VudE5vZGVdKTtcbiAgICBub2RlLnNldEF0dHJpYnV0ZShcImFjY2VudHVuZGVyXCIsIFwidHJ1ZVwiKTtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxufSk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMvYXJyb3cuanNcblxuXG5cblxuXG5cblxuLy8gSGVscGVyIGZ1bmN0aW9uXG52YXIgYXJyb3dfcGFkZGVkTm9kZSA9IGZ1bmN0aW9uIHBhZGRlZE5vZGUoZ3JvdXApIHtcbiAgdmFyIG5vZGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1wYWRkZWRcIiwgZ3JvdXAgPyBbZ3JvdXBdIDogW10pO1xuICBub2RlLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIFwiKzAuNmVtXCIpO1xuICBub2RlLnNldEF0dHJpYnV0ZShcImxzcGFjZVwiLCBcIjAuM2VtXCIpO1xuICByZXR1cm4gbm9kZTtcbn07IC8vIFN0cmV0Y2h5IGFycm93cyB3aXRoIGFuIG9wdGlvbmFsIGFyZ3VtZW50XG5cblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcInhBcnJvd1wiLFxuICBuYW1lczogW1wiXFxcXHhsZWZ0YXJyb3dcIiwgXCJcXFxceHJpZ2h0YXJyb3dcIiwgXCJcXFxceExlZnRhcnJvd1wiLCBcIlxcXFx4UmlnaHRhcnJvd1wiLCBcIlxcXFx4bGVmdHJpZ2h0YXJyb3dcIiwgXCJcXFxceExlZnRyaWdodGFycm93XCIsIFwiXFxcXHhob29rbGVmdGFycm93XCIsIFwiXFxcXHhob29rcmlnaHRhcnJvd1wiLCBcIlxcXFx4bWFwc3RvXCIsIFwiXFxcXHhyaWdodGhhcnBvb25kb3duXCIsIFwiXFxcXHhyaWdodGhhcnBvb251cFwiLCBcIlxcXFx4bGVmdGhhcnBvb25kb3duXCIsIFwiXFxcXHhsZWZ0aGFycG9vbnVwXCIsIFwiXFxcXHhyaWdodGxlZnRoYXJwb29uc1wiLCBcIlxcXFx4bGVmdHJpZ2h0aGFycG9vbnNcIiwgXCJcXFxceGxvbmdlcXVhbFwiLCBcIlxcXFx4dHdvaGVhZHJpZ2h0YXJyb3dcIiwgXCJcXFxceHR3b2hlYWRsZWZ0YXJyb3dcIiwgXCJcXFxceHRvZnJvbVwiLCAvLyBUaGUgbmV4dCAzIGZ1bmN0aW9ucyBhcmUgaGVyZSB0byBzdXBwb3J0IHRoZSBtaGNoZW0gZXh0ZW5zaW9uLlxuICAvLyBEaXJlY3QgdXNlIG9mIHRoZXNlIGZ1bmN0aW9ucyBpcyBkaXNjb3VyYWdlZCBhbmQgbWF5IGJyZWFrIHNvbWVkYXkuXG4gIFwiXFxcXHhyaWdodGxlZnRhcnJvd3NcIiwgXCJcXFxceHJpZ2h0ZXF1aWxpYnJpdW1cIiwgXCJcXFxceGxlZnRlcXVpbGlicml1bVwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxLFxuICAgIG51bU9wdGlvbmFsQXJnczogMVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYsIGFyZ3MsIG9wdEFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZi5wYXJzZXIsXG4gICAgICAgIGZ1bmNOYW1lID0gX3JlZi5mdW5jTmFtZTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJ4QXJyb3dcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgbGFiZWw6IGZ1bmNOYW1lLFxuICAgICAgYm9keTogYXJnc1swXSxcbiAgICAgIGJlbG93OiBvcHRBcmdzWzBdXG4gICAgfTtcbiAgfSxcbiAgLy8gRmxvdyBpcyB1bmFibGUgdG8gY29ycmVjdGx5IGluZmVyIHRoZSB0eXBlIG9mIGBncm91cGAsIGV2ZW4gdGhvdWdoIGl0J3NcbiAgLy8gdW5hbWliaWd1b3VzbHkgZGV0ZXJtaW5lZCBmcm9tIHRoZSBwYXNzZWQtaW4gYHR5cGVgIGFib3ZlLlxuICBodG1sQnVpbGRlcjogZnVuY3Rpb24gaHRtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgc3R5bGUgPSBvcHRpb25zLnN0eWxlOyAvLyBCdWlsZCB0aGUgYXJndW1lbnQgZ3JvdXBzIGluIHRoZSBhcHByb3ByaWF0ZSBzdHlsZS5cbiAgICAvLyBSZWY6IGFtc21hdGguZHR4OiAgIFxcaGJveHskXFxzY3JpcHRzdHlsZVxcbWtlcm4jM211eyM2fVxcbWtlcm4jNG11JH0lXG4gICAgLy8gU29tZSBncm91cHMgY2FuIHJldHVybiBkb2N1bWVudCBmcmFnbWVudHMuICBIYW5kbGUgdGhvc2UgYnkgd3JhcHBpbmdcbiAgICAvLyB0aGVtIGluIGEgc3Bhbi5cblxuICAgIHZhciBuZXdPcHRpb25zID0gb3B0aW9ucy5oYXZpbmdTdHlsZShzdHlsZS5zdXAoKSk7XG4gICAgdmFyIHVwcGVyR3JvdXAgPSBidWlsZENvbW1vbi53cmFwRnJhZ21lbnQoYnVpbGRIVE1MX2J1aWxkR3JvdXAoZ3JvdXAuYm9keSwgbmV3T3B0aW9ucywgb3B0aW9ucyksIG9wdGlvbnMpO1xuICAgIHVwcGVyR3JvdXAuY2xhc3Nlcy5wdXNoKFwieC1hcnJvdy1wYWRcIik7XG4gICAgdmFyIGxvd2VyR3JvdXA7XG5cbiAgICBpZiAoZ3JvdXAuYmVsb3cpIHtcbiAgICAgIC8vIEJ1aWxkIHRoZSBsb3dlciBncm91cFxuICAgICAgbmV3T3B0aW9ucyA9IG9wdGlvbnMuaGF2aW5nU3R5bGUoc3R5bGUuc3ViKCkpO1xuICAgICAgbG93ZXJHcm91cCA9IGJ1aWxkQ29tbW9uLndyYXBGcmFnbWVudChidWlsZEhUTUxfYnVpbGRHcm91cChncm91cC5iZWxvdywgbmV3T3B0aW9ucywgb3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgbG93ZXJHcm91cC5jbGFzc2VzLnB1c2goXCJ4LWFycm93LXBhZFwiKTtcbiAgICB9XG5cbiAgICB2YXIgYXJyb3dCb2R5ID0gc3RyZXRjaHkuc3ZnU3Bhbihncm91cCwgb3B0aW9ucyk7IC8vIFJlIHNoaWZ0OiBOb3RlIHRoYXQgc3RyZXRjaHkuc3ZnU3BhbiByZXR1cm5lZCBhcnJvd0JvZHkuZGVwdGggPSAwLlxuICAgIC8vIFRoZSBwb2ludCB3ZSB3YW50IG9uIHRoZSBtYXRoIGF4aXMgaXMgYXQgMC41ICogYXJyb3dCb2R5LmhlaWdodC5cblxuICAgIHZhciBhcnJvd1NoaWZ0ID0gLW9wdGlvbnMuZm9udE1ldHJpY3MoKS5heGlzSGVpZ2h0ICsgMC41ICogYXJyb3dCb2R5LmhlaWdodDsgLy8gMiBtdSBrZXJuLiBSZWY6IGFtc21hdGguZHR4OiAjN1xcaWYwIzJcXGVsc2VcXG1rZXJuIzJtdVxcZmlcblxuICAgIHZhciB1cHBlclNoaWZ0ID0gLW9wdGlvbnMuZm9udE1ldHJpY3MoKS5heGlzSGVpZ2h0IC0gMC41ICogYXJyb3dCb2R5LmhlaWdodCAtIDAuMTExOyAvLyAwLjExMSBlbSA9IDIgbXVcblxuICAgIGlmICh1cHBlckdyb3VwLmRlcHRoID4gMC4yNSB8fCBncm91cC5sYWJlbCA9PT0gXCJcXFxceGxlZnRlcXVpbGlicml1bVwiKSB7XG4gICAgICB1cHBlclNoaWZ0IC09IHVwcGVyR3JvdXAuZGVwdGg7IC8vIHNoaWZ0IHVwIGlmIGRlcHRoIGVuY3JvYWNoZXNcbiAgICB9IC8vIEdlbmVyYXRlIHRoZSB2bGlzdFxuXG5cbiAgICB2YXIgdmxpc3Q7XG5cbiAgICBpZiAobG93ZXJHcm91cCkge1xuICAgICAgdmFyIGxvd2VyU2hpZnQgPSAtb3B0aW9ucy5mb250TWV0cmljcygpLmF4aXNIZWlnaHQgKyBsb3dlckdyb3VwLmhlaWdodCArIDAuNSAqIGFycm93Qm9keS5oZWlnaHQgKyAwLjExMTtcbiAgICAgIHZsaXN0ID0gYnVpbGRDb21tb24ubWFrZVZMaXN0KHtcbiAgICAgICAgcG9zaXRpb25UeXBlOiBcImluZGl2aWR1YWxTaGlmdFwiLFxuICAgICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgICBlbGVtOiB1cHBlckdyb3VwLFxuICAgICAgICAgIHNoaWZ0OiB1cHBlclNoaWZ0XG4gICAgICAgIH0sIHtcbiAgICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgICBlbGVtOiBhcnJvd0JvZHksXG4gICAgICAgICAgc2hpZnQ6IGFycm93U2hpZnRcbiAgICAgICAgfSwge1xuICAgICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICAgIGVsZW06IGxvd2VyR3JvdXAsXG4gICAgICAgICAgc2hpZnQ6IGxvd2VyU2hpZnRcbiAgICAgICAgfV1cbiAgICAgIH0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bGlzdCA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgICAgIHBvc2l0aW9uVHlwZTogXCJpbmRpdmlkdWFsU2hpZnRcIixcbiAgICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgICAgZWxlbTogdXBwZXJHcm91cCxcbiAgICAgICAgICBzaGlmdDogdXBwZXJTaGlmdFxuICAgICAgICB9LCB7XG4gICAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgICAgZWxlbTogYXJyb3dCb2R5LFxuICAgICAgICAgIHNoaWZ0OiBhcnJvd1NoaWZ0XG4gICAgICAgIH1dXG4gICAgICB9LCBvcHRpb25zKTtcbiAgICB9IC8vICRGbG93Rml4TWU6IFJlcGxhY2UgdGhpcyB3aXRoIHBhc3NpbmcgXCJzdmctYWxpZ25cIiBpbnRvIG1ha2VWTGlzdC5cblxuXG4gICAgdmxpc3QuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0uY2hpbGRyZW5bMV0uY2xhc3Nlcy5wdXNoKFwic3ZnLWFsaWduXCIpO1xuICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJtcmVsXCIsIFwieC1hcnJvd1wiXSwgW3ZsaXN0XSwgb3B0aW9ucyk7XG4gIH0sXG4gIG1hdGhtbEJ1aWxkZXI6IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgYXJyb3dOb2RlID0gc3RyZXRjaHkubWF0aE1Mbm9kZShncm91cC5sYWJlbCk7XG4gICAgdmFyIG5vZGU7XG5cbiAgICBpZiAoZ3JvdXAuYm9keSkge1xuICAgICAgdmFyIHVwcGVyTm9kZSA9IGFycm93X3BhZGRlZE5vZGUoYnVpbGRNYXRoTUxfYnVpbGRHcm91cChncm91cC5ib2R5LCBvcHRpb25zKSk7XG5cbiAgICAgIGlmIChncm91cC5iZWxvdykge1xuICAgICAgICB2YXIgbG93ZXJOb2RlID0gYXJyb3dfcGFkZGVkTm9kZShidWlsZE1hdGhNTF9idWlsZEdyb3VwKGdyb3VwLmJlbG93LCBvcHRpb25zKSk7XG4gICAgICAgIG5vZGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm11bmRlcm92ZXJcIiwgW2Fycm93Tm9kZSwgbG93ZXJOb2RlLCB1cHBlck5vZGVdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1vdmVyXCIsIFthcnJvd05vZGUsIHVwcGVyTm9kZV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZ3JvdXAuYmVsb3cpIHtcbiAgICAgIHZhciBfbG93ZXJOb2RlID0gYXJyb3dfcGFkZGVkTm9kZShidWlsZE1hdGhNTF9idWlsZEdyb3VwKGdyb3VwLmJlbG93LCBvcHRpb25zKSk7XG5cbiAgICAgIG5vZGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm11bmRlclwiLCBbYXJyb3dOb2RlLCBfbG93ZXJOb2RlXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlbi5cbiAgICAgIC8vIFBhcnNlci5qcyB0aHJvd3MgYW4gZXJyb3IgaWYgdGhlcmUgaXMgbm8gYXJndW1lbnQuXG4gICAgICBub2RlID0gYXJyb3dfcGFkZGVkTm9kZSgpO1xuICAgICAgbm9kZSA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibW92ZXJcIiwgW2Fycm93Tm9kZSwgbm9kZV0pO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9XG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2Z1bmN0aW9ucy9jaGFyLmpzXG5cblxuIC8vIFxcQGNoYXIgaXMgYW4gaW50ZXJuYWwgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIGdyb3VwZWQgZGVjaW1hbCBhcmd1bWVudCBsaWtlXG4vLyB7MTIzfSBhbmQgY29udmVydHMgaW50byBzeW1ib2wgd2l0aCBjb2RlIDEyMy4gIEl0IGlzIHVzZWQgYnkgdGhlICptYWNybypcbi8vIFxcY2hhciBkZWZpbmVkIGluIG1hY3Jvcy5qcy5cblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcInRleHRvcmRcIixcbiAgbmFtZXM6IFtcIlxcXFxAY2hhclwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxLFxuICAgIGFsbG93ZWRJblRleHQ6IHRydWVcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmLCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYucGFyc2VyO1xuICAgIHZhciBhcmcgPSBhc3NlcnROb2RlVHlwZShhcmdzWzBdLCBcIm9yZGdyb3VwXCIpO1xuICAgIHZhciBncm91cCA9IGFyZy5ib2R5O1xuICAgIHZhciBudW1iZXIgPSBcIlwiO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG5vZGUgPSBhc3NlcnROb2RlVHlwZShncm91cFtpXSwgXCJ0ZXh0b3JkXCIpO1xuICAgICAgbnVtYmVyICs9IG5vZGUudGV4dDtcbiAgICB9XG5cbiAgICB2YXIgY29kZSA9IHBhcnNlSW50KG51bWJlcik7XG5cbiAgICBpZiAoaXNOYU4oY29kZSkpIHtcbiAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIlxcXFxAY2hhciBoYXMgbm9uLW51bWVyaWMgYXJndW1lbnQgXCIgKyBudW1iZXIpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcInRleHRvcmRcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgdGV4dDogU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKVxuICAgIH07XG4gIH1cbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL2NvbG9yLmpzXG5cblxuXG5cblxuXG5cbnZhciBjb2xvcl9odG1sQnVpbGRlciA9IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50cyA9IGJ1aWxkSFRNTF9idWlsZEV4cHJlc3Npb24oZ3JvdXAuYm9keSwgb3B0aW9ucy53aXRoQ29sb3IoZ3JvdXAuY29sb3IpLCBmYWxzZSk7IC8vIFxcY29sb3IgaXNuJ3Qgc3VwcG9zZWQgdG8gYWZmZWN0IHRoZSB0eXBlIG9mIHRoZSBlbGVtZW50cyBpdCBjb250YWlucy5cbiAgLy8gVG8gYWNjb21wbGlzaCB0aGlzLCB3ZSB3cmFwIHRoZSByZXN1bHRzIGluIGEgZnJhZ21lbnQsIHNvIHRoZSBpbm5lclxuICAvLyBlbGVtZW50cyB3aWxsIGJlIGFibGUgdG8gZGlyZWN0bHkgaW50ZXJhY3Qgd2l0aCB0aGVpciBuZWlnaGJvcnMuIEZvclxuICAvLyBleGFtcGxlLCBgXFxjb2xvcntyZWR9ezIgK30gM2AgaGFzIHRoZSBzYW1lIHNwYWNpbmcgYXMgYDIgKyAzYFxuXG4gIHJldHVybiBidWlsZENvbW1vbi5tYWtlRnJhZ21lbnQoZWxlbWVudHMpO1xufTtcblxudmFyIGNvbG9yX21hdGhtbEJ1aWxkZXIgPSBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gIHZhciBpbm5lciA9IGJ1aWxkTWF0aE1MX2J1aWxkRXhwcmVzc2lvbihncm91cC5ib2R5LCBvcHRpb25zLndpdGhDb2xvcihncm91cC5jb2xvcikpO1xuICB2YXIgbm9kZSA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibXN0eWxlXCIsIGlubmVyKTtcbiAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJtYXRoY29sb3JcIiwgZ3JvdXAuY29sb3IpO1xuICByZXR1cm4gbm9kZTtcbn07XG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJjb2xvclwiLFxuICBuYW1lczogW1wiXFxcXHRleHRjb2xvclwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAyLFxuICAgIGFsbG93ZWRJblRleHQ6IHRydWUsXG4gICAgZ3JlZWRpbmVzczogMyxcbiAgICBhcmdUeXBlczogW1wiY29sb3JcIiwgXCJvcmlnaW5hbFwiXVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZi5wYXJzZXI7XG4gICAgdmFyIGNvbG9yID0gYXNzZXJ0Tm9kZVR5cGUoYXJnc1swXSwgXCJjb2xvci10b2tlblwiKS5jb2xvcjtcbiAgICB2YXIgYm9keSA9IGFyZ3NbMV07XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiY29sb3JcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgYm9keTogZGVmaW5lRnVuY3Rpb25fb3JkYXJndW1lbnQoYm9keSlcbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogY29sb3JfaHRtbEJ1aWxkZXIsXG4gIG1hdGhtbEJ1aWxkZXI6IGNvbG9yX21hdGhtbEJ1aWxkZXJcbn0pO1xuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcImNvbG9yXCIsXG4gIG5hbWVzOiBbXCJcXFxcY29sb3JcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMSxcbiAgICBhbGxvd2VkSW5UZXh0OiB0cnVlLFxuICAgIGdyZWVkaW5lc3M6IDMsXG4gICAgYXJnVHlwZXM6IFtcImNvbG9yXCJdXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZjIsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZjIucGFyc2VyLFxuICAgICAgICBicmVha09uVG9rZW5UZXh0ID0gX3JlZjIuYnJlYWtPblRva2VuVGV4dDtcbiAgICB2YXIgY29sb3IgPSBhc3NlcnROb2RlVHlwZShhcmdzWzBdLCBcImNvbG9yLXRva2VuXCIpLmNvbG9yOyAvLyBJZiB3ZSBzZWUgYSBzdHlsaW5nIGZ1bmN0aW9uLCBwYXJzZSBvdXQgdGhlIGltcGxpY2l0IGJvZHlcblxuICAgIHZhciBib2R5ID0gcGFyc2VyLnBhcnNlRXhwcmVzc2lvbih0cnVlLCBicmVha09uVG9rZW5UZXh0KTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJjb2xvclwiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICBjb2xvcjogY29sb3IsXG4gICAgICBib2R5OiBib2R5XG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGNvbG9yX2h0bWxCdWlsZGVyLFxuICBtYXRobWxCdWlsZGVyOiBjb2xvcl9tYXRobWxCdWlsZGVyXG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2Z1bmN0aW9ucy9jci5qc1xuLy8gUm93IGJyZWFrcyB3aXRoaW4gdGFidWxhciBlbnZpcm9ubWVudHMsIGFuZCBsaW5lIGJyZWFrcyBhdCB0b3AgbGV2ZWxcblxuXG5cblxuXG4gLy8gXFxcXCBpcyBhIG1hY3JvIG1hcHBpbmcgdG8gZWl0aGVyIFxcY3Igb3IgXFxuZXdsaW5lLiAgQmVjYXVzZSB0aGV5IGhhdmUgdGhlXG4vLyBzYW1lIHNpZ25hdHVyZSwgd2UgaW1wbGVtZW50IHRoZW0gYXMgb25lIG1lZ2FmdW5jdGlvbiwgd2l0aCBuZXdSb3dcbi8vIGluZGljYXRpbmcgd2hldGhlciB3ZSdyZSBpbiB0aGUgXFxjciBjYXNlLCBhbmQgbmV3TGluZSBpbmRpY2F0aW5nIHdoZXRoZXJcbi8vIHRvIGJyZWFrIHRoZSBsaW5lIGluIHRoZSBcXG5ld2xpbmUgY2FzZS5cblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcImNyXCIsXG4gIG5hbWVzOiBbXCJcXFxcY3JcIiwgXCJcXFxcbmV3bGluZVwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAwLFxuICAgIG51bU9wdGlvbmFsQXJnczogMSxcbiAgICBhcmdUeXBlczogW1wic2l6ZVwiXSxcbiAgICBhbGxvd2VkSW5UZXh0OiB0cnVlXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZiwgYXJncywgb3B0QXJncykge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmLnBhcnNlcixcbiAgICAgICAgZnVuY05hbWUgPSBfcmVmLmZ1bmNOYW1lO1xuICAgIHZhciBzaXplID0gb3B0QXJnc1swXTtcbiAgICB2YXIgbmV3Um93ID0gZnVuY05hbWUgPT09IFwiXFxcXGNyXCI7XG4gICAgdmFyIG5ld0xpbmUgPSBmYWxzZTtcblxuICAgIGlmICghbmV3Um93KSB7XG4gICAgICBpZiAocGFyc2VyLnNldHRpbmdzLmRpc3BsYXlNb2RlICYmIHBhcnNlci5zZXR0aW5ncy51c2VTdHJpY3RCZWhhdmlvcihcIm5ld0xpbmVJbkRpc3BsYXlNb2RlXCIsIFwiSW4gTGFUZVgsIFxcXFxcXFxcIG9yIFxcXFxuZXdsaW5lIFwiICsgXCJkb2VzIG5vdGhpbmcgaW4gZGlzcGxheSBtb2RlXCIpKSB7XG4gICAgICAgIG5ld0xpbmUgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld0xpbmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImNyXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIG5ld0xpbmU6IG5ld0xpbmUsXG4gICAgICBuZXdSb3c6IG5ld1JvdyxcbiAgICAgIHNpemU6IHNpemUgJiYgYXNzZXJ0Tm9kZVR5cGUoc2l6ZSwgXCJzaXplXCIpLnZhbHVlXG4gICAgfTtcbiAgfSxcbiAgLy8gVGhlIGZvbGxvd2luZyBidWlsZGVycyBhcmUgY2FsbGVkIG9ubHkgYXQgdGhlIHRvcCBsZXZlbCxcbiAgLy8gbm90IHdpdGhpbiB0YWJ1bGFyL2FycmF5IGVudmlyb25tZW50cy5cbiAgaHRtbEJ1aWxkZXI6IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgaWYgKGdyb3VwLm5ld1Jvdykge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiXFxcXGNyIHZhbGlkIG9ubHkgd2l0aGluIGEgdGFidWxhci9hcnJheSBlbnZpcm9ubWVudFwiKTtcbiAgICB9XG5cbiAgICB2YXIgc3BhbiA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm1zcGFjZVwiXSwgW10sIG9wdGlvbnMpO1xuXG4gICAgaWYgKGdyb3VwLm5ld0xpbmUpIHtcbiAgICAgIHNwYW4uY2xhc3Nlcy5wdXNoKFwibmV3bGluZVwiKTtcblxuICAgICAgaWYgKGdyb3VwLnNpemUpIHtcbiAgICAgICAgc3Bhbi5zdHlsZS5tYXJnaW5Ub3AgPSB1bml0c19jYWxjdWxhdGVTaXplKGdyb3VwLnNpemUsIG9wdGlvbnMpICsgXCJlbVwiO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzcGFuO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIG5vZGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1zcGFjZVwiKTtcblxuICAgIGlmIChncm91cC5uZXdMaW5lKSB7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShcImxpbmVicmVha1wiLCBcIm5ld2xpbmVcIik7XG5cbiAgICAgIGlmIChncm91cC5zaXplKSB7XG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIHVuaXRzX2NhbGN1bGF0ZVNpemUoZ3JvdXAuc2l6ZSwgb3B0aW9ucykgKyBcImVtXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9XG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2RlbGltaXRlci5qc1xuLyoqXG4gKiBUaGlzIGZpbGUgZGVhbHMgd2l0aCBjcmVhdGluZyBkZWxpbWl0ZXJzIG9mIHZhcmlvdXMgc2l6ZXMuIFRoZSBUZVhib29rXG4gKiBkaXNjdXNzZXMgdGhlc2Ugcm91dGluZXMgb24gcGFnZSA0NDEtNDQyLCBpbiB0aGUgXCJBbm90aGVyIHN1YnJvdXRpbmUgc2V0cyBib3hcbiAqIHggdG8gYSBzcGVjaWZpZWQgdmFyaWFibGUgZGVsaW1pdGVyXCIgcGFyYWdyYXBoLlxuICpcbiAqIFRoZXJlIGFyZSB0aHJlZSBtYWluIHJvdXRpbmVzIGhlcmUuIGBtYWtlU21hbGxEZWxpbWAgbWFrZXMgYSBkZWxpbWl0ZXIgaW4gdGhlXG4gKiBub3JtYWwgZm9udCwgYnV0IGluIGVpdGhlciB0ZXh0LCBzY3JpcHQsIG9yIHNjcmlwdHNjcmlwdCBzdHlsZS5cbiAqIGBtYWtlTGFyZ2VEZWxpbWAgbWFrZXMgYSBkZWxpbWl0ZXIgaW4gdGV4dHN0eWxlLCBidXQgaW4gb25lIG9mIHRoZSBTaXplMSxcbiAqIFNpemUyLCBTaXplMywgb3IgU2l6ZTQgZm9udHMuIGBtYWtlU3RhY2tlZERlbGltYCBtYWtlcyBhIGRlbGltaXRlciBvdXQgb2ZcbiAqIHNtYWxsZXIgcGllY2VzIHRoYXQgYXJlIHN0YWNrZWQgb24gdG9wIG9mIG9uZSBhbm90aGVyLlxuICpcbiAqIFRoZSBmdW5jdGlvbnMgdGFrZSBhIHBhcmFtZXRlciBgY2VudGVyYCwgd2hpY2ggZGV0ZXJtaW5lcyBpZiB0aGUgZGVsaW1pdGVyXG4gKiBzaG91bGQgYmUgY2VudGVyZWQgYXJvdW5kIHRoZSBheGlzLlxuICpcbiAqIFRoZW4sIHRoZXJlIGFyZSB0aHJlZSBleHBvc2VkIGZ1bmN0aW9ucy4gYHNpemVkRGVsaW1gIG1ha2VzIGEgZGVsaW1pdGVyIGluXG4gKiBvbmUgb2YgdGhlIGdpdmVuIHNpemVzLiBUaGlzIGlzIHVzZWQgZm9yIHRoaW5ncyBsaWtlIGBcXGJpZ2xgLlxuICogYGN1c3RvbVNpemVkRGVsaW1gIG1ha2VzIGEgZGVsaW1pdGVyIHdpdGggYSBnaXZlbiB0b3RhbCBoZWlnaHQrZGVwdGguIEl0IGlzXG4gKiBjYWxsZWQgaW4gcGxhY2VzIGxpa2UgYFxcc3FydGAuIGBsZWZ0UmlnaHREZWxpbWAgbWFrZXMgYW4gYXBwcm9wcmlhdGVcbiAqIGRlbGltaXRlciB3aGljaCBzdXJyb3VuZHMgYW4gZXhwcmVzc2lvbiBvZiBhIGdpdmVuIGhlaWdodCBhbiBkZXB0aC4gSXQgaXNcbiAqIHVzZWQgaW4gYFxcbGVmdGAgYW5kIGBcXHJpZ2h0YC5cbiAqL1xuXG5cblxuXG5cblxuXG5cbi8qKlxuICogR2V0IHRoZSBtZXRyaWNzIGZvciBhIGdpdmVuIHN5bWJvbCBhbmQgZm9udCwgYWZ0ZXIgdHJhbnNmb3JtYXRpb24gKGkuZS5cbiAqIGFmdGVyIGZvbGxvd2luZyByZXBsYWNlbWVudCBmcm9tIHN5bWJvbHMuanMpXG4gKi9cbnZhciBkZWxpbWl0ZXJfZ2V0TWV0cmljcyA9IGZ1bmN0aW9uIGdldE1ldHJpY3Moc3ltYm9sLCBmb250LCBtb2RlKSB7XG4gIHZhciByZXBsYWNlID0gc3JjX3N5bWJvbHMubWF0aFtzeW1ib2xdICYmIHNyY19zeW1ib2xzLm1hdGhbc3ltYm9sXS5yZXBsYWNlO1xuICB2YXIgbWV0cmljcyA9IGdldENoYXJhY3Rlck1ldHJpY3MocmVwbGFjZSB8fCBzeW1ib2wsIGZvbnQsIG1vZGUpO1xuXG4gIGlmICghbWV0cmljcykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIHN5bWJvbCBcIiArIHN5bWJvbCArIFwiIGFuZCBmb250IHNpemUgXCIgKyBmb250ICsgXCIuXCIpO1xuICB9XG5cbiAgcmV0dXJuIG1ldHJpY3M7XG59O1xuLyoqXG4gKiBQdXRzIGEgZGVsaW1pdGVyIHNwYW4gaW4gYSBnaXZlbiBzdHlsZSwgYW5kIGFkZHMgYXBwcm9wcmlhdGUgaGVpZ2h0LCBkZXB0aCxcbiAqIGFuZCBtYXhGb250U2l6ZXMuXG4gKi9cblxuXG52YXIgZGVsaW1pdGVyX3N0eWxlV3JhcCA9IGZ1bmN0aW9uIHN0eWxlV3JhcChkZWxpbSwgdG9TdHlsZSwgb3B0aW9ucywgY2xhc3Nlcykge1xuICB2YXIgbmV3T3B0aW9ucyA9IG9wdGlvbnMuaGF2aW5nQmFzZVN0eWxlKHRvU3R5bGUpO1xuICB2YXIgc3BhbiA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKGNsYXNzZXMuY29uY2F0KG5ld09wdGlvbnMuc2l6aW5nQ2xhc3NlcyhvcHRpb25zKSksIFtkZWxpbV0sIG9wdGlvbnMpO1xuICB2YXIgZGVsaW1TaXplTXVsdGlwbGllciA9IG5ld09wdGlvbnMuc2l6ZU11bHRpcGxpZXIgLyBvcHRpb25zLnNpemVNdWx0aXBsaWVyO1xuICBzcGFuLmhlaWdodCAqPSBkZWxpbVNpemVNdWx0aXBsaWVyO1xuICBzcGFuLmRlcHRoICo9IGRlbGltU2l6ZU11bHRpcGxpZXI7XG4gIHNwYW4ubWF4Rm9udFNpemUgPSBuZXdPcHRpb25zLnNpemVNdWx0aXBsaWVyO1xuICByZXR1cm4gc3Bhbjtcbn07XG5cbnZhciBjZW50ZXJTcGFuID0gZnVuY3Rpb24gY2VudGVyU3BhbihzcGFuLCBvcHRpb25zLCBzdHlsZSkge1xuICB2YXIgbmV3T3B0aW9ucyA9IG9wdGlvbnMuaGF2aW5nQmFzZVN0eWxlKHN0eWxlKTtcbiAgdmFyIHNoaWZ0ID0gKDEgLSBvcHRpb25zLnNpemVNdWx0aXBsaWVyIC8gbmV3T3B0aW9ucy5zaXplTXVsdGlwbGllcikgKiBvcHRpb25zLmZvbnRNZXRyaWNzKCkuYXhpc0hlaWdodDtcbiAgc3Bhbi5jbGFzc2VzLnB1c2goXCJkZWxpbWNlbnRlclwiKTtcbiAgc3Bhbi5zdHlsZS50b3AgPSBzaGlmdCArIFwiZW1cIjtcbiAgc3Bhbi5oZWlnaHQgLT0gc2hpZnQ7XG4gIHNwYW4uZGVwdGggKz0gc2hpZnQ7XG59O1xuLyoqXG4gKiBNYWtlcyBhIHNtYWxsIGRlbGltaXRlci4gVGhpcyBpcyBhIGRlbGltaXRlciB0aGF0IGNvbWVzIGluIHRoZSBNYWluLVJlZ3VsYXJcbiAqIGZvbnQsIGJ1dCBpcyByZXN0eWxlZCB0byBlaXRoZXIgYmUgaW4gdGV4dHN0eWxlLCBzY3JpcHRzdHlsZSwgb3JcbiAqIHNjcmlwdHNjcmlwdHN0eWxlLlxuICovXG5cblxudmFyIGRlbGltaXRlcl9tYWtlU21hbGxEZWxpbSA9IGZ1bmN0aW9uIG1ha2VTbWFsbERlbGltKGRlbGltLCBzdHlsZSwgY2VudGVyLCBvcHRpb25zLCBtb2RlLCBjbGFzc2VzKSB7XG4gIHZhciB0ZXh0ID0gYnVpbGRDb21tb24ubWFrZVN5bWJvbChkZWxpbSwgXCJNYWluLVJlZ3VsYXJcIiwgbW9kZSwgb3B0aW9ucyk7XG4gIHZhciBzcGFuID0gZGVsaW1pdGVyX3N0eWxlV3JhcCh0ZXh0LCBzdHlsZSwgb3B0aW9ucywgY2xhc3Nlcyk7XG5cbiAgaWYgKGNlbnRlcikge1xuICAgIGNlbnRlclNwYW4oc3Bhbiwgb3B0aW9ucywgc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHNwYW47XG59O1xuLyoqXG4gKiBCdWlsZHMgYSBzeW1ib2wgaW4gdGhlIGdpdmVuIGZvbnQgc2l6ZSAobm90ZSBzaXplIGlzIGFuIGludGVnZXIpXG4gKi9cblxuXG52YXIgZGVsaW1pdGVyX21hdGhybVNpemUgPSBmdW5jdGlvbiBtYXRocm1TaXplKHZhbHVlLCBzaXplLCBtb2RlLCBvcHRpb25zKSB7XG4gIHJldHVybiBidWlsZENvbW1vbi5tYWtlU3ltYm9sKHZhbHVlLCBcIlNpemVcIiArIHNpemUgKyBcIi1SZWd1bGFyXCIsIG1vZGUsIG9wdGlvbnMpO1xufTtcbi8qKlxuICogTWFrZXMgYSBsYXJnZSBkZWxpbWl0ZXIuIFRoaXMgaXMgYSBkZWxpbWl0ZXIgdGhhdCBjb21lcyBpbiB0aGUgU2l6ZTEsIFNpemUyLFxuICogU2l6ZTMsIG9yIFNpemU0IGZvbnRzLiBJdCBpcyBhbHdheXMgcmVuZGVyZWQgaW4gdGV4dHN0eWxlLlxuICovXG5cblxudmFyIGRlbGltaXRlcl9tYWtlTGFyZ2VEZWxpbSA9IGZ1bmN0aW9uIG1ha2VMYXJnZURlbGltKGRlbGltLCBzaXplLCBjZW50ZXIsIG9wdGlvbnMsIG1vZGUsIGNsYXNzZXMpIHtcbiAgdmFyIGlubmVyID0gZGVsaW1pdGVyX21hdGhybVNpemUoZGVsaW0sIHNpemUsIG1vZGUsIG9wdGlvbnMpO1xuICB2YXIgc3BhbiA9IGRlbGltaXRlcl9zdHlsZVdyYXAoYnVpbGRDb21tb24ubWFrZVNwYW4oW1wiZGVsaW1zaXppbmdcIiwgXCJzaXplXCIgKyBzaXplXSwgW2lubmVyXSwgb3B0aW9ucyksIHNyY19TdHlsZS5URVhULCBvcHRpb25zLCBjbGFzc2VzKTtcblxuICBpZiAoY2VudGVyKSB7XG4gICAgY2VudGVyU3BhbihzcGFuLCBvcHRpb25zLCBzcmNfU3R5bGUuVEVYVCk7XG4gIH1cblxuICByZXR1cm4gc3Bhbjtcbn07XG4vKipcbiAqIE1ha2UgYW4gaW5uZXIgc3BhbiB3aXRoIHRoZSBnaXZlbiBvZmZzZXQgYW5kIGluIHRoZSBnaXZlbiBmb250LiBUaGlzIGlzIHVzZWRcbiAqIGluIGBtYWtlU3RhY2tlZERlbGltYCB0byBtYWtlIHRoZSBzdGFja2luZyBwaWVjZXMgZm9yIHRoZSBkZWxpbWl0ZXIuXG4gKi9cblxuXG52YXIgZGVsaW1pdGVyX21ha2VJbm5lciA9IGZ1bmN0aW9uIG1ha2VJbm5lcihzeW1ib2wsIGZvbnQsIG1vZGUpIHtcbiAgdmFyIHNpemVDbGFzczsgLy8gQXBwbHkgdGhlIGNvcnJlY3QgQ1NTIGNsYXNzIHRvIGNob29zZSB0aGUgcmlnaHQgZm9udC5cblxuICBpZiAoZm9udCA9PT0gXCJTaXplMS1SZWd1bGFyXCIpIHtcbiAgICBzaXplQ2xhc3MgPSBcImRlbGltLXNpemUxXCI7XG4gIH0gZWxzZVxuICAgIC8qIGlmIChmb250ID09PSBcIlNpemU0LVJlZ3VsYXJcIikgKi9cbiAgICB7XG4gICAgICBzaXplQ2xhc3MgPSBcImRlbGltLXNpemU0XCI7XG4gICAgfVxuXG4gIHZhciBpbm5lciA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcImRlbGltc2l6aW5naW5uZXJcIiwgc2l6ZUNsYXNzXSwgW2J1aWxkQ29tbW9uLm1ha2VTcGFuKFtdLCBbYnVpbGRDb21tb24ubWFrZVN5bWJvbChzeW1ib2wsIGZvbnQsIG1vZGUpXSldKTsgLy8gU2luY2UgdGhpcyB3aWxsIGJlIHBhc3NlZCBpbnRvIGBtYWtlVkxpc3RgIGluIHRoZSBlbmQsIHdyYXAgdGhlIGVsZW1lbnRcbiAgLy8gaW4gdGhlIGFwcHJvcHJpYXRlIHRhZyB0aGF0IFZMaXN0IHVzZXMuXG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcImVsZW1cIixcbiAgICBlbGVtOiBpbm5lclxuICB9O1xufTtcbi8qKlxuICogTWFrZSBhIHN0YWNrZWQgZGVsaW1pdGVyIG91dCBvZiBhIGdpdmVuIGRlbGltaXRlciwgd2l0aCB0aGUgdG90YWwgaGVpZ2h0IGF0XG4gKiBsZWFzdCBgaGVpZ2h0VG90YWxgLiBUaGlzIHJvdXRpbmUgaXMgbWVudGlvbmVkIG9uIHBhZ2UgNDQyIG9mIHRoZSBUZVhib29rLlxuICovXG5cblxudmFyIGRlbGltaXRlcl9tYWtlU3RhY2tlZERlbGltID0gZnVuY3Rpb24gbWFrZVN0YWNrZWREZWxpbShkZWxpbSwgaGVpZ2h0VG90YWwsIGNlbnRlciwgb3B0aW9ucywgbW9kZSwgY2xhc3Nlcykge1xuICAvLyBUaGVyZSBhcmUgZm91ciBwYXJ0cywgdGhlIHRvcCwgYW4gb3B0aW9uYWwgbWlkZGxlLCBhIHJlcGVhdGVkIHBhcnQsIGFuZCBhXG4gIC8vIGJvdHRvbS5cbiAgdmFyIHRvcDtcbiAgdmFyIG1pZGRsZTtcbiAgdmFyIHJlcGVhdDtcbiAgdmFyIGJvdHRvbTtcbiAgdG9wID0gcmVwZWF0ID0gYm90dG9tID0gZGVsaW07XG4gIG1pZGRsZSA9IG51bGw7IC8vIEFsc28ga2VlcCB0cmFjayBvZiB3aGF0IGZvbnQgdGhlIGRlbGltaXRlcnMgYXJlIGluXG5cbiAgdmFyIGZvbnQgPSBcIlNpemUxLVJlZ3VsYXJcIjsgLy8gV2Ugc2V0IHRoZSBwYXJ0cyBhbmQgZm9udCBiYXNlZCBvbiB0aGUgc3ltYm9sLiBOb3RlIHRoYXQgd2UgdXNlXG4gIC8vICdcXHUyM2QwJyBpbnN0ZWFkIG9mICd8JyBhbmQgJ1xcdTIwMTYnIGluc3RlYWQgb2YgJ1xcXFx8JyBmb3IgdGhlXG4gIC8vIHJlcGVhdHMgb2YgdGhlIGFycm93c1xuXG4gIGlmIChkZWxpbSA9PT0gXCJcXFxcdXBhcnJvd1wiKSB7XG4gICAgcmVwZWF0ID0gYm90dG9tID0gXCJcXHUyM0QwXCI7XG4gIH0gZWxzZSBpZiAoZGVsaW0gPT09IFwiXFxcXFVwYXJyb3dcIikge1xuICAgIHJlcGVhdCA9IGJvdHRvbSA9IFwiXFx1MjAxNlwiO1xuICB9IGVsc2UgaWYgKGRlbGltID09PSBcIlxcXFxkb3duYXJyb3dcIikge1xuICAgIHRvcCA9IHJlcGVhdCA9IFwiXFx1MjNEMFwiO1xuICB9IGVsc2UgaWYgKGRlbGltID09PSBcIlxcXFxEb3duYXJyb3dcIikge1xuICAgIHRvcCA9IHJlcGVhdCA9IFwiXFx1MjAxNlwiO1xuICB9IGVsc2UgaWYgKGRlbGltID09PSBcIlxcXFx1cGRvd25hcnJvd1wiKSB7XG4gICAgdG9wID0gXCJcXFxcdXBhcnJvd1wiO1xuICAgIHJlcGVhdCA9IFwiXFx1MjNEMFwiO1xuICAgIGJvdHRvbSA9IFwiXFxcXGRvd25hcnJvd1wiO1xuICB9IGVsc2UgaWYgKGRlbGltID09PSBcIlxcXFxVcGRvd25hcnJvd1wiKSB7XG4gICAgdG9wID0gXCJcXFxcVXBhcnJvd1wiO1xuICAgIHJlcGVhdCA9IFwiXFx1MjAxNlwiO1xuICAgIGJvdHRvbSA9IFwiXFxcXERvd25hcnJvd1wiO1xuICB9IGVsc2UgaWYgKGRlbGltID09PSBcIltcIiB8fCBkZWxpbSA9PT0gXCJcXFxcbGJyYWNrXCIpIHtcbiAgICB0b3AgPSBcIlxcdTIzQTFcIjtcbiAgICByZXBlYXQgPSBcIlxcdTIzQTJcIjtcbiAgICBib3R0b20gPSBcIlxcdTIzQTNcIjtcbiAgICBmb250ID0gXCJTaXplNC1SZWd1bGFyXCI7XG4gIH0gZWxzZSBpZiAoZGVsaW0gPT09IFwiXVwiIHx8IGRlbGltID09PSBcIlxcXFxyYnJhY2tcIikge1xuICAgIHRvcCA9IFwiXFx1MjNBNFwiO1xuICAgIHJlcGVhdCA9IFwiXFx1MjNBNVwiO1xuICAgIGJvdHRvbSA9IFwiXFx1MjNBNlwiO1xuICAgIGZvbnQgPSBcIlNpemU0LVJlZ3VsYXJcIjtcbiAgfSBlbHNlIGlmIChkZWxpbSA9PT0gXCJcXFxcbGZsb29yXCIgfHwgZGVsaW0gPT09IFwiXFx1MjMwQVwiKSB7XG4gICAgcmVwZWF0ID0gdG9wID0gXCJcXHUyM0EyXCI7XG4gICAgYm90dG9tID0gXCJcXHUyM0EzXCI7XG4gICAgZm9udCA9IFwiU2l6ZTQtUmVndWxhclwiO1xuICB9IGVsc2UgaWYgKGRlbGltID09PSBcIlxcXFxsY2VpbFwiIHx8IGRlbGltID09PSBcIlxcdTIzMDhcIikge1xuICAgIHRvcCA9IFwiXFx1MjNBMVwiO1xuICAgIHJlcGVhdCA9IGJvdHRvbSA9IFwiXFx1MjNBMlwiO1xuICAgIGZvbnQgPSBcIlNpemU0LVJlZ3VsYXJcIjtcbiAgfSBlbHNlIGlmIChkZWxpbSA9PT0gXCJcXFxccmZsb29yXCIgfHwgZGVsaW0gPT09IFwiXFx1MjMwQlwiKSB7XG4gICAgcmVwZWF0ID0gdG9wID0gXCJcXHUyM0E1XCI7XG4gICAgYm90dG9tID0gXCJcXHUyM0E2XCI7XG4gICAgZm9udCA9IFwiU2l6ZTQtUmVndWxhclwiO1xuICB9IGVsc2UgaWYgKGRlbGltID09PSBcIlxcXFxyY2VpbFwiIHx8IGRlbGltID09PSBcIlxcdTIzMDlcIikge1xuICAgIHRvcCA9IFwiXFx1MjNBNFwiO1xuICAgIHJlcGVhdCA9IGJvdHRvbSA9IFwiXFx1MjNBNVwiO1xuICAgIGZvbnQgPSBcIlNpemU0LVJlZ3VsYXJcIjtcbiAgfSBlbHNlIGlmIChkZWxpbSA9PT0gXCIoXCIgfHwgZGVsaW0gPT09IFwiXFxcXGxwYXJlblwiKSB7XG4gICAgdG9wID0gXCJcXHUyMzlCXCI7XG4gICAgcmVwZWF0ID0gXCJcXHUyMzlDXCI7XG4gICAgYm90dG9tID0gXCJcXHUyMzlEXCI7XG4gICAgZm9udCA9IFwiU2l6ZTQtUmVndWxhclwiO1xuICB9IGVsc2UgaWYgKGRlbGltID09PSBcIilcIiB8fCBkZWxpbSA9PT0gXCJcXFxccnBhcmVuXCIpIHtcbiAgICB0b3AgPSBcIlxcdTIzOUVcIjtcbiAgICByZXBlYXQgPSBcIlxcdTIzOUZcIjtcbiAgICBib3R0b20gPSBcIlxcdTIzQTBcIjtcbiAgICBmb250ID0gXCJTaXplNC1SZWd1bGFyXCI7XG4gIH0gZWxzZSBpZiAoZGVsaW0gPT09IFwiXFxcXHtcIiB8fCBkZWxpbSA9PT0gXCJcXFxcbGJyYWNlXCIpIHtcbiAgICB0b3AgPSBcIlxcdTIzQTdcIjtcbiAgICBtaWRkbGUgPSBcIlxcdTIzQThcIjtcbiAgICBib3R0b20gPSBcIlxcdTIzQTlcIjtcbiAgICByZXBlYXQgPSBcIlxcdTIzQUFcIjtcbiAgICBmb250ID0gXCJTaXplNC1SZWd1bGFyXCI7XG4gIH0gZWxzZSBpZiAoZGVsaW0gPT09IFwiXFxcXH1cIiB8fCBkZWxpbSA9PT0gXCJcXFxccmJyYWNlXCIpIHtcbiAgICB0b3AgPSBcIlxcdTIzQUJcIjtcbiAgICBtaWRkbGUgPSBcIlxcdTIzQUNcIjtcbiAgICBib3R0b20gPSBcIlxcdTIzQURcIjtcbiAgICByZXBlYXQgPSBcIlxcdTIzQUFcIjtcbiAgICBmb250ID0gXCJTaXplNC1SZWd1bGFyXCI7XG4gIH0gZWxzZSBpZiAoZGVsaW0gPT09IFwiXFxcXGxncm91cFwiIHx8IGRlbGltID09PSBcIlxcdTI3RUVcIikge1xuICAgIHRvcCA9IFwiXFx1MjNBN1wiO1xuICAgIGJvdHRvbSA9IFwiXFx1MjNBOVwiO1xuICAgIHJlcGVhdCA9IFwiXFx1MjNBQVwiO1xuICAgIGZvbnQgPSBcIlNpemU0LVJlZ3VsYXJcIjtcbiAgfSBlbHNlIGlmIChkZWxpbSA9PT0gXCJcXFxccmdyb3VwXCIgfHwgZGVsaW0gPT09IFwiXFx1MjdFRlwiKSB7XG4gICAgdG9wID0gXCJcXHUyM0FCXCI7XG4gICAgYm90dG9tID0gXCJcXHUyM0FEXCI7XG4gICAgcmVwZWF0ID0gXCJcXHUyM0FBXCI7XG4gICAgZm9udCA9IFwiU2l6ZTQtUmVndWxhclwiO1xuICB9IGVsc2UgaWYgKGRlbGltID09PSBcIlxcXFxsbW91c3RhY2hlXCIgfHwgZGVsaW0gPT09IFwiXFx1MjNCMFwiKSB7XG4gICAgdG9wID0gXCJcXHUyM0E3XCI7XG4gICAgYm90dG9tID0gXCJcXHUyM0FEXCI7XG4gICAgcmVwZWF0ID0gXCJcXHUyM0FBXCI7XG4gICAgZm9udCA9IFwiU2l6ZTQtUmVndWxhclwiO1xuICB9IGVsc2UgaWYgKGRlbGltID09PSBcIlxcXFxybW91c3RhY2hlXCIgfHwgZGVsaW0gPT09IFwiXFx1MjNCMVwiKSB7XG4gICAgdG9wID0gXCJcXHUyM0FCXCI7XG4gICAgYm90dG9tID0gXCJcXHUyM0E5XCI7XG4gICAgcmVwZWF0ID0gXCJcXHUyM0FBXCI7XG4gICAgZm9udCA9IFwiU2l6ZTQtUmVndWxhclwiO1xuICB9IC8vIEdldCB0aGUgbWV0cmljcyBvZiB0aGUgZm91ciBzZWN0aW9uc1xuXG5cbiAgdmFyIHRvcE1ldHJpY3MgPSBkZWxpbWl0ZXJfZ2V0TWV0cmljcyh0b3AsIGZvbnQsIG1vZGUpO1xuICB2YXIgdG9wSGVpZ2h0VG90YWwgPSB0b3BNZXRyaWNzLmhlaWdodCArIHRvcE1ldHJpY3MuZGVwdGg7XG4gIHZhciByZXBlYXRNZXRyaWNzID0gZGVsaW1pdGVyX2dldE1ldHJpY3MocmVwZWF0LCBmb250LCBtb2RlKTtcbiAgdmFyIHJlcGVhdEhlaWdodFRvdGFsID0gcmVwZWF0TWV0cmljcy5oZWlnaHQgKyByZXBlYXRNZXRyaWNzLmRlcHRoO1xuICB2YXIgYm90dG9tTWV0cmljcyA9IGRlbGltaXRlcl9nZXRNZXRyaWNzKGJvdHRvbSwgZm9udCwgbW9kZSk7XG4gIHZhciBib3R0b21IZWlnaHRUb3RhbCA9IGJvdHRvbU1ldHJpY3MuaGVpZ2h0ICsgYm90dG9tTWV0cmljcy5kZXB0aDtcbiAgdmFyIG1pZGRsZUhlaWdodFRvdGFsID0gMDtcbiAgdmFyIG1pZGRsZUZhY3RvciA9IDE7XG5cbiAgaWYgKG1pZGRsZSAhPT0gbnVsbCkge1xuICAgIHZhciBtaWRkbGVNZXRyaWNzID0gZGVsaW1pdGVyX2dldE1ldHJpY3MobWlkZGxlLCBmb250LCBtb2RlKTtcbiAgICBtaWRkbGVIZWlnaHRUb3RhbCA9IG1pZGRsZU1ldHJpY3MuaGVpZ2h0ICsgbWlkZGxlTWV0cmljcy5kZXB0aDtcbiAgICBtaWRkbGVGYWN0b3IgPSAyOyAvLyByZXBlYXQgc3ltbWV0cmljYWxseSBhYm92ZSBhbmQgYmVsb3cgbWlkZGxlXG4gIH0gLy8gQ2FsY3VhdGUgdGhlIG1pbmltYWwgaGVpZ2h0IHRoYXQgdGhlIGRlbGltaXRlciBjYW4gaGF2ZS5cbiAgLy8gSXQgaXMgYXQgbGVhc3QgdGhlIHNpemUgb2YgdGhlIHRvcCwgYm90dG9tLCBhbmQgb3B0aW9uYWwgbWlkZGxlIGNvbWJpbmVkLlxuXG5cbiAgdmFyIG1pbkhlaWdodCA9IHRvcEhlaWdodFRvdGFsICsgYm90dG9tSGVpZ2h0VG90YWwgKyBtaWRkbGVIZWlnaHRUb3RhbDsgLy8gQ29tcHV0ZSB0aGUgbnVtYmVyIG9mIGNvcGllcyBvZiB0aGUgcmVwZWF0IHN5bWJvbCB3ZSB3aWxsIG5lZWRcblxuICB2YXIgcmVwZWF0Q291bnQgPSBNYXRoLmNlaWwoKGhlaWdodFRvdGFsIC0gbWluSGVpZ2h0KSAvIChtaWRkbGVGYWN0b3IgKiByZXBlYXRIZWlnaHRUb3RhbCkpOyAvLyBDb21wdXRlIHRoZSB0b3RhbCBoZWlnaHQgb2YgdGhlIGRlbGltaXRlciBpbmNsdWRpbmcgYWxsIHRoZSBzeW1ib2xzXG5cbiAgdmFyIHJlYWxIZWlnaHRUb3RhbCA9IG1pbkhlaWdodCArIHJlcGVhdENvdW50ICogbWlkZGxlRmFjdG9yICogcmVwZWF0SGVpZ2h0VG90YWw7IC8vIFRoZSBjZW50ZXIgb2YgdGhlIGRlbGltaXRlciBpcyBwbGFjZWQgYXQgdGhlIGNlbnRlciBvZiB0aGUgYXhpcy4gTm90ZVxuICAvLyB0aGF0IGluIHRoaXMgY29udGV4dCwgXCJjZW50ZXJcIiBtZWFucyB0aGF0IHRoZSBkZWxpbWl0ZXIgc2hvdWxkIGJlXG4gIC8vIGNlbnRlcmVkIGFyb3VuZCB0aGUgYXhpcyBpbiB0aGUgY3VycmVudCBzdHlsZSwgd2hpbGUgbm9ybWFsbHkgaXQgaXNcbiAgLy8gY2VudGVyZWQgYXJvdW5kIHRoZSBheGlzIGluIHRleHRzdHlsZS5cblxuICB2YXIgYXhpc0hlaWdodCA9IG9wdGlvbnMuZm9udE1ldHJpY3MoKS5heGlzSGVpZ2h0O1xuXG4gIGlmIChjZW50ZXIpIHtcbiAgICBheGlzSGVpZ2h0ICo9IG9wdGlvbnMuc2l6ZU11bHRpcGxpZXI7XG4gIH0gLy8gQ2FsY3VsYXRlIHRoZSBkZXB0aFxuXG5cbiAgdmFyIGRlcHRoID0gcmVhbEhlaWdodFRvdGFsIC8gMiAtIGF4aXNIZWlnaHQ7IC8vIE5vdywgd2Ugc3RhcnQgYnVpbGRpbmcgdGhlIHBpZWNlcyB0aGF0IHdpbGwgZ28gaW50byB0aGUgdmxpc3RcbiAgLy8gS2VlcCBhIGxpc3Qgb2YgdGhlIGlubmVyIHBpZWNlc1xuXG4gIHZhciBpbm5lcnMgPSBbXTsgLy8gQWRkIHRoZSBib3R0b20gc3ltYm9sXG5cbiAgaW5uZXJzLnB1c2goZGVsaW1pdGVyX21ha2VJbm5lcihib3R0b20sIGZvbnQsIG1vZGUpKTtcblxuICBpZiAobWlkZGxlID09PSBudWxsKSB7XG4gICAgLy8gQWRkIHRoYXQgbWFueSBzeW1ib2xzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXBlYXRDb3VudDsgaSsrKSB7XG4gICAgICBpbm5lcnMucHVzaChkZWxpbWl0ZXJfbWFrZUlubmVyKHJlcGVhdCwgZm9udCwgbW9kZSkpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIGEgbWlkZGxlIGJpdCwgd2UgbmVlZCB0aGUgbWlkZGxlIHBhcnQgYW5kIHR3byByZXBlYXRlZFxuICAgIC8vIHNlY3Rpb25zXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHJlcGVhdENvdW50OyBfaSsrKSB7XG4gICAgICBpbm5lcnMucHVzaChkZWxpbWl0ZXJfbWFrZUlubmVyKHJlcGVhdCwgZm9udCwgbW9kZSkpO1xuICAgIH1cblxuICAgIGlubmVycy5wdXNoKGRlbGltaXRlcl9tYWtlSW5uZXIobWlkZGxlLCBmb250LCBtb2RlKSk7XG5cbiAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCByZXBlYXRDb3VudDsgX2kyKyspIHtcbiAgICAgIGlubmVycy5wdXNoKGRlbGltaXRlcl9tYWtlSW5uZXIocmVwZWF0LCBmb250LCBtb2RlKSk7XG4gICAgfVxuICB9IC8vIEFkZCB0aGUgdG9wIHN5bWJvbFxuXG5cbiAgaW5uZXJzLnB1c2goZGVsaW1pdGVyX21ha2VJbm5lcih0b3AsIGZvbnQsIG1vZGUpKTsgLy8gRmluYWxseSwgYnVpbGQgdGhlIHZsaXN0XG5cbiAgdmFyIG5ld09wdGlvbnMgPSBvcHRpb25zLmhhdmluZ0Jhc2VTdHlsZShzcmNfU3R5bGUuVEVYVCk7XG4gIHZhciBpbm5lciA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgcG9zaXRpb25UeXBlOiBcImJvdHRvbVwiLFxuICAgIHBvc2l0aW9uRGF0YTogZGVwdGgsXG4gICAgY2hpbGRyZW46IGlubmVyc1xuICB9LCBuZXdPcHRpb25zKTtcbiAgcmV0dXJuIGRlbGltaXRlcl9zdHlsZVdyYXAoYnVpbGRDb21tb24ubWFrZVNwYW4oW1wiZGVsaW1zaXppbmdcIiwgXCJtdWx0XCJdLCBbaW5uZXJdLCBuZXdPcHRpb25zKSwgc3JjX1N0eWxlLlRFWFQsIG9wdGlvbnMsIGNsYXNzZXMpO1xufTsgLy8gQWxsIHN1cmRzIGhhdmUgMC4wOGVtIHBhZGRpbmcgYWJvdmUgdGhlIHZpbmljdWx1bSBpbnNpZGUgdGhlIFNWRy5cbi8vIFRoYXQga2VlcHMgYnJvd3NlciBzcGFuIGhlaWdodCByb3VuZGluZyBlcnJvciBmcm9tIHBpbmNoaW5nIHRoZSBsaW5lLlxuXG5cbnZhciB2YlBhZCA9IDgwOyAvLyBwYWRkaW5nIGFib3ZlIHRoZSBzdXJkLCBtZWFzdXJlZCBpbnNpZGUgdGhlIHZpZXdCb3guXG5cbnZhciBlbVBhZCA9IDAuMDg7IC8vIHBhZGRpbmcsIGluIGVtcywgbWVhc3VyZWQgaW4gdGhlIGRvY3VtZW50LlxuXG52YXIgZGVsaW1pdGVyX3NxcnRTdmcgPSBmdW5jdGlvbiBzcXJ0U3ZnKHNxcnROYW1lLCBoZWlnaHQsIHZpZXdCb3hIZWlnaHQsIG9wdGlvbnMpIHtcbiAgdmFyIGFsdGVybmF0ZTtcblxuICBpZiAoc3FydE5hbWUgPT09IFwic3FydFRhbGxcIikge1xuICAgIC8vIHNxcnRUYWxsIGlzIGZyb20gZ2x5cGggVTIzQjcgaW4gdGhlIGZvbnQgS2FUZVhfU2l6ZTQtUmVndWxhclxuICAgIC8vIE9uZSBwYXRoIGVkZ2UgaGFzIGEgdmFyaWFibGUgbGVuZ3RoLiBJdCBydW5zIGZyb20gdGhlIHZpbmljdWx1bW5cbiAgICAvLyB0byBhIHBvaW50IG5lYXIgKDE0IHVuaXRzKSB0aGUgYm90dG9tIG9mIHRoZSBzdXJkLiBUaGUgdmluaWN1bHVtXG4gICAgLy8gaXMgNDAgdW5pdHMgdGhpY2suIFNvIHRoZSBsZW5ndGggb2YgdGhlIGxpbmUgaW4gcXVlc3Rpb24gaXM6XG4gICAgdmFyIHZlcnRTZWdtZW50ID0gdmlld0JveEhlaWdodCAtIDU0IC0gdmJQYWQ7XG4gICAgYWx0ZXJuYXRlID0gXCJNNzAyIFwiICsgdmJQYWQgKyBcIkg0MDAwMDB2NDBINzQydlwiICsgdmVydFNlZ21lbnQgKyBcImwtNCA0LTQgNGMtLjY2Ny43XFxuLTIgMS41LTQgMi41cy00LjE2NyAxLjgzMy02LjUgMi41LTUuNSAxLTkuNSAxaC0xMmwtMjgtODRjLTE2LjY2Ny01Mi05Ni42NjdcXG4tMjk0LjMzMy0yNDAtNzI3bC0yMTIgLTY0MyAtODUgMTcwYy00LTMuMzMzLTguMzMzLTcuNjY3LTEzIC0xM2wtMTMtMTNsNzctMTU1XFxuIDc3LTE1NmM2NiAxOTkuMzMzIDEzOSA0MTkuNjY3IDIxOSA2NjEgbDIxOCA2NjF6TTcwMiBcIiArIHZiUGFkICsgXCJINDAwMDAwdjQwSDc0MnpcIjtcbiAgfVxuXG4gIHZhciBwYXRoTm9kZSA9IG5ldyBkb21UcmVlX1BhdGhOb2RlKHNxcnROYW1lLCBhbHRlcm5hdGUpO1xuICB2YXIgc3ZnID0gbmV3IFN2Z05vZGUoW3BhdGhOb2RlXSwge1xuICAgIC8vIE5vdGU6IDEwMDA6MSByYXRpbyBvZiB2aWV3Qm94IHRvIGRvY3VtZW50IGVtIHdpZHRoLlxuICAgIFwid2lkdGhcIjogXCI0MDBlbVwiLFxuICAgIFwiaGVpZ2h0XCI6IGhlaWdodCArIFwiZW1cIixcbiAgICBcInZpZXdCb3hcIjogXCIwIDAgNDAwMDAwIFwiICsgdmlld0JveEhlaWdodCxcbiAgICBcInByZXNlcnZlQXNwZWN0UmF0aW9cIjogXCJ4TWluWU1pbiBzbGljZVwiXG4gIH0pO1xuICByZXR1cm4gYnVpbGRDb21tb24ubWFrZVN2Z1NwYW4oW1wiaGlkZS10YWlsXCJdLCBbc3ZnXSwgb3B0aW9ucyk7XG59O1xuLyoqXG4gKiBNYWtlIGEgc3FydCBpbWFnZSBvZiB0aGUgZ2l2ZW4gaGVpZ2h0LFxuICovXG5cblxudmFyIG1ha2VTcXJ0SW1hZ2UgPSBmdW5jdGlvbiBtYWtlU3FydEltYWdlKGhlaWdodCwgb3B0aW9ucykge1xuICAvLyBEZWZpbmUgYSBuZXdPcHRpb25zIHRoYXQgcmVtb3ZlcyB0aGUgZWZmZWN0IG9mIHNpemUgY2hhbmdlcyBzdWNoIGFzIFxcSHVnZS5cbiAgLy8gV2UgZG9uJ3QgcGljayBkaWZmZXJlbnQgYSBoZWlnaHQgc3VyZCBmb3IgXFxIdWdlLiBGb3IgaXQsIHdlIHNjYWxlIHVwLlxuICB2YXIgbmV3T3B0aW9ucyA9IG9wdGlvbnMuaGF2aW5nQmFzZVNpemluZygpOyAvLyBQaWNrIHRoZSBkZXNpcmVkIHN1cmQgZ2x5cGggZnJvbSBhIHNlcXVlbmNlIG9mIHN1cmRzLlxuXG4gIHZhciBkZWxpbSA9IHRyYXZlcnNlU2VxdWVuY2UoXCJcXFxcc3VyZFwiLCBoZWlnaHQgKiBuZXdPcHRpb25zLnNpemVNdWx0aXBsaWVyLCBzdGFja0xhcmdlRGVsaW1pdGVyU2VxdWVuY2UsIG5ld09wdGlvbnMpO1xuICB2YXIgc2l6ZU11bHRpcGxpZXIgPSBuZXdPcHRpb25zLnNpemVNdWx0aXBsaWVyOyAvLyBkZWZhdWx0XG4gIC8vIENyZWF0ZSBhIHNwYW4gY29udGFpbmluZyBhbiBTVkcgaW1hZ2Ugb2YgYSBzcXJ0IHN5bWJvbC5cblxuICB2YXIgc3BhbjtcbiAgdmFyIHNwYW5IZWlnaHQgPSAwO1xuICB2YXIgdGV4SGVpZ2h0ID0gMDtcbiAgdmFyIHZpZXdCb3hIZWlnaHQgPSAwO1xuICB2YXIgYWR2YW5jZVdpZHRoOyAvLyBXZSBjcmVhdGUgdmlld0JveGVzIHdpdGggODAgdW5pdHMgb2YgXCJwYWRkaW5nXCIgYWJvdmUgZWFjaCBzdXJkLlxuICAvLyBUaGVuIGJyb3dzZXIgcm91bmRpbmcgZXJyb3Igb24gdGhlIHBhcmVudCBzcGFuIGhlaWdodCB3aWxsIG5vdFxuICAvLyBlbmNyb2FjaCBvbiB0aGUgaW5rIG9mIHRoZSB2aW5pY3VsdW0uIEJ1dCB0aGF0IHBhZGRpbmcgaXMgbm90XG4gIC8vIGluY2x1ZGVkIGluIHRoZSBUZVgtbGlrZSBgaGVpZ2h0YCB1c2VkIGZvciBjYWxjdWxhdGlvbiBvZlxuICAvLyB2ZXJ0aWNhbCBhbGlnbm1lbnQuIFNvIHRleEhlaWdodCA9IHNwYW4uaGVpZ2h0IDwgc3Bhbi5zdHlsZS5oZWlnaHQuXG5cbiAgaWYgKGRlbGltLnR5cGUgPT09IFwic21hbGxcIikge1xuICAgIC8vIEdldCBhbiBTVkcgdGhhdCBpcyBkZXJpdmVkIGZyb20gZ2x5cGggVSsyMjFBIGluIGZvbnQgS2FUZVgtTWFpbi5cbiAgICB2aWV3Qm94SGVpZ2h0ID0gMTAwMCArIHZiUGFkOyAvLyAxMDAwIHVuaXQgZ2x5cGggaGVpZ2h0LlxuXG4gICAgaWYgKGhlaWdodCA8IDEuMCkge1xuICAgICAgc2l6ZU11bHRpcGxpZXIgPSAxLjA7IC8vIG1pbWljIGEgXFx0ZXh0Zm9udCByYWRpY2FsXG4gICAgfSBlbHNlIGlmIChoZWlnaHQgPCAxLjQpIHtcbiAgICAgIHNpemVNdWx0aXBsaWVyID0gMC43OyAvLyBtaW1pYyBhIFxcc2NyaXB0Zm9udCByYWRpY2FsXG4gICAgfVxuXG4gICAgc3BhbkhlaWdodCA9ICgxLjAgKyBlbVBhZCkgLyBzaXplTXVsdGlwbGllcjtcbiAgICB0ZXhIZWlnaHQgPSAxLjAwIC8gc2l6ZU11bHRpcGxpZXI7XG4gICAgc3BhbiA9IGRlbGltaXRlcl9zcXJ0U3ZnKFwic3FydE1haW5cIiwgc3BhbkhlaWdodCwgdmlld0JveEhlaWdodCwgb3B0aW9ucyk7XG4gICAgc3Bhbi5zdHlsZS5taW5XaWR0aCA9IFwiMC44NTNlbVwiO1xuICAgIGFkdmFuY2VXaWR0aCA9IDAuODMzIC8gc2l6ZU11bHRpcGxpZXI7IC8vIGZyb20gdGhlIGZvbnQuXG4gIH0gZWxzZSBpZiAoZGVsaW0udHlwZSA9PT0gXCJsYXJnZVwiKSB7XG4gICAgLy8gVGhlc2UgU1ZHcyBjb21lIGZyb20gZm9udHM6IEthVGVYX1NpemUxLCBfU2l6ZTIsIGV0Yy5cbiAgICB2aWV3Qm94SGVpZ2h0ID0gKDEwMDAgKyB2YlBhZCkgKiBzaXplVG9NYXhIZWlnaHRbZGVsaW0uc2l6ZV07XG4gICAgdGV4SGVpZ2h0ID0gc2l6ZVRvTWF4SGVpZ2h0W2RlbGltLnNpemVdIC8gc2l6ZU11bHRpcGxpZXI7XG4gICAgc3BhbkhlaWdodCA9IChzaXplVG9NYXhIZWlnaHRbZGVsaW0uc2l6ZV0gKyBlbVBhZCkgLyBzaXplTXVsdGlwbGllcjtcbiAgICBzcGFuID0gZGVsaW1pdGVyX3NxcnRTdmcoXCJzcXJ0U2l6ZVwiICsgZGVsaW0uc2l6ZSwgc3BhbkhlaWdodCwgdmlld0JveEhlaWdodCwgb3B0aW9ucyk7XG4gICAgc3Bhbi5zdHlsZS5taW5XaWR0aCA9IFwiMS4wMmVtXCI7XG4gICAgYWR2YW5jZVdpZHRoID0gMS4wIC8gc2l6ZU11bHRpcGxpZXI7IC8vIDEuMCBmcm9tIHRoZSBmb250LlxuICB9IGVsc2Uge1xuICAgIC8vIFRhbGwgc3FydC4gSW4gVGVYLCB0aGlzIHdvdWxkIGJlIHN0YWNrZWQgdXNpbmcgbXVsdGlwbGUgZ2x5cGhzLlxuICAgIC8vIFdlJ2xsIHVzZSBhIHNpbmdsZSBTVkcgdG8gYWNjb21wbGlzaCB0aGUgc2FtZSB0aGluZy5cbiAgICBzcGFuSGVpZ2h0ID0gaGVpZ2h0ICsgZW1QYWQ7XG4gICAgdGV4SGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHZpZXdCb3hIZWlnaHQgPSBNYXRoLmZsb29yKDEwMDAgKiBoZWlnaHQpICsgdmJQYWQ7XG4gICAgc3BhbiA9IGRlbGltaXRlcl9zcXJ0U3ZnKFwic3FydFRhbGxcIiwgc3BhbkhlaWdodCwgdmlld0JveEhlaWdodCwgb3B0aW9ucyk7XG4gICAgc3Bhbi5zdHlsZS5taW5XaWR0aCA9IFwiMC43NDJlbVwiO1xuICAgIGFkdmFuY2VXaWR0aCA9IDEuMDU2O1xuICB9XG5cbiAgc3Bhbi5oZWlnaHQgPSB0ZXhIZWlnaHQ7XG4gIHNwYW4uc3R5bGUuaGVpZ2h0ID0gc3BhbkhlaWdodCArIFwiZW1cIjtcbiAgcmV0dXJuIHtcbiAgICBzcGFuOiBzcGFuLFxuICAgIGFkdmFuY2VXaWR0aDogYWR2YW5jZVdpZHRoLFxuICAgIC8vIENhbGN1bGF0ZSB0aGUgYWN0dWFsIGxpbmUgd2lkdGguXG4gICAgLy8gVGhpcyBhY3R1YWxseSBzaG91bGQgZGVwZW5kIG9uIHRoZSBjaG9zZW4gZm9udCAtLSBlLmcuIFxcYm9sZG1hdGhcbiAgICAvLyBzaG91bGQgdXNlIHRoZSB0aGlja2VyIHN1cmQgc3ltYm9scyBmcm9tIGUuZy4gS2FUZVhfTWFpbi1Cb2xkLCBhbmRcbiAgICAvLyBoYXZlIHRoaWNrZXIgcnVsZXMuXG4gICAgcnVsZVdpZHRoOiBvcHRpb25zLmZvbnRNZXRyaWNzKCkuc3FydFJ1bGVUaGlja25lc3MgKiBzaXplTXVsdGlwbGllclxuICB9O1xufTsgLy8gVGhlcmUgYXJlIHRocmVlIGtpbmRzIG9mIGRlbGltaXRlcnMsIGRlbGltaXRlcnMgdGhhdCBzdGFjayB3aGVuIHRoZXkgYmVjb21lXG4vLyB0b28gbGFyZ2VcblxuXG52YXIgc3RhY2tMYXJnZURlbGltaXRlcnMgPSBbXCIoXCIsIFwiXFxcXGxwYXJlblwiLCBcIilcIiwgXCJcXFxccnBhcmVuXCIsIFwiW1wiLCBcIlxcXFxsYnJhY2tcIiwgXCJdXCIsIFwiXFxcXHJicmFja1wiLCBcIlxcXFx7XCIsIFwiXFxcXGxicmFjZVwiLCBcIlxcXFx9XCIsIFwiXFxcXHJicmFjZVwiLCBcIlxcXFxsZmxvb3JcIiwgXCJcXFxccmZsb29yXCIsIFwiXFx1MjMwQVwiLCBcIlxcdTIzMEJcIiwgXCJcXFxcbGNlaWxcIiwgXCJcXFxccmNlaWxcIiwgXCJcXHUyMzA4XCIsIFwiXFx1MjMwOVwiLCBcIlxcXFxzdXJkXCJdOyAvLyBkZWxpbWl0ZXJzIHRoYXQgYWx3YXlzIHN0YWNrXG5cbnZhciBzdGFja0Fsd2F5c0RlbGltaXRlcnMgPSBbXCJcXFxcdXBhcnJvd1wiLCBcIlxcXFxkb3duYXJyb3dcIiwgXCJcXFxcdXBkb3duYXJyb3dcIiwgXCJcXFxcVXBhcnJvd1wiLCBcIlxcXFxEb3duYXJyb3dcIiwgXCJcXFxcVXBkb3duYXJyb3dcIiwgXCJ8XCIsIFwiXFxcXHxcIiwgXCJcXFxcdmVydFwiLCBcIlxcXFxWZXJ0XCIsIFwiXFxcXGx2ZXJ0XCIsIFwiXFxcXHJ2ZXJ0XCIsIFwiXFxcXGxWZXJ0XCIsIFwiXFxcXHJWZXJ0XCIsIFwiXFxcXGxncm91cFwiLCBcIlxcXFxyZ3JvdXBcIiwgXCJcXHUyN0VFXCIsIFwiXFx1MjdFRlwiLCBcIlxcXFxsbW91c3RhY2hlXCIsIFwiXFxcXHJtb3VzdGFjaGVcIiwgXCJcXHUyM0IwXCIsIFwiXFx1MjNCMVwiXTsgLy8gYW5kIGRlbGltaXRlcnMgdGhhdCBuZXZlciBzdGFja1xuXG52YXIgc3RhY2tOZXZlckRlbGltaXRlcnMgPSBbXCI8XCIsIFwiPlwiLCBcIlxcXFxsYW5nbGVcIiwgXCJcXFxccmFuZ2xlXCIsIFwiL1wiLCBcIlxcXFxiYWNrc2xhc2hcIiwgXCJcXFxcbHRcIiwgXCJcXFxcZ3RcIl07IC8vIE1ldHJpY3Mgb2YgdGhlIGRpZmZlcmVudCBzaXplcy4gRm91bmQgYnkgbG9va2luZyBhdCBUZVgncyBvdXRwdXQgb2Zcbi8vICRcXGJpZ2x8IC8vIFxcQmlnbHwgXFxiaWdnbHwgXFxCaWdnbHwgXFxzaG93bGlzdHMkXG4vLyBVc2VkIHRvIGNyZWF0ZSBzdGFja2VkIGRlbGltaXRlcnMgb2YgYXBwcm9wcmlhdGUgc2l6ZXMgaW4gbWFrZVNpemVkRGVsaW0uXG5cbnZhciBzaXplVG9NYXhIZWlnaHQgPSBbMCwgMS4yLCAxLjgsIDIuNCwgMy4wXTtcbi8qKlxuICogVXNlZCB0byBjcmVhdGUgYSBkZWxpbWl0ZXIgb2YgYSBzcGVjaWZpYyBzaXplLCB3aGVyZSBgc2l6ZWAgaXMgMSwgMiwgMywgb3IgNC5cbiAqL1xuXG52YXIgZGVsaW1pdGVyX21ha2VTaXplZERlbGltID0gZnVuY3Rpb24gbWFrZVNpemVkRGVsaW0oZGVsaW0sIHNpemUsIG9wdGlvbnMsIG1vZGUsIGNsYXNzZXMpIHtcbiAgLy8gPCBhbmQgPiB0dXJuIGludG8gXFxsYW5nbGUgYW5kIFxccmFuZ2xlIGluIGRlbGltaXRlcnNcbiAgaWYgKGRlbGltID09PSBcIjxcIiB8fCBkZWxpbSA9PT0gXCJcXFxcbHRcIiB8fCBkZWxpbSA9PT0gXCJcXHUyN0U4XCIpIHtcbiAgICBkZWxpbSA9IFwiXFxcXGxhbmdsZVwiO1xuICB9IGVsc2UgaWYgKGRlbGltID09PSBcIj5cIiB8fCBkZWxpbSA9PT0gXCJcXFxcZ3RcIiB8fCBkZWxpbSA9PT0gXCJcXHUyN0U5XCIpIHtcbiAgICBkZWxpbSA9IFwiXFxcXHJhbmdsZVwiO1xuICB9IC8vIFNpemVkIGRlbGltaXRlcnMgYXJlIG5ldmVyIGNlbnRlcmVkLlxuXG5cbiAgaWYgKHV0aWxzLmNvbnRhaW5zKHN0YWNrTGFyZ2VEZWxpbWl0ZXJzLCBkZWxpbSkgfHwgdXRpbHMuY29udGFpbnMoc3RhY2tOZXZlckRlbGltaXRlcnMsIGRlbGltKSkge1xuICAgIHJldHVybiBkZWxpbWl0ZXJfbWFrZUxhcmdlRGVsaW0oZGVsaW0sIHNpemUsIGZhbHNlLCBvcHRpb25zLCBtb2RlLCBjbGFzc2VzKTtcbiAgfSBlbHNlIGlmICh1dGlscy5jb250YWlucyhzdGFja0Fsd2F5c0RlbGltaXRlcnMsIGRlbGltKSkge1xuICAgIHJldHVybiBkZWxpbWl0ZXJfbWFrZVN0YWNrZWREZWxpbShkZWxpbSwgc2l6ZVRvTWF4SGVpZ2h0W3NpemVdLCBmYWxzZSwgb3B0aW9ucywgbW9kZSwgY2xhc3Nlcyk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiSWxsZWdhbCBkZWxpbWl0ZXI6ICdcIiArIGRlbGltICsgXCInXCIpO1xuICB9XG59O1xuLyoqXG4gKiBUaGVyZSBhcmUgdGhyZWUgZGlmZmVyZW50IHNlcXVlbmNlcyBvZiBkZWxpbWl0ZXIgc2l6ZXMgdGhhdCB0aGUgZGVsaW1pdGVyc1xuICogZm9sbG93IGRlcGVuZGluZyBvbiB0aGUga2luZCBvZiBkZWxpbWl0ZXIuIFRoaXMgaXMgdXNlZCB3aGVuIGNyZWF0aW5nIGN1c3RvbVxuICogc2l6ZWQgZGVsaW1pdGVycyB0byBkZWNpZGUgd2hldGhlciB0byBjcmVhdGUgYSBzbWFsbCwgbGFyZ2UsIG9yIHN0YWNrZWRcbiAqIGRlbGltaXRlci5cbiAqXG4gKiBJbiByZWFsIFRlWCwgdGhlc2Ugc2VxdWVuY2VzIGFyZW4ndCBleHBsaWNpdGx5IGRlZmluZWQsIGJ1dCBhcmUgaW5zdGVhZFxuICogZGVmaW5lZCBpbnNpZGUgdGhlIGZvbnQgbWV0cmljcy4gU2luY2UgdGhlcmUgYXJlIG9ubHkgdGhyZWUgc2VxdWVuY2VzIHRoYXRcbiAqIGFyZSBwb3NzaWJsZSBmb3IgdGhlIGRlbGltaXRlcnMgdGhhdCBUZVggZGVmaW5lcywgaXQgaXMgZWFzaWVyIHRvIGp1c3QgZW5jb2RlXG4gKiB0aGVtIGV4cGxpY2l0bHkgaGVyZS5cbiAqL1xuXG5cbi8vIERlbGltaXRlcnMgdGhhdCBuZXZlciBzdGFjayB0cnkgc21hbGwgZGVsaW1pdGVycyBhbmQgbGFyZ2UgZGVsaW1pdGVycyBvbmx5XG52YXIgc3RhY2tOZXZlckRlbGltaXRlclNlcXVlbmNlID0gW3tcbiAgdHlwZTogXCJzbWFsbFwiLFxuICBzdHlsZTogc3JjX1N0eWxlLlNDUklQVFNDUklQVFxufSwge1xuICB0eXBlOiBcInNtYWxsXCIsXG4gIHN0eWxlOiBzcmNfU3R5bGUuU0NSSVBUXG59LCB7XG4gIHR5cGU6IFwic21hbGxcIixcbiAgc3R5bGU6IHNyY19TdHlsZS5URVhUXG59LCB7XG4gIHR5cGU6IFwibGFyZ2VcIixcbiAgc2l6ZTogMVxufSwge1xuICB0eXBlOiBcImxhcmdlXCIsXG4gIHNpemU6IDJcbn0sIHtcbiAgdHlwZTogXCJsYXJnZVwiLFxuICBzaXplOiAzXG59LCB7XG4gIHR5cGU6IFwibGFyZ2VcIixcbiAgc2l6ZTogNFxufV07IC8vIERlbGltaXRlcnMgdGhhdCBhbHdheXMgc3RhY2sgdHJ5IHRoZSBzbWFsbCBkZWxpbWl0ZXJzIGZpcnN0LCB0aGVuIHN0YWNrXG5cbnZhciBzdGFja0Fsd2F5c0RlbGltaXRlclNlcXVlbmNlID0gW3tcbiAgdHlwZTogXCJzbWFsbFwiLFxuICBzdHlsZTogc3JjX1N0eWxlLlNDUklQVFNDUklQVFxufSwge1xuICB0eXBlOiBcInNtYWxsXCIsXG4gIHN0eWxlOiBzcmNfU3R5bGUuU0NSSVBUXG59LCB7XG4gIHR5cGU6IFwic21hbGxcIixcbiAgc3R5bGU6IHNyY19TdHlsZS5URVhUXG59LCB7XG4gIHR5cGU6IFwic3RhY2tcIlxufV07IC8vIERlbGltaXRlcnMgdGhhdCBzdGFjayB3aGVuIGxhcmdlIHRyeSB0aGUgc21hbGwgYW5kIHRoZW4gbGFyZ2UgZGVsaW1pdGVycywgYW5kXG4vLyBzdGFjayBhZnRlcndhcmRzXG5cbnZhciBzdGFja0xhcmdlRGVsaW1pdGVyU2VxdWVuY2UgPSBbe1xuICB0eXBlOiBcInNtYWxsXCIsXG4gIHN0eWxlOiBzcmNfU3R5bGUuU0NSSVBUU0NSSVBUXG59LCB7XG4gIHR5cGU6IFwic21hbGxcIixcbiAgc3R5bGU6IHNyY19TdHlsZS5TQ1JJUFRcbn0sIHtcbiAgdHlwZTogXCJzbWFsbFwiLFxuICBzdHlsZTogc3JjX1N0eWxlLlRFWFRcbn0sIHtcbiAgdHlwZTogXCJsYXJnZVwiLFxuICBzaXplOiAxXG59LCB7XG4gIHR5cGU6IFwibGFyZ2VcIixcbiAgc2l6ZTogMlxufSwge1xuICB0eXBlOiBcImxhcmdlXCIsXG4gIHNpemU6IDNcbn0sIHtcbiAgdHlwZTogXCJsYXJnZVwiLFxuICBzaXplOiA0XG59LCB7XG4gIHR5cGU6IFwic3RhY2tcIlxufV07XG4vKipcbiAqIEdldCB0aGUgZm9udCB1c2VkIGluIGEgZGVsaW1pdGVyIGJhc2VkIG9uIHdoYXQga2luZCBvZiBkZWxpbWl0ZXIgaXQgaXMuXG4gKiBUT0RPKCM5NjMpIFVzZSBtb3JlIHNwZWNpZmljIGZvbnQgZmFtaWx5IHJldHVybiB0eXBlIG9uY2UgdGhhdCBpcyBpbnRyb2R1Y2VkLlxuICovXG5cbnZhciBkZWxpbVR5cGVUb0ZvbnQgPSBmdW5jdGlvbiBkZWxpbVR5cGVUb0ZvbnQodHlwZSkge1xuICBpZiAodHlwZS50eXBlID09PSBcInNtYWxsXCIpIHtcbiAgICByZXR1cm4gXCJNYWluLVJlZ3VsYXJcIjtcbiAgfSBlbHNlIGlmICh0eXBlLnR5cGUgPT09IFwibGFyZ2VcIikge1xuICAgIHJldHVybiBcIlNpemVcIiArIHR5cGUuc2l6ZSArIFwiLVJlZ3VsYXJcIjtcbiAgfSBlbHNlIGlmICh0eXBlLnR5cGUgPT09IFwic3RhY2tcIikge1xuICAgIHJldHVybiBcIlNpemU0LVJlZ3VsYXJcIjtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBZGQgc3VwcG9ydCBmb3IgZGVsaW0gdHlwZSAnXCIgKyB0eXBlLnR5cGUgKyBcIicgaGVyZS5cIik7XG4gIH1cbn07XG4vKipcbiAqIFRyYXZlcnNlIGEgc2VxdWVuY2Ugb2YgdHlwZXMgb2YgZGVsaW1pdGVycyB0byBkZWNpZGUgd2hhdCBraW5kIG9mIGRlbGltaXRlclxuICogc2hvdWxkIGJlIHVzZWQgdG8gY3JlYXRlIGEgZGVsaW1pdGVyIG9mIHRoZSBnaXZlbiBoZWlnaHQrZGVwdGguXG4gKi9cblxuXG52YXIgdHJhdmVyc2VTZXF1ZW5jZSA9IGZ1bmN0aW9uIHRyYXZlcnNlU2VxdWVuY2UoZGVsaW0sIGhlaWdodCwgc2VxdWVuY2UsIG9wdGlvbnMpIHtcbiAgLy8gSGVyZSwgd2UgY2hvb3NlIHRoZSBpbmRleCB3ZSBzaG91bGQgc3RhcnQgYXQgaW4gdGhlIHNlcXVlbmNlcy4gSW4gc21hbGxlclxuICAvLyBzaXplcyAod2hpY2ggY29ycmVzcG9uZCB0byBsYXJnZXIgbnVtYmVycyBpbiBzdHlsZS5zaXplKSB3ZSBzdGFydCBlYXJsaWVyXG4gIC8vIGluIHRoZSBzZXF1ZW5jZS4gVGh1cywgc2NyaXB0c2NyaXB0IHN0YXJ0cyBhdCBpbmRleCAzLTM9MCwgc2NyaXB0IHN0YXJ0c1xuICAvLyBhdCBpbmRleCAzLTI9MSwgdGV4dCBzdGFydHMgYXQgMy0xPTIsIGFuZCBkaXNwbGF5IHN0YXJ0cyBhdCBtaW4oMiwzLTApPTJcbiAgdmFyIHN0YXJ0ID0gTWF0aC5taW4oMiwgMyAtIG9wdGlvbnMuc3R5bGUuc2l6ZSk7XG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgc2VxdWVuY2UubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc2VxdWVuY2VbaV0udHlwZSA9PT0gXCJzdGFja1wiKSB7XG4gICAgICAvLyBUaGlzIGlzIGFsd2F5cyB0aGUgbGFzdCBkZWxpbWl0ZXIsIHNvIHdlIGp1c3QgYnJlYWsgdGhlIGxvb3Agbm93LlxuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgdmFyIG1ldHJpY3MgPSBkZWxpbWl0ZXJfZ2V0TWV0cmljcyhkZWxpbSwgZGVsaW1UeXBlVG9Gb250KHNlcXVlbmNlW2ldKSwgXCJtYXRoXCIpO1xuICAgIHZhciBoZWlnaHREZXB0aCA9IG1ldHJpY3MuaGVpZ2h0ICsgbWV0cmljcy5kZXB0aDsgLy8gU21hbGwgZGVsaW1pdGVycyBhcmUgc2NhbGVkIGRvd24gdmVyc2lvbnMgb2YgdGhlIHNhbWUgZm9udCwgc28gd2VcbiAgICAvLyBhY2NvdW50IGZvciB0aGUgc3R5bGUgY2hhbmdlIHNpemUuXG5cbiAgICBpZiAoc2VxdWVuY2VbaV0udHlwZSA9PT0gXCJzbWFsbFwiKSB7XG4gICAgICB2YXIgbmV3T3B0aW9ucyA9IG9wdGlvbnMuaGF2aW5nQmFzZVN0eWxlKHNlcXVlbmNlW2ldLnN0eWxlKTtcbiAgICAgIGhlaWdodERlcHRoICo9IG5ld09wdGlvbnMuc2l6ZU11bHRpcGxpZXI7XG4gICAgfSAvLyBDaGVjayBpZiB0aGUgZGVsaW1pdGVyIGF0IHRoaXMgc2l6ZSB3b3JrcyBmb3IgdGhlIGdpdmVuIGhlaWdodC5cblxuXG4gICAgaWYgKGhlaWdodERlcHRoID4gaGVpZ2h0KSB7XG4gICAgICByZXR1cm4gc2VxdWVuY2VbaV07XG4gICAgfVxuICB9IC8vIElmIHdlIHJlYWNoZWQgdGhlIGVuZCBvZiB0aGUgc2VxdWVuY2UsIHJldHVybiB0aGUgbGFzdCBzZXF1ZW5jZSBlbGVtZW50LlxuXG5cbiAgcmV0dXJuIHNlcXVlbmNlW3NlcXVlbmNlLmxlbmd0aCAtIDFdO1xufTtcbi8qKlxuICogTWFrZSBhIGRlbGltaXRlciBvZiBhIGdpdmVuIGhlaWdodCtkZXB0aCwgd2l0aCBvcHRpb25hbCBjZW50ZXJpbmcuIEhlcmUsIHdlXG4gKiB0cmF2ZXJzZSB0aGUgc2VxdWVuY2VzLCBhbmQgY3JlYXRlIGEgZGVsaW1pdGVyIHRoYXQgdGhlIHNlcXVlbmNlIHRlbGxzIHVzIHRvLlxuICovXG5cblxudmFyIGRlbGltaXRlcl9tYWtlQ3VzdG9tU2l6ZWREZWxpbSA9IGZ1bmN0aW9uIG1ha2VDdXN0b21TaXplZERlbGltKGRlbGltLCBoZWlnaHQsIGNlbnRlciwgb3B0aW9ucywgbW9kZSwgY2xhc3Nlcykge1xuICBpZiAoZGVsaW0gPT09IFwiPFwiIHx8IGRlbGltID09PSBcIlxcXFxsdFwiIHx8IGRlbGltID09PSBcIlxcdTI3RThcIikge1xuICAgIGRlbGltID0gXCJcXFxcbGFuZ2xlXCI7XG4gIH0gZWxzZSBpZiAoZGVsaW0gPT09IFwiPlwiIHx8IGRlbGltID09PSBcIlxcXFxndFwiIHx8IGRlbGltID09PSBcIlxcdTI3RTlcIikge1xuICAgIGRlbGltID0gXCJcXFxccmFuZ2xlXCI7XG4gIH0gLy8gRGVjaWRlIHdoYXQgc2VxdWVuY2UgdG8gdXNlXG5cblxuICB2YXIgc2VxdWVuY2U7XG5cbiAgaWYgKHV0aWxzLmNvbnRhaW5zKHN0YWNrTmV2ZXJEZWxpbWl0ZXJzLCBkZWxpbSkpIHtcbiAgICBzZXF1ZW5jZSA9IHN0YWNrTmV2ZXJEZWxpbWl0ZXJTZXF1ZW5jZTtcbiAgfSBlbHNlIGlmICh1dGlscy5jb250YWlucyhzdGFja0xhcmdlRGVsaW1pdGVycywgZGVsaW0pKSB7XG4gICAgc2VxdWVuY2UgPSBzdGFja0xhcmdlRGVsaW1pdGVyU2VxdWVuY2U7XG4gIH0gZWxzZSB7XG4gICAgc2VxdWVuY2UgPSBzdGFja0Fsd2F5c0RlbGltaXRlclNlcXVlbmNlO1xuICB9IC8vIExvb2sgdGhyb3VnaCB0aGUgc2VxdWVuY2VcblxuXG4gIHZhciBkZWxpbVR5cGUgPSB0cmF2ZXJzZVNlcXVlbmNlKGRlbGltLCBoZWlnaHQsIHNlcXVlbmNlLCBvcHRpb25zKTsgLy8gR2V0IHRoZSBkZWxpbWl0ZXIgZnJvbSBmb250IGdseXBocy5cbiAgLy8gRGVwZW5kaW5nIG9uIHRoZSBzZXF1ZW5jZSBlbGVtZW50IHdlIGRlY2lkZWQgb24sIGNhbGwgdGhlXG4gIC8vIGFwcHJvcHJpYXRlIGZ1bmN0aW9uLlxuXG4gIGlmIChkZWxpbVR5cGUudHlwZSA9PT0gXCJzbWFsbFwiKSB7XG4gICAgcmV0dXJuIGRlbGltaXRlcl9tYWtlU21hbGxEZWxpbShkZWxpbSwgZGVsaW1UeXBlLnN0eWxlLCBjZW50ZXIsIG9wdGlvbnMsIG1vZGUsIGNsYXNzZXMpO1xuICB9IGVsc2UgaWYgKGRlbGltVHlwZS50eXBlID09PSBcImxhcmdlXCIpIHtcbiAgICByZXR1cm4gZGVsaW1pdGVyX21ha2VMYXJnZURlbGltKGRlbGltLCBkZWxpbVR5cGUuc2l6ZSwgY2VudGVyLCBvcHRpb25zLCBtb2RlLCBjbGFzc2VzKTtcbiAgfSBlbHNlXG4gICAgLyogaWYgKGRlbGltVHlwZS50eXBlID09PSBcInN0YWNrXCIpICovXG4gICAge1xuICAgICAgcmV0dXJuIGRlbGltaXRlcl9tYWtlU3RhY2tlZERlbGltKGRlbGltLCBoZWlnaHQsIGNlbnRlciwgb3B0aW9ucywgbW9kZSwgY2xhc3Nlcyk7XG4gICAgfVxufTtcbi8qKlxuICogTWFrZSBhIGRlbGltaXRlciBmb3IgdXNlIHdpdGggYFxcbGVmdGAgYW5kIGBcXHJpZ2h0YCwgZ2l2ZW4gYSBoZWlnaHQgYW5kIGRlcHRoXG4gKiBvZiBhbiBleHByZXNzaW9uIHRoYXQgdGhlIGRlbGltaXRlcnMgc3Vycm91bmQuXG4gKi9cblxuXG52YXIgbWFrZUxlZnRSaWdodERlbGltID0gZnVuY3Rpb24gbWFrZUxlZnRSaWdodERlbGltKGRlbGltLCBoZWlnaHQsIGRlcHRoLCBvcHRpb25zLCBtb2RlLCBjbGFzc2VzKSB7XG4gIC8vIFdlIGFsd2F5cyBjZW50ZXIgXFxsZWZ0L1xccmlnaHQgZGVsaW1pdGVycywgc28gdGhlIGF4aXMgaXMgYWx3YXlzIHNoaWZ0ZWRcbiAgdmFyIGF4aXNIZWlnaHQgPSBvcHRpb25zLmZvbnRNZXRyaWNzKCkuYXhpc0hlaWdodCAqIG9wdGlvbnMuc2l6ZU11bHRpcGxpZXI7IC8vIFRha2VuIGZyb20gVGVYIHNvdXJjZSwgdGV4LndlYiwgZnVuY3Rpb24gbWFrZV9sZWZ0X3JpZ2h0XG5cbiAgdmFyIGRlbGltaXRlckZhY3RvciA9IDkwMTtcbiAgdmFyIGRlbGltaXRlckV4dGVuZCA9IDUuMCAvIG9wdGlvbnMuZm9udE1ldHJpY3MoKS5wdFBlckVtO1xuICB2YXIgbWF4RGlzdEZyb21BeGlzID0gTWF0aC5tYXgoaGVpZ2h0IC0gYXhpc0hlaWdodCwgZGVwdGggKyBheGlzSGVpZ2h0KTtcbiAgdmFyIHRvdGFsSGVpZ2h0ID0gTWF0aC5tYXgoIC8vIEluIHJlYWwgVGVYLCBjYWxjdWxhdGlvbnMgYXJlIGRvbmUgdXNpbmcgaW50ZWdyYWwgdmFsdWVzIHdoaWNoIGFyZVxuICAvLyA2NTUzNiBwZXIgcHQsIG9yIDY1NTM2MCBwZXIgZW0uIFNvLCB0aGUgZGl2aXNpb24gaGVyZSB0cnVuY2F0ZXMgaW5cbiAgLy8gVGVYIGJ1dCBkb2Vzbid0IGhlcmUsIHByb2R1Y2luZyBkaWZmZXJlbnQgcmVzdWx0cy4gSWYgd2Ugd2FudGVkIHRvXG4gIC8vIGV4YWN0bHkgbWF0Y2ggVGVYJ3MgY2FsY3VsYXRpb24sIHdlIGNvdWxkIGRvXG4gIC8vICAgTWF0aC5mbG9vcig2NTUzNjAgKiBtYXhEaXN0RnJvbUF4aXMgLyA1MDApICpcbiAgLy8gICAgZGVsaW1pdGVyRmFjdG9yIC8gNjU1MzYwXG4gIC8vIChUbyBzZWUgdGhlIGRpZmZlcmVuY2UsIGNvbXBhcmVcbiAgLy8gICAgeF57eF57XFxsZWZ0KFxccnVsZXswLjFlbX17MC42OGVtfVxccmlnaHQpfX1cbiAgLy8gaW4gVGVYIGFuZCBLYVRlWClcbiAgbWF4RGlzdEZyb21BeGlzIC8gNTAwICogZGVsaW1pdGVyRmFjdG9yLCAyICogbWF4RGlzdEZyb21BeGlzIC0gZGVsaW1pdGVyRXh0ZW5kKTsgLy8gRmluYWxseSwgd2UgZGVmZXIgdG8gYG1ha2VDdXN0b21TaXplZERlbGltYCB3aXRoIG91ciBjYWxjdWxhdGVkIHRvdGFsXG4gIC8vIGhlaWdodFxuXG4gIHJldHVybiBkZWxpbWl0ZXJfbWFrZUN1c3RvbVNpemVkRGVsaW0oZGVsaW0sIHRvdGFsSGVpZ2h0LCB0cnVlLCBvcHRpb25zLCBtb2RlLCBjbGFzc2VzKTtcbn07XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGRlbGltaXRlciA9ICh7XG4gIHNxcnRJbWFnZTogbWFrZVNxcnRJbWFnZSxcbiAgc2l6ZWREZWxpbTogZGVsaW1pdGVyX21ha2VTaXplZERlbGltLFxuICBjdXN0b21TaXplZERlbGltOiBkZWxpbWl0ZXJfbWFrZUN1c3RvbVNpemVkRGVsaW0sXG4gIGxlZnRSaWdodERlbGltOiBtYWtlTGVmdFJpZ2h0RGVsaW1cbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL2RlbGltc2l6aW5nLmpzXG5cblxuXG5cblxuXG5cblxuXG4vLyBFeHRyYSBkYXRhIG5lZWRlZCBmb3IgdGhlIGRlbGltaXRlciBoYW5kbGVyIGRvd24gYmVsb3dcbnZhciBkZWxpbWl0ZXJTaXplcyA9IHtcbiAgXCJcXFxcYmlnbFwiOiB7XG4gICAgbWNsYXNzOiBcIm1vcGVuXCIsXG4gICAgc2l6ZTogMVxuICB9LFxuICBcIlxcXFxCaWdsXCI6IHtcbiAgICBtY2xhc3M6IFwibW9wZW5cIixcbiAgICBzaXplOiAyXG4gIH0sXG4gIFwiXFxcXGJpZ2dsXCI6IHtcbiAgICBtY2xhc3M6IFwibW9wZW5cIixcbiAgICBzaXplOiAzXG4gIH0sXG4gIFwiXFxcXEJpZ2dsXCI6IHtcbiAgICBtY2xhc3M6IFwibW9wZW5cIixcbiAgICBzaXplOiA0XG4gIH0sXG4gIFwiXFxcXGJpZ3JcIjoge1xuICAgIG1jbGFzczogXCJtY2xvc2VcIixcbiAgICBzaXplOiAxXG4gIH0sXG4gIFwiXFxcXEJpZ3JcIjoge1xuICAgIG1jbGFzczogXCJtY2xvc2VcIixcbiAgICBzaXplOiAyXG4gIH0sXG4gIFwiXFxcXGJpZ2dyXCI6IHtcbiAgICBtY2xhc3M6IFwibWNsb3NlXCIsXG4gICAgc2l6ZTogM1xuICB9LFxuICBcIlxcXFxCaWdnclwiOiB7XG4gICAgbWNsYXNzOiBcIm1jbG9zZVwiLFxuICAgIHNpemU6IDRcbiAgfSxcbiAgXCJcXFxcYmlnbVwiOiB7XG4gICAgbWNsYXNzOiBcIm1yZWxcIixcbiAgICBzaXplOiAxXG4gIH0sXG4gIFwiXFxcXEJpZ21cIjoge1xuICAgIG1jbGFzczogXCJtcmVsXCIsXG4gICAgc2l6ZTogMlxuICB9LFxuICBcIlxcXFxiaWdnbVwiOiB7XG4gICAgbWNsYXNzOiBcIm1yZWxcIixcbiAgICBzaXplOiAzXG4gIH0sXG4gIFwiXFxcXEJpZ2dtXCI6IHtcbiAgICBtY2xhc3M6IFwibXJlbFwiLFxuICAgIHNpemU6IDRcbiAgfSxcbiAgXCJcXFxcYmlnXCI6IHtcbiAgICBtY2xhc3M6IFwibW9yZFwiLFxuICAgIHNpemU6IDFcbiAgfSxcbiAgXCJcXFxcQmlnXCI6IHtcbiAgICBtY2xhc3M6IFwibW9yZFwiLFxuICAgIHNpemU6IDJcbiAgfSxcbiAgXCJcXFxcYmlnZ1wiOiB7XG4gICAgbWNsYXNzOiBcIm1vcmRcIixcbiAgICBzaXplOiAzXG4gIH0sXG4gIFwiXFxcXEJpZ2dcIjoge1xuICAgIG1jbGFzczogXCJtb3JkXCIsXG4gICAgc2l6ZTogNFxuICB9XG59O1xudmFyIGRlbGltaXRlcnMgPSBbXCIoXCIsIFwiXFxcXGxwYXJlblwiLCBcIilcIiwgXCJcXFxccnBhcmVuXCIsIFwiW1wiLCBcIlxcXFxsYnJhY2tcIiwgXCJdXCIsIFwiXFxcXHJicmFja1wiLCBcIlxcXFx7XCIsIFwiXFxcXGxicmFjZVwiLCBcIlxcXFx9XCIsIFwiXFxcXHJicmFjZVwiLCBcIlxcXFxsZmxvb3JcIiwgXCJcXFxccmZsb29yXCIsIFwiXFx1MjMwQVwiLCBcIlxcdTIzMEJcIiwgXCJcXFxcbGNlaWxcIiwgXCJcXFxccmNlaWxcIiwgXCJcXHUyMzA4XCIsIFwiXFx1MjMwOVwiLCBcIjxcIiwgXCI+XCIsIFwiXFxcXGxhbmdsZVwiLCBcIlxcdTI3RThcIiwgXCJcXFxccmFuZ2xlXCIsIFwiXFx1MjdFOVwiLCBcIlxcXFxsdFwiLCBcIlxcXFxndFwiLCBcIlxcXFxsdmVydFwiLCBcIlxcXFxydmVydFwiLCBcIlxcXFxsVmVydFwiLCBcIlxcXFxyVmVydFwiLCBcIlxcXFxsZ3JvdXBcIiwgXCJcXFxccmdyb3VwXCIsIFwiXFx1MjdFRVwiLCBcIlxcdTI3RUZcIiwgXCJcXFxcbG1vdXN0YWNoZVwiLCBcIlxcXFxybW91c3RhY2hlXCIsIFwiXFx1MjNCMFwiLCBcIlxcdTIzQjFcIiwgXCIvXCIsIFwiXFxcXGJhY2tzbGFzaFwiLCBcInxcIiwgXCJcXFxcdmVydFwiLCBcIlxcXFx8XCIsIFwiXFxcXFZlcnRcIiwgXCJcXFxcdXBhcnJvd1wiLCBcIlxcXFxVcGFycm93XCIsIFwiXFxcXGRvd25hcnJvd1wiLCBcIlxcXFxEb3duYXJyb3dcIiwgXCJcXFxcdXBkb3duYXJyb3dcIiwgXCJcXFxcVXBkb3duYXJyb3dcIiwgXCIuXCJdO1xuXG4vLyBEZWxpbWl0ZXIgZnVuY3Rpb25zXG5mdW5jdGlvbiBjaGVja0RlbGltaXRlcihkZWxpbSwgY29udGV4dCkge1xuICB2YXIgc3ltRGVsaW0gPSBjaGVja1N5bWJvbE5vZGVUeXBlKGRlbGltKTtcblxuICBpZiAoc3ltRGVsaW0gJiYgdXRpbHMuY29udGFpbnMoZGVsaW1pdGVycywgc3ltRGVsaW0udGV4dCkpIHtcbiAgICByZXR1cm4gc3ltRGVsaW07XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiSW52YWxpZCBkZWxpbWl0ZXI6ICdcIiArIChzeW1EZWxpbSA/IHN5bURlbGltLnRleHQgOiBKU09OLnN0cmluZ2lmeShkZWxpbSkpICsgXCInIGFmdGVyICdcIiArIGNvbnRleHQuZnVuY05hbWUgKyBcIidcIiwgZGVsaW0pO1xuICB9XG59XG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJkZWxpbXNpemluZ1wiLFxuICBuYW1lczogW1wiXFxcXGJpZ2xcIiwgXCJcXFxcQmlnbFwiLCBcIlxcXFxiaWdnbFwiLCBcIlxcXFxCaWdnbFwiLCBcIlxcXFxiaWdyXCIsIFwiXFxcXEJpZ3JcIiwgXCJcXFxcYmlnZ3JcIiwgXCJcXFxcQmlnZ3JcIiwgXCJcXFxcYmlnbVwiLCBcIlxcXFxCaWdtXCIsIFwiXFxcXGJpZ2dtXCIsIFwiXFxcXEJpZ2dtXCIsIFwiXFxcXGJpZ1wiLCBcIlxcXFxCaWdcIiwgXCJcXFxcYmlnZ1wiLCBcIlxcXFxCaWdnXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDFcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihjb250ZXh0LCBhcmdzKSB7XG4gICAgdmFyIGRlbGltID0gY2hlY2tEZWxpbWl0ZXIoYXJnc1swXSwgY29udGV4dCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiZGVsaW1zaXppbmdcIixcbiAgICAgIG1vZGU6IGNvbnRleHQucGFyc2VyLm1vZGUsXG4gICAgICBzaXplOiBkZWxpbWl0ZXJTaXplc1tjb250ZXh0LmZ1bmNOYW1lXS5zaXplLFxuICAgICAgbWNsYXNzOiBkZWxpbWl0ZXJTaXplc1tjb250ZXh0LmZ1bmNOYW1lXS5tY2xhc3MsXG4gICAgICBkZWxpbTogZGVsaW0udGV4dFxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIGlmIChncm91cC5kZWxpbSA9PT0gXCIuXCIpIHtcbiAgICAgIC8vIEVtcHR5IGRlbGltaXRlcnMgc3RpbGwgY291bnQgYXMgZWxlbWVudHMsIGV2ZW4gdGhvdWdoIHRoZXkgZG9uJ3RcbiAgICAgIC8vIHNob3cgYW55dGhpbmcuXG4gICAgICByZXR1cm4gYnVpbGRDb21tb24ubWFrZVNwYW4oW2dyb3VwLm1jbGFzc10pO1xuICAgIH0gLy8gVXNlIGRlbGltaXRlci5zaXplZERlbGltIHRvIGdlbmVyYXRlIHRoZSBkZWxpbWl0ZXIuXG5cblxuICAgIHJldHVybiBkZWxpbWl0ZXIuc2l6ZWREZWxpbShncm91cC5kZWxpbSwgZ3JvdXAuc2l6ZSwgb3B0aW9ucywgZ3JvdXAubW9kZSwgW2dyb3VwLm1jbGFzc10pO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gW107XG5cbiAgICBpZiAoZ3JvdXAuZGVsaW0gIT09IFwiLlwiKSB7XG4gICAgICBjaGlsZHJlbi5wdXNoKGJ1aWxkTWF0aE1MX21ha2VUZXh0KGdyb3VwLmRlbGltLCBncm91cC5tb2RlKSk7XG4gICAgfVxuXG4gICAgdmFyIG5vZGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1vXCIsIGNoaWxkcmVuKTtcblxuICAgIGlmIChncm91cC5tY2xhc3MgPT09IFwibW9wZW5cIiB8fCBncm91cC5tY2xhc3MgPT09IFwibWNsb3NlXCIpIHtcbiAgICAgIC8vIE9ubHkgc29tZSBvZiB0aGUgZGVsaW1zaXppbmcgZnVuY3Rpb25zIGFjdCBhcyBmZW5jZXMsIGFuZCB0aGV5XG4gICAgICAvLyByZXR1cm4gXCJtb3BlblwiIG9yIFwibWNsb3NlXCIgbWNsYXNzLlxuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJmZW5jZVwiLCBcInRydWVcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEV4cGxpY2l0bHkgZGlzYWJsZSBmZW5jaW5nIGlmIGl0J3Mgbm90IGEgZmVuY2UsIHRvIG92ZXJyaWRlIHRoZVxuICAgICAgLy8gZGVmYXVsdHMuXG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShcImZlbmNlXCIsIFwiZmFsc2VcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBhc3NlcnRQYXJzZWQoZ3JvdXApIHtcbiAgaWYgKCFncm91cC5ib2R5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQnVnOiBUaGUgbGVmdHJpZ2h0IFBhcnNlTm9kZSB3YXNuJ3QgZnVsbHkgcGFyc2VkLlwiKTtcbiAgfVxufVxuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwibGVmdHJpZ2h0LXJpZ2h0XCIsXG4gIG5hbWVzOiBbXCJcXFxccmlnaHRcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKGNvbnRleHQsIGFyZ3MpIHtcbiAgICAvLyBcXGxlZnQgY2FzZSBiZWxvdyB0cmlnZ2VycyBwYXJzaW5nIG9mIFxccmlnaHQgaW5cbiAgICAvLyAgIGBjb25zdCByaWdodCA9IHBhcnNlci5wYXJzZUZ1bmN0aW9uKCk7YFxuICAgIC8vIHVzZXMgdGhpcyByZXR1cm4gdmFsdWUuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwibGVmdHJpZ2h0LXJpZ2h0XCIsXG4gICAgICBtb2RlOiBjb250ZXh0LnBhcnNlci5tb2RlLFxuICAgICAgZGVsaW06IGNoZWNrRGVsaW1pdGVyKGFyZ3NbMF0sIGNvbnRleHQpLnRleHRcbiAgICB9O1xuICB9XG59KTtcbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJsZWZ0cmlnaHRcIixcbiAgbmFtZXM6IFtcIlxcXFxsZWZ0XCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDFcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihjb250ZXh0LCBhcmdzKSB7XG4gICAgdmFyIGRlbGltID0gY2hlY2tEZWxpbWl0ZXIoYXJnc1swXSwgY29udGV4dCk7XG4gICAgdmFyIHBhcnNlciA9IGNvbnRleHQucGFyc2VyOyAvLyBQYXJzZSBvdXQgdGhlIGltcGxpY2l0IGJvZHlcblxuICAgICsrcGFyc2VyLmxlZnRyaWdodERlcHRoOyAvLyBwYXJzZUV4cHJlc3Npb24gc3RvcHMgYmVmb3JlICdcXFxccmlnaHQnXG5cbiAgICB2YXIgYm9keSA9IHBhcnNlci5wYXJzZUV4cHJlc3Npb24oZmFsc2UpO1xuICAgIC0tcGFyc2VyLmxlZnRyaWdodERlcHRoOyAvLyBDaGVjayB0aGUgbmV4dCB0b2tlblxuXG4gICAgcGFyc2VyLmV4cGVjdChcIlxcXFxyaWdodFwiLCBmYWxzZSk7XG4gICAgdmFyIHJpZ2h0ID0gYXNzZXJ0Tm9kZVR5cGUocGFyc2VyLnBhcnNlRnVuY3Rpb24oKSwgXCJsZWZ0cmlnaHQtcmlnaHRcIik7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwibGVmdHJpZ2h0XCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIGJvZHk6IGJvZHksXG4gICAgICBsZWZ0OiBkZWxpbS50ZXh0LFxuICAgICAgcmlnaHQ6IHJpZ2h0LmRlbGltXG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgYXNzZXJ0UGFyc2VkKGdyb3VwKTsgLy8gQnVpbGQgdGhlIGlubmVyIGV4cHJlc3Npb25cblxuICAgIHZhciBpbm5lciA9IGJ1aWxkSFRNTF9idWlsZEV4cHJlc3Npb24oZ3JvdXAuYm9keSwgb3B0aW9ucywgdHJ1ZSwgW1wibW9wZW5cIiwgXCJtY2xvc2VcIl0pO1xuICAgIHZhciBpbm5lckhlaWdodCA9IDA7XG4gICAgdmFyIGlubmVyRGVwdGggPSAwO1xuICAgIHZhciBoYWRNaWRkbGUgPSBmYWxzZTsgLy8gQ2FsY3VsYXRlIGl0cyBoZWlnaHQgYW5kIGRlcHRoXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlubmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBQcm9wZXJ0eSBgaXNNaWRkbGVgIG5vdCBkZWZpbmVkIG9uIGBzcGFuYC4gU2VlIGNvbW1lbnQgaW5cbiAgICAgIC8vIFwibWlkZGxlXCIncyBodG1sQnVpbGRlci5cbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIGlmIChpbm5lcltpXS5pc01pZGRsZSkge1xuICAgICAgICBoYWRNaWRkbGUgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5uZXJIZWlnaHQgPSBNYXRoLm1heChpbm5lcltpXS5oZWlnaHQsIGlubmVySGVpZ2h0KTtcbiAgICAgICAgaW5uZXJEZXB0aCA9IE1hdGgubWF4KGlubmVyW2ldLmRlcHRoLCBpbm5lckRlcHRoKTtcbiAgICAgIH1cbiAgICB9IC8vIFRoZSBzaXplIG9mIGRlbGltaXRlcnMgaXMgdGhlIHNhbWUsIHJlZ2FyZGxlc3Mgb2Ygd2hhdCBzdHlsZSB3ZSBhcmVcbiAgICAvLyBpbi4gVGh1cywgdG8gY29ycmVjdGx5IGNhbGN1bGF0ZSB0aGUgc2l6ZSBvZiBkZWxpbWl0ZXIgd2UgbmVlZCBhcm91bmRcbiAgICAvLyBhIGdyb3VwLCB3ZSBzY2FsZSBkb3duIHRoZSBpbm5lciBzaXplIGJhc2VkIG9uIHRoZSBzaXplLlxuXG5cbiAgICBpbm5lckhlaWdodCAqPSBvcHRpb25zLnNpemVNdWx0aXBsaWVyO1xuICAgIGlubmVyRGVwdGggKj0gb3B0aW9ucy5zaXplTXVsdGlwbGllcjtcbiAgICB2YXIgbGVmdERlbGltO1xuXG4gICAgaWYgKGdyb3VwLmxlZnQgPT09IFwiLlwiKSB7XG4gICAgICAvLyBFbXB0eSBkZWxpbWl0ZXJzIGluIFxcbGVmdCBhbmQgXFxyaWdodCBtYWtlIG51bGwgZGVsaW1pdGVyIHNwYWNlcy5cbiAgICAgIGxlZnREZWxpbSA9IG1ha2VOdWxsRGVsaW1pdGVyKG9wdGlvbnMsIFtcIm1vcGVuXCJdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT3RoZXJ3aXNlLCB1c2UgbGVmdFJpZ2h0RGVsaW0gdG8gZ2VuZXJhdGUgdGhlIGNvcnJlY3Qgc2l6ZWRcbiAgICAgIC8vIGRlbGltaXRlci5cbiAgICAgIGxlZnREZWxpbSA9IGRlbGltaXRlci5sZWZ0UmlnaHREZWxpbShncm91cC5sZWZ0LCBpbm5lckhlaWdodCwgaW5uZXJEZXB0aCwgb3B0aW9ucywgZ3JvdXAubW9kZSwgW1wibW9wZW5cIl0pO1xuICAgIH0gLy8gQWRkIGl0IHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGV4cHJlc3Npb25cblxuXG4gICAgaW5uZXIudW5zaGlmdChsZWZ0RGVsaW0pOyAvLyBIYW5kbGUgbWlkZGxlIGRlbGltaXRlcnNcblxuICAgIGlmIChoYWRNaWRkbGUpIHtcbiAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBpbm5lci5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIG1pZGRsZURlbGltID0gaW5uZXJbX2ldOyAvLyBQcm9wZXJ0eSBgaXNNaWRkbGVgIG5vdCBkZWZpbmVkIG9uIGBzcGFuYC4gU2VlIGNvbW1lbnQgaW5cbiAgICAgICAgLy8gXCJtaWRkbGVcIidzIGh0bWxCdWlsZGVyLlxuICAgICAgICAvLyAkRmxvd0ZpeE1lXG5cbiAgICAgICAgdmFyIGlzTWlkZGxlID0gbWlkZGxlRGVsaW0uaXNNaWRkbGU7XG5cbiAgICAgICAgaWYgKGlzTWlkZGxlKSB7XG4gICAgICAgICAgLy8gQXBwbHkgdGhlIG9wdGlvbnMgdGhhdCB3ZXJlIGFjdGl2ZSB3aGVuIFxcbWlkZGxlIHdhcyBjYWxsZWRcbiAgICAgICAgICBpbm5lcltfaV0gPSBkZWxpbWl0ZXIubGVmdFJpZ2h0RGVsaW0oaXNNaWRkbGUuZGVsaW0sIGlubmVySGVpZ2h0LCBpbm5lckRlcHRoLCBpc01pZGRsZS5vcHRpb25zLCBncm91cC5tb2RlLCBbXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmlnaHREZWxpbTsgLy8gU2FtZSBmb3IgdGhlIHJpZ2h0IGRlbGltaXRlclxuXG4gICAgaWYgKGdyb3VwLnJpZ2h0ID09PSBcIi5cIikge1xuICAgICAgcmlnaHREZWxpbSA9IG1ha2VOdWxsRGVsaW1pdGVyKG9wdGlvbnMsIFtcIm1jbG9zZVwiXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJpZ2h0RGVsaW0gPSBkZWxpbWl0ZXIubGVmdFJpZ2h0RGVsaW0oZ3JvdXAucmlnaHQsIGlubmVySGVpZ2h0LCBpbm5lckRlcHRoLCBvcHRpb25zLCBncm91cC5tb2RlLCBbXCJtY2xvc2VcIl0pO1xuICAgIH0gLy8gQWRkIGl0IHRvIHRoZSBlbmQgb2YgdGhlIGV4cHJlc3Npb24uXG5cblxuICAgIGlubmVyLnB1c2gocmlnaHREZWxpbSk7XG4gICAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm1pbm5lclwiXSwgaW5uZXIsIG9wdGlvbnMpO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgYXNzZXJ0UGFyc2VkKGdyb3VwKTtcbiAgICB2YXIgaW5uZXIgPSBidWlsZE1hdGhNTF9idWlsZEV4cHJlc3Npb24oZ3JvdXAuYm9keSwgb3B0aW9ucyk7XG5cbiAgICBpZiAoZ3JvdXAubGVmdCAhPT0gXCIuXCIpIHtcbiAgICAgIHZhciBsZWZ0Tm9kZSA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibW9cIiwgW2J1aWxkTWF0aE1MX21ha2VUZXh0KGdyb3VwLmxlZnQsIGdyb3VwLm1vZGUpXSk7XG4gICAgICBsZWZ0Tm9kZS5zZXRBdHRyaWJ1dGUoXCJmZW5jZVwiLCBcInRydWVcIik7XG4gICAgICBpbm5lci51bnNoaWZ0KGxlZnROb2RlKTtcbiAgICB9XG5cbiAgICBpZiAoZ3JvdXAucmlnaHQgIT09IFwiLlwiKSB7XG4gICAgICB2YXIgcmlnaHROb2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtb1wiLCBbYnVpbGRNYXRoTUxfbWFrZVRleHQoZ3JvdXAucmlnaHQsIGdyb3VwLm1vZGUpXSk7XG4gICAgICByaWdodE5vZGUuc2V0QXR0cmlidXRlKFwiZmVuY2VcIiwgXCJ0cnVlXCIpO1xuICAgICAgaW5uZXIucHVzaChyaWdodE5vZGUpO1xuICAgIH1cblxuICAgIHJldHVybiBidWlsZE1hdGhNTF9tYWtlUm93KGlubmVyKTtcbiAgfVxufSk7XG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwibWlkZGxlXCIsXG4gIG5hbWVzOiBbXCJcXFxcbWlkZGxlXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDFcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihjb250ZXh0LCBhcmdzKSB7XG4gICAgdmFyIGRlbGltID0gY2hlY2tEZWxpbWl0ZXIoYXJnc1swXSwgY29udGV4dCk7XG5cbiAgICBpZiAoIWNvbnRleHQucGFyc2VyLmxlZnRyaWdodERlcHRoKSB7XG4gICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJcXFxcbWlkZGxlIHdpdGhvdXQgcHJlY2VkaW5nIFxcXFxsZWZ0XCIsIGRlbGltKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJtaWRkbGVcIixcbiAgICAgIG1vZGU6IGNvbnRleHQucGFyc2VyLm1vZGUsXG4gICAgICBkZWxpbTogZGVsaW0udGV4dFxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBtaWRkbGVEZWxpbTtcblxuICAgIGlmIChncm91cC5kZWxpbSA9PT0gXCIuXCIpIHtcbiAgICAgIG1pZGRsZURlbGltID0gbWFrZU51bGxEZWxpbWl0ZXIob3B0aW9ucywgW10pO1xuICAgIH0gZWxzZSB7XG4gICAgICBtaWRkbGVEZWxpbSA9IGRlbGltaXRlci5zaXplZERlbGltKGdyb3VwLmRlbGltLCAxLCBvcHRpb25zLCBncm91cC5tb2RlLCBbXSk7XG4gICAgICB2YXIgaXNNaWRkbGUgPSB7XG4gICAgICAgIGRlbGltOiBncm91cC5kZWxpbSxcbiAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgfTsgLy8gUHJvcGVydHkgYGlzTWlkZGxlYCBub3QgZGVmaW5lZCBvbiBgc3BhbmAuIEl0IGlzIG9ubHkgdXNlZCBpblxuICAgICAgLy8gdGhpcyBmaWxlIGFib3ZlLlxuICAgICAgLy8gVE9ETzogRml4IHRoaXMgdmlvbGF0aW9uIG9mIHRoZSBgc3BhbmAgdHlwZSBhbmQgcG9zc2libHkgcmVuYW1lXG4gICAgICAvLyB0aGluZ3Mgc2luY2UgYGlzTWlkZGxlYCBzb3VuZHMgbGlrZSBhIGJvb2xlYW4sIGJ1dCBpcyBhIHN0cnVjdC5cbiAgICAgIC8vICRGbG93Rml4TWVcblxuICAgICAgbWlkZGxlRGVsaW0uaXNNaWRkbGUgPSBpc01pZGRsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWlkZGxlRGVsaW07XG4gIH0sXG4gIG1hdGhtbEJ1aWxkZXI6IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICAvLyBBIEZpcmVmb3ggXFxtaWRkbGUgd2lsbCBzdHJlY2ggYSBjaGFyYWN0ZXIgdmVydGljYWxseSBvbmx5IGlmIGl0XG4gICAgLy8gaXMgaW4gdGhlIGZlbmNlIHBhcnQgb2YgdGhlIG9wZXJhdG9yIGRpY3Rpb25hcnkgYXQ6XG4gICAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL01hdGhNTDMvYXBwZW5kaXhjLmh0bWwuXG4gICAgLy8gU28gd2UgbmVlZCB0byBhdm9pZCBVKzIyMjMgYW5kIHVzZSBwbGFpbiBcInxcIiBpbnN0ZWFkLlxuICAgIHZhciB0ZXh0Tm9kZSA9IGdyb3VwLmRlbGltID09PSBcIlxcXFx2ZXJ0XCIgfHwgZ3JvdXAuZGVsaW0gPT09IFwifFwiID8gYnVpbGRNYXRoTUxfbWFrZVRleHQoXCJ8XCIsIFwidGV4dFwiKSA6IGJ1aWxkTWF0aE1MX21ha2VUZXh0KGdyb3VwLmRlbGltLCBncm91cC5tb2RlKTtcbiAgICB2YXIgbWlkZGxlTm9kZSA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibW9cIiwgW3RleHROb2RlXSk7XG4gICAgbWlkZGxlTm9kZS5zZXRBdHRyaWJ1dGUoXCJmZW5jZVwiLCBcInRydWVcIik7IC8vIE1hdGhNTCBnaXZlcyA1LzE4ZW0gc3BhY2luZyB0byBlYWNoIDxtbz4gZWxlbWVudC5cbiAgICAvLyBcXG1pZGRsZSBzaG91bGQgZ2V0IGRlbGltaXRlciBzcGFjaW5nIGluc3RlYWQuXG5cbiAgICBtaWRkbGVOb2RlLnNldEF0dHJpYnV0ZShcImxzcGFjZVwiLCBcIjAuMDVlbVwiKTtcbiAgICBtaWRkbGVOb2RlLnNldEF0dHJpYnV0ZShcInJzcGFjZVwiLCBcIjAuMDVlbVwiKTtcbiAgICByZXR1cm4gbWlkZGxlTm9kZTtcbiAgfVxufSk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMvZW5jbG9zZS5qc1xuXG5cblxuXG5cblxuXG5cblxudmFyIGVuY2xvc2VfaHRtbEJ1aWxkZXIgPSBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAvLyBcXGNhbmNlbCwgXFxiY2FuY2VsLCBcXHhjYW5jZWwsIFxcc291dCwgXFxmYm94LCBcXGNvbG9yYm94LCBcXGZjb2xvcmJveFxuICAvLyBTb21lIGdyb3VwcyBjYW4gcmV0dXJuIGRvY3VtZW50IGZyYWdtZW50cy4gIEhhbmRsZSB0aG9zZSBieSB3cmFwcGluZ1xuICAvLyB0aGVtIGluIGEgc3Bhbi5cbiAgdmFyIGlubmVyID0gYnVpbGRDb21tb24ud3JhcEZyYWdtZW50KGJ1aWxkSFRNTF9idWlsZEdyb3VwKGdyb3VwLmJvZHksIG9wdGlvbnMpLCBvcHRpb25zKTtcbiAgdmFyIGxhYmVsID0gZ3JvdXAubGFiZWwuc3Vic3RyKDEpO1xuICB2YXIgc2NhbGUgPSBvcHRpb25zLnNpemVNdWx0aXBsaWVyO1xuICB2YXIgaW1nO1xuICB2YXIgaW1nU2hpZnQgPSAwOyAvLyBJbiB0aGUgTGFUZVggY2FuY2VsIHBhY2thZ2UsIGxpbmUgZ2VvbWV0cnkgaXMgc2xpZ2h0bHkgZGlmZmVyZW50XG4gIC8vIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBzdWJqZWN0IGlzIHdpZGVyIHRoYW4gaXQgaXMgdGFsbCwgb3IgdmljZSB2ZXJzYS5cbiAgLy8gV2UgZG9uJ3Qga25vdyB0aGUgd2lkdGggb2YgYSBncm91cCwgc28gYXMgYSBwcm94eSwgd2UgdGVzdCBpZlxuICAvLyB0aGUgc3ViamVjdCBpcyBhIHNpbmdsZSBjaGFyYWN0ZXIuIFRoaXMgY2FwdHVyZXMgbW9zdCBvZiB0aGVcbiAgLy8gc3ViamVjdHMgdGhhdCBzaG91bGQgZ2V0IHRoZSBcInRhbGxcIiB0cmVhdG1lbnQuXG5cbiAgdmFyIGlzU2luZ2xlQ2hhciA9IHV0aWxzLmlzQ2hhcmFjdGVyQm94KGdyb3VwLmJvZHkpO1xuXG4gIGlmIChsYWJlbCA9PT0gXCJzb3V0XCIpIHtcbiAgICBpbWcgPSBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJzdHJldGNoeVwiLCBcInNvdXRcIl0pO1xuICAgIGltZy5oZWlnaHQgPSBvcHRpb25zLmZvbnRNZXRyaWNzKCkuZGVmYXVsdFJ1bGVUaGlja25lc3MgLyBzY2FsZTtcbiAgICBpbWdTaGlmdCA9IC0wLjUgKiBvcHRpb25zLmZvbnRNZXRyaWNzKCkueEhlaWdodDtcbiAgfSBlbHNlIHtcbiAgICAvLyBBZGQgaG9yaXpvbnRhbCBwYWRkaW5nXG4gICAgaWYgKC9jYW5jZWwvLnRlc3QobGFiZWwpKSB7XG4gICAgICBpZiAoIWlzU2luZ2xlQ2hhcikge1xuICAgICAgICBpbm5lci5jbGFzc2VzLnB1c2goXCJjYW5jZWwtcGFkXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpbm5lci5jbGFzc2VzLnB1c2goXCJib3hwYWRcIik7XG4gICAgfSAvLyBBZGQgdmVydGljYWwgcGFkZGluZ1xuXG5cbiAgICB2YXIgdmVydFBhZCA9IDA7IC8vIHJlZjogTGFUZVggc291cmNlMmU6IFxcZmJveHNlcCA9IDNwdDsgIFxcZmJveHJ1bGUgPSAuNHB0XG4gICAgLy8gcmVmOiBjYW5jZWwgcGFja2FnZTogXFxhZHZhbmNlXFx0b3RhbGhlaWdodDJcXHBAICUgXCIrMlwiXG5cbiAgICBpZiAoL2JveC8udGVzdChsYWJlbCkpIHtcbiAgICAgIHZlcnRQYWQgPSBsYWJlbCA9PT0gXCJjb2xvcmJveFwiID8gMC4zIDogMC4zNDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmVydFBhZCA9IGlzU2luZ2xlQ2hhciA/IDAuMiA6IDA7XG4gICAgfVxuXG4gICAgaW1nID0gc3RyZXRjaHkuZW5jbG9zZVNwYW4oaW5uZXIsIGxhYmVsLCB2ZXJ0UGFkLCBvcHRpb25zKTtcbiAgICBpbWdTaGlmdCA9IGlubmVyLmRlcHRoICsgdmVydFBhZDtcblxuICAgIGlmIChncm91cC5iYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgIGltZy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBncm91cC5iYWNrZ3JvdW5kQ29sb3I7XG5cbiAgICAgIGlmIChncm91cC5ib3JkZXJDb2xvcikge1xuICAgICAgICBpbWcuc3R5bGUuYm9yZGVyQ29sb3IgPSBncm91cC5ib3JkZXJDb2xvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgdmxpc3Q7XG5cbiAgaWYgKGdyb3VwLmJhY2tncm91bmRDb2xvcikge1xuICAgIHZsaXN0ID0gYnVpbGRDb21tb24ubWFrZVZMaXN0KHtcbiAgICAgIHBvc2l0aW9uVHlwZTogXCJpbmRpdmlkdWFsU2hpZnRcIixcbiAgICAgIGNoaWxkcmVuOiBbLy8gUHV0IHRoZSBjb2xvciBiYWNrZ3JvdW5kIGJlaGluZCBpbm5lcjtcbiAgICAgIHtcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IGltZyxcbiAgICAgICAgc2hpZnQ6IGltZ1NoaWZ0XG4gICAgICB9LCB7XG4gICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICBlbGVtOiBpbm5lcixcbiAgICAgICAgc2hpZnQ6IDBcbiAgICAgIH1dXG4gICAgfSwgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgdmxpc3QgPSBidWlsZENvbW1vbi5tYWtlVkxpc3Qoe1xuICAgICAgcG9zaXRpb25UeXBlOiBcImluZGl2aWR1YWxTaGlmdFwiLFxuICAgICAgY2hpbGRyZW46IFsvLyBXcml0ZSB0aGUgXFxjYW5jZWwgc3Ryb2tlIG9uIHRvcCBvZiBpbm5lci5cbiAgICAgIHtcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IGlubmVyLFxuICAgICAgICBzaGlmdDogMFxuICAgICAgfSwge1xuICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgZWxlbTogaW1nLFxuICAgICAgICBzaGlmdDogaW1nU2hpZnQsXG4gICAgICAgIHdyYXBwZXJDbGFzc2VzOiAvY2FuY2VsLy50ZXN0KGxhYmVsKSA/IFtcInN2Zy1hbGlnblwiXSA6IFtdXG4gICAgICB9XVxuICAgIH0sIG9wdGlvbnMpO1xuICB9XG5cbiAgaWYgKC9jYW5jZWwvLnRlc3QobGFiZWwpKSB7XG4gICAgLy8gVGhlIGNhbmNlbCBwYWNrYWdlIGRvY3VtZW50YXRpb24gc2F5cyB0aGF0IGNhbmNlbCBsaW5lcyBhZGQgdGhlaXIgaGVpZ2h0XG4gICAgLy8gdG8gdGhlIGV4cHJlc3Npb24sIGJ1dCB0ZXN0cyBzaG93IHRoYXQgaXNuJ3QgaG93IGl0IGFjdHVhbGx5IHdvcmtzLlxuICAgIHZsaXN0LmhlaWdodCA9IGlubmVyLmhlaWdodDtcbiAgICB2bGlzdC5kZXB0aCA9IGlubmVyLmRlcHRoO1xuICB9XG5cbiAgaWYgKC9jYW5jZWwvLnRlc3QobGFiZWwpICYmICFpc1NpbmdsZUNoYXIpIHtcbiAgICAvLyBjYW5jZWwgZG9lcyBub3QgY3JlYXRlIGhvcml6IHNwYWNlIGZvciBpdHMgbGluZSBleHRlbnNpb24uXG4gICAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm1vcmRcIiwgXCJjYW5jZWwtbGFwXCJdLCBbdmxpc3RdLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wibW9yZFwiXSwgW3ZsaXN0XSwgb3B0aW9ucyk7XG4gIH1cbn07XG5cbnZhciBlbmNsb3NlX21hdGhtbEJ1aWxkZXIgPSBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gIHZhciBub2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoZ3JvdXAubGFiZWwuaW5kZXhPZihcImNvbG9yYm94XCIpID4gLTEgPyBcIm1wYWRkZWRcIiA6IFwibWVuY2xvc2VcIiwgW2J1aWxkTWF0aE1MX2J1aWxkR3JvdXAoZ3JvdXAuYm9keSwgb3B0aW9ucyldKTtcblxuICBzd2l0Y2ggKGdyb3VwLmxhYmVsKSB7XG4gICAgY2FzZSBcIlxcXFxjYW5jZWxcIjpcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwibm90YXRpb25cIiwgXCJ1cGRpYWdvbmFsc3RyaWtlXCIpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFwiXFxcXGJjYW5jZWxcIjpcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwibm90YXRpb25cIiwgXCJkb3duZGlhZ29uYWxzdHJpa2VcIik7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgXCJcXFxcc291dFwiOlxuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJub3RhdGlvblwiLCBcImhvcml6b250YWxzdHJpa2VcIik7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgXCJcXFxcZmJveFwiOlxuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJub3RhdGlvblwiLCBcImJveFwiKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBcIlxcXFxmY29sb3Jib3hcIjpcbiAgICBjYXNlIFwiXFxcXGNvbG9yYm94XCI6XG4gICAgICAvLyA8bWVuY2xvc2U+IGRvZXNuJ3QgaGF2ZSBhIGdvb2Qgbm90YXRpb24gb3B0aW9uLiBTbyB1c2UgPG1wYWRkZWQ+XG4gICAgICAvLyBpbnN0ZWFkLiBTZXQgc29tZSBhdHRyaWJ1dGVzIHRoYXQgY29tZSBpbmNsdWRlZCB3aXRoIDxtZW5jbG9zZT4uXG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIFwiKzZwdFwiKTtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIFwiKzZwdFwiKTtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwibHNwYWNlXCIsIFwiM3B0XCIpOyAvLyBMYVRlWCBzb3VyY2UyZTogXFxmYm94c2VwID0gM3B0XG5cbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwidm9mZnNldFwiLCBcIjNwdFwiKTtcblxuICAgICAgaWYgKGdyb3VwLmxhYmVsID09PSBcIlxcXFxmY29sb3Jib3hcIikge1xuICAgICAgICB2YXIgdGhrID0gb3B0aW9ucy5mb250TWV0cmljcygpLmRlZmF1bHRSdWxlVGhpY2tuZXNzO1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIFwiYm9yZGVyOiBcIiArIHRoayArIFwiZW0gc29saWQgXCIgKyBTdHJpbmcoZ3JvdXAuYm9yZGVyQ29sb3IpKTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFwiXFxcXHhjYW5jZWxcIjpcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwibm90YXRpb25cIiwgXCJ1cGRpYWdvbmFsc3RyaWtlIGRvd25kaWFnb25hbHN0cmlrZVwiKTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgaWYgKGdyb3VwLmJhY2tncm91bmRDb2xvcikge1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKFwibWF0aGJhY2tncm91bmRcIiwgZ3JvdXAuYmFja2dyb3VuZENvbG9yKTtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufTtcblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcImVuY2xvc2VcIixcbiAgbmFtZXM6IFtcIlxcXFxjb2xvcmJveFwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAyLFxuICAgIGFsbG93ZWRJblRleHQ6IHRydWUsXG4gICAgZ3JlZWRpbmVzczogMyxcbiAgICBhcmdUeXBlczogW1wiY29sb3JcIiwgXCJ0ZXh0XCJdXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZiwgYXJncywgb3B0QXJncykge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmLnBhcnNlcixcbiAgICAgICAgZnVuY05hbWUgPSBfcmVmLmZ1bmNOYW1lO1xuICAgIHZhciBjb2xvciA9IGFzc2VydE5vZGVUeXBlKGFyZ3NbMF0sIFwiY29sb3ItdG9rZW5cIikuY29sb3I7XG4gICAgdmFyIGJvZHkgPSBhcmdzWzFdO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImVuY2xvc2VcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgbGFiZWw6IGZ1bmNOYW1lLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcixcbiAgICAgIGJvZHk6IGJvZHlcbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogZW5jbG9zZV9odG1sQnVpbGRlcixcbiAgbWF0aG1sQnVpbGRlcjogZW5jbG9zZV9tYXRobWxCdWlsZGVyXG59KTtcbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJlbmNsb3NlXCIsXG4gIG5hbWVzOiBbXCJcXFxcZmNvbG9yYm94XCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDMsXG4gICAgYWxsb3dlZEluVGV4dDogdHJ1ZSxcbiAgICBncmVlZGluZXNzOiAzLFxuICAgIGFyZ1R5cGVzOiBbXCJjb2xvclwiLCBcImNvbG9yXCIsIFwidGV4dFwiXVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYyLCBhcmdzLCBvcHRBcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYyLnBhcnNlcixcbiAgICAgICAgZnVuY05hbWUgPSBfcmVmMi5mdW5jTmFtZTtcbiAgICB2YXIgYm9yZGVyQ29sb3IgPSBhc3NlcnROb2RlVHlwZShhcmdzWzBdLCBcImNvbG9yLXRva2VuXCIpLmNvbG9yO1xuICAgIHZhciBiYWNrZ3JvdW5kQ29sb3IgPSBhc3NlcnROb2RlVHlwZShhcmdzWzFdLCBcImNvbG9yLXRva2VuXCIpLmNvbG9yO1xuICAgIHZhciBib2R5ID0gYXJnc1syXTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJlbmNsb3NlXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIGxhYmVsOiBmdW5jTmFtZSxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZENvbG9yLFxuICAgICAgYm9yZGVyQ29sb3I6IGJvcmRlckNvbG9yLFxuICAgICAgYm9keTogYm9keVxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBlbmNsb3NlX2h0bWxCdWlsZGVyLFxuICBtYXRobWxCdWlsZGVyOiBlbmNsb3NlX21hdGhtbEJ1aWxkZXJcbn0pO1xuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcImVuY2xvc2VcIixcbiAgbmFtZXM6IFtcIlxcXFxmYm94XCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDEsXG4gICAgYXJnVHlwZXM6IFtcInRleHRcIl0sXG4gICAgYWxsb3dlZEluVGV4dDogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYzLCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYzLnBhcnNlcjtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJlbmNsb3NlXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIGxhYmVsOiBcIlxcXFxmYm94XCIsXG4gICAgICBib2R5OiBhcmdzWzBdXG4gICAgfTtcbiAgfVxufSk7XG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwiZW5jbG9zZVwiLFxuICBuYW1lczogW1wiXFxcXGNhbmNlbFwiLCBcIlxcXFxiY2FuY2VsXCIsIFwiXFxcXHhjYW5jZWxcIiwgXCJcXFxcc291dFwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZjQsIGFyZ3MsIG9wdEFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZjQucGFyc2VyLFxuICAgICAgICBmdW5jTmFtZSA9IF9yZWY0LmZ1bmNOYW1lO1xuICAgIHZhciBib2R5ID0gYXJnc1swXTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJlbmNsb3NlXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIGxhYmVsOiBmdW5jTmFtZSxcbiAgICAgIGJvZHk6IGJvZHlcbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogZW5jbG9zZV9odG1sQnVpbGRlcixcbiAgbWF0aG1sQnVpbGRlcjogZW5jbG9zZV9tYXRobWxCdWlsZGVyXG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2RlZmluZUVudmlyb25tZW50LmpzXG5cblxuLyoqXG4gKiBBbGwgcmVnaXN0ZXJlZCBlbnZpcm9ubWVudHMuXG4gKiBgZW52aXJvbm1lbnRzLmpzYCBleHBvcnRzIHRoaXMgc2FtZSBkaWN0aW9uYXJ5IGFnYWluIGFuZCBtYWtlcyBpdCBwdWJsaWMuXG4gKiBgUGFyc2VyLmpzYCByZXF1aXJlcyB0aGlzIGRpY3Rpb25hcnkgdmlhIGBlbnZpcm9ubWVudHMuanNgLlxuICovXG52YXIgX2Vudmlyb25tZW50cyA9IHt9O1xuZnVuY3Rpb24gZGVmaW5lRW52aXJvbm1lbnQoX3JlZikge1xuICB2YXIgdHlwZSA9IF9yZWYudHlwZSxcbiAgICAgIG5hbWVzID0gX3JlZi5uYW1lcyxcbiAgICAgIHByb3BzID0gX3JlZi5wcm9wcyxcbiAgICAgIGhhbmRsZXIgPSBfcmVmLmhhbmRsZXIsXG4gICAgICBodG1sQnVpbGRlciA9IF9yZWYuaHRtbEJ1aWxkZXIsXG4gICAgICBtYXRobWxCdWlsZGVyID0gX3JlZi5tYXRobWxCdWlsZGVyO1xuICAvLyBTZXQgZGVmYXVsdCB2YWx1ZXMgb2YgZW52aXJvbm1lbnRzLlxuICB2YXIgZGF0YSA9IHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIG51bUFyZ3M6IHByb3BzLm51bUFyZ3MgfHwgMCxcbiAgICBncmVlZGluZXNzOiAxLFxuICAgIGFsbG93ZWRJblRleHQ6IGZhbHNlLFxuICAgIG51bU9wdGlvbmFsQXJnczogMCxcbiAgICBoYW5kbGVyOiBoYW5kbGVyXG4gIH07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7ICsraSkge1xuICAgIC8vIFRPRE86IFRoZSB2YWx1ZSB0eXBlIG9mIF9lbnZpcm9ubWVudHMgc2hvdWxkIGJlIGEgdHlwZSB1bmlvbiBvZiBhbGxcbiAgICAvLyBwb3NzaWJsZSBgRW52U3BlYzw+YCBwb3NzaWJpbGl0aWVzIGluc3RlYWQgb2YgYEVudlNwZWM8Kj5gLCB3aGljaCBpc1xuICAgIC8vIGFuIGV4aXN0ZW50aWFsIHR5cGUuXG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIF9lbnZpcm9ubWVudHNbbmFtZXNbaV1dID0gZGF0YTtcbiAgfVxuXG4gIGlmIChodG1sQnVpbGRlcikge1xuICAgIF9odG1sR3JvdXBCdWlsZGVyc1t0eXBlXSA9IGh0bWxCdWlsZGVyO1xuICB9XG5cbiAgaWYgKG1hdGhtbEJ1aWxkZXIpIHtcbiAgICBfbWF0aG1sR3JvdXBCdWlsZGVyc1t0eXBlXSA9IG1hdGhtbEJ1aWxkZXI7XG4gIH1cbn1cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2Vudmlyb25tZW50cy9hcnJheS5qc1xuXG5cblxuXG5cblxuXG5cblxuXG5cblxuZnVuY3Rpb24gZ2V0SExpbmVzKHBhcnNlcikge1xuICAvLyBSZXR1cm4gYW4gYXJyYXkuIFRoZSBhcnJheSBsZW5ndGggPSBudW1iZXIgb2YgaGxpbmVzLlxuICAvLyBFYWNoIGVsZW1lbnQgaW4gdGhlIGFycmF5IHRlbGxzIGlmIHRoZSBsaW5lIGlzIGRhc2hlZC5cbiAgdmFyIGhsaW5lSW5mbyA9IFtdO1xuICBwYXJzZXIuY29uc3VtZVNwYWNlcygpO1xuICB2YXIgbnh0ID0gcGFyc2VyLm5leHRUb2tlbi50ZXh0O1xuXG4gIHdoaWxlIChueHQgPT09IFwiXFxcXGhsaW5lXCIgfHwgbnh0ID09PSBcIlxcXFxoZGFzaGxpbmVcIikge1xuICAgIHBhcnNlci5jb25zdW1lKCk7XG4gICAgaGxpbmVJbmZvLnB1c2gobnh0ID09PSBcIlxcXFxoZGFzaGxpbmVcIik7XG4gICAgcGFyc2VyLmNvbnN1bWVTcGFjZXMoKTtcbiAgICBueHQgPSBwYXJzZXIubmV4dFRva2VuLnRleHQ7XG4gIH1cblxuICByZXR1cm4gaGxpbmVJbmZvO1xufVxuLyoqXG4gKiBQYXJzZSB0aGUgYm9keSBvZiB0aGUgZW52aXJvbm1lbnQsIHdpdGggcm93cyBkZWxpbWl0ZWQgYnkgXFxcXCBhbmRcbiAqIGNvbHVtbnMgZGVsaW1pdGVkIGJ5ICYsIGFuZCBjcmVhdGUgYSBuZXN0ZWQgbGlzdCBpbiByb3ctbWFqb3Igb3JkZXJcbiAqIHdpdGggb25lIGdyb3VwIHBlciBjZWxsLiAgSWYgZ2l2ZW4gYW4gb3B0aW9uYWwgYXJndW1lbnQgc3R5bGVcbiAqIChcInRleHRcIiwgXCJkaXNwbGF5XCIsIGV0Yy4pLCB0aGVuIGVhY2ggY2VsbCBpcyBjYXN0IGludG8gdGhhdCBzdHlsZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHBhcnNlQXJyYXkocGFyc2VyLCBfcmVmLCBzdHlsZSkge1xuICB2YXIgaHNraXBCZWZvcmVBbmRBZnRlciA9IF9yZWYuaHNraXBCZWZvcmVBbmRBZnRlcixcbiAgICAgIGFkZEpvdCA9IF9yZWYuYWRkSm90LFxuICAgICAgY29scyA9IF9yZWYuY29scyxcbiAgICAgIGFycmF5c3RyZXRjaCA9IF9yZWYuYXJyYXlzdHJldGNoLFxuICAgICAgY29sU2VwYXJhdGlvblR5cGUgPSBfcmVmLmNvbFNlcGFyYXRpb25UeXBlO1xuICAvLyBQYXJzZSBib2R5IG9mIGFycmF5IHdpdGggXFxcXCB0ZW1wb3JhcmlseSBtYXBwZWQgdG8gXFxjclxuICBwYXJzZXIuZ3VsbGV0LmJlZ2luR3JvdXAoKTtcbiAgcGFyc2VyLmd1bGxldC5tYWNyb3Muc2V0KFwiXFxcXFxcXFxcIiwgXCJcXFxcY3JcIik7IC8vIEdldCBjdXJyZW50IGFycmF5c3RyZXRjaCBpZiBpdCdzIG5vdCBzZXQgYnkgdGhlIGVudmlyb25tZW50XG5cbiAgaWYgKCFhcnJheXN0cmV0Y2gpIHtcbiAgICB2YXIgc3RyZXRjaCA9IHBhcnNlci5ndWxsZXQuZXhwYW5kTWFjcm9Bc1RleHQoXCJcXFxcYXJyYXlzdHJldGNoXCIpO1xuXG4gICAgaWYgKHN0cmV0Y2ggPT0gbnVsbCkge1xuICAgICAgLy8gRGVmYXVsdCBcXGFycmF5c3RyZXRjaCBmcm9tIGx0dGFiLmR0eFxuICAgICAgYXJyYXlzdHJldGNoID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXJyYXlzdHJldGNoID0gcGFyc2VGbG9hdChzdHJldGNoKTtcblxuICAgICAgaWYgKCFhcnJheXN0cmV0Y2ggfHwgYXJyYXlzdHJldGNoIDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJJbnZhbGlkIFxcXFxhcnJheXN0cmV0Y2g6IFwiICsgc3RyZXRjaCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHJvdyA9IFtdO1xuICB2YXIgYm9keSA9IFtyb3ddO1xuICB2YXIgcm93R2FwcyA9IFtdO1xuICB2YXIgaExpbmVzQmVmb3JlUm93ID0gW107IC8vIFRlc3QgZm9yIFxcaGxpbmUgYXQgdGhlIHRvcCBvZiB0aGUgYXJyYXkuXG5cbiAgaExpbmVzQmVmb3JlUm93LnB1c2goZ2V0SExpbmVzKHBhcnNlcikpO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cbiAgICB2YXIgY2VsbCA9IHBhcnNlci5wYXJzZUV4cHJlc3Npb24oZmFsc2UsIFwiXFxcXGNyXCIpO1xuICAgIGNlbGwgPSB7XG4gICAgICB0eXBlOiBcIm9yZGdyb3VwXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIGJvZHk6IGNlbGxcbiAgICB9O1xuXG4gICAgaWYgKHN0eWxlKSB7XG4gICAgICBjZWxsID0ge1xuICAgICAgICB0eXBlOiBcInN0eWxpbmdcIixcbiAgICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgYm9keTogW2NlbGxdXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJvdy5wdXNoKGNlbGwpO1xuICAgIHZhciBuZXh0ID0gcGFyc2VyLm5leHRUb2tlbi50ZXh0O1xuXG4gICAgaWYgKG5leHQgPT09IFwiJlwiKSB7XG4gICAgICBwYXJzZXIuY29uc3VtZSgpO1xuICAgIH0gZWxzZSBpZiAobmV4dCA9PT0gXCJcXFxcZW5kXCIpIHtcbiAgICAgIC8vIEFycmF5cyB0ZXJtaW5hdGUgbmV3bGluZXMgd2l0aCBgXFxjcmNyYCB3aGljaCBjb25zdW1lcyBhIGBcXGNyYCBpZlxuICAgICAgLy8gdGhlIGxhc3QgbGluZSBpcyBlbXB0eS5cbiAgICAgIC8vIE5PVEU6IEN1cnJlbnRseSwgYGNlbGxgIGlzIHRoZSBsYXN0IGl0ZW0gYWRkZWQgaW50byBgcm93YC5cbiAgICAgIGlmIChyb3cubGVuZ3RoID09PSAxICYmIGNlbGwudHlwZSA9PT0gXCJzdHlsaW5nXCIgJiYgY2VsbC5ib2R5WzBdLmJvZHkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGJvZHkucG9wKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChoTGluZXNCZWZvcmVSb3cubGVuZ3RoIDwgYm9keS5sZW5ndGggKyAxKSB7XG4gICAgICAgIGhMaW5lc0JlZm9yZVJvdy5wdXNoKFtdKTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIGlmIChuZXh0ID09PSBcIlxcXFxjclwiKSB7XG4gICAgICB2YXIgY3IgPSBhc3NlcnROb2RlVHlwZShwYXJzZXIucGFyc2VGdW5jdGlvbigpLCBcImNyXCIpO1xuICAgICAgcm93R2Fwcy5wdXNoKGNyLnNpemUpOyAvLyBjaGVjayBmb3IgXFxobGluZShzKSBmb2xsb3dpbmcgdGhlIHJvdyBzZXBhcmF0b3JcblxuICAgICAgaExpbmVzQmVmb3JlUm93LnB1c2goZ2V0SExpbmVzKHBhcnNlcikpO1xuICAgICAgcm93ID0gW107XG4gICAgICBib2R5LnB1c2gocm93KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiRXhwZWN0ZWQgJiBvciBcXFxcXFxcXCBvciBcXFxcY3Igb3IgXFxcXGVuZFwiLCBwYXJzZXIubmV4dFRva2VuKTtcbiAgICB9XG4gIH1cblxuICBwYXJzZXIuZ3VsbGV0LmVuZEdyb3VwKCk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJhcnJheVwiLFxuICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgIGFkZEpvdDogYWRkSm90LFxuICAgIGFycmF5c3RyZXRjaDogYXJyYXlzdHJldGNoLFxuICAgIGJvZHk6IGJvZHksXG4gICAgY29sczogY29scyxcbiAgICByb3dHYXBzOiByb3dHYXBzLFxuICAgIGhza2lwQmVmb3JlQW5kQWZ0ZXI6IGhza2lwQmVmb3JlQW5kQWZ0ZXIsXG4gICAgaExpbmVzQmVmb3JlUm93OiBoTGluZXNCZWZvcmVSb3csXG4gICAgY29sU2VwYXJhdGlvblR5cGU6IGNvbFNlcGFyYXRpb25UeXBlXG4gIH07XG59IC8vIERlY2lkZXMgb24gYSBzdHlsZSBmb3IgY2VsbHMgaW4gYW4gYXJyYXkgYWNjb3JkaW5nIHRvIHdoZXRoZXIgdGhlIGdpdmVuXG4vLyBlbnZpcm9ubWVudCBuYW1lIHN0YXJ0cyB3aXRoIHRoZSBsZXR0ZXIgJ2QnLlxuXG5cbmZ1bmN0aW9uIGRDZWxsU3R5bGUoZW52TmFtZSkge1xuICBpZiAoZW52TmFtZS5zdWJzdHIoMCwgMSkgPT09IFwiZFwiKSB7XG4gICAgcmV0dXJuIFwiZGlzcGxheVwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcInRleHRcIjtcbiAgfVxufVxuXG52YXIgYXJyYXlfaHRtbEJ1aWxkZXIgPSBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICB2YXIgcjtcbiAgdmFyIGM7XG4gIHZhciBuciA9IGdyb3VwLmJvZHkubGVuZ3RoO1xuICB2YXIgaExpbmVzQmVmb3JlUm93ID0gZ3JvdXAuaExpbmVzQmVmb3JlUm93O1xuICB2YXIgbmMgPSAwO1xuICB2YXIgYm9keSA9IG5ldyBBcnJheShucik7XG4gIHZhciBobGluZXMgPSBbXTsgLy8gSG9yaXpvbnRhbCBzcGFjaW5nXG5cbiAgdmFyIHB0ID0gMSAvIG9wdGlvbnMuZm9udE1ldHJpY3MoKS5wdFBlckVtO1xuICB2YXIgYXJyYXljb2xzZXAgPSA1ICogcHQ7IC8vIFxcYXJyYXljb2xzZXAgaW4gYXJ0aWNsZS5jbHNcbiAgLy8gVmVydGljYWwgc3BhY2luZ1xuXG4gIHZhciBiYXNlbGluZXNraXAgPSAxMiAqIHB0OyAvLyBzZWUgc2l6ZTEwLmNsb1xuICAvLyBEZWZhdWx0IFxcam90IGZyb20gbHRtYXRoLmR0eFxuICAvLyBUT0RPKGVkZW1haW5lKTogYWxsb3cgb3ZlcnJpZGluZyBcXGpvdCB2aWEgXFxzZXRsZW5ndGggKCM2ODcpXG5cbiAgdmFyIGpvdCA9IDMgKiBwdDtcbiAgdmFyIGFycmF5c2tpcCA9IGdyb3VwLmFycmF5c3RyZXRjaCAqIGJhc2VsaW5lc2tpcDtcbiAgdmFyIGFyc3RydXRIZWlnaHQgPSAwLjcgKiBhcnJheXNraXA7IC8vIFxcc3RydXRib3ggaW4gbHRmc3N0cmMuZHR4IGFuZFxuXG4gIHZhciBhcnN0cnV0RGVwdGggPSAwLjMgKiBhcnJheXNraXA7IC8vIFxcQGFyc3RydXRib3ggaW4gbHR0YWIuZHR4XG5cbiAgdmFyIHRvdGFsSGVpZ2h0ID0gMDsgLy8gU2V0IGEgcG9zaXRpb24gZm9yIFxcaGxpbmUocykgYXQgdGhlIHRvcCBvZiB0aGUgYXJyYXksIGlmIGFueS5cblxuICBmdW5jdGlvbiBzZXRITGluZVBvcyhobGluZXNJbkdhcCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGxpbmVzSW5HYXAubGVuZ3RoOyArK2kpIHtcbiAgICAgIGlmIChpID4gMCkge1xuICAgICAgICB0b3RhbEhlaWdodCArPSAwLjI1O1xuICAgICAgfVxuXG4gICAgICBobGluZXMucHVzaCh7XG4gICAgICAgIHBvczogdG90YWxIZWlnaHQsXG4gICAgICAgIGlzRGFzaGVkOiBobGluZXNJbkdhcFtpXVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgc2V0SExpbmVQb3MoaExpbmVzQmVmb3JlUm93WzBdKTtcblxuICBmb3IgKHIgPSAwOyByIDwgZ3JvdXAuYm9keS5sZW5ndGg7ICsrcikge1xuICAgIHZhciBpbnJvdyA9IGdyb3VwLmJvZHlbcl07XG4gICAgdmFyIGhlaWdodCA9IGFyc3RydXRIZWlnaHQ7IC8vIFxcQGFycmF5IGFkZHMgYW4gXFxAYXJzdHJ1dFxuXG4gICAgdmFyIGRlcHRoID0gYXJzdHJ1dERlcHRoOyAvLyB0byBlYWNoIHRvdyAodmlhIHRoZSB0ZW1wbGF0ZSlcblxuICAgIGlmIChuYyA8IGlucm93Lmxlbmd0aCkge1xuICAgICAgbmMgPSBpbnJvdy5sZW5ndGg7XG4gICAgfVxuXG4gICAgdmFyIG91dHJvdyA9IG5ldyBBcnJheShpbnJvdy5sZW5ndGgpO1xuXG4gICAgZm9yIChjID0gMDsgYyA8IGlucm93Lmxlbmd0aDsgKytjKSB7XG4gICAgICB2YXIgZWx0ID0gYnVpbGRIVE1MX2J1aWxkR3JvdXAoaW5yb3dbY10sIG9wdGlvbnMpO1xuXG4gICAgICBpZiAoZGVwdGggPCBlbHQuZGVwdGgpIHtcbiAgICAgICAgZGVwdGggPSBlbHQuZGVwdGg7XG4gICAgICB9XG5cbiAgICAgIGlmIChoZWlnaHQgPCBlbHQuaGVpZ2h0KSB7XG4gICAgICAgIGhlaWdodCA9IGVsdC5oZWlnaHQ7XG4gICAgICB9XG5cbiAgICAgIG91dHJvd1tjXSA9IGVsdDtcbiAgICB9XG5cbiAgICB2YXIgcm93R2FwID0gZ3JvdXAucm93R2Fwc1tyXTtcbiAgICB2YXIgZ2FwID0gMDtcblxuICAgIGlmIChyb3dHYXApIHtcbiAgICAgIGdhcCA9IHVuaXRzX2NhbGN1bGF0ZVNpemUocm93R2FwLCBvcHRpb25zKTtcblxuICAgICAgaWYgKGdhcCA+IDApIHtcbiAgICAgICAgLy8gXFxAYXJnYXJyYXljclxuICAgICAgICBnYXAgKz0gYXJzdHJ1dERlcHRoO1xuXG4gICAgICAgIGlmIChkZXB0aCA8IGdhcCkge1xuICAgICAgICAgIGRlcHRoID0gZ2FwOyAvLyBcXEB4YXJnYXJyYXljclxuICAgICAgICB9XG5cbiAgICAgICAgZ2FwID0gMDtcbiAgICAgIH1cbiAgICB9IC8vIEluIEFNUyBtdWx0aWxpbmUgZW52aXJvbm1lbnRzIHN1Y2ggYXMgYWxpZ25lZCBhbmQgZ2F0aGVyZWQsIHJvd3NcbiAgICAvLyBjb3JyZXNwb25kIHRvIGxpbmVzIHRoYXQgaGF2ZSBhZGRpdGlvbmFsIFxcam90IGFkZGVkIHRvIHRoZVxuICAgIC8vIFxcYmFzZWxpbmVza2lwIHZpYSBcXG9wZW51cC5cblxuXG4gICAgaWYgKGdyb3VwLmFkZEpvdCkge1xuICAgICAgZGVwdGggKz0gam90O1xuICAgIH1cblxuICAgIG91dHJvdy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgb3V0cm93LmRlcHRoID0gZGVwdGg7XG4gICAgdG90YWxIZWlnaHQgKz0gaGVpZ2h0O1xuICAgIG91dHJvdy5wb3MgPSB0b3RhbEhlaWdodDtcbiAgICB0b3RhbEhlaWdodCArPSBkZXB0aCArIGdhcDsgLy8gXFxAeWFyZ2FycmF5Y3JcblxuICAgIGJvZHlbcl0gPSBvdXRyb3c7IC8vIFNldCBhIHBvc2l0aW9uIGZvciBcXGhsaW5lKHMpLCBpZiBhbnkuXG5cbiAgICBzZXRITGluZVBvcyhoTGluZXNCZWZvcmVSb3dbciArIDFdKTtcbiAgfVxuXG4gIHZhciBvZmZzZXQgPSB0b3RhbEhlaWdodCAvIDIgKyBvcHRpb25zLmZvbnRNZXRyaWNzKCkuYXhpc0hlaWdodDtcbiAgdmFyIGNvbERlc2NyaXB0aW9ucyA9IGdyb3VwLmNvbHMgfHwgW107XG4gIHZhciBjb2xzID0gW107XG4gIHZhciBjb2xTZXA7XG4gIHZhciBjb2xEZXNjck51bTtcblxuICBmb3IgKGMgPSAwLCBjb2xEZXNjck51bSA9IDA7IC8vIENvbnRpbnVlIHdoaWxlIGVpdGhlciB0aGVyZSBhcmUgbW9yZSBjb2x1bW5zIG9yIG1vcmUgY29sdW1uXG4gIC8vIGRlc2NyaXB0aW9ucywgc28gdHJhaWxpbmcgc2VwYXJhdG9ycyBkb24ndCBnZXQgbG9zdC5cbiAgYyA8IG5jIHx8IGNvbERlc2NyTnVtIDwgY29sRGVzY3JpcHRpb25zLmxlbmd0aDsgKytjLCArK2NvbERlc2NyTnVtKSB7XG4gICAgdmFyIGNvbERlc2NyID0gY29sRGVzY3JpcHRpb25zW2NvbERlc2NyTnVtXSB8fCB7fTtcbiAgICB2YXIgZmlyc3RTZXBhcmF0b3IgPSB0cnVlO1xuXG4gICAgd2hpbGUgKGNvbERlc2NyLnR5cGUgPT09IFwic2VwYXJhdG9yXCIpIHtcbiAgICAgIC8vIElmIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUgc2VwYXJhdG9yIGluIGEgcm93LCBhZGQgYSBzcGFjZVxuICAgICAgLy8gYmV0d2VlbiB0aGVtLlxuICAgICAgaWYgKCFmaXJzdFNlcGFyYXRvcikge1xuICAgICAgICBjb2xTZXAgPSBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJhcnJheWNvbHNlcFwiXSwgW10pO1xuICAgICAgICBjb2xTZXAuc3R5bGUud2lkdGggPSBvcHRpb25zLmZvbnRNZXRyaWNzKCkuZG91YmxlUnVsZVNlcCArIFwiZW1cIjtcbiAgICAgICAgY29scy5wdXNoKGNvbFNlcCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb2xEZXNjci5zZXBhcmF0b3IgPT09IFwifFwiKSB7XG4gICAgICAgIHZhciBzZXBhcmF0b3IgPSBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJ2ZXJ0aWNhbC1zZXBhcmF0b3JcIl0sIFtdLCBvcHRpb25zKTtcbiAgICAgICAgc2VwYXJhdG9yLnN0eWxlLmhlaWdodCA9IHRvdGFsSGVpZ2h0ICsgXCJlbVwiO1xuICAgICAgICBzZXBhcmF0b3Iuc3R5bGUudmVydGljYWxBbGlnbiA9IC0odG90YWxIZWlnaHQgLSBvZmZzZXQpICsgXCJlbVwiO1xuICAgICAgICBjb2xzLnB1c2goc2VwYXJhdG9yKTtcbiAgICAgIH0gZWxzZSBpZiAoY29sRGVzY3Iuc2VwYXJhdG9yID09PSBcIjpcIikge1xuICAgICAgICB2YXIgX3NlcGFyYXRvciA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcInZlcnRpY2FsLXNlcGFyYXRvclwiLCBcInZzLWRhc2hlZFwiXSwgW10sIG9wdGlvbnMpO1xuXG4gICAgICAgIF9zZXBhcmF0b3Iuc3R5bGUuaGVpZ2h0ID0gdG90YWxIZWlnaHQgKyBcImVtXCI7XG4gICAgICAgIF9zZXBhcmF0b3Iuc3R5bGUudmVydGljYWxBbGlnbiA9IC0odG90YWxIZWlnaHQgLSBvZmZzZXQpICsgXCJlbVwiO1xuICAgICAgICBjb2xzLnB1c2goX3NlcGFyYXRvcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJJbnZhbGlkIHNlcGFyYXRvciB0eXBlOiBcIiArIGNvbERlc2NyLnNlcGFyYXRvcik7XG4gICAgICB9XG5cbiAgICAgIGNvbERlc2NyTnVtKys7XG4gICAgICBjb2xEZXNjciA9IGNvbERlc2NyaXB0aW9uc1tjb2xEZXNjck51bV0gfHwge307XG4gICAgICBmaXJzdFNlcGFyYXRvciA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChjID49IG5jKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgc2Vwd2lkdGggPSB2b2lkIDA7XG5cbiAgICBpZiAoYyA+IDAgfHwgZ3JvdXAuaHNraXBCZWZvcmVBbmRBZnRlcikge1xuICAgICAgc2Vwd2lkdGggPSB1dGlscy5kZWZsdChjb2xEZXNjci5wcmVnYXAsIGFycmF5Y29sc2VwKTtcblxuICAgICAgaWYgKHNlcHdpZHRoICE9PSAwKSB7XG4gICAgICAgIGNvbFNlcCA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcImFycmF5Y29sc2VwXCJdLCBbXSk7XG4gICAgICAgIGNvbFNlcC5zdHlsZS53aWR0aCA9IHNlcHdpZHRoICsgXCJlbVwiO1xuICAgICAgICBjb2xzLnB1c2goY29sU2VwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY29sID0gW107XG5cbiAgICBmb3IgKHIgPSAwOyByIDwgbnI7ICsrcikge1xuICAgICAgdmFyIHJvdyA9IGJvZHlbcl07XG4gICAgICB2YXIgZWxlbSA9IHJvd1tjXTtcblxuICAgICAgaWYgKCFlbGVtKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2hpZnQgPSByb3cucG9zIC0gb2Zmc2V0O1xuICAgICAgZWxlbS5kZXB0aCA9IHJvdy5kZXB0aDtcbiAgICAgIGVsZW0uaGVpZ2h0ID0gcm93LmhlaWdodDtcbiAgICAgIGNvbC5wdXNoKHtcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IGVsZW0sXG4gICAgICAgIHNoaWZ0OiBzaGlmdFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29sID0gYnVpbGRDb21tb24ubWFrZVZMaXN0KHtcbiAgICAgIHBvc2l0aW9uVHlwZTogXCJpbmRpdmlkdWFsU2hpZnRcIixcbiAgICAgIGNoaWxkcmVuOiBjb2xcbiAgICB9LCBvcHRpb25zKTtcbiAgICBjb2wgPSBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJjb2wtYWxpZ24tXCIgKyAoY29sRGVzY3IuYWxpZ24gfHwgXCJjXCIpXSwgW2NvbF0pO1xuICAgIGNvbHMucHVzaChjb2wpO1xuXG4gICAgaWYgKGMgPCBuYyAtIDEgfHwgZ3JvdXAuaHNraXBCZWZvcmVBbmRBZnRlcikge1xuICAgICAgc2Vwd2lkdGggPSB1dGlscy5kZWZsdChjb2xEZXNjci5wb3N0Z2FwLCBhcnJheWNvbHNlcCk7XG5cbiAgICAgIGlmIChzZXB3aWR0aCAhPT0gMCkge1xuICAgICAgICBjb2xTZXAgPSBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJhcnJheWNvbHNlcFwiXSwgW10pO1xuICAgICAgICBjb2xTZXAuc3R5bGUud2lkdGggPSBzZXB3aWR0aCArIFwiZW1cIjtcbiAgICAgICAgY29scy5wdXNoKGNvbFNlcCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYm9keSA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm10YWJsZVwiXSwgY29scyk7IC8vIEFkZCBcXGhsaW5lKHMpLCBpZiBhbnkuXG5cbiAgaWYgKGhsaW5lcy5sZW5ndGggPiAwKSB7XG4gICAgdmFyIGxpbmUgPSBidWlsZENvbW1vbi5tYWtlTGluZVNwYW4oXCJobGluZVwiLCBvcHRpb25zLCAwLjA1KTtcbiAgICB2YXIgZGFzaGVzID0gYnVpbGRDb21tb24ubWFrZUxpbmVTcGFuKFwiaGRhc2hsaW5lXCIsIG9wdGlvbnMsIDAuMDUpO1xuICAgIHZhciB2TGlzdEVsZW1zID0gW3tcbiAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgZWxlbTogYm9keSxcbiAgICAgIHNoaWZ0OiAwXG4gICAgfV07XG5cbiAgICB3aGlsZSAoaGxpbmVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciBobGluZSA9IGhsaW5lcy5wb3AoKTtcbiAgICAgIHZhciBsaW5lU2hpZnQgPSBobGluZS5wb3MgLSBvZmZzZXQ7XG5cbiAgICAgIGlmIChobGluZS5pc0Rhc2hlZCkge1xuICAgICAgICB2TGlzdEVsZW1zLnB1c2goe1xuICAgICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICAgIGVsZW06IGRhc2hlcyxcbiAgICAgICAgICBzaGlmdDogbGluZVNoaWZ0XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdkxpc3RFbGVtcy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgICBlbGVtOiBsaW5lLFxuICAgICAgICAgIHNoaWZ0OiBsaW5lU2hpZnRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYm9keSA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgICBwb3NpdGlvblR5cGU6IFwiaW5kaXZpZHVhbFNoaWZ0XCIsXG4gICAgICBjaGlsZHJlbjogdkxpc3RFbGVtc1xuICAgIH0sIG9wdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm1vcmRcIl0sIFtib2R5XSwgb3B0aW9ucyk7XG59O1xuXG52YXIgYWxpZ25NYXAgPSB7XG4gIGM6IFwiY2VudGVyIFwiLFxuICBsOiBcImxlZnQgXCIsXG4gIHI6IFwicmlnaHQgXCJcbn07XG5cbnZhciBhcnJheV9tYXRobWxCdWlsZGVyID0gZnVuY3Rpb24gbWF0aG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICB2YXIgdGFibGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm10YWJsZVwiLCBncm91cC5ib2R5Lm1hcChmdW5jdGlvbiAocm93KSB7XG4gICAgcmV0dXJuIG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibXRyXCIsIHJvdy5tYXAoZnVuY3Rpb24gKGNlbGwpIHtcbiAgICAgIHJldHVybiBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm10ZFwiLCBbYnVpbGRNYXRoTUxfYnVpbGRHcm91cChjZWxsLCBvcHRpb25zKV0pO1xuICAgIH0pKTtcbiAgfSkpOyAvLyBTZXQgY29sdW1uIGFsaWdubWVudCwgcm93IHNwYWNpbmcsIGNvbHVtbiBzcGFjaW5nLCBhbmRcbiAgLy8gYXJyYXkgbGluZXMgYnkgc2V0dGluZyBhdHRyaWJ1dGVzIG9uIHRoZSB0YWJsZSBlbGVtZW50LlxuICAvLyBTZXQgdGhlIHJvdyBzcGFjaW5nLiBJbiBNYXRoTUwsIHdlIHNwZWNpZnkgYSBnYXAgZGlzdGFuY2UuXG4gIC8vIFdlIGRvIG5vdCB1c2Ugcm93R2FwW10gYmVjYXVzZSBNYXRoTUwgYXV0b21hdGljYWxseSBpbmNyZWFzZXNcbiAgLy8gY2VsbCBoZWlnaHQgd2l0aCB0aGUgaGVpZ2h0L2RlcHRoIG9mIHRoZSBlbGVtZW50IGNvbnRlbnQuXG4gIC8vIExhVGVYIFxcYXJyYXlzdHJldGNoIG11bHRpcGxpZXMgdGhlIHJvdyBiYXNlbGluZS10by1iYXNlbGluZSBkaXN0YW5jZS5cbiAgLy8gV2Ugc2ltdWxhdGUgdGhpcyBieSBhZGRpbmcgKGFycmF5c3RyZXRjaCAtIDEpZW0gdG8gdGhlIGdhcC4gVGhpc1xuICAvLyBkb2VzIGEgcmVhc29uYWJsZSBqb2Igb2YgYWRqdXN0aW5nIGFycmF5cyBjb250YWluaW5nIDEgZW0gdGFsbCBjb250ZW50LlxuICAvLyBUaGUgMC4xNiBhbmQgMC4wOSB2YWx1ZXMgYXJlIGZvdW5kIGVtcHJpY2FsbHkuIFRoZXkgcHJvZHVjZSBhbiBhcnJheVxuICAvLyBzaW1pbGFyIHRvIExhVGVYIGFuZCBpbiB3aGljaCBjb250ZW50IGRvZXMgbm90IGludGVyZmVyZSB3aXRoIFxcaGluZXMuXG5cbiAgdmFyIGdhcCA9IDAuMTYgKyBncm91cC5hcnJheXN0cmV0Y2ggLSAxICsgKGdyb3VwLmFkZEpvdCA/IDAuMDkgOiAwKTtcbiAgdGFibGUuc2V0QXR0cmlidXRlKFwicm93c3BhY2luZ1wiLCBnYXAgKyBcImVtXCIpOyAvLyBNYXRoTUwgdGFibGUgbGluZXMgZ28gb25seSBiZXR3ZWVuIGNlbGxzLlxuICAvLyBUbyBwbGFjZSBhIGxpbmUgb24gYW4gZWRnZSB3ZSdsbCB1c2UgPG1lbmNsb3NlPiwgaWYgbmVjZXNzYXJ5LlxuXG4gIHZhciBtZW5jbG9zZSA9IFwiXCI7XG4gIHZhciBhbGlnbiA9IFwiXCI7XG5cbiAgaWYgKGdyb3VwLmNvbHMpIHtcbiAgICAvLyBGaW5kIGNvbHVtbiBhbGlnbm1lbnQsIGNvbHVtbiBzcGFjaW5nLCBhbmQgIHZlcnRpY2FsIGxpbmVzLlxuICAgIHZhciBjb2xzID0gZ3JvdXAuY29scztcbiAgICB2YXIgY29sdW1uTGluZXMgPSBcIlwiO1xuICAgIHZhciBwcmV2VHlwZVdhc0FsaWduID0gZmFsc2U7XG4gICAgdmFyIGlTdGFydCA9IDA7XG4gICAgdmFyIGlFbmQgPSBjb2xzLmxlbmd0aDtcblxuICAgIGlmIChjb2xzWzBdLnR5cGUgPT09IFwic2VwYXJhdG9yXCIpIHtcbiAgICAgIG1lbmNsb3NlICs9IFwidG9wIFwiO1xuICAgICAgaVN0YXJ0ID0gMTtcbiAgICB9XG5cbiAgICBpZiAoY29sc1tjb2xzLmxlbmd0aCAtIDFdLnR5cGUgPT09IFwic2VwYXJhdG9yXCIpIHtcbiAgICAgIG1lbmNsb3NlICs9IFwiYm90dG9tIFwiO1xuICAgICAgaUVuZCAtPSAxO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSBpU3RhcnQ7IGkgPCBpRW5kOyBpKyspIHtcbiAgICAgIGlmIChjb2xzW2ldLnR5cGUgPT09IFwiYWxpZ25cIikge1xuICAgICAgICBhbGlnbiArPSBhbGlnbk1hcFtjb2xzW2ldLmFsaWduXTtcblxuICAgICAgICBpZiAocHJldlR5cGVXYXNBbGlnbikge1xuICAgICAgICAgIGNvbHVtbkxpbmVzICs9IFwibm9uZSBcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZUeXBlV2FzQWxpZ24gPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChjb2xzW2ldLnR5cGUgPT09IFwic2VwYXJhdG9yXCIpIHtcbiAgICAgICAgLy8gTWF0aE1MIGFjY2VwdHMgb25seSBzaW5nbGUgbGluZXMgYmV0d2VlbiBjZWxscy5cbiAgICAgICAgLy8gU28gd2UgcmVhZCBvbmx5IHRoZSBmaXJzdCBvZiBjb25zZWN1dGl2ZSBzZXBhcmF0b3JzLlxuICAgICAgICBpZiAocHJldlR5cGVXYXNBbGlnbikge1xuICAgICAgICAgIGNvbHVtbkxpbmVzICs9IGNvbHNbaV0uc2VwYXJhdG9yID09PSBcInxcIiA/IFwic29saWQgXCIgOiBcImRhc2hlZCBcIjtcbiAgICAgICAgICBwcmV2VHlwZVdhc0FsaWduID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0YWJsZS5zZXRBdHRyaWJ1dGUoXCJjb2x1bW5hbGlnblwiLCBhbGlnbi50cmltKCkpO1xuXG4gICAgaWYgKC9bc2RdLy50ZXN0KGNvbHVtbkxpbmVzKSkge1xuICAgICAgdGFibGUuc2V0QXR0cmlidXRlKFwiY29sdW1ubGluZXNcIiwgY29sdW1uTGluZXMudHJpbSgpKTtcbiAgICB9XG4gIH0gLy8gU2V0IGNvbHVtbiBzcGFjaW5nLlxuXG5cbiAgaWYgKGdyb3VwLmNvbFNlcGFyYXRpb25UeXBlID09PSBcImFsaWduXCIpIHtcbiAgICB2YXIgX2NvbHMgPSBncm91cC5jb2xzIHx8IFtdO1xuXG4gICAgdmFyIHNwYWNpbmcgPSBcIlwiO1xuXG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IF9jb2xzLmxlbmd0aDsgX2krKykge1xuICAgICAgc3BhY2luZyArPSBfaSAlIDIgPyBcIjBlbSBcIiA6IFwiMWVtIFwiO1xuICAgIH1cblxuICAgIHRhYmxlLnNldEF0dHJpYnV0ZShcImNvbHVtbnNwYWNpbmdcIiwgc3BhY2luZy50cmltKCkpO1xuICB9IGVsc2UgaWYgKGdyb3VwLmNvbFNlcGFyYXRpb25UeXBlID09PSBcImFsaWduYXRcIikge1xuICAgIHRhYmxlLnNldEF0dHJpYnV0ZShcImNvbHVtbnNwYWNpbmdcIiwgXCIwZW1cIik7XG4gIH0gZWxzZSB7XG4gICAgdGFibGUuc2V0QXR0cmlidXRlKFwiY29sdW1uc3BhY2luZ1wiLCBcIjFlbVwiKTtcbiAgfSAvLyBBZGRyZXNzIFxcaGxpbmUgYW5kIFxcaGRhc2hsaW5lXG5cblxuICB2YXIgcm93TGluZXMgPSBcIlwiO1xuICB2YXIgaGxpbmVzID0gZ3JvdXAuaExpbmVzQmVmb3JlUm93O1xuICBtZW5jbG9zZSArPSBobGluZXNbMF0ubGVuZ3RoID4gMCA/IFwibGVmdCBcIiA6IFwiXCI7XG4gIG1lbmNsb3NlICs9IGhsaW5lc1tobGluZXMubGVuZ3RoIC0gMV0ubGVuZ3RoID4gMCA/IFwicmlnaHQgXCIgOiBcIlwiO1xuXG4gIGZvciAodmFyIF9pMiA9IDE7IF9pMiA8IGhsaW5lcy5sZW5ndGggLSAxOyBfaTIrKykge1xuICAgIHJvd0xpbmVzICs9IGhsaW5lc1tfaTJdLmxlbmd0aCA9PT0gMCA/IFwibm9uZSBcIiAvLyBNYXRoTUwgYWNjZXB0cyBvbmx5IGEgc2luZ2xlIGxpbmUgYmV0d2VlbiByb3dzLiBSZWFkIG9uZSBlbGVtZW50LlxuICAgIDogaGxpbmVzW19pMl1bMF0gPyBcImRhc2hlZCBcIiA6IFwic29saWQgXCI7XG4gIH1cblxuICBpZiAoL1tzZF0vLnRlc3Qocm93TGluZXMpKSB7XG4gICAgdGFibGUuc2V0QXR0cmlidXRlKFwicm93bGluZXNcIiwgcm93TGluZXMudHJpbSgpKTtcbiAgfVxuXG4gIGlmIChtZW5jbG9zZSA9PT0gXCJcIikge1xuICAgIHJldHVybiB0YWJsZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgd3JhcHBlciA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibWVuY2xvc2VcIiwgW3RhYmxlXSk7XG4gICAgd3JhcHBlci5zZXRBdHRyaWJ1dGUoXCJub3RhdGlvblwiLCBtZW5jbG9zZS50cmltKCkpO1xuICAgIHJldHVybiB3cmFwcGVyO1xuICB9XG59OyAvLyBDb252ZW5pZW5jZSBmdW5jdGlvbiBmb3IgYWxpZ25lZCBhbmQgYWxpZ25lZGF0IGVudmlyb25tZW50cy5cblxuXG52YXIgYXJyYXlfYWxpZ25lZEhhbmRsZXIgPSBmdW5jdGlvbiBhbGlnbmVkSGFuZGxlcihjb250ZXh0LCBhcmdzKSB7XG4gIHZhciBjb2xzID0gW107XG4gIHZhciByZXMgPSBwYXJzZUFycmF5KGNvbnRleHQucGFyc2VyLCB7XG4gICAgY29sczogY29scyxcbiAgICBhZGRKb3Q6IHRydWVcbiAgfSwgXCJkaXNwbGF5XCIpOyAvLyBEZXRlcm1pbmluZyBudW1iZXIgb2YgY29sdW1ucy5cbiAgLy8gMS4gSWYgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIGdpdmVuLCB3ZSB1c2UgaXQgYXMgYSBudW1iZXIgb2YgY29sdW1ucyxcbiAgLy8gICAgYW5kIG1ha2VzIHN1cmUgdGhhdCBlYWNoIHJvdyBkb2Vzbid0IGV4Y2VlZCB0aGF0IG51bWJlci5cbiAgLy8gMi4gT3RoZXJ3aXNlLCBqdXN0IGNvdW50IG51bWJlciBvZiBjb2x1bW5zID0gbWF4aW11bSBudW1iZXJcbiAgLy8gICAgb2YgY2VsbHMgaW4gZWFjaCByb3cgKFwiYWxpZ25lZFwiIG1vZGUgLS0gaXNBbGlnbmVkIHdpbGwgYmUgdHJ1ZSkuXG4gIC8vXG4gIC8vIEF0IHRoZSBzYW1lIHRpbWUsIHByZXBlbmQgZW1wdHkgZ3JvdXAge30gYXQgYmVnaW5uaW5nIG9mIGV2ZXJ5IHNlY29uZFxuICAvLyBjZWxsIGluIGVhY2ggcm93IChzdGFydGluZyB3aXRoIHNlY29uZCBjZWxsKSBzbyB0aGF0IG9wZXJhdG9ycyBiZWNvbWVcbiAgLy8gYmluYXJ5LiAgVGhpcyBiZWhhdmlvciBpcyBpbXBsZW1lbnRlZCBpbiBhbXNtYXRoJ3MgXFxzdGFydEBhbGlnbmVkLlxuXG4gIHZhciBudW1NYXRocztcbiAgdmFyIG51bUNvbHMgPSAwO1xuICB2YXIgZW1wdHlHcm91cCA9IHtcbiAgICB0eXBlOiBcIm9yZGdyb3VwXCIsXG4gICAgbW9kZTogY29udGV4dC5tb2RlLFxuICAgIGJvZHk6IFtdXG4gIH07XG4gIHZhciBvcmRncm91cCA9IGNoZWNrTm9kZVR5cGUoYXJnc1swXSwgXCJvcmRncm91cFwiKTtcblxuICBpZiAob3JkZ3JvdXApIHtcbiAgICB2YXIgYXJnMCA9IFwiXCI7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9yZGdyb3VwLmJvZHkubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0ZXh0b3JkID0gYXNzZXJ0Tm9kZVR5cGUob3JkZ3JvdXAuYm9keVtpXSwgXCJ0ZXh0b3JkXCIpO1xuICAgICAgYXJnMCArPSB0ZXh0b3JkLnRleHQ7XG4gICAgfVxuXG4gICAgbnVtTWF0aHMgPSBOdW1iZXIoYXJnMCk7XG4gICAgbnVtQ29scyA9IG51bU1hdGhzICogMjtcbiAgfVxuXG4gIHZhciBpc0FsaWduZWQgPSAhbnVtQ29scztcbiAgcmVzLmJvZHkuZm9yRWFjaChmdW5jdGlvbiAocm93KSB7XG4gICAgZm9yICh2YXIgX2kzID0gMTsgX2kzIDwgcm93Lmxlbmd0aDsgX2kzICs9IDIpIHtcbiAgICAgIC8vIE1vZGlmeSBvcmRncm91cCBub2RlIHdpdGhpbiBzdHlsaW5nIG5vZGVcbiAgICAgIHZhciBzdHlsaW5nID0gYXNzZXJ0Tm9kZVR5cGUocm93W19pM10sIFwic3R5bGluZ1wiKTtcblxuICAgICAgdmFyIF9vcmRncm91cCA9IGFzc2VydE5vZGVUeXBlKHN0eWxpbmcuYm9keVswXSwgXCJvcmRncm91cFwiKTtcblxuICAgICAgX29yZGdyb3VwLmJvZHkudW5zaGlmdChlbXB0eUdyb3VwKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzQWxpZ25lZCkge1xuICAgICAgLy8gQ2FzZSAxXG4gICAgICB2YXIgY3VyTWF0aHMgPSByb3cubGVuZ3RoIC8gMjtcblxuICAgICAgaWYgKG51bU1hdGhzIDwgY3VyTWF0aHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiVG9vIG1hbnkgbWF0aCBpbiBhIHJvdzogXCIgKyAoXCJleHBlY3RlZCBcIiArIG51bU1hdGhzICsgXCIsIGJ1dCBnb3QgXCIgKyBjdXJNYXRocyksIHJvd1swXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChudW1Db2xzIDwgcm93Lmxlbmd0aCkge1xuICAgICAgLy8gQ2FzZSAyXG4gICAgICBudW1Db2xzID0gcm93Lmxlbmd0aDtcbiAgICB9XG4gIH0pOyAvLyBBZGp1c3RpbmcgYWxpZ25tZW50LlxuICAvLyBJbiBhbGlnbmVkIG1vZGUsIHdlIGFkZCBvbmUgXFxxcXVhZCBiZXR3ZWVuIGNvbHVtbnM7XG4gIC8vIG90aGVyd2lzZSB3ZSBhZGQgbm90aGluZy5cblxuICBmb3IgKHZhciBfaTQgPSAwOyBfaTQgPCBudW1Db2xzOyArK19pNCkge1xuICAgIHZhciBhbGlnbiA9IFwiclwiO1xuICAgIHZhciBwcmVnYXAgPSAwO1xuXG4gICAgaWYgKF9pNCAlIDIgPT09IDEpIHtcbiAgICAgIGFsaWduID0gXCJsXCI7XG4gICAgfSBlbHNlIGlmIChfaTQgPiAwICYmIGlzQWxpZ25lZCkge1xuICAgICAgLy8gXCJhbGlnbmVkXCIgbW9kZS5cbiAgICAgIHByZWdhcCA9IDE7IC8vIGFkZCBvbmUgXFxxdWFkXG4gICAgfVxuXG4gICAgY29sc1tfaTRdID0ge1xuICAgICAgdHlwZTogXCJhbGlnblwiLFxuICAgICAgYWxpZ246IGFsaWduLFxuICAgICAgcHJlZ2FwOiBwcmVnYXAsXG4gICAgICBwb3N0Z2FwOiAwXG4gICAgfTtcbiAgfVxuXG4gIHJlcy5jb2xTZXBhcmF0aW9uVHlwZSA9IGlzQWxpZ25lZCA/IFwiYWxpZ25cIiA6IFwiYWxpZ25hdFwiO1xuICByZXR1cm4gcmVzO1xufTsgLy8gQXJyYXlzIGFyZSBwYXJ0IG9mIExhVGVYLCBkZWZpbmVkIGluIGx0dGFiLmR0eCBzbyBpdHMgZG9jdW1lbnRhdGlvblxuLy8gaXMgcGFydCBvZiB0aGUgc291cmNlMmUucGRmIGZpbGUgb2YgTGFUZVgyZSBzb3VyY2UgZG9jdW1lbnRhdGlvbi5cbi8vIHtkYXJyYXl9IGlzIGFuIHthcnJheX0gZW52aXJvbm1lbnQgd2hlcmUgY2VsbHMgYXJlIHNldCBpbiBcXGRpc3BsYXlzdHlsZSxcbi8vIGFzIGRlZmluZWQgaW4gbmNjbWF0aC5zdHkuXG5cblxuZGVmaW5lRW52aXJvbm1lbnQoe1xuICB0eXBlOiBcImFycmF5XCIsXG4gIG5hbWVzOiBbXCJhcnJheVwiLCBcImRhcnJheVwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoY29udGV4dCwgYXJncykge1xuICAgIC8vIFNpbmNlIG5vIHR5cGVzIGFyZSBzcGVjaWZpZWQgYWJvdmUsIHRoZSB0d28gcG9zc2liaWxpdGllcyBhcmVcbiAgICAvLyAtIFRoZSBhcmd1bWVudCBpcyB3cmFwcGVkIGluIHt9IG9yIFtdLCBpbiB3aGljaCBjYXNlIFBhcnNlcidzXG4gICAgLy8gICBwYXJzZUdyb3VwKCkgcmV0dXJucyBhbiBcIm9yZGdyb3VwXCIgd3JhcHBpbmcgc29tZSBzeW1ib2wgbm9kZS5cbiAgICAvLyAtIFRoZSBhcmd1bWVudCBpcyBhIGJhcmUgc3ltYm9sIG5vZGUuXG4gICAgdmFyIHN5bU5vZGUgPSBjaGVja1N5bWJvbE5vZGVUeXBlKGFyZ3NbMF0pO1xuICAgIHZhciBjb2xhbGlnbiA9IHN5bU5vZGUgPyBbYXJnc1swXV0gOiBhc3NlcnROb2RlVHlwZShhcmdzWzBdLCBcIm9yZGdyb3VwXCIpLmJvZHk7XG4gICAgdmFyIGNvbHMgPSBjb2xhbGlnbi5tYXAoZnVuY3Rpb24gKG5kZSkge1xuICAgICAgdmFyIG5vZGUgPSBhc3NlcnRTeW1ib2xOb2RlVHlwZShuZGUpO1xuICAgICAgdmFyIGNhID0gbm9kZS50ZXh0O1xuXG4gICAgICBpZiAoXCJsY3JcIi5pbmRleE9mKGNhKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiBcImFsaWduXCIsXG4gICAgICAgICAgYWxpZ246IGNhXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKGNhID09PSBcInxcIikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6IFwic2VwYXJhdG9yXCIsXG4gICAgICAgICAgc2VwYXJhdG9yOiBcInxcIlxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChjYSA9PT0gXCI6XCIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiBcInNlcGFyYXRvclwiLFxuICAgICAgICAgIHNlcGFyYXRvcjogXCI6XCJcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiVW5rbm93biBjb2x1bW4gYWxpZ25tZW50OiBcIiArIGNhLCBuZGUpO1xuICAgIH0pO1xuICAgIHZhciByZXMgPSB7XG4gICAgICBjb2xzOiBjb2xzLFxuICAgICAgaHNraXBCZWZvcmVBbmRBZnRlcjogdHJ1ZSAvLyBcXEBwcmVhbWJsZSBpbiBsdHRhYi5kdHhcblxuICAgIH07XG4gICAgcmV0dXJuIHBhcnNlQXJyYXkoY29udGV4dC5wYXJzZXIsIHJlcywgZENlbGxTdHlsZShjb250ZXh0LmVudk5hbWUpKTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGFycmF5X2h0bWxCdWlsZGVyLFxuICBtYXRobWxCdWlsZGVyOiBhcnJheV9tYXRobWxCdWlsZGVyXG59KTsgLy8gVGhlIG1hdHJpeCBlbnZpcm9ubWVudHMgb2YgYW1zbWF0aCBidWlsZHMgb24gdGhlIGFycmF5IGVudmlyb25tZW50XG4vLyBvZiBMYVRlWCwgd2hpY2ggaXMgZGlzY3Vzc2VkIGFib3ZlLlxuXG5kZWZpbmVFbnZpcm9ubWVudCh7XG4gIHR5cGU6IFwiYXJyYXlcIixcbiAgbmFtZXM6IFtcIm1hdHJpeFwiLCBcInBtYXRyaXhcIiwgXCJibWF0cml4XCIsIFwiQm1hdHJpeFwiLCBcInZtYXRyaXhcIiwgXCJWbWF0cml4XCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDBcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihjb250ZXh0KSB7XG4gICAgdmFyIGRlbGltaXRlcnMgPSB7XG4gICAgICBcIm1hdHJpeFwiOiBudWxsLFxuICAgICAgXCJwbWF0cml4XCI6IFtcIihcIiwgXCIpXCJdLFxuICAgICAgXCJibWF0cml4XCI6IFtcIltcIiwgXCJdXCJdLFxuICAgICAgXCJCbWF0cml4XCI6IFtcIlxcXFx7XCIsIFwiXFxcXH1cIl0sXG4gICAgICBcInZtYXRyaXhcIjogW1wifFwiLCBcInxcIl0sXG4gICAgICBcIlZtYXRyaXhcIjogW1wiXFxcXFZlcnRcIiwgXCJcXFxcVmVydFwiXVxuICAgIH1bY29udGV4dC5lbnZOYW1lXTsgLy8gXFxoc2tpcCAtXFxhcnJheWNvbHNlcCBpbiBhbXNtYXRoXG5cbiAgICB2YXIgcGF5bG9hZCA9IHtcbiAgICAgIGhza2lwQmVmb3JlQW5kQWZ0ZXI6IGZhbHNlXG4gICAgfTtcbiAgICB2YXIgcmVzID0gcGFyc2VBcnJheShjb250ZXh0LnBhcnNlciwgcGF5bG9hZCwgZENlbGxTdHlsZShjb250ZXh0LmVudk5hbWUpKTtcbiAgICByZXR1cm4gZGVsaW1pdGVycyA/IHtcbiAgICAgIHR5cGU6IFwibGVmdHJpZ2h0XCIsXG4gICAgICBtb2RlOiBjb250ZXh0Lm1vZGUsXG4gICAgICBib2R5OiBbcmVzXSxcbiAgICAgIGxlZnQ6IGRlbGltaXRlcnNbMF0sXG4gICAgICByaWdodDogZGVsaW1pdGVyc1sxXVxuICAgIH0gOiByZXM7XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBhcnJheV9odG1sQnVpbGRlcixcbiAgbWF0aG1sQnVpbGRlcjogYXJyYXlfbWF0aG1sQnVpbGRlclxufSk7IC8vIEEgY2FzZXMgZW52aXJvbm1lbnQgKGluIGFtc21hdGguc3R5KSBpcyBhbG1vc3QgZXF1aXZhbGVudCB0b1xuLy8gXFxkZWZcXGFycmF5c3RyZXRjaHsxLjJ9JVxuLy8gXFxsZWZ0XFx7XFxiZWdpbnthcnJheX17QHt9bEB7XFxxdWFkfWxAe319IOKApiBcXGVuZHthcnJheX1cXHJpZ2h0LlxuLy8ge2RjYXNlc30gaXMgYSB7Y2FzZXN9IGVudmlyb25tZW50IHdoZXJlIGNlbGxzIGFyZSBzZXQgaW4gXFxkaXNwbGF5c3R5bGUsXG4vLyBhcyBkZWZpbmVkIGluIG1hdGh0b29scy5zdHkuXG5cbmRlZmluZUVudmlyb25tZW50KHtcbiAgdHlwZTogXCJhcnJheVwiLFxuICBuYW1lczogW1wiY2FzZXNcIiwgXCJkY2FzZXNcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMFxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKGNvbnRleHQpIHtcbiAgICB2YXIgcGF5bG9hZCA9IHtcbiAgICAgIGFycmF5c3RyZXRjaDogMS4yLFxuICAgICAgY29sczogW3tcbiAgICAgICAgdHlwZTogXCJhbGlnblwiLFxuICAgICAgICBhbGlnbjogXCJsXCIsXG4gICAgICAgIHByZWdhcDogMCxcbiAgICAgICAgLy8gVE9ETyhrZXZpbmIpIGdldCB0aGUgY3VycmVudCBzdHlsZS5cbiAgICAgICAgLy8gRm9yIG5vdyB3ZSB1c2UgdGhlIG1ldHJpY3MgZm9yIFRFWFQgc3R5bGUgd2hpY2ggaXMgd2hhdCB3ZSB3ZXJlXG4gICAgICAgIC8vIGRvaW5nIGJlZm9yZS4gIEJlZm9yZSBhdHRlbXB0aW5nIHRvIGdldCB0aGUgY3VycmVudCBzdHlsZSB3ZVxuICAgICAgICAvLyBzaG91bGQgbG9vayBhdCBUZVgncyBiZWhhdmlvciBlc3BlY2lhbGx5IGZvciBcXG92ZXIgYW5kIG1hdHJpY2VzLlxuICAgICAgICBwb3N0Z2FwOiAxLjBcbiAgICAgICAgLyogMWVtIHF1YWQgKi9cblxuICAgICAgfSwge1xuICAgICAgICB0eXBlOiBcImFsaWduXCIsXG4gICAgICAgIGFsaWduOiBcImxcIixcbiAgICAgICAgcHJlZ2FwOiAwLFxuICAgICAgICBwb3N0Z2FwOiAwXG4gICAgICB9XVxuICAgIH07XG4gICAgdmFyIHJlcyA9IHBhcnNlQXJyYXkoY29udGV4dC5wYXJzZXIsIHBheWxvYWQsIGRDZWxsU3R5bGUoY29udGV4dC5lbnZOYW1lKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwibGVmdHJpZ2h0XCIsXG4gICAgICBtb2RlOiBjb250ZXh0Lm1vZGUsXG4gICAgICBib2R5OiBbcmVzXSxcbiAgICAgIGxlZnQ6IFwiXFxcXHtcIixcbiAgICAgIHJpZ2h0OiBcIi5cIlxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBhcnJheV9odG1sQnVpbGRlcixcbiAgbWF0aG1sQnVpbGRlcjogYXJyYXlfbWF0aG1sQnVpbGRlclxufSk7IC8vIEFuIGFsaWduZWQgZW52aXJvbm1lbnQgaXMgbGlrZSB0aGUgYWxpZ24qIGVudmlyb25tZW50XG4vLyBleGNlcHQgaXQgb3BlcmF0ZXMgd2l0aGluIG1hdGggbW9kZS5cbi8vIE5vdGUgdGhhdCB3ZSBhc3N1bWUgXFxub21hbGxpbmVza2lwbGltaXQgdG8gYmUgemVybyxcbi8vIHNvIHRoYXQgXFxzdHJ1dEAgaXMgdGhlIHNhbWUgYXMgXFxzdHJ1dC5cblxuZGVmaW5lRW52aXJvbm1lbnQoe1xuICB0eXBlOiBcImFycmF5XCIsXG4gIG5hbWVzOiBbXCJhbGlnbmVkXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDBcbiAgfSxcbiAgaGFuZGxlcjogYXJyYXlfYWxpZ25lZEhhbmRsZXIsXG4gIGh0bWxCdWlsZGVyOiBhcnJheV9odG1sQnVpbGRlcixcbiAgbWF0aG1sQnVpbGRlcjogYXJyYXlfbWF0aG1sQnVpbGRlclxufSk7IC8vIEEgZ2F0aGVyZWQgZW52aXJvbm1lbnQgaXMgbGlrZSBhbiBhcnJheSBlbnZpcm9ubWVudCB3aXRoIG9uZSBjZW50ZXJlZFxuLy8gY29sdW1uLCBidXQgd2hlcmUgcm93cyBhcmUgY29uc2lkZXJlZCBsaW5lcyBzbyBnZXQgXFxqb3QgbGluZSBzcGFjaW5nXG4vLyBhbmQgY29udGVudHMgYXJlIHNldCBpbiBcXGRpc3BsYXlzdHlsZS5cblxuZGVmaW5lRW52aXJvbm1lbnQoe1xuICB0eXBlOiBcImFycmF5XCIsXG4gIG5hbWVzOiBbXCJnYXRoZXJlZFwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAwXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoY29udGV4dCkge1xuICAgIHZhciByZXMgPSB7XG4gICAgICBjb2xzOiBbe1xuICAgICAgICB0eXBlOiBcImFsaWduXCIsXG4gICAgICAgIGFsaWduOiBcImNcIlxuICAgICAgfV0sXG4gICAgICBhZGRKb3Q6IHRydWVcbiAgICB9O1xuICAgIHJldHVybiBwYXJzZUFycmF5KGNvbnRleHQucGFyc2VyLCByZXMsIFwiZGlzcGxheVwiKTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGFycmF5X2h0bWxCdWlsZGVyLFxuICBtYXRobWxCdWlsZGVyOiBhcnJheV9tYXRobWxCdWlsZGVyXG59KTsgLy8gYWxpZ25hdCBlbnZpcm9ubWVudCBpcyBsaWtlIGFuIGFsaWduIGVudmlyb25tZW50LCBidXQgb25lIG11c3QgZXhwbGljaXRseVxuLy8gc3BlY2lmeSBtYXhpbXVtIG51bWJlciBvZiBjb2x1bW5zIGluIGVhY2ggcm93LCBhbmQgY2FuIGFkanVzdCBzcGFjaW5nIGJldHdlZW5cbi8vIGVhY2ggY29sdW1ucy5cblxuZGVmaW5lRW52aXJvbm1lbnQoe1xuICB0eXBlOiBcImFycmF5XCIsXG4gIG5hbWVzOiBbXCJhbGlnbmVkYXRcIl0sXG4gIC8vIE9uZSBmb3IgbnVtYmVyZWQgYW5kIGZvciB1bm51bWJlcmVkO1xuICAvLyBidXQsIEthVGVYIGRvZXNuJ3Qgc3VwcG9ydHMgbWF0aCBudW1iZXJpbmcgeWV0LFxuICAvLyB0aGV5IG1ha2Ugbm8gZGlmZmVyZW5jZSBmb3Igbm93LlxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDFcbiAgfSxcbiAgaGFuZGxlcjogYXJyYXlfYWxpZ25lZEhhbmRsZXIsXG4gIGh0bWxCdWlsZGVyOiBhcnJheV9odG1sQnVpbGRlcixcbiAgbWF0aG1sQnVpbGRlcjogYXJyYXlfbWF0aG1sQnVpbGRlclxufSk7IC8vIENhdGNoIFxcaGxpbmUgb3V0c2lkZSBhcnJheSBlbnZpcm9ubWVudFxuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwidGV4dFwiLFxuICAvLyBEb2Vzbid0IG1hdHRlciB3aGF0IHRoaXMgaXMuXG4gIG5hbWVzOiBbXCJcXFxcaGxpbmVcIiwgXCJcXFxcaGRhc2hsaW5lXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDAsXG4gICAgYWxsb3dlZEluVGV4dDogdHJ1ZSxcbiAgICBhbGxvd2VkSW5NYXRoOiB0cnVlXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoY29udGV4dCwgYXJncykge1xuICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihjb250ZXh0LmZ1bmNOYW1lICsgXCIgdmFsaWQgb25seSB3aXRoaW4gYXJyYXkgZW52aXJvbm1lbnRcIik7XG4gIH1cbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZW52aXJvbm1lbnRzLmpzXG5cbnZhciBlbnZpcm9ubWVudHMgPSBfZW52aXJvbm1lbnRzO1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgc3JjX2Vudmlyb25tZW50cyA9IChlbnZpcm9ubWVudHMpOyAvLyBBbGwgZW52aXJvbm1lbnQgZGVmaW5pdGlvbnMgc2hvdWxkIGJlIGltcG9ydGVkIGJlbG93XG5cblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL2Vudmlyb25tZW50LmpzXG5cblxuXG4gLy8gRW52aXJvbm1lbnQgZGVsaW1pdGVycy4gSFRNTC9NYXRoTUwgcmVuZGVyaW5nIGlzIGRlZmluZWQgaW4gdGhlIGNvcnJlc3BvbmRpbmdcbi8vIGRlZmluZUVudmlyb25tZW50IGRlZmluaXRpb25zLlxuLy8gJEZsb3dGaXhNZSwgXCJlbnZpcm9ubWVudFwiIGhhbmRsZXIgcmV0dXJucyBhbiBlbnZpcm9ubWVudCBQYXJzZU5vZGVcblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcImVudmlyb25tZW50XCIsXG4gIG5hbWVzOiBbXCJcXFxcYmVnaW5cIiwgXCJcXFxcZW5kXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDEsXG4gICAgYXJnVHlwZXM6IFtcInRleHRcIl1cbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmLCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYucGFyc2VyLFxuICAgICAgICBmdW5jTmFtZSA9IF9yZWYuZnVuY05hbWU7XG4gICAgdmFyIG5hbWVHcm91cCA9IGFyZ3NbMF07XG5cbiAgICBpZiAobmFtZUdyb3VwLnR5cGUgIT09IFwib3JkZ3JvdXBcIikge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiSW52YWxpZCBlbnZpcm9ubWVudCBuYW1lXCIsIG5hbWVHcm91cCk7XG4gICAgfVxuXG4gICAgdmFyIGVudk5hbWUgPSBcIlwiO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYW1lR3JvdXAuYm9keS5sZW5ndGg7ICsraSkge1xuICAgICAgZW52TmFtZSArPSBhc3NlcnROb2RlVHlwZShuYW1lR3JvdXAuYm9keVtpXSwgXCJ0ZXh0b3JkXCIpLnRleHQ7XG4gICAgfVxuXG4gICAgaWYgKGZ1bmNOYW1lID09PSBcIlxcXFxiZWdpblwiKSB7XG4gICAgICAvLyBiZWdpbi4uLmVuZCBpcyBzaW1pbGFyIHRvIGxlZnQuLi5yaWdodFxuICAgICAgaWYgKCFzcmNfZW52aXJvbm1lbnRzLmhhc093blByb3BlcnR5KGVudk5hbWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIk5vIHN1Y2ggZW52aXJvbm1lbnQ6IFwiICsgZW52TmFtZSwgbmFtZUdyb3VwKTtcbiAgICAgIH0gLy8gQnVpbGQgdGhlIGVudmlyb25tZW50IG9iamVjdC4gQXJndW1lbnRzIGFuZCBvdGhlciBpbmZvcm1hdGlvbiB3aWxsXG4gICAgICAvLyBiZSBtYWRlIGF2YWlsYWJsZSB0byB0aGUgYmVnaW4gYW5kIGVuZCBtZXRob2RzIHVzaW5nIHByb3BlcnRpZXMuXG5cblxuICAgICAgdmFyIGVudiA9IHNyY19lbnZpcm9ubWVudHNbZW52TmFtZV07XG5cbiAgICAgIHZhciBfcGFyc2VyJHBhcnNlQXJndW1lbnQgPSBwYXJzZXIucGFyc2VBcmd1bWVudHMoXCJcXFxcYmVnaW57XCIgKyBlbnZOYW1lICsgXCJ9XCIsIGVudiksXG4gICAgICAgICAgX2FyZ3MgPSBfcGFyc2VyJHBhcnNlQXJndW1lbnQuYXJncyxcbiAgICAgICAgICBvcHRBcmdzID0gX3BhcnNlciRwYXJzZUFyZ3VtZW50Lm9wdEFyZ3M7XG5cbiAgICAgIHZhciBjb250ZXh0ID0ge1xuICAgICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgICAgZW52TmFtZTogZW52TmFtZSxcbiAgICAgICAgcGFyc2VyOiBwYXJzZXJcbiAgICAgIH07XG4gICAgICB2YXIgcmVzdWx0ID0gZW52LmhhbmRsZXIoY29udGV4dCwgX2FyZ3MsIG9wdEFyZ3MpO1xuICAgICAgcGFyc2VyLmV4cGVjdChcIlxcXFxlbmRcIiwgZmFsc2UpO1xuICAgICAgdmFyIGVuZE5hbWVUb2tlbiA9IHBhcnNlci5uZXh0VG9rZW47XG4gICAgICB2YXIgZW5kID0gYXNzZXJ0Tm9kZVR5cGUocGFyc2VyLnBhcnNlRnVuY3Rpb24oKSwgXCJlbnZpcm9ubWVudFwiKTtcblxuICAgICAgaWYgKGVuZC5uYW1lICE9PSBlbnZOYW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIk1pc21hdGNoOiBcXFxcYmVnaW57XCIgKyBlbnZOYW1lICsgXCJ9IG1hdGNoZWQgYnkgXFxcXGVuZHtcIiArIGVuZC5uYW1lICsgXCJ9XCIsIGVuZE5hbWVUb2tlbik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiZW52aXJvbm1lbnRcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgbmFtZTogZW52TmFtZSxcbiAgICAgIG5hbWVHcm91cDogbmFtZUdyb3VwXG4gICAgfTtcbiAgfVxufSk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMvbWNsYXNzLmpzXG5cblxuXG5cblxudmFyIG1jbGFzc19tYWtlU3BhbiA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuO1xuXG5mdW5jdGlvbiBtY2xhc3NfaHRtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnRzID0gYnVpbGRIVE1MX2J1aWxkRXhwcmVzc2lvbihncm91cC5ib2R5LCBvcHRpb25zLCB0cnVlKTtcbiAgcmV0dXJuIG1jbGFzc19tYWtlU3BhbihbZ3JvdXAubWNsYXNzXSwgZWxlbWVudHMsIG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBtY2xhc3NfbWF0aG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICB2YXIgaW5uZXIgPSBidWlsZE1hdGhNTF9idWlsZEV4cHJlc3Npb24oZ3JvdXAuYm9keSwgb3B0aW9ucyk7XG4gIHJldHVybiBtYXRoTUxUcmVlLm5ld0RvY3VtZW50RnJhZ21lbnQoaW5uZXIpO1xufSAvLyBNYXRoIGNsYXNzIGNvbW1hbmRzIGV4Y2VwdCBcXG1hdGhvcFxuXG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJtY2xhc3NcIixcbiAgbmFtZXM6IFtcIlxcXFxtYXRob3JkXCIsIFwiXFxcXG1hdGhiaW5cIiwgXCJcXFxcbWF0aHJlbFwiLCBcIlxcXFxtYXRob3BlblwiLCBcIlxcXFxtYXRoY2xvc2VcIiwgXCJcXFxcbWF0aHB1bmN0XCIsIFwiXFxcXG1hdGhpbm5lclwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZiwgYXJncykge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmLnBhcnNlcixcbiAgICAgICAgZnVuY05hbWUgPSBfcmVmLmZ1bmNOYW1lO1xuICAgIHZhciBib2R5ID0gYXJnc1swXTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJtY2xhc3NcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgbWNsYXNzOiBcIm1cIiArIGZ1bmNOYW1lLnN1YnN0cig1KSxcbiAgICAgIGJvZHk6IGRlZmluZUZ1bmN0aW9uX29yZGFyZ3VtZW50KGJvZHkpXG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IG1jbGFzc19odG1sQnVpbGRlcixcbiAgbWF0aG1sQnVpbGRlcjogbWNsYXNzX21hdGhtbEJ1aWxkZXJcbn0pO1xudmFyIGJpbnJlbENsYXNzID0gZnVuY3Rpb24gYmlucmVsQ2xhc3MoYXJnKSB7XG4gIC8vIFxcYmlucmVsQCBzcGFjaW5nIHZhcmllcyB3aXRoIChiaW58cmVsfG9yZCkgb2YgdGhlIGF0b20gaW4gdGhlIGFyZ3VtZW50LlxuICAvLyAoYnkgcmVuZGVyaW5nIHNlcGFyYXRlbHkgYW5kIHdpdGgge31zIGJlZm9yZSBhbmQgYWZ0ZXIsIGFuZCBtZWFzdXJpbmdcbiAgLy8gdGhlIGNoYW5nZSBpbiBzcGFjaW5nKS4gIFdlJ2xsIGRvIHJvdWdobHkgdGhlIHNhbWUgYnkgZGV0ZWN0aW5nIHRoZVxuICAvLyBhdG9tIHR5cGUgZGlyZWN0bHkuXG4gIHZhciBhdG9tID0gYXJnLnR5cGUgPT09IFwib3JkZ3JvdXBcIiAmJiBhcmcuYm9keS5sZW5ndGggPyBhcmcuYm9keVswXSA6IGFyZztcblxuICBpZiAoYXRvbS50eXBlID09PSBcImF0b21cIiAmJiAoYXRvbS5mYW1pbHkgPT09IFwiYmluXCIgfHwgYXRvbS5mYW1pbHkgPT09IFwicmVsXCIpKSB7XG4gICAgcmV0dXJuIFwibVwiICsgYXRvbS5mYW1pbHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwibW9yZFwiO1xuICB9XG59OyAvLyBcXEBiaW5yZWx7eH17eX0gcmVuZGVycyBsaWtlIHkgYnV0IGFzIG1iaW4vbXJlbC9tb3JkIGlmIHggaXMgbWJpbi9tcmVsL21vcmQuXG4vLyBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gXFxiaW5yZWxAe3h9XFxiaW5yZWxAQHt5fSBpbiBBTVNUZVguXG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJtY2xhc3NcIixcbiAgbmFtZXM6IFtcIlxcXFxAYmlucmVsXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDJcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmMiwgYXJncykge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmMi5wYXJzZXI7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwibWNsYXNzXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIG1jbGFzczogYmlucmVsQ2xhc3MoYXJnc1swXSksXG4gICAgICBib2R5OiBbYXJnc1sxXV1cbiAgICB9O1xuICB9XG59KTsgLy8gQnVpbGQgYSByZWxhdGlvbiBvciBzdGFja2VkIG9wIGJ5IHBsYWNpbmcgb25lIHN5bWJvbCBvbiB0b3Agb2YgYW5vdGhlclxuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwibWNsYXNzXCIsXG4gIG5hbWVzOiBbXCJcXFxcc3RhY2tyZWxcIiwgXCJcXFxcb3ZlcnNldFwiLCBcIlxcXFx1bmRlcnNldFwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAyXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZjMsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZjMucGFyc2VyLFxuICAgICAgICBmdW5jTmFtZSA9IF9yZWYzLmZ1bmNOYW1lO1xuICAgIHZhciBiYXNlQXJnID0gYXJnc1sxXTtcbiAgICB2YXIgc2hpZnRlZEFyZyA9IGFyZ3NbMF07XG4gICAgdmFyIG1jbGFzcztcblxuICAgIGlmIChmdW5jTmFtZSAhPT0gXCJcXFxcc3RhY2tyZWxcIikge1xuICAgICAgLy8gTGFUZVggYXBwbGllcyBcXGJpbnJlbCBzcGFjaW5nIHRvIFxcb3ZlcnNldCBhbmQgXFx1bmRlcnNldC5cbiAgICAgIG1jbGFzcyA9IGJpbnJlbENsYXNzKGJhc2VBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtY2xhc3MgPSBcIm1yZWxcIjsgLy8gZm9yIFxcc3RhY2tyZWxcbiAgICB9XG5cbiAgICB2YXIgYmFzZU9wID0ge1xuICAgICAgdHlwZTogXCJvcFwiLFxuICAgICAgbW9kZTogYmFzZUFyZy5tb2RlLFxuICAgICAgbGltaXRzOiB0cnVlLFxuICAgICAgYWx3YXlzSGFuZGxlU3VwU3ViOiB0cnVlLFxuICAgICAgcGFyZW50SXNTdXBTdWI6IGZhbHNlLFxuICAgICAgc3ltYm9sOiBmYWxzZSxcbiAgICAgIHN1cHByZXNzQmFzZVNoaWZ0OiBmdW5jTmFtZSAhPT0gXCJcXFxcc3RhY2tyZWxcIixcbiAgICAgIGJvZHk6IGRlZmluZUZ1bmN0aW9uX29yZGFyZ3VtZW50KGJhc2VBcmcpXG4gICAgfTtcbiAgICB2YXIgc3Vwc3ViID0ge1xuICAgICAgdHlwZTogXCJzdXBzdWJcIixcbiAgICAgIG1vZGU6IHNoaWZ0ZWRBcmcubW9kZSxcbiAgICAgIGJhc2U6IGJhc2VPcCxcbiAgICAgIHN1cDogZnVuY05hbWUgPT09IFwiXFxcXHVuZGVyc2V0XCIgPyBudWxsIDogc2hpZnRlZEFyZyxcbiAgICAgIHN1YjogZnVuY05hbWUgPT09IFwiXFxcXHVuZGVyc2V0XCIgPyBzaGlmdGVkQXJnIDogbnVsbFxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwibWNsYXNzXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIG1jbGFzczogbWNsYXNzLFxuICAgICAgYm9keTogW3N1cHN1Yl1cbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogbWNsYXNzX2h0bWxCdWlsZGVyLFxuICBtYXRobWxCdWlsZGVyOiBtY2xhc3NfbWF0aG1sQnVpbGRlclxufSk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMvZm9udC5qc1xuLy8gVE9ETyhrZXZpbmIpOiBpbXBsZW1lbnQgXFxcXHNsIGFuZCBcXFxcc2NcblxuXG5cblxuXG52YXIgZm9udF9odG1sQnVpbGRlciA9IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gIHZhciBmb250ID0gZ3JvdXAuZm9udDtcbiAgdmFyIG5ld09wdGlvbnMgPSBvcHRpb25zLndpdGhGb250KGZvbnQpO1xuICByZXR1cm4gYnVpbGRIVE1MX2J1aWxkR3JvdXAoZ3JvdXAuYm9keSwgbmV3T3B0aW9ucyk7XG59O1xuXG52YXIgZm9udF9tYXRobWxCdWlsZGVyID0gZnVuY3Rpb24gbWF0aG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICB2YXIgZm9udCA9IGdyb3VwLmZvbnQ7XG4gIHZhciBuZXdPcHRpb25zID0gb3B0aW9ucy53aXRoRm9udChmb250KTtcbiAgcmV0dXJuIGJ1aWxkTWF0aE1MX2J1aWxkR3JvdXAoZ3JvdXAuYm9keSwgbmV3T3B0aW9ucyk7XG59O1xuXG52YXIgZm9udEFsaWFzZXMgPSB7XG4gIFwiXFxcXEJiYlwiOiBcIlxcXFxtYXRoYmJcIixcbiAgXCJcXFxcYm9sZFwiOiBcIlxcXFxtYXRoYmZcIixcbiAgXCJcXFxcZnJha1wiOiBcIlxcXFxtYXRoZnJha1wiLFxuICBcIlxcXFxibVwiOiBcIlxcXFxib2xkc3ltYm9sXCJcbn07XG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwiZm9udFwiLFxuICBuYW1lczogWy8vIHN0eWxlcywgZXhjZXB0IFxcYm9sZHN5bWJvbCBkZWZpbmVkIGJlbG93XG4gIFwiXFxcXG1hdGhybVwiLCBcIlxcXFxtYXRoaXRcIiwgXCJcXFxcbWF0aGJmXCIsIFwiXFxcXG1hdGhub3JtYWxcIiwgLy8gZmFtaWxpZXNcbiAgXCJcXFxcbWF0aGJiXCIsIFwiXFxcXG1hdGhjYWxcIiwgXCJcXFxcbWF0aGZyYWtcIiwgXCJcXFxcbWF0aHNjclwiLCBcIlxcXFxtYXRoc2ZcIiwgXCJcXFxcbWF0aHR0XCIsIC8vIGFsaWFzZXMsIGV4Y2VwdCBcXGJtIGRlZmluZWQgYmVsb3dcbiAgXCJcXFxcQmJiXCIsIFwiXFxcXGJvbGRcIiwgXCJcXFxcZnJha1wiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxLFxuICAgIGdyZWVkaW5lc3M6IDJcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmLCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYucGFyc2VyLFxuICAgICAgICBmdW5jTmFtZSA9IF9yZWYuZnVuY05hbWU7XG4gICAgdmFyIGJvZHkgPSBhcmdzWzBdO1xuICAgIHZhciBmdW5jID0gZnVuY05hbWU7XG5cbiAgICBpZiAoZnVuYyBpbiBmb250QWxpYXNlcykge1xuICAgICAgZnVuYyA9IGZvbnRBbGlhc2VzW2Z1bmNdO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImZvbnRcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgZm9udDogZnVuYy5zbGljZSgxKSxcbiAgICAgIGJvZHk6IGJvZHlcbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogZm9udF9odG1sQnVpbGRlcixcbiAgbWF0aG1sQnVpbGRlcjogZm9udF9tYXRobWxCdWlsZGVyXG59KTtcbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJtY2xhc3NcIixcbiAgbmFtZXM6IFtcIlxcXFxib2xkc3ltYm9sXCIsIFwiXFxcXGJtXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDEsXG4gICAgZ3JlZWRpbmVzczogMlxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYyLCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYyLnBhcnNlcjtcbiAgICB2YXIgYm9keSA9IGFyZ3NbMF07IC8vIGFtc2JzeS5zdHkncyBcXGJvbGRzeW1ib2wgdXNlcyBcXGJpbnJlbCBzcGFjaW5nIHRvIGluaGVyaXQgdGhlXG4gICAgLy8gYXJndW1lbnQncyBiaW58cmVsfG9yZCBzdGF0dXNcblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIm1jbGFzc1wiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICBtY2xhc3M6IGJpbnJlbENsYXNzKGJvZHkpLFxuICAgICAgYm9keTogW3tcbiAgICAgICAgdHlwZTogXCJmb250XCIsXG4gICAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgICBmb250OiBcImJvbGRzeW1ib2xcIixcbiAgICAgICAgYm9keTogYm9keVxuICAgICAgfV1cbiAgICB9O1xuICB9XG59KTsgLy8gT2xkIGZvbnQgY2hhbmdpbmcgZnVuY3Rpb25zXG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJmb250XCIsXG4gIG5hbWVzOiBbXCJcXFxccm1cIiwgXCJcXFxcc2ZcIiwgXCJcXFxcdHRcIiwgXCJcXFxcYmZcIiwgXCJcXFxcaXRcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMCxcbiAgICBhbGxvd2VkSW5UZXh0OiB0cnVlXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZjMsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZjMucGFyc2VyLFxuICAgICAgICBmdW5jTmFtZSA9IF9yZWYzLmZ1bmNOYW1lLFxuICAgICAgICBicmVha09uVG9rZW5UZXh0ID0gX3JlZjMuYnJlYWtPblRva2VuVGV4dDtcbiAgICB2YXIgbW9kZSA9IHBhcnNlci5tb2RlO1xuICAgIHZhciBib2R5ID0gcGFyc2VyLnBhcnNlRXhwcmVzc2lvbih0cnVlLCBicmVha09uVG9rZW5UZXh0KTtcbiAgICB2YXIgc3R5bGUgPSBcIm1hdGhcIiArIGZ1bmNOYW1lLnNsaWNlKDEpO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImZvbnRcIixcbiAgICAgIG1vZGU6IG1vZGUsXG4gICAgICBmb250OiBzdHlsZSxcbiAgICAgIGJvZHk6IHtcbiAgICAgICAgdHlwZTogXCJvcmRncm91cFwiLFxuICAgICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgICAgYm9keTogYm9keVxuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBmb250X2h0bWxCdWlsZGVyLFxuICBtYXRobWxCdWlsZGVyOiBmb250X21hdGhtbEJ1aWxkZXJcbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL2dlbmZyYWMuanNcblxuXG5cblxuXG5cblxuXG5cblxuXG52YXIgZ2VuZnJhY19hZGp1c3RTdHlsZSA9IGZ1bmN0aW9uIGFkanVzdFN0eWxlKHNpemUsIG9yaWdpbmFsU3R5bGUpIHtcbiAgLy8gRmlndXJlIG91dCB3aGF0IHN0eWxlIHRoaXMgZnJhY3Rpb24gc2hvdWxkIGJlIGluIGJhc2VkIG9uIHRoZVxuICAvLyBmdW5jdGlvbiB1c2VkXG4gIHZhciBzdHlsZSA9IG9yaWdpbmFsU3R5bGU7XG5cbiAgaWYgKHNpemUgPT09IFwiZGlzcGxheVwiKSB7XG4gICAgLy8gR2V0IGRpc3BsYXkgc3R5bGUgYXMgYSBkZWZhdWx0LlxuICAgIC8vIElmIGluY29taW5nIHN0eWxlIGlzIHN1Yi9zdXAsIHVzZSBzdHlsZS50ZXh0KCkgdG8gZ2V0IGNvcnJlY3Qgc2l6ZS5cbiAgICBzdHlsZSA9IHN0eWxlLmlkID49IHNyY19TdHlsZS5TQ1JJUFQuaWQgPyBzdHlsZS50ZXh0KCkgOiBzcmNfU3R5bGUuRElTUExBWTtcbiAgfSBlbHNlIGlmIChzaXplID09PSBcInRleHRcIiAmJiBzdHlsZS5zaXplID09PSBzcmNfU3R5bGUuRElTUExBWS5zaXplKSB7XG4gICAgLy8gV2UncmUgaW4gYSBcXHRmcmFjIGJ1dCBpbmNvbWluZyBzdHlsZSBpcyBkaXNwbGF5c3R5bGUsIHNvOlxuICAgIHN0eWxlID0gc3JjX1N0eWxlLlRFWFQ7XG4gIH0gZWxzZSBpZiAoc2l6ZSA9PT0gXCJzY3JpcHRcIikge1xuICAgIHN0eWxlID0gc3JjX1N0eWxlLlNDUklQVDtcbiAgfSBlbHNlIGlmIChzaXplID09PSBcInNjcmlwdHNjcmlwdFwiKSB7XG4gICAgc3R5bGUgPSBzcmNfU3R5bGUuU0NSSVBUU0NSSVBUO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufTtcblxudmFyIGdlbmZyYWNfaHRtbEJ1aWxkZXIgPSBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAvLyBGcmFjdGlvbnMgYXJlIGhhbmRsZWQgaW4gdGhlIFRlWGJvb2sgb24gcGFnZXMgNDQ0LTQ0NSwgcnVsZXMgMTUoYS1lKS5cbiAgdmFyIHN0eWxlID0gZ2VuZnJhY19hZGp1c3RTdHlsZShncm91cC5zaXplLCBvcHRpb25zLnN0eWxlKTtcbiAgdmFyIG5zdHlsZSA9IHN0eWxlLmZyYWNOdW0oKTtcbiAgdmFyIGRzdHlsZSA9IHN0eWxlLmZyYWNEZW4oKTtcbiAgdmFyIG5ld09wdGlvbnM7XG4gIG5ld09wdGlvbnMgPSBvcHRpb25zLmhhdmluZ1N0eWxlKG5zdHlsZSk7XG4gIHZhciBudW1lcm0gPSBidWlsZEhUTUxfYnVpbGRHcm91cChncm91cC5udW1lciwgbmV3T3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgaWYgKGdyb3VwLmNvbnRpbnVlZCkge1xuICAgIC8vIFxcY2ZyYWMgaW5zZXJ0cyBhIFxcc3RydXQgaW50byB0aGUgbnVtZXJhdG9yLlxuICAgIC8vIEdldCBcXHN0cnV0IGRpbWVuc2lvbnMgZnJvbSBUZVhib29rIHBhZ2UgMzUzLlxuICAgIHZhciBoU3RydXQgPSA4LjUgLyBvcHRpb25zLmZvbnRNZXRyaWNzKCkucHRQZXJFbTtcbiAgICB2YXIgZFN0cnV0ID0gMy41IC8gb3B0aW9ucy5mb250TWV0cmljcygpLnB0UGVyRW07XG4gICAgbnVtZXJtLmhlaWdodCA9IG51bWVybS5oZWlnaHQgPCBoU3RydXQgPyBoU3RydXQgOiBudW1lcm0uaGVpZ2h0O1xuICAgIG51bWVybS5kZXB0aCA9IG51bWVybS5kZXB0aCA8IGRTdHJ1dCA/IGRTdHJ1dCA6IG51bWVybS5kZXB0aDtcbiAgfVxuXG4gIG5ld09wdGlvbnMgPSBvcHRpb25zLmhhdmluZ1N0eWxlKGRzdHlsZSk7XG4gIHZhciBkZW5vbW0gPSBidWlsZEhUTUxfYnVpbGRHcm91cChncm91cC5kZW5vbSwgbmV3T3B0aW9ucywgb3B0aW9ucyk7XG4gIHZhciBydWxlO1xuICB2YXIgcnVsZVdpZHRoO1xuICB2YXIgcnVsZVNwYWNpbmc7XG5cbiAgaWYgKGdyb3VwLmhhc0JhckxpbmUpIHtcbiAgICBpZiAoZ3JvdXAuYmFyU2l6ZSkge1xuICAgICAgcnVsZVdpZHRoID0gdW5pdHNfY2FsY3VsYXRlU2l6ZShncm91cC5iYXJTaXplLCBvcHRpb25zKTtcbiAgICAgIHJ1bGUgPSBidWlsZENvbW1vbi5tYWtlTGluZVNwYW4oXCJmcmFjLWxpbmVcIiwgb3B0aW9ucywgcnVsZVdpZHRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcnVsZSA9IGJ1aWxkQ29tbW9uLm1ha2VMaW5lU3BhbihcImZyYWMtbGluZVwiLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBydWxlV2lkdGggPSBydWxlLmhlaWdodDtcbiAgICBydWxlU3BhY2luZyA9IHJ1bGUuaGVpZ2h0O1xuICB9IGVsc2Uge1xuICAgIHJ1bGUgPSBudWxsO1xuICAgIHJ1bGVXaWR0aCA9IDA7XG4gICAgcnVsZVNwYWNpbmcgPSBvcHRpb25zLmZvbnRNZXRyaWNzKCkuZGVmYXVsdFJ1bGVUaGlja25lc3M7XG4gIH0gLy8gUnVsZSAxNWJcblxuXG4gIHZhciBudW1TaGlmdDtcbiAgdmFyIGNsZWFyYW5jZTtcbiAgdmFyIGRlbm9tU2hpZnQ7XG5cbiAgaWYgKHN0eWxlLnNpemUgPT09IHNyY19TdHlsZS5ESVNQTEFZLnNpemUgfHwgZ3JvdXAuc2l6ZSA9PT0gXCJkaXNwbGF5XCIpIHtcbiAgICBudW1TaGlmdCA9IG9wdGlvbnMuZm9udE1ldHJpY3MoKS5udW0xO1xuXG4gICAgaWYgKHJ1bGVXaWR0aCA+IDApIHtcbiAgICAgIGNsZWFyYW5jZSA9IDMgKiBydWxlU3BhY2luZztcbiAgICB9IGVsc2Uge1xuICAgICAgY2xlYXJhbmNlID0gNyAqIHJ1bGVTcGFjaW5nO1xuICAgIH1cblxuICAgIGRlbm9tU2hpZnQgPSBvcHRpb25zLmZvbnRNZXRyaWNzKCkuZGVub20xO1xuICB9IGVsc2Uge1xuICAgIGlmIChydWxlV2lkdGggPiAwKSB7XG4gICAgICBudW1TaGlmdCA9IG9wdGlvbnMuZm9udE1ldHJpY3MoKS5udW0yO1xuICAgICAgY2xlYXJhbmNlID0gcnVsZVNwYWNpbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG51bVNoaWZ0ID0gb3B0aW9ucy5mb250TWV0cmljcygpLm51bTM7XG4gICAgICBjbGVhcmFuY2UgPSAzICogcnVsZVNwYWNpbmc7XG4gICAgfVxuXG4gICAgZGVub21TaGlmdCA9IG9wdGlvbnMuZm9udE1ldHJpY3MoKS5kZW5vbTI7XG4gIH1cblxuICB2YXIgZnJhYztcblxuICBpZiAoIXJ1bGUpIHtcbiAgICAvLyBSdWxlIDE1Y1xuICAgIHZhciBjYW5kaWRhdGVDbGVhcmFuY2UgPSBudW1TaGlmdCAtIG51bWVybS5kZXB0aCAtIChkZW5vbW0uaGVpZ2h0IC0gZGVub21TaGlmdCk7XG5cbiAgICBpZiAoY2FuZGlkYXRlQ2xlYXJhbmNlIDwgY2xlYXJhbmNlKSB7XG4gICAgICBudW1TaGlmdCArPSAwLjUgKiAoY2xlYXJhbmNlIC0gY2FuZGlkYXRlQ2xlYXJhbmNlKTtcbiAgICAgIGRlbm9tU2hpZnQgKz0gMC41ICogKGNsZWFyYW5jZSAtIGNhbmRpZGF0ZUNsZWFyYW5jZSk7XG4gICAgfVxuXG4gICAgZnJhYyA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgICBwb3NpdGlvblR5cGU6IFwiaW5kaXZpZHVhbFNoaWZ0XCIsXG4gICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IGRlbm9tbSxcbiAgICAgICAgc2hpZnQ6IGRlbm9tU2hpZnRcbiAgICAgIH0sIHtcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IG51bWVybSxcbiAgICAgICAgc2hpZnQ6IC1udW1TaGlmdFxuICAgICAgfV1cbiAgICB9LCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBSdWxlIDE1ZFxuICAgIHZhciBheGlzSGVpZ2h0ID0gb3B0aW9ucy5mb250TWV0cmljcygpLmF4aXNIZWlnaHQ7XG5cbiAgICBpZiAobnVtU2hpZnQgLSBudW1lcm0uZGVwdGggLSAoYXhpc0hlaWdodCArIDAuNSAqIHJ1bGVXaWR0aCkgPCBjbGVhcmFuY2UpIHtcbiAgICAgIG51bVNoaWZ0ICs9IGNsZWFyYW5jZSAtIChudW1TaGlmdCAtIG51bWVybS5kZXB0aCAtIChheGlzSGVpZ2h0ICsgMC41ICogcnVsZVdpZHRoKSk7XG4gICAgfVxuXG4gICAgaWYgKGF4aXNIZWlnaHQgLSAwLjUgKiBydWxlV2lkdGggLSAoZGVub21tLmhlaWdodCAtIGRlbm9tU2hpZnQpIDwgY2xlYXJhbmNlKSB7XG4gICAgICBkZW5vbVNoaWZ0ICs9IGNsZWFyYW5jZSAtIChheGlzSGVpZ2h0IC0gMC41ICogcnVsZVdpZHRoIC0gKGRlbm9tbS5oZWlnaHQgLSBkZW5vbVNoaWZ0KSk7XG4gICAgfVxuXG4gICAgdmFyIG1pZFNoaWZ0ID0gLShheGlzSGVpZ2h0IC0gMC41ICogcnVsZVdpZHRoKTtcbiAgICBmcmFjID0gYnVpbGRDb21tb24ubWFrZVZMaXN0KHtcbiAgICAgIHBvc2l0aW9uVHlwZTogXCJpbmRpdmlkdWFsU2hpZnRcIixcbiAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgZWxlbTogZGVub21tLFxuICAgICAgICBzaGlmdDogZGVub21TaGlmdFxuICAgICAgfSwge1xuICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgZWxlbTogcnVsZSxcbiAgICAgICAgc2hpZnQ6IG1pZFNoaWZ0XG4gICAgICB9LCB7XG4gICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICBlbGVtOiBudW1lcm0sXG4gICAgICAgIHNoaWZ0OiAtbnVtU2hpZnRcbiAgICAgIH1dXG4gICAgfSwgb3B0aW9ucyk7XG4gIH0gLy8gU2luY2Ugd2UgbWFudWFsbHkgY2hhbmdlIHRoZSBzdHlsZSBzb21ldGltZXMgKHdpdGggXFxkZnJhYyBvciBcXHRmcmFjKSxcbiAgLy8gYWNjb3VudCBmb3IgdGhlIHBvc3NpYmxlIHNpemUgY2hhbmdlIGhlcmUuXG5cblxuICBuZXdPcHRpb25zID0gb3B0aW9ucy5oYXZpbmdTdHlsZShzdHlsZSk7XG4gIGZyYWMuaGVpZ2h0ICo9IG5ld09wdGlvbnMuc2l6ZU11bHRpcGxpZXIgLyBvcHRpb25zLnNpemVNdWx0aXBsaWVyO1xuICBmcmFjLmRlcHRoICo9IG5ld09wdGlvbnMuc2l6ZU11bHRpcGxpZXIgLyBvcHRpb25zLnNpemVNdWx0aXBsaWVyOyAvLyBSdWxlIDE1ZVxuXG4gIHZhciBkZWxpbVNpemU7XG5cbiAgaWYgKHN0eWxlLnNpemUgPT09IHNyY19TdHlsZS5ESVNQTEFZLnNpemUpIHtcbiAgICBkZWxpbVNpemUgPSBvcHRpb25zLmZvbnRNZXRyaWNzKCkuZGVsaW0xO1xuICB9IGVsc2Uge1xuICAgIGRlbGltU2l6ZSA9IG9wdGlvbnMuZm9udE1ldHJpY3MoKS5kZWxpbTI7XG4gIH1cblxuICB2YXIgbGVmdERlbGltO1xuICB2YXIgcmlnaHREZWxpbTtcblxuICBpZiAoZ3JvdXAubGVmdERlbGltID09IG51bGwpIHtcbiAgICBsZWZ0RGVsaW0gPSBtYWtlTnVsbERlbGltaXRlcihvcHRpb25zLCBbXCJtb3BlblwiXSk7XG4gIH0gZWxzZSB7XG4gICAgbGVmdERlbGltID0gZGVsaW1pdGVyLmN1c3RvbVNpemVkRGVsaW0oZ3JvdXAubGVmdERlbGltLCBkZWxpbVNpemUsIHRydWUsIG9wdGlvbnMuaGF2aW5nU3R5bGUoc3R5bGUpLCBncm91cC5tb2RlLCBbXCJtb3BlblwiXSk7XG4gIH1cblxuICBpZiAoZ3JvdXAuY29udGludWVkKSB7XG4gICAgcmlnaHREZWxpbSA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtdKTsgLy8gemVybyB3aWR0aCBmb3IgXFxjZnJhY1xuICB9IGVsc2UgaWYgKGdyb3VwLnJpZ2h0RGVsaW0gPT0gbnVsbCkge1xuICAgIHJpZ2h0RGVsaW0gPSBtYWtlTnVsbERlbGltaXRlcihvcHRpb25zLCBbXCJtY2xvc2VcIl0pO1xuICB9IGVsc2Uge1xuICAgIHJpZ2h0RGVsaW0gPSBkZWxpbWl0ZXIuY3VzdG9tU2l6ZWREZWxpbShncm91cC5yaWdodERlbGltLCBkZWxpbVNpemUsIHRydWUsIG9wdGlvbnMuaGF2aW5nU3R5bGUoc3R5bGUpLCBncm91cC5tb2RlLCBbXCJtY2xvc2VcIl0pO1xuICB9XG5cbiAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm1vcmRcIl0uY29uY2F0KG5ld09wdGlvbnMuc2l6aW5nQ2xhc3NlcyhvcHRpb25zKSksIFtsZWZ0RGVsaW0sIGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm1mcmFjXCJdLCBbZnJhY10pLCByaWdodERlbGltXSwgb3B0aW9ucyk7XG59O1xuXG52YXIgZ2VuZnJhY19tYXRobWxCdWlsZGVyID0gZnVuY3Rpb24gbWF0aG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICB2YXIgbm9kZSA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibWZyYWNcIiwgW2J1aWxkTWF0aE1MX2J1aWxkR3JvdXAoZ3JvdXAubnVtZXIsIG9wdGlvbnMpLCBidWlsZE1hdGhNTF9idWlsZEdyb3VwKGdyb3VwLmRlbm9tLCBvcHRpb25zKV0pO1xuXG4gIGlmICghZ3JvdXAuaGFzQmFyTGluZSkge1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKFwibGluZXRoaWNrbmVzc1wiLCBcIjBweFwiKTtcbiAgfSBlbHNlIGlmIChncm91cC5iYXJTaXplKSB7XG4gICAgdmFyIHJ1bGVXaWR0aCA9IHVuaXRzX2NhbGN1bGF0ZVNpemUoZ3JvdXAuYmFyU2l6ZSwgb3B0aW9ucyk7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJsaW5ldGhpY2tuZXNzXCIsIHJ1bGVXaWR0aCArIFwiZW1cIik7XG4gIH1cblxuICB2YXIgc3R5bGUgPSBnZW5mcmFjX2FkanVzdFN0eWxlKGdyb3VwLnNpemUsIG9wdGlvbnMuc3R5bGUpO1xuXG4gIGlmIChzdHlsZS5zaXplICE9PSBvcHRpb25zLnN0eWxlLnNpemUpIHtcbiAgICBub2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtc3R5bGVcIiwgW25vZGVdKTtcbiAgICB2YXIgaXNEaXNwbGF5ID0gc3R5bGUuc2l6ZSA9PT0gc3JjX1N0eWxlLkRJU1BMQVkuc2l6ZSA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiO1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKFwiZGlzcGxheXN0eWxlXCIsIGlzRGlzcGxheSk7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJzY3JpcHRsZXZlbFwiLCBcIjBcIik7XG4gIH1cblxuICBpZiAoZ3JvdXAubGVmdERlbGltICE9IG51bGwgfHwgZ3JvdXAucmlnaHREZWxpbSAhPSBudWxsKSB7XG4gICAgdmFyIHdpdGhEZWxpbXMgPSBbXTtcblxuICAgIGlmIChncm91cC5sZWZ0RGVsaW0gIT0gbnVsbCkge1xuICAgICAgdmFyIGxlZnRPcCA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibW9cIiwgW25ldyBtYXRoTUxUcmVlLlRleHROb2RlKGdyb3VwLmxlZnREZWxpbS5yZXBsYWNlKFwiXFxcXFwiLCBcIlwiKSldKTtcbiAgICAgIGxlZnRPcC5zZXRBdHRyaWJ1dGUoXCJmZW5jZVwiLCBcInRydWVcIik7XG4gICAgICB3aXRoRGVsaW1zLnB1c2gobGVmdE9wKTtcbiAgICB9XG5cbiAgICB3aXRoRGVsaW1zLnB1c2gobm9kZSk7XG5cbiAgICBpZiAoZ3JvdXAucmlnaHREZWxpbSAhPSBudWxsKSB7XG4gICAgICB2YXIgcmlnaHRPcCA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibW9cIiwgW25ldyBtYXRoTUxUcmVlLlRleHROb2RlKGdyb3VwLnJpZ2h0RGVsaW0ucmVwbGFjZShcIlxcXFxcIiwgXCJcIikpXSk7XG4gICAgICByaWdodE9wLnNldEF0dHJpYnV0ZShcImZlbmNlXCIsIFwidHJ1ZVwiKTtcbiAgICAgIHdpdGhEZWxpbXMucHVzaChyaWdodE9wKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVpbGRNYXRoTUxfbWFrZVJvdyh3aXRoRGVsaW1zKTtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufTtcblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcImdlbmZyYWNcIixcbiAgbmFtZXM6IFtcIlxcXFxjZnJhY1wiLCBcIlxcXFxkZnJhY1wiLCBcIlxcXFxmcmFjXCIsIFwiXFxcXHRmcmFjXCIsIFwiXFxcXGRiaW5vbVwiLCBcIlxcXFxiaW5vbVwiLCBcIlxcXFx0Ymlub21cIiwgXCJcXFxcXFxcXGF0b3BmcmFjXCIsIC8vIGNhbuKAmXQgYmUgZW50ZXJlZCBkaXJlY3RseVxuICBcIlxcXFxcXFxcYnJhY2VmcmFjXCIsIFwiXFxcXFxcXFxicmFja2ZyYWNcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMixcbiAgICBncmVlZGluZXNzOiAyXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZiwgYXJncykge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmLnBhcnNlcixcbiAgICAgICAgZnVuY05hbWUgPSBfcmVmLmZ1bmNOYW1lO1xuICAgIHZhciBudW1lciA9IGFyZ3NbMF07XG4gICAgdmFyIGRlbm9tID0gYXJnc1sxXTtcbiAgICB2YXIgaGFzQmFyTGluZTtcbiAgICB2YXIgbGVmdERlbGltID0gbnVsbDtcbiAgICB2YXIgcmlnaHREZWxpbSA9IG51bGw7XG4gICAgdmFyIHNpemUgPSBcImF1dG9cIjtcblxuICAgIHN3aXRjaCAoZnVuY05hbWUpIHtcbiAgICAgIGNhc2UgXCJcXFxcY2ZyYWNcIjpcbiAgICAgIGNhc2UgXCJcXFxcZGZyYWNcIjpcbiAgICAgIGNhc2UgXCJcXFxcZnJhY1wiOlxuICAgICAgY2FzZSBcIlxcXFx0ZnJhY1wiOlxuICAgICAgICBoYXNCYXJMaW5lID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJcXFxcXFxcXGF0b3BmcmFjXCI6XG4gICAgICAgIGhhc0JhckxpbmUgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJcXFxcZGJpbm9tXCI6XG4gICAgICBjYXNlIFwiXFxcXGJpbm9tXCI6XG4gICAgICBjYXNlIFwiXFxcXHRiaW5vbVwiOlxuICAgICAgICBoYXNCYXJMaW5lID0gZmFsc2U7XG4gICAgICAgIGxlZnREZWxpbSA9IFwiKFwiO1xuICAgICAgICByaWdodERlbGltID0gXCIpXCI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwiXFxcXFxcXFxicmFjZWZyYWNcIjpcbiAgICAgICAgaGFzQmFyTGluZSA9IGZhbHNlO1xuICAgICAgICBsZWZ0RGVsaW0gPSBcIlxcXFx7XCI7XG4gICAgICAgIHJpZ2h0RGVsaW0gPSBcIlxcXFx9XCI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwiXFxcXFxcXFxicmFja2ZyYWNcIjpcbiAgICAgICAgaGFzQmFyTGluZSA9IGZhbHNlO1xuICAgICAgICBsZWZ0RGVsaW0gPSBcIltcIjtcbiAgICAgICAgcmlnaHREZWxpbSA9IFwiXVwiO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5yZWNvZ25pemVkIGdlbmZyYWMgY29tbWFuZFwiKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGZ1bmNOYW1lKSB7XG4gICAgICBjYXNlIFwiXFxcXGNmcmFjXCI6XG4gICAgICBjYXNlIFwiXFxcXGRmcmFjXCI6XG4gICAgICBjYXNlIFwiXFxcXGRiaW5vbVwiOlxuICAgICAgICBzaXplID0gXCJkaXNwbGF5XCI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwiXFxcXHRmcmFjXCI6XG4gICAgICBjYXNlIFwiXFxcXHRiaW5vbVwiOlxuICAgICAgICBzaXplID0gXCJ0ZXh0XCI7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImdlbmZyYWNcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgY29udGludWVkOiBmdW5jTmFtZSA9PT0gXCJcXFxcY2ZyYWNcIixcbiAgICAgIG51bWVyOiBudW1lcixcbiAgICAgIGRlbm9tOiBkZW5vbSxcbiAgICAgIGhhc0JhckxpbmU6IGhhc0JhckxpbmUsXG4gICAgICBsZWZ0RGVsaW06IGxlZnREZWxpbSxcbiAgICAgIHJpZ2h0RGVsaW06IHJpZ2h0RGVsaW0sXG4gICAgICBzaXplOiBzaXplLFxuICAgICAgYmFyU2l6ZTogbnVsbFxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBnZW5mcmFjX2h0bWxCdWlsZGVyLFxuICBtYXRobWxCdWlsZGVyOiBnZW5mcmFjX21hdGhtbEJ1aWxkZXJcbn0pOyAvLyBJbmZpeCBnZW5lcmFsaXplZCBmcmFjdGlvbnMgLS0gdGhlc2UgYXJlIG5vdCByZW5kZXJlZCBkaXJlY3RseSwgYnV0IHJlcGxhY2VkXG4vLyBpbW1lZGlhdGVseSBieSBvbmUgb2YgdGhlIHZhcmlhbnRzIGFib3ZlLlxuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwiaW5maXhcIixcbiAgbmFtZXM6IFtcIlxcXFxvdmVyXCIsIFwiXFxcXGNob29zZVwiLCBcIlxcXFxhdG9wXCIsIFwiXFxcXGJyYWNlXCIsIFwiXFxcXGJyYWNrXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDAsXG4gICAgaW5maXg6IHRydWVcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmMikge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmMi5wYXJzZXIsXG4gICAgICAgIGZ1bmNOYW1lID0gX3JlZjIuZnVuY05hbWUsXG4gICAgICAgIHRva2VuID0gX3JlZjIudG9rZW47XG4gICAgdmFyIHJlcGxhY2VXaXRoO1xuXG4gICAgc3dpdGNoIChmdW5jTmFtZSkge1xuICAgICAgY2FzZSBcIlxcXFxvdmVyXCI6XG4gICAgICAgIHJlcGxhY2VXaXRoID0gXCJcXFxcZnJhY1wiO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcIlxcXFxjaG9vc2VcIjpcbiAgICAgICAgcmVwbGFjZVdpdGggPSBcIlxcXFxiaW5vbVwiO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcIlxcXFxhdG9wXCI6XG4gICAgICAgIHJlcGxhY2VXaXRoID0gXCJcXFxcXFxcXGF0b3BmcmFjXCI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwiXFxcXGJyYWNlXCI6XG4gICAgICAgIHJlcGxhY2VXaXRoID0gXCJcXFxcXFxcXGJyYWNlZnJhY1wiO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcIlxcXFxicmFja1wiOlxuICAgICAgICByZXBsYWNlV2l0aCA9IFwiXFxcXFxcXFxicmFja2ZyYWNcIjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXplZCBpbmZpeCBnZW5mcmFjIGNvbW1hbmRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiaW5maXhcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgcmVwbGFjZVdpdGg6IHJlcGxhY2VXaXRoLFxuICAgICAgdG9rZW46IHRva2VuXG4gICAgfTtcbiAgfVxufSk7XG52YXIgc3R5bEFycmF5ID0gW1wiZGlzcGxheVwiLCBcInRleHRcIiwgXCJzY3JpcHRcIiwgXCJzY3JpcHRzY3JpcHRcIl07XG5cbnZhciBkZWxpbUZyb21WYWx1ZSA9IGZ1bmN0aW9uIGRlbGltRnJvbVZhbHVlKGRlbGltU3RyaW5nKSB7XG4gIHZhciBkZWxpbSA9IG51bGw7XG5cbiAgaWYgKGRlbGltU3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICBkZWxpbSA9IGRlbGltU3RyaW5nO1xuICAgIGRlbGltID0gZGVsaW0gPT09IFwiLlwiID8gbnVsbCA6IGRlbGltO1xuICB9XG5cbiAgcmV0dXJuIGRlbGltO1xufTtcblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcImdlbmZyYWNcIixcbiAgbmFtZXM6IFtcIlxcXFxnZW5mcmFjXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDYsXG4gICAgZ3JlZWRpbmVzczogNixcbiAgICBhcmdUeXBlczogW1wibWF0aFwiLCBcIm1hdGhcIiwgXCJzaXplXCIsIFwidGV4dFwiLCBcIm1hdGhcIiwgXCJtYXRoXCJdXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZjMsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZjMucGFyc2VyO1xuICAgIHZhciBudW1lciA9IGFyZ3NbNF07XG4gICAgdmFyIGRlbm9tID0gYXJnc1s1XTsgLy8gTG9vayBpbnRvIHRoZSBwYXJzZSBub2RlcyB0byBnZXQgdGhlIGRlc2lyZWQgZGVsaW1pdGVycy5cblxuICAgIHZhciBsZWZ0Tm9kZSA9IGNoZWNrTm9kZVR5cGUoYXJnc1swXSwgXCJhdG9tXCIpO1xuXG4gICAgaWYgKGxlZnROb2RlKSB7XG4gICAgICBsZWZ0Tm9kZSA9IGFzc2VydEF0b21GYW1pbHkoYXJnc1swXSwgXCJvcGVuXCIpO1xuICAgIH1cblxuICAgIHZhciBsZWZ0RGVsaW0gPSBsZWZ0Tm9kZSA/IGRlbGltRnJvbVZhbHVlKGxlZnROb2RlLnRleHQpIDogbnVsbDtcbiAgICB2YXIgcmlnaHROb2RlID0gY2hlY2tOb2RlVHlwZShhcmdzWzFdLCBcImF0b21cIik7XG5cbiAgICBpZiAocmlnaHROb2RlKSB7XG4gICAgICByaWdodE5vZGUgPSBhc3NlcnRBdG9tRmFtaWx5KGFyZ3NbMV0sIFwiY2xvc2VcIik7XG4gICAgfVxuXG4gICAgdmFyIHJpZ2h0RGVsaW0gPSByaWdodE5vZGUgPyBkZWxpbUZyb21WYWx1ZShyaWdodE5vZGUudGV4dCkgOiBudWxsO1xuICAgIHZhciBiYXJOb2RlID0gYXNzZXJ0Tm9kZVR5cGUoYXJnc1syXSwgXCJzaXplXCIpO1xuICAgIHZhciBoYXNCYXJMaW5lO1xuICAgIHZhciBiYXJTaXplID0gbnVsbDtcblxuICAgIGlmIChiYXJOb2RlLmlzQmxhbmspIHtcbiAgICAgIC8vIFxcZ2VuZnJhYyBhY3RzIGRpZmZlcmVudGx5IHRoYW4gXFxhYm92ZS5cbiAgICAgIC8vIFxcZ2VuZnJhYyB0cmVhdHMgYW4gZW1wdHkgc2l6ZSBncm91cCBhcyBhIHNpZ25hbCB0byB1c2UgYVxuICAgICAgLy8gc3RhbmRhcmQgYmFyIHNpemUuIFxcYWJvdmUgd291bGQgc2VlIHNpemUgPSAwIGFuZCBvbWl0IHRoZSBiYXIuXG4gICAgICBoYXNCYXJMaW5lID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYmFyU2l6ZSA9IGJhck5vZGUudmFsdWU7XG4gICAgICBoYXNCYXJMaW5lID0gYmFyU2l6ZS5udW1iZXIgPiAwO1xuICAgIH0gLy8gRmluZCBvdXQgaWYgd2Ugd2FudCBkaXNwbGF5c3R5bGUsIHRleHRzdHlsZSwgZXRjLlxuXG5cbiAgICB2YXIgc2l6ZSA9IFwiYXV0b1wiO1xuICAgIHZhciBzdHlsID0gY2hlY2tOb2RlVHlwZShhcmdzWzNdLCBcIm9yZGdyb3VwXCIpO1xuXG4gICAgaWYgKHN0eWwpIHtcbiAgICAgIGlmIChzdHlsLmJvZHkubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgdGV4dE9yZCA9IGFzc2VydE5vZGVUeXBlKHN0eWwuYm9keVswXSwgXCJ0ZXh0b3JkXCIpO1xuICAgICAgICBzaXplID0gc3R5bEFycmF5W051bWJlcih0ZXh0T3JkLnRleHQpXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bCA9IGFzc2VydE5vZGVUeXBlKGFyZ3NbM10sIFwidGV4dG9yZFwiKTtcbiAgICAgIHNpemUgPSBzdHlsQXJyYXlbTnVtYmVyKHN0eWwudGV4dCldO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImdlbmZyYWNcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgbnVtZXI6IG51bWVyLFxuICAgICAgZGVub206IGRlbm9tLFxuICAgICAgY29udGludWVkOiBmYWxzZSxcbiAgICAgIGhhc0JhckxpbmU6IGhhc0JhckxpbmUsXG4gICAgICBiYXJTaXplOiBiYXJTaXplLFxuICAgICAgbGVmdERlbGltOiBsZWZ0RGVsaW0sXG4gICAgICByaWdodERlbGltOiByaWdodERlbGltLFxuICAgICAgc2l6ZTogc2l6ZVxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBnZW5mcmFjX2h0bWxCdWlsZGVyLFxuICBtYXRobWxCdWlsZGVyOiBnZW5mcmFjX21hdGhtbEJ1aWxkZXJcbn0pOyAvLyBcXGFib3ZlIGlzIGFuIGluZml4IGZyYWN0aW9uIHRoYXQgYWxzbyBkZWZpbmVzIGEgZnJhY3Rpb24gYmFyIHNpemUuXG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJpbmZpeFwiLFxuICBuYW1lczogW1wiXFxcXGFib3ZlXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDEsXG4gICAgYXJnVHlwZXM6IFtcInNpemVcIl0sXG4gICAgaW5maXg6IHRydWVcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmNCwgYXJncykge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmNC5wYXJzZXIsXG4gICAgICAgIGZ1bmNOYW1lID0gX3JlZjQuZnVuY05hbWUsXG4gICAgICAgIHRva2VuID0gX3JlZjQudG9rZW47XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiaW5maXhcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgcmVwbGFjZVdpdGg6IFwiXFxcXFxcXFxhYm92ZWZyYWNcIixcbiAgICAgIHNpemU6IGFzc2VydE5vZGVUeXBlKGFyZ3NbMF0sIFwic2l6ZVwiKS52YWx1ZSxcbiAgICAgIHRva2VuOiB0b2tlblxuICAgIH07XG4gIH1cbn0pO1xuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcImdlbmZyYWNcIixcbiAgbmFtZXM6IFtcIlxcXFxcXFxcYWJvdmVmcmFjXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDMsXG4gICAgYXJnVHlwZXM6IFtcIm1hdGhcIiwgXCJzaXplXCIsIFwibWF0aFwiXVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWY1LCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWY1LnBhcnNlcixcbiAgICAgICAgZnVuY05hbWUgPSBfcmVmNS5mdW5jTmFtZTtcbiAgICB2YXIgbnVtZXIgPSBhcmdzWzBdO1xuICAgIHZhciBiYXJTaXplID0gYXNzZXJ0KGFzc2VydE5vZGVUeXBlKGFyZ3NbMV0sIFwiaW5maXhcIikuc2l6ZSk7XG4gICAgdmFyIGRlbm9tID0gYXJnc1syXTtcbiAgICB2YXIgaGFzQmFyTGluZSA9IGJhclNpemUubnVtYmVyID4gMDtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJnZW5mcmFjXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIG51bWVyOiBudW1lcixcbiAgICAgIGRlbm9tOiBkZW5vbSxcbiAgICAgIGNvbnRpbnVlZDogZmFsc2UsXG4gICAgICBoYXNCYXJMaW5lOiBoYXNCYXJMaW5lLFxuICAgICAgYmFyU2l6ZTogYmFyU2l6ZSxcbiAgICAgIGxlZnREZWxpbTogbnVsbCxcbiAgICAgIHJpZ2h0RGVsaW06IG51bGwsXG4gICAgICBzaXplOiBcImF1dG9cIlxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBnZW5mcmFjX2h0bWxCdWlsZGVyLFxuICBtYXRobWxCdWlsZGVyOiBnZW5mcmFjX21hdGhtbEJ1aWxkZXJcbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL2hvcml6QnJhY2UuanNcblxuXG5cblxuXG5cblxuXG4vLyBOT1RFOiBVbmxpa2UgbW9zdCBgaHRtbEJ1aWxkZXJgcywgdGhpcyBvbmUgaGFuZGxlcyBub3Qgb25seSBcImhvcml6QnJhY2VcIiwgYnV0XG52YXIgaG9yaXpCcmFjZV9odG1sQnVpbGRlciA9IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdycCwgb3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBvcHRpb25zLnN0eWxlOyAvLyBQdWxsIG91dCB0aGUgYFBhcnNlTm9kZTxcImhvcml6QnJhY2VcIj5gIGlmIGBncnBgIGlzIGEgXCJzdXBzdWJcIiBub2RlLlxuXG4gIHZhciBzdXBTdWJHcm91cDtcbiAgdmFyIGdyb3VwO1xuICB2YXIgc3VwU3ViID0gY2hlY2tOb2RlVHlwZShncnAsIFwic3Vwc3ViXCIpO1xuXG4gIGlmIChzdXBTdWIpIHtcbiAgICAvLyBSZWY6IExhVGVYIHNvdXJjZTJlOiB9fX19XFxsaW1pdHN9XG4gICAgLy8gaS5lLiBMYVRlWCB0cmVhdHMgdGhlIGJyYWNlIHNpbWlsYXIgdG8gYW4gb3AgYW5kIHBhc3NlcyBpdFxuICAgIC8vIHdpdGggXFxsaW1pdHMsIHNvIHdlIG5lZWQgdG8gYXNzaWduIHN1cHN1YiBzdHlsZS5cbiAgICBzdXBTdWJHcm91cCA9IHN1cFN1Yi5zdXAgPyBidWlsZEhUTUxfYnVpbGRHcm91cChzdXBTdWIuc3VwLCBvcHRpb25zLmhhdmluZ1N0eWxlKHN0eWxlLnN1cCgpKSwgb3B0aW9ucykgOiBidWlsZEhUTUxfYnVpbGRHcm91cChzdXBTdWIuc3ViLCBvcHRpb25zLmhhdmluZ1N0eWxlKHN0eWxlLnN1YigpKSwgb3B0aW9ucyk7XG4gICAgZ3JvdXAgPSBhc3NlcnROb2RlVHlwZShzdXBTdWIuYmFzZSwgXCJob3JpekJyYWNlXCIpO1xuICB9IGVsc2Uge1xuICAgIGdyb3VwID0gYXNzZXJ0Tm9kZVR5cGUoZ3JwLCBcImhvcml6QnJhY2VcIik7XG4gIH0gLy8gQnVpbGQgdGhlIGJhc2UgZ3JvdXBcblxuXG4gIHZhciBib2R5ID0gYnVpbGRIVE1MX2J1aWxkR3JvdXAoZ3JvdXAuYmFzZSwgb3B0aW9ucy5oYXZpbmdCYXNlU3R5bGUoc3JjX1N0eWxlLkRJU1BMQVkpKTsgLy8gQ3JlYXRlIHRoZSBzdHJldGNoeSBlbGVtZW50XG5cbiAgdmFyIGJyYWNlQm9keSA9IHN0cmV0Y2h5LnN2Z1NwYW4oZ3JvdXAsIG9wdGlvbnMpOyAvLyBHZW5lcmF0ZSB0aGUgdmxpc3QsIHdpdGggdGhlIGFwcHJvcHJpYXRlIGtlcm5zICAgICAgICDilI/ilIHilIHilIHilIHilIHilIHilIHilIHilJNcbiAgLy8gVGhpcyBmaXJzdCB2bGlzdCBjb250YWlucyB0aGUgY29udGVudCBhbmQgdGhlIGJyYWNlOiAgIGVxdWF0aW9uXG5cbiAgdmFyIHZsaXN0O1xuXG4gIGlmIChncm91cC5pc092ZXIpIHtcbiAgICB2bGlzdCA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgICBwb3NpdGlvblR5cGU6IFwiZmlyc3RCYXNlbGluZVwiLFxuICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICBlbGVtOiBib2R5XG4gICAgICB9LCB7XG4gICAgICAgIHR5cGU6IFwia2VyblwiLFxuICAgICAgICBzaXplOiAwLjFcbiAgICAgIH0sIHtcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IGJyYWNlQm9keVxuICAgICAgfV1cbiAgICB9LCBvcHRpb25zKTsgLy8gJEZsb3dGaXhNZTogUmVwbGFjZSB0aGlzIHdpdGggcGFzc2luZyBcInN2Zy1hbGlnblwiIGludG8gbWFrZVZMaXN0LlxuXG4gICAgdmxpc3QuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0uY2hpbGRyZW5bMV0uY2xhc3Nlcy5wdXNoKFwic3ZnLWFsaWduXCIpO1xuICB9IGVsc2Uge1xuICAgIHZsaXN0ID0gYnVpbGRDb21tb24ubWFrZVZMaXN0KHtcbiAgICAgIHBvc2l0aW9uVHlwZTogXCJib3R0b21cIixcbiAgICAgIHBvc2l0aW9uRGF0YTogYm9keS5kZXB0aCArIDAuMSArIGJyYWNlQm9keS5oZWlnaHQsXG4gICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IGJyYWNlQm9keVxuICAgICAgfSwge1xuICAgICAgICB0eXBlOiBcImtlcm5cIixcbiAgICAgICAgc2l6ZTogMC4xXG4gICAgICB9LCB7XG4gICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICBlbGVtOiBib2R5XG4gICAgICB9XVxuICAgIH0sIG9wdGlvbnMpOyAvLyAkRmxvd0ZpeE1lOiBSZXBsYWNlIHRoaXMgd2l0aCBwYXNzaW5nIFwic3ZnLWFsaWduXCIgaW50byBtYWtlVkxpc3QuXG5cbiAgICB2bGlzdC5jaGlsZHJlblswXS5jaGlsZHJlblswXS5jaGlsZHJlblswXS5jbGFzc2VzLnB1c2goXCJzdmctYWxpZ25cIik7XG4gIH1cblxuICBpZiAoc3VwU3ViR3JvdXApIHtcbiAgICAvLyBUbyB3cml0ZSB0aGUgc3Vwc3ViLCB3cmFwIHRoZSBmaXJzdCB2bGlzdCBpbiBhbm90aGVyIHZsaXN0OlxuICAgIC8vIFRoZXkgY2FuJ3QgYWxsIGdvIGluIHRoZSBzYW1lIHZsaXN0LCBiZWNhdXNlIHRoZSBub3RlIG1pZ2h0IGJlXG4gICAgLy8gd2lkZXIgdGhhbiB0aGUgZXF1YXRpb24uIFdlIHdhbnQgdGhlIGVxdWF0aW9uIHRvIGNvbnRyb2wgdGhlXG4gICAgLy8gYnJhY2Ugd2lkdGguXG4gICAgLy8gICAgICBub3RlICAgICAgICAgIGxvbmcgbm90ZSAgICAgICAgICAgbG9uZyBub3RlXG4gICAgLy8gICDilI/ilIHilIHilIHilIHilIHilIHilIHilIHilJMgICBvciAgICDilI/ilIHilIHilIHilJMgICAgIG5vdCAgICDilI/ilIHilIHilIHilIHilIHilIHilIHilIHilIHilJNcbiAgICAvLyAgICBlcXVhdGlvbiAgICAgICAgICAgZXFuICAgICAgICAgICAgICAgICBlcW5cbiAgICB2YXIgdlNwYW4gPSBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJtb3JkXCIsIGdyb3VwLmlzT3ZlciA/IFwibW92ZXJcIiA6IFwibXVuZGVyXCJdLCBbdmxpc3RdLCBvcHRpb25zKTtcblxuICAgIGlmIChncm91cC5pc092ZXIpIHtcbiAgICAgIHZsaXN0ID0gYnVpbGRDb21tb24ubWFrZVZMaXN0KHtcbiAgICAgICAgcG9zaXRpb25UeXBlOiBcImZpcnN0QmFzZWxpbmVcIixcbiAgICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgICAgZWxlbTogdlNwYW5cbiAgICAgICAgfSwge1xuICAgICAgICAgIHR5cGU6IFwia2VyblwiLFxuICAgICAgICAgIHNpemU6IDAuMlxuICAgICAgICB9LCB7XG4gICAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgICAgZWxlbTogc3VwU3ViR3JvdXBcbiAgICAgICAgfV1cbiAgICAgIH0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bGlzdCA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgICAgIHBvc2l0aW9uVHlwZTogXCJib3R0b21cIixcbiAgICAgICAgcG9zaXRpb25EYXRhOiB2U3Bhbi5kZXB0aCArIDAuMiArIHN1cFN1Ykdyb3VwLmhlaWdodCArIHN1cFN1Ykdyb3VwLmRlcHRoLFxuICAgICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgICBlbGVtOiBzdXBTdWJHcm91cFxuICAgICAgICB9LCB7XG4gICAgICAgICAgdHlwZTogXCJrZXJuXCIsXG4gICAgICAgICAgc2l6ZTogMC4yXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgICBlbGVtOiB2U3BhblxuICAgICAgICB9XVxuICAgICAgfSwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm1vcmRcIiwgZ3JvdXAuaXNPdmVyID8gXCJtb3ZlclwiIDogXCJtdW5kZXJcIl0sIFt2bGlzdF0sIG9wdGlvbnMpO1xufTtcblxudmFyIGhvcml6QnJhY2VfbWF0aG1sQnVpbGRlciA9IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgdmFyIGFjY2VudE5vZGUgPSBzdHJldGNoeS5tYXRoTUxub2RlKGdyb3VwLmxhYmVsKTtcbiAgcmV0dXJuIG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKGdyb3VwLmlzT3ZlciA/IFwibW92ZXJcIiA6IFwibXVuZGVyXCIsIFtidWlsZE1hdGhNTF9idWlsZEdyb3VwKGdyb3VwLmJhc2UsIG9wdGlvbnMpLCBhY2NlbnROb2RlXSk7XG59OyAvLyBIb3Jpem9udGFsIHN0cmV0Y2h5IGJyYWNlc1xuXG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJob3JpekJyYWNlXCIsXG4gIG5hbWVzOiBbXCJcXFxcb3ZlcmJyYWNlXCIsIFwiXFxcXHVuZGVyYnJhY2VcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZi5wYXJzZXIsXG4gICAgICAgIGZ1bmNOYW1lID0gX3JlZi5mdW5jTmFtZTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJob3JpekJyYWNlXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIGxhYmVsOiBmdW5jTmFtZSxcbiAgICAgIGlzT3ZlcjogL15cXFxcb3Zlci8udGVzdChmdW5jTmFtZSksXG4gICAgICBiYXNlOiBhcmdzWzBdXG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGhvcml6QnJhY2VfaHRtbEJ1aWxkZXIsXG4gIG1hdGhtbEJ1aWxkZXI6IGhvcml6QnJhY2VfbWF0aG1sQnVpbGRlclxufSk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMvaHJlZi5qc1xuXG5cblxuXG5cblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcImhyZWZcIixcbiAgbmFtZXM6IFtcIlxcXFxocmVmXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDIsXG4gICAgYXJnVHlwZXM6IFtcInVybFwiLCBcIm9yaWdpbmFsXCJdLFxuICAgIGFsbG93ZWRJblRleHQ6IHRydWVcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmLCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYucGFyc2VyO1xuICAgIHZhciBib2R5ID0gYXJnc1sxXTtcbiAgICB2YXIgaHJlZiA9IGFzc2VydE5vZGVUeXBlKGFyZ3NbMF0sIFwidXJsXCIpLnVybDtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJocmVmXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIGhyZWY6IGhyZWYsXG4gICAgICBib2R5OiBkZWZpbmVGdW5jdGlvbl9vcmRhcmd1bWVudChib2R5KVxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBlbGVtZW50cyA9IGJ1aWxkSFRNTF9idWlsZEV4cHJlc3Npb24oZ3JvdXAuYm9keSwgb3B0aW9ucywgZmFsc2UpO1xuICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlQW5jaG9yKGdyb3VwLmhyZWYsIFtdLCBlbGVtZW50cywgb3B0aW9ucyk7XG4gIH0sXG4gIG1hdGhtbEJ1aWxkZXI6IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgbWF0aCA9IGJ1aWxkRXhwcmVzc2lvblJvdyhncm91cC5ib2R5LCBvcHRpb25zKTtcblxuICAgIGlmICghKG1hdGggaW5zdGFuY2VvZiBtYXRoTUxUcmVlX01hdGhOb2RlKSkge1xuICAgICAgbWF0aCA9IG5ldyBtYXRoTUxUcmVlX01hdGhOb2RlKFwibXJvd1wiLCBbbWF0aF0pO1xuICAgIH1cblxuICAgIG1hdGguc2V0QXR0cmlidXRlKFwiaHJlZlwiLCBncm91cC5ocmVmKTtcbiAgICByZXR1cm4gbWF0aDtcbiAgfVxufSk7XG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwiaHJlZlwiLFxuICBuYW1lczogW1wiXFxcXHVybFwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxLFxuICAgIGFyZ1R5cGVzOiBbXCJ1cmxcIl0sXG4gICAgYWxsb3dlZEluVGV4dDogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYyLCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYyLnBhcnNlcjtcbiAgICB2YXIgaHJlZiA9IGFzc2VydE5vZGVUeXBlKGFyZ3NbMF0sIFwidXJsXCIpLnVybDtcbiAgICB2YXIgY2hhcnMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaHJlZi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBocmVmW2ldO1xuXG4gICAgICBpZiAoYyA9PT0gXCJ+XCIpIHtcbiAgICAgICAgYyA9IFwiXFxcXHRleHRhc2NpaXRpbGRlXCI7XG4gICAgICB9XG5cbiAgICAgIGNoYXJzLnB1c2goe1xuICAgICAgICB0eXBlOiBcInRleHRvcmRcIixcbiAgICAgICAgbW9kZTogXCJ0ZXh0XCIsXG4gICAgICAgIHRleHQ6IGNcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBib2R5ID0ge1xuICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIGZvbnQ6IFwiXFxcXHRleHR0dFwiLFxuICAgICAgYm9keTogY2hhcnNcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImhyZWZcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgaHJlZjogaHJlZixcbiAgICAgIGJvZHk6IGRlZmluZUZ1bmN0aW9uX29yZGFyZ3VtZW50KGJvZHkpXG4gICAgfTtcbiAgfVxufSk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMvaHRtbG1hdGhtbC5qc1xuXG5cblxuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwiaHRtbG1hdGhtbFwiLFxuICBuYW1lczogW1wiXFxcXGh0bWxAbWF0aG1sXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDIsXG4gICAgYWxsb3dlZEluVGV4dDogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZi5wYXJzZXI7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiaHRtbG1hdGhtbFwiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICBodG1sOiBkZWZpbmVGdW5jdGlvbl9vcmRhcmd1bWVudChhcmdzWzBdKSxcbiAgICAgIG1hdGhtbDogZGVmaW5lRnVuY3Rpb25fb3JkYXJndW1lbnQoYXJnc1sxXSlcbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogZnVuY3Rpb24gaHRtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgZWxlbWVudHMgPSBidWlsZEhUTUxfYnVpbGRFeHByZXNzaW9uKGdyb3VwLmh0bWwsIG9wdGlvbnMsIGZhbHNlKTtcbiAgICByZXR1cm4gYnVpbGRDb21tb24ubWFrZUZyYWdtZW50KGVsZW1lbnRzKTtcbiAgfSxcbiAgbWF0aG1sQnVpbGRlcjogZnVuY3Rpb24gbWF0aG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHJldHVybiBidWlsZEV4cHJlc3Npb25Sb3coZ3JvdXAubWF0aG1sLCBvcHRpb25zKTtcbiAgfVxufSk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMva2Vybi5qc1xuLy8gSG9yaXpvbnRhbCBzcGFjaW5nIGNvbW1hbmRzXG5cblxuXG5cbiAvLyBUT0RPOiBcXGhza2lwIGFuZCBcXG1za2lwIHNob3VsZCBzdXBwb3J0IHBsdXMgYW5kIG1pbnVzIGluIGxlbmd0aHNcblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcImtlcm5cIixcbiAgbmFtZXM6IFtcIlxcXFxrZXJuXCIsIFwiXFxcXG1rZXJuXCIsIFwiXFxcXGhza2lwXCIsIFwiXFxcXG1za2lwXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDEsXG4gICAgYXJnVHlwZXM6IFtcInNpemVcIl0sXG4gICAgYWxsb3dlZEluVGV4dDogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZi5wYXJzZXIsXG4gICAgICAgIGZ1bmNOYW1lID0gX3JlZi5mdW5jTmFtZTtcbiAgICB2YXIgc2l6ZSA9IGFzc2VydE5vZGVUeXBlKGFyZ3NbMF0sIFwic2l6ZVwiKTtcblxuICAgIGlmIChwYXJzZXIuc2V0dGluZ3Muc3RyaWN0KSB7XG4gICAgICB2YXIgbWF0aEZ1bmN0aW9uID0gZnVuY05hbWVbMV0gPT09ICdtJzsgLy8gXFxta2VybiwgXFxtc2tpcFxuXG4gICAgICB2YXIgbXVVbml0ID0gc2l6ZS52YWx1ZS51bml0ID09PSAnbXUnO1xuXG4gICAgICBpZiAobWF0aEZ1bmN0aW9uKSB7XG4gICAgICAgIGlmICghbXVVbml0KSB7XG4gICAgICAgICAgcGFyc2VyLnNldHRpbmdzLnJlcG9ydE5vbnN0cmljdChcIm1hdGhWc1RleHRVbml0c1wiLCBcIkxhVGVYJ3MgXCIgKyBmdW5jTmFtZSArIFwiIHN1cHBvcnRzIG9ubHkgbXUgdW5pdHMsIFwiICsgKFwibm90IFwiICsgc2l6ZS52YWx1ZS51bml0ICsgXCIgdW5pdHNcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnNlci5tb2RlICE9PSBcIm1hdGhcIikge1xuICAgICAgICAgIHBhcnNlci5zZXR0aW5ncy5yZXBvcnROb25zdHJpY3QoXCJtYXRoVnNUZXh0VW5pdHNcIiwgXCJMYVRlWCdzIFwiICsgZnVuY05hbWUgKyBcIiB3b3JrcyBvbmx5IGluIG1hdGggbW9kZVwiKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gIW1hdGhGdW5jdGlvblxuICAgICAgICBpZiAobXVVbml0KSB7XG4gICAgICAgICAgcGFyc2VyLnNldHRpbmdzLnJlcG9ydE5vbnN0cmljdChcIm1hdGhWc1RleHRVbml0c1wiLCBcIkxhVGVYJ3MgXCIgKyBmdW5jTmFtZSArIFwiIGRvZXNuJ3Qgc3VwcG9ydCBtdSB1bml0c1wiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImtlcm5cIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgZGltZW5zaW9uOiBzaXplLnZhbHVlXG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VHbHVlKGdyb3VwLmRpbWVuc2lvbiwgb3B0aW9ucyk7XG4gIH0sXG4gIG1hdGhtbEJ1aWxkZXI6IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGltZW5zaW9uID0gdW5pdHNfY2FsY3VsYXRlU2l6ZShncm91cC5kaW1lbnNpb24sIG9wdGlvbnMpO1xuICAgIHJldHVybiBuZXcgbWF0aE1MVHJlZS5TcGFjZU5vZGUoZGltZW5zaW9uKTtcbiAgfVxufSk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMvbGFwLmpzXG4vLyBIb3Jpem9udGFsIG92ZXJsYXAgZnVuY3Rpb25zXG5cblxuXG5cblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcImxhcFwiLFxuICBuYW1lczogW1wiXFxcXG1hdGhsbGFwXCIsIFwiXFxcXG1hdGhybGFwXCIsIFwiXFxcXG1hdGhjbGFwXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDEsXG4gICAgYWxsb3dlZEluVGV4dDogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZi5wYXJzZXIsXG4gICAgICAgIGZ1bmNOYW1lID0gX3JlZi5mdW5jTmFtZTtcbiAgICB2YXIgYm9keSA9IGFyZ3NbMF07XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwibGFwXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIGFsaWdubWVudDogZnVuY05hbWUuc2xpY2UoNSksXG4gICAgICBib2R5OiBib2R5XG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgLy8gbWF0aGxsYXAsIG1hdGhybGFwLCBtYXRoY2xhcFxuICAgIHZhciBpbm5lcjtcblxuICAgIGlmIChncm91cC5hbGlnbm1lbnQgPT09IFwiY2xhcFwiKSB7XG4gICAgICAvLyByZWY6IGh0dHBzOi8vd3d3Lm1hdGgubHN1LmVkdS9+YXBlcmxpcy9wdWJsaWNhdGlvbnMvbWF0aGNsYXAvXG4gICAgICBpbm5lciA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtdLCBbYnVpbGRIVE1MX2J1aWxkR3JvdXAoZ3JvdXAuYm9keSwgb3B0aW9ucyldKTsgLy8gd3JhcCwgc2luY2UgQ1NTIHdpbGwgY2VudGVyIGEgLmNsYXAgPiAuaW5uZXIgPiBzcGFuXG5cbiAgICAgIGlubmVyID0gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wiaW5uZXJcIl0sIFtpbm5lcl0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbm5lciA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcImlubmVyXCJdLCBbYnVpbGRIVE1MX2J1aWxkR3JvdXAoZ3JvdXAuYm9keSwgb3B0aW9ucyldKTtcbiAgICB9XG5cbiAgICB2YXIgZml4ID0gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wiZml4XCJdLCBbXSk7XG4gICAgdmFyIG5vZGUgPSBidWlsZENvbW1vbi5tYWtlU3BhbihbZ3JvdXAuYWxpZ25tZW50XSwgW2lubmVyLCBmaXhdLCBvcHRpb25zKTsgLy8gQXQgdGhpcyBwb2ludCwgd2UgaGF2ZSBjb3JyZWN0bHkgc2V0IGhvcml6b250YWwgYWxpZ25tZW50IG9mIHRoZVxuICAgIC8vIHR3byBpdGVtcyBpbnZvbHZlZCBpbiB0aGUgbGFwLlxuICAgIC8vIE5leHQsIHVzZSBhIHN0cnV0IHRvIHNldCB0aGUgaGVpZ2h0IG9mIHRoZSBIVE1MIGJvdW5kaW5nIGJveC5cbiAgICAvLyBPdGhlcndpc2UsIGEgdGFsbCBhcmd1bWVudCBtYXkgYmUgbWlzcGxhY2VkLlxuXG4gICAgdmFyIHN0cnV0ID0gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wic3RydXRcIl0pO1xuICAgIHN0cnV0LnN0eWxlLmhlaWdodCA9IG5vZGUuaGVpZ2h0ICsgbm9kZS5kZXB0aCArIFwiZW1cIjtcbiAgICBzdHJ1dC5zdHlsZS52ZXJ0aWNhbEFsaWduID0gLW5vZGUuZGVwdGggKyBcImVtXCI7XG4gICAgbm9kZS5jaGlsZHJlbi51bnNoaWZ0KHN0cnV0KTsgLy8gTmV4dCwgcHJldmVudCB2ZXJ0aWNhbCBtaXNwbGFjZW1lbnQgd2hlbiBuZXh0IHRvIHNvbWV0aGluZyB0YWxsLlxuXG4gICAgbm9kZSA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgICBwb3NpdGlvblR5cGU6IFwiZmlyc3RCYXNlbGluZVwiLFxuICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICBlbGVtOiBub2RlXG4gICAgICB9XVxuICAgIH0sIG9wdGlvbnMpOyAvLyBHZXQgdGhlIGhvcml6b250YWwgc3BhY2luZyBjb3JyZWN0IHJlbGF0aXZlIHRvIGFkamFjZW50IGl0ZW1zLlxuXG4gICAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm1vcmRcIl0sIFtub2RlXSwgb3B0aW9ucyk7XG4gIH0sXG4gIG1hdGhtbEJ1aWxkZXI6IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICAvLyBtYXRobGxhcCwgbWF0aHJsYXAsIG1hdGhjbGFwXG4gICAgdmFyIG5vZGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1wYWRkZWRcIiwgW2J1aWxkTWF0aE1MX2J1aWxkR3JvdXAoZ3JvdXAuYm9keSwgb3B0aW9ucyldKTtcblxuICAgIGlmIChncm91cC5hbGlnbm1lbnQgIT09IFwicmxhcFwiKSB7XG4gICAgICB2YXIgb2Zmc2V0ID0gZ3JvdXAuYWxpZ25tZW50ID09PSBcImxsYXBcIiA/IFwiLTFcIiA6IFwiLTAuNVwiO1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJsc3BhY2VcIiwgb2Zmc2V0ICsgXCJ3aWR0aFwiKTtcbiAgICB9XG5cbiAgICBub2RlLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIFwiMHB4XCIpO1xuICAgIHJldHVybiBub2RlO1xuICB9XG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2Z1bmN0aW9ucy9tYXRoLmpzXG5cbiAvLyBTd2l0Y2hpbmcgZnJvbSB0ZXh0IG1vZGUgYmFjayB0byBtYXRoIG1vZGVcblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcInN0eWxpbmdcIixcbiAgbmFtZXM6IFtcIlxcXFwoXCIsIFwiJFwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAwLFxuICAgIGFsbG93ZWRJblRleHQ6IHRydWUsXG4gICAgYWxsb3dlZEluTWF0aDogZmFsc2UsXG4gICAgY29uc3VtZU1vZGU6IFwibWF0aFwiXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZiwgYXJncykge1xuICAgIHZhciBmdW5jTmFtZSA9IF9yZWYuZnVuY05hbWUsXG4gICAgICAgIHBhcnNlciA9IF9yZWYucGFyc2VyO1xuICAgIHZhciBvdXRlck1vZGUgPSBwYXJzZXIubW9kZTtcbiAgICBwYXJzZXIuc3dpdGNoTW9kZShcIm1hdGhcIik7XG4gICAgdmFyIGNsb3NlID0gZnVuY05hbWUgPT09IFwiXFxcXChcIiA/IFwiXFxcXClcIiA6IFwiJFwiO1xuICAgIHZhciBib2R5ID0gcGFyc2VyLnBhcnNlRXhwcmVzc2lvbihmYWxzZSwgY2xvc2UpOyAvLyBXZSBjYW4ndCBleHBhbmQgdGhlIG5leHQgc3ltYm9sIGFmdGVyIHRoZSBjbG9zaW5nICQgdW50aWwgYWZ0ZXJcbiAgICAvLyBzd2l0Y2hpbmcgbW9kZXMgYmFjay4gIFNvIGRvbid0IGNvbnN1bWUgd2l0aGluIGV4cGVjdC5cblxuICAgIHBhcnNlci5leHBlY3QoY2xvc2UsIGZhbHNlKTtcbiAgICBwYXJzZXIuc3dpdGNoTW9kZShvdXRlck1vZGUpO1xuICAgIHBhcnNlci5jb25zdW1lKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwic3R5bGluZ1wiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICBzdHlsZTogXCJ0ZXh0XCIsXG4gICAgICBib2R5OiBib2R5XG4gICAgfTtcbiAgfVxufSk7IC8vIENoZWNrIGZvciBleHRyYSBjbG9zaW5nIG1hdGggZGVsaW1pdGVyc1xuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwidGV4dFwiLFxuICAvLyBEb2Vzbid0IG1hdHRlciB3aGF0IHRoaXMgaXMuXG4gIG5hbWVzOiBbXCJcXFxcKVwiLCBcIlxcXFxdXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDAsXG4gICAgYWxsb3dlZEluVGV4dDogdHJ1ZSxcbiAgICBhbGxvd2VkSW5NYXRoOiBmYWxzZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKGNvbnRleHQsIGFyZ3MpIHtcbiAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJNaXNtYXRjaGVkIFwiICsgY29udGV4dC5mdW5jTmFtZSk7XG4gIH1cbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL21hdGhjaG9pY2UuanNcblxuXG5cblxuXG5cbnZhciBtYXRoY2hvaWNlX2Nob29zZU1hdGhTdHlsZSA9IGZ1bmN0aW9uIGNob29zZU1hdGhTdHlsZShncm91cCwgb3B0aW9ucykge1xuICBzd2l0Y2ggKG9wdGlvbnMuc3R5bGUuc2l6ZSkge1xuICAgIGNhc2Ugc3JjX1N0eWxlLkRJU1BMQVkuc2l6ZTpcbiAgICAgIHJldHVybiBncm91cC5kaXNwbGF5O1xuXG4gICAgY2FzZSBzcmNfU3R5bGUuVEVYVC5zaXplOlxuICAgICAgcmV0dXJuIGdyb3VwLnRleHQ7XG5cbiAgICBjYXNlIHNyY19TdHlsZS5TQ1JJUFQuc2l6ZTpcbiAgICAgIHJldHVybiBncm91cC5zY3JpcHQ7XG5cbiAgICBjYXNlIHNyY19TdHlsZS5TQ1JJUFRTQ1JJUFQuc2l6ZTpcbiAgICAgIHJldHVybiBncm91cC5zY3JpcHRzY3JpcHQ7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGdyb3VwLnRleHQ7XG4gIH1cbn07XG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJtYXRoY2hvaWNlXCIsXG4gIG5hbWVzOiBbXCJcXFxcbWF0aGNob2ljZVwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiA0XG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZiwgYXJncykge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmLnBhcnNlcjtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJtYXRoY2hvaWNlXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIGRpc3BsYXk6IGRlZmluZUZ1bmN0aW9uX29yZGFyZ3VtZW50KGFyZ3NbMF0pLFxuICAgICAgdGV4dDogZGVmaW5lRnVuY3Rpb25fb3JkYXJndW1lbnQoYXJnc1sxXSksXG4gICAgICBzY3JpcHQ6IGRlZmluZUZ1bmN0aW9uX29yZGFyZ3VtZW50KGFyZ3NbMl0pLFxuICAgICAgc2NyaXB0c2NyaXB0OiBkZWZpbmVGdW5jdGlvbl9vcmRhcmd1bWVudChhcmdzWzNdKVxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBib2R5ID0gbWF0aGNob2ljZV9jaG9vc2VNYXRoU3R5bGUoZ3JvdXAsIG9wdGlvbnMpO1xuICAgIHZhciBlbGVtZW50cyA9IGJ1aWxkSFRNTF9idWlsZEV4cHJlc3Npb24oYm9keSwgb3B0aW9ucywgZmFsc2UpO1xuICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlRnJhZ21lbnQoZWxlbWVudHMpO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIGJvZHkgPSBtYXRoY2hvaWNlX2Nob29zZU1hdGhTdHlsZShncm91cCwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIGJ1aWxkRXhwcmVzc2lvblJvdyhib2R5LCBvcHRpb25zKTtcbiAgfVxufSk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMvb3AuanNcbi8vIExpbWl0cywgc3ltYm9sc1xuXG5cblxuXG5cblxuXG5cblxuLy8gTW9zdCBvcGVyYXRvcnMgaGF2ZSBhIGxhcmdlIHN1Y2Nlc3NvciBzeW1ib2wsIGJ1dCB0aGVzZSBkb24ndC5cbnZhciBub1N1Y2Nlc3NvciA9IFtcIlxcXFxzbWFsbGludFwiXTsgLy8gTk9URTogVW5saWtlIG1vc3QgYGh0bWxCdWlsZGVyYHMsIHRoaXMgb25lIGhhbmRsZXMgbm90IG9ubHkgXCJvcFwiLCBidXQgYWxzb1xuLy8gXCJzdXBzdWJcIiBzaW5jZSBzb21lIG9mIHRoZW0gKGxpa2UgXFxpbnQpIGNhbiBhZmZlY3Qgc3VwZXIvc3Vic2NyaXB0aW5nLlxuXG52YXIgb3BfaHRtbEJ1aWxkZXIgPSBmdW5jdGlvbiBodG1sQnVpbGRlcihncnAsIG9wdGlvbnMpIHtcbiAgLy8gT3BlcmF0b3JzIGFyZSBoYW5kbGVkIGluIHRoZSBUZVhib29rIHBnLiA0NDMtNDQ0LCBydWxlIDEzKGEpLlxuICB2YXIgc3VwR3JvdXA7XG4gIHZhciBzdWJHcm91cDtcbiAgdmFyIGhhc0xpbWl0cyA9IGZhbHNlO1xuICB2YXIgZ3JvdXA7XG4gIHZhciBzdXBTdWIgPSBjaGVja05vZGVUeXBlKGdycCwgXCJzdXBzdWJcIik7XG5cbiAgaWYgKHN1cFN1Yikge1xuICAgIC8vIElmIHdlIGhhdmUgbGltaXRzLCBzdXBzdWIgd2lsbCBwYXNzIHVzIGl0cyBncm91cCB0byBoYW5kbGUuIFB1bGxcbiAgICAvLyBvdXQgdGhlIHN1cGVyc2NyaXB0IGFuZCBzdWJzY3JpcHQgYW5kIHNldCB0aGUgZ3JvdXAgdG8gdGhlIG9wIGluXG4gICAgLy8gaXRzIGJhc2UuXG4gICAgc3VwR3JvdXAgPSBzdXBTdWIuc3VwO1xuICAgIHN1Ykdyb3VwID0gc3VwU3ViLnN1YjtcbiAgICBncm91cCA9IGFzc2VydE5vZGVUeXBlKHN1cFN1Yi5iYXNlLCBcIm9wXCIpO1xuICAgIGhhc0xpbWl0cyA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgZ3JvdXAgPSBhc3NlcnROb2RlVHlwZShncnAsIFwib3BcIik7XG4gIH1cblxuICB2YXIgc3R5bGUgPSBvcHRpb25zLnN0eWxlO1xuICB2YXIgbGFyZ2UgPSBmYWxzZTtcblxuICBpZiAoc3R5bGUuc2l6ZSA9PT0gc3JjX1N0eWxlLkRJU1BMQVkuc2l6ZSAmJiBncm91cC5zeW1ib2wgJiYgIXV0aWxzLmNvbnRhaW5zKG5vU3VjY2Vzc29yLCBncm91cC5uYW1lKSkge1xuICAgIC8vIE1vc3Qgc3ltYm9sIG9wZXJhdG9ycyBnZXQgbGFyZ2VyIGluIGRpc3BsYXlzdHlsZSAocnVsZSAxMylcbiAgICBsYXJnZSA9IHRydWU7XG4gIH1cblxuICB2YXIgYmFzZTtcblxuICBpZiAoZ3JvdXAuc3ltYm9sKSB7XG4gICAgLy8gSWYgdGhpcyBpcyBhIHN5bWJvbCwgY3JlYXRlIHRoZSBzeW1ib2wuXG4gICAgdmFyIGZvbnROYW1lID0gbGFyZ2UgPyBcIlNpemUyLVJlZ3VsYXJcIiA6IFwiU2l6ZTEtUmVndWxhclwiO1xuICAgIHZhciBzdGFzaCA9IFwiXCI7XG5cbiAgICBpZiAoZ3JvdXAubmFtZSA9PT0gXCJcXFxcb2lpbnRcIiB8fCBncm91cC5uYW1lID09PSBcIlxcXFxvaWlpbnRcIikge1xuICAgICAgLy8gTm8gZm9udCBnbHlwaHMgeWV0LCBzbyB1c2UgYSBnbHlwaCB3L28gdGhlIG92YWwuXG4gICAgICAvLyBUT0RPOiBXaGVuIGZvbnQgZ2x5cGhzIGFyZSBhdmFpbGFibGUsIGRlbGV0ZSB0aGlzIGNvZGUuXG4gICAgICBzdGFzaCA9IGdyb3VwLm5hbWUuc3Vic3RyKDEpOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICAgIGdyb3VwLm5hbWUgPSBzdGFzaCA9PT0gXCJvaWludFwiID8gXCJcXFxcaWludFwiIDogXCJcXFxcaWlpbnRcIjtcbiAgICB9XG5cbiAgICBiYXNlID0gYnVpbGRDb21tb24ubWFrZVN5bWJvbChncm91cC5uYW1lLCBmb250TmFtZSwgXCJtYXRoXCIsIG9wdGlvbnMsIFtcIm1vcFwiLCBcIm9wLXN5bWJvbFwiLCBsYXJnZSA/IFwibGFyZ2Utb3BcIiA6IFwic21hbGwtb3BcIl0pO1xuXG4gICAgaWYgKHN0YXNoLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIFdlJ3JlIGluIFxcb2lpbnQgb3IgXFxvaWlpbnQuIE92ZXJsYXkgdGhlIG92YWwuXG4gICAgICAvLyBUT0RPOiBXaGVuIGZvbnQgZ2x5cGhzIGFyZSBhdmFpbGFibGUsIGRlbGV0ZSB0aGlzIGNvZGUuXG4gICAgICB2YXIgaXRhbGljID0gYmFzZS5pdGFsaWM7XG4gICAgICB2YXIgb3ZhbCA9IGJ1aWxkQ29tbW9uLnN0YXRpY1N2ZyhzdGFzaCArIFwiU2l6ZVwiICsgKGxhcmdlID8gXCIyXCIgOiBcIjFcIiksIG9wdGlvbnMpO1xuICAgICAgYmFzZSA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgICAgIHBvc2l0aW9uVHlwZTogXCJpbmRpdmlkdWFsU2hpZnRcIixcbiAgICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgICAgZWxlbTogYmFzZSxcbiAgICAgICAgICBzaGlmdDogMFxuICAgICAgICB9LCB7XG4gICAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgICAgZWxlbTogb3ZhbCxcbiAgICAgICAgICBzaGlmdDogbGFyZ2UgPyAwLjA4IDogMFxuICAgICAgICB9XVxuICAgICAgfSwgb3B0aW9ucyk7IC8vICRGbG93Rml4TWVcblxuICAgICAgZ3JvdXAubmFtZSA9IFwiXFxcXFwiICsgc3Rhc2g7XG4gICAgICBiYXNlLmNsYXNzZXMudW5zaGlmdChcIm1vcFwiKTsgLy8gJEZsb3dGaXhNZVxuXG4gICAgICBiYXNlLml0YWxpYyA9IGl0YWxpYztcbiAgICB9XG4gIH0gZWxzZSBpZiAoZ3JvdXAuYm9keSkge1xuICAgIC8vIElmIHRoaXMgaXMgYSBsaXN0LCBjb21wb3NlIHRoYXQgbGlzdC5cbiAgICB2YXIgaW5uZXIgPSBidWlsZEhUTUxfYnVpbGRFeHByZXNzaW9uKGdyb3VwLmJvZHksIG9wdGlvbnMsIHRydWUpO1xuXG4gICAgaWYgKGlubmVyLmxlbmd0aCA9PT0gMSAmJiBpbm5lclswXSBpbnN0YW5jZW9mIGRvbVRyZWVfU3ltYm9sTm9kZSkge1xuICAgICAgYmFzZSA9IGlubmVyWzBdO1xuICAgICAgYmFzZS5jbGFzc2VzWzBdID0gXCJtb3BcIjsgLy8gcmVwbGFjZSBvbGQgbWNsYXNzXG4gICAgfSBlbHNlIHtcbiAgICAgIGJhc2UgPSBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJtb3BcIl0sIGJ1aWxkQ29tbW9uLnRyeUNvbWJpbmVDaGFycyhpbm5lciksIG9wdGlvbnMpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBPdGhlcndpc2UsIHRoaXMgaXMgYSB0ZXh0IG9wZXJhdG9yLiBCdWlsZCB0aGUgdGV4dCBmcm9tIHRoZVxuICAgIC8vIG9wZXJhdG9yJ3MgbmFtZS5cbiAgICAvLyBUT0RPKGVtaWx5KTogQWRkIGEgc3BhY2UgaW4gdGhlIG1pZGRsZSBvZiBzb21lIG9mIHRoZXNlXG4gICAgLy8gb3BlcmF0b3JzLCBsaWtlIFxcbGltc3VwXG4gICAgdmFyIG91dHB1dCA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBncm91cC5uYW1lLmxlbmd0aDsgaSsrKSB7XG4gICAgICBvdXRwdXQucHVzaChidWlsZENvbW1vbi5tYXRoc3ltKGdyb3VwLm5hbWVbaV0sIGdyb3VwLm1vZGUpKTtcbiAgICB9XG5cbiAgICBiYXNlID0gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wibW9wXCJdLCBvdXRwdXQsIG9wdGlvbnMpO1xuICB9IC8vIElmIGNvbnRlbnQgb2Ygb3AgaXMgYSBzaW5nbGUgc3ltYm9sLCBzaGlmdCBpdCB2ZXJ0aWNhbGx5LlxuXG5cbiAgdmFyIGJhc2VTaGlmdCA9IDA7XG4gIHZhciBzbGFudCA9IDA7XG5cbiAgaWYgKChiYXNlIGluc3RhbmNlb2YgZG9tVHJlZV9TeW1ib2xOb2RlIHx8IGdyb3VwLm5hbWUgPT09IFwiXFxcXG9paW50XCIgfHwgZ3JvdXAubmFtZSA9PT0gXCJcXFxcb2lpaW50XCIpICYmICFncm91cC5zdXBwcmVzc0Jhc2VTaGlmdCkge1xuICAgIC8vIFdlIHN1cHByZXNzIHRoZSBzaGlmdCBvZiB0aGUgYmFzZSBvZiBcXG92ZXJzZXQgYW5kIFxcdW5kZXJzZXQuIE90aGVyd2lzZSxcbiAgICAvLyBzaGlmdCB0aGUgc3ltYm9sIHNvIGl0cyBjZW50ZXIgbGllcyBvbiB0aGUgYXhpcyAocnVsZSAxMykuIEl0XG4gICAgLy8gYXBwZWFycyB0aGF0IG91ciBmb250cyBoYXZlIHRoZSBjZW50ZXJzIG9mIHRoZSBzeW1ib2xzIGFscmVhZHlcbiAgICAvLyBhbG1vc3Qgb24gdGhlIGF4aXMsIHNvIHRoZXNlIG51bWJlcnMgYXJlIHZlcnkgc21hbGwuIE5vdGUgd2VcbiAgICAvLyBkb24ndCBhY3R1YWxseSBhcHBseSB0aGlzIGhlcmUsIGJ1dCBpbnN0ZWFkIGl0IGlzIHVzZWQgZWl0aGVyIGluXG4gICAgLy8gdGhlIHZsaXN0IGNyZWF0aW9uIG9yIHNlcGFyYXRlbHkgd2hlbiB0aGVyZSBhcmUgbm8gbGltaXRzLlxuICAgIGJhc2VTaGlmdCA9IChiYXNlLmhlaWdodCAtIGJhc2UuZGVwdGgpIC8gMiAtIG9wdGlvbnMuZm9udE1ldHJpY3MoKS5heGlzSGVpZ2h0OyAvLyBUaGUgc2xhbnQgb2YgdGhlIHN5bWJvbCBpcyBqdXN0IGl0cyBpdGFsaWMgY29ycmVjdGlvbi5cbiAgICAvLyAkRmxvd0ZpeE1lXG5cbiAgICBzbGFudCA9IGJhc2UuaXRhbGljO1xuICB9XG5cbiAgaWYgKGhhc0xpbWl0cykge1xuICAgIC8vIElFIDggY2xpcHMgXFxpbnQgaWYgaXQgaXMgaW4gYSBkaXNwbGF5OiBpbmxpbmUtYmxvY2suIFdlIHdyYXAgaXRcbiAgICAvLyBpbiBhIG5ldyBzcGFuIHNvIGl0IGlzIGFuIGlubGluZSwgYW5kIHdvcmtzLlxuICAgIGJhc2UgPSBidWlsZENvbW1vbi5tYWtlU3BhbihbXSwgW2Jhc2VdKTtcbiAgICB2YXIgc3ViO1xuICAgIHZhciBzdXA7IC8vIFdlIG1hbnVhbGx5IGhhdmUgdG8gaGFuZGxlIHRoZSBzdXBlcnNjcmlwdHMgYW5kIHN1YnNjcmlwdHMuIFRoaXMsXG4gICAgLy8gYXNpZGUgZnJvbSB0aGUga2VybiBjYWxjdWxhdGlvbnMsIGlzIGNvcGllZCBmcm9tIHN1cHN1Yi5cblxuICAgIGlmIChzdXBHcm91cCkge1xuICAgICAgdmFyIGVsZW0gPSBidWlsZEhUTUxfYnVpbGRHcm91cChzdXBHcm91cCwgb3B0aW9ucy5oYXZpbmdTdHlsZShzdHlsZS5zdXAoKSksIG9wdGlvbnMpO1xuICAgICAgc3VwID0ge1xuICAgICAgICBlbGVtOiBlbGVtLFxuICAgICAgICBrZXJuOiBNYXRoLm1heChvcHRpb25zLmZvbnRNZXRyaWNzKCkuYmlnT3BTcGFjaW5nMSwgb3B0aW9ucy5mb250TWV0cmljcygpLmJpZ09wU3BhY2luZzMgLSBlbGVtLmRlcHRoKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoc3ViR3JvdXApIHtcbiAgICAgIHZhciBfZWxlbSA9IGJ1aWxkSFRNTF9idWlsZEdyb3VwKHN1Ykdyb3VwLCBvcHRpb25zLmhhdmluZ1N0eWxlKHN0eWxlLnN1YigpKSwgb3B0aW9ucyk7XG5cbiAgICAgIHN1YiA9IHtcbiAgICAgICAgZWxlbTogX2VsZW0sXG4gICAgICAgIGtlcm46IE1hdGgubWF4KG9wdGlvbnMuZm9udE1ldHJpY3MoKS5iaWdPcFNwYWNpbmcyLCBvcHRpb25zLmZvbnRNZXRyaWNzKCkuYmlnT3BTcGFjaW5nNCAtIF9lbGVtLmhlaWdodClcbiAgICAgIH07XG4gICAgfSAvLyBCdWlsZCB0aGUgZmluYWwgZ3JvdXAgYXMgYSB2bGlzdCBvZiB0aGUgcG9zc2libGUgc3Vic2NyaXB0LCBiYXNlLFxuICAgIC8vIGFuZCBwb3NzaWJsZSBzdXBlcnNjcmlwdC5cblxuXG4gICAgdmFyIGZpbmFsR3JvdXA7XG5cbiAgICBpZiAoc3VwICYmIHN1Yikge1xuICAgICAgdmFyIGJvdHRvbSA9IG9wdGlvbnMuZm9udE1ldHJpY3MoKS5iaWdPcFNwYWNpbmc1ICsgc3ViLmVsZW0uaGVpZ2h0ICsgc3ViLmVsZW0uZGVwdGggKyBzdWIua2VybiArIGJhc2UuZGVwdGggKyBiYXNlU2hpZnQ7XG4gICAgICBmaW5hbEdyb3VwID0gYnVpbGRDb21tb24ubWFrZVZMaXN0KHtcbiAgICAgICAgcG9zaXRpb25UeXBlOiBcImJvdHRvbVwiLFxuICAgICAgICBwb3NpdGlvbkRhdGE6IGJvdHRvbSxcbiAgICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgICAgdHlwZTogXCJrZXJuXCIsXG4gICAgICAgICAgc2l6ZTogb3B0aW9ucy5mb250TWV0cmljcygpLmJpZ09wU3BhY2luZzVcbiAgICAgICAgfSwge1xuICAgICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICAgIGVsZW06IHN1Yi5lbGVtLFxuICAgICAgICAgIG1hcmdpbkxlZnQ6IC1zbGFudCArIFwiZW1cIlxuICAgICAgICB9LCB7XG4gICAgICAgICAgdHlwZTogXCJrZXJuXCIsXG4gICAgICAgICAgc2l6ZTogc3ViLmtlcm5cbiAgICAgICAgfSwge1xuICAgICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICAgIGVsZW06IGJhc2VcbiAgICAgICAgfSwge1xuICAgICAgICAgIHR5cGU6IFwia2VyblwiLFxuICAgICAgICAgIHNpemU6IHN1cC5rZXJuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgICBlbGVtOiBzdXAuZWxlbSxcbiAgICAgICAgICBtYXJnaW5MZWZ0OiBzbGFudCArIFwiZW1cIlxuICAgICAgICB9LCB7XG4gICAgICAgICAgdHlwZTogXCJrZXJuXCIsXG4gICAgICAgICAgc2l6ZTogb3B0aW9ucy5mb250TWV0cmljcygpLmJpZ09wU3BhY2luZzVcbiAgICAgICAgfV1cbiAgICAgIH0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAoc3ViKSB7XG4gICAgICB2YXIgdG9wID0gYmFzZS5oZWlnaHQgLSBiYXNlU2hpZnQ7IC8vIFNoaWZ0IHRoZSBsaW1pdHMgYnkgdGhlIHNsYW50IG9mIHRoZSBzeW1ib2wuIE5vdGVcbiAgICAgIC8vIHRoYXQgd2UgYXJlIHN1cHBvc2VkIHRvIHNoaWZ0IHRoZSBsaW1pdHMgYnkgMS8yIG9mIHRoZSBzbGFudCxcbiAgICAgIC8vIGJ1dCBzaW5jZSB3ZSBhcmUgY2VudGVyaW5nIHRoZSBsaW1pdHMgYWRkaW5nIGEgZnVsbCBzbGFudCBvZlxuICAgICAgLy8gbWFyZ2luIHdpbGwgc2hpZnQgYnkgMS8yIHRoYXQuXG5cbiAgICAgIGZpbmFsR3JvdXAgPSBidWlsZENvbW1vbi5tYWtlVkxpc3Qoe1xuICAgICAgICBwb3NpdGlvblR5cGU6IFwidG9wXCIsXG4gICAgICAgIHBvc2l0aW9uRGF0YTogdG9wLFxuICAgICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgICB0eXBlOiBcImtlcm5cIixcbiAgICAgICAgICBzaXplOiBvcHRpb25zLmZvbnRNZXRyaWNzKCkuYmlnT3BTcGFjaW5nNVxuICAgICAgICB9LCB7XG4gICAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgICAgZWxlbTogc3ViLmVsZW0sXG4gICAgICAgICAgbWFyZ2luTGVmdDogLXNsYW50ICsgXCJlbVwiXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB0eXBlOiBcImtlcm5cIixcbiAgICAgICAgICBzaXplOiBzdWIua2VyblxuICAgICAgICB9LCB7XG4gICAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgICAgZWxlbTogYmFzZVxuICAgICAgICB9XVxuICAgICAgfSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIGlmIChzdXApIHtcbiAgICAgIHZhciBfYm90dG9tID0gYmFzZS5kZXB0aCArIGJhc2VTaGlmdDtcblxuICAgICAgZmluYWxHcm91cCA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgICAgIHBvc2l0aW9uVHlwZTogXCJib3R0b21cIixcbiAgICAgICAgcG9zaXRpb25EYXRhOiBfYm90dG9tLFxuICAgICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgICBlbGVtOiBiYXNlXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB0eXBlOiBcImtlcm5cIixcbiAgICAgICAgICBzaXplOiBzdXAua2VyblxuICAgICAgICB9LCB7XG4gICAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgICAgZWxlbTogc3VwLmVsZW0sXG4gICAgICAgICAgbWFyZ2luTGVmdDogc2xhbnQgKyBcImVtXCJcbiAgICAgICAgfSwge1xuICAgICAgICAgIHR5cGU6IFwia2VyblwiLFxuICAgICAgICAgIHNpemU6IG9wdGlvbnMuZm9udE1ldHJpY3MoKS5iaWdPcFNwYWNpbmc1XG4gICAgICAgIH1dXG4gICAgICB9LCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhpcyBjYXNlIHByb2JhYmx5IHNob3VsZG4ndCBvY2N1ciAodGhpcyB3b3VsZCBtZWFuIHRoZVxuICAgICAgLy8gc3Vwc3ViIHdhcyBzZW5kaW5nIHVzIGEgZ3JvdXAgd2l0aCBubyBzdXBlcnNjcmlwdCBvclxuICAgICAgLy8gc3Vic2NyaXB0KSBidXQgYmUgc2FmZS5cbiAgICAgIHJldHVybiBiYXNlO1xuICAgIH1cblxuICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJtb3BcIiwgXCJvcC1saW1pdHNcIl0sIFtmaW5hbEdyb3VwXSwgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJhc2VTaGlmdCkge1xuICAgICAgYmFzZS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcbiAgICAgIGJhc2Uuc3R5bGUudG9wID0gYmFzZVNoaWZ0ICsgXCJlbVwiO1xuICAgIH1cblxuICAgIHJldHVybiBiYXNlO1xuICB9XG59O1xuXG52YXIgb3BfbWF0aG1sQnVpbGRlciA9IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgdmFyIG5vZGU7XG5cbiAgaWYgKGdyb3VwLnN5bWJvbCkge1xuICAgIC8vIFRoaXMgaXMgYSBzeW1ib2wuIEp1c3QgYWRkIHRoZSBzeW1ib2wuXG4gICAgbm9kZSA9IG5ldyBtYXRoTUxUcmVlX01hdGhOb2RlKFwibW9cIiwgW2J1aWxkTWF0aE1MX21ha2VUZXh0KGdyb3VwLm5hbWUsIGdyb3VwLm1vZGUpXSk7XG5cbiAgICBpZiAodXRpbHMuY29udGFpbnMobm9TdWNjZXNzb3IsIGdyb3VwLm5hbWUpKSB7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShcImxhcmdlb3BcIiwgXCJmYWxzZVwiKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZ3JvdXAuYm9keSkge1xuICAgIC8vIFRoaXMgaXMgYW4gb3BlcmF0b3Igd2l0aCBjaGlsZHJlbi4gQWRkIHRoZW0uXG4gICAgbm9kZSA9IG5ldyBtYXRoTUxUcmVlX01hdGhOb2RlKFwibW9cIiwgYnVpbGRNYXRoTUxfYnVpbGRFeHByZXNzaW9uKGdyb3VwLmJvZHksIG9wdGlvbnMpKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBUaGlzIGlzIGEgdGV4dCBvcGVyYXRvci4gQWRkIGFsbCBvZiB0aGUgY2hhcmFjdGVycyBmcm9tIHRoZVxuICAgIC8vIG9wZXJhdG9yJ3MgbmFtZS5cbiAgICAvLyBUT0RPKGVtaWx5KTogQWRkIGEgc3BhY2UgaW4gdGhlIG1pZGRsZSBvZiBzb21lIG9mIHRoZXNlXG4gICAgLy8gb3BlcmF0b3JzLCBsaWtlIFxcbGltc3VwLlxuICAgIG5vZGUgPSBuZXcgbWF0aE1MVHJlZV9NYXRoTm9kZShcIm1pXCIsIFtuZXcgbWF0aE1MVHJlZV9UZXh0Tm9kZShncm91cC5uYW1lLnNsaWNlKDEpKV0pOyAvLyBBcHBlbmQgYW4gPG1vPiZBcHBseUZ1bmN0aW9uOzwvbW8+LlxuICAgIC8vIHJlZjogaHR0cHM6Ly93d3cudzMub3JnL1RSL1JFQy1NYXRoTUwvY2hhcDNfMi5odG1sI3NlYzMuMi40XG5cbiAgICB2YXIgb3BlcmF0b3IgPSBuZXcgbWF0aE1MVHJlZV9NYXRoTm9kZShcIm1vXCIsIFtidWlsZE1hdGhNTF9tYWtlVGV4dChcIlxcdTIwNjFcIiwgXCJ0ZXh0XCIpXSk7XG5cbiAgICBpZiAoZ3JvdXAucGFyZW50SXNTdXBTdWIpIHtcbiAgICAgIG5vZGUgPSBuZXcgbWF0aE1MVHJlZV9NYXRoTm9kZShcIm1vXCIsIFtub2RlLCBvcGVyYXRvcl0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlID0gbmV3RG9jdW1lbnRGcmFnbWVudChbbm9kZSwgb3BlcmF0b3JdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn07XG5cbnZhciBzaW5nbGVDaGFyQmlnT3BzID0ge1xuICBcIlxcdTIyMEZcIjogXCJcXFxccHJvZFwiLFxuICBcIlxcdTIyMTBcIjogXCJcXFxcY29wcm9kXCIsXG4gIFwiXFx1MjIxMVwiOiBcIlxcXFxzdW1cIixcbiAgXCJcXHUyMkMwXCI6IFwiXFxcXGJpZ3dlZGdlXCIsXG4gIFwiXFx1MjJDMVwiOiBcIlxcXFxiaWd2ZWVcIixcbiAgXCJcXHUyMkMyXCI6IFwiXFxcXGJpZ2NhcFwiLFxuICBcIlxcdTIyQzNcIjogXCJcXFxcYmlnY3VwXCIsXG4gIFwiXFx1MkEwMFwiOiBcIlxcXFxiaWdvZG90XCIsXG4gIFwiXFx1MkEwMVwiOiBcIlxcXFxiaWdvcGx1c1wiLFxuICBcIlxcdTJBMDJcIjogXCJcXFxcYmlnb3RpbWVzXCIsXG4gIFwiXFx1MkEwNFwiOiBcIlxcXFxiaWd1cGx1c1wiLFxuICBcIlxcdTJBMDZcIjogXCJcXFxcYmlnc3FjdXBcIlxufTtcbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJvcFwiLFxuICBuYW1lczogW1wiXFxcXGNvcHJvZFwiLCBcIlxcXFxiaWd2ZWVcIiwgXCJcXFxcYmlnd2VkZ2VcIiwgXCJcXFxcYmlndXBsdXNcIiwgXCJcXFxcYmlnY2FwXCIsIFwiXFxcXGJpZ2N1cFwiLCBcIlxcXFxpbnRvcFwiLCBcIlxcXFxwcm9kXCIsIFwiXFxcXHN1bVwiLCBcIlxcXFxiaWdvdGltZXNcIiwgXCJcXFxcYmlnb3BsdXNcIiwgXCJcXFxcYmlnb2RvdFwiLCBcIlxcXFxiaWdzcWN1cFwiLCBcIlxcXFxzbWFsbGludFwiLCBcIlxcdTIyMEZcIiwgXCJcXHUyMjEwXCIsIFwiXFx1MjIxMVwiLCBcIlxcdTIyQzBcIiwgXCJcXHUyMkMxXCIsIFwiXFx1MjJDMlwiLCBcIlxcdTIyQzNcIiwgXCJcXHUyQTAwXCIsIFwiXFx1MkEwMVwiLCBcIlxcdTJBMDJcIiwgXCJcXHUyQTA0XCIsIFwiXFx1MkEwNlwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAwXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZiwgYXJncykge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmLnBhcnNlcixcbiAgICAgICAgZnVuY05hbWUgPSBfcmVmLmZ1bmNOYW1lO1xuICAgIHZhciBmTmFtZSA9IGZ1bmNOYW1lO1xuXG4gICAgaWYgKGZOYW1lLmxlbmd0aCA9PT0gMSkge1xuICAgICAgZk5hbWUgPSBzaW5nbGVDaGFyQmlnT3BzW2ZOYW1lXTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJvcFwiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICBsaW1pdHM6IHRydWUsXG4gICAgICBwYXJlbnRJc1N1cFN1YjogZmFsc2UsXG4gICAgICBzeW1ib2w6IHRydWUsXG4gICAgICBuYW1lOiBmTmFtZVxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBvcF9odG1sQnVpbGRlcixcbiAgbWF0aG1sQnVpbGRlcjogb3BfbWF0aG1sQnVpbGRlclxufSk7IC8vIE5vdGU6IGNhbGxpbmcgZGVmaW5lRnVuY3Rpb24gd2l0aCBhIHR5cGUgdGhhdCdzIGFscmVhZHkgYmVlbiBkZWZpbmVkIG9ubHlcbi8vIHdvcmtzIGJlY2F1c2UgdGhlIHNhbWUgaHRtbEJ1aWxkZXIgYW5kIG1hdGhtbEJ1aWxkZXIgYXJlIGJlaW5nIHVzZWQuXG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJvcFwiLFxuICBuYW1lczogW1wiXFxcXG1hdGhvcFwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZjIsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZjIucGFyc2VyO1xuICAgIHZhciBib2R5ID0gYXJnc1swXTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJvcFwiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICBsaW1pdHM6IGZhbHNlLFxuICAgICAgcGFyZW50SXNTdXBTdWI6IGZhbHNlLFxuICAgICAgc3ltYm9sOiBmYWxzZSxcbiAgICAgIGJvZHk6IGRlZmluZUZ1bmN0aW9uX29yZGFyZ3VtZW50KGJvZHkpXG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IG9wX2h0bWxCdWlsZGVyLFxuICBtYXRobWxCdWlsZGVyOiBvcF9tYXRobWxCdWlsZGVyXG59KTsgLy8gVGhlcmUgYXJlIDIgZmxhZ3MgZm9yIG9wZXJhdG9yczsgd2hldGhlciB0aGV5IHByb2R1Y2UgbGltaXRzIGluXG4vLyBkaXNwbGF5c3R5bGUsIGFuZCB3aGV0aGVyIHRoZXkgYXJlIHN5bWJvbHMgYW5kIHNob3VsZCBncm93IGluXG4vLyBkaXNwbGF5c3R5bGUuIFRoZXNlIGZvdXIgZ3JvdXBzIGNvdmVyIHRoZSBmb3VyIHBvc3NpYmxlIGNob2ljZXMuXG5cbnZhciBzaW5nbGVDaGFySW50ZWdyYWxzID0ge1xuICBcIlxcdTIyMkJcIjogXCJcXFxcaW50XCIsXG4gIFwiXFx1MjIyQ1wiOiBcIlxcXFxpaW50XCIsXG4gIFwiXFx1MjIyRFwiOiBcIlxcXFxpaWludFwiLFxuICBcIlxcdTIyMkVcIjogXCJcXFxcb2ludFwiLFxuICBcIlxcdTIyMkZcIjogXCJcXFxcb2lpbnRcIixcbiAgXCJcXHUyMjMwXCI6IFwiXFxcXG9paWludFwiXG59OyAvLyBObyBsaW1pdHMsIG5vdCBzeW1ib2xzXG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJvcFwiLFxuICBuYW1lczogW1wiXFxcXGFyY3NpblwiLCBcIlxcXFxhcmNjb3NcIiwgXCJcXFxcYXJjdGFuXCIsIFwiXFxcXGFyY3RnXCIsIFwiXFxcXGFyY2N0Z1wiLCBcIlxcXFxhcmdcIiwgXCJcXFxcY2hcIiwgXCJcXFxcY29zXCIsIFwiXFxcXGNvc2VjXCIsIFwiXFxcXGNvc2hcIiwgXCJcXFxcY290XCIsIFwiXFxcXGNvdGdcIiwgXCJcXFxcY290aFwiLCBcIlxcXFxjc2NcIiwgXCJcXFxcY3RnXCIsIFwiXFxcXGN0aFwiLCBcIlxcXFxkZWdcIiwgXCJcXFxcZGltXCIsIFwiXFxcXGV4cFwiLCBcIlxcXFxob21cIiwgXCJcXFxca2VyXCIsIFwiXFxcXGxnXCIsIFwiXFxcXGxuXCIsIFwiXFxcXGxvZ1wiLCBcIlxcXFxzZWNcIiwgXCJcXFxcc2luXCIsIFwiXFxcXHNpbmhcIiwgXCJcXFxcc2hcIiwgXCJcXFxcdGFuXCIsIFwiXFxcXHRhbmhcIiwgXCJcXFxcdGdcIiwgXCJcXFxcdGhcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMFxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYzLnBhcnNlcixcbiAgICAgICAgZnVuY05hbWUgPSBfcmVmMy5mdW5jTmFtZTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJvcFwiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICBsaW1pdHM6IGZhbHNlLFxuICAgICAgcGFyZW50SXNTdXBTdWI6IGZhbHNlLFxuICAgICAgc3ltYm9sOiBmYWxzZSxcbiAgICAgIG5hbWU6IGZ1bmNOYW1lXG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IG9wX2h0bWxCdWlsZGVyLFxuICBtYXRobWxCdWlsZGVyOiBvcF9tYXRobWxCdWlsZGVyXG59KTsgLy8gTGltaXRzLCBub3Qgc3ltYm9sc1xuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwib3BcIixcbiAgbmFtZXM6IFtcIlxcXFxkZXRcIiwgXCJcXFxcZ2NkXCIsIFwiXFxcXGluZlwiLCBcIlxcXFxsaW1cIiwgXCJcXFxcbWF4XCIsIFwiXFxcXG1pblwiLCBcIlxcXFxQclwiLCBcIlxcXFxzdXBcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMFxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWY0KSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWY0LnBhcnNlcixcbiAgICAgICAgZnVuY05hbWUgPSBfcmVmNC5mdW5jTmFtZTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJvcFwiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICBsaW1pdHM6IHRydWUsXG4gICAgICBwYXJlbnRJc1N1cFN1YjogZmFsc2UsXG4gICAgICBzeW1ib2w6IGZhbHNlLFxuICAgICAgbmFtZTogZnVuY05hbWVcbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogb3BfaHRtbEJ1aWxkZXIsXG4gIG1hdGhtbEJ1aWxkZXI6IG9wX21hdGhtbEJ1aWxkZXJcbn0pOyAvLyBObyBsaW1pdHMsIHN5bWJvbHNcblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcIm9wXCIsXG4gIG5hbWVzOiBbXCJcXFxcaW50XCIsIFwiXFxcXGlpbnRcIiwgXCJcXFxcaWlpbnRcIiwgXCJcXFxcb2ludFwiLCBcIlxcXFxvaWludFwiLCBcIlxcXFxvaWlpbnRcIiwgXCJcXHUyMjJCXCIsIFwiXFx1MjIyQ1wiLCBcIlxcdTIyMkRcIiwgXCJcXHUyMjJFXCIsIFwiXFx1MjIyRlwiLCBcIlxcdTIyMzBcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMFxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWY1KSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWY1LnBhcnNlcixcbiAgICAgICAgZnVuY05hbWUgPSBfcmVmNS5mdW5jTmFtZTtcbiAgICB2YXIgZk5hbWUgPSBmdW5jTmFtZTtcblxuICAgIGlmIChmTmFtZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGZOYW1lID0gc2luZ2xlQ2hhckludGVncmFsc1tmTmFtZV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwib3BcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgbGltaXRzOiBmYWxzZSxcbiAgICAgIHBhcmVudElzU3VwU3ViOiBmYWxzZSxcbiAgICAgIHN5bWJvbDogdHJ1ZSxcbiAgICAgIG5hbWU6IGZOYW1lXG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IG9wX2h0bWxCdWlsZGVyLFxuICBtYXRobWxCdWlsZGVyOiBvcF9tYXRobWxCdWlsZGVyXG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2Z1bmN0aW9ucy9vcGVyYXRvcm5hbWUuanNcblxuXG5cblxuXG4gLy8gXFxvcGVyYXRvcm5hbWVcbi8vIGFtc29wbi5kdHg6IFxcbWF0aG9weyMxXFxrZXJuXFx6QFxcb3BlcmF0b3JAZm9udCMzfVxcbmV3bWNvZGVzQFxuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwib3BlcmF0b3JuYW1lXCIsXG4gIG5hbWVzOiBbXCJcXFxcb3BlcmF0b3JuYW1lXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDFcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmLCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYucGFyc2VyO1xuICAgIHZhciBib2R5ID0gYXJnc1swXTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJvcGVyYXRvcm5hbWVcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgYm9keTogZGVmaW5lRnVuY3Rpb25fb3JkYXJndW1lbnQoYm9keSlcbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogZnVuY3Rpb24gaHRtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICBpZiAoZ3JvdXAuYm9keS5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgYm9keSA9IGdyb3VwLmJvZHkubWFwKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAvLyAkRmxvd0ZpeE1lOiBDaGVjayBpZiB0aGUgbm9kZSBoYXMgYSBzdHJpbmcgYHRleHRgIHByb3BlcnR5LlxuICAgICAgICB2YXIgY2hpbGRUZXh0ID0gY2hpbGQudGV4dDtcblxuICAgICAgICBpZiAodHlwZW9mIGNoaWxkVGV4dCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBcInRleHRvcmRcIixcbiAgICAgICAgICAgIG1vZGU6IGNoaWxkLm1vZGUsXG4gICAgICAgICAgICB0ZXh0OiBjaGlsZFRleHRcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgICAgfVxuICAgICAgfSk7IC8vIENvbnNvbGlkYXRlIGZ1bmN0aW9uIG5hbWVzIGludG8gc3ltYm9sIGNoYXJhY3RlcnMuXG5cbiAgICAgIHZhciBleHByZXNzaW9uID0gYnVpbGRIVE1MX2J1aWxkRXhwcmVzc2lvbihib2R5LCBvcHRpb25zLndpdGhGb250KFwibWF0aHJtXCIpLCB0cnVlKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHByZXNzaW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGlsZCA9IGV4cHJlc3Npb25baV07XG5cbiAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgZG9tVHJlZV9TeW1ib2xOb2RlKSB7XG4gICAgICAgICAgLy8gUGVyIGFtc29wbiBwYWNrYWdlLFxuICAgICAgICAgIC8vIGNoYW5nZSBtaW51cyB0byBoeXBoZW4gYW5kIFxcYXN0IHRvIGFzdGVyaXNrXG4gICAgICAgICAgY2hpbGQudGV4dCA9IGNoaWxkLnRleHQucmVwbGFjZSgvXFx1MjIxMi8sIFwiLVwiKS5yZXBsYWNlKC9cXHUyMjE3LywgXCIqXCIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJtb3BcIl0sIGV4cHJlc3Npb24sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wibW9wXCJdLCBbXSwgb3B0aW9ucyk7XG4gICAgfVxuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgLy8gVGhlIHN0ZXBzIHRha2VuIGhlcmUgYXJlIHNpbWlsYXIgdG8gdGhlIGh0bWwgdmVyc2lvbi5cbiAgICB2YXIgZXhwcmVzc2lvbiA9IGJ1aWxkTWF0aE1MX2J1aWxkRXhwcmVzc2lvbihncm91cC5ib2R5LCBvcHRpb25zLndpdGhGb250KFwibWF0aHJtXCIpKTsgLy8gSXMgZXhwcmVzc2lvbiBhIHN0cmluZyBvciBoYXMgaXQgc29tZXRoaW5nIGxpa2UgYSBmcmFjdGlvbj9cblxuICAgIHZhciBpc0FsbFN0cmluZyA9IHRydWU7IC8vIGRlZmF1bHRcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwcmVzc2lvbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG5vZGUgPSBleHByZXNzaW9uW2ldO1xuXG4gICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIG1hdGhNTFRyZWUuU3BhY2VOb2RlKSB7Ly8gRG8gbm90aGluZ1xuICAgICAgfSBlbHNlIGlmIChub2RlIGluc3RhbmNlb2YgbWF0aE1MVHJlZS5NYXRoTm9kZSkge1xuICAgICAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICAgIGNhc2UgXCJtaVwiOlxuICAgICAgICAgIGNhc2UgXCJtblwiOlxuICAgICAgICAgIGNhc2UgXCJtc1wiOlxuICAgICAgICAgIGNhc2UgXCJtc3BhY2VcIjpcbiAgICAgICAgICBjYXNlIFwibXRleHRcIjpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIC8vIERvIG5vdGhpbmcgeWV0LlxuXG4gICAgICAgICAgY2FzZSBcIm1vXCI6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHZhciBjaGlsZCA9IG5vZGUuY2hpbGRyZW5bMF07XG5cbiAgICAgICAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmIGNoaWxkIGluc3RhbmNlb2YgbWF0aE1MVHJlZS5UZXh0Tm9kZSkge1xuICAgICAgICAgICAgICAgIGNoaWxkLnRleHQgPSBjaGlsZC50ZXh0LnJlcGxhY2UoL1xcdTIyMTIvLCBcIi1cIikucmVwbGFjZSgvXFx1MjIxNy8sIFwiKlwiKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpc0FsbFN0cmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgaXNBbGxTdHJpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXNBbGxTdHJpbmcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNBbGxTdHJpbmcpIHtcbiAgICAgIC8vIFdyaXRlIGEgc2luZ2xlIFRleHROb2RlIGluc3RlYWQgb2YgbXVsdGlwbGUgbmVzdGVkIHRhZ3MuXG4gICAgICB2YXIgd29yZCA9IGV4cHJlc3Npb24ubWFwKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlLnRvVGV4dCgpO1xuICAgICAgfSkuam9pbihcIlwiKTtcbiAgICAgIGV4cHJlc3Npb24gPSBbbmV3IG1hdGhNTFRyZWUuVGV4dE5vZGUod29yZCldO1xuICAgIH1cblxuICAgIHZhciBpZGVudGlmaWVyID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtaVwiLCBleHByZXNzaW9uKTtcbiAgICBpZGVudGlmaWVyLnNldEF0dHJpYnV0ZShcIm1hdGh2YXJpYW50XCIsIFwibm9ybWFsXCIpOyAvLyBcXHUyMDYxIGlzIHRoZSBzYW1lIGFzICZBcHBseUZ1bmN0aW9uO1xuICAgIC8vIHJlZjogaHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jaGFyc2V0cy9yZWZfaHRtbF9lbnRpdGllc19hLmFzcFxuXG4gICAgdmFyIG9wZXJhdG9yID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtb1wiLCBbYnVpbGRNYXRoTUxfbWFrZVRleHQoXCJcXHUyMDYxXCIsIFwidGV4dFwiKV0pO1xuICAgIHJldHVybiBtYXRoTUxUcmVlLm5ld0RvY3VtZW50RnJhZ21lbnQoW2lkZW50aWZpZXIsIG9wZXJhdG9yXSk7XG4gIH1cbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL29yZGdyb3VwLmpzXG5cblxuXG5cbmRlZmluZUZ1bmN0aW9uQnVpbGRlcnMoe1xuICB0eXBlOiBcIm9yZGdyb3VwXCIsXG4gIGh0bWxCdWlsZGVyOiBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIGlmIChncm91cC5zZW1pc2ltcGxlKSB7XG4gICAgICByZXR1cm4gYnVpbGRDb21tb24ubWFrZUZyYWdtZW50KGJ1aWxkSFRNTF9idWlsZEV4cHJlc3Npb24oZ3JvdXAuYm9keSwgb3B0aW9ucywgZmFsc2UpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wibW9yZFwiXSwgYnVpbGRIVE1MX2J1aWxkRXhwcmVzc2lvbihncm91cC5ib2R5LCBvcHRpb25zLCB0cnVlKSwgb3B0aW9ucyk7XG4gIH0sXG4gIG1hdGhtbEJ1aWxkZXI6IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gYnVpbGRFeHByZXNzaW9uUm93KGdyb3VwLmJvZHksIG9wdGlvbnMpO1xuICB9XG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2Z1bmN0aW9ucy9vdmVybGluZS5qc1xuXG5cblxuXG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJvdmVybGluZVwiLFxuICBuYW1lczogW1wiXFxcXG92ZXJsaW5lXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDFcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmLCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYucGFyc2VyO1xuICAgIHZhciBib2R5ID0gYXJnc1swXTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJvdmVybGluZVwiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICBib2R5OiBib2R5XG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgLy8gT3ZlcmxpbmVzIGFyZSBoYW5kbGVkIGluIHRoZSBUZVhib29rIHBnIDQ0MywgUnVsZSA5LlxuICAgIC8vIEJ1aWxkIHRoZSBpbm5lciBncm91cCBpbiB0aGUgY3JhbXBlZCBzdHlsZS5cbiAgICB2YXIgaW5uZXJHcm91cCA9IGJ1aWxkSFRNTF9idWlsZEdyb3VwKGdyb3VwLmJvZHksIG9wdGlvbnMuaGF2aW5nQ3JhbXBlZFN0eWxlKCkpOyAvLyBDcmVhdGUgdGhlIGxpbmUgYWJvdmUgdGhlIGJvZHlcblxuICAgIHZhciBsaW5lID0gYnVpbGRDb21tb24ubWFrZUxpbmVTcGFuKFwib3ZlcmxpbmUtbGluZVwiLCBvcHRpb25zKTsgLy8gR2VuZXJhdGUgdGhlIHZsaXN0LCB3aXRoIHRoZSBhcHByb3ByaWF0ZSBrZXJuc1xuXG4gICAgdmFyIHZsaXN0ID0gYnVpbGRDb21tb24ubWFrZVZMaXN0KHtcbiAgICAgIHBvc2l0aW9uVHlwZTogXCJmaXJzdEJhc2VsaW5lXCIsXG4gICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IGlubmVyR3JvdXBcbiAgICAgIH0sIHtcbiAgICAgICAgdHlwZTogXCJrZXJuXCIsXG4gICAgICAgIHNpemU6IDMgKiBsaW5lLmhlaWdodFxuICAgICAgfSwge1xuICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgZWxlbTogbGluZVxuICAgICAgfSwge1xuICAgICAgICB0eXBlOiBcImtlcm5cIixcbiAgICAgICAgc2l6ZTogbGluZS5oZWlnaHRcbiAgICAgIH1dXG4gICAgfSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm1vcmRcIiwgXCJvdmVybGluZVwiXSwgW3ZsaXN0XSwgb3B0aW9ucyk7XG4gIH0sXG4gIG1hdGhtbEJ1aWxkZXI6IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3BlcmF0b3IgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1vXCIsIFtuZXcgbWF0aE1MVHJlZS5UZXh0Tm9kZShcIlxcdTIwM0VcIildKTtcbiAgICBvcGVyYXRvci5zZXRBdHRyaWJ1dGUoXCJzdHJldGNoeVwiLCBcInRydWVcIik7XG4gICAgdmFyIG5vZGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1vdmVyXCIsIFtidWlsZE1hdGhNTF9idWlsZEdyb3VwKGdyb3VwLmJvZHksIG9wdGlvbnMpLCBvcGVyYXRvcl0pO1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKFwiYWNjZW50XCIsIFwidHJ1ZVwiKTtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxufSk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMvcGhhbnRvbS5qc1xuXG5cblxuXG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJwaGFudG9tXCIsXG4gIG5hbWVzOiBbXCJcXFxccGhhbnRvbVwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxLFxuICAgIGFsbG93ZWRJblRleHQ6IHRydWVcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmLCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYucGFyc2VyO1xuICAgIHZhciBib2R5ID0gYXJnc1swXTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJwaGFudG9tXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIGJvZHk6IGRlZmluZUZ1bmN0aW9uX29yZGFyZ3VtZW50KGJvZHkpXG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIGVsZW1lbnRzID0gYnVpbGRIVE1MX2J1aWxkRXhwcmVzc2lvbihncm91cC5ib2R5LCBvcHRpb25zLndpdGhQaGFudG9tKCksIGZhbHNlKTsgLy8gXFxwaGFudG9tIGlzbid0IHN1cHBvc2VkIHRvIGFmZmVjdCB0aGUgZWxlbWVudHMgaXQgY29udGFpbnMuXG4gICAgLy8gU2VlIFwiY29sb3JcIiBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gICAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VGcmFnbWVudChlbGVtZW50cyk7XG4gIH0sXG4gIG1hdGhtbEJ1aWxkZXI6IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgaW5uZXIgPSBidWlsZE1hdGhNTF9idWlsZEV4cHJlc3Npb24oZ3JvdXAuYm9keSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibXBoYW50b21cIiwgaW5uZXIpO1xuICB9XG59KTtcbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJocGhhbnRvbVwiLFxuICBuYW1lczogW1wiXFxcXGhwaGFudG9tXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDEsXG4gICAgYWxsb3dlZEluVGV4dDogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYyLCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYyLnBhcnNlcjtcbiAgICB2YXIgYm9keSA9IGFyZ3NbMF07XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiaHBoYW50b21cIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgYm9keTogYm9keVxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBub2RlID0gYnVpbGRDb21tb24ubWFrZVNwYW4oW10sIFtidWlsZEhUTUxfYnVpbGRHcm91cChncm91cC5ib2R5LCBvcHRpb25zLndpdGhQaGFudG9tKCkpXSk7XG4gICAgbm9kZS5oZWlnaHQgPSAwO1xuICAgIG5vZGUuZGVwdGggPSAwO1xuXG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBub2RlLmNoaWxkcmVuW2ldLmhlaWdodCA9IDA7XG4gICAgICAgIG5vZGUuY2hpbGRyZW5baV0uZGVwdGggPSAwO1xuICAgICAgfVxuICAgIH0gLy8gU2VlIHNtYXNoIGZvciBjb21tZW50IHJlOiB1c2Ugb2YgbWFrZVZMaXN0XG5cblxuICAgIG5vZGUgPSBidWlsZENvbW1vbi5tYWtlVkxpc3Qoe1xuICAgICAgcG9zaXRpb25UeXBlOiBcImZpcnN0QmFzZWxpbmVcIixcbiAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgZWxlbTogbm9kZVxuICAgICAgfV1cbiAgICB9LCBvcHRpb25zKTsgLy8gRm9yIHNwYWNpbmcsIFRlWCB0cmVhdHMgXFxzbWFzaCBhcyBhIG1hdGggZ3JvdXAgKHNhbWUgc3BhY2luZyBhcyBvcmQpLlxuXG4gICAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm1vcmRcIl0sIFtub2RlXSwgb3B0aW9ucyk7XG4gIH0sXG4gIG1hdGhtbEJ1aWxkZXI6IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgaW5uZXIgPSBidWlsZE1hdGhNTF9idWlsZEV4cHJlc3Npb24oZGVmaW5lRnVuY3Rpb25fb3JkYXJndW1lbnQoZ3JvdXAuYm9keSksIG9wdGlvbnMpO1xuICAgIHZhciBwaGFudG9tID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtcGhhbnRvbVwiLCBpbm5lcik7XG4gICAgdmFyIG5vZGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1wYWRkZWRcIiwgW3BoYW50b21dKTtcbiAgICBub2RlLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCBcIjBweFwiKTtcbiAgICBub2RlLnNldEF0dHJpYnV0ZShcImRlcHRoXCIsIFwiMHB4XCIpO1xuICAgIHJldHVybiBub2RlO1xuICB9XG59KTtcbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJ2cGhhbnRvbVwiLFxuICBuYW1lczogW1wiXFxcXHZwaGFudG9tXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDEsXG4gICAgYWxsb3dlZEluVGV4dDogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYzLCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYzLnBhcnNlcjtcbiAgICB2YXIgYm9keSA9IGFyZ3NbMF07XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwidnBoYW50b21cIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgYm9keTogYm9keVxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBpbm5lciA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcImlubmVyXCJdLCBbYnVpbGRIVE1MX2J1aWxkR3JvdXAoZ3JvdXAuYm9keSwgb3B0aW9ucy53aXRoUGhhbnRvbSgpKV0pO1xuICAgIHZhciBmaXggPSBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJmaXhcIl0sIFtdKTtcbiAgICByZXR1cm4gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wibW9yZFwiLCBcInJsYXBcIl0sIFtpbm5lciwgZml4XSwgb3B0aW9ucyk7XG4gIH0sXG4gIG1hdGhtbEJ1aWxkZXI6IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgaW5uZXIgPSBidWlsZE1hdGhNTF9idWlsZEV4cHJlc3Npb24oZGVmaW5lRnVuY3Rpb25fb3JkYXJndW1lbnQoZ3JvdXAuYm9keSksIG9wdGlvbnMpO1xuICAgIHZhciBwaGFudG9tID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtcGhhbnRvbVwiLCBpbm5lcik7XG4gICAgdmFyIG5vZGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1wYWRkZWRcIiwgW3BoYW50b21dKTtcbiAgICBub2RlLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIFwiMHB4XCIpO1xuICAgIHJldHVybiBub2RlO1xuICB9XG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2Z1bmN0aW9ucy9zaXppbmcuanNcblxuXG5cblxuXG5mdW5jdGlvbiBzaXppbmdHcm91cCh2YWx1ZSwgb3B0aW9ucywgYmFzZU9wdGlvbnMpIHtcbiAgdmFyIGlubmVyID0gYnVpbGRIVE1MX2J1aWxkRXhwcmVzc2lvbih2YWx1ZSwgb3B0aW9ucywgZmFsc2UpO1xuICB2YXIgbXVsdGlwbGllciA9IG9wdGlvbnMuc2l6ZU11bHRpcGxpZXIgLyBiYXNlT3B0aW9ucy5zaXplTXVsdGlwbGllcjsgLy8gQWRkIHNpemUtcmVzZXR0aW5nIGNsYXNzZXMgdG8gdGhlIGlubmVyIGxpc3QgYW5kIHNldCBtYXhGb250U2l6ZVxuICAvLyBtYW51YWxseS4gSGFuZGxlIG5lc3RlZCBzaXplIGNoYW5nZXMuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbm5lci5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwb3MgPSBpbm5lcltpXS5jbGFzc2VzLmluZGV4T2YoXCJzaXppbmdcIik7XG5cbiAgICBpZiAocG9zIDwgMCkge1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoaW5uZXJbaV0uY2xhc3Nlcywgb3B0aW9ucy5zaXppbmdDbGFzc2VzKGJhc2VPcHRpb25zKSk7XG4gICAgfSBlbHNlIGlmIChpbm5lcltpXS5jbGFzc2VzW3BvcyArIDFdID09PSBcInJlc2V0LXNpemVcIiArIG9wdGlvbnMuc2l6ZSkge1xuICAgICAgLy8gVGhpcyBpcyBhIG5lc3RlZCBzaXplIGNoYW5nZTogZS5nLiwgaW5uZXJbaV0gaXMgdGhlIFwiYlwiIGluXG4gICAgICAvLyBgXFxIdWdlIGEgXFxzbWFsbCBiYC4gT3ZlcnJpZGUgdGhlIG9sZCBzaXplICh0aGUgYHJlc2V0LWAgY2xhc3MpXG4gICAgICAvLyBidXQgbm90IHRoZSBuZXcgc2l6ZS5cbiAgICAgIGlubmVyW2ldLmNsYXNzZXNbcG9zICsgMV0gPSBcInJlc2V0LXNpemVcIiArIGJhc2VPcHRpb25zLnNpemU7XG4gICAgfVxuXG4gICAgaW5uZXJbaV0uaGVpZ2h0ICo9IG11bHRpcGxpZXI7XG4gICAgaW5uZXJbaV0uZGVwdGggKj0gbXVsdGlwbGllcjtcbiAgfVxuXG4gIHJldHVybiBidWlsZENvbW1vbi5tYWtlRnJhZ21lbnQoaW5uZXIpO1xufVxudmFyIHNpemVGdW5jcyA9IFtcIlxcXFx0aW55XCIsIFwiXFxcXHNpeHB0c2l6ZVwiLCBcIlxcXFxzY3JpcHRzaXplXCIsIFwiXFxcXGZvb3Rub3Rlc2l6ZVwiLCBcIlxcXFxzbWFsbFwiLCBcIlxcXFxub3JtYWxzaXplXCIsIFwiXFxcXGxhcmdlXCIsIFwiXFxcXExhcmdlXCIsIFwiXFxcXExBUkdFXCIsIFwiXFxcXGh1Z2VcIiwgXCJcXFxcSHVnZVwiXTtcbnZhciBzaXppbmdfaHRtbEJ1aWxkZXIgPSBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAvLyBIYW5kbGUgc2l6aW5nIG9wZXJhdG9ycyBsaWtlIFxcSHVnZS4gUmVhbCBUZVggZG9lc24ndCBhY3R1YWxseSBhbGxvd1xuICAvLyB0aGVzZSBmdW5jdGlvbnMgaW5zaWRlIG9mIG1hdGggZXhwcmVzc2lvbnMsIHNvIHdlIGRvIHNvbWUgc3BlY2lhbFxuICAvLyBoYW5kbGluZy5cbiAgdmFyIG5ld09wdGlvbnMgPSBvcHRpb25zLmhhdmluZ1NpemUoZ3JvdXAuc2l6ZSk7XG4gIHJldHVybiBzaXppbmdHcm91cChncm91cC5ib2R5LCBuZXdPcHRpb25zLCBvcHRpb25zKTtcbn07XG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwic2l6aW5nXCIsXG4gIG5hbWVzOiBzaXplRnVuY3MsXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMCxcbiAgICBhbGxvd2VkSW5UZXh0OiB0cnVlXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZiwgYXJncykge1xuICAgIHZhciBicmVha09uVG9rZW5UZXh0ID0gX3JlZi5icmVha09uVG9rZW5UZXh0LFxuICAgICAgICBmdW5jTmFtZSA9IF9yZWYuZnVuY05hbWUsXG4gICAgICAgIHBhcnNlciA9IF9yZWYucGFyc2VyO1xuICAgIHZhciBib2R5ID0gcGFyc2VyLnBhcnNlRXhwcmVzc2lvbihmYWxzZSwgYnJlYWtPblRva2VuVGV4dCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwic2l6aW5nXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIC8vIEZpZ3VyZSBvdXQgd2hhdCBzaXplIHRvIHVzZSBiYXNlZCBvbiB0aGUgbGlzdCBvZiBmdW5jdGlvbnMgYWJvdmVcbiAgICAgIHNpemU6IHNpemVGdW5jcy5pbmRleE9mKGZ1bmNOYW1lKSArIDEsXG4gICAgICBib2R5OiBib2R5XG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IHNpemluZ19odG1sQnVpbGRlcixcbiAgbWF0aG1sQnVpbGRlcjogZnVuY3Rpb24gbWF0aG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBuZXdPcHRpb25zID0gb3B0aW9ucy5oYXZpbmdTaXplKGdyb3VwLnNpemUpO1xuICAgIHZhciBpbm5lciA9IGJ1aWxkTWF0aE1MX2J1aWxkRXhwcmVzc2lvbihncm91cC5ib2R5LCBuZXdPcHRpb25zKTtcbiAgICB2YXIgbm9kZSA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibXN0eWxlXCIsIGlubmVyKTsgLy8gVE9ETyhlbWlseSk6IFRoaXMgZG9lc24ndCBwcm9kdWNlIHRoZSBjb3JyZWN0IHNpemUgZm9yIG5lc3RlZCBzaXplXG4gICAgLy8gY2hhbmdlcywgYmVjYXVzZSB3ZSBkb24ndCBrZWVwIHN0YXRlIG9mIHdoYXQgc3R5bGUgd2UncmUgY3VycmVudGx5XG4gICAgLy8gaW4sIHNvIHdlIGNhbid0IHJlc2V0IHRoZSBzaXplIHRvIG5vcm1hbCBiZWZvcmUgY2hhbmdpbmcgaXQuICBOb3dcbiAgICAvLyB0aGF0IHdlJ3JlIHBhc3NpbmcgYW4gb3B0aW9ucyBwYXJhbWV0ZXIgd2Ugc2hvdWxkIGJlIGFibGUgdG8gZml4XG4gICAgLy8gdGhpcy5cblxuICAgIG5vZGUuc2V0QXR0cmlidXRlKFwibWF0aHNpemVcIiwgbmV3T3B0aW9ucy5zaXplTXVsdGlwbGllciArIFwiZW1cIik7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL3JhaXNlYm94LmpzXG5cblxuXG5cblxuXG4gLy8gQm94IG1hbmlwdWxhdGlvblxuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwicmFpc2Vib3hcIixcbiAgbmFtZXM6IFtcIlxcXFxyYWlzZWJveFwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAyLFxuICAgIGFyZ1R5cGVzOiBbXCJzaXplXCIsIFwidGV4dFwiXSxcbiAgICBhbGxvd2VkSW5UZXh0OiB0cnVlXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZiwgYXJncykge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmLnBhcnNlcjtcbiAgICB2YXIgYW1vdW50ID0gYXNzZXJ0Tm9kZVR5cGUoYXJnc1swXSwgXCJzaXplXCIpLnZhbHVlO1xuICAgIHZhciBib2R5ID0gYXJnc1sxXTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJyYWlzZWJveFwiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICBkeTogYW1vdW50LFxuICAgICAgYm9keTogYm9keVxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciB0ZXh0ID0ge1xuICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICBtb2RlOiBncm91cC5tb2RlLFxuICAgICAgYm9keTogZGVmaW5lRnVuY3Rpb25fb3JkYXJndW1lbnQoZ3JvdXAuYm9keSksXG4gICAgICBmb250OiBcIm1hdGhybVwiIC8vIHNpbXVsYXRlIFxcdGV4dHJtXG5cbiAgICB9O1xuICAgIHZhciBzaXplZFRleHQgPSB7XG4gICAgICB0eXBlOiBcInNpemluZ1wiLFxuICAgICAgbW9kZTogZ3JvdXAubW9kZSxcbiAgICAgIGJvZHk6IFt0ZXh0XSxcbiAgICAgIHNpemU6IDYgLy8gc2ltdWxhdGUgXFxub3JtYWxzaXplXG5cbiAgICB9O1xuICAgIHZhciBib2R5ID0gc2l6aW5nX2h0bWxCdWlsZGVyKHNpemVkVGV4dCwgb3B0aW9ucyk7XG4gICAgdmFyIGR5ID0gdW5pdHNfY2FsY3VsYXRlU2l6ZShncm91cC5keSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgICBwb3NpdGlvblR5cGU6IFwic2hpZnRcIixcbiAgICAgIHBvc2l0aW9uRGF0YTogLWR5LFxuICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICBlbGVtOiBib2R5XG4gICAgICB9XVxuICAgIH0sIG9wdGlvbnMpO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIG5vZGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1wYWRkZWRcIiwgW2J1aWxkTWF0aE1MX2J1aWxkR3JvdXAoZ3JvdXAuYm9keSwgb3B0aW9ucyldKTtcbiAgICB2YXIgZHkgPSBncm91cC5keS5udW1iZXIgKyBncm91cC5keS51bml0O1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKFwidm9mZnNldFwiLCBkeSk7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL3J1bGUuanNcblxuXG5cblxuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwicnVsZVwiLFxuICBuYW1lczogW1wiXFxcXHJ1bGVcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMixcbiAgICBudW1PcHRpb25hbEFyZ3M6IDEsXG4gICAgYXJnVHlwZXM6IFtcInNpemVcIiwgXCJzaXplXCIsIFwic2l6ZVwiXVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYsIGFyZ3MsIG9wdEFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZi5wYXJzZXI7XG4gICAgdmFyIHNoaWZ0ID0gb3B0QXJnc1swXTtcbiAgICB2YXIgd2lkdGggPSBhc3NlcnROb2RlVHlwZShhcmdzWzBdLCBcInNpemVcIik7XG4gICAgdmFyIGhlaWdodCA9IGFzc2VydE5vZGVUeXBlKGFyZ3NbMV0sIFwic2l6ZVwiKTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJydWxlXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIHNoaWZ0OiBzaGlmdCAmJiBhc3NlcnROb2RlVHlwZShzaGlmdCwgXCJzaXplXCIpLnZhbHVlLFxuICAgICAgd2lkdGg6IHdpZHRoLnZhbHVlLFxuICAgICAgaGVpZ2h0OiBoZWlnaHQudmFsdWVcbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogZnVuY3Rpb24gaHRtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICAvLyBNYWtlIGFuIGVtcHR5IHNwYW4gZm9yIHRoZSBydWxlXG4gICAgdmFyIHJ1bGUgPSBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJtb3JkXCIsIFwicnVsZVwiXSwgW10sIG9wdGlvbnMpOyAvLyBDYWxjdWxhdGUgdGhlIHNoaWZ0LCB3aWR0aCwgYW5kIGhlaWdodCBvZiB0aGUgcnVsZSwgYW5kIGFjY291bnQgZm9yIHVuaXRzXG5cbiAgICB2YXIgd2lkdGggPSB1bml0c19jYWxjdWxhdGVTaXplKGdyb3VwLndpZHRoLCBvcHRpb25zKTtcbiAgICB2YXIgaGVpZ2h0ID0gdW5pdHNfY2FsY3VsYXRlU2l6ZShncm91cC5oZWlnaHQsIG9wdGlvbnMpO1xuICAgIHZhciBzaGlmdCA9IGdyb3VwLnNoaWZ0ID8gdW5pdHNfY2FsY3VsYXRlU2l6ZShncm91cC5zaGlmdCwgb3B0aW9ucykgOiAwOyAvLyBTdHlsZSB0aGUgcnVsZSB0byB0aGUgcmlnaHQgc2l6ZVxuXG4gICAgcnVsZS5zdHlsZS5ib3JkZXJSaWdodFdpZHRoID0gd2lkdGggKyBcImVtXCI7XG4gICAgcnVsZS5zdHlsZS5ib3JkZXJUb3BXaWR0aCA9IGhlaWdodCArIFwiZW1cIjtcbiAgICBydWxlLnN0eWxlLmJvdHRvbSA9IHNoaWZ0ICsgXCJlbVwiOyAvLyBSZWNvcmQgdGhlIGhlaWdodCBhbmQgd2lkdGhcblxuICAgIHJ1bGUud2lkdGggPSB3aWR0aDtcbiAgICBydWxlLmhlaWdodCA9IGhlaWdodCArIHNoaWZ0O1xuICAgIHJ1bGUuZGVwdGggPSAtc2hpZnQ7IC8vIEZvbnQgc2l6ZSBpcyB0aGUgbnVtYmVyIGxhcmdlIGVub3VnaCB0aGF0IHRoZSBicm93c2VyIHdpbGxcbiAgICAvLyByZXNlcnZlIGF0IGxlYXN0IGBhYnNIZWlnaHRgIHNwYWNlIGFib3ZlIHRoZSBiYXNlbGluZS5cbiAgICAvLyBUaGUgMS4xMjUgZmFjdG9yIHdhcyBlbXBpcmljYWxseSBkZXRlcm1pbmVkXG5cbiAgICBydWxlLm1heEZvbnRTaXplID0gaGVpZ2h0ICogMS4xMjUgKiBvcHRpb25zLnNpemVNdWx0aXBsaWVyO1xuICAgIHJldHVybiBydWxlO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIHdpZHRoID0gdW5pdHNfY2FsY3VsYXRlU2l6ZShncm91cC53aWR0aCwgb3B0aW9ucyk7XG4gICAgdmFyIGhlaWdodCA9IHVuaXRzX2NhbGN1bGF0ZVNpemUoZ3JvdXAuaGVpZ2h0LCBvcHRpb25zKTtcbiAgICB2YXIgc2hpZnQgPSBncm91cC5zaGlmdCA/IHVuaXRzX2NhbGN1bGF0ZVNpemUoZ3JvdXAuc2hpZnQsIG9wdGlvbnMpIDogMDtcbiAgICB2YXIgY29sb3IgPSBvcHRpb25zLmNvbG9yICYmIG9wdGlvbnMuZ2V0Q29sb3IoKSB8fCBcImJsYWNrXCI7XG4gICAgdmFyIHJ1bGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1zcGFjZVwiKTtcbiAgICBydWxlLnNldEF0dHJpYnV0ZShcIm1hdGhiYWNrZ3JvdW5kXCIsIGNvbG9yKTtcbiAgICBydWxlLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIHdpZHRoICsgXCJlbVwiKTtcbiAgICBydWxlLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCBoZWlnaHQgKyBcImVtXCIpO1xuICAgIHZhciB3cmFwcGVyID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtcGFkZGVkXCIsIFtydWxlXSk7XG5cbiAgICBpZiAoc2hpZnQgPj0gMCkge1xuICAgICAgd3JhcHBlci5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgXCIrXCIgKyBzaGlmdCArIFwiZW1cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdyYXBwZXIuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIHNoaWZ0ICsgXCJlbVwiKTtcbiAgICAgIHdyYXBwZXIuc2V0QXR0cmlidXRlKFwiZGVwdGhcIiwgXCIrXCIgKyAtc2hpZnQgKyBcImVtXCIpO1xuICAgIH1cblxuICAgIHdyYXBwZXIuc2V0QXR0cmlidXRlKFwidm9mZnNldFwiLCBzaGlmdCArIFwiZW1cIik7XG4gICAgcmV0dXJuIHdyYXBwZXI7XG4gIH1cbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL3NtYXNoLmpzXG4vLyBzbWFzaCwgd2l0aCBvcHRpb25hbCBbdGJdLCBhcyBpbiBBTVNcblxuXG5cblxuXG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJzbWFzaFwiLFxuICBuYW1lczogW1wiXFxcXHNtYXNoXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDEsXG4gICAgbnVtT3B0aW9uYWxBcmdzOiAxLFxuICAgIGFsbG93ZWRJblRleHQ6IHRydWVcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmLCBhcmdzLCBvcHRBcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYucGFyc2VyO1xuICAgIHZhciBzbWFzaEhlaWdodCA9IGZhbHNlO1xuICAgIHZhciBzbWFzaERlcHRoID0gZmFsc2U7XG4gICAgdmFyIHRiQXJnID0gb3B0QXJnc1swXSAmJiBhc3NlcnROb2RlVHlwZShvcHRBcmdzWzBdLCBcIm9yZGdyb3VwXCIpO1xuXG4gICAgaWYgKHRiQXJnKSB7XG4gICAgICAvLyBPcHRpb25hbCBbdGJdIGFyZ3VtZW50IGlzIGVuZ2FnZWQuXG4gICAgICAvLyByZWY6IGFtc21hdGg6IFxccmVuZXdjb21tYW5ke1xcc21hc2h9WzFdW3RiXXslXG4gICAgICAvLyAgICAgICAgICAgICAgIGRlZlxcbWJAdHtcXGh0fVxcZGVmXFxtYkBie1xcZHB9XFxkZWZcXG1iQHRie1xcaHRcXHpAXFx6QFxcZHB9JVxuICAgICAgdmFyIGxldHRlciA9IFwiXCI7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGJBcmcuYm9keS5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgbm9kZSA9IHRiQXJnLmJvZHlbaV07IC8vICRGbG93Rml4TWU6IE5vdCBldmVyeSBub2RlIHR5cGUgaGFzIGEgYHRleHRgIHByb3BlcnR5LlxuXG4gICAgICAgIGxldHRlciA9IG5vZGUudGV4dDtcblxuICAgICAgICBpZiAobGV0dGVyID09PSBcInRcIikge1xuICAgICAgICAgIHNtYXNoSGVpZ2h0ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChsZXR0ZXIgPT09IFwiYlwiKSB7XG4gICAgICAgICAgc21hc2hEZXB0aCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc21hc2hIZWlnaHQgPSBmYWxzZTtcbiAgICAgICAgICBzbWFzaERlcHRoID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc21hc2hIZWlnaHQgPSB0cnVlO1xuICAgICAgc21hc2hEZXB0aCA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGJvZHkgPSBhcmdzWzBdO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcInNtYXNoXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIGJvZHk6IGJvZHksXG4gICAgICBzbWFzaEhlaWdodDogc21hc2hIZWlnaHQsXG4gICAgICBzbWFzaERlcHRoOiBzbWFzaERlcHRoXG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIG5vZGUgPSBidWlsZENvbW1vbi5tYWtlU3BhbihbXSwgW2J1aWxkSFRNTF9idWlsZEdyb3VwKGdyb3VwLmJvZHksIG9wdGlvbnMpXSk7XG5cbiAgICBpZiAoIWdyb3VwLnNtYXNoSGVpZ2h0ICYmICFncm91cC5zbWFzaERlcHRoKSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICBpZiAoZ3JvdXAuc21hc2hIZWlnaHQpIHtcbiAgICAgIG5vZGUuaGVpZ2h0ID0gMDsgLy8gSW4gb3JkZXIgdG8gaW5mbHVlbmNlIG1ha2VWTGlzdCwgd2UgaGF2ZSB0byByZXNldCB0aGUgY2hpbGRyZW4uXG5cbiAgICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIG5vZGUuY2hpbGRyZW5baV0uaGVpZ2h0ID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChncm91cC5zbWFzaERlcHRoKSB7XG4gICAgICBub2RlLmRlcHRoID0gMDtcblxuICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgbm9kZS5jaGlsZHJlbltfaV0uZGVwdGggPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBBdCB0aGlzIHBvaW50LCB3ZSd2ZSByZXNldCB0aGUgVGVYLWxpa2UgaGVpZ2h0IGFuZCBkZXB0aCB2YWx1ZXMuXG4gICAgLy8gQnV0IHRoZSBzcGFuIHN0aWxsIGhhcyBhbiBIVE1MIGxpbmUgaGVpZ2h0LlxuICAgIC8vIG1ha2VWTGlzdCBhcHBsaWVzIFwiZGlzcGxheTogdGFibGUtY2VsbFwiLCB3aGljaCBwcmV2ZW50cyB0aGUgYnJvd3NlclxuICAgIC8vIGZyb20gYWN0aW5nIG9uIHRoYXQgbGluZSBoZWlnaHQuIFNvIHdlJ2xsIGNhbGwgbWFrZVZMaXN0IG5vdy5cblxuXG4gICAgdmFyIHNtYXNoZWROb2RlID0gYnVpbGRDb21tb24ubWFrZVZMaXN0KHtcbiAgICAgIHBvc2l0aW9uVHlwZTogXCJmaXJzdEJhc2VsaW5lXCIsXG4gICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IG5vZGVcbiAgICAgIH1dXG4gICAgfSwgb3B0aW9ucyk7IC8vIEZvciBzcGFjaW5nLCBUZVggdHJlYXRzIFxcaHBoYW50b20gYXMgYSBtYXRoIGdyb3VwIChzYW1lIHNwYWNpbmcgYXMgb3JkKS5cblxuICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJtb3JkXCJdLCBbc21hc2hlZE5vZGVdLCBvcHRpb25zKTtcbiAgfSxcbiAgbWF0aG1sQnVpbGRlcjogZnVuY3Rpb24gbWF0aG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBub2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtcGFkZGVkXCIsIFtidWlsZE1hdGhNTF9idWlsZEdyb3VwKGdyb3VwLmJvZHksIG9wdGlvbnMpXSk7XG5cbiAgICBpZiAoZ3JvdXAuc21hc2hIZWlnaHQpIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIFwiMHB4XCIpO1xuICAgIH1cblxuICAgIGlmIChncm91cC5zbWFzaERlcHRoKSB7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShcImRlcHRoXCIsIFwiMHB4XCIpO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9XG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2Z1bmN0aW9ucy9zcXJ0LmpzXG5cblxuXG5cblxuXG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJzcXJ0XCIsXG4gIG5hbWVzOiBbXCJcXFxcc3FydFwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxLFxuICAgIG51bU9wdGlvbmFsQXJnczogMVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYsIGFyZ3MsIG9wdEFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZi5wYXJzZXI7XG4gICAgdmFyIGluZGV4ID0gb3B0QXJnc1swXTtcbiAgICB2YXIgYm9keSA9IGFyZ3NbMF07XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwic3FydFwiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICBib2R5OiBib2R5LFxuICAgICAgaW5kZXg6IGluZGV4XG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgLy8gU3F1YXJlIHJvb3RzIGFyZSBoYW5kbGVkIGluIHRoZSBUZVhib29rIHBnLiA0NDMsIFJ1bGUgMTEuXG4gICAgLy8gRmlyc3QsIHdlIGRvIHRoZSBzYW1lIHN0ZXBzIGFzIGluIG92ZXJsaW5lIHRvIGJ1aWxkIHRoZSBpbm5lciBncm91cFxuICAgIC8vIGFuZCBsaW5lXG4gICAgdmFyIGlubmVyID0gYnVpbGRIVE1MX2J1aWxkR3JvdXAoZ3JvdXAuYm9keSwgb3B0aW9ucy5oYXZpbmdDcmFtcGVkU3R5bGUoKSk7XG5cbiAgICBpZiAoaW5uZXIuaGVpZ2h0ID09PSAwKSB7XG4gICAgICAvLyBSZW5kZXIgYSBzbWFsbCBzdXJkLlxuICAgICAgaW5uZXIuaGVpZ2h0ID0gb3B0aW9ucy5mb250TWV0cmljcygpLnhIZWlnaHQ7XG4gICAgfSAvLyBTb21lIGdyb3VwcyBjYW4gcmV0dXJuIGRvY3VtZW50IGZyYWdtZW50cy4gIEhhbmRsZSB0aG9zZSBieSB3cmFwcGluZ1xuICAgIC8vIHRoZW0gaW4gYSBzcGFuLlxuXG5cbiAgICBpbm5lciA9IGJ1aWxkQ29tbW9uLndyYXBGcmFnbWVudChpbm5lciwgb3B0aW9ucyk7IC8vIENhbGN1bGF0ZSB0aGUgbWluaW11bSBzaXplIGZvciB0aGUgXFxzdXJkIGRlbGltaXRlclxuXG4gICAgdmFyIG1ldHJpY3MgPSBvcHRpb25zLmZvbnRNZXRyaWNzKCk7XG4gICAgdmFyIHRoZXRhID0gbWV0cmljcy5kZWZhdWx0UnVsZVRoaWNrbmVzcztcbiAgICB2YXIgcGhpID0gdGhldGE7XG5cbiAgICBpZiAob3B0aW9ucy5zdHlsZS5pZCA8IHNyY19TdHlsZS5URVhULmlkKSB7XG4gICAgICBwaGkgPSBvcHRpb25zLmZvbnRNZXRyaWNzKCkueEhlaWdodDtcbiAgICB9IC8vIENhbGN1bGF0ZSB0aGUgY2xlYXJhbmNlIGJldHdlZW4gdGhlIGJvZHkgYW5kIGxpbmVcblxuXG4gICAgdmFyIGxpbmVDbGVhcmFuY2UgPSB0aGV0YSArIHBoaSAvIDQ7XG4gICAgdmFyIG1pbkRlbGltaXRlckhlaWdodCA9IGlubmVyLmhlaWdodCArIGlubmVyLmRlcHRoICsgbGluZUNsZWFyYW5jZSArIHRoZXRhOyAvLyBDcmVhdGUgYSBzcXJ0IFNWRyBvZiB0aGUgcmVxdWlyZWQgbWluaW11bSBzaXplXG5cbiAgICB2YXIgX2RlbGltaXRlciRzcXJ0SW1hZ2UgPSBkZWxpbWl0ZXIuc3FydEltYWdlKG1pbkRlbGltaXRlckhlaWdodCwgb3B0aW9ucyksXG4gICAgICAgIGltZyA9IF9kZWxpbWl0ZXIkc3FydEltYWdlLnNwYW4sXG4gICAgICAgIHJ1bGVXaWR0aCA9IF9kZWxpbWl0ZXIkc3FydEltYWdlLnJ1bGVXaWR0aCxcbiAgICAgICAgYWR2YW5jZVdpZHRoID0gX2RlbGltaXRlciRzcXJ0SW1hZ2UuYWR2YW5jZVdpZHRoO1xuXG4gICAgdmFyIGRlbGltRGVwdGggPSBpbWcuaGVpZ2h0IC0gcnVsZVdpZHRoOyAvLyBBZGp1c3QgdGhlIGNsZWFyYW5jZSBiYXNlZCBvbiB0aGUgZGVsaW1pdGVyIHNpemVcblxuICAgIGlmIChkZWxpbURlcHRoID4gaW5uZXIuaGVpZ2h0ICsgaW5uZXIuZGVwdGggKyBsaW5lQ2xlYXJhbmNlKSB7XG4gICAgICBsaW5lQ2xlYXJhbmNlID0gKGxpbmVDbGVhcmFuY2UgKyBkZWxpbURlcHRoIC0gaW5uZXIuaGVpZ2h0IC0gaW5uZXIuZGVwdGgpIC8gMjtcbiAgICB9IC8vIFNoaWZ0IHRoZSBzcXJ0IGltYWdlXG5cblxuICAgIHZhciBpbWdTaGlmdCA9IGltZy5oZWlnaHQgLSBpbm5lci5oZWlnaHQgLSBsaW5lQ2xlYXJhbmNlIC0gcnVsZVdpZHRoO1xuICAgIGlubmVyLnN0eWxlLnBhZGRpbmdMZWZ0ID0gYWR2YW5jZVdpZHRoICsgXCJlbVwiOyAvLyBPdmVybGF5IHRoZSBpbWFnZSBhbmQgdGhlIGFyZ3VtZW50LlxuXG4gICAgdmFyIGJvZHkgPSBidWlsZENvbW1vbi5tYWtlVkxpc3Qoe1xuICAgICAgcG9zaXRpb25UeXBlOiBcImZpcnN0QmFzZWxpbmVcIixcbiAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgZWxlbTogaW5uZXIsXG4gICAgICAgIHdyYXBwZXJDbGFzc2VzOiBbXCJzdmctYWxpZ25cIl1cbiAgICAgIH0sIHtcbiAgICAgICAgdHlwZTogXCJrZXJuXCIsXG4gICAgICAgIHNpemU6IC0oaW5uZXIuaGVpZ2h0ICsgaW1nU2hpZnQpXG4gICAgICB9LCB7XG4gICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICBlbGVtOiBpbWdcbiAgICAgIH0sIHtcbiAgICAgICAgdHlwZTogXCJrZXJuXCIsXG4gICAgICAgIHNpemU6IHJ1bGVXaWR0aFxuICAgICAgfV1cbiAgICB9LCBvcHRpb25zKTtcblxuICAgIGlmICghZ3JvdXAuaW5kZXgpIHtcbiAgICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJtb3JkXCIsIFwic3FydFwiXSwgW2JvZHldLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSGFuZGxlIHRoZSBvcHRpb25hbCByb290IGluZGV4XG4gICAgICAvLyBUaGUgaW5kZXggaXMgYWx3YXlzIGluIHNjcmlwdHNjcmlwdCBzdHlsZVxuICAgICAgdmFyIG5ld09wdGlvbnMgPSBvcHRpb25zLmhhdmluZ1N0eWxlKHNyY19TdHlsZS5TQ1JJUFRTQ1JJUFQpO1xuICAgICAgdmFyIHJvb3RtID0gYnVpbGRIVE1MX2J1aWxkR3JvdXAoZ3JvdXAuaW5kZXgsIG5ld09wdGlvbnMsIG9wdGlvbnMpOyAvLyBUaGUgYW1vdW50IHRoZSBpbmRleCBpcyBzaGlmdGVkIGJ5LiBUaGlzIGlzIHRha2VuIGZyb20gdGhlIFRlWFxuICAgICAgLy8gc291cmNlLCBpbiB0aGUgZGVmaW5pdGlvbiBvZiBgXFxyQEB0YC5cblxuICAgICAgdmFyIHRvU2hpZnQgPSAwLjYgKiAoYm9keS5oZWlnaHQgLSBib2R5LmRlcHRoKTsgLy8gQnVpbGQgYSBWTGlzdCB3aXRoIHRoZSBzdXBlcnNjcmlwdCBzaGlmdGVkIHVwIGNvcnJlY3RseVxuXG4gICAgICB2YXIgcm9vdFZMaXN0ID0gYnVpbGRDb21tb24ubWFrZVZMaXN0KHtcbiAgICAgICAgcG9zaXRpb25UeXBlOiBcInNoaWZ0XCIsXG4gICAgICAgIHBvc2l0aW9uRGF0YTogLXRvU2hpZnQsXG4gICAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICAgIGVsZW06IHJvb3RtXG4gICAgICAgIH1dXG4gICAgICB9LCBvcHRpb25zKTsgLy8gQWRkIGEgY2xhc3Mgc3Vycm91bmRpbmcgaXQgc28gd2UgY2FuIGFkZCBvbiB0aGUgYXBwcm9wcmlhdGVcbiAgICAgIC8vIGtlcm5pbmdcblxuICAgICAgdmFyIHJvb3RWTGlzdFdyYXAgPSBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJyb290XCJdLCBbcm9vdFZMaXN0XSk7XG4gICAgICByZXR1cm4gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wibW9yZFwiLCBcInNxcnRcIl0sIFtyb290Vkxpc3RXcmFwLCBib2R5XSwgb3B0aW9ucyk7XG4gICAgfVxuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIGJvZHkgPSBncm91cC5ib2R5LFxuICAgICAgICBpbmRleCA9IGdyb3VwLmluZGV4O1xuICAgIHJldHVybiBpbmRleCA/IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibXJvb3RcIiwgW2J1aWxkTWF0aE1MX2J1aWxkR3JvdXAoYm9keSwgb3B0aW9ucyksIGJ1aWxkTWF0aE1MX2J1aWxkR3JvdXAoaW5kZXgsIG9wdGlvbnMpXSkgOiBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1zcXJ0XCIsIFtidWlsZE1hdGhNTF9idWlsZEdyb3VwKGJvZHksIG9wdGlvbnMpXSk7XG4gIH1cbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL3N0eWxpbmcuanNcblxuXG5cblxuXG52YXIgc3R5bGluZ19zdHlsZU1hcCA9IHtcbiAgXCJkaXNwbGF5XCI6IHNyY19TdHlsZS5ESVNQTEFZLFxuICBcInRleHRcIjogc3JjX1N0eWxlLlRFWFQsXG4gIFwic2NyaXB0XCI6IHNyY19TdHlsZS5TQ1JJUFQsXG4gIFwic2NyaXB0c2NyaXB0XCI6IHNyY19TdHlsZS5TQ1JJUFRTQ1JJUFRcbn07XG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwic3R5bGluZ1wiLFxuICBuYW1lczogW1wiXFxcXGRpc3BsYXlzdHlsZVwiLCBcIlxcXFx0ZXh0c3R5bGVcIiwgXCJcXFxcc2NyaXB0c3R5bGVcIiwgXCJcXFxcc2NyaXB0c2NyaXB0c3R5bGVcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMCxcbiAgICBhbGxvd2VkSW5UZXh0OiB0cnVlXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZiwgYXJncykge1xuICAgIHZhciBicmVha09uVG9rZW5UZXh0ID0gX3JlZi5icmVha09uVG9rZW5UZXh0LFxuICAgICAgICBmdW5jTmFtZSA9IF9yZWYuZnVuY05hbWUsXG4gICAgICAgIHBhcnNlciA9IF9yZWYucGFyc2VyO1xuICAgIC8vIHBhcnNlIG91dCB0aGUgaW1wbGljaXQgYm9keVxuICAgIHZhciBib2R5ID0gcGFyc2VyLnBhcnNlRXhwcmVzc2lvbih0cnVlLCBicmVha09uVG9rZW5UZXh0KTsgLy8gVE9ETzogUmVmYWN0b3IgdG8gYXZvaWQgZHVwbGljYXRpbmcgc3R5bGVNYXAgaW4gbXVsdGlwbGUgcGxhY2VzIChlLmcuXG4gICAgLy8gaGVyZSBhbmQgaW4gYnVpbGRIVE1MIGFuZCBkZS1kdXBlIHRoZSBlbnVtZXJhdGlvbiBvZiBhbGwgdGhlIHN0eWxlcykuXG4gICAgLy8gJEZsb3dGaXhNZTogVGhlIG5hbWVzIGFib3ZlIGV4YWN0bHkgbWF0Y2ggdGhlIHN0eWxlcy5cblxuICAgIHZhciBzdHlsZSA9IGZ1bmNOYW1lLnNsaWNlKDEsIGZ1bmNOYW1lLmxlbmd0aCAtIDUpO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcInN0eWxpbmdcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgLy8gRmlndXJlIG91dCB3aGF0IHN0eWxlIHRvIHVzZSBieSBwdWxsaW5nIG91dCB0aGUgc3R5bGUgZnJvbVxuICAgICAgLy8gdGhlIGZ1bmN0aW9uIG5hbWVcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIGJvZHk6IGJvZHlcbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogZnVuY3Rpb24gaHRtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICAvLyBTdHlsZSBjaGFuZ2VzIGFyZSBoYW5kbGVkIGluIHRoZSBUZVhib29rIG9uIHBnLiA0NDIsIFJ1bGUgMy5cbiAgICB2YXIgbmV3U3R5bGUgPSBzdHlsaW5nX3N0eWxlTWFwW2dyb3VwLnN0eWxlXTtcbiAgICB2YXIgbmV3T3B0aW9ucyA9IG9wdGlvbnMuaGF2aW5nU3R5bGUobmV3U3R5bGUpLndpdGhGb250KCcnKTtcbiAgICByZXR1cm4gc2l6aW5nR3JvdXAoZ3JvdXAuYm9keSwgbmV3T3B0aW9ucywgb3B0aW9ucyk7XG4gIH0sXG4gIG1hdGhtbEJ1aWxkZXI6IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICAvLyBGaWd1cmUgb3V0IHdoYXQgc3R5bGUgd2UncmUgY2hhbmdpbmcgdG8uXG4gICAgLy8gVE9ETyhrZXZpbmIpOiBkZWR1cGUgdGhpcyB3aXRoIGJ1aWxkSFRNTC5qc1xuICAgIC8vIFRoaXMgd2lsbCBiZSBlYXNpZXIgb2YgaGFuZGxpbmcgb2Ygc3R5bGluZyBub2RlcyBpcyBpbiB0aGUgc2FtZSBmaWxlLlxuICAgIHZhciBzdHlsZU1hcCA9IHtcbiAgICAgIFwiZGlzcGxheVwiOiBzcmNfU3R5bGUuRElTUExBWSxcbiAgICAgIFwidGV4dFwiOiBzcmNfU3R5bGUuVEVYVCxcbiAgICAgIFwic2NyaXB0XCI6IHNyY19TdHlsZS5TQ1JJUFQsXG4gICAgICBcInNjcmlwdHNjcmlwdFwiOiBzcmNfU3R5bGUuU0NSSVBUU0NSSVBUXG4gICAgfTtcbiAgICB2YXIgbmV3U3R5bGUgPSBzdHlsZU1hcFtncm91cC5zdHlsZV07XG4gICAgdmFyIG5ld09wdGlvbnMgPSBvcHRpb25zLmhhdmluZ1N0eWxlKG5ld1N0eWxlKTtcbiAgICB2YXIgaW5uZXIgPSBidWlsZE1hdGhNTF9idWlsZEV4cHJlc3Npb24oZ3JvdXAuYm9keSwgbmV3T3B0aW9ucyk7XG4gICAgdmFyIG5vZGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1zdHlsZVwiLCBpbm5lcik7XG4gICAgdmFyIHN0eWxlQXR0cmlidXRlcyA9IHtcbiAgICAgIFwiZGlzcGxheVwiOiBbXCIwXCIsIFwidHJ1ZVwiXSxcbiAgICAgIFwidGV4dFwiOiBbXCIwXCIsIFwiZmFsc2VcIl0sXG4gICAgICBcInNjcmlwdFwiOiBbXCIxXCIsIFwiZmFsc2VcIl0sXG4gICAgICBcInNjcmlwdHNjcmlwdFwiOiBbXCIyXCIsIFwiZmFsc2VcIl1cbiAgICB9O1xuICAgIHZhciBhdHRyID0gc3R5bGVBdHRyaWJ1dGVzW2dyb3VwLnN0eWxlXTtcbiAgICBub2RlLnNldEF0dHJpYnV0ZShcInNjcmlwdGxldmVsXCIsIGF0dHJbMF0pO1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKFwiZGlzcGxheXN0eWxlXCIsIGF0dHJbMV0pO1xuICAgIHJldHVybiBub2RlO1xuICB9XG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2Z1bmN0aW9ucy9zdXBzdWIuanNcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuLyoqXG4gKiBTb21ldGltZXMsIGdyb3VwcyBwZXJmb3JtIHNwZWNpYWwgcnVsZXMgd2hlbiB0aGV5IGhhdmUgc3VwZXJzY3JpcHRzIG9yXG4gKiBzdWJzY3JpcHRzIGF0dGFjaGVkIHRvIHRoZW0uIFRoaXMgZnVuY3Rpb24gbGV0cyB0aGUgYHN1cHN1YmAgZ3JvdXAga25vdyB0aGF0XG4gKiBTb21ldGltZXMsIGdyb3VwcyBwZXJmb3JtIHNwZWNpYWwgcnVsZXMgd2hlbiB0aGV5IGhhdmUgc3VwZXJzY3JpcHRzIG9yXG4gKiBpdHMgaW5uZXIgZWxlbWVudCBzaG91bGQgaGFuZGxlIHRoZSBzdXBlcnNjcmlwdHMgYW5kIHN1YnNjcmlwdHMgaW5zdGVhZCBvZlxuICogaGFuZGxpbmcgdGhlbSBpdHNlbGYuXG4gKi9cbnZhciBzdXBzdWJfaHRtbEJ1aWxkZXJEZWxlZ2F0ZSA9IGZ1bmN0aW9uIGh0bWxCdWlsZGVyRGVsZWdhdGUoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgdmFyIGJhc2UgPSBncm91cC5iYXNlO1xuXG4gIGlmICghYmFzZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9IGVsc2UgaWYgKGJhc2UudHlwZSA9PT0gXCJvcFwiKSB7XG4gICAgLy8gT3BlcmF0b3JzIGhhbmRsZSBzdXBzdWJzIGRpZmZlcmVudGx5IHdoZW4gdGhleSBoYXZlIGxpbWl0c1xuICAgIC8vIChlLmcuIGBcXGRpc3BsYXlzdHlsZVxcc3VtXzJeM2ApXG4gICAgdmFyIGRlbGVnYXRlID0gYmFzZS5saW1pdHMgJiYgKG9wdGlvbnMuc3R5bGUuc2l6ZSA9PT0gc3JjX1N0eWxlLkRJU1BMQVkuc2l6ZSB8fCBiYXNlLmFsd2F5c0hhbmRsZVN1cFN1Yik7XG4gICAgcmV0dXJuIGRlbGVnYXRlID8gb3BfaHRtbEJ1aWxkZXIgOiBudWxsO1xuICB9IGVsc2UgaWYgKGJhc2UudHlwZSA9PT0gXCJhY2NlbnRcIikge1xuICAgIHJldHVybiB1dGlscy5pc0NoYXJhY3RlckJveChiYXNlLmJhc2UpID8gYWNjZW50X2h0bWxCdWlsZGVyIDogbnVsbDtcbiAgfSBlbHNlIGlmIChiYXNlLnR5cGUgPT09IFwiaG9yaXpCcmFjZVwiKSB7XG4gICAgdmFyIGlzU3VwID0gIWdyb3VwLnN1YjtcbiAgICByZXR1cm4gaXNTdXAgPT09IGJhc2UuaXNPdmVyID8gaG9yaXpCcmFjZV9odG1sQnVpbGRlciA6IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07IC8vIFN1cGVyIHNjcmlwdHMgYW5kIHN1YnNjcmlwdHMsIHdob3NlIHByZWNpc2UgcGxhY2VtZW50IGNhbiBkZXBlbmQgb24gb3RoZXJcbi8vIGZ1bmN0aW9ucyB0aGF0IHByZWNlZGUgdGhlbS5cblxuXG5kZWZpbmVGdW5jdGlvbkJ1aWxkZXJzKHtcbiAgdHlwZTogXCJzdXBzdWJcIixcbiAgaHRtbEJ1aWxkZXI6IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgLy8gU3VwZXJzY3JpcHQgYW5kIHN1YnNjcmlwdHMgYXJlIGhhbmRsZWQgaW4gdGhlIFRlWGJvb2sgb24gcGFnZVxuICAgIC8vIDQ0NS00NDYsIHJ1bGVzIDE4KGEtZikuXG4gICAgLy8gSGVyZSBpcyB3aGVyZSB3ZSBkZWZlciB0byB0aGUgaW5uZXIgZ3JvdXAgaWYgaXQgc2hvdWxkIGhhbmRsZVxuICAgIC8vIHN1cGVyc2NyaXB0cyBhbmQgc3Vic2NyaXB0cyBpdHNlbGYuXG4gICAgdmFyIGJ1aWxkZXJEZWxlZ2F0ZSA9IHN1cHN1Yl9odG1sQnVpbGRlckRlbGVnYXRlKGdyb3VwLCBvcHRpb25zKTtcblxuICAgIGlmIChidWlsZGVyRGVsZWdhdGUpIHtcbiAgICAgIHJldHVybiBidWlsZGVyRGVsZWdhdGUoZ3JvdXAsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZUJhc2UgPSBncm91cC5iYXNlLFxuICAgICAgICB2YWx1ZVN1cCA9IGdyb3VwLnN1cCxcbiAgICAgICAgdmFsdWVTdWIgPSBncm91cC5zdWI7XG4gICAgdmFyIGJhc2UgPSBidWlsZEhUTUxfYnVpbGRHcm91cCh2YWx1ZUJhc2UsIG9wdGlvbnMpO1xuICAgIHZhciBzdXBtO1xuICAgIHZhciBzdWJtO1xuICAgIHZhciBtZXRyaWNzID0gb3B0aW9ucy5mb250TWV0cmljcygpOyAvLyBSdWxlIDE4YVxuXG4gICAgdmFyIHN1cFNoaWZ0ID0gMDtcbiAgICB2YXIgc3ViU2hpZnQgPSAwO1xuICAgIHZhciBpc0NoYXJhY3RlckJveCA9IHZhbHVlQmFzZSAmJiB1dGlscy5pc0NoYXJhY3RlckJveCh2YWx1ZUJhc2UpO1xuXG4gICAgaWYgKHZhbHVlU3VwKSB7XG4gICAgICB2YXIgbmV3T3B0aW9ucyA9IG9wdGlvbnMuaGF2aW5nU3R5bGUob3B0aW9ucy5zdHlsZS5zdXAoKSk7XG4gICAgICBzdXBtID0gYnVpbGRIVE1MX2J1aWxkR3JvdXAodmFsdWVTdXAsIG5ld09wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICBpZiAoIWlzQ2hhcmFjdGVyQm94KSB7XG4gICAgICAgIHN1cFNoaWZ0ID0gYmFzZS5oZWlnaHQgLSBuZXdPcHRpb25zLmZvbnRNZXRyaWNzKCkuc3VwRHJvcCAqIG5ld09wdGlvbnMuc2l6ZU11bHRpcGxpZXIgLyBvcHRpb25zLnNpemVNdWx0aXBsaWVyO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh2YWx1ZVN1Yikge1xuICAgICAgdmFyIF9uZXdPcHRpb25zID0gb3B0aW9ucy5oYXZpbmdTdHlsZShvcHRpb25zLnN0eWxlLnN1YigpKTtcblxuICAgICAgc3VibSA9IGJ1aWxkSFRNTF9idWlsZEdyb3VwKHZhbHVlU3ViLCBfbmV3T3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgICAgIGlmICghaXNDaGFyYWN0ZXJCb3gpIHtcbiAgICAgICAgc3ViU2hpZnQgPSBiYXNlLmRlcHRoICsgX25ld09wdGlvbnMuZm9udE1ldHJpY3MoKS5zdWJEcm9wICogX25ld09wdGlvbnMuc2l6ZU11bHRpcGxpZXIgLyBvcHRpb25zLnNpemVNdWx0aXBsaWVyO1xuICAgICAgfVxuICAgIH0gLy8gUnVsZSAxOGNcblxuXG4gICAgdmFyIG1pblN1cFNoaWZ0O1xuXG4gICAgaWYgKG9wdGlvbnMuc3R5bGUgPT09IHNyY19TdHlsZS5ESVNQTEFZKSB7XG4gICAgICBtaW5TdXBTaGlmdCA9IG1ldHJpY3Muc3VwMTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuc3R5bGUuY3JhbXBlZCkge1xuICAgICAgbWluU3VwU2hpZnQgPSBtZXRyaWNzLnN1cDM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1pblN1cFNoaWZ0ID0gbWV0cmljcy5zdXAyO1xuICAgIH0gLy8gc2NyaXB0c3BhY2UgaXMgYSBmb250LXNpemUtaW5kZXBlbmRlbnQgc2l6ZSwgc28gc2NhbGUgaXRcbiAgICAvLyBhcHByb3ByaWF0ZWx5IGZvciB1c2UgYXMgdGhlIG1hcmdpblJpZ2h0LlxuXG5cbiAgICB2YXIgbXVsdGlwbGllciA9IG9wdGlvbnMuc2l6ZU11bHRpcGxpZXI7XG4gICAgdmFyIG1hcmdpblJpZ2h0ID0gMC41IC8gbWV0cmljcy5wdFBlckVtIC8gbXVsdGlwbGllciArIFwiZW1cIjtcbiAgICB2YXIgbWFyZ2luTGVmdCA9IG51bGw7XG5cbiAgICBpZiAoc3VibSkge1xuICAgICAgLy8gU3Vic2NyaXB0cyBzaG91bGRuJ3QgYmUgc2hpZnRlZCBieSB0aGUgYmFzZSdzIGl0YWxpYyBjb3JyZWN0aW9uLlxuICAgICAgLy8gQWNjb3VudCBmb3IgdGhhdCBieSBzaGlmdGluZyB0aGUgc3Vic2NyaXB0IGJhY2sgdGhlIGFwcHJvcHJpYXRlXG4gICAgICAvLyBhbW91bnQuIE5vdGUgd2Ugb25seSBkbyB0aGlzIHdoZW4gdGhlIGJhc2UgaXMgYSBzaW5nbGUgc3ltYm9sLlxuICAgICAgdmFyIGlzT2lpbnQgPSBncm91cC5iYXNlICYmIGdyb3VwLmJhc2UudHlwZSA9PT0gXCJvcFwiICYmIGdyb3VwLmJhc2UubmFtZSAmJiAoZ3JvdXAuYmFzZS5uYW1lID09PSBcIlxcXFxvaWludFwiIHx8IGdyb3VwLmJhc2UubmFtZSA9PT0gXCJcXFxcb2lpaW50XCIpO1xuXG4gICAgICBpZiAoYmFzZSBpbnN0YW5jZW9mIGRvbVRyZWVfU3ltYm9sTm9kZSB8fCBpc09paW50KSB7XG4gICAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgICAgbWFyZ2luTGVmdCA9IC1iYXNlLml0YWxpYyArIFwiZW1cIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc3Vwc3ViO1xuXG4gICAgaWYgKHN1cG0gJiYgc3VibSkge1xuICAgICAgc3VwU2hpZnQgPSBNYXRoLm1heChzdXBTaGlmdCwgbWluU3VwU2hpZnQsIHN1cG0uZGVwdGggKyAwLjI1ICogbWV0cmljcy54SGVpZ2h0KTtcbiAgICAgIHN1YlNoaWZ0ID0gTWF0aC5tYXgoc3ViU2hpZnQsIG1ldHJpY3Muc3ViMik7XG4gICAgICB2YXIgcnVsZVdpZHRoID0gbWV0cmljcy5kZWZhdWx0UnVsZVRoaWNrbmVzczsgLy8gUnVsZSAxOGVcblxuICAgICAgdmFyIG1heFdpZHRoID0gNCAqIHJ1bGVXaWR0aDtcblxuICAgICAgaWYgKHN1cFNoaWZ0IC0gc3VwbS5kZXB0aCAtIChzdWJtLmhlaWdodCAtIHN1YlNoaWZ0KSA8IG1heFdpZHRoKSB7XG4gICAgICAgIHN1YlNoaWZ0ID0gbWF4V2lkdGggLSAoc3VwU2hpZnQgLSBzdXBtLmRlcHRoKSArIHN1Ym0uaGVpZ2h0O1xuICAgICAgICB2YXIgcHNpID0gMC44ICogbWV0cmljcy54SGVpZ2h0IC0gKHN1cFNoaWZ0IC0gc3VwbS5kZXB0aCk7XG5cbiAgICAgICAgaWYgKHBzaSA+IDApIHtcbiAgICAgICAgICBzdXBTaGlmdCArPSBwc2k7XG4gICAgICAgICAgc3ViU2hpZnQgLT0gcHNpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB2bGlzdEVsZW0gPSBbe1xuICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgZWxlbTogc3VibSxcbiAgICAgICAgc2hpZnQ6IHN1YlNoaWZ0LFxuICAgICAgICBtYXJnaW5SaWdodDogbWFyZ2luUmlnaHQsXG4gICAgICAgIG1hcmdpbkxlZnQ6IG1hcmdpbkxlZnRcbiAgICAgIH0sIHtcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IHN1cG0sXG4gICAgICAgIHNoaWZ0OiAtc3VwU2hpZnQsXG4gICAgICAgIG1hcmdpblJpZ2h0OiBtYXJnaW5SaWdodFxuICAgICAgfV07XG4gICAgICBzdXBzdWIgPSBidWlsZENvbW1vbi5tYWtlVkxpc3Qoe1xuICAgICAgICBwb3NpdGlvblR5cGU6IFwiaW5kaXZpZHVhbFNoaWZ0XCIsXG4gICAgICAgIGNoaWxkcmVuOiB2bGlzdEVsZW1cbiAgICAgIH0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAoc3VibSkge1xuICAgICAgLy8gUnVsZSAxOGJcbiAgICAgIHN1YlNoaWZ0ID0gTWF0aC5tYXgoc3ViU2hpZnQsIG1ldHJpY3Muc3ViMSwgc3VibS5oZWlnaHQgLSAwLjggKiBtZXRyaWNzLnhIZWlnaHQpO1xuICAgICAgdmFyIF92bGlzdEVsZW0gPSBbe1xuICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgZWxlbTogc3VibSxcbiAgICAgICAgbWFyZ2luTGVmdDogbWFyZ2luTGVmdCxcbiAgICAgICAgbWFyZ2luUmlnaHQ6IG1hcmdpblJpZ2h0XG4gICAgICB9XTtcbiAgICAgIHN1cHN1YiA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgICAgIHBvc2l0aW9uVHlwZTogXCJzaGlmdFwiLFxuICAgICAgICBwb3NpdGlvbkRhdGE6IHN1YlNoaWZ0LFxuICAgICAgICBjaGlsZHJlbjogX3ZsaXN0RWxlbVxuICAgICAgfSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIGlmIChzdXBtKSB7XG4gICAgICAvLyBSdWxlIDE4YywgZFxuICAgICAgc3VwU2hpZnQgPSBNYXRoLm1heChzdXBTaGlmdCwgbWluU3VwU2hpZnQsIHN1cG0uZGVwdGggKyAwLjI1ICogbWV0cmljcy54SGVpZ2h0KTtcbiAgICAgIHN1cHN1YiA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgICAgIHBvc2l0aW9uVHlwZTogXCJzaGlmdFwiLFxuICAgICAgICBwb3NpdGlvbkRhdGE6IC1zdXBTaGlmdCxcbiAgICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgICAgZWxlbTogc3VwbSxcbiAgICAgICAgICBtYXJnaW5SaWdodDogbWFyZ2luUmlnaHRcbiAgICAgICAgfV1cbiAgICAgIH0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzdXBzdWIgbXVzdCBoYXZlIGVpdGhlciBzdXAgb3Igc3ViLlwiKTtcbiAgICB9IC8vIFdyYXAgdGhlIHN1cHN1YiB2bGlzdCBpbiBhIHNwYW4ubXN1cHN1YiB0byByZXNldCB0ZXh0LWFsaWduLlxuXG5cbiAgICB2YXIgbWNsYXNzID0gZ2V0VHlwZU9mRG9tVHJlZShiYXNlLCBcInJpZ2h0XCIpIHx8IFwibW9yZFwiO1xuICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlU3BhbihbbWNsYXNzXSwgW2Jhc2UsIGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm1zdXBzdWJcIl0sIFtzdXBzdWJdKV0sIG9wdGlvbnMpO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgLy8gSXMgdGhlIGlubmVyIGdyb3VwIGEgcmVsZXZhbnQgaG9yaXpvbmFsIGJyYWNlP1xuICAgIHZhciBpc0JyYWNlID0gZmFsc2U7XG4gICAgdmFyIGlzT3ZlcjtcbiAgICB2YXIgaXNTdXA7XG4gICAgdmFyIGhvcml6QnJhY2UgPSBjaGVja05vZGVUeXBlKGdyb3VwLmJhc2UsIFwiaG9yaXpCcmFjZVwiKTtcblxuICAgIGlmIChob3JpekJyYWNlKSB7XG4gICAgICBpc1N1cCA9ICEhZ3JvdXAuc3VwO1xuXG4gICAgICBpZiAoaXNTdXAgPT09IGhvcml6QnJhY2UuaXNPdmVyKSB7XG4gICAgICAgIGlzQnJhY2UgPSB0cnVlO1xuICAgICAgICBpc092ZXIgPSBob3JpekJyYWNlLmlzT3ZlcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZ3JvdXAuYmFzZSAmJiBncm91cC5iYXNlLnR5cGUgPT09IFwib3BcIikge1xuICAgICAgZ3JvdXAuYmFzZS5wYXJlbnRJc1N1cFN1YiA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkcmVuID0gW2J1aWxkTWF0aE1MX2J1aWxkR3JvdXAoZ3JvdXAuYmFzZSwgb3B0aW9ucyldO1xuXG4gICAgaWYgKGdyb3VwLnN1Yikge1xuICAgICAgY2hpbGRyZW4ucHVzaChidWlsZE1hdGhNTF9idWlsZEdyb3VwKGdyb3VwLnN1Yiwgb3B0aW9ucykpO1xuICAgIH1cblxuICAgIGlmIChncm91cC5zdXApIHtcbiAgICAgIGNoaWxkcmVuLnB1c2goYnVpbGRNYXRoTUxfYnVpbGRHcm91cChncm91cC5zdXAsIG9wdGlvbnMpKTtcbiAgICB9XG5cbiAgICB2YXIgbm9kZVR5cGU7XG5cbiAgICBpZiAoaXNCcmFjZSkge1xuICAgICAgbm9kZVR5cGUgPSBpc092ZXIgPyBcIm1vdmVyXCIgOiBcIm11bmRlclwiO1xuICAgIH0gZWxzZSBpZiAoIWdyb3VwLnN1Yikge1xuICAgICAgdmFyIGJhc2UgPSBncm91cC5iYXNlO1xuXG4gICAgICBpZiAoYmFzZSAmJiBiYXNlLnR5cGUgPT09IFwib3BcIiAmJiBiYXNlLmxpbWl0cyAmJiAob3B0aW9ucy5zdHlsZSA9PT0gc3JjX1N0eWxlLkRJU1BMQVkgfHwgYmFzZS5hbHdheXNIYW5kbGVTdXBTdWIpKSB7XG4gICAgICAgIG5vZGVUeXBlID0gXCJtb3ZlclwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZVR5cGUgPSBcIm1zdXBcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFncm91cC5zdXApIHtcbiAgICAgIHZhciBfYmFzZSA9IGdyb3VwLmJhc2U7XG5cbiAgICAgIGlmIChfYmFzZSAmJiBfYmFzZS50eXBlID09PSBcIm9wXCIgJiYgX2Jhc2UubGltaXRzICYmIChvcHRpb25zLnN0eWxlID09PSBzcmNfU3R5bGUuRElTUExBWSB8fCBfYmFzZS5hbHdheXNIYW5kbGVTdXBTdWIpKSB7XG4gICAgICAgIG5vZGVUeXBlID0gXCJtdW5kZXJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVUeXBlID0gXCJtc3ViXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfYmFzZTIgPSBncm91cC5iYXNlO1xuXG4gICAgICBpZiAoX2Jhc2UyICYmIF9iYXNlMi50eXBlID09PSBcIm9wXCIgJiYgX2Jhc2UyLmxpbWl0cyAmJiBvcHRpb25zLnN0eWxlID09PSBzcmNfU3R5bGUuRElTUExBWSkge1xuICAgICAgICBub2RlVHlwZSA9IFwibXVuZGVyb3ZlclwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZVR5cGUgPSBcIm1zdWJzdXBcIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbm9kZSA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKG5vZGVUeXBlLCBjaGlsZHJlbik7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL3N5bWJvbHNPcC5qc1xuXG5cblxuIC8vIE9wZXJhdG9yIFBhcnNlTm9kZXMgY3JlYXRlZCBpbiBQYXJzZXIuanMgZnJvbSBzeW1ib2wgR3JvdXBzIGluIHNyYy9zeW1ib2xzLmpzLlxuXG5kZWZpbmVGdW5jdGlvbkJ1aWxkZXJzKHtcbiAgdHlwZTogXCJhdG9tXCIsXG4gIGh0bWxCdWlsZGVyOiBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHJldHVybiBidWlsZENvbW1vbi5tYXRoc3ltKGdyb3VwLnRleHQsIGdyb3VwLm1vZGUsIG9wdGlvbnMsIFtcIm1cIiArIGdyb3VwLmZhbWlseV0pO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIG5vZGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1vXCIsIFtidWlsZE1hdGhNTF9tYWtlVGV4dChncm91cC50ZXh0LCBncm91cC5tb2RlKV0pO1xuXG4gICAgaWYgKGdyb3VwLmZhbWlseSA9PT0gXCJiaW5cIikge1xuICAgICAgdmFyIHZhcmlhbnQgPSBidWlsZE1hdGhNTF9nZXRWYXJpYW50KGdyb3VwLCBvcHRpb25zKTtcblxuICAgICAgaWYgKHZhcmlhbnQgPT09IFwiYm9sZC1pdGFsaWNcIikge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShcIm1hdGh2YXJpYW50XCIsIHZhcmlhbnQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZ3JvdXAuZmFtaWx5ID09PSBcInB1bmN0XCIpIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwic2VwYXJhdG9yXCIsIFwidHJ1ZVwiKTtcbiAgICB9IGVsc2UgaWYgKGdyb3VwLmZhbWlseSA9PT0gXCJvcGVuXCIgfHwgZ3JvdXAuZmFtaWx5ID09PSBcImNsb3NlXCIpIHtcbiAgICAgIC8vIERlbGltcyBidWlsdCBoZXJlIHNob3VsZCBub3Qgc3RyZXRjaCB2ZXJ0aWNhbGx5LlxuICAgICAgLy8gU2VlIGRlbGltc2l6aW5nLmpzIGZvciBzdHJldGNoeSBkZWxpbXMuXG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShcInN0cmV0Y2h5XCIsIFwiZmFsc2VcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL3N5bWJvbHNPcmQuanNcblxuXG5cblxuLy8gXCJtYXRob3JkXCIgYW5kIFwidGV4dG9yZFwiIFBhcnNlTm9kZXMgY3JlYXRlZCBpbiBQYXJzZXIuanMgZnJvbSBzeW1ib2wgR3JvdXBzIGluXG52YXIgZGVmYXVsdFZhcmlhbnQgPSB7XG4gIFwibWlcIjogXCJpdGFsaWNcIixcbiAgXCJtblwiOiBcIm5vcm1hbFwiLFxuICBcIm10ZXh0XCI6IFwibm9ybWFsXCJcbn07XG5kZWZpbmVGdW5jdGlvbkJ1aWxkZXJzKHtcbiAgdHlwZTogXCJtYXRob3JkXCIsXG4gIGh0bWxCdWlsZGVyOiBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlT3JkKGdyb3VwLCBvcHRpb25zLCBcIm1hdGhvcmRcIik7XG4gIH0sXG4gIG1hdGhtbEJ1aWxkZXI6IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgbm9kZSA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibWlcIiwgW2J1aWxkTWF0aE1MX21ha2VUZXh0KGdyb3VwLnRleHQsIGdyb3VwLm1vZGUsIG9wdGlvbnMpXSk7XG4gICAgdmFyIHZhcmlhbnQgPSBidWlsZE1hdGhNTF9nZXRWYXJpYW50KGdyb3VwLCBvcHRpb25zKSB8fCBcIml0YWxpY1wiO1xuXG4gICAgaWYgKHZhcmlhbnQgIT09IGRlZmF1bHRWYXJpYW50W25vZGUudHlwZV0pIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwibWF0aHZhcmlhbnRcIiwgdmFyaWFudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbn0pO1xuZGVmaW5lRnVuY3Rpb25CdWlsZGVycyh7XG4gIHR5cGU6IFwidGV4dG9yZFwiLFxuICBodG1sQnVpbGRlcjogZnVuY3Rpb24gaHRtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gYnVpbGRDb21tb24ubWFrZU9yZChncm91cCwgb3B0aW9ucywgXCJ0ZXh0b3JkXCIpO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIHRleHQgPSBidWlsZE1hdGhNTF9tYWtlVGV4dChncm91cC50ZXh0LCBncm91cC5tb2RlLCBvcHRpb25zKTtcbiAgICB2YXIgdmFyaWFudCA9IGJ1aWxkTWF0aE1MX2dldFZhcmlhbnQoZ3JvdXAsIG9wdGlvbnMpIHx8IFwibm9ybWFsXCI7XG4gICAgdmFyIG5vZGU7XG5cbiAgICBpZiAoZ3JvdXAubW9kZSA9PT0gJ3RleHQnKSB7XG4gICAgICBub2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtdGV4dFwiLCBbdGV4dF0pO1xuICAgIH0gZWxzZSBpZiAoL1swLTldLy50ZXN0KGdyb3VwLnRleHQpKSB7XG4gICAgICAvLyBUT0RPKGtldmluYikgbWVyZ2UgYWRqYWNlbnQgPG1uPiBub2Rlc1xuICAgICAgLy8gZG8gaXQgYXMgYSBwb3N0IHByb2Nlc3Npbmcgc3RlcFxuICAgICAgbm9kZSA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibW5cIiwgW3RleHRdKTtcbiAgICB9IGVsc2UgaWYgKGdyb3VwLnRleHQgPT09IFwiXFxcXHByaW1lXCIpIHtcbiAgICAgIG5vZGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1vXCIsIFt0ZXh0XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1pXCIsIFt0ZXh0XSk7XG4gICAgfVxuXG4gICAgaWYgKHZhcmlhbnQgIT09IGRlZmF1bHRWYXJpYW50W25vZGUudHlwZV0pIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwibWF0aHZhcmlhbnRcIiwgdmFyaWFudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL3N5bWJvbHNTcGFjaW5nLmpzXG5cblxuXG4gLy8gQSBtYXAgb2YgQ1NTLWJhc2VkIHNwYWNpbmcgZnVuY3Rpb25zIHRvIHRoZWlyIENTUyBjbGFzcy5cblxudmFyIGNzc1NwYWNlID0ge1xuICBcIlxcXFxub2JyZWFrXCI6IFwibm9icmVha1wiLFxuICBcIlxcXFxhbGxvd2JyZWFrXCI6IFwiYWxsb3dicmVha1wiXG59OyAvLyBBIGxvb2t1cCB0YWJsZSB0byBkZXRlcm1pbmUgd2hldGhlciBhIHNwYWNpbmcgZnVuY3Rpb24vc3ltYm9sIHNob3VsZCBiZVxuLy8gdHJlYXRlZCBsaWtlIGEgcmVndWxhciBzcGFjZSBjaGFyYWN0ZXIuICBJZiBhIHN5bWJvbCBvciBjb21tYW5kIGlzIGEga2V5XG4vLyBpbiB0aGlzIHRhYmxlLCB0aGVuIGl0IHNob3VsZCBiZSBhIHJlZ3VsYXIgc3BhY2UgY2hhcmFjdGVyLiAgRnVydGhlcm1vcmUsXG4vLyB0aGUgYXNzb2NpYXRlZCB2YWx1ZSBtYXkgaGF2ZSBhIGBjbGFzc05hbWVgIHNwZWNpZnlpbmcgYW4gZXh0cmEgQ1NTIGNsYXNzXG4vLyB0byBhZGQgdG8gdGhlIGNyZWF0ZWQgYHNwYW5gLlxuXG52YXIgcmVndWxhclNwYWNlID0ge1xuICBcIiBcIjoge30sXG4gIFwiXFxcXCBcIjoge30sXG4gIFwiflwiOiB7XG4gICAgY2xhc3NOYW1lOiBcIm5vYnJlYWtcIlxuICB9LFxuICBcIlxcXFxzcGFjZVwiOiB7fSxcbiAgXCJcXFxcbm9icmVha3NwYWNlXCI6IHtcbiAgICBjbGFzc05hbWU6IFwibm9icmVha1wiXG4gIH1cbn07IC8vIFBhcnNlTm9kZTxcInNwYWNpbmdcIj4gY3JlYXRlZCBpbiBQYXJzZXIuanMgZnJvbSB0aGUgXCJzcGFjaW5nXCIgc3ltYm9sIEdyb3VwcyBpblxuLy8gc3JjL3N5bWJvbHMuanMuXG5cbmRlZmluZUZ1bmN0aW9uQnVpbGRlcnMoe1xuICB0eXBlOiBcInNwYWNpbmdcIixcbiAgaHRtbEJ1aWxkZXI6IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgaWYgKHJlZ3VsYXJTcGFjZS5oYXNPd25Qcm9wZXJ0eShncm91cC50ZXh0KSkge1xuICAgICAgdmFyIGNsYXNzTmFtZSA9IHJlZ3VsYXJTcGFjZVtncm91cC50ZXh0XS5jbGFzc05hbWUgfHwgXCJcIjsgLy8gU3BhY2VzIGFyZSBnZW5lcmF0ZWQgYnkgYWRkaW5nIGFuIGFjdHVhbCBzcGFjZS4gRWFjaCBvZiB0aGVzZVxuICAgICAgLy8gdGhpbmdzIGhhcyBhbiBlbnRyeSBpbiB0aGUgc3ltYm9scyB0YWJsZSwgc28gdGhlc2Ugd2lsbCBiZSB0dXJuZWRcbiAgICAgIC8vIGludG8gYXBwcm9wcmlhdGUgb3V0cHV0cy5cblxuICAgICAgaWYgKGdyb3VwLm1vZGUgPT09IFwidGV4dFwiKSB7XG4gICAgICAgIHZhciBvcmQgPSBidWlsZENvbW1vbi5tYWtlT3JkKGdyb3VwLCBvcHRpb25zLCBcInRleHRvcmRcIik7XG4gICAgICAgIG9yZC5jbGFzc2VzLnB1c2goY2xhc3NOYW1lKTtcbiAgICAgICAgcmV0dXJuIG9yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJtc3BhY2VcIiwgY2xhc3NOYW1lXSwgW2J1aWxkQ29tbW9uLm1hdGhzeW0oZ3JvdXAudGV4dCwgZ3JvdXAubW9kZSwgb3B0aW9ucyldLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNzc1NwYWNlLmhhc093blByb3BlcnR5KGdyb3VwLnRleHQpKSB7XG4gICAgICAvLyBTcGFjZXMgYmFzZWQgb24ganVzdCBhIENTUyBjbGFzcy5cbiAgICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJtc3BhY2VcIiwgY3NzU3BhY2VbZ3JvdXAudGV4dF1dLCBbXSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIlVua25vd24gdHlwZSBvZiBzcGFjZSBcXFwiXCIgKyBncm91cC50ZXh0ICsgXCJcXFwiXCIpO1xuICAgIH1cbiAgfSxcbiAgbWF0aG1sQnVpbGRlcjogZnVuY3Rpb24gbWF0aG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBub2RlO1xuXG4gICAgaWYgKHJlZ3VsYXJTcGFjZS5oYXNPd25Qcm9wZXJ0eShncm91cC50ZXh0KSkge1xuICAgICAgbm9kZSA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibXRleHRcIiwgW25ldyBtYXRoTUxUcmVlLlRleHROb2RlKFwiXFx4QTBcIildKTtcbiAgICB9IGVsc2UgaWYgKGNzc1NwYWNlLmhhc093blByb3BlcnR5KGdyb3VwLnRleHQpKSB7XG4gICAgICAvLyBDU1MtYmFzZWQgTWF0aE1MIHNwYWNlcyAoXFxub2JyZWFrLCBcXGFsbG93YnJlYWspIGFyZSBpZ25vcmVkXG4gICAgICByZXR1cm4gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtc3BhY2VcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIlVua25vd24gdHlwZSBvZiBzcGFjZSBcXFwiXCIgKyBncm91cC50ZXh0ICsgXCJcXFwiXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9XG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2Z1bmN0aW9ucy90YWcuanNcblxuXG5cblxudmFyIHRhZ19wYWQgPSBmdW5jdGlvbiBwYWQoKSB7XG4gIHZhciBwYWROb2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtdGRcIiwgW10pO1xuICBwYWROb2RlLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIFwiNTAlXCIpO1xuICByZXR1cm4gcGFkTm9kZTtcbn07XG5cbmRlZmluZUZ1bmN0aW9uQnVpbGRlcnMoe1xuICB0eXBlOiBcInRhZ1wiLFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIHRhYmxlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtdGFibGVcIiwgW25ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibXRyXCIsIFt0YWdfcGFkKCksIG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibXRkXCIsIFtidWlsZEV4cHJlc3Npb25Sb3coZ3JvdXAuYm9keSwgb3B0aW9ucyldKSwgdGFnX3BhZCgpLCBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm10ZFwiLCBbYnVpbGRFeHByZXNzaW9uUm93KGdyb3VwLnRhZywgb3B0aW9ucyldKV0pXSk7XG4gICAgdGFibGUuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgXCIxMDAlXCIpO1xuICAgIHJldHVybiB0YWJsZTsgLy8gVE9ETzogTGVmdC1hbGlnbmVkIHRhZ3MuXG4gICAgLy8gQ3VycmVudGx5LCB0aGUgZ3JvdXAgYW5kIG9wdGlvbnMgcGFzc2VkIGhlcmUgZG8gbm90IGNvbnRhaW5cbiAgICAvLyBlbm91Z2ggaW5mbyB0byBzZXQgdGFnIGFsaWdubWVudC4gYGxlcW5vYCBpcyBpbiBTZXR0aW5ncyBidXQgaXQgaXNcbiAgICAvLyBub3QgcGFzc2VkIHRvIE9wdGlvbnMuIE9uIHRoZSBIVE1MIHNpZGUsIGxlcW5vIGlzXG4gICAgLy8gc2V0IGJ5IGEgQ1NTIGNsYXNzIGFwcGxpZWQgaW4gYnVpbGRUcmVlLmpzLiBUaGF0IHdvdWxkIGhhdmUgd29ya2VkXG4gICAgLy8gaW4gTWF0aE1MIGlmIGJyb3dzZXJzIHN1cHBvcnRlZCA8bWxhYmVsZWR0cj4uIFNpbmNlIHRoZXkgZG9uJ3QsIHdlXG4gICAgLy8gbmVlZCB0byByZXdyaXRlIHRoZSB3YXkgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQuXG4gIH1cbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL3RleHQuanNcblxuXG5cbiAvLyBOb24tbWF0aHkgdGV4dCwgcG9zc2libHkgaW4gYSBmb250XG5cbnZhciB0ZXh0Rm9udEZhbWlsaWVzID0ge1xuICBcIlxcXFx0ZXh0XCI6IHVuZGVmaW5lZCxcbiAgXCJcXFxcdGV4dHJtXCI6IFwidGV4dHJtXCIsXG4gIFwiXFxcXHRleHRzZlwiOiBcInRleHRzZlwiLFxuICBcIlxcXFx0ZXh0dHRcIjogXCJ0ZXh0dHRcIixcbiAgXCJcXFxcdGV4dG5vcm1hbFwiOiBcInRleHRybVwiXG59O1xudmFyIHRleHRGb250V2VpZ2h0cyA9IHtcbiAgXCJcXFxcdGV4dGJmXCI6IFwidGV4dGJmXCIsXG4gIFwiXFxcXHRleHRtZFwiOiBcInRleHRtZFwiXG59O1xudmFyIHRleHRGb250U2hhcGVzID0ge1xuICBcIlxcXFx0ZXh0aXRcIjogXCJ0ZXh0aXRcIixcbiAgXCJcXFxcdGV4dHVwXCI6IFwidGV4dHVwXCJcbn07XG5cbnZhciBvcHRpb25zV2l0aEZvbnQgPSBmdW5jdGlvbiBvcHRpb25zV2l0aEZvbnQoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgdmFyIGZvbnQgPSBncm91cC5mb250OyAvLyBDaGVja3MgaWYgdGhlIGFyZ3VtZW50IGlzIGEgZm9udCBmYW1pbHkgb3IgYSBmb250IHN0eWxlLlxuXG4gIGlmICghZm9udCkge1xuICAgIHJldHVybiBvcHRpb25zO1xuICB9IGVsc2UgaWYgKHRleHRGb250RmFtaWxpZXNbZm9udF0pIHtcbiAgICByZXR1cm4gb3B0aW9ucy53aXRoVGV4dEZvbnRGYW1pbHkodGV4dEZvbnRGYW1pbGllc1tmb250XSk7XG4gIH0gZWxzZSBpZiAodGV4dEZvbnRXZWlnaHRzW2ZvbnRdKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMud2l0aFRleHRGb250V2VpZ2h0KHRleHRGb250V2VpZ2h0c1tmb250XSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG9wdGlvbnMud2l0aFRleHRGb250U2hhcGUodGV4dEZvbnRTaGFwZXNbZm9udF0pO1xuICB9XG59O1xuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwidGV4dFwiLFxuICBuYW1lczogWy8vIEZvbnQgZmFtaWxpZXNcbiAgXCJcXFxcdGV4dFwiLCBcIlxcXFx0ZXh0cm1cIiwgXCJcXFxcdGV4dHNmXCIsIFwiXFxcXHRleHR0dFwiLCBcIlxcXFx0ZXh0bm9ybWFsXCIsIC8vIEZvbnQgd2VpZ2h0c1xuICBcIlxcXFx0ZXh0YmZcIiwgXCJcXFxcdGV4dG1kXCIsIC8vIEZvbnQgU2hhcGVzXG4gIFwiXFxcXHRleHRpdFwiLCBcIlxcXFx0ZXh0dXBcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMSxcbiAgICBhcmdUeXBlczogW1widGV4dFwiXSxcbiAgICBncmVlZGluZXNzOiAyLFxuICAgIGFsbG93ZWRJblRleHQ6IHRydWUsXG4gICAgY29uc3VtZU1vZGU6IFwidGV4dFwiXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZiwgYXJncykge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmLnBhcnNlcixcbiAgICAgICAgZnVuY05hbWUgPSBfcmVmLmZ1bmNOYW1lO1xuICAgIHZhciBib2R5ID0gYXJnc1swXTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIGJvZHk6IGRlZmluZUZ1bmN0aW9uX29yZGFyZ3VtZW50KGJvZHkpLFxuICAgICAgZm9udDogZnVuY05hbWVcbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogZnVuY3Rpb24gaHRtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgbmV3T3B0aW9ucyA9IG9wdGlvbnNXaXRoRm9udChncm91cCwgb3B0aW9ucyk7XG4gICAgdmFyIGlubmVyID0gYnVpbGRIVE1MX2J1aWxkRXhwcmVzc2lvbihncm91cC5ib2R5LCBuZXdPcHRpb25zLCB0cnVlKTtcbiAgICByZXR1cm4gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wibW9yZFwiLCBcInRleHRcIl0sIGJ1aWxkQ29tbW9uLnRyeUNvbWJpbmVDaGFycyhpbm5lciksIG5ld09wdGlvbnMpO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIG5ld09wdGlvbnMgPSBvcHRpb25zV2l0aEZvbnQoZ3JvdXAsIG9wdGlvbnMpO1xuICAgIHJldHVybiBidWlsZEV4cHJlc3Npb25Sb3coZ3JvdXAuYm9keSwgbmV3T3B0aW9ucyk7XG4gIH1cbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL3VuZGVybGluZS5qc1xuXG5cblxuXG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJ1bmRlcmxpbmVcIixcbiAgbmFtZXM6IFtcIlxcXFx1bmRlcmxpbmVcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMSxcbiAgICBhbGxvd2VkSW5UZXh0OiB0cnVlXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZiwgYXJncykge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmLnBhcnNlcjtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJ1bmRlcmxpbmVcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgYm9keTogYXJnc1swXVxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIC8vIFVuZGVybGluZXMgYXJlIGhhbmRsZWQgaW4gdGhlIFRlWGJvb2sgcGcgNDQzLCBSdWxlIDEwLlxuICAgIC8vIEJ1aWxkIHRoZSBpbm5lciBncm91cC5cbiAgICB2YXIgaW5uZXJHcm91cCA9IGJ1aWxkSFRNTF9idWlsZEdyb3VwKGdyb3VwLmJvZHksIG9wdGlvbnMpOyAvLyBDcmVhdGUgdGhlIGxpbmUgdG8gZ28gYmVsb3cgdGhlIGJvZHlcblxuICAgIHZhciBsaW5lID0gYnVpbGRDb21tb24ubWFrZUxpbmVTcGFuKFwidW5kZXJsaW5lLWxpbmVcIiwgb3B0aW9ucyk7IC8vIEdlbmVyYXRlIHRoZSB2bGlzdCwgd2l0aCB0aGUgYXBwcm9wcmlhdGUga2VybnNcblxuICAgIHZhciB2bGlzdCA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgICBwb3NpdGlvblR5cGU6IFwidG9wXCIsXG4gICAgICBwb3NpdGlvbkRhdGE6IGlubmVyR3JvdXAuaGVpZ2h0LFxuICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgIHR5cGU6IFwia2VyblwiLFxuICAgICAgICBzaXplOiBsaW5lLmhlaWdodFxuICAgICAgfSwge1xuICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgZWxlbTogbGluZVxuICAgICAgfSwge1xuICAgICAgICB0eXBlOiBcImtlcm5cIixcbiAgICAgICAgc2l6ZTogMyAqIGxpbmUuaGVpZ2h0XG4gICAgICB9LCB7XG4gICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICBlbGVtOiBpbm5lckdyb3VwXG4gICAgICB9XVxuICAgIH0sIG9wdGlvbnMpO1xuICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJtb3JkXCIsIFwidW5kZXJsaW5lXCJdLCBbdmxpc3RdLCBvcHRpb25zKTtcbiAgfSxcbiAgbWF0aG1sQnVpbGRlcjogZnVuY3Rpb24gbWF0aG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBvcGVyYXRvciA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibW9cIiwgW25ldyBtYXRoTUxUcmVlLlRleHROb2RlKFwiXFx1MjAzRVwiKV0pO1xuICAgIG9wZXJhdG9yLnNldEF0dHJpYnV0ZShcInN0cmV0Y2h5XCIsIFwidHJ1ZVwiKTtcbiAgICB2YXIgbm9kZSA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibXVuZGVyXCIsIFtidWlsZE1hdGhNTF9idWlsZEdyb3VwKGdyb3VwLmJvZHksIG9wdGlvbnMpLCBvcGVyYXRvcl0pO1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKFwiYWNjZW50dW5kZXJcIiwgXCJ0cnVlXCIpO1xuICAgIHJldHVybiBub2RlO1xuICB9XG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2Z1bmN0aW9ucy92ZXJiLmpzXG5cblxuXG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJ2ZXJiXCIsXG4gIG5hbWVzOiBbXCJcXFxcdmVyYlwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAwLFxuICAgIGFsbG93ZWRJblRleHQ6IHRydWVcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihjb250ZXh0LCBhcmdzLCBvcHRBcmdzKSB7XG4gICAgLy8gXFx2ZXJiIGFuZCBcXHZlcmIqIGFyZSBkZWFsdCB3aXRoIGRpcmVjdGx5IGluIFBhcnNlci5qcy5cbiAgICAvLyBJZiB3ZSBlbmQgdXAgaGVyZSwgaXQncyBiZWNhdXNlIG9mIGEgZmFpbHVyZSB0byBtYXRjaCB0aGUgdHdvIGRlbGltaXRlcnNcbiAgICAvLyBpbiB0aGUgcmVnZXggaW4gTGV4ZXIuanMuICBMYVRlWCByYWlzZXMgdGhlIGZvbGxvd2luZyBlcnJvciB3aGVuIFxcdmVyYiBpc1xuICAgIC8vIHRlcm1pbmF0ZWQgYnkgZW5kIG9mIGxpbmUgKG9yIGZpbGUpLlxuICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIlxcXFx2ZXJiIGVuZGVkIGJ5IGVuZCBvZiBsaW5lIGluc3RlYWQgb2YgbWF0Y2hpbmcgZGVsaW1pdGVyXCIpO1xuICB9LFxuICBodG1sQnVpbGRlcjogZnVuY3Rpb24gaHRtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgdGV4dCA9IG1ha2VWZXJiKGdyb3VwKTtcbiAgICB2YXIgYm9keSA9IFtdOyAvLyBcXHZlcmIgZW50ZXJzIHRleHQgbW9kZSBhbmQgdGhlcmVmb3JlIGlzIHNpemVkIGxpa2UgXFx0ZXh0c3R5bGVcblxuICAgIHZhciBuZXdPcHRpb25zID0gb3B0aW9ucy5oYXZpbmdTdHlsZShvcHRpb25zLnN0eWxlLnRleHQoKSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRleHQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gdGV4dFtpXTtcblxuICAgICAgaWYgKGMgPT09ICd+Jykge1xuICAgICAgICBjID0gJ1xcXFx0ZXh0YXNjaWl0aWxkZSc7XG4gICAgICB9XG5cbiAgICAgIGJvZHkucHVzaChidWlsZENvbW1vbi5tYWtlU3ltYm9sKGMsIFwiVHlwZXdyaXRlci1SZWd1bGFyXCIsIGdyb3VwLm1vZGUsIG5ld09wdGlvbnMsIFtcIm1vcmRcIiwgXCJ0ZXh0dHRcIl0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wibW9yZFwiLCBcInRleHRcIl0uY29uY2F0KG5ld09wdGlvbnMuc2l6aW5nQ2xhc3NlcyhvcHRpb25zKSksIGJ1aWxkQ29tbW9uLnRyeUNvbWJpbmVDaGFycyhib2R5KSwgbmV3T3B0aW9ucyk7XG4gIH0sXG4gIG1hdGhtbEJ1aWxkZXI6IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgdGV4dCA9IG5ldyBtYXRoTUxUcmVlLlRleHROb2RlKG1ha2VWZXJiKGdyb3VwKSk7XG4gICAgdmFyIG5vZGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm10ZXh0XCIsIFt0ZXh0XSk7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJtYXRodmFyaWFudFwiLCBcIm1vbm9zcGFjZVwiKTtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxufSk7XG4vKipcbiAqIENvbnZlcnRzIHZlcmIgZ3JvdXAgaW50byBib2R5IHN0cmluZy5cbiAqXG4gKiBcXHZlcmIqIHJlcGxhY2VzIGVhY2ggc3BhY2Ugd2l0aCBhbiBvcGVuIGJveCBcXHUyNDIzXG4gKiBcXHZlcmIgcmVwbGFjZXMgZWFjaCBzcGFjZSB3aXRoIGEgbm8tYnJlYWsgc3BhY2UgXFx4QTBcbiAqL1xuXG52YXIgbWFrZVZlcmIgPSBmdW5jdGlvbiBtYWtlVmVyYihncm91cCkge1xuICByZXR1cm4gZ3JvdXAuYm9keS5yZXBsYWNlKC8gL2csIGdyb3VwLnN0YXIgPyBcIlxcdTI0MjNcIiA6ICdcXHhBMCcpO1xufTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2Z1bmN0aW9ucy5qc1xuLyoqIEluY2x1ZGUgdGhpcyB0byBlbnN1cmUgdGhhdCBhbGwgZnVuY3Rpb25zIGFyZSBkZWZpbmVkLiAqL1xuXG52YXIgZnVuY3Rpb25zID0gX2Z1bmN0aW9ucztcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHNyY19mdW5jdGlvbnMgPSAoZnVuY3Rpb25zKTsgLy8gVE9ETyhrZXZpbmIpOiBoYXZlIGZ1bmN0aW9ucyByZXR1cm4gYW4gb2JqZWN0IGFuZCBjYWxsIGRlZmluZUZ1bmN0aW9uIHdpdGhcbi8vIHRoYXQgb2JqZWN0IGluIHRoaXMgZmlsZSBpbnN0ZWFkIG9mIHJlbHlpbmcgb24gc2lkZS1lZmZlY3RzLlxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiAvLyBEaXNhYmxlZCB1bnRpbCBodHRwczovL2dpdGh1Yi5jb20vS2FUZVgvS2FUZVgvcHVsbC8xNzk0IGlzIG1lcmdlZC5cbi8vIGltcG9ydCBcIi4vZnVuY3Rpb25zL2luY2x1ZGVncmFwaGljc1wiO1xuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9MZXhlci5qc1xuLyoqXG4gKiBUaGUgTGV4ZXIgY2xhc3MgaGFuZGxlcyB0b2tlbml6aW5nIHRoZSBpbnB1dCBpbiB2YXJpb3VzIHdheXMuIFNpbmNlIG91clxuICogcGFyc2VyIGV4cGVjdHMgdXMgdG8gYmUgYWJsZSB0byBiYWNrdHJhY2ssIHRoZSBsZXhlciBhbGxvd3MgbGV4aW5nIGZyb20gYW55XG4gKiBnaXZlbiBzdGFydGluZyBwb2ludC5cbiAqXG4gKiBJdHMgbWFpbiBleHBvc2VkIGZ1bmN0aW9uIGlzIHRoZSBgbGV4YCBmdW5jdGlvbiwgd2hpY2ggdGFrZXMgYSBwb3NpdGlvbiB0b1xuICogbGV4IGZyb20gYW5kIGEgdHlwZSBvZiB0b2tlbiB0byBsZXguIEl0IGRlZmVycyB0byB0aGUgYXBwcm9wcmlhdGUgYF9pbm5lckxleGBcbiAqIGZ1bmN0aW9uLlxuICpcbiAqIFRoZSB2YXJpb3VzIGBfaW5uZXJMZXhgIGZ1bmN0aW9ucyBwZXJmb3JtIHRoZSBhY3R1YWwgbGV4aW5nIG9mIGRpZmZlcmVudFxuICoga2luZHMuXG4gKi9cblxuXG5cblxuLyogVGhlIGZvbGxvd2luZyB0b2tlblJlZ2V4XG4gKiAtIG1hdGNoZXMgdHlwaWNhbCB3aGl0ZXNwYWNlIChidXQgbm90IE5CU1AgZXRjLikgdXNpbmcgaXRzIGZpcnN0IGdyb3VwXG4gKiAtIGRvZXMgbm90IG1hdGNoIGFueSBjb250cm9sIGNoYXJhY3RlciBcXHgwMC1cXHgxZiBleGNlcHQgd2hpdGVzcGFjZVxuICogLSBkb2VzIG5vdCBtYXRjaCBhIGJhcmUgYmFja3NsYXNoXG4gKiAtIG1hdGNoZXMgYW55IEFTQ0lJIGNoYXJhY3RlciBleGNlcHQgdGhvc2UganVzdCBtZW50aW9uZWRcbiAqIC0gZG9lcyBub3QgbWF0Y2ggdGhlIEJNUCBwcml2YXRlIHVzZSBhcmVhIFxcdUUwMDAtXFx1RjhGRlxuICogLSBkb2VzIG5vdCBtYXRjaCBiYXJlIHN1cnJvZ2F0ZSBjb2RlIHVuaXRzXG4gKiAtIG1hdGNoZXMgYW55IEJNUCBjaGFyYWN0ZXIgZXhjZXB0IGZvciB0aG9zZSBqdXN0IGRlc2NyaWJlZFxuICogLSBtYXRjaGVzIGFueSB2YWxpZCBVbmljb2RlIHN1cnJvZ2F0ZSBwYWlyXG4gKiAtIG1hdGNoZXMgYSBiYWNrc2xhc2ggZm9sbG93ZWQgYnkgb25lIG9yIG1vcmUgbGV0dGVyc1xuICogLSBtYXRjaGVzIGEgYmFja3NsYXNoIGZvbGxvd2VkIGJ5IGFueSBCTVAgY2hhcmFjdGVyLCBpbmNsdWRpbmcgbmV3bGluZVxuICogSnVzdCBiZWNhdXNlIHRoZSBMZXhlciBtYXRjaGVzIHNvbWV0aGluZyBkb2Vzbid0IG1lYW4gaXQncyB2YWxpZCBpbnB1dDpcbiAqIElmIHRoZXJlIGlzIG5vIG1hdGNoaW5nIGZ1bmN0aW9uIG9yIHN5bWJvbCBkZWZpbml0aW9uLCB0aGUgUGFyc2VyIHdpbGxcbiAqIHN0aWxsIHJlamVjdCB0aGUgaW5wdXQuXG4gKi9cbnZhciBzcGFjZVJlZ2V4U3RyaW5nID0gXCJbIFxcclxcblxcdF1cIjtcbnZhciBjb250cm9sV29yZFJlZ2V4U3RyaW5nID0gXCJcXFxcXFxcXFthLXpBLVpAXStcIjtcbnZhciBjb250cm9sU3ltYm9sUmVnZXhTdHJpbmcgPSBcIlxcXFxcXFxcW15cXHVEODAwLVxcdURGRkZdXCI7XG52YXIgY29udHJvbFdvcmRXaGl0ZXNwYWNlUmVnZXhTdHJpbmcgPSBcIlwiICsgY29udHJvbFdvcmRSZWdleFN0cmluZyArIHNwYWNlUmVnZXhTdHJpbmcgKyBcIipcIjtcbnZhciBjb250cm9sV29yZFdoaXRlc3BhY2VSZWdleCA9IG5ldyBSZWdFeHAoXCJeKFwiICsgY29udHJvbFdvcmRSZWdleFN0cmluZyArIFwiKVwiICsgc3BhY2VSZWdleFN0cmluZyArIFwiKiRcIik7XG52YXIgY29tYmluaW5nRGlhY3JpdGljYWxNYXJrU3RyaW5nID0gXCJbXFx1MDMwMC1cXHUwMzZGXVwiO1xudmFyIGNvbWJpbmluZ0RpYWNyaXRpY2FsTWFya3NFbmRSZWdleCA9IG5ldyBSZWdFeHAoY29tYmluaW5nRGlhY3JpdGljYWxNYXJrU3RyaW5nICsgXCIrJFwiKTtcbnZhciB0b2tlblJlZ2V4U3RyaW5nID0gXCIoXCIgKyBzcGFjZVJlZ2V4U3RyaW5nICsgXCIrKXxcIiArIC8vIHdoaXRlc3BhY2VcblwiKFshLVxcXFxbXFxcXF0tXFx1MjAyN1xcdTIwMkEtXFx1RDdGRlxcdUY5MDAtXFx1RkZGRl1cIiArICggLy8gc2luZ2xlIGNvZGVwb2ludFxuY29tYmluaW5nRGlhY3JpdGljYWxNYXJrU3RyaW5nICsgXCIqXCIpICsgLy8gLi4ucGx1cyBhY2NlbnRzXG5cInxbXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdXCIgKyAoIC8vIHN1cnJvZ2F0ZSBwYWlyXG5jb21iaW5pbmdEaWFjcml0aWNhbE1hcmtTdHJpbmcgKyBcIipcIikgKyAvLyAuLi5wbHVzIGFjY2VudHNcblwifFxcXFxcXFxcdmVyYlxcXFwqKFteXSkuKj9cXFxcM1wiICsgLy8gXFx2ZXJiKlxuXCJ8XFxcXFxcXFx2ZXJiKFteKmEtekEtWl0pLio/XFxcXDRcIiArICggLy8gXFx2ZXJiIHVuc3RhcnJlZFxuXCJ8XCIgKyBjb250cm9sV29yZFdoaXRlc3BhY2VSZWdleFN0cmluZykgKyAoIC8vIFxcbWFjcm9OYW1lICsgc3BhY2VzXG5cInxcIiArIGNvbnRyb2xTeW1ib2xSZWdleFN0cmluZyArIFwiKVwiKTsgLy8gXFxcXCwgXFwnLCBldGMuXG5cbi8qKiBNYWluIExleGVyIGNsYXNzICovXG5cbnZhciBMZXhlcl9MZXhlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8vIGNhdGVnb3J5IGNvZGVzLCBvbmx5IHN1cHBvcnRzIGNvbW1lbnQgY2hhcmFjdGVycyAoMTQpIGZvciBub3dcbiAgZnVuY3Rpb24gTGV4ZXIoaW5wdXQsIHNldHRpbmdzKSB7XG4gICAgdGhpcy5pbnB1dCA9IHZvaWQgMDtcbiAgICB0aGlzLnNldHRpbmdzID0gdm9pZCAwO1xuICAgIHRoaXMudG9rZW5SZWdleCA9IHZvaWQgMDtcbiAgICB0aGlzLmNhdGNvZGVzID0gdm9pZCAwO1xuICAgIC8vIFNlcGFyYXRlIGFjY2VudHMgZnJvbSBjaGFyYWN0ZXJzXG4gICAgdGhpcy5pbnB1dCA9IGlucHV0O1xuICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICB0aGlzLnRva2VuUmVnZXggPSBuZXcgUmVnRXhwKHRva2VuUmVnZXhTdHJpbmcsICdnJyk7XG4gICAgdGhpcy5jYXRjb2RlcyA9IHtcbiAgICAgIFwiJVwiOiAxNCAvLyBjb21tZW50IGNoYXJhY3RlclxuXG4gICAgfTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBMZXhlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnNldENhdGNvZGUgPSBmdW5jdGlvbiBzZXRDYXRjb2RlKGNoYXIsIGNvZGUpIHtcbiAgICB0aGlzLmNhdGNvZGVzW2NoYXJdID0gY29kZTtcbiAgfVxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBsZXhlcyBhIHNpbmdsZSB0b2tlbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ubGV4ID0gZnVuY3Rpb24gbGV4KCkge1xuICAgIHZhciBpbnB1dCA9IHRoaXMuaW5wdXQ7XG4gICAgdmFyIHBvcyA9IHRoaXMudG9rZW5SZWdleC5sYXN0SW5kZXg7XG5cbiAgICBpZiAocG9zID09PSBpbnB1dC5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBuZXcgVG9rZW5fVG9rZW4oXCJFT0ZcIiwgbmV3IFNvdXJjZUxvY2F0aW9uKHRoaXMsIHBvcywgcG9zKSk7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoID0gdGhpcy50b2tlblJlZ2V4LmV4ZWMoaW5wdXQpO1xuXG4gICAgaWYgKG1hdGNoID09PSBudWxsIHx8IG1hdGNoLmluZGV4ICE9PSBwb3MpIHtcbiAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIlVuZXhwZWN0ZWQgY2hhcmFjdGVyOiAnXCIgKyBpbnB1dFtwb3NdICsgXCInXCIsIG5ldyBUb2tlbl9Ub2tlbihpbnB1dFtwb3NdLCBuZXcgU291cmNlTG9jYXRpb24odGhpcywgcG9zLCBwb3MgKyAxKSkpO1xuICAgIH1cblxuICAgIHZhciB0ZXh0ID0gbWF0Y2hbMl0gfHwgXCIgXCI7XG5cbiAgICBpZiAodGhpcy5jYXRjb2Rlc1t0ZXh0XSA9PT0gMTQpIHtcbiAgICAgIC8vIGNvbW1lbnQgY2hhcmFjdGVyXG4gICAgICB2YXIgbmxJbmRleCA9IGlucHV0LmluZGV4T2YoJ1xcbicsIHRoaXMudG9rZW5SZWdleC5sYXN0SW5kZXgpO1xuXG4gICAgICBpZiAobmxJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgdGhpcy50b2tlblJlZ2V4Lmxhc3RJbmRleCA9IGlucHV0Lmxlbmd0aDsgLy8gRU9GXG5cbiAgICAgICAgdGhpcy5zZXR0aW5ncy5yZXBvcnROb25zdHJpY3QoXCJjb21tZW50QXRFbmRcIiwgXCIlIGNvbW1lbnQgaGFzIG5vIHRlcm1pbmF0aW5nIG5ld2xpbmU7IExhVGVYIHdvdWxkIFwiICsgXCJmYWlsIGJlY2F1c2Ugb2YgY29tbWVudGluZyB0aGUgZW5kIG9mIG1hdGggbW9kZSAoZS5nLiAkKVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudG9rZW5SZWdleC5sYXN0SW5kZXggPSBubEluZGV4ICsgMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMubGV4KCk7XG4gICAgfSAvLyBUcmltIGFueSB0cmFpbGluZyB3aGl0ZXNwYWNlIGZyb20gY29udHJvbCB3b3JkIG1hdGNoXG5cblxuICAgIHZhciBjb250cm9sTWF0Y2ggPSB0ZXh0Lm1hdGNoKGNvbnRyb2xXb3JkV2hpdGVzcGFjZVJlZ2V4KTtcblxuICAgIGlmIChjb250cm9sTWF0Y2gpIHtcbiAgICAgIHRleHQgPSBjb250cm9sTWF0Y2hbMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUb2tlbl9Ub2tlbih0ZXh0LCBuZXcgU291cmNlTG9jYXRpb24odGhpcywgcG9zLCB0aGlzLnRva2VuUmVnZXgubGFzdEluZGV4KSk7XG4gIH07XG5cbiAgcmV0dXJuIExleGVyO1xufSgpO1xuXG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL05hbWVzcGFjZS5qc1xuLyoqXG4gKiBBIGBOYW1lc3BhY2VgIHJlZmVycyB0byBhIHNwYWNlIG9mIG5hbWVhYmxlIHRoaW5ncyBsaWtlIG1hY3JvcyBvciBsZW5ndGhzLFxuICogd2hpY2ggY2FuIGJlIGBzZXRgIGVpdGhlciBnbG9iYWxseSBvciBsb2NhbCB0byBhIG5lc3RlZCBncm91cCwgdXNpbmcgYW5cbiAqIHVuZG8gc3RhY2sgc2ltaWxhciB0byBob3cgVGVYIGltcGxlbWVudHMgdGhpcyBmdW5jdGlvbmFsaXR5LlxuICogUGVyZm9ybWFuY2Utd2lzZSwgYGdldGAgYW5kIGxvY2FsIGBzZXRgIHRha2UgY29uc3RhbnQgdGltZSwgd2hpbGUgZ2xvYmFsXG4gKiBgc2V0YCB0YWtlcyB0aW1lIHByb3BvcnRpb25hbCB0byB0aGUgZGVwdGggb2YgZ3JvdXAgbmVzdGluZy5cbiAqL1xuXG5cbnZhciBOYW1lc3BhY2VfTmFtZXNwYWNlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIEJvdGggYXJndW1lbnRzIGFyZSBvcHRpb25hbC4gIFRoZSBmaXJzdCBhcmd1bWVudCBpcyBhbiBvYmplY3Qgb2ZcbiAgICogYnVpbHQtaW4gbWFwcGluZ3Mgd2hpY2ggbmV2ZXIgY2hhbmdlLiAgVGhlIHNlY29uZCBhcmd1bWVudCBpcyBhbiBvYmplY3RcbiAgICogb2YgaW5pdGlhbCAoZ2xvYmFsLWxldmVsKSBtYXBwaW5ncywgd2hpY2ggd2lsbCBjb25zdGFudGx5IGNoYW5nZVxuICAgKiBhY2NvcmRpbmcgdG8gYW55IGdsb2JhbC90b3AtbGV2ZWwgYHNldGBzIGRvbmUuXG4gICAqL1xuICBmdW5jdGlvbiBOYW1lc3BhY2UoYnVpbHRpbnMsIGdsb2JhbE1hY3Jvcykge1xuICAgIGlmIChidWlsdGlucyA9PT0gdm9pZCAwKSB7XG4gICAgICBidWlsdGlucyA9IHt9O1xuICAgIH1cblxuICAgIGlmIChnbG9iYWxNYWNyb3MgPT09IHZvaWQgMCkge1xuICAgICAgZ2xvYmFsTWFjcm9zID0ge307XG4gICAgfVxuXG4gICAgdGhpcy5jdXJyZW50ID0gdm9pZCAwO1xuICAgIHRoaXMuYnVpbHRpbnMgPSB2b2lkIDA7XG4gICAgdGhpcy51bmRlZlN0YWNrID0gdm9pZCAwO1xuICAgIHRoaXMuY3VycmVudCA9IGdsb2JhbE1hY3JvcztcbiAgICB0aGlzLmJ1aWx0aW5zID0gYnVpbHRpbnM7XG4gICAgdGhpcy51bmRlZlN0YWNrID0gW107XG4gIH1cbiAgLyoqXG4gICAqIFN0YXJ0IGEgbmV3IG5lc3RlZCBncm91cCwgYWZmZWN0aW5nIGZ1dHVyZSBsb2NhbCBgc2V0YHMuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IE5hbWVzcGFjZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmJlZ2luR3JvdXAgPSBmdW5jdGlvbiBiZWdpbkdyb3VwKCkge1xuICAgIHRoaXMudW5kZWZTdGFjay5wdXNoKHt9KTtcbiAgfVxuICAvKipcbiAgICogRW5kIGN1cnJlbnQgbmVzdGVkIGdyb3VwLCByZXN0b3JpbmcgdmFsdWVzIGJlZm9yZSB0aGUgZ3JvdXAgYmVnYW4uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmVuZEdyb3VwID0gZnVuY3Rpb24gZW5kR3JvdXAoKSB7XG4gICAgaWYgKHRoaXMudW5kZWZTdGFjay5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIlVuYmFsYW5jZWQgbmFtZXNwYWNlIGRlc3RydWN0aW9uOiBhdHRlbXB0IFwiICsgXCJ0byBwb3AgZ2xvYmFsIG5hbWVzcGFjZTsgcGxlYXNlIHJlcG9ydCB0aGlzIGFzIGEgYnVnXCIpO1xuICAgIH1cblxuICAgIHZhciB1bmRlZnMgPSB0aGlzLnVuZGVmU3RhY2sucG9wKCk7XG5cbiAgICBmb3IgKHZhciB1bmRlZiBpbiB1bmRlZnMpIHtcbiAgICAgIGlmICh1bmRlZnMuaGFzT3duUHJvcGVydHkodW5kZWYpKSB7XG4gICAgICAgIGlmICh1bmRlZnNbdW5kZWZdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5jdXJyZW50W3VuZGVmXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmN1cnJlbnRbdW5kZWZdID0gdW5kZWZzW3VuZGVmXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogRGV0ZWN0IHdoZXRoZXIgYG5hbWVgIGhhcyBhIGRlZmluaXRpb24uICBFcXVpdmFsZW50IHRvXG4gICAqIGBnZXQobmFtZSkgIT0gbnVsbGAuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhcyA9IGZ1bmN0aW9uIGhhcyhuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudC5oYXNPd25Qcm9wZXJ0eShuYW1lKSB8fCB0aGlzLmJ1aWx0aW5zLmhhc093blByb3BlcnR5KG5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnQgdmFsdWUgb2YgYSBuYW1lLCBvciBgdW5kZWZpbmVkYCBpZiB0aGVyZSBpcyBubyB2YWx1ZS5cbiAgICpcbiAgICogTm90ZTogRG8gbm90IHVzZSBgaWYgKG5hbWVzcGFjZS5nZXQoLi4uKSlgIHRvIGRldGVjdCB3aGV0aGVyIGEgbWFjcm9cbiAgICogaXMgZGVmaW5lZCwgYXMgdGhlIGRlZmluaXRpb24gbWF5IGJlIHRoZSBlbXB0eSBzdHJpbmcgd2hpY2ggZXZhbHVhdGVzXG4gICAqIHRvIGBmYWxzZWAgaW4gSmF2YVNjcmlwdC4gIFVzZSBgaWYgKG5hbWVzcGFjZS5nZXQoLi4uKSAhPSBudWxsKWAgb3JcbiAgICogYGlmIChuYW1lc3BhY2UuaGFzKC4uLikpYC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0ID0gZnVuY3Rpb24gZ2V0KG5hbWUpIHtcbiAgICBpZiAodGhpcy5jdXJyZW50Lmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICByZXR1cm4gdGhpcy5jdXJyZW50W25hbWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5idWlsdGluc1tuYW1lXTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgY3VycmVudCB2YWx1ZSBvZiBhIG5hbWUsIGFuZCBvcHRpb25hbGx5IHNldCBpdCBnbG9iYWxseSB0b28uXG4gICAqIExvY2FsIHNldCgpIHNldHMgdGhlIGN1cnJlbnQgdmFsdWUgYW5kICh3aGVuIGFwcHJvcHJpYXRlKSBhZGRzIGFuIHVuZG9cbiAgICogb3BlcmF0aW9uIHRvIHRoZSB1bmRvIHN0YWNrLiAgR2xvYmFsIHNldCgpIG1heSBjaGFuZ2UgdGhlIHVuZG9cbiAgICogb3BlcmF0aW9uIGF0IGV2ZXJ5IGxldmVsLCBzbyB0YWtlcyB0aW1lIGxpbmVhciBpbiB0aGVpciBudW1iZXIuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNldCA9IGZ1bmN0aW9uIHNldChuYW1lLCB2YWx1ZSwgZ2xvYmFsKSB7XG4gICAgaWYgKGdsb2JhbCA9PT0gdm9pZCAwKSB7XG4gICAgICBnbG9iYWwgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAvLyBHbG9iYWwgc2V0IGlzIGVxdWl2YWxlbnQgdG8gc2V0dGluZyBpbiBhbGwgZ3JvdXBzLiAgU2ltdWxhdGUgdGhpc1xuICAgICAgLy8gYnkgZGVzdHJveWluZyBhbnkgdW5kb3MgY3VycmVudGx5IHNjaGVkdWxlZCBmb3IgdGhpcyBuYW1lLFxuICAgICAgLy8gYW5kIGFkZGluZyBhbiB1bmRvIHdpdGggdGhlICpuZXcqIHZhbHVlIChpbiBjYXNlIGl0IGxhdGVyIGdldHNcbiAgICAgIC8vIGxvY2FsbHkgcmVzZXQgd2l0aGluIHRoaXMgZW52aXJvbm1lbnQpLlxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnVuZGVmU3RhY2subGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZGVsZXRlIHRoaXMudW5kZWZTdGFja1tpXVtuYW1lXTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMudW5kZWZTdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMudW5kZWZTdGFja1t0aGlzLnVuZGVmU3RhY2subGVuZ3RoIC0gMV1bbmFtZV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVW5kbyB0aGlzIHNldCBhdCBlbmQgb2YgdGhpcyBncm91cCAocG9zc2libHkgdG8gYHVuZGVmaW5lZGApLFxuICAgICAgLy8gdW5sZXNzIGFuIHVuZG8gaXMgYWxyZWFkeSBpbiBwbGFjZSwgaW4gd2hpY2ggY2FzZSB0aGF0IG9sZGVyXG4gICAgICAvLyB2YWx1ZSBpcyB0aGUgY29ycmVjdCBvbmUuXG4gICAgICB2YXIgdG9wID0gdGhpcy51bmRlZlN0YWNrW3RoaXMudW5kZWZTdGFjay5sZW5ndGggLSAxXTtcblxuICAgICAgaWYgKHRvcCAmJiAhdG9wLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIHRvcFtuYW1lXSA9IHRoaXMuY3VycmVudFtuYW1lXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmN1cnJlbnRbbmFtZV0gPSB2YWx1ZTtcbiAgfTtcblxuICByZXR1cm4gTmFtZXNwYWNlO1xufSgpO1xuXG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL21hY3Jvcy5qc1xuLyoqXG4gKiBQcmVkZWZpbmVkIG1hY3JvcyBmb3IgS2FUZVguXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGRlZmluZSBzb21lIGNvbW1hbmRzIGluIHRlcm1zIG9mIG90aGVycy5cbiAqL1xuXG5cblxuXG5cbnZhciBidWlsdGluTWFjcm9zID0ge307XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBtYWNyb3MgPSAoYnVpbHRpbk1hY3Jvcyk7IC8vIFRoaXMgZnVuY3Rpb24gbWlnaHQgb25lIGRheSBhY2NlcHQgYW4gYWRkaXRpb25hbCBhcmd1bWVudCBhbmQgZG8gbW9yZSB0aGluZ3MuXG5cbmZ1bmN0aW9uIGRlZmluZU1hY3JvKG5hbWUsIGJvZHkpIHtcbiAgYnVpbHRpbk1hY3Jvc1tuYW1lXSA9IGJvZHk7XG59IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIG1hY3JvIHRvb2xzXG4vLyBMYVRlWCdzIFxcQGZpcnN0b2Z0d297IzF9eyMyfSBleHBhbmRzIHRvICMxLCBza2lwcGluZyAjMlxuLy8gVGVYIHNvdXJjZTogXFxsb25nXFxkZWZcXEBmaXJzdG9mdHdvIzEjMnsjMX1cblxuZGVmaW5lTWFjcm8oXCJcXFxcQGZpcnN0b2Z0d29cIiwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgdmFyIGFyZ3MgPSBjb250ZXh0LmNvbnN1bWVBcmdzKDIpO1xuICByZXR1cm4ge1xuICAgIHRva2VuczogYXJnc1swXSxcbiAgICBudW1BcmdzOiAwXG4gIH07XG59KTsgLy8gTGFUZVgncyBcXEBzZWNvbmRvZnR3b3sjMX17IzJ9IGV4cGFuZHMgdG8gIzIsIHNraXBwaW5nICMxXG4vLyBUZVggc291cmNlOiBcXGxvbmdcXGRlZlxcQHNlY29uZG9mdHdvIzEjMnsjMn1cblxuZGVmaW5lTWFjcm8oXCJcXFxcQHNlY29uZG9mdHdvXCIsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gIHZhciBhcmdzID0gY29udGV4dC5jb25zdW1lQXJncygyKTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbnM6IGFyZ3NbMV0sXG4gICAgbnVtQXJnczogMFxuICB9O1xufSk7IC8vIExhVGVYJ3MgXFxAaWZuZXh0Y2hhcnsjMX17IzJ9eyMzfSBsb29rcyBhaGVhZCB0byB0aGUgbmV4dCAodW5leHBhbmRlZClcbi8vIHN5bWJvbC4gIElmIGl0IG1hdGNoZXMgIzEsIHRoZW4gdGhlIG1hY3JvIGV4cGFuZHMgdG8gIzI7IG90aGVyd2lzZSwgIzMuXG4vLyBOb3RlLCBob3dldmVyLCB0aGF0IGl0IGRvZXMgbm90IGNvbnN1bWUgdGhlIG5leHQgc3ltYm9sIGluIGVpdGhlciBjYXNlLlxuXG5kZWZpbmVNYWNybyhcIlxcXFxAaWZuZXh0Y2hhclwiLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICB2YXIgYXJncyA9IGNvbnRleHQuY29uc3VtZUFyZ3MoMyk7IC8vIHN5bWJvbCwgaWYsIGVsc2VcblxuICB2YXIgbmV4dFRva2VuID0gY29udGV4dC5mdXR1cmUoKTtcblxuICBpZiAoYXJnc1swXS5sZW5ndGggPT09IDEgJiYgYXJnc1swXVswXS50ZXh0ID09PSBuZXh0VG9rZW4udGV4dCkge1xuICAgIHJldHVybiB7XG4gICAgICB0b2tlbnM6IGFyZ3NbMV0sXG4gICAgICBudW1BcmdzOiAwXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgdG9rZW5zOiBhcmdzWzJdLFxuICAgICAgbnVtQXJnczogMFxuICAgIH07XG4gIH1cbn0pOyAvLyBMYVRlWCdzIFxcQGlmc3RhcnsjMX17IzJ9IGxvb2tzIGFoZWFkIHRvIHRoZSBuZXh0ICh1bmV4cGFuZGVkKSBzeW1ib2wuXG4vLyBJZiBpdCBpcyBgKmAsIHRoZW4gaXQgY29uc3VtZXMgdGhlIHN5bWJvbCwgYW5kIHRoZSBtYWNybyBleHBhbmRzIHRvICMxO1xuLy8gb3RoZXJ3aXNlLCB0aGUgbWFjcm8gZXhwYW5kcyB0byAjMiAod2l0aG91dCBjb25zdW1pbmcgdGhlIHN5bWJvbCkuXG4vLyBUZVggc291cmNlOiBcXGRlZlxcQGlmc3RhciMxe1xcQGlmbmV4dGNoYXIgKntcXEBmaXJzdG9mdHdveyMxfX19XG5cbmRlZmluZU1hY3JvKFwiXFxcXEBpZnN0YXJcIiwgXCJcXFxcQGlmbmV4dGNoYXIgKntcXFxcQGZpcnN0b2Z0d297IzF9fVwiKTsgLy8gTGFUZVgncyBcXFRleHRPck1hdGh7IzF9eyMyfSBleHBhbmRzIHRvICMxIGluIHRleHQgbW9kZSwgIzIgaW4gbWF0aCBtb2RlXG5cbmRlZmluZU1hY3JvKFwiXFxcXFRleHRPck1hdGhcIiwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgdmFyIGFyZ3MgPSBjb250ZXh0LmNvbnN1bWVBcmdzKDIpO1xuXG4gIGlmIChjb250ZXh0Lm1vZGUgPT09ICd0ZXh0Jykge1xuICAgIHJldHVybiB7XG4gICAgICB0b2tlbnM6IGFyZ3NbMF0sXG4gICAgICBudW1BcmdzOiAwXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgdG9rZW5zOiBhcmdzWzFdLFxuICAgICAgbnVtQXJnczogMFxuICAgIH07XG4gIH1cbn0pOyAvLyBMb29rdXAgdGFibGUgZm9yIHBhcnNpbmcgbnVtYmVycyBpbiBiYXNlIDggdGhyb3VnaCAxNlxuXG52YXIgZGlnaXRUb051bWJlciA9IHtcbiAgXCIwXCI6IDAsXG4gIFwiMVwiOiAxLFxuICBcIjJcIjogMixcbiAgXCIzXCI6IDMsXG4gIFwiNFwiOiA0LFxuICBcIjVcIjogNSxcbiAgXCI2XCI6IDYsXG4gIFwiN1wiOiA3LFxuICBcIjhcIjogOCxcbiAgXCI5XCI6IDksXG4gIFwiYVwiOiAxMCxcbiAgXCJBXCI6IDEwLFxuICBcImJcIjogMTEsXG4gIFwiQlwiOiAxMSxcbiAgXCJjXCI6IDEyLFxuICBcIkNcIjogMTIsXG4gIFwiZFwiOiAxMyxcbiAgXCJEXCI6IDEzLFxuICBcImVcIjogMTQsXG4gIFwiRVwiOiAxNCxcbiAgXCJmXCI6IDE1LFxuICBcIkZcIjogMTVcbn07IC8vIFRlWCBcXGNoYXIgbWFrZXMgYSBsaXRlcmFsIGNoYXJhY3RlciAoY2F0Y29kZSAxMikgdXNpbmcgdGhlIGZvbGxvd2luZyBmb3Jtczpcbi8vIChzZWUgVGhlIFRlWEJvb2ssIHAuIDQzKVxuLy8gICBcXGNoYXIxMjMgIC0tIGRlY2ltYWxcbi8vICAgXFxjaGFyJzEyMyAtLSBvY3RhbFxuLy8gICBcXGNoYXJcIjEyMyAtLSBoZXhcbi8vICAgXFxjaGFyYHggICAtLSBjaGFyYWN0ZXIgdGhhdCBjYW4gYmUgd3JpdHRlbiAoaS5lLiBpc24ndCBhY3RpdmUpXG4vLyAgIFxcY2hhcmBcXHggIC0tIGNoYXJhY3RlciB0aGF0IGNhbm5vdCBiZSB3cml0dGVuIChlLmcuICUpXG4vLyBUaGVzZSBhbGwgcmVmZXIgdG8gY2hhcmFjdGVycyBmcm9tIHRoZSBmb250LCBzbyB3ZSB0dXJuIHRoZW0gaW50byBzcGVjaWFsXG4vLyBjYWxscyB0byBhIGZ1bmN0aW9uIFxcQGNoYXIgZGVhbHQgd2l0aCBpbiB0aGUgUGFyc2VyLlxuXG5kZWZpbmVNYWNybyhcIlxcXFxjaGFyXCIsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gIHZhciB0b2tlbiA9IGNvbnRleHQucG9wVG9rZW4oKTtcbiAgdmFyIGJhc2U7XG4gIHZhciBudW1iZXIgPSAnJztcblxuICBpZiAodG9rZW4udGV4dCA9PT0gXCInXCIpIHtcbiAgICBiYXNlID0gODtcbiAgICB0b2tlbiA9IGNvbnRleHQucG9wVG9rZW4oKTtcbiAgfSBlbHNlIGlmICh0b2tlbi50ZXh0ID09PSAnXCInKSB7XG4gICAgYmFzZSA9IDE2O1xuICAgIHRva2VuID0gY29udGV4dC5wb3BUb2tlbigpO1xuICB9IGVsc2UgaWYgKHRva2VuLnRleHQgPT09IFwiYFwiKSB7XG4gICAgdG9rZW4gPSBjb250ZXh0LnBvcFRva2VuKCk7XG5cbiAgICBpZiAodG9rZW4udGV4dFswXSA9PT0gXCJcXFxcXCIpIHtcbiAgICAgIG51bWJlciA9IHRva2VuLnRleHQuY2hhckNvZGVBdCgxKTtcbiAgICB9IGVsc2UgaWYgKHRva2VuLnRleHQgPT09IFwiRU9GXCIpIHtcbiAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIlxcXFxjaGFyYCBtaXNzaW5nIGFyZ3VtZW50XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBudW1iZXIgPSB0b2tlbi50ZXh0LmNoYXJDb2RlQXQoMCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJhc2UgPSAxMDtcbiAgfVxuXG4gIGlmIChiYXNlKSB7XG4gICAgLy8gUGFyc2UgYSBudW1iZXIgaW4gdGhlIGdpdmVuIGJhc2UsIHN0YXJ0aW5nIHdpdGggZmlyc3QgYHRva2VuYC5cbiAgICBudW1iZXIgPSBkaWdpdFRvTnVtYmVyW3Rva2VuLnRleHRdO1xuXG4gICAgaWYgKG51bWJlciA9PSBudWxsIHx8IG51bWJlciA+PSBiYXNlKSB7XG4gICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJJbnZhbGlkIGJhc2UtXCIgKyBiYXNlICsgXCIgZGlnaXQgXCIgKyB0b2tlbi50ZXh0KTtcbiAgICB9XG5cbiAgICB2YXIgZGlnaXQ7XG5cbiAgICB3aGlsZSAoKGRpZ2l0ID0gZGlnaXRUb051bWJlcltjb250ZXh0LmZ1dHVyZSgpLnRleHRdKSAhPSBudWxsICYmIGRpZ2l0IDwgYmFzZSkge1xuICAgICAgbnVtYmVyICo9IGJhc2U7XG4gICAgICBudW1iZXIgKz0gZGlnaXQ7XG4gICAgICBjb250ZXh0LnBvcFRva2VuKCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFwiXFxcXEBjaGFye1wiICsgbnVtYmVyICsgXCJ9XCI7XG59KTsgLy8gQmFzaWMgc3VwcG9ydCBmb3IgbWFjcm8gZGVmaW5pdGlvbnM6XG4vLyAgICAgXFxkZWZcXG1hY3Jve2V4cGFuc2lvbn1cbi8vICAgICBcXGRlZlxcbWFjcm8jMXtleHBhbnNpb259XG4vLyAgICAgXFxkZWZcXG1hY3JvIzEjMntleHBhbnNpb259XG4vLyAgICAgXFxkZWZcXG1hY3JvIzEjMiMzIzQjNSM2IzcjOCM5e2V4cGFuc2lvbn1cbi8vIEFsc28gdGhlIFxcZ2RlZiBhbmQgXFxnbG9iYWxcXGRlZiBlcXVpdmFsZW50c1xuXG52YXIgbWFjcm9zX2RlZiA9IGZ1bmN0aW9uIGRlZihjb250ZXh0LCBnbG9iYWwpIHtcbiAgdmFyIGFyZyA9IGNvbnRleHQuY29uc3VtZUFyZ3MoMSlbMF07XG5cbiAgaWYgKGFyZy5sZW5ndGggIT09IDEpIHtcbiAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJcXFxcZ2RlZidzIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBtYWNybyBuYW1lXCIpO1xuICB9XG5cbiAgdmFyIG5hbWUgPSBhcmdbMF0udGV4dDsgLy8gQ291bnQgYXJndW1lbnQgc3BlY2lmaWVycywgYW5kIGNoZWNrIHRoZXkgYXJlIGluIHRoZSBvcmRlciAjMSAjMiAuLi5cblxuICB2YXIgbnVtQXJncyA9IDA7XG4gIGFyZyA9IGNvbnRleHQuY29uc3VtZUFyZ3MoMSlbMF07XG5cbiAgd2hpbGUgKGFyZy5sZW5ndGggPT09IDEgJiYgYXJnWzBdLnRleHQgPT09IFwiI1wiKSB7XG4gICAgYXJnID0gY29udGV4dC5jb25zdW1lQXJncygxKVswXTtcblxuICAgIGlmIChhcmcubGVuZ3RoICE9PSAxKSB7XG4gICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50IG51bWJlciBsZW5ndGggXFxcIlwiICsgYXJnLmxlbmd0aCArIFwiXFxcIlwiKTtcbiAgICB9XG5cbiAgICBpZiAoIS9eWzEtOV0kLy50ZXN0KGFyZ1swXS50ZXh0KSkge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiSW52YWxpZCBhcmd1bWVudCBudW1iZXIgXFxcIlwiICsgYXJnWzBdLnRleHQgKyBcIlxcXCJcIik7XG4gICAgfVxuXG4gICAgbnVtQXJncysrO1xuXG4gICAgaWYgKHBhcnNlSW50KGFyZ1swXS50ZXh0KSAhPT0gbnVtQXJncykge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiQXJndW1lbnQgbnVtYmVyIFxcXCJcIiArIGFyZ1swXS50ZXh0ICsgXCJcXFwiIG91dCBvZiBvcmRlclwiKTtcbiAgICB9XG5cbiAgICBhcmcgPSBjb250ZXh0LmNvbnN1bWVBcmdzKDEpWzBdO1xuICB9IC8vIEZpbmFsIGFyZyBpcyB0aGUgZXhwYW5zaW9uIG9mIHRoZSBtYWNyb1xuXG5cbiAgY29udGV4dC5tYWNyb3Muc2V0KG5hbWUsIHtcbiAgICB0b2tlbnM6IGFyZyxcbiAgICBudW1BcmdzOiBudW1BcmdzXG4gIH0sIGdsb2JhbCk7XG4gIHJldHVybiAnJztcbn07XG5cbmRlZmluZU1hY3JvKFwiXFxcXGdkZWZcIiwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgcmV0dXJuIG1hY3Jvc19kZWYoY29udGV4dCwgdHJ1ZSk7XG59KTtcbmRlZmluZU1hY3JvKFwiXFxcXGRlZlwiLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICByZXR1cm4gbWFjcm9zX2RlZihjb250ZXh0LCBmYWxzZSk7XG59KTtcbmRlZmluZU1hY3JvKFwiXFxcXGdsb2JhbFwiLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICB2YXIgbmV4dCA9IGNvbnRleHQuY29uc3VtZUFyZ3MoMSlbMF07XG5cbiAgaWYgKG5leHQubGVuZ3RoICE9PSAxKSB7XG4gICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiSW52YWxpZCBjb21tYW5kIGFmdGVyIFxcXFxnbG9iYWxcIik7XG4gIH1cblxuICB2YXIgY29tbWFuZCA9IG5leHRbMF0udGV4dDsgLy8gVE9ETzogU2hvdWxkIGV4cGFuZCBjb21tYW5kXG5cbiAgaWYgKGNvbW1hbmQgPT09IFwiXFxcXGRlZlwiKSB7XG4gICAgLy8gXFxnbG9iYWxcXGRlZiBpcyBlcXVpdmFsZW50IHRvIFxcZ2RlZlxuICAgIHJldHVybiBtYWNyb3NfZGVmKGNvbnRleHQsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIkludmFsaWQgY29tbWFuZCAnXCIgKyBjb21tYW5kICsgXCInIGFmdGVyIFxcXFxnbG9iYWxcIik7XG4gIH1cbn0pOyAvLyBcXG5ld2NvbW1hbmR7XFxtYWNyb31bYXJnc117ZGVmaW5pdGlvbn1cbi8vIFxccmVuZXdjb21tYW5ke1xcbWFjcm99W2FyZ3Nde2RlZmluaXRpb259XG4vLyBUT0RPOiBPcHRpb25hbCBhcmd1bWVudHM6IFxcbmV3Y29tbWFuZHtcXG1hY3JvfVthcmdzXVtkZWZhdWx0XXtkZWZpbml0aW9ufVxuXG52YXIgbWFjcm9zX25ld2NvbW1hbmQgPSBmdW5jdGlvbiBuZXdjb21tYW5kKGNvbnRleHQsIGV4aXN0c09LLCBub25leGlzdHNPSykge1xuICB2YXIgYXJnID0gY29udGV4dC5jb25zdW1lQXJncygxKVswXTtcblxuICBpZiAoYXJnLmxlbmd0aCAhPT0gMSkge1xuICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIlxcXFxuZXdjb21tYW5kJ3MgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIG1hY3JvIG5hbWVcIik7XG4gIH1cblxuICB2YXIgbmFtZSA9IGFyZ1swXS50ZXh0O1xuICB2YXIgZXhpc3RzID0gY29udGV4dC5pc0RlZmluZWQobmFtZSk7XG5cbiAgaWYgKGV4aXN0cyAmJiAhZXhpc3RzT0spIHtcbiAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJcXFxcbmV3Y29tbWFuZHtcIiArIG5hbWUgKyBcIn0gYXR0ZW1wdGluZyB0byByZWRlZmluZSBcIiArIChuYW1lICsgXCI7IHVzZSBcXFxccmVuZXdjb21tYW5kXCIpKTtcbiAgfVxuXG4gIGlmICghZXhpc3RzICYmICFub25leGlzdHNPSykge1xuICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIlxcXFxyZW5ld2NvbW1hbmR7XCIgKyBuYW1lICsgXCJ9IHdoZW4gY29tbWFuZCBcIiArIG5hbWUgKyBcIiBcIiArIFwiZG9lcyBub3QgeWV0IGV4aXN0OyB1c2UgXFxcXG5ld2NvbW1hbmRcIik7XG4gIH1cblxuICB2YXIgbnVtQXJncyA9IDA7XG4gIGFyZyA9IGNvbnRleHQuY29uc3VtZUFyZ3MoMSlbMF07XG5cbiAgaWYgKGFyZy5sZW5ndGggPT09IDEgJiYgYXJnWzBdLnRleHQgPT09IFwiW1wiKSB7XG4gICAgdmFyIGFyZ1RleHQgPSAnJztcbiAgICB2YXIgdG9rZW4gPSBjb250ZXh0LmV4cGFuZE5leHRUb2tlbigpO1xuXG4gICAgd2hpbGUgKHRva2VuLnRleHQgIT09IFwiXVwiICYmIHRva2VuLnRleHQgIT09IFwiRU9GXCIpIHtcbiAgICAgIC8vIFRPRE86IFNob3VsZCBwcm9wZXJseSBleHBhbmQgYXJnLCBlLmcuLCBpZ25vcmUge31zXG4gICAgICBhcmdUZXh0ICs9IHRva2VuLnRleHQ7XG4gICAgICB0b2tlbiA9IGNvbnRleHQuZXhwYW5kTmV4dFRva2VuKCk7XG4gICAgfVxuXG4gICAgaWYgKCFhcmdUZXh0Lm1hdGNoKC9eXFxzKlswLTldK1xccyokLykpIHtcbiAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIkludmFsaWQgbnVtYmVyIG9mIGFyZ3VtZW50czogXCIgKyBhcmdUZXh0KTtcbiAgICB9XG5cbiAgICBudW1BcmdzID0gcGFyc2VJbnQoYXJnVGV4dCk7XG4gICAgYXJnID0gY29udGV4dC5jb25zdW1lQXJncygxKVswXTtcbiAgfSAvLyBGaW5hbCBhcmcgaXMgdGhlIGV4cGFuc2lvbiBvZiB0aGUgbWFjcm9cblxuXG4gIGNvbnRleHQubWFjcm9zLnNldChuYW1lLCB7XG4gICAgdG9rZW5zOiBhcmcsXG4gICAgbnVtQXJnczogbnVtQXJnc1xuICB9KTtcbiAgcmV0dXJuICcnO1xufTtcblxuZGVmaW5lTWFjcm8oXCJcXFxcbmV3Y29tbWFuZFwiLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICByZXR1cm4gbWFjcm9zX25ld2NvbW1hbmQoY29udGV4dCwgZmFsc2UsIHRydWUpO1xufSk7XG5kZWZpbmVNYWNybyhcIlxcXFxyZW5ld2NvbW1hbmRcIiwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgcmV0dXJuIG1hY3Jvc19uZXdjb21tYW5kKGNvbnRleHQsIHRydWUsIGZhbHNlKTtcbn0pO1xuZGVmaW5lTWFjcm8oXCJcXFxccHJvdmlkZWNvbW1hbmRcIiwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgcmV0dXJuIG1hY3Jvc19uZXdjb21tYW5kKGNvbnRleHQsIHRydWUsIHRydWUpO1xufSk7IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEdyb3VwaW5nXG4vLyBcXGxldFxcYmdyb3VwPXsgXFxsZXRcXGVncm91cD19XG5cbmRlZmluZU1hY3JvKFwiXFxcXGJncm91cFwiLCBcIntcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxlZ3JvdXBcIiwgXCJ9XCIpOyAvLyBTeW1ib2xzIGZyb20gbGF0ZXgubHR4OlxuLy8gXFxkZWZcXGxxe2B9XG4vLyBcXGRlZlxccnF7J31cbi8vIFxcZGVmIFxcYWEge1xcciBhfVxuLy8gXFxkZWYgXFxBQSB7XFxyIEF9XG5cbmRlZmluZU1hY3JvKFwiXFxcXGxxXCIsIFwiYFwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHJxXCIsIFwiJ1wiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGFhXCIsIFwiXFxcXHIgYVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXEFBXCIsIFwiXFxcXHIgQVwiKTsgLy8gQ29weXJpZ2h0IChDKSBhbmQgcmVnaXN0ZXJlZCAoUikgc3ltYm9scy4gVXNlIHJhdyBzeW1ib2wgaW4gTWF0aE1MLlxuLy8gXFxEZWNsYXJlVGV4dENvbW1hbmREZWZhdWx0e1xcdGV4dGNvcHlyaWdodH17XFx0ZXh0Y2lyY2xlZHtjfX1cbi8vIFxcRGVjbGFyZVRleHRDb21tYW5kRGVmYXVsdHtcXHRleHRyZWdpc3RlcmVkfXtcXHRleHRjaXJjbGVkeyVcbi8vICAgICAgXFxjaGVja0BtYXRoZm9udHNcXGZvbnRzaXplXFxzZkBzaXplXFx6QFxcbWF0aEBmb250c2ZhbHNlXFxzZWxlY3Rmb250IFJ9fVxuLy8gXFxEZWNsYXJlUm9idXN0Q29tbWFuZHtcXGNvcHlyaWdodH17JVxuLy8gICAgXFxpZm1tb2Rle1xcbmZzc0B0ZXh0e1xcdGV4dGNvcHlyaWdodH19XFxlbHNlXFx0ZXh0Y29weXJpZ2h0XFxmaX1cblxuZGVmaW5lTWFjcm8oXCJcXFxcdGV4dGNvcHlyaWdodFwiLCBcIlxcXFxodG1sQG1hdGhtbHtcXFxcdGV4dGNpcmNsZWR7Y319e1xcXFxjaGFyYMKpfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGNvcHlyaWdodFwiLCBcIlxcXFxUZXh0T3JNYXRoe1xcXFx0ZXh0Y29weXJpZ2h0fXtcXFxcdGV4dHtcXFxcdGV4dGNvcHlyaWdodH19XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcdGV4dHJlZ2lzdGVyZWRcIiwgXCJcXFxcaHRtbEBtYXRobWx7XFxcXHRleHRjaXJjbGVke1xcXFxzY3JpcHRzaXplIFJ9fXtcXFxcY2hhcmDCrn1cIik7IC8vIENoYXJhY3RlcnMgb21pdHRlZCBmcm9tIFVuaWNvZGUgcmFuZ2UgMUQ0MDDigJMxRDdGRlxuXG5kZWZpbmVNYWNybyhcIlxcdTIxMkNcIiwgXCJcXFxcbWF0aHNjcntCfVwiKTsgLy8gc2NyaXB0XG5cbmRlZmluZU1hY3JvKFwiXFx1MjEzMFwiLCBcIlxcXFxtYXRoc2Nye0V9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXHUyMTMxXCIsIFwiXFxcXG1hdGhzY3J7Rn1cIik7XG5kZWZpbmVNYWNybyhcIlxcdTIxMEJcIiwgXCJcXFxcbWF0aHNjcntIfVwiKTtcbmRlZmluZU1hY3JvKFwiXFx1MjExMFwiLCBcIlxcXFxtYXRoc2Nye0l9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXHUyMTEyXCIsIFwiXFxcXG1hdGhzY3J7TH1cIik7XG5kZWZpbmVNYWNybyhcIlxcdTIxMzNcIiwgXCJcXFxcbWF0aHNjcntNfVwiKTtcbmRlZmluZU1hY3JvKFwiXFx1MjExQlwiLCBcIlxcXFxtYXRoc2Nye1J9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXHUyMTJEXCIsIFwiXFxcXG1hdGhmcmFre0N9XCIpOyAvLyBGcmFrdHVyXG5cbmRlZmluZU1hY3JvKFwiXFx1MjEwQ1wiLCBcIlxcXFxtYXRoZnJha3tIfVwiKTtcbmRlZmluZU1hY3JvKFwiXFx1MjEyOFwiLCBcIlxcXFxtYXRoZnJha3tafVwiKTsgLy8gRGVmaW5lIFxcQmJiayB3aXRoIGEgbWFjcm8gdGhhdCB3b3JrcyBpbiBib3RoIEhUTUwgYW5kIE1hdGhNTC5cblxuZGVmaW5lTWFjcm8oXCJcXFxcQmJia1wiLCBcIlxcXFxCYmJ7a31cIik7IC8vIFVuaWNvZGUgbWlkZGxlIGRvdFxuLy8gVGhlIEthVGVYIGZvbnRzIGRvIG5vdCBjb250YWluIFUrMDBCNy4gSW5zdGVhZCwgXFxjZG90cCBkaXNwbGF5c1xuLy8gdGhlIGRvdCBhdCBVKzIyQzUgYW5kIGdpdmVzIGl0IHB1bmN0IHNwYWNpbmcuXG5cbmRlZmluZU1hY3JvKFwiXFx4QjdcIiwgXCJcXFxcY2RvdHBcIik7IC8vIFxcbGxhcCBhbmQgXFxybGFwIHJlbmRlciB0aGVpciBjb250ZW50cyBpbiB0ZXh0IG1vZGVcblxuZGVmaW5lTWFjcm8oXCJcXFxcbGxhcFwiLCBcIlxcXFxtYXRobGxhcHtcXFxcdGV4dHJteyMxfX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxybGFwXCIsIFwiXFxcXG1hdGhybGFwe1xcXFx0ZXh0cm17IzF9fVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGNsYXBcIiwgXCJcXFxcbWF0aGNsYXB7XFxcXHRleHRybXsjMX19XCIpOyAvLyBcXG5vdCBpcyBkZWZpbmVkIGJ5IGJhc2UvZm9udG1hdGgubHR4IHZpYVxuLy8gXFxEZWNsYXJlTWF0aFN5bWJvbHtcXG5vdH17XFxtYXRocmVsfXtzeW1ib2xzfXtcIjM2fVxuLy8gSXQncyB0aHVzIHRyZWF0ZWQgbGlrZSBhIFxcbWF0aHJlbCwgYnV0IGRlZmluZWQgYnkgYSBzeW1ib2wgdGhhdCBoYXMgemVyb1xuLy8gd2lkdGggYnV0IGV4dGVuZHMgdG8gdGhlIHJpZ2h0LiAgV2UgdXNlIFxccmxhcCB0byBnZXQgdGhhdCBzcGFjaW5nLlxuLy8gRm9yIE1hdGhNTCB3ZSB3cml0ZSBVKzAzMzggaGVyZS4gYnVpbGRNYXRoTUwuanMgd2lsbCB0aGVuIGRvIHRoZSBvdmVybGF5LlxuXG5kZWZpbmVNYWNybyhcIlxcXFxub3RcIiwgJ1xcXFxodG1sQG1hdGhtbHtcXFxcbWF0aHJlbHtcXFxcbWF0aHJsYXBcXFxcQG5vdH19e1xcXFxjaGFyXCIzMzh9Jyk7IC8vIE5lZ2F0ZWQgc3ltYm9scyBmcm9tIGJhc2UvZm9udG1hdGgubHR4OlxuLy8gXFxkZWZcXG5lcXtcXG5vdD19IFxcbGV0XFxuZT1cXG5lcVxuLy8gXFxEZWNsYXJlUm9idXN0Q29tbWFuZFxuLy8gICBcXG5vdGlue1xcbWF0aHJlbHtcXG1AdGhcXG1hdGhwYWxldHRlXFxjQG5jZWxcXGlufX1cbi8vIFxcZGVmXFxjQG5jZWwjMSMye1xcbUB0aFxcb29hbGlnbnskXFxoZmlsIzFcXG1rZXJuMW11L1xcaGZpbCRcXGNyY3IkIzEjMiR9fVxuXG5kZWZpbmVNYWNybyhcIlxcXFxuZXFcIiwgXCJcXFxcaHRtbEBtYXRobWx7XFxcXG1hdGhyZWx7XFxcXG5vdD19fXtcXFxcbWF0aHJlbHtcXFxcY2hhcmDiiaB9fVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXG5lXCIsIFwiXFxcXG5lcVwiKTtcbmRlZmluZU1hY3JvKFwiXFx1MjI2MFwiLCBcIlxcXFxuZXFcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxub3RpblwiLCBcIlxcXFxodG1sQG1hdGhtbHtcXFxcbWF0aHJlbHt7XFxcXGlufVxcXFxtYXRobGxhcHsvXFxcXG1za2lwMW11fX19XCIgKyBcIntcXFxcbWF0aHJlbHtcXFxcY2hhcmDiiIl9fVwiKTtcbmRlZmluZU1hY3JvKFwiXFx1MjIwOVwiLCBcIlxcXFxub3RpblwiKTsgLy8gVW5pY29kZSBzdGFja2VkIHJlbGF0aW9uc1xuXG5kZWZpbmVNYWNybyhcIlxcdTIyNThcIiwgXCJcXFxcaHRtbEBtYXRobWx7XCIgKyBcIlxcXFxtYXRocmVsez1cXFxca2VybnstMWVtfVxcXFxyYWlzZWJveHswLjRlbX17JFxcXFxzY3JpcHRzaXplXFxcXGZyb3duJH19XCIgKyBcIn17XFxcXG1hdGhyZWx7XFxcXGNoYXJgXFx1MjI1OH19XCIpO1xuZGVmaW5lTWFjcm8oXCJcXHUyMjU5XCIsIFwiXFxcXGh0bWxAbWF0aG1se1xcXFxzdGFja3JlbHtcXFxcdGlueVxcXFx3ZWRnZX17PX19e1xcXFxtYXRocmVse1xcXFxjaGFyYFxcdTIyNTh9fVwiKTtcbmRlZmluZU1hY3JvKFwiXFx1MjI1QVwiLCBcIlxcXFxodG1sQG1hdGhtbHtcXFxcc3RhY2tyZWx7XFxcXHRpbnlcXFxcdmVlfXs9fX17XFxcXG1hdGhyZWx7XFxcXGNoYXJgXFx1MjI1QX19XCIpO1xuZGVmaW5lTWFjcm8oXCJcXHUyMjVCXCIsIFwiXFxcXGh0bWxAbWF0aG1se1xcXFxzdGFja3JlbHtcXFxcc2NyaXB0c2l6ZVxcXFxzdGFyfXs9fX1cIiArIFwie1xcXFxtYXRocmVse1xcXFxjaGFyYFxcdTIyNUJ9fVwiKTtcbmRlZmluZU1hY3JvKFwiXFx1MjI1RFwiLCBcIlxcXFxodG1sQG1hdGhtbHtcXFxcc3RhY2tyZWx7XFxcXHRpbnlcXFxcbWF0aHJte2RlZn19ez19fVwiICsgXCJ7XFxcXG1hdGhyZWx7XFxcXGNoYXJgXFx1MjI1RH19XCIpO1xuZGVmaW5lTWFjcm8oXCJcXHUyMjVFXCIsIFwiXFxcXGh0bWxAbWF0aG1se1xcXFxzdGFja3JlbHtcXFxcdGlueVxcXFxtYXRocm17bX19ez19fVwiICsgXCJ7XFxcXG1hdGhyZWx7XFxcXGNoYXJgXFx1MjI1RX19XCIpO1xuZGVmaW5lTWFjcm8oXCJcXHUyMjVGXCIsIFwiXFxcXGh0bWxAbWF0aG1se1xcXFxzdGFja3JlbHtcXFxcdGlueT99ez19fXtcXFxcbWF0aHJlbHtcXFxcY2hhcmBcXHUyMjVGfX1cIik7IC8vIE1pc2MgVW5pY29kZVxuXG5kZWZpbmVNYWNybyhcIlxcdTI3QzJcIiwgXCJcXFxccGVycFwiKTtcbmRlZmluZU1hY3JvKFwiXFx1MjAzQ1wiLCBcIlxcXFxtYXRoY2xvc2V7IVxcXFxta2Vybi0wLjhtdSF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXHUyMjBDXCIsIFwiXFxcXG5vdG5pXCIpO1xuZGVmaW5lTWFjcm8oXCJcXHUyMzFDXCIsIFwiXFxcXHVsY29ybmVyXCIpO1xuZGVmaW5lTWFjcm8oXCJcXHUyMzFEXCIsIFwiXFxcXHVyY29ybmVyXCIpO1xuZGVmaW5lTWFjcm8oXCJcXHUyMzFFXCIsIFwiXFxcXGxsY29ybmVyXCIpO1xuZGVmaW5lTWFjcm8oXCJcXHUyMzFGXCIsIFwiXFxcXGxyY29ybmVyXCIpO1xuZGVmaW5lTWFjcm8oXCJcXHhBOVwiLCBcIlxcXFxjb3B5cmlnaHRcIik7XG5kZWZpbmVNYWNybyhcIlxceEFFXCIsIFwiXFxcXHRleHRyZWdpc3RlcmVkXCIpO1xuZGVmaW5lTWFjcm8oXCJcXHVGRTBGXCIsIFwiXFxcXHRleHRyZWdpc3RlcmVkXCIpOyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBMYVRlWF8yzrVcbi8vIFxcdmRvdHN7XFx2Ym94e1xcYmFzZWxpbmVza2lwNFxccEAgIFxcbGluZXNraXBsaW1pdFxcekBcbi8vIFxca2VybjZcXHBAXFxoYm94ey59XFxoYm94ey59XFxoYm94ey59fX1cbi8vIFdlJ2xsIGNhbGwgXFx2YXJ2ZG90cywgd2hpY2ggZ2V0cyBhIGdseXBoIGZyb20gc3ltYm9scy5qcy5cbi8vIFRoZSB6ZXJvLXdpZHRoIHJ1bGUgZ2V0cyB1cyBhbiBlcXVpdmFsZW50IHRvIHRoZSB2ZXJ0aWNhbCA2cHQga2Vybi5cblxuZGVmaW5lTWFjcm8oXCJcXFxcdmRvdHNcIiwgXCJcXFxcbWF0aG9yZHtcXFxcdmFydmRvdHNcXFxccnVsZXswcHR9ezE1cHR9fVwiKTtcbmRlZmluZU1hY3JvKFwiXFx1MjJFRVwiLCBcIlxcXFx2ZG90c1wiKTsgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gYW1zbWF0aC5zdHlcbi8vIGh0dHA6Ly9taXJyb3JzLmNvbmNlcnRwYXNzLmNvbS90ZXgtYXJjaGl2ZS9tYWNyb3MvbGF0ZXgvcmVxdWlyZWQvYW1zbWF0aC9hbXNtYXRoLnBkZlxuLy8gSXRhbGljIEdyZWVrIGNhcGl0YWwgbGV0dGVycy4gIEFNUyBkZWZpbmVzIHRoZXNlIHdpdGggXFxEZWNsYXJlTWF0aFN5bWJvbCxcbi8vIGJ1dCB0aGV5IGFyZSBlcXVpdmFsZW50IHRvIFxcbWF0aGl0e1xcTGV0dGVyfS5cblxuZGVmaW5lTWFjcm8oXCJcXFxcdmFyR2FtbWFcIiwgXCJcXFxcbWF0aGl0e1xcXFxHYW1tYX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFx2YXJEZWx0YVwiLCBcIlxcXFxtYXRoaXR7XFxcXERlbHRhfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHZhclRoZXRhXCIsIFwiXFxcXG1hdGhpdHtcXFxcVGhldGF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcdmFyTGFtYmRhXCIsIFwiXFxcXG1hdGhpdHtcXFxcTGFtYmRhfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHZhclhpXCIsIFwiXFxcXG1hdGhpdHtcXFxcWGl9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcdmFyUGlcIiwgXCJcXFxcbWF0aGl0e1xcXFxQaX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFx2YXJTaWdtYVwiLCBcIlxcXFxtYXRoaXR7XFxcXFNpZ21hfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHZhclVwc2lsb25cIiwgXCJcXFxcbWF0aGl0e1xcXFxVcHNpbG9ufVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHZhclBoaVwiLCBcIlxcXFxtYXRoaXR7XFxcXFBoaX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFx2YXJQc2lcIiwgXCJcXFxcbWF0aGl0e1xcXFxQc2l9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcdmFyT21lZ2FcIiwgXCJcXFxcbWF0aGl0e1xcXFxPbWVnYX1cIik7IC8vIFxccmVuZXdjb21tYW5ke1xcY29sb259e1xcbm9icmVha1xcbXNraXAybXVcXG1hdGhwdW5jdHt9XFxub25zY3JpcHRcbi8vIFxcbWtlcm4tXFx0aGlubXVza2lwezp9XFxtc2tpcDZtdXBsdXMxbXVcXHJlbGF4fVxuXG5kZWZpbmVNYWNybyhcIlxcXFxjb2xvblwiLCBcIlxcXFxub2JyZWFrXFxcXG1za2lwMm11XFxcXG1hdGhwdW5jdHt9XCIgKyBcIlxcXFxtYXRoY2hvaWNle1xcXFxta2Vybi0zbXV9e1xcXFxta2Vybi0zbXV9e317fXs6fVxcXFxtc2tpcDZtdVwiKTsgLy8gXFxuZXdjb21tYW5ke1xcYm94ZWR9WzFde1xcZmJveHtcXG1AdGgkXFxkaXNwbGF5c3R5bGUjMSR9fVxuXG5kZWZpbmVNYWNybyhcIlxcXFxib3hlZFwiLCBcIlxcXFxmYm94eyRcXFxcZGlzcGxheXN0eWxleyMxfSR9XCIpOyAvLyBcXGRlZlxcaWZme1xcRE9UU0JcXDtcXExvbmdsZWZ0cmlnaHRhcnJvd1xcO31cbi8vIFxcZGVmXFxpbXBsaWVze1xcRE9UU0JcXDtcXExvbmdyaWdodGFycm93XFw7fVxuLy8gXFxkZWZcXGltcGxpZWRieXtcXERPVFNCXFw7XFxMb25nbGVmdGFycm93XFw7fVxuXG5kZWZpbmVNYWNybyhcIlxcXFxpZmZcIiwgXCJcXFxcRE9UU0JcXFxcO1xcXFxMb25nbGVmdHJpZ2h0YXJyb3dcXFxcO1wiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGltcGxpZXNcIiwgXCJcXFxcRE9UU0JcXFxcO1xcXFxMb25ncmlnaHRhcnJvd1xcXFw7XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcaW1wbGllZGJ5XCIsIFwiXFxcXERPVFNCXFxcXDtcXFxcTG9uZ2xlZnRhcnJvd1xcXFw7XCIpOyAvLyBBTVNNYXRoJ3MgYXV0b21hdGljIFxcZG90cywgYmFzZWQgb24gXFxtZG90c0BAIG1hY3JvLlxuXG52YXIgZG90c0J5VG9rZW4gPSB7XG4gICcsJzogJ1xcXFxkb3RzYycsXG4gICdcXFxcbm90JzogJ1xcXFxkb3RzYicsXG4gIC8vIFxca2V5YmluQCBjaGVja3MgZm9yIHRoZSBmb2xsb3dpbmc6XG4gICcrJzogJ1xcXFxkb3RzYicsXG4gICc9JzogJ1xcXFxkb3RzYicsXG4gICc8JzogJ1xcXFxkb3RzYicsXG4gICc+JzogJ1xcXFxkb3RzYicsXG4gICctJzogJ1xcXFxkb3RzYicsXG4gICcqJzogJ1xcXFxkb3RzYicsXG4gICc6JzogJ1xcXFxkb3RzYicsXG4gIC8vIFN5bWJvbHMgd2hvc2UgZGVmaW5pdGlvbiBzdGFydHMgd2l0aCBcXERPVFNCOlxuICAnXFxcXERPVFNCJzogJ1xcXFxkb3RzYicsXG4gICdcXFxcY29wcm9kJzogJ1xcXFxkb3RzYicsXG4gICdcXFxcYmlndmVlJzogJ1xcXFxkb3RzYicsXG4gICdcXFxcYmlnd2VkZ2UnOiAnXFxcXGRvdHNiJyxcbiAgJ1xcXFxiaWd1cGx1cyc6ICdcXFxcZG90c2InLFxuICAnXFxcXGJpZ2NhcCc6ICdcXFxcZG90c2InLFxuICAnXFxcXGJpZ2N1cCc6ICdcXFxcZG90c2InLFxuICAnXFxcXHByb2QnOiAnXFxcXGRvdHNiJyxcbiAgJ1xcXFxzdW0nOiAnXFxcXGRvdHNiJyxcbiAgJ1xcXFxiaWdvdGltZXMnOiAnXFxcXGRvdHNiJyxcbiAgJ1xcXFxiaWdvcGx1cyc6ICdcXFxcZG90c2InLFxuICAnXFxcXGJpZ29kb3QnOiAnXFxcXGRvdHNiJyxcbiAgJ1xcXFxiaWdzcWN1cCc6ICdcXFxcZG90c2InLFxuICAnXFxcXEFuZCc6ICdcXFxcZG90c2InLFxuICAnXFxcXGxvbmdyaWdodGFycm93JzogJ1xcXFxkb3RzYicsXG4gICdcXFxcTG9uZ3JpZ2h0YXJyb3cnOiAnXFxcXGRvdHNiJyxcbiAgJ1xcXFxsb25nbGVmdGFycm93JzogJ1xcXFxkb3RzYicsXG4gICdcXFxcTG9uZ2xlZnRhcnJvdyc6ICdcXFxcZG90c2InLFxuICAnXFxcXGxvbmdsZWZ0cmlnaHRhcnJvdyc6ICdcXFxcZG90c2InLFxuICAnXFxcXExvbmdsZWZ0cmlnaHRhcnJvdyc6ICdcXFxcZG90c2InLFxuICAnXFxcXG1hcHN0byc6ICdcXFxcZG90c2InLFxuICAnXFxcXGxvbmdtYXBzdG8nOiAnXFxcXGRvdHNiJyxcbiAgJ1xcXFxob29rcmlnaHRhcnJvdyc6ICdcXFxcZG90c2InLFxuICAnXFxcXGRvdGVxJzogJ1xcXFxkb3RzYicsXG4gIC8vIFN5bWJvbHMgd2hvc2UgZGVmaW5pdGlvbiBzdGFydHMgd2l0aCBcXG1hdGhiaW46XG4gICdcXFxcbWF0aGJpbic6ICdcXFxcZG90c2InLFxuICAvLyBTeW1ib2xzIHdob3NlIGRlZmluaXRpb24gc3RhcnRzIHdpdGggXFxtYXRocmVsOlxuICAnXFxcXG1hdGhyZWwnOiAnXFxcXGRvdHNiJyxcbiAgJ1xcXFxyZWxiYXInOiAnXFxcXGRvdHNiJyxcbiAgJ1xcXFxSZWxiYXInOiAnXFxcXGRvdHNiJyxcbiAgJ1xcXFx4cmlnaHRhcnJvdyc6ICdcXFxcZG90c2InLFxuICAnXFxcXHhsZWZ0YXJyb3cnOiAnXFxcXGRvdHNiJyxcbiAgLy8gU3ltYm9scyB3aG9zZSBkZWZpbml0aW9uIHN0YXJ0cyB3aXRoIFxcRE9UU0k6XG4gICdcXFxcRE9UU0knOiAnXFxcXGRvdHNpJyxcbiAgJ1xcXFxpbnQnOiAnXFxcXGRvdHNpJyxcbiAgJ1xcXFxvaW50JzogJ1xcXFxkb3RzaScsXG4gICdcXFxcaWludCc6ICdcXFxcZG90c2knLFxuICAnXFxcXGlpaW50JzogJ1xcXFxkb3RzaScsXG4gICdcXFxcaWlpaW50JzogJ1xcXFxkb3RzaScsXG4gICdcXFxcaWRvdHNpbnQnOiAnXFxcXGRvdHNpJyxcbiAgLy8gU3ltYm9scyB3aG9zZSBkZWZpbml0aW9uIHN0YXJ0cyB3aXRoIFxcRE9UU1g6XG4gICdcXFxcRE9UU1gnOiAnXFxcXGRvdHN4J1xufTtcbmRlZmluZU1hY3JvKFwiXFxcXGRvdHNcIiwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgLy8gVE9ETzogSWYgdXNlZCBpbiB0ZXh0IG1vZGUsIHNob3VsZCBleHBhbmQgdG8gXFx0ZXh0ZWxsaXBzaXMuXG4gIC8vIEhvd2V2ZXIsIGluIEthVGVYLCBcXHRleHRlbGxpcHNpcyBhbmQgXFxsZG90cyBiZWhhdmUgdGhlIHNhbWVcbiAgLy8gKGluIHRleHQgbW9kZSksIGFuZCBpdCdzIHVubGlrZWx5IHdlJ2Qgc2VlIGFueSBvZiB0aGUgbWF0aCBjb21tYW5kc1xuICAvLyB0aGF0IGFmZmVjdCB0aGUgYmVoYXZpb3Igb2YgXFxkb3RzIHdoZW4gaW4gdGV4dCBtb2RlLiAgU28gZmluZSBmb3Igbm93XG4gIC8vICh1bnRpbCB3ZSBzdXBwb3J0IFxcaWZtbW9kZSAuLi4gXFxlbHNlIC4uLiBcXGZpKS5cbiAgdmFyIHRoZWRvdHMgPSAnXFxcXGRvdHNvJztcbiAgdmFyIG5leHQgPSBjb250ZXh0LmV4cGFuZEFmdGVyRnV0dXJlKCkudGV4dDtcblxuICBpZiAobmV4dCBpbiBkb3RzQnlUb2tlbikge1xuICAgIHRoZWRvdHMgPSBkb3RzQnlUb2tlbltuZXh0XTtcbiAgfSBlbHNlIGlmIChuZXh0LnN1YnN0cigwLCA0KSA9PT0gJ1xcXFxub3QnKSB7XG4gICAgdGhlZG90cyA9ICdcXFxcZG90c2InO1xuICB9IGVsc2UgaWYgKG5leHQgaW4gc3JjX3N5bWJvbHMubWF0aCkge1xuICAgIGlmICh1dGlscy5jb250YWlucyhbJ2JpbicsICdyZWwnXSwgc3JjX3N5bWJvbHMubWF0aFtuZXh0XS5ncm91cCkpIHtcbiAgICAgIHRoZWRvdHMgPSAnXFxcXGRvdHNiJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhlZG90cztcbn0pO1xudmFyIHNwYWNlQWZ0ZXJEb3RzID0ge1xuICAvLyBcXHJpZ2h0ZGVsaW1AIGNoZWNrcyBmb3IgdGhlIGZvbGxvd2luZzpcbiAgJyknOiB0cnVlLFxuICAnXSc6IHRydWUsXG4gICdcXFxccmJyYWNrJzogdHJ1ZSxcbiAgJ1xcXFx9JzogdHJ1ZSxcbiAgJ1xcXFxyYnJhY2UnOiB0cnVlLFxuICAnXFxcXHJhbmdsZSc6IHRydWUsXG4gICdcXFxccmNlaWwnOiB0cnVlLFxuICAnXFxcXHJmbG9vcic6IHRydWUsXG4gICdcXFxccmdyb3VwJzogdHJ1ZSxcbiAgJ1xcXFxybW91c3RhY2hlJzogdHJ1ZSxcbiAgJ1xcXFxyaWdodCc6IHRydWUsXG4gICdcXFxcYmlncic6IHRydWUsXG4gICdcXFxcYmlnZ3InOiB0cnVlLFxuICAnXFxcXEJpZ3InOiB0cnVlLFxuICAnXFxcXEJpZ2dyJzogdHJ1ZSxcbiAgLy8gXFxleHRyYUAgYWxzbyB0ZXN0cyBmb3IgdGhlIGZvbGxvd2luZzpcbiAgJyQnOiB0cnVlLFxuICAvLyBcXGV4dHJhcEAgY2hlY2tzIGZvciB0aGUgZm9sbG93aW5nOlxuICAnOyc6IHRydWUsXG4gICcuJzogdHJ1ZSxcbiAgJywnOiB0cnVlXG59O1xuZGVmaW5lTWFjcm8oXCJcXFxcZG90c29cIiwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgdmFyIG5leHQgPSBjb250ZXh0LmZ1dHVyZSgpLnRleHQ7XG5cbiAgaWYgKG5leHQgaW4gc3BhY2VBZnRlckRvdHMpIHtcbiAgICByZXR1cm4gXCJcXFxcbGRvdHNcXFxcLFwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIlxcXFxsZG90c1wiO1xuICB9XG59KTtcbmRlZmluZU1hY3JvKFwiXFxcXGRvdHNjXCIsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gIHZhciBuZXh0ID0gY29udGV4dC5mdXR1cmUoKS50ZXh0OyAvLyBcXGRvdHNjIHVzZXMgXFxleHRyYUAgYnV0IG5vdCBcXGV4dHJhcEAsIGluc3RlYWQgc3BlY2lhbGx5IGNoZWNraW5nIGZvclxuICAvLyAnOycgYW5kICcuJywgYnV0IGRvZXNuJ3QgY2hlY2sgZm9yICcsJy5cblxuICBpZiAobmV4dCBpbiBzcGFjZUFmdGVyRG90cyAmJiBuZXh0ICE9PSAnLCcpIHtcbiAgICByZXR1cm4gXCJcXFxcbGRvdHNcXFxcLFwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIlxcXFxsZG90c1wiO1xuICB9XG59KTtcbmRlZmluZU1hY3JvKFwiXFxcXGNkb3RzXCIsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gIHZhciBuZXh0ID0gY29udGV4dC5mdXR1cmUoKS50ZXh0O1xuXG4gIGlmIChuZXh0IGluIHNwYWNlQWZ0ZXJEb3RzKSB7XG4gICAgcmV0dXJuIFwiXFxcXEBjZG90c1xcXFwsXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiXFxcXEBjZG90c1wiO1xuICB9XG59KTtcbmRlZmluZU1hY3JvKFwiXFxcXGRvdHNiXCIsIFwiXFxcXGNkb3RzXCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcZG90c21cIiwgXCJcXFxcY2RvdHNcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxkb3RzaVwiLCBcIlxcXFwhXFxcXGNkb3RzXCIpOyAvLyBhbXNtYXRoIGRvZXNuJ3QgYWN0dWFsbHkgZGVmaW5lIFxcZG90c3gsIGJ1dCBcXGRvdHMgZm9sbG93ZWQgYnkgYSBtYWNyb1xuLy8gc3RhcnRpbmcgd2l0aCBcXERPVFNYIGltcGxpZXMgXFxkb3RzbywgYW5kIHRoZW4gXFxleHRyYUAgZGV0ZWN0cyB0aGlzIGNhc2Vcbi8vIGFuZCBmb3JjZXMgdGhlIGFkZGVkIGBcXCxgLlxuXG5kZWZpbmVNYWNybyhcIlxcXFxkb3RzeFwiLCBcIlxcXFxsZG90c1xcXFwsXCIpOyAvLyBcXGxldFxcRE9UU0lcXHJlbGF4XG4vLyBcXGxldFxcRE9UU0JcXHJlbGF4XG4vLyBcXGxldFxcRE9UU1hcXHJlbGF4XG5cbmRlZmluZU1hY3JvKFwiXFxcXERPVFNJXCIsIFwiXFxcXHJlbGF4XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcRE9UU0JcIiwgXCJcXFxccmVsYXhcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxET1RTWFwiLCBcIlxcXFxyZWxheFwiKTsgLy8gU3BhY2luZywgYmFzZWQgb24gYW1zbWF0aC5zdHkncyBvdmVycmlkZSBvZiBMYVRlWCBkZWZhdWx0c1xuLy8gXFxEZWNsYXJlUm9idXN0Q29tbWFuZHtcXHRtc3BhY2V9WzNdeyVcbi8vICAgXFxpZm1tb2RlXFxtc2tpcCMxIzJcXGVsc2VcXGtlcm4jMSMzXFxmaVxccmVsYXh9XG5cbmRlZmluZU1hY3JvKFwiXFxcXHRtc3BhY2VcIiwgXCJcXFxcVGV4dE9yTWF0aHtcXFxca2VybiMxIzN9e1xcXFxtc2tpcCMxIzJ9XFxcXHJlbGF4XCIpOyAvLyBcXHJlbmV3Y29tbWFuZHtcXCx9e1xcdG1zcGFjZStcXHRoaW5tdXNraXB7LjE2NjdlbX19XG4vLyBUT0RPOiBtYXRoIG1vZGUgc2hvdWxkIHVzZSBcXHRoaW5tdXNraXBcblxuZGVmaW5lTWFjcm8oXCJcXFxcLFwiLCBcIlxcXFx0bXNwYWNlK3szbXV9ey4xNjY3ZW19XCIpOyAvLyBcXGxldFxcdGhpbnNwYWNlXFwsXG5cbmRlZmluZU1hY3JvKFwiXFxcXHRoaW5zcGFjZVwiLCBcIlxcXFwsXCIpOyAvLyBcXGRlZlxcPntcXG1za2lwXFxtZWRtdXNraXB9XG4vLyBcXHJlbmV3Y29tbWFuZHtcXDp9e1xcdG1zcGFjZStcXG1lZG11c2tpcHsuMjIyMmVtfX1cbi8vIFRPRE86IFxcPiBhbmQgbWF0aCBtb2RlIG9mIFxcOiBzaG91bGQgdXNlIFxcbWVkbXVza2lwID0gNG11IHBsdXMgMm11IG1pbnVzIDRtdVxuXG5kZWZpbmVNYWNybyhcIlxcXFw+XCIsIFwiXFxcXG1za2lwezRtdX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFw6XCIsIFwiXFxcXHRtc3BhY2UrezRtdX17LjIyMjJlbX1cIik7IC8vIFxcbGV0XFxtZWRzcGFjZVxcOlxuXG5kZWZpbmVNYWNybyhcIlxcXFxtZWRzcGFjZVwiLCBcIlxcXFw6XCIpOyAvLyBcXHJlbmV3Y29tbWFuZHtcXDt9e1xcdG1zcGFjZStcXHRoaWNrbXVza2lwey4yNzc3ZW19fVxuLy8gVE9ETzogbWF0aCBtb2RlIHNob3VsZCB1c2UgXFx0aGlja211c2tpcCA9IDVtdSBwbHVzIDVtdVxuXG5kZWZpbmVNYWNybyhcIlxcXFw7XCIsIFwiXFxcXHRtc3BhY2UrezVtdX17LjI3NzdlbX1cIik7IC8vIFxcbGV0XFx0aGlja3NwYWNlXFw7XG5cbmRlZmluZU1hY3JvKFwiXFxcXHRoaWNrc3BhY2VcIiwgXCJcXFxcO1wiKTsgLy8gXFxyZW5ld2NvbW1hbmR7XFwhfXtcXHRtc3BhY2UtXFx0aGlubXVza2lwey4xNjY3ZW19fVxuLy8gVE9ETzogbWF0aCBtb2RlIHNob3VsZCB1c2UgXFx0aGlubXVza2lwXG5cbmRlZmluZU1hY3JvKFwiXFxcXCFcIiwgXCJcXFxcdG1zcGFjZS17M211fXsuMTY2N2VtfVwiKTsgLy8gXFxsZXRcXG5lZ3RoaW5zcGFjZVxcIVxuXG5kZWZpbmVNYWNybyhcIlxcXFxuZWd0aGluc3BhY2VcIiwgXCJcXFxcIVwiKTsgLy8gXFxuZXdjb21tYW5ke1xcbmVnbWVkc3BhY2V9e1xcdG1zcGFjZS1cXG1lZG11c2tpcHsuMjIyMmVtfX1cbi8vIFRPRE86IG1hdGggbW9kZSBzaG91bGQgdXNlIFxcbWVkbXVza2lwXG5cbmRlZmluZU1hY3JvKFwiXFxcXG5lZ21lZHNwYWNlXCIsIFwiXFxcXHRtc3BhY2UtezRtdX17LjIyMjJlbX1cIik7IC8vIFxcbmV3Y29tbWFuZHtcXG5lZ3RoaWNrc3BhY2V9e1xcdG1zcGFjZS1cXHRoaWNrbXVza2lwey4yNzc3ZW19fVxuLy8gVE9ETzogbWF0aCBtb2RlIHNob3VsZCB1c2UgXFx0aGlja211c2tpcFxuXG5kZWZpbmVNYWNybyhcIlxcXFxuZWd0aGlja3NwYWNlXCIsIFwiXFxcXHRtc3BhY2UtezVtdX17LjI3N2VtfVwiKTsgLy8gXFxkZWZcXGVuc3BhY2V7XFxrZXJuLjVlbSB9XG5cbmRlZmluZU1hY3JvKFwiXFxcXGVuc3BhY2VcIiwgXCJcXFxca2Vybi41ZW0gXCIpOyAvLyBcXGRlZlxcZW5za2lwe1xcaHNraXAuNWVtXFxyZWxheH1cblxuZGVmaW5lTWFjcm8oXCJcXFxcZW5za2lwXCIsIFwiXFxcXGhza2lwLjVlbVxcXFxyZWxheFwiKTsgLy8gXFxkZWZcXHF1YWR7XFxoc2tpcDFlbVxccmVsYXh9XG5cbmRlZmluZU1hY3JvKFwiXFxcXHF1YWRcIiwgXCJcXFxcaHNraXAxZW1cXFxccmVsYXhcIik7IC8vIFxcZGVmXFxxcXVhZHtcXGhza2lwMmVtXFxyZWxheH1cblxuZGVmaW5lTWFjcm8oXCJcXFxccXF1YWRcIiwgXCJcXFxcaHNraXAyZW1cXFxccmVsYXhcIik7IC8vIFxcdGFnQGluQGRpc3BsYXkgZm9ybSBvZiBcXHRhZ1xuXG5kZWZpbmVNYWNybyhcIlxcXFx0YWdcIiwgXCJcXFxcQGlmc3RhclxcXFx0YWdAbGl0ZXJhbFxcXFx0YWdAcGFyZW5cIik7XG5kZWZpbmVNYWNybyhcIlxcXFx0YWdAcGFyZW5cIiwgXCJcXFxcdGFnQGxpdGVyYWx7KHsjMX0pfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHRhZ0BsaXRlcmFsXCIsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0Lm1hY3Jvcy5nZXQoXCJcXFxcZGZAdGFnXCIpKSB7XG4gICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiTXVsdGlwbGUgXFxcXHRhZ1wiKTtcbiAgfVxuXG4gIHJldHVybiBcIlxcXFxnZGVmXFxcXGRmQHRhZ3tcXFxcdGV4dHsjMX19XCI7XG59KTsgLy8gXFxyZW5ld2NvbW1hbmR7XFxibW9kfXtcXG5vbnNjcmlwdFxcbXNraXAtXFxtZWRtdXNraXBcXG1rZXJuNW11XFxtYXRoYmluXG4vLyAgIHtcXG9wZXJhdG9yQGZvbnQgbW9kfVxccGVuYWx0eTkwMFxuLy8gICBcXG1rZXJuNW11XFxub25zY3JpcHRcXG1za2lwLVxcbWVkbXVza2lwfVxuLy8gXFxuZXdjb21tYW5ke1xccG9kfVsxXXtcXGFsbG93YnJlYWtcbi8vICAgXFxpZkBkaXNwbGF5XFxta2VybjE4bXVcXGVsc2VcXG1rZXJuOG11XFxmaSgjMSl9XG4vLyBcXHJlbmV3Y29tbWFuZHtcXHBtb2R9WzFde1xccG9ke3tcXG9wZXJhdG9yQGZvbnQgbW9kfVxcbWtlcm42bXUjMX19XG4vLyBcXG5ld2NvbW1hbmR7XFxtb2R9WzFde1xcYWxsb3dicmVha1xcaWZAZGlzcGxheVxcbWtlcm4xOG11XG4vLyAgIFxcZWxzZVxcbWtlcm4xMm11XFxmaXtcXG9wZXJhdG9yQGZvbnQgbW9kfVxcLFxcLCMxfVxuLy8gVE9ETzogbWF0aCBtb2RlIHNob3VsZCB1c2UgXFxtZWRtdXNraXAgPSA0bXUgcGx1cyAybXUgbWludXMgNG11XG5cbmRlZmluZU1hY3JvKFwiXFxcXGJtb2RcIiwgXCJcXFxcbWF0aGNob2ljZXtcXFxcbXNraXAxbXV9e1xcXFxtc2tpcDFtdX17XFxcXG1za2lwNW11fXtcXFxcbXNraXA1bXV9XCIgKyBcIlxcXFxtYXRoYmlue1xcXFxybSBtb2R9XCIgKyBcIlxcXFxtYXRoY2hvaWNle1xcXFxtc2tpcDFtdX17XFxcXG1za2lwMW11fXtcXFxcbXNraXA1bXV9e1xcXFxtc2tpcDVtdX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxwb2RcIiwgXCJcXFxcYWxsb3dicmVha1wiICsgXCJcXFxcbWF0aGNob2ljZXtcXFxcbWtlcm4xOG11fXtcXFxcbWtlcm44bXV9e1xcXFxta2VybjhtdX17XFxcXG1rZXJuOG11fSgjMSlcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxwbW9kXCIsIFwiXFxcXHBvZHt7XFxcXHJtIG1vZH1cXFxcbWtlcm42bXUjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxtb2RcIiwgXCJcXFxcYWxsb3dicmVha1wiICsgXCJcXFxcbWF0aGNob2ljZXtcXFxcbWtlcm4xOG11fXtcXFxcbWtlcm4xMm11fXtcXFxcbWtlcm4xMm11fXtcXFxcbWtlcm4xMm11fVwiICsgXCJ7XFxcXHJtIG1vZH1cXFxcLFxcXFwsIzFcIik7IC8vIFxccG1iICAgIC0tICAgQSBzaW11bGF0aW9uIG9mIGJvbGQuXG4vLyBJdCB3b3JrcyBieSB0eXBlc2V0dGluZyB0aHJlZSBjb3BpZXMgb2YgdGhlIGFyZ3VtZW50IHdpdGggc21hbGwgb2Zmc2V0cy5cbi8vIFJlZjogYSByYXRoZXIgbGVuZ3RoeSBtYWNybyBpbiBhbWJzeS5zdHlcblxuZGVmaW5lTWFjcm8oXCJcXFxccG1iXCIsIFwiXFxcXGh0bWxAbWF0aG1se1xcXFxAYmlucmVseyMxfXtcIiArIFwiXFxcXG1hdGhybGFweyMxfVwiICsgXCJcXFxcbWF0aHJsYXB7XFxcXG1rZXJuMC40bXVcXFxccmFpc2Vib3h7MC40bXV9eyQjMSR9fVwiICsgXCJ7XFxcXG1rZXJuMC44bXUjMX1cIiArIFwifX17XFxcXG1hdGhiZnsjMX19XCIpOyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBMYVRlWCBzb3VyY2UyZVxuLy8gXFxcXCBkZWZhdWx0cyB0byBcXG5ld2xpbmUsIGJ1dCBjaGFuZ2VzIHRvIFxcY3Igd2l0aGluIGFycmF5IGVudmlyb25tZW50XG5cbmRlZmluZU1hY3JvKFwiXFxcXFxcXFxcIiwgXCJcXFxcbmV3bGluZVwiKTsgLy8gXFxkZWZcXFRlWHtUXFxrZXJuLS4xNjY3ZW1cXGxvd2VyLjVleFxcaGJveHtFfVxca2Vybi0uMTI1ZW1YXFxAfVxuLy8gVE9ETzogRG9lc24ndCBub3JtYWxseSB3b3JrIGluIG1hdGggbW9kZSBiZWNhdXNlIFxcQCBmYWlscy4gIEthVGVYIGRvZXNuJ3Rcbi8vIHN1cHBvcnQgXFxAIHlldCwgc28gdGhhdCdzIG9taXR0ZWQsIGFuZCB3ZSBhZGQgXFx0ZXh0IHNvIHRoYXQgdGhlIHJlc3VsdFxuLy8gZG9lc24ndCBsb29rIGZ1bm55IGluIG1hdGggbW9kZS5cblxuZGVmaW5lTWFjcm8oXCJcXFxcVGVYXCIsIFwiXFxcXHRleHRybXtcXFxcaHRtbEBtYXRobWx7XCIgKyBcIlRcXFxca2Vybi0uMTY2N2VtXFxcXHJhaXNlYm94ey0uNWV4fXtFfVxcXFxrZXJuLS4xMjVlbVhcIiArIFwifXtUZVh9fVwiKTsgLy8gXFxEZWNsYXJlUm9idXN0Q29tbWFuZHtcXExhVGVYfXtMXFxrZXJuLS4zNmVtJVxuLy8gICAgICAgICB7XFxzYm94XFx6QCBUJVxuLy8gICAgICAgICAgXFx2Ym94IHRvXFxodFxcekB7XFxoYm94e1xcY2hlY2tAbWF0aGZvbnRzXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXGZvbnRzaXplXFxzZkBzaXplXFx6QFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxtYXRoQGZvbnRzZmFsc2VcXHNlbGVjdGZvbnRcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF9JVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgXFx2c3N9JVxuLy8gICAgICAgICB9JVxuLy8gICAgICAgICBcXGtlcm4tLjE1ZW0lXG4vLyAgICAgICAgIFxcVGVYfVxuLy8gVGhpcyBjb2RlIGFsaWducyB0aGUgdG9wIG9mIHRoZSBBIHdpdGggdGhlIFQgKGZyb20gdGhlIHBlcnNwZWN0aXZlIG9mIFRlWCdzXG4vLyBib3hlcywgdGhvdWdoIHZpc3VhbGx5IHRoZSBBIGFwcGVhcnMgdG8gZXh0ZW5kIGFib3ZlIHNsaWdodGx5KS5cbi8vIFdlIGNvbXB1dGUgdGhlIGNvcnJlc3BvbmRpbmcgXFxyYWlzZWJveCB3aGVuIEEgaXMgcmVuZGVyZWQgYXQgXFxzY3JpcHRzaXplLFxuLy8gd2hpY2ggaXMgc2l6ZTMsIHdoaWNoIGhhcyBhIHNjYWxlIGZhY3RvciBvZiAwLjcgKHNlZSBPcHRpb25zLmpzKS5cblxudmFyIGxhdGV4UmFpc2VBID0gZm9udE1ldHJpY3NEYXRhWydNYWluLVJlZ3VsYXInXVtcIlRcIi5jaGFyQ29kZUF0KDApXVsxXSAtIDAuNyAqIGZvbnRNZXRyaWNzRGF0YVsnTWFpbi1SZWd1bGFyJ11bXCJBXCIuY2hhckNvZGVBdCgwKV1bMV0gKyBcImVtXCI7XG5kZWZpbmVNYWNybyhcIlxcXFxMYVRlWFwiLCBcIlxcXFx0ZXh0cm17XFxcXGh0bWxAbWF0aG1se1wiICsgKFwiTFxcXFxrZXJuLS4zNmVtXFxcXHJhaXNlYm94e1wiICsgbGF0ZXhSYWlzZUEgKyBcIn17XFxcXHNjcmlwdHNpemUgQX1cIikgKyBcIlxcXFxrZXJuLS4xNWVtXFxcXFRlWH17TGFUZVh9fVwiKTsgLy8gTmV3IEthVGVYIGxvZ28gYmFzZWQgb24gdHdlYWtpbmcgTGFUZVggbG9nb1xuXG5kZWZpbmVNYWNybyhcIlxcXFxLYVRlWFwiLCBcIlxcXFx0ZXh0cm17XFxcXGh0bWxAbWF0aG1se1wiICsgKFwiS1xcXFxrZXJuLS4xN2VtXFxcXHJhaXNlYm94e1wiICsgbGF0ZXhSYWlzZUEgKyBcIn17XFxcXHNjcmlwdHNpemUgQX1cIikgKyBcIlxcXFxrZXJuLS4xNWVtXFxcXFRlWH17S2FUZVh9fVwiKTsgLy8gXFxEZWNsYXJlUm9idXN0Q29tbWFuZFxcaHNwYWNle1xcQGlmc3RhclxcQGhzcGFjZXJcXEBoc3BhY2V9XG4vLyBcXGRlZlxcQGhzcGFjZSMxe1xcaHNraXAgICMxXFxyZWxheH1cbi8vIFxcZGVmXFxAaHNwYWNlciMxe1xcdnJ1bGUgXFxAd2lkdGhcXHpAXFxub2JyZWFrXG4vLyAgICAgICAgICAgICAgICAgXFxoc2tpcCAjMVxcaHNraXAgXFx6QHNraXB9XG5cbmRlZmluZU1hY3JvKFwiXFxcXGhzcGFjZVwiLCBcIlxcXFxAaWZzdGFyXFxcXEBoc3BhY2VyXFxcXEBoc3BhY2VcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxAaHNwYWNlXCIsIFwiXFxcXGhza2lwICMxXFxcXHJlbGF4XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcQGhzcGFjZXJcIiwgXCJcXFxccnVsZXswcHR9ezBwdH1cXFxcaHNraXAgIzFcXFxccmVsYXhcIik7IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIG1hdGh0b29scy5zdHlcbi8vXFxwcm92aWRlY29tbWFuZFxcb3JkaW5hcnljb2xvbns6fVxuXG5kZWZpbmVNYWNybyhcIlxcXFxvcmRpbmFyeWNvbG9uXCIsIFwiOlwiKTsgLy9cXGRlZlxcdmNlbnRjb2xvbntcXG1hdGhyZWx7XFxtYXRob3BcXG9yZGluYXJ5Y29sb259fVxuLy9UT0RPKGVkZW1haW5lKTogTm90IHlldCBjZW50ZXJlZC4gRml4IHZpYSBcXHJhaXNlYm94IG9yICM3MjZcblxuZGVmaW5lTWFjcm8oXCJcXFxcdmNlbnRjb2xvblwiLCBcIlxcXFxtYXRocmVse1xcXFxtYXRob3BcXFxcb3JkaW5hcnljb2xvbn1cIik7IC8vIFxccHJvdmlkZWNvbW1hbmQqXFxkYmxjb2xvbntcXHZjZW50Y29sb25cXG1hdGhyZWx7XFxta2Vybi0uOW11fVxcdmNlbnRjb2xvbn1cblxuZGVmaW5lTWFjcm8oXCJcXFxcZGJsY29sb25cIiwgXCJcXFxcaHRtbEBtYXRobWx7XCIgKyBcIlxcXFxtYXRocmVse1xcXFx2Y2VudGNvbG9uXFxcXG1hdGhyZWx7XFxcXG1rZXJuLS45bXV9XFxcXHZjZW50Y29sb259fVwiICsgXCJ7XFxcXG1hdGhvcHtcXFxcY2hhclxcXCIyMjM3fX1cIik7IC8vIFxccHJvdmlkZWNvbW1hbmQqXFxjb2xvbmVxcXtcXHZjZW50Y29sb25cXG1hdGhyZWx7XFxta2Vybi0xLjJtdX09fVxuXG5kZWZpbmVNYWNybyhcIlxcXFxjb2xvbmVxcVwiLCBcIlxcXFxodG1sQG1hdGhtbHtcIiArIFwiXFxcXG1hdGhyZWx7XFxcXHZjZW50Y29sb25cXFxcbWF0aHJlbHtcXFxcbWtlcm4tMS4ybXV9PX19XCIgKyBcIntcXFxcbWF0aG9we1xcXFxjaGFyXFxcIjIyNTR9fVwiKTsgLy8g4omUXG4vLyBcXHByb3ZpZGVjb21tYW5kKlxcQ29sb25lcXF7XFxkYmxjb2xvblxcbWF0aHJlbHtcXG1rZXJuLTEuMm11fT19XG5cbmRlZmluZU1hY3JvKFwiXFxcXENvbG9uZXFxXCIsIFwiXFxcXGh0bWxAbWF0aG1se1wiICsgXCJcXFxcbWF0aHJlbHtcXFxcZGJsY29sb25cXFxcbWF0aHJlbHtcXFxcbWtlcm4tMS4ybXV9PX19XCIgKyBcIntcXFxcbWF0aG9we1xcXFxjaGFyXFxcIjIyMzdcXFxcY2hhclxcXCIzZH19XCIpOyAvLyBcXHByb3ZpZGVjb21tYW5kKlxcY29sb25lcXtcXHZjZW50Y29sb25cXG1hdGhyZWx7XFxta2Vybi0xLjJtdX1cXG1hdGhyZWx7LX19XG5cbmRlZmluZU1hY3JvKFwiXFxcXGNvbG9uZXFcIiwgXCJcXFxcaHRtbEBtYXRobWx7XCIgKyBcIlxcXFxtYXRocmVse1xcXFx2Y2VudGNvbG9uXFxcXG1hdGhyZWx7XFxcXG1rZXJuLTEuMm11fVxcXFxtYXRocmVsey19fX1cIiArIFwie1xcXFxtYXRob3B7XFxcXGNoYXJcXFwiM2FcXFxcY2hhclxcXCIyMjEyfX1cIik7IC8vIFxccHJvdmlkZWNvbW1hbmQqXFxDb2xvbmVxe1xcZGJsY29sb25cXG1hdGhyZWx7XFxta2Vybi0xLjJtdX1cXG1hdGhyZWx7LX19XG5cbmRlZmluZU1hY3JvKFwiXFxcXENvbG9uZXFcIiwgXCJcXFxcaHRtbEBtYXRobWx7XCIgKyBcIlxcXFxtYXRocmVse1xcXFxkYmxjb2xvblxcXFxtYXRocmVse1xcXFxta2Vybi0xLjJtdX1cXFxcbWF0aHJlbHstfX19XCIgKyBcIntcXFxcbWF0aG9we1xcXFxjaGFyXFxcIjIyMzdcXFxcY2hhclxcXCIyMjEyfX1cIik7IC8vIFxccHJvdmlkZWNvbW1hbmQqXFxlcXFjb2xvbns9XFxtYXRocmVse1xcbWtlcm4tMS4ybXV9XFx2Y2VudGNvbG9ufVxuXG5kZWZpbmVNYWNybyhcIlxcXFxlcXFjb2xvblwiLCBcIlxcXFxodG1sQG1hdGhtbHtcIiArIFwiXFxcXG1hdGhyZWx7PVxcXFxtYXRocmVse1xcXFxta2Vybi0xLjJtdX1cXFxcdmNlbnRjb2xvbn19XCIgKyBcIntcXFxcbWF0aG9we1xcXFxjaGFyXFxcIjIyNTV9fVwiKTsgLy8g4omVXG4vLyBcXHByb3ZpZGVjb21tYW5kKlxcRXFxY29sb257PVxcbWF0aHJlbHtcXG1rZXJuLTEuMm11fVxcZGJsY29sb259XG5cbmRlZmluZU1hY3JvKFwiXFxcXEVxcWNvbG9uXCIsIFwiXFxcXGh0bWxAbWF0aG1se1wiICsgXCJcXFxcbWF0aHJlbHs9XFxcXG1hdGhyZWx7XFxcXG1rZXJuLTEuMm11fVxcXFxkYmxjb2xvbn19XCIgKyBcIntcXFxcbWF0aG9we1xcXFxjaGFyXFxcIjNkXFxcXGNoYXJcXFwiMjIzN319XCIpOyAvLyBcXHByb3ZpZGVjb21tYW5kKlxcZXFjb2xvbntcXG1hdGhyZWx7LX1cXG1hdGhyZWx7XFxta2Vybi0xLjJtdX1cXHZjZW50Y29sb259XG5cbmRlZmluZU1hY3JvKFwiXFxcXGVxY29sb25cIiwgXCJcXFxcaHRtbEBtYXRobWx7XCIgKyBcIlxcXFxtYXRocmVse1xcXFxtYXRocmVsey19XFxcXG1hdGhyZWx7XFxcXG1rZXJuLTEuMm11fVxcXFx2Y2VudGNvbG9ufX1cIiArIFwie1xcXFxtYXRob3B7XFxcXGNoYXJcXFwiMjIzOX19XCIpOyAvLyBcXHByb3ZpZGVjb21tYW5kKlxcRXFjb2xvbntcXG1hdGhyZWx7LX1cXG1hdGhyZWx7XFxta2Vybi0xLjJtdX1cXGRibGNvbG9ufVxuXG5kZWZpbmVNYWNybyhcIlxcXFxFcWNvbG9uXCIsIFwiXFxcXGh0bWxAbWF0aG1se1wiICsgXCJcXFxcbWF0aHJlbHtcXFxcbWF0aHJlbHstfVxcXFxtYXRocmVse1xcXFxta2Vybi0xLjJtdX1cXFxcZGJsY29sb259fVwiICsgXCJ7XFxcXG1hdGhvcHtcXFxcY2hhclxcXCIyMjEyXFxcXGNoYXJcXFwiMjIzN319XCIpOyAvLyBcXHByb3ZpZGVjb21tYW5kKlxcY29sb25hcHByb3h7XFx2Y2VudGNvbG9uXFxtYXRocmVse1xcbWtlcm4tMS4ybXV9XFxhcHByb3h9XG5cbmRlZmluZU1hY3JvKFwiXFxcXGNvbG9uYXBwcm94XCIsIFwiXFxcXGh0bWxAbWF0aG1se1wiICsgXCJcXFxcbWF0aHJlbHtcXFxcdmNlbnRjb2xvblxcXFxtYXRocmVse1xcXFxta2Vybi0xLjJtdX1cXFxcYXBwcm94fX1cIiArIFwie1xcXFxtYXRob3B7XFxcXGNoYXJcXFwiM2FcXFxcY2hhclxcXCIyMjQ4fX1cIik7IC8vIFxccHJvdmlkZWNvbW1hbmQqXFxDb2xvbmFwcHJveHtcXGRibGNvbG9uXFxtYXRocmVse1xcbWtlcm4tMS4ybXV9XFxhcHByb3h9XG5cbmRlZmluZU1hY3JvKFwiXFxcXENvbG9uYXBwcm94XCIsIFwiXFxcXGh0bWxAbWF0aG1se1wiICsgXCJcXFxcbWF0aHJlbHtcXFxcZGJsY29sb25cXFxcbWF0aHJlbHtcXFxcbWtlcm4tMS4ybXV9XFxcXGFwcHJveH19XCIgKyBcIntcXFxcbWF0aG9we1xcXFxjaGFyXFxcIjIyMzdcXFxcY2hhclxcXCIyMjQ4fX1cIik7IC8vIFxccHJvdmlkZWNvbW1hbmQqXFxjb2xvbnNpbXtcXHZjZW50Y29sb25cXG1hdGhyZWx7XFxta2Vybi0xLjJtdX1cXHNpbX1cblxuZGVmaW5lTWFjcm8oXCJcXFxcY29sb25zaW1cIiwgXCJcXFxcaHRtbEBtYXRobWx7XCIgKyBcIlxcXFxtYXRocmVse1xcXFx2Y2VudGNvbG9uXFxcXG1hdGhyZWx7XFxcXG1rZXJuLTEuMm11fVxcXFxzaW19fVwiICsgXCJ7XFxcXG1hdGhvcHtcXFxcY2hhclxcXCIzYVxcXFxjaGFyXFxcIjIyM2N9fVwiKTsgLy8gXFxwcm92aWRlY29tbWFuZCpcXENvbG9uc2lte1xcZGJsY29sb25cXG1hdGhyZWx7XFxta2Vybi0xLjJtdX1cXHNpbX1cblxuZGVmaW5lTWFjcm8oXCJcXFxcQ29sb25zaW1cIiwgXCJcXFxcaHRtbEBtYXRobWx7XCIgKyBcIlxcXFxtYXRocmVse1xcXFxkYmxjb2xvblxcXFxtYXRocmVse1xcXFxta2Vybi0xLjJtdX1cXFxcc2ltfX1cIiArIFwie1xcXFxtYXRob3B7XFxcXGNoYXJcXFwiMjIzN1xcXFxjaGFyXFxcIjIyM2N9fVwiKTsgLy8gU29tZSBVbmljb2RlIGNoYXJhY3RlcnMgYXJlIGltcGxlbWVudGVkIHdpdGggbWFjcm9zIHRvIG1hdGh0b29scyBmdW5jdGlvbnMuXG5cbmRlZmluZU1hY3JvKFwiXFx1MjIzN1wiLCBcIlxcXFxkYmxjb2xvblwiKTsgLy8gOjpcblxuZGVmaW5lTWFjcm8oXCJcXHUyMjM5XCIsIFwiXFxcXGVxY29sb25cIik7IC8vIC06XG5cbmRlZmluZU1hY3JvKFwiXFx1MjI1NFwiLCBcIlxcXFxjb2xvbmVxcVwiKTsgLy8gOj1cblxuZGVmaW5lTWFjcm8oXCJcXHUyMjU1XCIsIFwiXFxcXGVxcWNvbG9uXCIpOyAvLyA9OlxuXG5kZWZpbmVNYWNybyhcIlxcdTJBNzRcIiwgXCJcXFxcQ29sb25lcXFcIik7IC8vIDo6PVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gY29sb25lcXVhbHMuc3R5XG4vLyBBbHRlcm5hdGUgbmFtZXMgZm9yIG1hdGh0b29scydzIG1hY3JvczpcblxuZGVmaW5lTWFjcm8oXCJcXFxccmF0aW9cIiwgXCJcXFxcdmNlbnRjb2xvblwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGNvbG9uY29sb25cIiwgXCJcXFxcZGJsY29sb25cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxjb2xvbmVxdWFsc1wiLCBcIlxcXFxjb2xvbmVxcVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGNvbG9uY29sb25lcXVhbHNcIiwgXCJcXFxcQ29sb25lcXFcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxlcXVhbHNjb2xvblwiLCBcIlxcXFxlcXFjb2xvblwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGVxdWFsc2NvbG9uY29sb25cIiwgXCJcXFxcRXFxY29sb25cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxjb2xvbm1pbnVzXCIsIFwiXFxcXGNvbG9uZXFcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxjb2xvbmNvbG9ubWludXNcIiwgXCJcXFxcQ29sb25lcVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXG1pbnVzY29sb25cIiwgXCJcXFxcZXFjb2xvblwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXG1pbnVzY29sb25jb2xvblwiLCBcIlxcXFxFcWNvbG9uXCIpOyAvLyBcXGNvbG9uYXBwcm94IG5hbWUgaXMgc2FtZSBpbiBtYXRodG9vbHMgYW5kIGNvbG9uZXF1YWxzLlxuXG5kZWZpbmVNYWNybyhcIlxcXFxjb2xvbmNvbG9uYXBwcm94XCIsIFwiXFxcXENvbG9uYXBwcm94XCIpOyAvLyBcXGNvbG9uc2ltIG5hbWUgaXMgc2FtZSBpbiBtYXRodG9vbHMgYW5kIGNvbG9uZXF1YWxzLlxuXG5kZWZpbmVNYWNybyhcIlxcXFxjb2xvbmNvbG9uc2ltXCIsIFwiXFxcXENvbG9uc2ltXCIpOyAvLyBBZGRpdGlvbmFsIG1hY3JvcywgaW1wbGVtZW50ZWQgYnkgYW5hbG9neSB3aXRoIG1hdGh0b29scyBkZWZpbml0aW9uczpcblxuZGVmaW5lTWFjcm8oXCJcXFxcc2ltY29sb25cIiwgXCJcXFxcbWF0aHJlbHtcXFxcc2ltXFxcXG1hdGhyZWx7XFxcXG1rZXJuLTEuMm11fVxcXFx2Y2VudGNvbG9ufVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHNpbWNvbG9uY29sb25cIiwgXCJcXFxcbWF0aHJlbHtcXFxcc2ltXFxcXG1hdGhyZWx7XFxcXG1rZXJuLTEuMm11fVxcXFxkYmxjb2xvbn1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxhcHByb3hjb2xvblwiLCBcIlxcXFxtYXRocmVse1xcXFxhcHByb3hcXFxcbWF0aHJlbHtcXFxcbWtlcm4tMS4ybXV9XFxcXHZjZW50Y29sb259XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcYXBwcm94Y29sb25jb2xvblwiLCBcIlxcXFxtYXRocmVse1xcXFxhcHByb3hcXFxcbWF0aHJlbHtcXFxcbWtlcm4tMS4ybXV9XFxcXGRibGNvbG9ufVwiKTsgLy8gUHJlc2VudCBpbiBuZXd0eG1hdGgsIHB4Zm9udHMgYW5kIHR4Zm9udHNcblxuZGVmaW5lTWFjcm8oXCJcXFxcbm90bmlcIiwgXCJcXFxcaHRtbEBtYXRobWx7XFxcXG5vdFxcXFxuaX17XFxcXG1hdGhyZWx7XFxcXGNoYXJgXFx1MjIwQ319XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcbGltc3VwXCIsIFwiXFxcXERPVFNCXFxcXG1hdGhvcHtcXFxcb3BlcmF0b3JuYW1le2xpbVxcXFwsc3VwfX1cXFxcbGltaXRzXCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcbGltaW5mXCIsIFwiXFxcXERPVFNCXFxcXG1hdGhvcHtcXFxcb3BlcmF0b3JuYW1le2xpbVxcXFwsaW5mfX1cXFxcbGltaXRzXCIpOyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBNYXRoTUwgYWx0ZXJuYXRlcyBmb3IgS2FUZVggZ2x5cGhzIGluIHRoZSBVbmljb2RlIHByaXZhdGUgYXJlYVxuXG5kZWZpbmVNYWNybyhcIlxcXFxndmVydG5lcXFcIiwgXCJcXFxcaHRtbEBtYXRobWx7XFxcXEBndmVydG5lcXF9e1xcdTIyNjl9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcbHZlcnRuZXFxXCIsIFwiXFxcXGh0bWxAbWF0aG1se1xcXFxAbHZlcnRuZXFxfXtcXHUyMjY4fVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXG5nZXFxXCIsIFwiXFxcXGh0bWxAbWF0aG1se1xcXFxAbmdlcXF9e1xcdTIyNzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcbmdlcXNsYW50XCIsIFwiXFxcXGh0bWxAbWF0aG1se1xcXFxAbmdlcXNsYW50fXtcXHUyMjcxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXG5sZXFxXCIsIFwiXFxcXGh0bWxAbWF0aG1se1xcXFxAbmxlcXF9e1xcdTIyNzB9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcbmxlcXNsYW50XCIsIFwiXFxcXGh0bWxAbWF0aG1se1xcXFxAbmxlcXNsYW50fXtcXHUyMjcwfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXG5zaG9ydG1pZFwiLCBcIlxcXFxodG1sQG1hdGhtbHtcXFxcQG5zaG9ydG1pZH174oikfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXG5zaG9ydHBhcmFsbGVsXCIsIFwiXFxcXGh0bWxAbWF0aG1se1xcXFxAbnNob3J0cGFyYWxsZWx9e+KIpn1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxuc3Vic2V0ZXFxXCIsIFwiXFxcXGh0bWxAbWF0aG1se1xcXFxAbnN1YnNldGVxcX17XFx1MjI4OH1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxuc3Vwc2V0ZXFxXCIsIFwiXFxcXGh0bWxAbWF0aG1se1xcXFxAbnN1cHNldGVxcX17XFx1MjI4OX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFx2YXJzdWJzZXRuZXFcIiwgXCJcXFxcaHRtbEBtYXRobWx7XFxcXEB2YXJzdWJzZXRuZXF9e+KKin1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFx2YXJzdWJzZXRuZXFxXCIsIFwiXFxcXGh0bWxAbWF0aG1se1xcXFxAdmFyc3Vic2V0bmVxcX174quLfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHZhcnN1cHNldG5lcVwiLCBcIlxcXFxodG1sQG1hdGhtbHtcXFxcQHZhcnN1cHNldG5lcX174oqLfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHZhcnN1cHNldG5lcXFcIiwgXCJcXFxcaHRtbEBtYXRobWx7XFxcXEB2YXJzdXBzZXRuZXFxfXviq4x9XCIpOyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBzdG1hcnlyZCBhbmQgc2VtYW50aWNcbi8vIFRoZSBzdG1hcnlyZCBhbmQgc2VtYW50aWMgcGFja2FnZXMgcmVuZGVyIHRoZSBuZXh0IGZvdXIgaXRlbXMgYnkgY2FsbGluZyBhXG4vLyBnbHlwaC4gVGhvc2UgZ2x5cGhzIGRvIG5vdCBleGlzdCBpbiB0aGUgS2FUZVggZm9udHMuIEhlbmNlIHRoZSBtYWNyb3MuXG5cbmRlZmluZU1hY3JvKFwiXFxcXGxsYnJhY2tldFwiLCBcIlxcXFxodG1sQG1hdGhtbHtcIiArIFwiXFxcXG1hdGhvcGVue1tcXFxcbWtlcm4tMy4ybXVbfX1cIiArIFwie1xcXFxtYXRob3BlbntcXFxcY2hhcmBcXHUyN0U2fX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxycmJyYWNrZXRcIiwgXCJcXFxcaHRtbEBtYXRobWx7XCIgKyBcIlxcXFxtYXRoY2xvc2V7XVxcXFxta2Vybi0zLjJtdV19fVwiICsgXCJ7XFxcXG1hdGhjbG9zZXtcXFxcY2hhcmBcXHUyN0U3fX1cIik7XG5kZWZpbmVNYWNybyhcIlxcdTI3RTZcIiwgXCJcXFxcbGxicmFja2V0XCIpOyAvLyBibGFja2JvYXJkIGJvbGQgW1xuXG5kZWZpbmVNYWNybyhcIlxcdTI3RTdcIiwgXCJcXFxccnJicmFja2V0XCIpOyAvLyBibGFja2JvYXJkIGJvbGQgXVxuXG5kZWZpbmVNYWNybyhcIlxcXFxsQnJhY2VcIiwgXCJcXFxcaHRtbEBtYXRobWx7XCIgKyBcIlxcXFxtYXRob3BlbntcXFxce1xcXFxta2Vybi0zLjJtdVt9fVwiICsgXCJ7XFxcXG1hdGhvcGVue1xcXFxjaGFyYFxcdTI5ODN9fVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHJCcmFjZVwiLCBcIlxcXFxodG1sQG1hdGhtbHtcIiArIFwiXFxcXG1hdGhjbG9zZXtdXFxcXG1rZXJuLTMuMm11XFxcXH19fVwiICsgXCJ7XFxcXG1hdGhjbG9zZXtcXFxcY2hhcmBcXHUyOTg0fX1cIik7XG5kZWZpbmVNYWNybyhcIlxcdTI5ODNcIiwgXCJcXFxcbEJyYWNlXCIpOyAvLyBibGFja2JvYXJkIGJvbGQge1xuXG5kZWZpbmVNYWNybyhcIlxcdTI5ODRcIiwgXCJcXFxcckJyYWNlXCIpOyAvLyBibGFja2JvYXJkIGJvbGQgfVxuLy8gVE9ETzogQ3JlYXRlIHZhcmlhYmxlIHNpemVkIHZlcnNpb25zIG9mIHRoZSBsYXN0IHR3byBpdGVtcy4gSSBiZWxpZXZlIHRoYXRcbi8vIHdpbGwgcmVxdWlyZSBuZXcgZm9udCBnbHlwaHMuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyB0ZXh2Yy5zdHlcbi8vIFRoZSB0ZXh2YyBwYWNrYWdlIGNvbnRhaW5zIG1hY3JvcyBhdmFpbGFibGUgaW4gbWVkaWF3aWtpIHBhZ2VzLlxuLy8gV2Ugb21pdCB0aGUgZnVuY3Rpb25zIGRlcHJlY2F0ZWQgYXRcbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hlbHA6RGlzcGxheWluZ19hX2Zvcm11bGEjRGVwcmVjYXRlZF9zeW50YXhcbi8vIFdlIGFsc28gb21pdCB0ZXh2YydzIFxcTywgd2hpY2ggY29uZmxpY3RzIHdpdGggXFx0ZXh0e1xcT31cblxuZGVmaW5lTWFjcm8oXCJcXFxcZGFyclwiLCBcIlxcXFxkb3duYXJyb3dcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxkQXJyXCIsIFwiXFxcXERvd25hcnJvd1wiKTtcbmRlZmluZU1hY3JvKFwiXFxcXERhcnJcIiwgXCJcXFxcRG93bmFycm93XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcbGFuZ1wiLCBcIlxcXFxsYW5nbGVcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxyYW5nXCIsIFwiXFxcXHJhbmdsZVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHVhcnJcIiwgXCJcXFxcdXBhcnJvd1wiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHVBcnJcIiwgXCJcXFxcVXBhcnJvd1wiKTtcbmRlZmluZU1hY3JvKFwiXFxcXFVhcnJcIiwgXCJcXFxcVXBhcnJvd1wiKTtcbmRlZmluZU1hY3JvKFwiXFxcXE5cIiwgXCJcXFxcbWF0aGJie059XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcUlwiLCBcIlxcXFxtYXRoYmJ7Un1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxaXCIsIFwiXFxcXG1hdGhiYntafVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGFsZWZcIiwgXCJcXFxcYWxlcGhcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxhbGVmc3ltXCIsIFwiXFxcXGFsZXBoXCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcQWxwaGFcIiwgXCJcXFxcbWF0aHJte0F9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcQmV0YVwiLCBcIlxcXFxtYXRocm17Qn1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxidWxsXCIsIFwiXFxcXGJ1bGxldFwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXENoaVwiLCBcIlxcXFxtYXRocm17WH1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxjbHVic1wiLCBcIlxcXFxjbHVic3VpdFwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGNudW1zXCIsIFwiXFxcXG1hdGhiYntDfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXENvbXBsZXhcIiwgXCJcXFxcbWF0aGJie0N9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcRGFnZ2VyXCIsIFwiXFxcXGRkYWdnZXJcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxkaWFtb25kc1wiLCBcIlxcXFxkaWFtb25kc3VpdFwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGVtcHR5XCIsIFwiXFxcXGVtcHR5c2V0XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcRXBzaWxvblwiLCBcIlxcXFxtYXRocm17RX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxFdGFcIiwgXCJcXFxcbWF0aHJte0h9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcZXhpc3RcIiwgXCJcXFxcZXhpc3RzXCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcaGFyclwiLCBcIlxcXFxsZWZ0cmlnaHRhcnJvd1wiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGhBcnJcIiwgXCJcXFxcTGVmdHJpZ2h0YXJyb3dcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxIYXJyXCIsIFwiXFxcXExlZnRyaWdodGFycm93XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcaGVhcnRzXCIsIFwiXFxcXGhlYXJ0c3VpdFwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGltYWdlXCIsIFwiXFxcXEltXCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcaW5maW5cIiwgXCJcXFxcaW5mdHlcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxJb3RhXCIsIFwiXFxcXG1hdGhybXtJfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGlzaW5cIiwgXCJcXFxcaW5cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxLYXBwYVwiLCBcIlxcXFxtYXRocm17S31cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxsYXJyXCIsIFwiXFxcXGxlZnRhcnJvd1wiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGxBcnJcIiwgXCJcXFxcTGVmdGFycm93XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcTGFyclwiLCBcIlxcXFxMZWZ0YXJyb3dcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxscmFyclwiLCBcIlxcXFxsZWZ0cmlnaHRhcnJvd1wiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGxyQXJyXCIsIFwiXFxcXExlZnRyaWdodGFycm93XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcTHJhcnJcIiwgXCJcXFxcTGVmdHJpZ2h0YXJyb3dcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxNdVwiLCBcIlxcXFxtYXRocm17TX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxuYXRudW1zXCIsIFwiXFxcXG1hdGhiYntOfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXE51XCIsIFwiXFxcXG1hdGhybXtOfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXE9taWNyb25cIiwgXCJcXFxcbWF0aHJte099XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxccGx1c21uXCIsIFwiXFxcXHBtXCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxccmFyclwiLCBcIlxcXFxyaWdodGFycm93XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcckFyclwiLCBcIlxcXFxSaWdodGFycm93XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcUmFyclwiLCBcIlxcXFxSaWdodGFycm93XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxccmVhbFwiLCBcIlxcXFxSZVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHJlYWxzXCIsIFwiXFxcXG1hdGhiYntSfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXFJlYWxzXCIsIFwiXFxcXG1hdGhiYntSfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXFJob1wiLCBcIlxcXFxtYXRocm17UH1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxzZG90XCIsIFwiXFxcXGNkb3RcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxzZWN0XCIsIFwiXFxcXFNcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxzcGFkZXNcIiwgXCJcXFxcc3BhZGVzdWl0XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcc3ViXCIsIFwiXFxcXHN1YnNldFwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHN1YmVcIiwgXCJcXFxcc3Vic2V0ZXFcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxzdXBlXCIsIFwiXFxcXHN1cHNldGVxXCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcVGF1XCIsIFwiXFxcXG1hdGhybXtUfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHRoZXRhc3ltXCIsIFwiXFxcXHZhcnRoZXRhXCIpOyAvLyBUT0RPOiBkZWZpbmVNYWNybyhcIlxcXFx2YXJjb3BwYVwiLCBcIlxcXFxcXG1ib3h7XFxcXGNvcHBhfVwiKTtcblxuZGVmaW5lTWFjcm8oXCJcXFxcd2VpZXJwXCIsIFwiXFxcXHdwXCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcWmV0YVwiLCBcIlxcXFxtYXRocm17Wn1cIik7IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIHN0YXRtYXRoLnN0eVxuLy8gaHR0cHM6Ly9jdGFuLm1hdGguaWxsaW5vaXMuZWR1L21hY3Jvcy9sYXRleC9jb250cmliL3N0YXRtYXRoL3N0YXRtYXRoLnBkZlxuXG5kZWZpbmVNYWNybyhcIlxcXFxhcmdtaW5cIiwgXCJcXFxcRE9UU0JcXFxcbWF0aG9we1xcXFxvcGVyYXRvcm5hbWV7YXJnXFxcXCxtaW59fVxcXFxsaW1pdHNcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxhcmdtYXhcIiwgXCJcXFxcRE9UU0JcXFxcbWF0aG9we1xcXFxvcGVyYXRvcm5hbWV7YXJnXFxcXCxtYXh9fVxcXFxsaW1pdHNcIik7IC8vIEN1c3RvbSBLaGFuIEFjYWRlbXkgY29sb3JzLCBzaG91bGQgYmUgbW92ZWQgdG8gYW4gb3B0aW9uYWwgcGFja2FnZVxuXG5kZWZpbmVNYWNybyhcIlxcXFxibHVlXCIsIFwiXFxcXHRleHRjb2xvcnsjIzY0OTVlZH17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcb3JhbmdlXCIsIFwiXFxcXHRleHRjb2xvcnsjI2ZmYTUwMH17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxccGlua1wiLCBcIlxcXFx0ZXh0Y29sb3J7IyNmZjAwYWZ9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHJlZFwiLCBcIlxcXFx0ZXh0Y29sb3J7IyNkZjAwMzB9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGdyZWVuXCIsIFwiXFxcXHRleHRjb2xvcnsjIzI4YWU3Yn17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcZ3JheVwiLCBcIlxcXFx0ZXh0Y29sb3J7Z3JheX17IyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHB1cnBsZVwiLCBcIlxcXFx0ZXh0Y29sb3J7IyM5ZDM4YmR9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGJsdWVBXCIsIFwiXFxcXHRleHRjb2xvcnsjI2NjZmFmZn17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcYmx1ZUJcIiwgXCJcXFxcdGV4dGNvbG9yeyMjODBmNmZmfXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxibHVlQ1wiLCBcIlxcXFx0ZXh0Y29sb3J7IyM2M2Q5ZWF9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGJsdWVEXCIsIFwiXFxcXHRleHRjb2xvcnsjIzExYWNjZH17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcYmx1ZUVcIiwgXCJcXFxcdGV4dGNvbG9yeyMjMGM3Zjk5fXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFx0ZWFsQVwiLCBcIlxcXFx0ZXh0Y29sb3J7IyM5NGZmZjV9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHRlYWxCXCIsIFwiXFxcXHRleHRjb2xvcnsjIzI2ZWRkNX17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcdGVhbENcIiwgXCJcXFxcdGV4dGNvbG9yeyMjMDFkMWMxfXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFx0ZWFsRFwiLCBcIlxcXFx0ZXh0Y29sb3J7IyMwMWE5OTV9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHRlYWxFXCIsIFwiXFxcXHRleHRjb2xvcnsjIzIwODE3MH17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcZ3JlZW5BXCIsIFwiXFxcXHRleHRjb2xvcnsjI2I2ZmZiMH17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcZ3JlZW5CXCIsIFwiXFxcXHRleHRjb2xvcnsjIzhhZjI4MX17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcZ3JlZW5DXCIsIFwiXFxcXHRleHRjb2xvcnsjIzc0Y2Y3MH17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcZ3JlZW5EXCIsIFwiXFxcXHRleHRjb2xvcnsjIzFmYWI1NH17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcZ3JlZW5FXCIsIFwiXFxcXHRleHRjb2xvcnsjIzBkOTIzZn17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcZ29sZEFcIiwgXCJcXFxcdGV4dGNvbG9yeyMjZmZkMGE5fXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxnb2xkQlwiLCBcIlxcXFx0ZXh0Y29sb3J7IyNmZmJiNzF9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGdvbGRDXCIsIFwiXFxcXHRleHRjb2xvcnsjI2ZmOWMzOX17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcZ29sZERcIiwgXCJcXFxcdGV4dGNvbG9yeyMjZTA3ZDEwfXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxnb2xkRVwiLCBcIlxcXFx0ZXh0Y29sb3J7IyNhNzVhMDV9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHJlZEFcIiwgXCJcXFxcdGV4dGNvbG9yeyMjZmNhOWE5fXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxyZWRCXCIsIFwiXFxcXHRleHRjb2xvcnsjI2ZmODQ4Mn17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxccmVkQ1wiLCBcIlxcXFx0ZXh0Y29sb3J7IyNmOTY4NWR9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHJlZERcIiwgXCJcXFxcdGV4dGNvbG9yeyMjZTg0ZDM5fXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxyZWRFXCIsIFwiXFxcXHRleHRjb2xvcnsjI2JjMjYxMn17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcbWFyb29uQVwiLCBcIlxcXFx0ZXh0Y29sb3J7IyNmZmJkZTB9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXG1hcm9vbkJcIiwgXCJcXFxcdGV4dGNvbG9yeyMjZmY5MmM2fXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxtYXJvb25DXCIsIFwiXFxcXHRleHRjb2xvcnsjI2VkNWZhNn17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcbWFyb29uRFwiLCBcIlxcXFx0ZXh0Y29sb3J7IyNjYTMzN2N9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXG1hcm9vbkVcIiwgXCJcXFxcdGV4dGNvbG9yeyMjOWUwMzRlfXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxwdXJwbGVBXCIsIFwiXFxcXHRleHRjb2xvcnsjI2RkZDdmZn17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxccHVycGxlQlwiLCBcIlxcXFx0ZXh0Y29sb3J7IyNjNmI5ZmN9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHB1cnBsZUNcIiwgXCJcXFxcdGV4dGNvbG9yeyMjYWE4N2ZmfXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxwdXJwbGVEXCIsIFwiXFxcXHRleHRjb2xvcnsjIzc4NTRhYn17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxccHVycGxlRVwiLCBcIlxcXFx0ZXh0Y29sb3J7IyM1NDNiNzh9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXG1pbnRBXCIsIFwiXFxcXHRleHRjb2xvcnsjI2Y1ZjllOH17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcbWludEJcIiwgXCJcXFxcdGV4dGNvbG9yeyMjZWRmMmRmfXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxtaW50Q1wiLCBcIlxcXFx0ZXh0Y29sb3J7IyNlMGU1Y2N9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGdyYXlBXCIsIFwiXFxcXHRleHRjb2xvcnsjI2Y2ZjdmN317IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcZ3JheUJcIiwgXCJcXFxcdGV4dGNvbG9yeyMjZjBmMWYyfXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxncmF5Q1wiLCBcIlxcXFx0ZXh0Y29sb3J7IyNlM2U1ZTZ9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGdyYXlEXCIsIFwiXFxcXHRleHRjb2xvcnsjI2Q2ZDhkYX17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcZ3JheUVcIiwgXCJcXFxcdGV4dGNvbG9yeyMjYmFiZWMyfXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxncmF5RlwiLCBcIlxcXFx0ZXh0Y29sb3J7IyM4ODhkOTN9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGdyYXlHXCIsIFwiXFxcXHRleHRjb2xvcnsjIzYyNjU2OX17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcZ3JheUhcIiwgXCJcXFxcdGV4dGNvbG9yeyMjM2IzZTQwfXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxncmF5SVwiLCBcIlxcXFx0ZXh0Y29sb3J7IyMyMTI0MmN9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGthQmx1ZVwiLCBcIlxcXFx0ZXh0Y29sb3J7IyMzMTQ0NTN9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGthR3JlZW5cIiwgXCJcXFxcdGV4dGNvbG9yeyMjNzFCMzA3fXsjMX1cIik7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9NYWNyb0V4cGFuZGVyLmpzXG4vKipcbiAqIFRoaXMgZmlsZSBjb250YWlucyB0aGUg4oCcZ3VsbGV04oCdIHdoZXJlIG1hY3JvcyBhcmUgZXhwYW5kZWRcbiAqIHVudGlsIG9ubHkgbm9uLW1hY3JvIHRva2VucyByZW1haW4uXG4gKi9cblxuXG5cblxuXG5cblxuLy8gTGlzdCBvZiBjb21tYW5kcyB0aGF0IGFjdCBsaWtlIG1hY3JvcyBidXQgYXJlbid0IGRlZmluZWQgYXMgYSBtYWNybyxcbi8vIGZ1bmN0aW9uLCBvciBzeW1ib2wuICBVc2VkIGluIGBpc0RlZmluZWRgLlxudmFyIGltcGxpY2l0Q29tbWFuZHMgPSB7XG4gIFwiXFxcXHJlbGF4XCI6IHRydWUsXG4gIC8vIE1hY3JvRXhwYW5kZXIuanNcbiAgXCJeXCI6IHRydWUsXG4gIC8vIFBhcnNlci5qc1xuICBcIl9cIjogdHJ1ZSxcbiAgLy8gUGFyc2VyLmpzXG4gIFwiXFxcXGxpbWl0c1wiOiB0cnVlLFxuICAvLyBQYXJzZXIuanNcbiAgXCJcXFxcbm9saW1pdHNcIjogdHJ1ZSAvLyBQYXJzZXIuanNcblxufTtcblxudmFyIE1hY3JvRXhwYW5kZXJfTWFjcm9FeHBhbmRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE1hY3JvRXhwYW5kZXIoaW5wdXQsIHNldHRpbmdzLCBtb2RlKSB7XG4gICAgdGhpcy5zZXR0aW5ncyA9IHZvaWQgMDtcbiAgICB0aGlzLmV4cGFuc2lvbkNvdW50ID0gdm9pZCAwO1xuICAgIHRoaXMubGV4ZXIgPSB2b2lkIDA7XG4gICAgdGhpcy5tYWNyb3MgPSB2b2lkIDA7XG4gICAgdGhpcy5zdGFjayA9IHZvaWQgMDtcbiAgICB0aGlzLm1vZGUgPSB2b2lkIDA7XG4gICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xuICAgIHRoaXMuZXhwYW5zaW9uQ291bnQgPSAwO1xuICAgIHRoaXMuZmVlZChpbnB1dCk7IC8vIE1ha2UgbmV3IGdsb2JhbCBuYW1lc3BhY2VcblxuICAgIHRoaXMubWFjcm9zID0gbmV3IE5hbWVzcGFjZV9OYW1lc3BhY2UobWFjcm9zLCBzZXR0aW5ncy5tYWNyb3MpO1xuICAgIHRoaXMubW9kZSA9IG1vZGU7XG4gICAgdGhpcy5zdGFjayA9IFtdOyAvLyBjb250YWlucyB0b2tlbnMgaW4gUkVWRVJTRSBvcmRlclxuICB9XG4gIC8qKlxuICAgKiBGZWVkIGEgbmV3IGlucHV0IHN0cmluZyB0byB0aGUgc2FtZSBNYWNyb0V4cGFuZGVyXG4gICAqICh3aXRoIGV4aXN0aW5nIG1hY3JvcyBldGMuKS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gTWFjcm9FeHBhbmRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmZlZWQgPSBmdW5jdGlvbiBmZWVkKGlucHV0KSB7XG4gICAgdGhpcy5sZXhlciA9IG5ldyBMZXhlcl9MZXhlcihpbnB1dCwgdGhpcy5zZXR0aW5ncyk7XG4gIH1cbiAgLyoqXG4gICAqIFN3aXRjaGVzIGJldHdlZW4gXCJ0ZXh0XCIgYW5kIFwibWF0aFwiIG1vZGVzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zd2l0Y2hNb2RlID0gZnVuY3Rpb24gc3dpdGNoTW9kZShuZXdNb2RlKSB7XG4gICAgdGhpcy5tb2RlID0gbmV3TW9kZTtcbiAgfVxuICAvKipcbiAgICogU3RhcnQgYSBuZXcgZ3JvdXAgbmVzdGluZyB3aXRoaW4gYWxsIG5hbWVzcGFjZXMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmJlZ2luR3JvdXAgPSBmdW5jdGlvbiBiZWdpbkdyb3VwKCkge1xuICAgIHRoaXMubWFjcm9zLmJlZ2luR3JvdXAoKTtcbiAgfVxuICAvKipcbiAgICogRW5kIGN1cnJlbnQgZ3JvdXAgbmVzdGluZyB3aXRoaW4gYWxsIG5hbWVzcGFjZXMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmVuZEdyb3VwID0gZnVuY3Rpb24gZW5kR3JvdXAoKSB7XG4gICAgdGhpcy5tYWNyb3MuZW5kR3JvdXAoKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdG9wbW9zdCB0b2tlbiBvbiB0aGUgc3RhY2ssIHdpdGhvdXQgZXhwYW5kaW5nIGl0LlxuICAgKiBTaW1pbGFyIGluIGJlaGF2aW9yIHRvIFRlWCdzIGBcXGZ1dHVyZWxldGAuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmZ1dHVyZSA9IGZ1bmN0aW9uIGZ1dHVyZSgpIHtcbiAgICBpZiAodGhpcy5zdGFjay5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMucHVzaFRva2VuKHRoaXMubGV4ZXIubGV4KCkpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV07XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBhbmQgcmV0dXJuIHRoZSBuZXh0IHVuZXhwYW5kZWQgdG9rZW4uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBvcFRva2VuID0gZnVuY3Rpb24gcG9wVG9rZW4oKSB7XG4gICAgdGhpcy5mdXR1cmUoKTsgLy8gZW5zdXJlIG5vbi1lbXB0eSBzdGFja1xuXG4gICAgcmV0dXJuIHRoaXMuc3RhY2sucG9wKCk7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBhIGdpdmVuIHRva2VuIHRvIHRoZSB0b2tlbiBzdGFjay4gIEluIHBhcnRpY3VsYXIsIHRoaXMgZ2V0IGJlIHVzZWRcbiAgICogdG8gcHV0IGJhY2sgYSB0b2tlbiByZXR1cm5lZCBmcm9tIG9uZSBvZiB0aGUgb3RoZXIgbWV0aG9kcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucHVzaFRva2VuID0gZnVuY3Rpb24gcHVzaFRva2VuKHRva2VuKSB7XG4gICAgdGhpcy5zdGFjay5wdXNoKHRva2VuKTtcbiAgfVxuICAvKipcbiAgICogQXBwZW5kIGFuIGFycmF5IG9mIHRva2VucyB0byB0aGUgdG9rZW4gc3RhY2suXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnB1c2hUb2tlbnMgPSBmdW5jdGlvbiBwdXNoVG9rZW5zKHRva2Vucykge1xuICAgIHZhciBfdGhpcyRzdGFjaztcblxuICAgIChfdGhpcyRzdGFjayA9IHRoaXMuc3RhY2spLnB1c2guYXBwbHkoX3RoaXMkc3RhY2ssIHRva2Vucyk7XG4gIH1cbiAgLyoqXG4gICAqIENvbnN1bWUgYWxsIGZvbGxvd2luZyBzcGFjZSB0b2tlbnMsIHdpdGhvdXQgZXhwYW5zaW9uLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jb25zdW1lU3BhY2VzID0gZnVuY3Rpb24gY29uc3VtZVNwYWNlcygpIHtcbiAgICBmb3IgKDs7KSB7XG4gICAgICB2YXIgdG9rZW4gPSB0aGlzLmZ1dHVyZSgpO1xuXG4gICAgICBpZiAodG9rZW4udGV4dCA9PT0gXCIgXCIpIHtcbiAgICAgICAgdGhpcy5zdGFjay5wb3AoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ29uc3VtZSB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBhcmd1bWVudHMgZnJvbSB0aGUgdG9rZW4gc3RyZWFtLFxuICAgKiBhbmQgcmV0dXJuIHRoZSByZXN1bHRpbmcgYXJyYXkgb2YgYXJndW1lbnRzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jb25zdW1lQXJncyA9IGZ1bmN0aW9uIGNvbnN1bWVBcmdzKG51bUFyZ3MpIHtcbiAgICB2YXIgYXJncyA9IFtdOyAvLyBvYnRhaW4gYXJndW1lbnRzLCBlaXRoZXIgc2luZ2xlIHRva2VuIG9yIGJhbGFuY2VkIHvigKZ9IGdyb3VwXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bUFyZ3M7ICsraSkge1xuICAgICAgdGhpcy5jb25zdW1lU3BhY2VzKCk7IC8vIGlnbm9yZSBzcGFjZXMgYmVmb3JlIGVhY2ggYXJndW1lbnRcblxuICAgICAgdmFyIHN0YXJ0T2ZBcmcgPSB0aGlzLnBvcFRva2VuKCk7XG5cbiAgICAgIGlmIChzdGFydE9mQXJnLnRleHQgPT09IFwie1wiKSB7XG4gICAgICAgIHZhciBhcmcgPSBbXTtcbiAgICAgICAgdmFyIGRlcHRoID0gMTtcblxuICAgICAgICB3aGlsZSAoZGVwdGggIT09IDApIHtcbiAgICAgICAgICB2YXIgdG9rID0gdGhpcy5wb3BUb2tlbigpO1xuICAgICAgICAgIGFyZy5wdXNoKHRvayk7XG5cbiAgICAgICAgICBpZiAodG9rLnRleHQgPT09IFwie1wiKSB7XG4gICAgICAgICAgICArK2RlcHRoO1xuICAgICAgICAgIH0gZWxzZSBpZiAodG9rLnRleHQgPT09IFwifVwiKSB7XG4gICAgICAgICAgICAtLWRlcHRoO1xuICAgICAgICAgIH0gZWxzZSBpZiAodG9rLnRleHQgPT09IFwiRU9GXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIkVuZCBvZiBpbnB1dCBpbiBtYWNybyBhcmd1bWVudFwiLCBzdGFydE9mQXJnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBhcmcucG9wKCk7IC8vIHJlbW92ZSBsYXN0IH1cblxuICAgICAgICBhcmcucmV2ZXJzZSgpOyAvLyBsaWtlIGFib3ZlLCB0byBmaXQgaW4gd2l0aCBzdGFjayBvcmRlclxuXG4gICAgICAgIGFyZ3NbaV0gPSBhcmc7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0T2ZBcmcudGV4dCA9PT0gXCJFT0ZcIikge1xuICAgICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJFbmQgb2YgaW5wdXQgZXhwZWN0aW5nIG1hY3JvIGFyZ3VtZW50XCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJnc1tpXSA9IFtzdGFydE9mQXJnXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYXJncztcbiAgfVxuICAvKipcbiAgICogRXhwYW5kIHRoZSBuZXh0IHRva2VuIG9ubHkgb25jZSBpZiBwb3NzaWJsZS5cbiAgICpcbiAgICogSWYgdGhlIHRva2VuIGlzIGV4cGFuZGVkLCB0aGUgcmVzdWx0aW5nIHRva2VucyB3aWxsIGJlIHB1c2hlZCBvbnRvXG4gICAqIHRoZSBzdGFjayBpbiByZXZlcnNlIG9yZGVyIGFuZCB3aWxsIGJlIHJldHVybmVkIGFzIGFuIGFycmF5LFxuICAgKiBhbHNvIGluIHJldmVyc2Ugb3JkZXIuXG4gICAqXG4gICAqIElmIG5vdCwgdGhlIG5leHQgdG9rZW4gd2lsbCBiZSByZXR1cm5lZCB3aXRob3V0IHJlbW92aW5nIGl0XG4gICAqIGZyb20gdGhlIHN0YWNrLiAgVGhpcyBjYXNlIGNhbiBiZSBkZXRlY3RlZCBieSBhIGBUb2tlbmAgcmV0dXJuIHZhbHVlXG4gICAqIGluc3RlYWQgb2YgYW4gYEFycmF5YCByZXR1cm4gdmFsdWUuXG4gICAqXG4gICAqIEluIGVpdGhlciBjYXNlLCB0aGUgbmV4dCB0b2tlbiB3aWxsIGJlIG9uIHRoZSB0b3Agb2YgdGhlIHN0YWNrLFxuICAgKiBvciB0aGUgc3RhY2sgd2lsbCBiZSBlbXB0eS5cbiAgICpcbiAgICogVXNlZCB0byBpbXBsZW1lbnQgYGV4cGFuZEFmdGVyRnV0dXJlYCBhbmQgYGV4cGFuZE5leHRUb2tlbmAuXG4gICAqXG4gICAqIEF0IHRoZSBtb21lbnQsIG1hY3JvIGV4cGFuc2lvbiBkb2Vzbid0IGhhbmRsZSBkZWxpbWl0ZWQgbWFjcm9zLFxuICAgKiBpLmUuIHRoaW5ncyBsaWtlIHRob3NlIGRlZmluZWQgYnkgXFxkZWZcXGZvbyMxXFxlbmR74oCmfS5cbiAgICogU2VlIHRoZSBUZVggYm9vayBwYWdlIDIwMmZmLiBmb3IgZGV0YWlscyBvbiBob3cgdGhvc2Ugc2hvdWxkIGJlaGF2ZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZXhwYW5kT25jZSA9IGZ1bmN0aW9uIGV4cGFuZE9uY2UoKSB7XG4gICAgdmFyIHRvcFRva2VuID0gdGhpcy5wb3BUb2tlbigpO1xuICAgIHZhciBuYW1lID0gdG9wVG9rZW4udGV4dDtcblxuICAgIHZhciBleHBhbnNpb24gPSB0aGlzLl9nZXRFeHBhbnNpb24obmFtZSk7XG5cbiAgICBpZiAoZXhwYW5zaW9uID09IG51bGwpIHtcbiAgICAgIC8vIG1haW5seSBjaGVja2luZyBmb3IgdW5kZWZpbmVkIGhlcmVcbiAgICAgIC8vIEZ1bGx5IGV4cGFuZGVkXG4gICAgICB0aGlzLnB1c2hUb2tlbih0b3BUb2tlbik7XG4gICAgICByZXR1cm4gdG9wVG9rZW47XG4gICAgfVxuXG4gICAgdGhpcy5leHBhbnNpb25Db3VudCsrO1xuXG4gICAgaWYgKHRoaXMuZXhwYW5zaW9uQ291bnQgPiB0aGlzLnNldHRpbmdzLm1heEV4cGFuZCkge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiVG9vIG1hbnkgZXhwYW5zaW9uczogaW5maW5pdGUgbG9vcCBvciBcIiArIFwibmVlZCB0byBpbmNyZWFzZSBtYXhFeHBhbmQgc2V0dGluZ1wiKTtcbiAgICB9XG5cbiAgICB2YXIgdG9rZW5zID0gZXhwYW5zaW9uLnRva2VucztcblxuICAgIGlmIChleHBhbnNpb24ubnVtQXJncykge1xuICAgICAgdmFyIGFyZ3MgPSB0aGlzLmNvbnN1bWVBcmdzKGV4cGFuc2lvbi5udW1BcmdzKTsgLy8gcGFzdGUgYXJndW1lbnRzIGluIHBsYWNlIG9mIHRoZSBwbGFjZWhvbGRlcnNcblxuICAgICAgdG9rZW5zID0gdG9rZW5zLnNsaWNlKCk7IC8vIG1ha2UgYSBzaGFsbG93IGNvcHlcblxuICAgICAgZm9yICh2YXIgaSA9IHRva2Vucy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgdG9rID0gdG9rZW5zW2ldO1xuXG4gICAgICAgIGlmICh0b2sudGV4dCA9PT0gXCIjXCIpIHtcbiAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiSW5jb21wbGV0ZSBwbGFjZWhvbGRlciBhdCBlbmQgb2YgbWFjcm8gYm9keVwiLCB0b2spO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRvayA9IHRva2Vuc1stLWldOyAvLyBuZXh0IHRva2VuIG9uIHN0YWNrXG5cbiAgICAgICAgICBpZiAodG9rLnRleHQgPT09IFwiI1wiKSB7XG4gICAgICAgICAgICAvLyAjIyDihpIgI1xuICAgICAgICAgICAgdG9rZW5zLnNwbGljZShpICsgMSwgMSk7IC8vIGRyb3AgZmlyc3QgI1xuICAgICAgICAgIH0gZWxzZSBpZiAoL15bMS05XSQvLnRlc3QodG9rLnRleHQpKSB7XG4gICAgICAgICAgICB2YXIgX3Rva2VucztcblxuICAgICAgICAgICAgLy8gcmVwbGFjZSB0aGUgcGxhY2Vob2xkZXIgd2l0aCB0aGUgaW5kaWNhdGVkIGFyZ3VtZW50XG4gICAgICAgICAgICAoX3Rva2VucyA9IHRva2Vucykuc3BsaWNlLmFwcGx5KF90b2tlbnMsIFtpLCAyXS5jb25jYXQoYXJnc1srdG9rLnRleHQgLSAxXSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJOb3QgYSB2YWxpZCBhcmd1bWVudCBudW1iZXJcIiwgdG9rKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IC8vIENvbmNhdGVuYXRlIGV4cGFuc2lvbiBvbnRvIHRvcCBvZiBzdGFjay5cblxuXG4gICAgdGhpcy5wdXNoVG9rZW5zKHRva2Vucyk7XG4gICAgcmV0dXJuIHRva2VucztcbiAgfVxuICAvKipcbiAgICogRXhwYW5kIHRoZSBuZXh0IHRva2VuIG9ubHkgb25jZSAoaWYgcG9zc2libGUpLCBhbmQgcmV0dXJuIHRoZSByZXN1bHRpbmdcbiAgICogdG9wIHRva2VuIG9uIHRoZSBzdGFjayAod2l0aG91dCByZW1vdmluZyBhbnl0aGluZyBmcm9tIHRoZSBzdGFjaykuXG4gICAqIFNpbWlsYXIgaW4gYmVoYXZpb3IgdG8gVGVYJ3MgYFxcZXhwYW5kYWZ0ZXJcXGZ1dHVyZWxldGAuXG4gICAqIEVxdWl2YWxlbnQgdG8gZXhwYW5kT25jZSgpIGZvbGxvd2VkIGJ5IGZ1dHVyZSgpLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5leHBhbmRBZnRlckZ1dHVyZSA9IGZ1bmN0aW9uIGV4cGFuZEFmdGVyRnV0dXJlKCkge1xuICAgIHRoaXMuZXhwYW5kT25jZSgpO1xuICAgIHJldHVybiB0aGlzLmZ1dHVyZSgpO1xuICB9XG4gIC8qKlxuICAgKiBSZWN1cnNpdmVseSBleHBhbmQgZmlyc3QgdG9rZW4sIHRoZW4gcmV0dXJuIGZpcnN0IG5vbi1leHBhbmRhYmxlIHRva2VuLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5leHBhbmROZXh0VG9rZW4gPSBmdW5jdGlvbiBleHBhbmROZXh0VG9rZW4oKSB7XG4gICAgZm9yICg7Oykge1xuICAgICAgdmFyIGV4cGFuZGVkID0gdGhpcy5leHBhbmRPbmNlKCk7IC8vIGV4cGFuZE9uY2UgcmV0dXJucyBUb2tlbiBpZiBhbmQgb25seSBpZiBpdCdzIGZ1bGx5IGV4cGFuZGVkLlxuXG4gICAgICBpZiAoZXhwYW5kZWQgaW5zdGFuY2VvZiBUb2tlbl9Ub2tlbikge1xuICAgICAgICAvLyBcXHJlbGF4IHN0b3BzIHRoZSBleHBhbnNpb24sIGJ1dCBzaG91bGRuJ3QgZ2V0IHJldHVybmVkIChhXG4gICAgICAgIC8vIG51bGwgcmV0dXJuIHZhbHVlIGNvdWxkbid0IGdldCBpbXBsZW1lbnRlZCBhcyBhIGZ1bmN0aW9uKS5cbiAgICAgICAgaWYgKGV4cGFuZGVkLnRleHQgPT09IFwiXFxcXHJlbGF4XCIpIHtcbiAgICAgICAgICB0aGlzLnN0YWNrLnBvcCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLnN0YWNrLnBvcCgpOyAvLyA9PT0gZXhwYW5kZWRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gLy8gRmxvdyB1bmFibGUgdG8gZmlndXJlIG91dCB0aGF0IHRoaXMgcGF0aHdheSBpcyBpbXBvc3NpYmxlLlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy80ODA4XG5cblxuICAgIHRocm93IG5ldyBFcnJvcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVucmVhY2hhYmxlXG4gIH1cbiAgLyoqXG4gICAqIEZ1bGx5IGV4cGFuZCB0aGUgZ2l2ZW4gbWFjcm8gbmFtZSBhbmQgcmV0dXJuIHRoZSByZXN1bHRpbmcgbGlzdCBvZlxuICAgKiB0b2tlbnMsIG9yIHJldHVybiBgdW5kZWZpbmVkYCBpZiBubyBzdWNoIG1hY3JvIGlzIGRlZmluZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmV4cGFuZE1hY3JvID0gZnVuY3Rpb24gZXhwYW5kTWFjcm8obmFtZSkge1xuICAgIGlmICghdGhpcy5tYWNyb3MuZ2V0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICB2YXIgb2xkU3RhY2tMZW5ndGggPSB0aGlzLnN0YWNrLmxlbmd0aDtcbiAgICB0aGlzLnB1c2hUb2tlbihuZXcgVG9rZW5fVG9rZW4obmFtZSkpO1xuXG4gICAgd2hpbGUgKHRoaXMuc3RhY2subGVuZ3RoID4gb2xkU3RhY2tMZW5ndGgpIHtcbiAgICAgIHZhciBleHBhbmRlZCA9IHRoaXMuZXhwYW5kT25jZSgpOyAvLyBleHBhbmRPbmNlIHJldHVybnMgVG9rZW4gaWYgYW5kIG9ubHkgaWYgaXQncyBmdWxseSBleHBhbmRlZC5cblxuICAgICAgaWYgKGV4cGFuZGVkIGluc3RhbmNlb2YgVG9rZW5fVG9rZW4pIHtcbiAgICAgICAgb3V0cHV0LnB1c2godGhpcy5zdGFjay5wb3AoKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfVxuICAvKipcbiAgICogRnVsbHkgZXhwYW5kIHRoZSBnaXZlbiBtYWNybyBuYW1lIGFuZCByZXR1cm4gdGhlIHJlc3VsdCBhcyBhIHN0cmluZyxcbiAgICogb3IgcmV0dXJuIGB1bmRlZmluZWRgIGlmIG5vIHN1Y2ggbWFjcm8gaXMgZGVmaW5lZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZXhwYW5kTWFjcm9Bc1RleHQgPSBmdW5jdGlvbiBleHBhbmRNYWNyb0FzVGV4dChuYW1lKSB7XG4gICAgdmFyIHRva2VucyA9IHRoaXMuZXhwYW5kTWFjcm8obmFtZSk7XG5cbiAgICBpZiAodG9rZW5zKSB7XG4gICAgICByZXR1cm4gdG9rZW5zLm1hcChmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgcmV0dXJuIHRva2VuLnRleHQ7XG4gICAgICB9KS5qb2luKFwiXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdG9rZW5zO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZXhwYW5kZWQgbWFjcm8gYXMgYSByZXZlcnNlZCBhcnJheSBvZiB0b2tlbnMgYW5kIGEgbWFjcm9cbiAgICogYXJndW1lbnQgY291bnQuICBPciByZXR1cm5zIGBudWxsYCBpZiBubyBzdWNoIG1hY3JvLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5fZ2V0RXhwYW5zaW9uID0gZnVuY3Rpb24gX2dldEV4cGFuc2lvbihuYW1lKSB7XG4gICAgdmFyIGRlZmluaXRpb24gPSB0aGlzLm1hY3Jvcy5nZXQobmFtZSk7XG5cbiAgICBpZiAoZGVmaW5pdGlvbiA9PSBudWxsKSB7XG4gICAgICAvLyBtYWlubHkgY2hlY2tpbmcgZm9yIHVuZGVmaW5lZCBoZXJlXG4gICAgICByZXR1cm4gZGVmaW5pdGlvbjtcbiAgICB9XG5cbiAgICB2YXIgZXhwYW5zaW9uID0gdHlwZW9mIGRlZmluaXRpb24gPT09IFwiZnVuY3Rpb25cIiA/IGRlZmluaXRpb24odGhpcykgOiBkZWZpbml0aW9uO1xuXG4gICAgaWYgKHR5cGVvZiBleHBhbnNpb24gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHZhciBudW1BcmdzID0gMDtcblxuICAgICAgaWYgKGV4cGFuc2lvbi5pbmRleE9mKFwiI1wiKSAhPT0gLTEpIHtcbiAgICAgICAgdmFyIHN0cmlwcGVkID0gZXhwYW5zaW9uLnJlcGxhY2UoLyMjL2csIFwiXCIpO1xuXG4gICAgICAgIHdoaWxlIChzdHJpcHBlZC5pbmRleE9mKFwiI1wiICsgKG51bUFyZ3MgKyAxKSkgIT09IC0xKSB7XG4gICAgICAgICAgKytudW1BcmdzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBib2R5TGV4ZXIgPSBuZXcgTGV4ZXJfTGV4ZXIoZXhwYW5zaW9uLCB0aGlzLnNldHRpbmdzKTtcbiAgICAgIHZhciB0b2tlbnMgPSBbXTtcbiAgICAgIHZhciB0b2sgPSBib2R5TGV4ZXIubGV4KCk7XG5cbiAgICAgIHdoaWxlICh0b2sudGV4dCAhPT0gXCJFT0ZcIikge1xuICAgICAgICB0b2tlbnMucHVzaCh0b2spO1xuICAgICAgICB0b2sgPSBib2R5TGV4ZXIubGV4KCk7XG4gICAgICB9XG5cbiAgICAgIHRva2Vucy5yZXZlcnNlKCk7IC8vIHRvIGZpdCBpbiB3aXRoIHN0YWNrIHVzaW5nIHB1c2ggYW5kIHBvcFxuXG4gICAgICB2YXIgZXhwYW5kZWQgPSB7XG4gICAgICAgIHRva2VuczogdG9rZW5zLFxuICAgICAgICBudW1BcmdzOiBudW1BcmdzXG4gICAgICB9O1xuICAgICAgcmV0dXJuIGV4cGFuZGVkO1xuICAgIH1cblxuICAgIHJldHVybiBleHBhbnNpb247XG4gIH1cbiAgLyoqXG4gICAqIERldGVybWluZSB3aGV0aGVyIGEgY29tbWFuZCBpcyBjdXJyZW50bHkgXCJkZWZpbmVkXCIgKGhhcyBzb21lXG4gICAqIGZ1bmN0aW9uYWxpdHkpLCBtZWFuaW5nIHRoYXQgaXQncyBhIG1hY3JvIChpbiB0aGUgY3VycmVudCBncm91cCksXG4gICAqIGEgZnVuY3Rpb24sIGEgc3ltYm9sLCBvciBvbmUgb2YgdGhlIHNwZWNpYWwgY29tbWFuZHMgbGlzdGVkIGluXG4gICAqIGBpbXBsaWNpdENvbW1hbmRzYC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaXNEZWZpbmVkID0gZnVuY3Rpb24gaXNEZWZpbmVkKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5tYWNyb3MuaGFzKG5hbWUpIHx8IHNyY19mdW5jdGlvbnMuaGFzT3duUHJvcGVydHkobmFtZSkgfHwgc3JjX3N5bWJvbHMubWF0aC5oYXNPd25Qcm9wZXJ0eShuYW1lKSB8fCBzcmNfc3ltYm9scy50ZXh0Lmhhc093blByb3BlcnR5KG5hbWUpIHx8IGltcGxpY2l0Q29tbWFuZHMuaGFzT3duUHJvcGVydHkobmFtZSk7XG4gIH07XG5cbiAgcmV0dXJuIE1hY3JvRXhwYW5kZXI7XG59KCk7XG5cblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvdW5pY29kZUFjY2VudHMuanNcbi8vIE1hcHBpbmcgb2YgVW5pY29kZSBhY2NlbnQgY2hhcmFjdGVycyB0byB0aGVpciBMYVRlWCBlcXVpdmFsZW50IGluIHRleHQgYW5kXG4vLyBtYXRoIG1vZGUgKHdoZW4gdGhleSBleGlzdCkuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciB1bmljb2RlQWNjZW50cyA9ICh7XG4gIFwiXFx1MDMwMVwiOiB7XG4gICAgdGV4dDogXCJcXFxcJ1wiLFxuICAgIG1hdGg6ICdcXFxcYWN1dGUnXG4gIH0sXG4gIFwiXFx1MDMwMFwiOiB7XG4gICAgdGV4dDogJ1xcXFxgJyxcbiAgICBtYXRoOiAnXFxcXGdyYXZlJ1xuICB9LFxuICBcIlxcdTAzMDhcIjoge1xuICAgIHRleHQ6ICdcXFxcXCInLFxuICAgIG1hdGg6ICdcXFxcZGRvdCdcbiAgfSxcbiAgXCJcXHUwMzAzXCI6IHtcbiAgICB0ZXh0OiAnXFxcXH4nLFxuICAgIG1hdGg6ICdcXFxcdGlsZGUnXG4gIH0sXG4gIFwiXFx1MDMwNFwiOiB7XG4gICAgdGV4dDogJ1xcXFw9JyxcbiAgICBtYXRoOiAnXFxcXGJhcidcbiAgfSxcbiAgXCJcXHUwMzA2XCI6IHtcbiAgICB0ZXh0OiBcIlxcXFx1XCIsXG4gICAgbWF0aDogJ1xcXFxicmV2ZSdcbiAgfSxcbiAgXCJcXHUwMzBDXCI6IHtcbiAgICB0ZXh0OiAnXFxcXHYnLFxuICAgIG1hdGg6ICdcXFxcY2hlY2snXG4gIH0sXG4gIFwiXFx1MDMwMlwiOiB7XG4gICAgdGV4dDogJ1xcXFxeJyxcbiAgICBtYXRoOiAnXFxcXGhhdCdcbiAgfSxcbiAgXCJcXHUwMzA3XCI6IHtcbiAgICB0ZXh0OiAnXFxcXC4nLFxuICAgIG1hdGg6ICdcXFxcZG90J1xuICB9LFxuICBcIlxcdTAzMEFcIjoge1xuICAgIHRleHQ6ICdcXFxccicsXG4gICAgbWF0aDogJ1xcXFxtYXRocmluZydcbiAgfSxcbiAgXCJcXHUwMzBCXCI6IHtcbiAgICB0ZXh0OiAnXFxcXEgnXG4gIH1cbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvdW5pY29kZVN5bWJvbHMuanNcbi8vIFRoaXMgZmlsZSBpcyBHRU5FUkFURUQgYnkgdW5pY29kZU1ha2UuanMuIERPIE5PVCBNT0RJRlkuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciB1bmljb2RlU3ltYm9scyA9ICh7XG4gIFwiXFx4RTFcIjogXCJhXFx1MDMwMVwiLFxuICAvLyDDoSA9IFxcJ3thfVxuICBcIlxceEUwXCI6IFwiYVxcdTAzMDBcIixcbiAgLy8gw6AgPSBcXGB7YX1cbiAgXCJcXHhFNFwiOiBcImFcXHUwMzA4XCIsXG4gIC8vIMOkID0gXFxcInthfVxuICBcIlxcdTAxREZcIjogXCJhXFx1MDMwOFxcdTAzMDRcIixcbiAgLy8gx58gPSBcXFwiXFw9e2F9XG4gIFwiXFx4RTNcIjogXCJhXFx1MDMwM1wiLFxuICAvLyDDoyA9IFxcfnthfVxuICBcIlxcdTAxMDFcIjogXCJhXFx1MDMwNFwiLFxuICAvLyDEgSA9IFxcPXthfVxuICBcIlxcdTAxMDNcIjogXCJhXFx1MDMwNlwiLFxuICAvLyDEgyA9IFxcdXthfVxuICBcIlxcdTFFQUZcIjogXCJhXFx1MDMwNlxcdTAzMDFcIixcbiAgLy8g4bqvID0gXFx1XFwne2F9XG4gIFwiXFx1MUVCMVwiOiBcImFcXHUwMzA2XFx1MDMwMFwiLFxuICAvLyDhurEgPSBcXHVcXGB7YX1cbiAgXCJcXHUxRUI1XCI6IFwiYVxcdTAzMDZcXHUwMzAzXCIsXG4gIC8vIOG6tSA9IFxcdVxcfnthfVxuICBcIlxcdTAxQ0VcIjogXCJhXFx1MDMwQ1wiLFxuICAvLyDHjiA9IFxcdnthfVxuICBcIlxceEUyXCI6IFwiYVxcdTAzMDJcIixcbiAgLy8gw6IgPSBcXF57YX1cbiAgXCJcXHUxRUE1XCI6IFwiYVxcdTAzMDJcXHUwMzAxXCIsXG4gIC8vIOG6pSA9IFxcXlxcJ3thfVxuICBcIlxcdTFFQTdcIjogXCJhXFx1MDMwMlxcdTAzMDBcIixcbiAgLy8g4bqnID0gXFxeXFxge2F9XG4gIFwiXFx1MUVBQlwiOiBcImFcXHUwMzAyXFx1MDMwM1wiLFxuICAvLyDhuqsgPSBcXF5cXH57YX1cbiAgXCJcXHUwMjI3XCI6IFwiYVxcdTAzMDdcIixcbiAgLy8gyKcgPSBcXC57YX1cbiAgXCJcXHUwMUUxXCI6IFwiYVxcdTAzMDdcXHUwMzA0XCIsXG4gIC8vIMehID0gXFwuXFw9e2F9XG4gIFwiXFx4RTVcIjogXCJhXFx1MDMwQVwiLFxuICAvLyDDpSA9IFxccnthfVxuICBcIlxcdTAxRkJcIjogXCJhXFx1MDMwQVxcdTAzMDFcIixcbiAgLy8gx7sgPSBcXHJcXCd7YX1cbiAgXCJcXHUxRTAzXCI6IFwiYlxcdTAzMDdcIixcbiAgLy8g4biDID0gXFwue2J9XG4gIFwiXFx1MDEwN1wiOiBcImNcXHUwMzAxXCIsXG4gIC8vIMSHID0gXFwne2N9XG4gIFwiXFx1MDEwRFwiOiBcImNcXHUwMzBDXCIsXG4gIC8vIMSNID0gXFx2e2N9XG4gIFwiXFx1MDEwOVwiOiBcImNcXHUwMzAyXCIsXG4gIC8vIMSJID0gXFxee2N9XG4gIFwiXFx1MDEwQlwiOiBcImNcXHUwMzA3XCIsXG4gIC8vIMSLID0gXFwue2N9XG4gIFwiXFx1MDEwRlwiOiBcImRcXHUwMzBDXCIsXG4gIC8vIMSPID0gXFx2e2R9XG4gIFwiXFx1MUUwQlwiOiBcImRcXHUwMzA3XCIsXG4gIC8vIOG4iyA9IFxcLntkfVxuICBcIlxceEU5XCI6IFwiZVxcdTAzMDFcIixcbiAgLy8gw6kgPSBcXCd7ZX1cbiAgXCJcXHhFOFwiOiBcImVcXHUwMzAwXCIsXG4gIC8vIMOoID0gXFxge2V9XG4gIFwiXFx4RUJcIjogXCJlXFx1MDMwOFwiLFxuICAvLyDDqyA9IFxcXCJ7ZX1cbiAgXCJcXHUxRUJEXCI6IFwiZVxcdTAzMDNcIixcbiAgLy8g4bq9ID0gXFx+e2V9XG4gIFwiXFx1MDExM1wiOiBcImVcXHUwMzA0XCIsXG4gIC8vIMSTID0gXFw9e2V9XG4gIFwiXFx1MUUxN1wiOiBcImVcXHUwMzA0XFx1MDMwMVwiLFxuICAvLyDhuJcgPSBcXD1cXCd7ZX1cbiAgXCJcXHUxRTE1XCI6IFwiZVxcdTAzMDRcXHUwMzAwXCIsXG4gIC8vIOG4lSA9IFxcPVxcYHtlfVxuICBcIlxcdTAxMTVcIjogXCJlXFx1MDMwNlwiLFxuICAvLyDElSA9IFxcdXtlfVxuICBcIlxcdTAxMUJcIjogXCJlXFx1MDMwQ1wiLFxuICAvLyDEmyA9IFxcdntlfVxuICBcIlxceEVBXCI6IFwiZVxcdTAzMDJcIixcbiAgLy8gw6ogPSBcXF57ZX1cbiAgXCJcXHUxRUJGXCI6IFwiZVxcdTAzMDJcXHUwMzAxXCIsXG4gIC8vIOG6vyA9IFxcXlxcJ3tlfVxuICBcIlxcdTFFQzFcIjogXCJlXFx1MDMwMlxcdTAzMDBcIixcbiAgLy8g4buBID0gXFxeXFxge2V9XG4gIFwiXFx1MUVDNVwiOiBcImVcXHUwMzAyXFx1MDMwM1wiLFxuICAvLyDhu4UgPSBcXF5cXH57ZX1cbiAgXCJcXHUwMTE3XCI6IFwiZVxcdTAzMDdcIixcbiAgLy8gxJcgPSBcXC57ZX1cbiAgXCJcXHUxRTFGXCI6IFwiZlxcdTAzMDdcIixcbiAgLy8g4bifID0gXFwue2Z9XG4gIFwiXFx1MDFGNVwiOiBcImdcXHUwMzAxXCIsXG4gIC8vIMe1ID0gXFwne2d9XG4gIFwiXFx1MUUyMVwiOiBcImdcXHUwMzA0XCIsXG4gIC8vIOG4oSA9IFxcPXtnfVxuICBcIlxcdTAxMUZcIjogXCJnXFx1MDMwNlwiLFxuICAvLyDEnyA9IFxcdXtnfVxuICBcIlxcdTAxRTdcIjogXCJnXFx1MDMwQ1wiLFxuICAvLyDHpyA9IFxcdntnfVxuICBcIlxcdTAxMURcIjogXCJnXFx1MDMwMlwiLFxuICAvLyDEnSA9IFxcXntnfVxuICBcIlxcdTAxMjFcIjogXCJnXFx1MDMwN1wiLFxuICAvLyDEoSA9IFxcLntnfVxuICBcIlxcdTFFMjdcIjogXCJoXFx1MDMwOFwiLFxuICAvLyDhuKcgPSBcXFwie2h9XG4gIFwiXFx1MDIxRlwiOiBcImhcXHUwMzBDXCIsXG4gIC8vIMifID0gXFx2e2h9XG4gIFwiXFx1MDEyNVwiOiBcImhcXHUwMzAyXCIsXG4gIC8vIMSlID0gXFxee2h9XG4gIFwiXFx1MUUyM1wiOiBcImhcXHUwMzA3XCIsXG4gIC8vIOG4oyA9IFxcLntofVxuICBcIlxceEVEXCI6IFwiaVxcdTAzMDFcIixcbiAgLy8gw60gPSBcXCd7aX1cbiAgXCJcXHhFQ1wiOiBcImlcXHUwMzAwXCIsXG4gIC8vIMOsID0gXFxge2l9XG4gIFwiXFx4RUZcIjogXCJpXFx1MDMwOFwiLFxuICAvLyDDryA9IFxcXCJ7aX1cbiAgXCJcXHUxRTJGXCI6IFwiaVxcdTAzMDhcXHUwMzAxXCIsXG4gIC8vIOG4ryA9IFxcXCJcXCd7aX1cbiAgXCJcXHUwMTI5XCI6IFwiaVxcdTAzMDNcIixcbiAgLy8gxKkgPSBcXH57aX1cbiAgXCJcXHUwMTJCXCI6IFwiaVxcdTAzMDRcIixcbiAgLy8gxKsgPSBcXD17aX1cbiAgXCJcXHUwMTJEXCI6IFwiaVxcdTAzMDZcIixcbiAgLy8gxK0gPSBcXHV7aX1cbiAgXCJcXHUwMUQwXCI6IFwiaVxcdTAzMENcIixcbiAgLy8gx5AgPSBcXHZ7aX1cbiAgXCJcXHhFRVwiOiBcImlcXHUwMzAyXCIsXG4gIC8vIMOuID0gXFxee2l9XG4gIFwiXFx1MDFGMFwiOiBcImpcXHUwMzBDXCIsXG4gIC8vIMewID0gXFx2e2p9XG4gIFwiXFx1MDEzNVwiOiBcImpcXHUwMzAyXCIsXG4gIC8vIMS1ID0gXFxee2p9XG4gIFwiXFx1MUUzMVwiOiBcImtcXHUwMzAxXCIsXG4gIC8vIOG4sSA9IFxcJ3trfVxuICBcIlxcdTAxRTlcIjogXCJrXFx1MDMwQ1wiLFxuICAvLyDHqSA9IFxcdntrfVxuICBcIlxcdTAxM0FcIjogXCJsXFx1MDMwMVwiLFxuICAvLyDEuiA9IFxcJ3tsfVxuICBcIlxcdTAxM0VcIjogXCJsXFx1MDMwQ1wiLFxuICAvLyDEviA9IFxcdntsfVxuICBcIlxcdTFFM0ZcIjogXCJtXFx1MDMwMVwiLFxuICAvLyDhuL8gPSBcXCd7bX1cbiAgXCJcXHUxRTQxXCI6IFwibVxcdTAzMDdcIixcbiAgLy8g4bmBID0gXFwue219XG4gIFwiXFx1MDE0NFwiOiBcIm5cXHUwMzAxXCIsXG4gIC8vIMWEID0gXFwne259XG4gIFwiXFx1MDFGOVwiOiBcIm5cXHUwMzAwXCIsXG4gIC8vIMe5ID0gXFxge259XG4gIFwiXFx4RjFcIjogXCJuXFx1MDMwM1wiLFxuICAvLyDDsSA9IFxcfntufVxuICBcIlxcdTAxNDhcIjogXCJuXFx1MDMwQ1wiLFxuICAvLyDFiCA9IFxcdntufVxuICBcIlxcdTFFNDVcIjogXCJuXFx1MDMwN1wiLFxuICAvLyDhuYUgPSBcXC57bn1cbiAgXCJcXHhGM1wiOiBcIm9cXHUwMzAxXCIsXG4gIC8vIMOzID0gXFwne299XG4gIFwiXFx4RjJcIjogXCJvXFx1MDMwMFwiLFxuICAvLyDDsiA9IFxcYHtvfVxuICBcIlxceEY2XCI6IFwib1xcdTAzMDhcIixcbiAgLy8gw7YgPSBcXFwie299XG4gIFwiXFx1MDIyQlwiOiBcIm9cXHUwMzA4XFx1MDMwNFwiLFxuICAvLyDIqyA9IFxcXCJcXD17b31cbiAgXCJcXHhGNVwiOiBcIm9cXHUwMzAzXCIsXG4gIC8vIMO1ID0gXFx+e299XG4gIFwiXFx1MUU0RFwiOiBcIm9cXHUwMzAzXFx1MDMwMVwiLFxuICAvLyDhuY0gPSBcXH5cXCd7b31cbiAgXCJcXHUxRTRGXCI6IFwib1xcdTAzMDNcXHUwMzA4XCIsXG4gIC8vIOG5jyA9IFxcflxcXCJ7b31cbiAgXCJcXHUwMjJEXCI6IFwib1xcdTAzMDNcXHUwMzA0XCIsXG4gIC8vIMitID0gXFx+XFw9e299XG4gIFwiXFx1MDE0RFwiOiBcIm9cXHUwMzA0XCIsXG4gIC8vIMWNID0gXFw9e299XG4gIFwiXFx1MUU1M1wiOiBcIm9cXHUwMzA0XFx1MDMwMVwiLFxuICAvLyDhuZMgPSBcXD1cXCd7b31cbiAgXCJcXHUxRTUxXCI6IFwib1xcdTAzMDRcXHUwMzAwXCIsXG4gIC8vIOG5kSA9IFxcPVxcYHtvfVxuICBcIlxcdTAxNEZcIjogXCJvXFx1MDMwNlwiLFxuICAvLyDFjyA9IFxcdXtvfVxuICBcIlxcdTAxRDJcIjogXCJvXFx1MDMwQ1wiLFxuICAvLyDHkiA9IFxcdntvfVxuICBcIlxceEY0XCI6IFwib1xcdTAzMDJcIixcbiAgLy8gw7QgPSBcXF57b31cbiAgXCJcXHUxRUQxXCI6IFwib1xcdTAzMDJcXHUwMzAxXCIsXG4gIC8vIOG7kSA9IFxcXlxcJ3tvfVxuICBcIlxcdTFFRDNcIjogXCJvXFx1MDMwMlxcdTAzMDBcIixcbiAgLy8g4buTID0gXFxeXFxge299XG4gIFwiXFx1MUVEN1wiOiBcIm9cXHUwMzAyXFx1MDMwM1wiLFxuICAvLyDhu5cgPSBcXF5cXH57b31cbiAgXCJcXHUwMjJGXCI6IFwib1xcdTAzMDdcIixcbiAgLy8gyK8gPSBcXC57b31cbiAgXCJcXHUwMjMxXCI6IFwib1xcdTAzMDdcXHUwMzA0XCIsXG4gIC8vIMixID0gXFwuXFw9e299XG4gIFwiXFx1MDE1MVwiOiBcIm9cXHUwMzBCXCIsXG4gIC8vIMWRID0gXFxIe299XG4gIFwiXFx1MUU1NVwiOiBcInBcXHUwMzAxXCIsXG4gIC8vIOG5lSA9IFxcJ3twfVxuICBcIlxcdTFFNTdcIjogXCJwXFx1MDMwN1wiLFxuICAvLyDhuZcgPSBcXC57cH1cbiAgXCJcXHUwMTU1XCI6IFwiclxcdTAzMDFcIixcbiAgLy8gxZUgPSBcXCd7cn1cbiAgXCJcXHUwMTU5XCI6IFwiclxcdTAzMENcIixcbiAgLy8gxZkgPSBcXHZ7cn1cbiAgXCJcXHUxRTU5XCI6IFwiclxcdTAzMDdcIixcbiAgLy8g4bmZID0gXFwue3J9XG4gIFwiXFx1MDE1QlwiOiBcInNcXHUwMzAxXCIsXG4gIC8vIMWbID0gXFwne3N9XG4gIFwiXFx1MUU2NVwiOiBcInNcXHUwMzAxXFx1MDMwN1wiLFxuICAvLyDhuaUgPSBcXCdcXC57c31cbiAgXCJcXHUwMTYxXCI6IFwic1xcdTAzMENcIixcbiAgLy8gxaEgPSBcXHZ7c31cbiAgXCJcXHUxRTY3XCI6IFwic1xcdTAzMENcXHUwMzA3XCIsXG4gIC8vIOG5pyA9IFxcdlxcLntzfVxuICBcIlxcdTAxNURcIjogXCJzXFx1MDMwMlwiLFxuICAvLyDFnSA9IFxcXntzfVxuICBcIlxcdTFFNjFcIjogXCJzXFx1MDMwN1wiLFxuICAvLyDhuaEgPSBcXC57c31cbiAgXCJcXHUxRTk3XCI6IFwidFxcdTAzMDhcIixcbiAgLy8g4bqXID0gXFxcInt0fVxuICBcIlxcdTAxNjVcIjogXCJ0XFx1MDMwQ1wiLFxuICAvLyDFpSA9IFxcdnt0fVxuICBcIlxcdTFFNkJcIjogXCJ0XFx1MDMwN1wiLFxuICAvLyDhuasgPSBcXC57dH1cbiAgXCJcXHhGQVwiOiBcInVcXHUwMzAxXCIsXG4gIC8vIMO6ID0gXFwne3V9XG4gIFwiXFx4RjlcIjogXCJ1XFx1MDMwMFwiLFxuICAvLyDDuSA9IFxcYHt1fVxuICBcIlxceEZDXCI6IFwidVxcdTAzMDhcIixcbiAgLy8gw7wgPSBcXFwie3V9XG4gIFwiXFx1MDFEOFwiOiBcInVcXHUwMzA4XFx1MDMwMVwiLFxuICAvLyDHmCA9IFxcXCJcXCd7dX1cbiAgXCJcXHUwMURDXCI6IFwidVxcdTAzMDhcXHUwMzAwXCIsXG4gIC8vIMecID0gXFxcIlxcYHt1fVxuICBcIlxcdTAxRDZcIjogXCJ1XFx1MDMwOFxcdTAzMDRcIixcbiAgLy8gx5YgPSBcXFwiXFw9e3V9XG4gIFwiXFx1MDFEQVwiOiBcInVcXHUwMzA4XFx1MDMwQ1wiLFxuICAvLyDHmiA9IFxcXCJcXHZ7dX1cbiAgXCJcXHUwMTY5XCI6IFwidVxcdTAzMDNcIixcbiAgLy8gxakgPSBcXH57dX1cbiAgXCJcXHUxRTc5XCI6IFwidVxcdTAzMDNcXHUwMzAxXCIsXG4gIC8vIOG5uSA9IFxcflxcJ3t1fVxuICBcIlxcdTAxNkJcIjogXCJ1XFx1MDMwNFwiLFxuICAvLyDFqyA9IFxcPXt1fVxuICBcIlxcdTFFN0JcIjogXCJ1XFx1MDMwNFxcdTAzMDhcIixcbiAgLy8g4bm7ID0gXFw9XFxcInt1fVxuICBcIlxcdTAxNkRcIjogXCJ1XFx1MDMwNlwiLFxuICAvLyDFrSA9IFxcdXt1fVxuICBcIlxcdTAxRDRcIjogXCJ1XFx1MDMwQ1wiLFxuICAvLyDHlCA9IFxcdnt1fVxuICBcIlxceEZCXCI6IFwidVxcdTAzMDJcIixcbiAgLy8gw7sgPSBcXF57dX1cbiAgXCJcXHUwMTZGXCI6IFwidVxcdTAzMEFcIixcbiAgLy8gxa8gPSBcXHJ7dX1cbiAgXCJcXHUwMTcxXCI6IFwidVxcdTAzMEJcIixcbiAgLy8gxbEgPSBcXEh7dX1cbiAgXCJcXHUxRTdEXCI6IFwidlxcdTAzMDNcIixcbiAgLy8g4bm9ID0gXFx+e3Z9XG4gIFwiXFx1MUU4M1wiOiBcIndcXHUwMzAxXCIsXG4gIC8vIOG6gyA9IFxcJ3t3fVxuICBcIlxcdTFFODFcIjogXCJ3XFx1MDMwMFwiLFxuICAvLyDhuoEgPSBcXGB7d31cbiAgXCJcXHUxRTg1XCI6IFwid1xcdTAzMDhcIixcbiAgLy8g4bqFID0gXFxcInt3fVxuICBcIlxcdTAxNzVcIjogXCJ3XFx1MDMwMlwiLFxuICAvLyDFtSA9IFxcXnt3fVxuICBcIlxcdTFFODdcIjogXCJ3XFx1MDMwN1wiLFxuICAvLyDhuocgPSBcXC57d31cbiAgXCJcXHUxRTk4XCI6IFwid1xcdTAzMEFcIixcbiAgLy8g4bqYID0gXFxye3d9XG4gIFwiXFx1MUU4RFwiOiBcInhcXHUwMzA4XCIsXG4gIC8vIOG6jSA9IFxcXCJ7eH1cbiAgXCJcXHUxRThCXCI6IFwieFxcdTAzMDdcIixcbiAgLy8g4bqLID0gXFwue3h9XG4gIFwiXFx4RkRcIjogXCJ5XFx1MDMwMVwiLFxuICAvLyDDvSA9IFxcJ3t5fVxuICBcIlxcdTFFRjNcIjogXCJ5XFx1MDMwMFwiLFxuICAvLyDhu7MgPSBcXGB7eX1cbiAgXCJcXHhGRlwiOiBcInlcXHUwMzA4XCIsXG4gIC8vIMO/ID0gXFxcInt5fVxuICBcIlxcdTFFRjlcIjogXCJ5XFx1MDMwM1wiLFxuICAvLyDhu7kgPSBcXH57eX1cbiAgXCJcXHUwMjMzXCI6IFwieVxcdTAzMDRcIixcbiAgLy8gyLMgPSBcXD17eX1cbiAgXCJcXHUwMTc3XCI6IFwieVxcdTAzMDJcIixcbiAgLy8gxbcgPSBcXF57eX1cbiAgXCJcXHUxRThGXCI6IFwieVxcdTAzMDdcIixcbiAgLy8g4bqPID0gXFwue3l9XG4gIFwiXFx1MUU5OVwiOiBcInlcXHUwMzBBXCIsXG4gIC8vIOG6mSA9IFxccnt5fVxuICBcIlxcdTAxN0FcIjogXCJ6XFx1MDMwMVwiLFxuICAvLyDFuiA9IFxcJ3t6fVxuICBcIlxcdTAxN0VcIjogXCJ6XFx1MDMwQ1wiLFxuICAvLyDFviA9IFxcdnt6fVxuICBcIlxcdTFFOTFcIjogXCJ6XFx1MDMwMlwiLFxuICAvLyDhupEgPSBcXF57en1cbiAgXCJcXHUwMTdDXCI6IFwielxcdTAzMDdcIixcbiAgLy8gxbwgPSBcXC57en1cbiAgXCJcXHhDMVwiOiBcIkFcXHUwMzAxXCIsXG4gIC8vIMOBID0gXFwne0F9XG4gIFwiXFx4QzBcIjogXCJBXFx1MDMwMFwiLFxuICAvLyDDgCA9IFxcYHtBfVxuICBcIlxceEM0XCI6IFwiQVxcdTAzMDhcIixcbiAgLy8gw4QgPSBcXFwie0F9XG4gIFwiXFx1MDFERVwiOiBcIkFcXHUwMzA4XFx1MDMwNFwiLFxuICAvLyDHniA9IFxcXCJcXD17QX1cbiAgXCJcXHhDM1wiOiBcIkFcXHUwMzAzXCIsXG4gIC8vIMODID0gXFx+e0F9XG4gIFwiXFx1MDEwMFwiOiBcIkFcXHUwMzA0XCIsXG4gIC8vIMSAID0gXFw9e0F9XG4gIFwiXFx1MDEwMlwiOiBcIkFcXHUwMzA2XCIsXG4gIC8vIMSCID0gXFx1e0F9XG4gIFwiXFx1MUVBRVwiOiBcIkFcXHUwMzA2XFx1MDMwMVwiLFxuICAvLyDhuq4gPSBcXHVcXCd7QX1cbiAgXCJcXHUxRUIwXCI6IFwiQVxcdTAzMDZcXHUwMzAwXCIsXG4gIC8vIOG6sCA9IFxcdVxcYHtBfVxuICBcIlxcdTFFQjRcIjogXCJBXFx1MDMwNlxcdTAzMDNcIixcbiAgLy8g4bq0ID0gXFx1XFx+e0F9XG4gIFwiXFx1MDFDRFwiOiBcIkFcXHUwMzBDXCIsXG4gIC8vIMeNID0gXFx2e0F9XG4gIFwiXFx4QzJcIjogXCJBXFx1MDMwMlwiLFxuICAvLyDDgiA9IFxcXntBfVxuICBcIlxcdTFFQTRcIjogXCJBXFx1MDMwMlxcdTAzMDFcIixcbiAgLy8g4bqkID0gXFxeXFwne0F9XG4gIFwiXFx1MUVBNlwiOiBcIkFcXHUwMzAyXFx1MDMwMFwiLFxuICAvLyDhuqYgPSBcXF5cXGB7QX1cbiAgXCJcXHUxRUFBXCI6IFwiQVxcdTAzMDJcXHUwMzAzXCIsXG4gIC8vIOG6qiA9IFxcXlxcfntBfVxuICBcIlxcdTAyMjZcIjogXCJBXFx1MDMwN1wiLFxuICAvLyDIpiA9IFxcLntBfVxuICBcIlxcdTAxRTBcIjogXCJBXFx1MDMwN1xcdTAzMDRcIixcbiAgLy8gx6AgPSBcXC5cXD17QX1cbiAgXCJcXHhDNVwiOiBcIkFcXHUwMzBBXCIsXG4gIC8vIMOFID0gXFxye0F9XG4gIFwiXFx1MDFGQVwiOiBcIkFcXHUwMzBBXFx1MDMwMVwiLFxuICAvLyDHuiA9IFxcclxcJ3tBfVxuICBcIlxcdTFFMDJcIjogXCJCXFx1MDMwN1wiLFxuICAvLyDhuIIgPSBcXC57Qn1cbiAgXCJcXHUwMTA2XCI6IFwiQ1xcdTAzMDFcIixcbiAgLy8gxIYgPSBcXCd7Q31cbiAgXCJcXHUwMTBDXCI6IFwiQ1xcdTAzMENcIixcbiAgLy8gxIwgPSBcXHZ7Q31cbiAgXCJcXHUwMTA4XCI6IFwiQ1xcdTAzMDJcIixcbiAgLy8gxIggPSBcXF57Q31cbiAgXCJcXHUwMTBBXCI6IFwiQ1xcdTAzMDdcIixcbiAgLy8gxIogPSBcXC57Q31cbiAgXCJcXHUwMTBFXCI6IFwiRFxcdTAzMENcIixcbiAgLy8gxI4gPSBcXHZ7RH1cbiAgXCJcXHUxRTBBXCI6IFwiRFxcdTAzMDdcIixcbiAgLy8g4biKID0gXFwue0R9XG4gIFwiXFx4QzlcIjogXCJFXFx1MDMwMVwiLFxuICAvLyDDiSA9IFxcJ3tFfVxuICBcIlxceEM4XCI6IFwiRVxcdTAzMDBcIixcbiAgLy8gw4ggPSBcXGB7RX1cbiAgXCJcXHhDQlwiOiBcIkVcXHUwMzA4XCIsXG4gIC8vIMOLID0gXFxcIntFfVxuICBcIlxcdTFFQkNcIjogXCJFXFx1MDMwM1wiLFxuICAvLyDhurwgPSBcXH57RX1cbiAgXCJcXHUwMTEyXCI6IFwiRVxcdTAzMDRcIixcbiAgLy8gxJIgPSBcXD17RX1cbiAgXCJcXHUxRTE2XCI6IFwiRVxcdTAzMDRcXHUwMzAxXCIsXG4gIC8vIOG4liA9IFxcPVxcJ3tFfVxuICBcIlxcdTFFMTRcIjogXCJFXFx1MDMwNFxcdTAzMDBcIixcbiAgLy8g4biUID0gXFw9XFxge0V9XG4gIFwiXFx1MDExNFwiOiBcIkVcXHUwMzA2XCIsXG4gIC8vIMSUID0gXFx1e0V9XG4gIFwiXFx1MDExQVwiOiBcIkVcXHUwMzBDXCIsXG4gIC8vIMSaID0gXFx2e0V9XG4gIFwiXFx4Q0FcIjogXCJFXFx1MDMwMlwiLFxuICAvLyDDiiA9IFxcXntFfVxuICBcIlxcdTFFQkVcIjogXCJFXFx1MDMwMlxcdTAzMDFcIixcbiAgLy8g4bq+ID0gXFxeXFwne0V9XG4gIFwiXFx1MUVDMFwiOiBcIkVcXHUwMzAyXFx1MDMwMFwiLFxuICAvLyDhu4AgPSBcXF5cXGB7RX1cbiAgXCJcXHUxRUM0XCI6IFwiRVxcdTAzMDJcXHUwMzAzXCIsXG4gIC8vIOG7hCA9IFxcXlxcfntFfVxuICBcIlxcdTAxMTZcIjogXCJFXFx1MDMwN1wiLFxuICAvLyDEliA9IFxcLntFfVxuICBcIlxcdTFFMUVcIjogXCJGXFx1MDMwN1wiLFxuICAvLyDhuJ4gPSBcXC57Rn1cbiAgXCJcXHUwMUY0XCI6IFwiR1xcdTAzMDFcIixcbiAgLy8gx7QgPSBcXCd7R31cbiAgXCJcXHUxRTIwXCI6IFwiR1xcdTAzMDRcIixcbiAgLy8g4bigID0gXFw9e0d9XG4gIFwiXFx1MDExRVwiOiBcIkdcXHUwMzA2XCIsXG4gIC8vIMSeID0gXFx1e0d9XG4gIFwiXFx1MDFFNlwiOiBcIkdcXHUwMzBDXCIsXG4gIC8vIMemID0gXFx2e0d9XG4gIFwiXFx1MDExQ1wiOiBcIkdcXHUwMzAyXCIsXG4gIC8vIMScID0gXFxee0d9XG4gIFwiXFx1MDEyMFwiOiBcIkdcXHUwMzA3XCIsXG4gIC8vIMSgID0gXFwue0d9XG4gIFwiXFx1MUUyNlwiOiBcIkhcXHUwMzA4XCIsXG4gIC8vIOG4piA9IFxcXCJ7SH1cbiAgXCJcXHUwMjFFXCI6IFwiSFxcdTAzMENcIixcbiAgLy8gyJ4gPSBcXHZ7SH1cbiAgXCJcXHUwMTI0XCI6IFwiSFxcdTAzMDJcIixcbiAgLy8gxKQgPSBcXF57SH1cbiAgXCJcXHUxRTIyXCI6IFwiSFxcdTAzMDdcIixcbiAgLy8g4biiID0gXFwue0h9XG4gIFwiXFx4Q0RcIjogXCJJXFx1MDMwMVwiLFxuICAvLyDDjSA9IFxcJ3tJfVxuICBcIlxceENDXCI6IFwiSVxcdTAzMDBcIixcbiAgLy8gw4wgPSBcXGB7SX1cbiAgXCJcXHhDRlwiOiBcIklcXHUwMzA4XCIsXG4gIC8vIMOPID0gXFxcIntJfVxuICBcIlxcdTFFMkVcIjogXCJJXFx1MDMwOFxcdTAzMDFcIixcbiAgLy8g4biuID0gXFxcIlxcJ3tJfVxuICBcIlxcdTAxMjhcIjogXCJJXFx1MDMwM1wiLFxuICAvLyDEqCA9IFxcfntJfVxuICBcIlxcdTAxMkFcIjogXCJJXFx1MDMwNFwiLFxuICAvLyDEqiA9IFxcPXtJfVxuICBcIlxcdTAxMkNcIjogXCJJXFx1MDMwNlwiLFxuICAvLyDErCA9IFxcdXtJfVxuICBcIlxcdTAxQ0ZcIjogXCJJXFx1MDMwQ1wiLFxuICAvLyDHjyA9IFxcdntJfVxuICBcIlxceENFXCI6IFwiSVxcdTAzMDJcIixcbiAgLy8gw44gPSBcXF57SX1cbiAgXCJcXHUwMTMwXCI6IFwiSVxcdTAzMDdcIixcbiAgLy8gxLAgPSBcXC57SX1cbiAgXCJcXHUwMTM0XCI6IFwiSlxcdTAzMDJcIixcbiAgLy8gxLQgPSBcXF57Sn1cbiAgXCJcXHUxRTMwXCI6IFwiS1xcdTAzMDFcIixcbiAgLy8g4biwID0gXFwne0t9XG4gIFwiXFx1MDFFOFwiOiBcIktcXHUwMzBDXCIsXG4gIC8vIMeoID0gXFx2e0t9XG4gIFwiXFx1MDEzOVwiOiBcIkxcXHUwMzAxXCIsXG4gIC8vIMS5ID0gXFwne0x9XG4gIFwiXFx1MDEzRFwiOiBcIkxcXHUwMzBDXCIsXG4gIC8vIMS9ID0gXFx2e0x9XG4gIFwiXFx1MUUzRVwiOiBcIk1cXHUwMzAxXCIsXG4gIC8vIOG4viA9IFxcJ3tNfVxuICBcIlxcdTFFNDBcIjogXCJNXFx1MDMwN1wiLFxuICAvLyDhuYAgPSBcXC57TX1cbiAgXCJcXHUwMTQzXCI6IFwiTlxcdTAzMDFcIixcbiAgLy8gxYMgPSBcXCd7Tn1cbiAgXCJcXHUwMUY4XCI6IFwiTlxcdTAzMDBcIixcbiAgLy8gx7ggPSBcXGB7Tn1cbiAgXCJcXHhEMVwiOiBcIk5cXHUwMzAzXCIsXG4gIC8vIMORID0gXFx+e059XG4gIFwiXFx1MDE0N1wiOiBcIk5cXHUwMzBDXCIsXG4gIC8vIMWHID0gXFx2e059XG4gIFwiXFx1MUU0NFwiOiBcIk5cXHUwMzA3XCIsXG4gIC8vIOG5hCA9IFxcLntOfVxuICBcIlxceEQzXCI6IFwiT1xcdTAzMDFcIixcbiAgLy8gw5MgPSBcXCd7T31cbiAgXCJcXHhEMlwiOiBcIk9cXHUwMzAwXCIsXG4gIC8vIMOSID0gXFxge099XG4gIFwiXFx4RDZcIjogXCJPXFx1MDMwOFwiLFxuICAvLyDDliA9IFxcXCJ7T31cbiAgXCJcXHUwMjJBXCI6IFwiT1xcdTAzMDhcXHUwMzA0XCIsXG4gIC8vIMiqID0gXFxcIlxcPXtPfVxuICBcIlxceEQ1XCI6IFwiT1xcdTAzMDNcIixcbiAgLy8gw5UgPSBcXH57T31cbiAgXCJcXHUxRTRDXCI6IFwiT1xcdTAzMDNcXHUwMzAxXCIsXG4gIC8vIOG5jCA9IFxcflxcJ3tPfVxuICBcIlxcdTFFNEVcIjogXCJPXFx1MDMwM1xcdTAzMDhcIixcbiAgLy8g4bmOID0gXFx+XFxcIntPfVxuICBcIlxcdTAyMkNcIjogXCJPXFx1MDMwM1xcdTAzMDRcIixcbiAgLy8gyKwgPSBcXH5cXD17T31cbiAgXCJcXHUwMTRDXCI6IFwiT1xcdTAzMDRcIixcbiAgLy8gxYwgPSBcXD17T31cbiAgXCJcXHUxRTUyXCI6IFwiT1xcdTAzMDRcXHUwMzAxXCIsXG4gIC8vIOG5kiA9IFxcPVxcJ3tPfVxuICBcIlxcdTFFNTBcIjogXCJPXFx1MDMwNFxcdTAzMDBcIixcbiAgLy8g4bmQID0gXFw9XFxge099XG4gIFwiXFx1MDE0RVwiOiBcIk9cXHUwMzA2XCIsXG4gIC8vIMWOID0gXFx1e099XG4gIFwiXFx1MDFEMVwiOiBcIk9cXHUwMzBDXCIsXG4gIC8vIMeRID0gXFx2e099XG4gIFwiXFx4RDRcIjogXCJPXFx1MDMwMlwiLFxuICAvLyDDlCA9IFxcXntPfVxuICBcIlxcdTFFRDBcIjogXCJPXFx1MDMwMlxcdTAzMDFcIixcbiAgLy8g4buQID0gXFxeXFwne099XG4gIFwiXFx1MUVEMlwiOiBcIk9cXHUwMzAyXFx1MDMwMFwiLFxuICAvLyDhu5IgPSBcXF5cXGB7T31cbiAgXCJcXHUxRUQ2XCI6IFwiT1xcdTAzMDJcXHUwMzAzXCIsXG4gIC8vIOG7liA9IFxcXlxcfntPfVxuICBcIlxcdTAyMkVcIjogXCJPXFx1MDMwN1wiLFxuICAvLyDIriA9IFxcLntPfVxuICBcIlxcdTAyMzBcIjogXCJPXFx1MDMwN1xcdTAzMDRcIixcbiAgLy8gyLAgPSBcXC5cXD17T31cbiAgXCJcXHUwMTUwXCI6IFwiT1xcdTAzMEJcIixcbiAgLy8gxZAgPSBcXEh7T31cbiAgXCJcXHUxRTU0XCI6IFwiUFxcdTAzMDFcIixcbiAgLy8g4bmUID0gXFwne1B9XG4gIFwiXFx1MUU1NlwiOiBcIlBcXHUwMzA3XCIsXG4gIC8vIOG5liA9IFxcLntQfVxuICBcIlxcdTAxNTRcIjogXCJSXFx1MDMwMVwiLFxuICAvLyDFlCA9IFxcJ3tSfVxuICBcIlxcdTAxNThcIjogXCJSXFx1MDMwQ1wiLFxuICAvLyDFmCA9IFxcdntSfVxuICBcIlxcdTFFNThcIjogXCJSXFx1MDMwN1wiLFxuICAvLyDhuZggPSBcXC57Un1cbiAgXCJcXHUwMTVBXCI6IFwiU1xcdTAzMDFcIixcbiAgLy8gxZogPSBcXCd7U31cbiAgXCJcXHUxRTY0XCI6IFwiU1xcdTAzMDFcXHUwMzA3XCIsXG4gIC8vIOG5pCA9IFxcJ1xcLntTfVxuICBcIlxcdTAxNjBcIjogXCJTXFx1MDMwQ1wiLFxuICAvLyDFoCA9IFxcdntTfVxuICBcIlxcdTFFNjZcIjogXCJTXFx1MDMwQ1xcdTAzMDdcIixcbiAgLy8g4bmmID0gXFx2XFwue1N9XG4gIFwiXFx1MDE1Q1wiOiBcIlNcXHUwMzAyXCIsXG4gIC8vIMWcID0gXFxee1N9XG4gIFwiXFx1MUU2MFwiOiBcIlNcXHUwMzA3XCIsXG4gIC8vIOG5oCA9IFxcLntTfVxuICBcIlxcdTAxNjRcIjogXCJUXFx1MDMwQ1wiLFxuICAvLyDFpCA9IFxcdntUfVxuICBcIlxcdTFFNkFcIjogXCJUXFx1MDMwN1wiLFxuICAvLyDhuaogPSBcXC57VH1cbiAgXCJcXHhEQVwiOiBcIlVcXHUwMzAxXCIsXG4gIC8vIMOaID0gXFwne1V9XG4gIFwiXFx4RDlcIjogXCJVXFx1MDMwMFwiLFxuICAvLyDDmSA9IFxcYHtVfVxuICBcIlxceERDXCI6IFwiVVxcdTAzMDhcIixcbiAgLy8gw5wgPSBcXFwie1V9XG4gIFwiXFx1MDFEN1wiOiBcIlVcXHUwMzA4XFx1MDMwMVwiLFxuICAvLyDHlyA9IFxcXCJcXCd7VX1cbiAgXCJcXHUwMURCXCI6IFwiVVxcdTAzMDhcXHUwMzAwXCIsXG4gIC8vIMebID0gXFxcIlxcYHtVfVxuICBcIlxcdTAxRDVcIjogXCJVXFx1MDMwOFxcdTAzMDRcIixcbiAgLy8gx5UgPSBcXFwiXFw9e1V9XG4gIFwiXFx1MDFEOVwiOiBcIlVcXHUwMzA4XFx1MDMwQ1wiLFxuICAvLyDHmSA9IFxcXCJcXHZ7VX1cbiAgXCJcXHUwMTY4XCI6IFwiVVxcdTAzMDNcIixcbiAgLy8gxaggPSBcXH57VX1cbiAgXCJcXHUxRTc4XCI6IFwiVVxcdTAzMDNcXHUwMzAxXCIsXG4gIC8vIOG5uCA9IFxcflxcJ3tVfVxuICBcIlxcdTAxNkFcIjogXCJVXFx1MDMwNFwiLFxuICAvLyDFqiA9IFxcPXtVfVxuICBcIlxcdTFFN0FcIjogXCJVXFx1MDMwNFxcdTAzMDhcIixcbiAgLy8g4bm6ID0gXFw9XFxcIntVfVxuICBcIlxcdTAxNkNcIjogXCJVXFx1MDMwNlwiLFxuICAvLyDFrCA9IFxcdXtVfVxuICBcIlxcdTAxRDNcIjogXCJVXFx1MDMwQ1wiLFxuICAvLyDHkyA9IFxcdntVfVxuICBcIlxceERCXCI6IFwiVVxcdTAzMDJcIixcbiAgLy8gw5sgPSBcXF57VX1cbiAgXCJcXHUwMTZFXCI6IFwiVVxcdTAzMEFcIixcbiAgLy8gxa4gPSBcXHJ7VX1cbiAgXCJcXHUwMTcwXCI6IFwiVVxcdTAzMEJcIixcbiAgLy8gxbAgPSBcXEh7VX1cbiAgXCJcXHUxRTdDXCI6IFwiVlxcdTAzMDNcIixcbiAgLy8g4bm8ID0gXFx+e1Z9XG4gIFwiXFx1MUU4MlwiOiBcIldcXHUwMzAxXCIsXG4gIC8vIOG6giA9IFxcJ3tXfVxuICBcIlxcdTFFODBcIjogXCJXXFx1MDMwMFwiLFxuICAvLyDhuoAgPSBcXGB7V31cbiAgXCJcXHUxRTg0XCI6IFwiV1xcdTAzMDhcIixcbiAgLy8g4bqEID0gXFxcIntXfVxuICBcIlxcdTAxNzRcIjogXCJXXFx1MDMwMlwiLFxuICAvLyDFtCA9IFxcXntXfVxuICBcIlxcdTFFODZcIjogXCJXXFx1MDMwN1wiLFxuICAvLyDhuoYgPSBcXC57V31cbiAgXCJcXHUxRThDXCI6IFwiWFxcdTAzMDhcIixcbiAgLy8g4bqMID0gXFxcIntYfVxuICBcIlxcdTFFOEFcIjogXCJYXFx1MDMwN1wiLFxuICAvLyDhuoogPSBcXC57WH1cbiAgXCJcXHhERFwiOiBcIllcXHUwMzAxXCIsXG4gIC8vIMOdID0gXFwne1l9XG4gIFwiXFx1MUVGMlwiOiBcIllcXHUwMzAwXCIsXG4gIC8vIOG7siA9IFxcYHtZfVxuICBcIlxcdTAxNzhcIjogXCJZXFx1MDMwOFwiLFxuICAvLyDFuCA9IFxcXCJ7WX1cbiAgXCJcXHUxRUY4XCI6IFwiWVxcdTAzMDNcIixcbiAgLy8g4bu4ID0gXFx+e1l9XG4gIFwiXFx1MDIzMlwiOiBcIllcXHUwMzA0XCIsXG4gIC8vIMiyID0gXFw9e1l9XG4gIFwiXFx1MDE3NlwiOiBcIllcXHUwMzAyXCIsXG4gIC8vIMW2ID0gXFxee1l9XG4gIFwiXFx1MUU4RVwiOiBcIllcXHUwMzA3XCIsXG4gIC8vIOG6jiA9IFxcLntZfVxuICBcIlxcdTAxNzlcIjogXCJaXFx1MDMwMVwiLFxuICAvLyDFuSA9IFxcJ3tafVxuICBcIlxcdTAxN0RcIjogXCJaXFx1MDMwQ1wiLFxuICAvLyDFvSA9IFxcdntafVxuICBcIlxcdTFFOTBcIjogXCJaXFx1MDMwMlwiLFxuICAvLyDhupAgPSBcXF57Wn1cbiAgXCJcXHUwMTdCXCI6IFwiWlxcdTAzMDdcIixcbiAgLy8gxbsgPSBcXC57Wn1cbiAgXCJcXHUwM0FDXCI6IFwiXFx1MDNCMVxcdTAzMDFcIixcbiAgLy8gzqwgPSBcXCd7zrF9XG4gIFwiXFx1MUY3MFwiOiBcIlxcdTAzQjFcXHUwMzAwXCIsXG4gIC8vIOG9sCA9IFxcYHvOsX1cbiAgXCJcXHUxRkIxXCI6IFwiXFx1MDNCMVxcdTAzMDRcIixcbiAgLy8g4b6xID0gXFw9e86xfVxuICBcIlxcdTFGQjBcIjogXCJcXHUwM0IxXFx1MDMwNlwiLFxuICAvLyDhvrAgPSBcXHV7zrF9XG4gIFwiXFx1MDNBRFwiOiBcIlxcdTAzQjVcXHUwMzAxXCIsXG4gIC8vIM6tID0gXFwne861fVxuICBcIlxcdTFGNzJcIjogXCJcXHUwM0I1XFx1MDMwMFwiLFxuICAvLyDhvbIgPSBcXGB7zrV9XG4gIFwiXFx1MDNBRVwiOiBcIlxcdTAzQjdcXHUwMzAxXCIsXG4gIC8vIM6uID0gXFwne863fVxuICBcIlxcdTFGNzRcIjogXCJcXHUwM0I3XFx1MDMwMFwiLFxuICAvLyDhvbQgPSBcXGB7zrd9XG4gIFwiXFx1MDNBRlwiOiBcIlxcdTAzQjlcXHUwMzAxXCIsXG4gIC8vIM6vID0gXFwne865fVxuICBcIlxcdTFGNzZcIjogXCJcXHUwM0I5XFx1MDMwMFwiLFxuICAvLyDhvbYgPSBcXGB7zrl9XG4gIFwiXFx1MDNDQVwiOiBcIlxcdTAzQjlcXHUwMzA4XCIsXG4gIC8vIM+KID0gXFxcInvOuX1cbiAgXCJcXHUwMzkwXCI6IFwiXFx1MDNCOVxcdTAzMDhcXHUwMzAxXCIsXG4gIC8vIM6QID0gXFxcIlxcJ3vOuX1cbiAgXCJcXHUxRkQyXCI6IFwiXFx1MDNCOVxcdTAzMDhcXHUwMzAwXCIsXG4gIC8vIOG/kiA9IFxcXCJcXGB7zrl9XG4gIFwiXFx1MUZEMVwiOiBcIlxcdTAzQjlcXHUwMzA0XCIsXG4gIC8vIOG/kSA9IFxcPXvOuX1cbiAgXCJcXHUxRkQwXCI6IFwiXFx1MDNCOVxcdTAzMDZcIixcbiAgLy8g4b+QID0gXFx1e865fVxuICBcIlxcdTAzQ0NcIjogXCJcXHUwM0JGXFx1MDMwMVwiLFxuICAvLyDPjCA9IFxcJ3vOv31cbiAgXCJcXHUxRjc4XCI6IFwiXFx1MDNCRlxcdTAzMDBcIixcbiAgLy8g4b24ID0gXFxge86/fVxuICBcIlxcdTAzQ0RcIjogXCJcXHUwM0M1XFx1MDMwMVwiLFxuICAvLyDPjSA9IFxcJ3vPhX1cbiAgXCJcXHUxRjdBXCI6IFwiXFx1MDNDNVxcdTAzMDBcIixcbiAgLy8g4b26ID0gXFxge8+FfVxuICBcIlxcdTAzQ0JcIjogXCJcXHUwM0M1XFx1MDMwOFwiLFxuICAvLyDPiyA9IFxcXCJ7z4V9XG4gIFwiXFx1MDNCMFwiOiBcIlxcdTAzQzVcXHUwMzA4XFx1MDMwMVwiLFxuICAvLyDOsCA9IFxcXCJcXCd7z4V9XG4gIFwiXFx1MUZFMlwiOiBcIlxcdTAzQzVcXHUwMzA4XFx1MDMwMFwiLFxuICAvLyDhv6IgPSBcXFwiXFxge8+FfVxuICBcIlxcdTFGRTFcIjogXCJcXHUwM0M1XFx1MDMwNFwiLFxuICAvLyDhv6EgPSBcXD17z4V9XG4gIFwiXFx1MUZFMFwiOiBcIlxcdTAzQzVcXHUwMzA2XCIsXG4gIC8vIOG/oCA9IFxcdXvPhX1cbiAgXCJcXHUwM0NFXCI6IFwiXFx1MDNDOVxcdTAzMDFcIixcbiAgLy8gz44gPSBcXCd7z4l9XG4gIFwiXFx1MUY3Q1wiOiBcIlxcdTAzQzlcXHUwMzAwXCIsXG4gIC8vIOG9vCA9IFxcYHvPiX1cbiAgXCJcXHUwMzhFXCI6IFwiXFx1MDNBNVxcdTAzMDFcIixcbiAgLy8gzo4gPSBcXCd7zqV9XG4gIFwiXFx1MUZFQVwiOiBcIlxcdTAzQTVcXHUwMzAwXCIsXG4gIC8vIOG/qiA9IFxcYHvOpX1cbiAgXCJcXHUwM0FCXCI6IFwiXFx1MDNBNVxcdTAzMDhcIixcbiAgLy8gzqsgPSBcXFwie86lfVxuICBcIlxcdTFGRTlcIjogXCJcXHUwM0E1XFx1MDMwNFwiLFxuICAvLyDhv6kgPSBcXD17zqV9XG4gIFwiXFx1MUZFOFwiOiBcIlxcdTAzQTVcXHUwMzA2XCIsXG4gIC8vIOG/qCA9IFxcdXvOpX1cbiAgXCJcXHUwMzhGXCI6IFwiXFx1MDNBOVxcdTAzMDFcIixcbiAgLy8gzo8gPSBcXCd7zql9XG4gIFwiXFx1MUZGQVwiOiBcIlxcdTAzQTlcXHUwMzAwXCIgLy8g4b+6ID0gXFxge86pfVxuXG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL1BhcnNlci5qc1xuLyogZXNsaW50IG5vLWNvbnN0YW50LWNvbmRpdGlvbjowICovXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4vKipcbiAqIFRoaXMgZmlsZSBjb250YWlucyB0aGUgcGFyc2VyIHVzZWQgdG8gcGFyc2Ugb3V0IGEgVGVYIGV4cHJlc3Npb24gZnJvbSB0aGVcbiAqIGlucHV0LiBTaW5jZSBUZVggaXNuJ3QgY29udGV4dC1mcmVlLCBzdGFuZGFyZCBwYXJzZXJzIGRvbid0IHdvcmsgcGFydGljdWxhcmx5XG4gKiB3ZWxsLlxuICpcbiAqIFRoZSBzdHJhdGVneSBvZiB0aGlzIHBhcnNlciBpcyBhcyBzdWNoOlxuICpcbiAqIFRoZSBtYWluIGZ1bmN0aW9ucyAodGhlIGAucGFyc2UuLi5gIG9uZXMpIHRha2UgYSBwb3NpdGlvbiBpbiB0aGUgY3VycmVudFxuICogcGFyc2Ugc3RyaW5nIHRvIHBhcnNlIHRva2VucyBmcm9tLiBUaGUgbGV4ZXIgKGZvdW5kIGluIExleGVyLmpzLCBzdG9yZWQgYXRcbiAqIHRoaXMuZ3VsbGV0LmxleGVyKSBhbHNvIHN1cHBvcnRzIHB1bGxpbmcgb3V0IHRva2VucyBhdCBhcmJpdHJhcnkgcGxhY2VzLiBXaGVuXG4gKiBpbmRpdmlkdWFsIHRva2VucyBhcmUgbmVlZGVkIGF0IGEgcG9zaXRpb24sIHRoZSBsZXhlciBpcyBjYWxsZWQgdG8gcHVsbCBvdXQgYVxuICogdG9rZW4sIHdoaWNoIGlzIHRoZW4gdXNlZC5cbiAqXG4gKiBUaGUgcGFyc2VyIGhhcyBhIHByb3BlcnR5IGNhbGxlZCBcIm1vZGVcIiBpbmRpY2F0aW5nIHRoZSBtb2RlIHRoYXRcbiAqIHRoZSBwYXJzZXIgaXMgY3VycmVudGx5IGluLiBDdXJyZW50bHkgaXQgaGFzIHRvIGJlIG9uZSBvZiBcIm1hdGhcIiBvclxuICogXCJ0ZXh0XCIsIHdoaWNoIGRlbm90ZXMgd2hldGhlciB0aGUgY3VycmVudCBlbnZpcm9ubWVudCBpcyBhIG1hdGgteVxuICogb25lIG9yIGEgdGV4dC15IG9uZSAoZS5nLiBpbnNpZGUgXFx0ZXh0KS4gQ3VycmVudGx5LCB0aGlzIHNlcnZlcyB0b1xuICogbGltaXQgdGhlIGZ1bmN0aW9ucyB3aGljaCBjYW4gYmUgdXNlZCBpbiB0ZXh0IG1vZGUuXG4gKlxuICogVGhlIG1haW4gZnVuY3Rpb25zIHRoZW4gcmV0dXJuIGFuIG9iamVjdCB3aGljaCBjb250YWlucyB0aGUgdXNlZnVsIGRhdGEgdGhhdFxuICogd2FzIHBhcnNlZCBhdCBpdHMgZ2l2ZW4gcG9pbnQsIGFuZCBhIG5ldyBwb3NpdGlvbiBhdCB0aGUgZW5kIG9mIHRoZSBwYXJzZWRcbiAqIGRhdGEuIFRoZSBtYWluIGZ1bmN0aW9ucyBjYW4gY2FsbCBlYWNoIG90aGVyIGFuZCBjb250aW51ZSB0aGUgcGFyc2luZyBieVxuICogdXNpbmcgdGhlIHJldHVybmVkIHBvc2l0aW9uIGFzIGEgbmV3IHN0YXJ0aW5nIHBvaW50LlxuICpcbiAqIFRoZXJlIGFyZSBhbHNvIGV4dHJhIGAuaGFuZGxlLi4uYCBmdW5jdGlvbnMsIHdoaWNoIHB1bGwgb3V0IHNvbWUgcmV1c2VkXG4gKiBmdW5jdGlvbmFsaXR5IGludG8gc2VsZi1jb250YWluZWQgZnVuY3Rpb25zLlxuICpcbiAqIFRoZSBmdW5jdGlvbnMgcmV0dXJuIFBhcnNlTm9kZXMuXG4gKi9cbnZhciBQYXJzZXJfUGFyc2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGFyc2VyKGlucHV0LCBzZXR0aW5ncykge1xuICAgIHRoaXMubW9kZSA9IHZvaWQgMDtcbiAgICB0aGlzLmd1bGxldCA9IHZvaWQgMDtcbiAgICB0aGlzLnNldHRpbmdzID0gdm9pZCAwO1xuICAgIHRoaXMubGVmdHJpZ2h0RGVwdGggPSB2b2lkIDA7XG4gICAgdGhpcy5uZXh0VG9rZW4gPSB2b2lkIDA7XG4gICAgLy8gU3RhcnQgaW4gbWF0aCBtb2RlXG4gICAgdGhpcy5tb2RlID0gXCJtYXRoXCI7IC8vIENyZWF0ZSBhIG5ldyBtYWNybyBleHBhbmRlciAoZ3VsbGV0KSBhbmQgKGluZGlyZWN0bHkgdmlhIHRoYXQpIGFsc28gYVxuICAgIC8vIG5ldyBsZXhlciAobW91dGgpIGZvciB0aGlzIHBhcnNlciAoc3RvbWFjaCwgaW4gdGhlIGxhbmd1YWdlIG9mIFRlWClcblxuICAgIHRoaXMuZ3VsbGV0ID0gbmV3IE1hY3JvRXhwYW5kZXJfTWFjcm9FeHBhbmRlcihpbnB1dCwgc2V0dGluZ3MsIHRoaXMubW9kZSk7IC8vIFN0b3JlIHRoZSBzZXR0aW5ncyBmb3IgdXNlIGluIHBhcnNpbmdcblxuICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5nczsgLy8gQ291bnQgbGVmdHJpZ2h0IGRlcHRoIChmb3IgXFxtaWRkbGUgZXJyb3JzKVxuXG4gICAgdGhpcy5sZWZ0cmlnaHREZXB0aCA9IDA7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrcyBhIHJlc3VsdCB0byBtYWtlIHN1cmUgaXQgaGFzIHRoZSByaWdodCB0eXBlLCBhbmQgdGhyb3dzIGFuXG4gICAqIGFwcHJvcHJpYXRlIGVycm9yIG90aGVyd2lzZS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gUGFyc2VyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZXhwZWN0ID0gZnVuY3Rpb24gZXhwZWN0KHRleHQsIGNvbnN1bWUpIHtcbiAgICBpZiAoY29uc3VtZSA9PT0gdm9pZCAwKSB7XG4gICAgICBjb25zdW1lID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5uZXh0VG9rZW4udGV4dCAhPT0gdGV4dCkge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiRXhwZWN0ZWQgJ1wiICsgdGV4dCArIFwiJywgZ290ICdcIiArIHRoaXMubmV4dFRva2VuLnRleHQgKyBcIidcIiwgdGhpcy5uZXh0VG9rZW4pO1xuICAgIH1cblxuICAgIGlmIChjb25zdW1lKSB7XG4gICAgICB0aGlzLmNvbnN1bWUoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENvbnNpZGVycyB0aGUgY3VycmVudCBsb29rIGFoZWFkIHRva2VuIGFzIGNvbnN1bWVkLFxuICAgKiBhbmQgZmV0Y2hlcyB0aGUgb25lIGFmdGVyIHRoYXQgYXMgdGhlIG5ldyBsb29rIGFoZWFkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jb25zdW1lID0gZnVuY3Rpb24gY29uc3VtZSgpIHtcbiAgICB0aGlzLm5leHRUb2tlbiA9IHRoaXMuZ3VsbGV0LmV4cGFuZE5leHRUb2tlbigpO1xuICB9XG4gIC8qKlxuICAgKiBTd2l0Y2hlcyBiZXR3ZWVuIFwidGV4dFwiIGFuZCBcIm1hdGhcIiBtb2Rlcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uc3dpdGNoTW9kZSA9IGZ1bmN0aW9uIHN3aXRjaE1vZGUobmV3TW9kZSkge1xuICAgIHRoaXMubW9kZSA9IG5ld01vZGU7XG4gICAgdGhpcy5ndWxsZXQuc3dpdGNoTW9kZShuZXdNb2RlKTtcbiAgfVxuICAvKipcbiAgICogTWFpbiBwYXJzaW5nIGZ1bmN0aW9uLCB3aGljaCBwYXJzZXMgYW4gZW50aXJlIGlucHV0LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZSA9IGZ1bmN0aW9uIHBhcnNlKCkge1xuICAgIC8vIENyZWF0ZSBhIGdyb3VwIG5hbWVzcGFjZSBmb3IgdGhlIG1hdGggZXhwcmVzc2lvbi5cbiAgICAvLyAoTGFUZVggY3JlYXRlcyBhIG5ldyBncm91cCBmb3IgZXZlcnkgJC4uLiQsICQkLi4uJCQsIFxcWy4uLlxcXS4pXG4gICAgdGhpcy5ndWxsZXQuYmVnaW5Hcm91cCgpOyAvLyBVc2Ugb2xkIFxcY29sb3IgYmVoYXZpb3IgKHNhbWUgYXMgTGFUZVgncyBcXHRleHRjb2xvcikgaWYgcmVxdWVzdGVkLlxuICAgIC8vIFdlIGRvIHRoaXMgd2l0aGluIHRoZSBncm91cCBmb3IgdGhlIG1hdGggZXhwcmVzc2lvbiwgc28gaXQgZG9lc24ndFxuICAgIC8vIHBvbGx1dGUgc2V0dGluZ3MubWFjcm9zLlxuXG4gICAgaWYgKHRoaXMuc2V0dGluZ3MuY29sb3JJc1RleHRDb2xvcikge1xuICAgICAgdGhpcy5ndWxsZXQubWFjcm9zLnNldChcIlxcXFxjb2xvclwiLCBcIlxcXFx0ZXh0Y29sb3JcIik7XG4gICAgfSAvLyBUcnkgdG8gcGFyc2UgdGhlIGlucHV0XG5cblxuICAgIHRoaXMuY29uc3VtZSgpO1xuICAgIHZhciBwYXJzZSA9IHRoaXMucGFyc2VFeHByZXNzaW9uKGZhbHNlKTsgLy8gSWYgd2Ugc3VjY2VlZGVkLCBtYWtlIHN1cmUgdGhlcmUncyBhbiBFT0YgYXQgdGhlIGVuZFxuXG4gICAgdGhpcy5leHBlY3QoXCJFT0ZcIiwgZmFsc2UpOyAvLyBFbmQgdGhlIGdyb3VwIG5hbWVzcGFjZSBmb3IgdGhlIGV4cHJlc3Npb25cblxuICAgIHRoaXMuZ3VsbGV0LmVuZEdyb3VwKCk7XG4gICAgcmV0dXJuIHBhcnNlO1xuICB9O1xuXG4gIF9wcm90by5wYXJzZUV4cHJlc3Npb24gPSBmdW5jdGlvbiBwYXJzZUV4cHJlc3Npb24oYnJlYWtPbkluZml4LCBicmVha09uVG9rZW5UZXh0KSB7XG4gICAgdmFyIGJvZHkgPSBbXTsgLy8gS2VlcCBhZGRpbmcgYXRvbXMgdG8gdGhlIGJvZHkgdW50aWwgd2UgY2FuJ3QgcGFyc2UgYW55IG1vcmUgYXRvbXMgKGVpdGhlclxuICAgIC8vIHdlIHJlYWNoZWQgdGhlIGVuZCwgYSB9LCBvciBhIFxccmlnaHQpXG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgLy8gSWdub3JlIHNwYWNlcyBpbiBtYXRoIG1vZGVcbiAgICAgIGlmICh0aGlzLm1vZGUgPT09IFwibWF0aFwiKSB7XG4gICAgICAgIHRoaXMuY29uc3VtZVNwYWNlcygpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGV4ID0gdGhpcy5uZXh0VG9rZW47XG5cbiAgICAgIGlmIChQYXJzZXIuZW5kT2ZFeHByZXNzaW9uLmluZGV4T2YobGV4LnRleHQpICE9PSAtMSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKGJyZWFrT25Ub2tlblRleHQgJiYgbGV4LnRleHQgPT09IGJyZWFrT25Ub2tlblRleHQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChicmVha09uSW5maXggJiYgc3JjX2Z1bmN0aW9uc1tsZXgudGV4dF0gJiYgc3JjX2Z1bmN0aW9uc1tsZXgudGV4dF0uaW5maXgpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHZhciBhdG9tID0gdGhpcy5wYXJzZUF0b20oYnJlYWtPblRva2VuVGV4dCk7XG5cbiAgICAgIGlmICghYXRvbSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgYm9keS5wdXNoKGF0b20pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm1vZGUgPT09IFwidGV4dFwiKSB7XG4gICAgICB0aGlzLmZvcm1MaWdhdHVyZXMoYm9keSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlSW5maXhOb2Rlcyhib2R5KTtcbiAgfVxuICAvKipcbiAgICogUmV3cml0ZXMgaW5maXggb3BlcmF0b3JzIHN1Y2ggYXMgXFxvdmVyIHdpdGggY29ycmVzcG9uZGluZyBjb21tYW5kcyBzdWNoXG4gICAqIGFzIFxcZnJhYy5cbiAgICpcbiAgICogVGhlcmUgY2FuIG9ubHkgYmUgb25lIGluZml4IG9wZXJhdG9yIHBlciBncm91cC4gIElmIHRoZXJlJ3MgbW9yZSB0aGFuIG9uZVxuICAgKiB0aGVuIHRoZSBleHByZXNzaW9uIGlzIGFtYmlndW91cy4gIFRoaXMgY2FuIGJlIHJlc29sdmVkIGJ5IGFkZGluZyB7fS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlSW5maXhOb2RlcyA9IGZ1bmN0aW9uIGhhbmRsZUluZml4Tm9kZXMoYm9keSkge1xuICAgIHZhciBvdmVySW5kZXggPSAtMTtcbiAgICB2YXIgZnVuY05hbWU7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZHkubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBub2RlID0gY2hlY2tOb2RlVHlwZShib2R5W2ldLCBcImluZml4XCIpO1xuXG4gICAgICBpZiAobm9kZSkge1xuICAgICAgICBpZiAob3ZlckluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIm9ubHkgb25lIGluZml4IG9wZXJhdG9yIHBlciBncm91cFwiLCBub2RlLnRva2VuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG92ZXJJbmRleCA9IGk7XG4gICAgICAgIGZ1bmNOYW1lID0gbm9kZS5yZXBsYWNlV2l0aDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3ZlckluZGV4ICE9PSAtMSAmJiBmdW5jTmFtZSkge1xuICAgICAgdmFyIG51bWVyTm9kZTtcbiAgICAgIHZhciBkZW5vbU5vZGU7XG4gICAgICB2YXIgbnVtZXJCb2R5ID0gYm9keS5zbGljZSgwLCBvdmVySW5kZXgpO1xuICAgICAgdmFyIGRlbm9tQm9keSA9IGJvZHkuc2xpY2Uob3ZlckluZGV4ICsgMSk7XG5cbiAgICAgIGlmIChudW1lckJvZHkubGVuZ3RoID09PSAxICYmIG51bWVyQm9keVswXS50eXBlID09PSBcIm9yZGdyb3VwXCIpIHtcbiAgICAgICAgbnVtZXJOb2RlID0gbnVtZXJCb2R5WzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbnVtZXJOb2RlID0ge1xuICAgICAgICAgIHR5cGU6IFwib3JkZ3JvdXBcIixcbiAgICAgICAgICBtb2RlOiB0aGlzLm1vZGUsXG4gICAgICAgICAgYm9keTogbnVtZXJCb2R5XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChkZW5vbUJvZHkubGVuZ3RoID09PSAxICYmIGRlbm9tQm9keVswXS50eXBlID09PSBcIm9yZGdyb3VwXCIpIHtcbiAgICAgICAgZGVub21Ob2RlID0gZGVub21Cb2R5WzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVub21Ob2RlID0ge1xuICAgICAgICAgIHR5cGU6IFwib3JkZ3JvdXBcIixcbiAgICAgICAgICBtb2RlOiB0aGlzLm1vZGUsXG4gICAgICAgICAgYm9keTogZGVub21Cb2R5XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHZhciBfbm9kZTtcblxuICAgICAgaWYgKGZ1bmNOYW1lID09PSBcIlxcXFxcXFxcYWJvdmVmcmFjXCIpIHtcbiAgICAgICAgX25vZGUgPSB0aGlzLmNhbGxGdW5jdGlvbihmdW5jTmFtZSwgW251bWVyTm9kZSwgYm9keVtvdmVySW5kZXhdLCBkZW5vbU5vZGVdLCBbXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfbm9kZSA9IHRoaXMuY2FsbEZ1bmN0aW9uKGZ1bmNOYW1lLCBbbnVtZXJOb2RlLCBkZW5vbU5vZGVdLCBbXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbX25vZGVdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYm9keTtcbiAgICB9XG4gIH0gLy8gVGhlIGdyZWVkaW5lc3Mgb2YgYSBzdXBlcnNjcmlwdCBvciBzdWJzY3JpcHRcbiAgO1xuXG4gIC8qKlxuICAgKiBIYW5kbGUgYSBzdWJzY3JpcHQgb3Igc3VwZXJzY3JpcHQgd2l0aCBuaWNlIGVycm9ycy5cbiAgICovXG4gIF9wcm90by5oYW5kbGVTdXBTdWJzY3JpcHQgPSBmdW5jdGlvbiBoYW5kbGVTdXBTdWJzY3JpcHQobmFtZSkge1xuICAgIHZhciBzeW1ib2xUb2tlbiA9IHRoaXMubmV4dFRva2VuO1xuICAgIHZhciBzeW1ib2wgPSBzeW1ib2xUb2tlbi50ZXh0O1xuICAgIHRoaXMuY29uc3VtZSgpO1xuICAgIHRoaXMuY29uc3VtZVNwYWNlcygpOyAvLyBpZ25vcmUgc3BhY2VzIGJlZm9yZSBzdXAvc3Vic2NyaXB0IGFyZ3VtZW50XG5cbiAgICB2YXIgZ3JvdXAgPSB0aGlzLnBhcnNlR3JvdXAobmFtZSwgZmFsc2UsIFBhcnNlci5TVVBTVUJfR1JFRURJTkVTUyk7XG5cbiAgICBpZiAoIWdyb3VwKSB7XG4gICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJFeHBlY3RlZCBncm91cCBhZnRlciAnXCIgKyBzeW1ib2wgKyBcIidcIiwgc3ltYm9sVG9rZW4pO1xuICAgIH1cblxuICAgIHJldHVybiBncm91cDtcbiAgfVxuICAvKipcbiAgICogQ29udmVydHMgdGhlIHRleHR1YWwgaW5wdXQgb2YgYW4gdW5zdXBwb3J0ZWQgY29tbWFuZCBpbnRvIGEgdGV4dCBub2RlXG4gICAqIGNvbnRhaW5lZCB3aXRoaW4gYSBjb2xvciBub2RlIHdob3NlIGNvbG9yIGlzIGRldGVybWluZWQgYnkgZXJyb3JDb2xvclxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVVbnN1cHBvcnRlZENtZCA9IGZ1bmN0aW9uIGhhbmRsZVVuc3VwcG9ydGVkQ21kKCkge1xuICAgIHZhciB0ZXh0ID0gdGhpcy5uZXh0VG9rZW4udGV4dDtcbiAgICB2YXIgdGV4dG9yZEFycmF5ID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRleHQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRleHRvcmRBcnJheS5wdXNoKHtcbiAgICAgICAgdHlwZTogXCJ0ZXh0b3JkXCIsXG4gICAgICAgIG1vZGU6IFwidGV4dFwiLFxuICAgICAgICB0ZXh0OiB0ZXh0W2ldXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgdGV4dE5vZGUgPSB7XG4gICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgIG1vZGU6IHRoaXMubW9kZSxcbiAgICAgIGJvZHk6IHRleHRvcmRBcnJheVxuICAgIH07XG4gICAgdmFyIGNvbG9yTm9kZSA9IHtcbiAgICAgIHR5cGU6IFwiY29sb3JcIixcbiAgICAgIG1vZGU6IHRoaXMubW9kZSxcbiAgICAgIGNvbG9yOiB0aGlzLnNldHRpbmdzLmVycm9yQ29sb3IsXG4gICAgICBib2R5OiBbdGV4dE5vZGVdXG4gICAgfTtcbiAgICB0aGlzLmNvbnN1bWUoKTtcbiAgICByZXR1cm4gY29sb3JOb2RlO1xuICB9XG4gIC8qKlxuICAgKiBQYXJzZXMgYSBncm91cCB3aXRoIG9wdGlvbmFsIHN1cGVyL3N1YnNjcmlwdHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlQXRvbSA9IGZ1bmN0aW9uIHBhcnNlQXRvbShicmVha09uVG9rZW5UZXh0KSB7XG4gICAgLy8gVGhlIGJvZHkgb2YgYW4gYXRvbSBpcyBhbiBpbXBsaWNpdCBncm91cCwgc28gdGhhdCB0aGluZ3MgbGlrZVxuICAgIC8vIFxcbGVmdCh4XFxyaWdodCleMiB3b3JrIGNvcnJlY3RseS5cbiAgICB2YXIgYmFzZSA9IHRoaXMucGFyc2VHcm91cChcImF0b21cIiwgZmFsc2UsIG51bGwsIGJyZWFrT25Ub2tlblRleHQpOyAvLyBJbiB0ZXh0IG1vZGUsIHdlIGRvbid0IGhhdmUgc3VwZXJzY3JpcHRzIG9yIHN1YnNjcmlwdHNcblxuICAgIGlmICh0aGlzLm1vZGUgPT09IFwidGV4dFwiKSB7XG4gICAgICByZXR1cm4gYmFzZTtcbiAgICB9IC8vIE5vdGUgdGhhdCBiYXNlIG1heSBiZSBlbXB0eSAoaS5lLiBudWxsKSBhdCB0aGlzIHBvaW50LlxuXG5cbiAgICB2YXIgc3VwZXJzY3JpcHQ7XG4gICAgdmFyIHN1YnNjcmlwdDtcblxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAvLyBHdWFyYW50ZWVkIGluIG1hdGggbW9kZSwgc28gZWF0IGFueSBzcGFjZXMgZmlyc3QuXG4gICAgICB0aGlzLmNvbnN1bWVTcGFjZXMoKTsgLy8gTGV4IHRoZSBmaXJzdCB0b2tlblxuXG4gICAgICB2YXIgbGV4ID0gdGhpcy5uZXh0VG9rZW47XG5cbiAgICAgIGlmIChsZXgudGV4dCA9PT0gXCJcXFxcbGltaXRzXCIgfHwgbGV4LnRleHQgPT09IFwiXFxcXG5vbGltaXRzXCIpIHtcbiAgICAgICAgLy8gV2UgZ290IGEgbGltaXQgY29udHJvbFxuICAgICAgICB2YXIgb3BOb2RlID0gY2hlY2tOb2RlVHlwZShiYXNlLCBcIm9wXCIpO1xuXG4gICAgICAgIGlmIChvcE5vZGUpIHtcbiAgICAgICAgICB2YXIgbGltaXRzID0gbGV4LnRleHQgPT09IFwiXFxcXGxpbWl0c1wiO1xuICAgICAgICAgIG9wTm9kZS5saW1pdHMgPSBsaW1pdHM7XG4gICAgICAgICAgb3BOb2RlLmFsd2F5c0hhbmRsZVN1cFN1YiA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiTGltaXQgY29udHJvbHMgbXVzdCBmb2xsb3cgYSBtYXRoIG9wZXJhdG9yXCIsIGxleCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvbnN1bWUoKTtcbiAgICAgIH0gZWxzZSBpZiAobGV4LnRleHQgPT09IFwiXlwiKSB7XG4gICAgICAgIC8vIFdlIGdvdCBhIHN1cGVyc2NyaXB0IHN0YXJ0XG4gICAgICAgIGlmIChzdXBlcnNjcmlwdCkge1xuICAgICAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIkRvdWJsZSBzdXBlcnNjcmlwdFwiLCBsZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3VwZXJzY3JpcHQgPSB0aGlzLmhhbmRsZVN1cFN1YnNjcmlwdChcInN1cGVyc2NyaXB0XCIpO1xuICAgICAgfSBlbHNlIGlmIChsZXgudGV4dCA9PT0gXCJfXCIpIHtcbiAgICAgICAgLy8gV2UgZ290IGEgc3Vic2NyaXB0IHN0YXJ0XG4gICAgICAgIGlmIChzdWJzY3JpcHQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJEb3VibGUgc3Vic2NyaXB0XCIsIGxleCk7XG4gICAgICAgIH1cblxuICAgICAgICBzdWJzY3JpcHQgPSB0aGlzLmhhbmRsZVN1cFN1YnNjcmlwdChcInN1YnNjcmlwdFwiKTtcbiAgICAgIH0gZWxzZSBpZiAobGV4LnRleHQgPT09IFwiJ1wiKSB7XG4gICAgICAgIC8vIFdlIGdvdCBhIHByaW1lXG4gICAgICAgIGlmIChzdXBlcnNjcmlwdCkge1xuICAgICAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIkRvdWJsZSBzdXBlcnNjcmlwdFwiLCBsZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHByaW1lID0ge1xuICAgICAgICAgIHR5cGU6IFwidGV4dG9yZFwiLFxuICAgICAgICAgIG1vZGU6IHRoaXMubW9kZSxcbiAgICAgICAgICB0ZXh0OiBcIlxcXFxwcmltZVwiXG4gICAgICAgIH07IC8vIE1hbnkgcHJpbWVzIGNhbiBiZSBncm91cGVkIHRvZ2V0aGVyLCBzbyB3ZSBoYW5kbGUgdGhpcyBoZXJlXG5cbiAgICAgICAgdmFyIHByaW1lcyA9IFtwcmltZV07XG4gICAgICAgIHRoaXMuY29uc3VtZSgpOyAvLyBLZWVwIGxleGluZyB0b2tlbnMgdW50aWwgd2UgZ2V0IHNvbWV0aGluZyB0aGF0J3Mgbm90IGEgcHJpbWVcblxuICAgICAgICB3aGlsZSAodGhpcy5uZXh0VG9rZW4udGV4dCA9PT0gXCInXCIpIHtcbiAgICAgICAgICAvLyBGb3IgZWFjaCBvbmUsIGFkZCBhbm90aGVyIHByaW1lIHRvIHRoZSBsaXN0XG4gICAgICAgICAgcHJpbWVzLnB1c2gocHJpbWUpO1xuICAgICAgICAgIHRoaXMuY29uc3VtZSgpO1xuICAgICAgICB9IC8vIElmIHRoZXJlJ3MgYSBzdXBlcnNjcmlwdCBmb2xsb3dpbmcgdGhlIHByaW1lcywgY29tYmluZSB0aGF0XG4gICAgICAgIC8vIHN1cGVyc2NyaXB0IGluIHdpdGggdGhlIHByaW1lcy5cblxuXG4gICAgICAgIGlmICh0aGlzLm5leHRUb2tlbi50ZXh0ID09PSBcIl5cIikge1xuICAgICAgICAgIHByaW1lcy5wdXNoKHRoaXMuaGFuZGxlU3VwU3Vic2NyaXB0KFwic3VwZXJzY3JpcHRcIikpO1xuICAgICAgICB9IC8vIFB1dCBldmVyeXRoaW5nIGludG8gYW4gb3JkZ3JvdXAgYXMgdGhlIHN1cGVyc2NyaXB0XG5cblxuICAgICAgICBzdXBlcnNjcmlwdCA9IHtcbiAgICAgICAgICB0eXBlOiBcIm9yZGdyb3VwXCIsXG4gICAgICAgICAgbW9kZTogdGhpcy5tb2RlLFxuICAgICAgICAgIGJvZHk6IHByaW1lc1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgaXQgd2Fzbid0IF4sIF8sIG9yICcsIHN0b3AgcGFyc2luZyBzdXBlci9zdWJzY3JpcHRzXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gLy8gQmFzZSBtdXN0IGJlIHNldCBpZiBzdXBlcnNjcmlwdCBvciBzdWJzY3JpcHQgYXJlIHNldCBwZXIgbG9naWMgYWJvdmUsXG4gICAgLy8gYnV0IG5lZWQgdG8gY2hlY2sgaGVyZSBmb3IgdHlwZSBjaGVjayB0byBwYXNzLlxuXG5cbiAgICBpZiAoc3VwZXJzY3JpcHQgfHwgc3Vic2NyaXB0KSB7XG4gICAgICAvLyBJZiB3ZSBnb3QgZWl0aGVyIGEgc3VwZXJzY3JpcHQgb3Igc3Vic2NyaXB0LCBjcmVhdGUgYSBzdXBzdWJcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwic3Vwc3ViXCIsXG4gICAgICAgIG1vZGU6IHRoaXMubW9kZSxcbiAgICAgICAgYmFzZTogYmFzZSxcbiAgICAgICAgc3VwOiBzdXBlcnNjcmlwdCxcbiAgICAgICAgc3ViOiBzdWJzY3JpcHRcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE90aGVyd2lzZSByZXR1cm4gdGhlIG9yaWdpbmFsIGJvZHlcbiAgICAgIHJldHVybiBiYXNlO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUGFyc2VzIGFuIGVudGlyZSBmdW5jdGlvbiwgaW5jbHVkaW5nIGl0cyBiYXNlIGFuZCBhbGwgb2YgaXRzIGFyZ3VtZW50cy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VGdW5jdGlvbiA9IGZ1bmN0aW9uIHBhcnNlRnVuY3Rpb24oYnJlYWtPblRva2VuVGV4dCwgbmFtZSwgLy8gRm9yIGVycm9yIHJlcG9ydGluZy5cbiAgZ3JlZWRpbmVzcykge1xuICAgIHZhciB0b2tlbiA9IHRoaXMubmV4dFRva2VuO1xuICAgIHZhciBmdW5jID0gdG9rZW4udGV4dDtcbiAgICB2YXIgZnVuY0RhdGEgPSBzcmNfZnVuY3Rpb25zW2Z1bmNdO1xuXG4gICAgaWYgKCFmdW5jRGF0YSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGdyZWVkaW5lc3MgIT0gbnVsbCAmJiBmdW5jRGF0YS5ncmVlZGluZXNzIDw9IGdyZWVkaW5lc3MpIHtcbiAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIkdvdCBmdW5jdGlvbiAnXCIgKyBmdW5jICsgXCInIHdpdGggbm8gYXJndW1lbnRzXCIgKyAobmFtZSA/IFwiIGFzIFwiICsgbmFtZSA6IFwiXCIpLCB0b2tlbik7XG4gICAgfSBlbHNlIGlmICh0aGlzLm1vZGUgPT09IFwidGV4dFwiICYmICFmdW5jRGF0YS5hbGxvd2VkSW5UZXh0KSB7XG4gICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJDYW4ndCB1c2UgZnVuY3Rpb24gJ1wiICsgZnVuYyArIFwiJyBpbiB0ZXh0IG1vZGVcIiwgdG9rZW4pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5tb2RlID09PSBcIm1hdGhcIiAmJiBmdW5jRGF0YS5hbGxvd2VkSW5NYXRoID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiQ2FuJ3QgdXNlIGZ1bmN0aW9uICdcIiArIGZ1bmMgKyBcIicgaW4gbWF0aCBtb2RlXCIsIHRva2VuKTtcbiAgICB9IC8vIGh5cGVycmVmIHBhY2thZ2Ugc2V0cyB0aGUgY2F0Y29kZSBvZiAlIGFzIGFuIGFjdGl2ZSBjaGFyYWN0ZXJcblxuXG4gICAgaWYgKGZ1bmNEYXRhLmFyZ1R5cGVzICYmIGZ1bmNEYXRhLmFyZ1R5cGVzWzBdID09PSBcInVybFwiKSB7XG4gICAgICB0aGlzLmd1bGxldC5sZXhlci5zZXRDYXRjb2RlKFwiJVwiLCAxMyk7XG4gICAgfSAvLyBDb25zdW1lIHRoZSBjb21tYW5kIHRva2VuIGFmdGVyIHBvc3NpYmx5IHN3aXRjaGluZyB0byB0aGVcbiAgICAvLyBtb2RlIHNwZWNpZmllZCBieSB0aGUgZnVuY3Rpb24gKGZvciBpbnN0YW50IG1vZGUgc3dpdGNoaW5nKSxcbiAgICAvLyBhbmQgdGhlbiBpbW1lZGlhdGVseSBzd2l0Y2ggYmFjay5cblxuXG4gICAgaWYgKGZ1bmNEYXRhLmNvbnN1bWVNb2RlKSB7XG4gICAgICB2YXIgb2xkTW9kZSA9IHRoaXMubW9kZTtcbiAgICAgIHRoaXMuc3dpdGNoTW9kZShmdW5jRGF0YS5jb25zdW1lTW9kZSk7XG4gICAgICB0aGlzLmNvbnN1bWUoKTtcbiAgICAgIHRoaXMuc3dpdGNoTW9kZShvbGRNb2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb25zdW1lKCk7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJHBhcnNlQXJndW1lbnRzID0gdGhpcy5wYXJzZUFyZ3VtZW50cyhmdW5jLCBmdW5jRGF0YSksXG4gICAgICAgIGFyZ3MgPSBfdGhpcyRwYXJzZUFyZ3VtZW50cy5hcmdzLFxuICAgICAgICBvcHRBcmdzID0gX3RoaXMkcGFyc2VBcmd1bWVudHMub3B0QXJncztcblxuICAgIHJldHVybiB0aGlzLmNhbGxGdW5jdGlvbihmdW5jLCBhcmdzLCBvcHRBcmdzLCB0b2tlbiwgYnJlYWtPblRva2VuVGV4dCk7XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYSBmdW5jdGlvbiBoYW5kbGVyIHdpdGggYSBzdWl0YWJsZSBjb250ZXh0IGFuZCBhcmd1bWVudHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNhbGxGdW5jdGlvbiA9IGZ1bmN0aW9uIGNhbGxGdW5jdGlvbihuYW1lLCBhcmdzLCBvcHRBcmdzLCB0b2tlbiwgYnJlYWtPblRva2VuVGV4dCkge1xuICAgIHZhciBjb250ZXh0ID0ge1xuICAgICAgZnVuY05hbWU6IG5hbWUsXG4gICAgICBwYXJzZXI6IHRoaXMsXG4gICAgICB0b2tlbjogdG9rZW4sXG4gICAgICBicmVha09uVG9rZW5UZXh0OiBicmVha09uVG9rZW5UZXh0XG4gICAgfTtcbiAgICB2YXIgZnVuYyA9IHNyY19mdW5jdGlvbnNbbmFtZV07XG5cbiAgICBpZiAoZnVuYyAmJiBmdW5jLmhhbmRsZXIpIHtcbiAgICAgIHJldHVybiBmdW5jLmhhbmRsZXIoY29udGV4dCwgYXJncywgb3B0QXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIk5vIGZ1bmN0aW9uIGhhbmRsZXIgZm9yIFwiICsgbmFtZSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBQYXJzZXMgdGhlIGFyZ3VtZW50cyBvZiBhIGZ1bmN0aW9uIG9yIGVudmlyb25tZW50XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlQXJndW1lbnRzID0gZnVuY3Rpb24gcGFyc2VBcmd1bWVudHMoZnVuYywgLy8gU2hvdWxkIGxvb2sgbGlrZSBcIlxcbmFtZVwiIG9yIFwiXFxiZWdpbntuYW1lfVwiLlxuICBmdW5jRGF0YSkge1xuICAgIHZhciB0b3RhbEFyZ3MgPSBmdW5jRGF0YS5udW1BcmdzICsgZnVuY0RhdGEubnVtT3B0aW9uYWxBcmdzO1xuXG4gICAgaWYgKHRvdGFsQXJncyA9PT0gMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYXJnczogW10sXG4gICAgICAgIG9wdEFyZ3M6IFtdXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBiYXNlR3JlZWRpbmVzcyA9IGZ1bmNEYXRhLmdyZWVkaW5lc3M7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgb3B0QXJncyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b3RhbEFyZ3M7IGkrKykge1xuICAgICAgdmFyIGFyZ1R5cGUgPSBmdW5jRGF0YS5hcmdUeXBlcyAmJiBmdW5jRGF0YS5hcmdUeXBlc1tpXTtcbiAgICAgIHZhciBpc09wdGlvbmFsID0gaSA8IGZ1bmNEYXRhLm51bU9wdGlvbmFsQXJnczsgLy8gSWdub3JlIHNwYWNlcyBiZXR3ZWVuIGFyZ3VtZW50cy4gIEFzIHRoZSBUZVhib29rIHNheXM6XG4gICAgICAvLyBcIkFmdGVyIHlvdSBoYXZlIHNhaWQg4oCYXFxkZWZcXHJvdyMxIzJ7Li4ufeKAmSwgeW91IGFyZSBhbGxvd2VkIHRvXG4gICAgICAvLyAgcHV0IHNwYWNlcyBiZXR3ZWVuIHRoZSBhcmd1bWVudHMgKGUuZy4sIOKAmFxccm93IHggbuKAmSksIGJlY2F1c2VcbiAgICAgIC8vICBUZVggZG9lc27igJl0IHVzZSBzaW5nbGUgc3BhY2VzIGFzIHVuZGVsaW1pdGVkIGFyZ3VtZW50cy5cIlxuXG4gICAgICBpZiAoaSA+IDAgJiYgIWlzT3B0aW9uYWwpIHtcbiAgICAgICAgdGhpcy5jb25zdW1lU3BhY2VzKCk7XG4gICAgICB9IC8vIEFsc28gY29uc3VtZSBsZWFkaW5nIHNwYWNlcyBpbiBtYXRoIG1vZGUsIGFzIHBhcnNlU3ltYm9sXG4gICAgICAvLyB3b24ndCBrbm93IHdoYXQgdG8gZG8gd2l0aCB0aGVtLiAgVGhpcyBjYW4gb25seSBoYXBwZW4gd2l0aFxuICAgICAgLy8gbWFjcm9zLCBlLmcuIFxcZnJhY1xcZm9vXFxmb28gd2hlcmUgXFxmb28gZXhwYW5kcyB0byBhIHNwYWNlIHN5bWJvbC5cbiAgICAgIC8vIEluIExhVGVYLCB0aGUgXFxmb28ncyBnZXQgdHJlYXRlZCBhcyAoYmxhbmspIGFyZ3VtZW50cykuXG4gICAgICAvLyBJbiBLYVRlWCwgZm9yIG5vdywgYm90aCBzcGFjZXMgd2lsbCBnZXQgY29uc3VtZWQuXG4gICAgICAvLyBUT0RPKGVkZW1haW5lKVxuXG5cbiAgICAgIGlmIChpID09PSAwICYmICFpc09wdGlvbmFsICYmIHRoaXMubW9kZSA9PT0gXCJtYXRoXCIpIHtcbiAgICAgICAgdGhpcy5jb25zdW1lU3BhY2VzKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXh0VG9rZW4gPSB0aGlzLm5leHRUb2tlbjtcbiAgICAgIHZhciBhcmcgPSB0aGlzLnBhcnNlR3JvdXBPZlR5cGUoXCJhcmd1bWVudCB0byAnXCIgKyBmdW5jICsgXCInXCIsIGFyZ1R5cGUsIGlzT3B0aW9uYWwsIGJhc2VHcmVlZGluZXNzKTtcblxuICAgICAgaWYgKCFhcmcpIHtcbiAgICAgICAgaWYgKGlzT3B0aW9uYWwpIHtcbiAgICAgICAgICBvcHRBcmdzLnB1c2gobnVsbCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJFeHBlY3RlZCBncm91cCBhZnRlciAnXCIgKyBmdW5jICsgXCInXCIsIG5leHRUb2tlbik7XG4gICAgICB9XG5cbiAgICAgIChpc09wdGlvbmFsID8gb3B0QXJncyA6IGFyZ3MpLnB1c2goYXJnKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgYXJnczogYXJncyxcbiAgICAgIG9wdEFyZ3M6IG9wdEFyZ3NcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBQYXJzZXMgYSBncm91cCB3aGVuIHRoZSBtb2RlIGlzIGNoYW5naW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZUdyb3VwT2ZUeXBlID0gZnVuY3Rpb24gcGFyc2VHcm91cE9mVHlwZShuYW1lLCB0eXBlLCBvcHRpb25hbCwgZ3JlZWRpbmVzcykge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBcImNvbG9yXCI6XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlQ29sb3JHcm91cChvcHRpb25hbCk7XG5cbiAgICAgIGNhc2UgXCJzaXplXCI6XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlU2l6ZUdyb3VwKG9wdGlvbmFsKTtcblxuICAgICAgY2FzZSBcInVybFwiOlxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVVybEdyb3VwKG9wdGlvbmFsKTtcblxuICAgICAgY2FzZSBcIm1hdGhcIjpcbiAgICAgIGNhc2UgXCJ0ZXh0XCI6XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlR3JvdXAobmFtZSwgb3B0aW9uYWwsIGdyZWVkaW5lc3MsIHVuZGVmaW5lZCwgdHlwZSk7XG5cbiAgICAgIGNhc2UgXCJyYXdcIjpcbiAgICAgICAge1xuICAgICAgICAgIGlmIChvcHRpb25hbCAmJiB0aGlzLm5leHRUb2tlbi50ZXh0ID09PSBcIntcIikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHRva2VuID0gdGhpcy5wYXJzZVN0cmluZ0dyb3VwKFwicmF3XCIsIG9wdGlvbmFsLCB0cnVlKTtcblxuICAgICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgdHlwZTogXCJyYXdcIixcbiAgICAgICAgICAgICAgbW9kZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICAgIHN0cmluZzogdG9rZW4udGV4dFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiRXhwZWN0ZWQgcmF3IGdyb3VwXCIsIHRoaXMubmV4dFRva2VuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBcIm9yaWdpbmFsXCI6XG4gICAgICBjYXNlIG51bGw6XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VHcm91cChuYW1lLCBvcHRpb25hbCwgZ3JlZWRpbmVzcyk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIlVua25vd24gZ3JvdXAgdHlwZSBhcyBcIiArIG5hbWUsIHRoaXMubmV4dFRva2VuKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbnN1bWVTcGFjZXMgPSBmdW5jdGlvbiBjb25zdW1lU3BhY2VzKCkge1xuICAgIHdoaWxlICh0aGlzLm5leHRUb2tlbi50ZXh0ID09PSBcIiBcIikge1xuICAgICAgdGhpcy5jb25zdW1lKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBQYXJzZXMgYSBncm91cCwgZXNzZW50aWFsbHkgcmV0dXJuaW5nIHRoZSBzdHJpbmcgZm9ybWVkIGJ5IHRoZVxuICAgKiBicmFjZS1lbmNsb3NlZCB0b2tlbnMgcGx1cyBzb21lIHBvc2l0aW9uIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZVN0cmluZ0dyb3VwID0gZnVuY3Rpb24gcGFyc2VTdHJpbmdHcm91cChtb2RlTmFtZSwgLy8gVXNlZCB0byBkZXNjcmliZSB0aGUgbW9kZSBpbiBlcnJvciBtZXNzYWdlcy5cbiAgb3B0aW9uYWwsIHJhdykge1xuICAgIHZhciBncm91cEJlZ2luID0gb3B0aW9uYWwgPyBcIltcIiA6IFwie1wiO1xuICAgIHZhciBncm91cEVuZCA9IG9wdGlvbmFsID8gXCJdXCIgOiBcIn1cIjtcbiAgICB2YXIgbmV4dFRva2VuID0gdGhpcy5uZXh0VG9rZW47XG5cbiAgICBpZiAobmV4dFRva2VuLnRleHQgIT09IGdyb3VwQmVnaW4pIHtcbiAgICAgIGlmIChvcHRpb25hbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAocmF3ICYmIG5leHRUb2tlbi50ZXh0ICE9PSBcIkVPRlwiICYmIC9bXnt9W1xcXV0vLnRlc3QobmV4dFRva2VuLnRleHQpKSB7XG4gICAgICAgIC8vIGFsbG93IGEgc2luZ2xlIGNoYXJhY3RlciBpbiByYXcgc3RyaW5nIGdyb3VwXG4gICAgICAgIHRoaXMuZ3VsbGV0LmxleGVyLnNldENhdGNvZGUoXCIlXCIsIDE0KTsgLy8gcmVzZXQgdGhlIGNhdGNvZGUgb2YgJVxuXG4gICAgICAgIHRoaXMuY29uc3VtZSgpO1xuICAgICAgICByZXR1cm4gbmV4dFRva2VuO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBvdXRlck1vZGUgPSB0aGlzLm1vZGU7XG4gICAgdGhpcy5tb2RlID0gXCJ0ZXh0XCI7XG4gICAgdGhpcy5leHBlY3QoZ3JvdXBCZWdpbik7XG4gICAgdmFyIHN0ciA9IFwiXCI7XG4gICAgdmFyIGZpcnN0VG9rZW4gPSB0aGlzLm5leHRUb2tlbjtcbiAgICB2YXIgbmVzdGVkID0gMDsgLy8gYWxsb3cgbmVzdGVkIGJyYWNlcyBpbiByYXcgc3RyaW5nIGdyb3VwXG5cbiAgICB2YXIgbGFzdFRva2VuID0gZmlyc3RUb2tlbjtcblxuICAgIHdoaWxlIChyYXcgJiYgbmVzdGVkID4gMCB8fCB0aGlzLm5leHRUb2tlbi50ZXh0ICE9PSBncm91cEVuZCkge1xuICAgICAgc3dpdGNoICh0aGlzLm5leHRUb2tlbi50ZXh0KSB7XG4gICAgICAgIGNhc2UgXCJFT0ZcIjpcbiAgICAgICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJVbmV4cGVjdGVkIGVuZCBvZiBpbnB1dCBpbiBcIiArIG1vZGVOYW1lLCBmaXJzdFRva2VuLnJhbmdlKGxhc3RUb2tlbiwgc3RyKSk7XG5cbiAgICAgICAgY2FzZSBncm91cEJlZ2luOlxuICAgICAgICAgIG5lc3RlZCsrO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgZ3JvdXBFbmQ6XG4gICAgICAgICAgbmVzdGVkLS07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGxhc3RUb2tlbiA9IHRoaXMubmV4dFRva2VuO1xuICAgICAgc3RyICs9IGxhc3RUb2tlbi50ZXh0O1xuICAgICAgdGhpcy5jb25zdW1lKCk7XG4gICAgfVxuXG4gICAgdGhpcy5tb2RlID0gb3V0ZXJNb2RlO1xuICAgIHRoaXMuZ3VsbGV0LmxleGVyLnNldENhdGNvZGUoXCIlXCIsIDE0KTsgLy8gcmVzZXQgdGhlIGNhdGNvZGUgb2YgJVxuXG4gICAgdGhpcy5leHBlY3QoZ3JvdXBFbmQpO1xuICAgIHJldHVybiBmaXJzdFRva2VuLnJhbmdlKGxhc3RUb2tlbiwgc3RyKTtcbiAgfVxuICAvKipcbiAgICogUGFyc2VzIGEgcmVnZXgtZGVsaW1pdGVkIGdyb3VwOiB0aGUgbGFyZ2VzdCBzZXF1ZW5jZSBvZiB0b2tlbnNcbiAgICogd2hvc2UgY29uY2F0ZW5hdGVkIHN0cmluZ3MgbWF0Y2ggYHJlZ2V4YC4gUmV0dXJucyB0aGUgc3RyaW5nXG4gICAqIGZvcm1lZCBieSB0aGUgdG9rZW5zIHBsdXMgc29tZSBwb3NpdGlvbiBpbmZvcm1hdGlvbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VSZWdleEdyb3VwID0gZnVuY3Rpb24gcGFyc2VSZWdleEdyb3VwKHJlZ2V4LCBtb2RlTmFtZSkge1xuICAgIHZhciBvdXRlck1vZGUgPSB0aGlzLm1vZGU7XG4gICAgdGhpcy5tb2RlID0gXCJ0ZXh0XCI7XG4gICAgdmFyIGZpcnN0VG9rZW4gPSB0aGlzLm5leHRUb2tlbjtcbiAgICB2YXIgbGFzdFRva2VuID0gZmlyc3RUb2tlbjtcbiAgICB2YXIgc3RyID0gXCJcIjtcblxuICAgIHdoaWxlICh0aGlzLm5leHRUb2tlbi50ZXh0ICE9PSBcIkVPRlwiICYmIHJlZ2V4LnRlc3Qoc3RyICsgdGhpcy5uZXh0VG9rZW4udGV4dCkpIHtcbiAgICAgIGxhc3RUb2tlbiA9IHRoaXMubmV4dFRva2VuO1xuICAgICAgc3RyICs9IGxhc3RUb2tlbi50ZXh0O1xuICAgICAgdGhpcy5jb25zdW1lKCk7XG4gICAgfVxuXG4gICAgaWYgKHN0ciA9PT0gXCJcIikge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiSW52YWxpZCBcIiArIG1vZGVOYW1lICsgXCI6ICdcIiArIGZpcnN0VG9rZW4udGV4dCArIFwiJ1wiLCBmaXJzdFRva2VuKTtcbiAgICB9XG5cbiAgICB0aGlzLm1vZGUgPSBvdXRlck1vZGU7XG4gICAgcmV0dXJuIGZpcnN0VG9rZW4ucmFuZ2UobGFzdFRva2VuLCBzdHIpO1xuICB9XG4gIC8qKlxuICAgKiBQYXJzZXMgYSBjb2xvciBkZXNjcmlwdGlvbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VDb2xvckdyb3VwID0gZnVuY3Rpb24gcGFyc2VDb2xvckdyb3VwKG9wdGlvbmFsKSB7XG4gICAgdmFyIHJlcyA9IHRoaXMucGFyc2VTdHJpbmdHcm91cChcImNvbG9yXCIsIG9wdGlvbmFsKTtcblxuICAgIGlmICghcmVzKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2ggPSAvXigjW2EtZjAtOV17M318Iz9bYS1mMC05XXs2fXxbYS16XSspJC9pLmV4ZWMocmVzLnRleHQpO1xuXG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiSW52YWxpZCBjb2xvcjogJ1wiICsgcmVzLnRleHQgKyBcIidcIiwgcmVzKTtcbiAgICB9XG5cbiAgICB2YXIgY29sb3IgPSBtYXRjaFswXTtcblxuICAgIGlmICgvXlswLTlhLWZdezZ9JC9pLnRlc3QoY29sb3IpKSB7XG4gICAgICAvLyBXZSBhbGxvdyBhIDYtZGlnaXQgSFRNTCBjb2xvciBzcGVjIHdpdGhvdXQgYSBsZWFkaW5nIFwiI1wiLlxuICAgICAgLy8gVGhpcyBmb2xsb3dzIHRoZSB4Y29sb3IgcGFja2FnZSdzIEhUTUwgY29sb3IgbW9kZWwuXG4gICAgICAvLyBQcmVkZWZpbmVkIGNvbG9yIG5hbWVzIGFyZSBhbGwgbWlzc2VkIGJ5IHRoaXMgUmVnRXggcGF0dGVybi5cbiAgICAgIGNvbG9yID0gXCIjXCIgKyBjb2xvcjtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJjb2xvci10b2tlblwiLFxuICAgICAgbW9kZTogdGhpcy5tb2RlLFxuICAgICAgY29sb3I6IGNvbG9yXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogUGFyc2VzIGEgc2l6ZSBzcGVjaWZpY2F0aW9uLCBjb25zaXN0aW5nIG9mIG1hZ25pdHVkZSBhbmQgdW5pdC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VTaXplR3JvdXAgPSBmdW5jdGlvbiBwYXJzZVNpemVHcm91cChvcHRpb25hbCkge1xuICAgIHZhciByZXM7XG4gICAgdmFyIGlzQmxhbmsgPSBmYWxzZTtcblxuICAgIGlmICghb3B0aW9uYWwgJiYgdGhpcy5uZXh0VG9rZW4udGV4dCAhPT0gXCJ7XCIpIHtcbiAgICAgIHJlcyA9IHRoaXMucGFyc2VSZWdleEdyb3VwKC9eWy0rXT8gKig/OiR8XFxkK3xcXGQrXFwuXFxkKnxcXC5cXGQqKSAqW2Etel17MCwyfSAqJC8sIFwic2l6ZVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0gdGhpcy5wYXJzZVN0cmluZ0dyb3VwKFwic2l6ZVwiLCBvcHRpb25hbCk7XG4gICAgfVxuXG4gICAgaWYgKCFyZXMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmICghb3B0aW9uYWwgJiYgcmVzLnRleHQubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBCZWNhdXNlIHdlJ3ZlIHRlc3RlZCBmb3Igd2hhdCBpcyAhb3B0aW9uYWwsIHRoaXMgYmxvY2sgd29uJ3RcbiAgICAgIC8vIGFmZmVjdCBcXGtlcm4sIFxcaHNwYWNlLCBldGMuIEl0IHdpbGwgY2FwdHVyZSB0aGUgbWFuZGF0b3J5IGFyZ3VtZW50c1xuICAgICAgLy8gdG8gXFxnZW5mcmFjIGFuZCBcXGFib3ZlLlxuICAgICAgcmVzLnRleHQgPSBcIjBwdFwiOyAvLyBFbmFibGUgXFxhYm92ZXt9XG5cbiAgICAgIGlzQmxhbmsgPSB0cnVlOyAvLyBUaGlzIGlzIGhlcmUgc3BlY2lmaWNhbGx5IGZvciBcXGdlbmZyYWNcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2ggPSAvKFstK10/KSAqKFxcZCsoPzpcXC5cXGQqKT98XFwuXFxkKykgKihbYS16XXsyfSkvLmV4ZWMocmVzLnRleHQpO1xuXG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiSW52YWxpZCBzaXplOiAnXCIgKyByZXMudGV4dCArIFwiJ1wiLCByZXMpO1xuICAgIH1cblxuICAgIHZhciBkYXRhID0ge1xuICAgICAgbnVtYmVyOiArKG1hdGNoWzFdICsgbWF0Y2hbMl0pLFxuICAgICAgLy8gc2lnbiArIG1hZ25pdHVkZSwgY2FzdCB0byBudW1iZXJcbiAgICAgIHVuaXQ6IG1hdGNoWzNdXG4gICAgfTtcblxuICAgIGlmICghdmFsaWRVbml0KGRhdGEpKSB7XG4gICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJJbnZhbGlkIHVuaXQ6ICdcIiArIGRhdGEudW5pdCArIFwiJ1wiLCByZXMpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcInNpemVcIixcbiAgICAgIG1vZGU6IHRoaXMubW9kZSxcbiAgICAgIHZhbHVlOiBkYXRhLFxuICAgICAgaXNCbGFuazogaXNCbGFua1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFBhcnNlcyBhbiBVUkwsIGNoZWNraW5nIGVzY2FwZWQgbGV0dGVycyBhbmQgYWxsb3dlZCBwcm90b2NvbHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlVXJsR3JvdXAgPSBmdW5jdGlvbiBwYXJzZVVybEdyb3VwKG9wdGlvbmFsKSB7XG4gICAgdmFyIHJlcyA9IHRoaXMucGFyc2VTdHJpbmdHcm91cChcInVybFwiLCBvcHRpb25hbCwgdHJ1ZSk7IC8vIGdldCByYXcgc3RyaW5nXG5cbiAgICBpZiAoIXJlcykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSAvLyBoeXBlcnJlZiBwYWNrYWdlIGFsbG93cyBiYWNrc2xhc2hlcyBhbG9uZSBpbiBocmVmLCBidXQgZG9lc24ndFxuICAgIC8vIGdlbmVyYXRlIHZhbGlkIGxpbmtzIGluIHN1Y2ggY2FzZXM7IHdlIGludGVycHJldCB0aGlzIGFzXG4gICAgLy8gXCJ1bmRlZmluZWRcIiBiZWhhdmlvdXIsIGFuZCBrZWVwIHRoZW0gYXMtaXMuIFNvbWUgYnJvd3NlciB3aWxsXG4gICAgLy8gcmVwbGFjZSBiYWNrc2xhc2hlcyB3aXRoIGZvcndhcmQgc2xhc2hlcy5cblxuXG4gICAgdmFyIHVybCA9IHJlcy50ZXh0LnJlcGxhY2UoL1xcXFwoWyMkJSZ+X157fV0pL2csICckMScpO1xuICAgIHZhciBwcm90b2NvbCA9IC9eXFxzKihbXlxcXFwvI10qPykoPzo6fCYjMCo1OHwmI3gwKjNhKS9pLmV4ZWModXJsKTtcbiAgICBwcm90b2NvbCA9IHByb3RvY29sICE9IG51bGwgPyBwcm90b2NvbFsxXSA6IFwiX3JlbGF0aXZlXCI7XG4gICAgdmFyIGFsbG93ZWQgPSB0aGlzLnNldHRpbmdzLmFsbG93ZWRQcm90b2NvbHM7XG5cbiAgICBpZiAoIXV0aWxzLmNvbnRhaW5zKGFsbG93ZWQsIFwiKlwiKSAmJiAhdXRpbHMuY29udGFpbnMoYWxsb3dlZCwgcHJvdG9jb2wpKSB7XG4gICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJGb3JiaWRkZW4gcHJvdG9jb2wgJ1wiICsgcHJvdG9jb2wgKyBcIidcIiwgcmVzKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJ1cmxcIixcbiAgICAgIG1vZGU6IHRoaXMubW9kZSxcbiAgICAgIHVybDogdXJsXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogSWYgYG9wdGlvbmFsYCBpcyBmYWxzZSBvciBhYnNlbnQsIHRoaXMgcGFyc2VzIGFuIG9yZGluYXJ5IGdyb3VwLFxuICAgKiB3aGljaCBpcyBlaXRoZXIgYSBzaW5nbGUgbnVjbGV1cyAobGlrZSBcInhcIikgb3IgYW4gZXhwcmVzc2lvblxuICAgKiBpbiBicmFjZXMgKGxpa2UgXCJ7eCt5fVwiKSBvciBhbiBpbXBsaWNpdCBncm91cCwgYSBncm91cCB0aGF0IHN0YXJ0c1xuICAgKiBhdCB0aGUgY3VycmVudCBwb3NpdGlvbiwgYW5kIGVuZHMgcmlnaHQgYmVmb3JlIGEgaGlnaGVyIGV4cGxpY2l0XG4gICAqIGdyb3VwIGVuZHMsIG9yIGF0IEVPRi5cbiAgICogSWYgYG9wdGlvbmFsYCBpcyB0cnVlLCBpdCBwYXJzZXMgZWl0aGVyIGEgYnJhY2tldC1kZWxpbWl0ZWQgZXhwcmVzc2lvblxuICAgKiAobGlrZSBcIlt4K3ldXCIpIG9yIHJldHVybnMgbnVsbCB0byBpbmRpY2F0ZSB0aGUgYWJzZW5jZSBvZiBhXG4gICAqIGJyYWNrZXQtZW5jbG9zZWQgZ3JvdXAuXG4gICAqIElmIGBtb2RlYCBpcyBwcmVzZW50LCBzd2l0Y2hlcyB0byB0aGF0IG1vZGUgd2hpbGUgcGFyc2luZyB0aGUgZ3JvdXAsXG4gICAqIGFuZCBzd2l0Y2hlcyBiYWNrIGFmdGVyLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZUdyb3VwID0gZnVuY3Rpb24gcGFyc2VHcm91cChuYW1lLCAvLyBGb3IgZXJyb3IgcmVwb3J0aW5nLlxuICBvcHRpb25hbCwgZ3JlZWRpbmVzcywgYnJlYWtPblRva2VuVGV4dCwgbW9kZSkge1xuICAgIHZhciBvdXRlck1vZGUgPSB0aGlzLm1vZGU7XG4gICAgdmFyIGZpcnN0VG9rZW4gPSB0aGlzLm5leHRUb2tlbjtcbiAgICB2YXIgdGV4dCA9IGZpcnN0VG9rZW4udGV4dDsgLy8gU3dpdGNoIHRvIHNwZWNpZmllZCBtb2RlXG5cbiAgICBpZiAobW9kZSkge1xuICAgICAgdGhpcy5zd2l0Y2hNb2RlKG1vZGUpO1xuICAgIH1cblxuICAgIHZhciBncm91cEVuZDtcbiAgICB2YXIgcmVzdWx0OyAvLyBUcnkgdG8gcGFyc2UgYW4gb3BlbiBicmFjZSBvciBcXGJlZ2luZ3JvdXBcblxuICAgIGlmIChvcHRpb25hbCA/IHRleHQgPT09IFwiW1wiIDogdGV4dCA9PT0gXCJ7XCIgfHwgdGV4dCA9PT0gXCJcXFxcYmVnaW5ncm91cFwiKSB7XG4gICAgICBncm91cEVuZCA9IFBhcnNlci5lbmRPZkdyb3VwW3RleHRdOyAvLyBTdGFydCBhIG5ldyBncm91cCBuYW1lc3BhY2VcblxuICAgICAgdGhpcy5ndWxsZXQuYmVnaW5Hcm91cCgpOyAvLyBJZiB3ZSBnZXQgYSBicmFjZSwgcGFyc2UgYW4gZXhwcmVzc2lvblxuXG4gICAgICB0aGlzLmNvbnN1bWUoKTtcbiAgICAgIHZhciBleHByZXNzaW9uID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oZmFsc2UsIGdyb3VwRW5kKTtcbiAgICAgIHZhciBsYXN0VG9rZW4gPSB0aGlzLm5leHRUb2tlbjsgLy8gRW5kIGdyb3VwIG5hbWVzcGFjZSBiZWZvcmUgY29uc3VtaW5nIHN5bWJvbCBhZnRlciBjbG9zZSBicmFjZVxuXG4gICAgICB0aGlzLmd1bGxldC5lbmRHcm91cCgpO1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICB0eXBlOiBcIm9yZGdyb3VwXCIsXG4gICAgICAgIG1vZGU6IHRoaXMubW9kZSxcbiAgICAgICAgbG9jOiBTb3VyY2VMb2NhdGlvbi5yYW5nZShmaXJzdFRva2VuLCBsYXN0VG9rZW4pLFxuICAgICAgICBib2R5OiBleHByZXNzaW9uLFxuICAgICAgICAvLyBBIGdyb3VwIGZvcm1lZCBieSBcXGJlZ2luZ3JvdXAuLi5cXGVuZGdyb3VwIGlzIGEgc2VtaS1zaW1wbGUgZ3JvdXBcbiAgICAgICAgLy8gd2hpY2ggZG9lc24ndCBhZmZlY3Qgc3BhY2luZyBpbiBtYXRoIG1vZGUsIGkuZS4sIGlzIHRyYW5zcGFyZW50LlxuICAgICAgICAvLyBodHRwczovL3RleC5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvMTkzMC93aGVuLXNob3VsZC1vbmUtXG4gICAgICAgIC8vIHVzZS1iZWdpbmdyb3VwLWluc3RlYWQtb2YtYmdyb3VwXG4gICAgICAgIHNlbWlzaW1wbGU6IHRleHQgPT09IFwiXFxcXGJlZ2luZ3JvdXBcIiB8fCB1bmRlZmluZWRcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChvcHRpb25hbCkge1xuICAgICAgLy8gUmV0dXJuIG5vdGhpbmcgZm9yIGFuIG9wdGlvbmFsIGdyb3VwXG4gICAgICByZXN1bHQgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiB0aGVyZSBleGlzdHMgYSBmdW5jdGlvbiB3aXRoIHRoaXMgbmFtZSwgcGFyc2UgdGhlIGZ1bmN0aW9uLlxuICAgICAgLy8gT3RoZXJ3aXNlLCBqdXN0IHJldHVybiBhIG51Y2xldXNcbiAgICAgIHJlc3VsdCA9IHRoaXMucGFyc2VGdW5jdGlvbihicmVha09uVG9rZW5UZXh0LCBuYW1lLCBncmVlZGluZXNzKSB8fCB0aGlzLnBhcnNlU3ltYm9sKCk7XG5cbiAgICAgIGlmIChyZXN1bHQgPT0gbnVsbCAmJiB0ZXh0WzBdID09PSBcIlxcXFxcIiAmJiAhaW1wbGljaXRDb21tYW5kcy5oYXNPd25Qcm9wZXJ0eSh0ZXh0KSkge1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy50aHJvd09uRXJyb3IpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJVbmRlZmluZWQgY29udHJvbCBzZXF1ZW5jZTogXCIgKyB0ZXh0LCBmaXJzdFRva2VuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdCA9IHRoaXMuaGFuZGxlVW5zdXBwb3J0ZWRDbWQoKTtcbiAgICAgIH1cbiAgICB9IC8vIFN3aXRjaCBtb2RlIGJhY2tcblxuXG4gICAgaWYgKG1vZGUpIHtcbiAgICAgIHRoaXMuc3dpdGNoTW9kZShvdXRlck1vZGUpO1xuICAgIH0gLy8gTWFrZSBzdXJlIHdlIGdvdCBhIGNsb3NlIGJyYWNlXG5cblxuICAgIGlmIChncm91cEVuZCkge1xuICAgICAgdGhpcy5leHBlY3QoZ3JvdXBFbmQpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgLyoqXG4gICAqIEZvcm0gbGlnYXR1cmUtbGlrZSBjb21iaW5hdGlvbnMgb2YgY2hhcmFjdGVycyBmb3IgdGV4dCBtb2RlLlxuICAgKiBUaGlzIGluY2x1ZGVzIGlucHV0cyBsaWtlIFwiLS1cIiwgXCItLS1cIiwgXCJgYFwiIGFuZCBcIicnXCIuXG4gICAqIFRoZSByZXN1bHQgd2lsbCBzaW1wbHkgcmVwbGFjZSBtdWx0aXBsZSB0ZXh0b3JkIG5vZGVzIHdpdGggYSBzaW5nbGVcbiAgICogY2hhcmFjdGVyIGluIGVhY2ggdmFsdWUgYnkgYSBzaW5nbGUgdGV4dG9yZCBub2RlIGhhdmluZyBtdWx0aXBsZVxuICAgKiBjaGFyYWN0ZXJzIGluIGl0cyB2YWx1ZS4gIFRoZSByZXByZXNlbnRhdGlvbiBpcyBzdGlsbCBBU0NJSSBzb3VyY2UuXG4gICAqIFRoZSBncm91cCB3aWxsIGJlIG1vZGlmaWVkIGluIHBsYWNlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5mb3JtTGlnYXR1cmVzID0gZnVuY3Rpb24gZm9ybUxpZ2F0dXJlcyhncm91cCkge1xuICAgIHZhciBuID0gZ3JvdXAubGVuZ3RoIC0gMTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICB2YXIgYSA9IGdyb3VwW2ldOyAvLyAkRmxvd0ZpeE1lOiBOb3QgZXZlcnkgbm9kZSB0eXBlIGhhcyBhIGB0ZXh0YCBwcm9wZXJ0eS5cblxuICAgICAgdmFyIHYgPSBhLnRleHQ7XG5cbiAgICAgIGlmICh2ID09PSBcIi1cIiAmJiBncm91cFtpICsgMV0udGV4dCA9PT0gXCItXCIpIHtcbiAgICAgICAgaWYgKGkgKyAxIDwgbiAmJiBncm91cFtpICsgMl0udGV4dCA9PT0gXCItXCIpIHtcbiAgICAgICAgICBncm91cC5zcGxpY2UoaSwgMywge1xuICAgICAgICAgICAgdHlwZTogXCJ0ZXh0b3JkXCIsXG4gICAgICAgICAgICBtb2RlOiBcInRleHRcIixcbiAgICAgICAgICAgIGxvYzogU291cmNlTG9jYXRpb24ucmFuZ2UoYSwgZ3JvdXBbaSArIDJdKSxcbiAgICAgICAgICAgIHRleHQ6IFwiLS0tXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBuIC09IDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ3JvdXAuc3BsaWNlKGksIDIsIHtcbiAgICAgICAgICAgIHR5cGU6IFwidGV4dG9yZFwiLFxuICAgICAgICAgICAgbW9kZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICBsb2M6IFNvdXJjZUxvY2F0aW9uLnJhbmdlKGEsIGdyb3VwW2kgKyAxXSksXG4gICAgICAgICAgICB0ZXh0OiBcIi0tXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBuIC09IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCh2ID09PSBcIidcIiB8fCB2ID09PSBcImBcIikgJiYgZ3JvdXBbaSArIDFdLnRleHQgPT09IHYpIHtcbiAgICAgICAgZ3JvdXAuc3BsaWNlKGksIDIsIHtcbiAgICAgICAgICB0eXBlOiBcInRleHRvcmRcIixcbiAgICAgICAgICBtb2RlOiBcInRleHRcIixcbiAgICAgICAgICBsb2M6IFNvdXJjZUxvY2F0aW9uLnJhbmdlKGEsIGdyb3VwW2kgKyAxXSksXG4gICAgICAgICAgdGV4dDogdiArIHZcbiAgICAgICAgfSk7XG4gICAgICAgIG4gLT0gMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFBhcnNlIGEgc2luZ2xlIHN5bWJvbCBvdXQgb2YgdGhlIHN0cmluZy4gSGVyZSwgd2UgaGFuZGxlIHNpbmdsZSBjaGFyYWN0ZXJcbiAgICogc3ltYm9scyBhbmQgc3BlY2lhbCBmdW5jdGlvbnMgbGlrZSB2ZXJiYXRpbVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZVN5bWJvbCA9IGZ1bmN0aW9uIHBhcnNlU3ltYm9sKCkge1xuICAgIHZhciBudWNsZXVzID0gdGhpcy5uZXh0VG9rZW47XG4gICAgdmFyIHRleHQgPSBudWNsZXVzLnRleHQ7XG5cbiAgICBpZiAoL15cXFxcdmVyYlteYS16QS1aXS8udGVzdCh0ZXh0KSkge1xuICAgICAgdGhpcy5jb25zdW1lKCk7XG4gICAgICB2YXIgYXJnID0gdGV4dC5zbGljZSg1KTtcbiAgICAgIHZhciBzdGFyID0gYXJnLmNoYXJBdCgwKSA9PT0gXCIqXCI7XG5cbiAgICAgIGlmIChzdGFyKSB7XG4gICAgICAgIGFyZyA9IGFyZy5zbGljZSgxKTtcbiAgICAgIH0gLy8gTGV4ZXIncyB0b2tlblJlZ2V4IGlzIGNvbnN0cnVjdGVkIHRvIGFsd2F5cyBoYXZlIG1hdGNoaW5nXG4gICAgICAvLyBmaXJzdC9sYXN0IGNoYXJhY3RlcnMuXG5cblxuICAgICAgaWYgKGFyZy5sZW5ndGggPCAyIHx8IGFyZy5jaGFyQXQoMCkgIT09IGFyZy5zbGljZSgtMSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiXFxcXHZlcmIgYXNzZXJ0aW9uIGZhaWxlZCAtLVxcbiAgICAgICAgICAgICAgICAgICAgcGxlYXNlIHJlcG9ydCB3aGF0IGlucHV0IGNhdXNlZCB0aGlzIGJ1Z1wiKTtcbiAgICAgIH1cblxuICAgICAgYXJnID0gYXJnLnNsaWNlKDEsIC0xKTsgLy8gcmVtb3ZlIGZpcnN0IGFuZCBsYXN0IGNoYXJcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJ2ZXJiXCIsXG4gICAgICAgIG1vZGU6IFwidGV4dFwiLFxuICAgICAgICBib2R5OiBhcmcsXG4gICAgICAgIHN0YXI6IHN0YXJcbiAgICAgIH07XG4gICAgfSAvLyBBdCB0aGlzIHBvaW50LCB3ZSBzaG91bGQgaGF2ZSBhIHN5bWJvbCwgcG9zc2libHkgd2l0aCBhY2NlbnRzLlxuICAgIC8vIEZpcnN0IGV4cGFuZCBhbnkgYWNjZW50ZWQgYmFzZSBzeW1ib2wgYWNjb3JkaW5nIHRvIHVuaWNvZGVTeW1ib2xzLlxuXG5cbiAgICBpZiAodW5pY29kZVN5bWJvbHMuaGFzT3duUHJvcGVydHkodGV4dFswXSkgJiYgIXNyY19zeW1ib2xzW3RoaXMubW9kZV1bdGV4dFswXV0pIHtcbiAgICAgIC8vIFRoaXMgYmVoYXZpb3IgaXMgbm90IHN0cmljdCAoWGVUZVgtY29tcGF0aWJsZSkgaW4gbWF0aCBtb2RlLlxuICAgICAgaWYgKHRoaXMuc2V0dGluZ3Muc3RyaWN0ICYmIHRoaXMubW9kZSA9PT0gXCJtYXRoXCIpIHtcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5yZXBvcnROb25zdHJpY3QoXCJ1bmljb2RlVGV4dEluTWF0aE1vZGVcIiwgXCJBY2NlbnRlZCBVbmljb2RlIHRleHQgY2hhcmFjdGVyIFxcXCJcIiArIHRleHRbMF0gKyBcIlxcXCIgdXNlZCBpbiBcIiArIFwibWF0aCBtb2RlXCIsIG51Y2xldXMpO1xuICAgICAgfVxuXG4gICAgICB0ZXh0ID0gdW5pY29kZVN5bWJvbHNbdGV4dFswXV0gKyB0ZXh0LnN1YnN0cigxKTtcbiAgICB9IC8vIFN0cmlwIG9mZiBhbnkgY29tYmluaW5nIGNoYXJhY3RlcnNcblxuXG4gICAgdmFyIG1hdGNoID0gY29tYmluaW5nRGlhY3JpdGljYWxNYXJrc0VuZFJlZ2V4LmV4ZWModGV4dCk7XG5cbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIHRleHQgPSB0ZXh0LnN1YnN0cmluZygwLCBtYXRjaC5pbmRleCk7XG5cbiAgICAgIGlmICh0ZXh0ID09PSAnaScpIHtcbiAgICAgICAgdGV4dCA9IFwiXFx1MDEzMVwiOyAvLyBkb3RsZXNzIGksIGluIG1hdGggYW5kIHRleHQgbW9kZVxuICAgICAgfSBlbHNlIGlmICh0ZXh0ID09PSAnaicpIHtcbiAgICAgICAgdGV4dCA9IFwiXFx1MDIzN1wiOyAvLyBkb3RsZXNzIGosIGluIG1hdGggYW5kIHRleHQgbW9kZVxuICAgICAgfVxuICAgIH0gLy8gUmVjb2duaXplIGJhc2Ugc3ltYm9sXG5cblxuICAgIHZhciBzeW1ib2w7XG5cbiAgICBpZiAoc3JjX3N5bWJvbHNbdGhpcy5tb2RlXVt0ZXh0XSkge1xuICAgICAgaWYgKHRoaXMuc2V0dGluZ3Muc3RyaWN0ICYmIHRoaXMubW9kZSA9PT0gJ21hdGgnICYmIGV4dHJhTGF0aW4uaW5kZXhPZih0ZXh0KSA+PSAwKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MucmVwb3J0Tm9uc3RyaWN0KFwidW5pY29kZVRleHRJbk1hdGhNb2RlXCIsIFwiTGF0aW4tMS9Vbmljb2RlIHRleHQgY2hhcmFjdGVyIFxcXCJcIiArIHRleHRbMF0gKyBcIlxcXCIgdXNlZCBpbiBcIiArIFwibWF0aCBtb2RlXCIsIG51Y2xldXMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZ3JvdXAgPSBzcmNfc3ltYm9sc1t0aGlzLm1vZGVdW3RleHRdLmdyb3VwO1xuICAgICAgdmFyIGxvYyA9IFNvdXJjZUxvY2F0aW9uLnJhbmdlKG51Y2xldXMpO1xuICAgICAgdmFyIHM7XG5cbiAgICAgIGlmIChBVE9NUy5oYXNPd25Qcm9wZXJ0eShncm91cCkpIHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICB2YXIgZmFtaWx5ID0gZ3JvdXA7XG4gICAgICAgIHMgPSB7XG4gICAgICAgICAgdHlwZTogXCJhdG9tXCIsXG4gICAgICAgICAgbW9kZTogdGhpcy5tb2RlLFxuICAgICAgICAgIGZhbWlseTogZmFtaWx5LFxuICAgICAgICAgIGxvYzogbG9jLFxuICAgICAgICAgIHRleHQ6IHRleHRcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgICAgcyA9IHtcbiAgICAgICAgICB0eXBlOiBncm91cCxcbiAgICAgICAgICBtb2RlOiB0aGlzLm1vZGUsXG4gICAgICAgICAgbG9jOiBsb2MsXG4gICAgICAgICAgdGV4dDogdGV4dFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBzeW1ib2wgPSBzO1xuICAgIH0gZWxzZSBpZiAodGV4dC5jaGFyQ29kZUF0KDApID49IDB4ODApIHtcbiAgICAgIC8vIG5vIHN5bWJvbCBmb3IgZS5nLiBeXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5zdHJpY3QpIHtcbiAgICAgICAgaWYgKCFzdXBwb3J0ZWRDb2RlcG9pbnQodGV4dC5jaGFyQ29kZUF0KDApKSkge1xuICAgICAgICAgIHRoaXMuc2V0dGluZ3MucmVwb3J0Tm9uc3RyaWN0KFwidW5rbm93blN5bWJvbFwiLCBcIlVucmVjb2duaXplZCBVbmljb2RlIGNoYXJhY3RlciBcXFwiXCIgKyB0ZXh0WzBdICsgXCJcXFwiXCIgKyAoXCIgKFwiICsgdGV4dC5jaGFyQ29kZUF0KDApICsgXCIpXCIpLCBudWNsZXVzKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1vZGUgPT09IFwibWF0aFwiKSB7XG4gICAgICAgICAgdGhpcy5zZXR0aW5ncy5yZXBvcnROb25zdHJpY3QoXCJ1bmljb2RlVGV4dEluTWF0aE1vZGVcIiwgXCJVbmljb2RlIHRleHQgY2hhcmFjdGVyIFxcXCJcIiArIHRleHRbMF0gKyBcIlxcXCIgdXNlZCBpbiBtYXRoIG1vZGVcIiwgbnVjbGV1cyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3ltYm9sID0ge1xuICAgICAgICB0eXBlOiBcInRleHRvcmRcIixcbiAgICAgICAgbW9kZTogdGhpcy5tb2RlLFxuICAgICAgICBsb2M6IFNvdXJjZUxvY2F0aW9uLnJhbmdlKG51Y2xldXMpLFxuICAgICAgICB0ZXh0OiB0ZXh0XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDsgLy8gRU9GLCBeLCBfLCB7LCB9LCBldGMuXG4gICAgfVxuXG4gICAgdGhpcy5jb25zdW1lKCk7IC8vIFRyYW5zZm9ybSBjb21iaW5pbmcgY2hhcmFjdGVycyBpbnRvIGFjY2VudHNcblxuICAgIGlmIChtYXRjaCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXRjaFswXS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgYWNjZW50ID0gbWF0Y2hbMF1baV07XG5cbiAgICAgICAgaWYgKCF1bmljb2RlQWNjZW50c1thY2NlbnRdKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiVW5rbm93biBhY2NlbnQgJyBcIiArIGFjY2VudCArIFwiJ1wiLCBudWNsZXVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjb21tYW5kID0gdW5pY29kZUFjY2VudHNbYWNjZW50XVt0aGlzLm1vZGVdO1xuXG4gICAgICAgIGlmICghY29tbWFuZCkge1xuICAgICAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIkFjY2VudCBcIiArIGFjY2VudCArIFwiIHVuc3VwcG9ydGVkIGluIFwiICsgdGhpcy5tb2RlICsgXCIgbW9kZVwiLCBudWNsZXVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN5bWJvbCA9IHtcbiAgICAgICAgICB0eXBlOiBcImFjY2VudFwiLFxuICAgICAgICAgIG1vZGU6IHRoaXMubW9kZSxcbiAgICAgICAgICBsb2M6IFNvdXJjZUxvY2F0aW9uLnJhbmdlKG51Y2xldXMpLFxuICAgICAgICAgIGxhYmVsOiBjb21tYW5kLFxuICAgICAgICAgIGlzU3RyZXRjaHk6IGZhbHNlLFxuICAgICAgICAgIGlzU2hpZnR5OiB0cnVlLFxuICAgICAgICAgIGJhc2U6IHN5bWJvbFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzeW1ib2w7XG4gIH07XG5cbiAgcmV0dXJuIFBhcnNlcjtcbn0oKTtcblxuUGFyc2VyX1BhcnNlci5lbmRPZkV4cHJlc3Npb24gPSBbXCJ9XCIsIFwiXFxcXGVuZGdyb3VwXCIsIFwiXFxcXGVuZFwiLCBcIlxcXFxyaWdodFwiLCBcIiZcIl07XG5QYXJzZXJfUGFyc2VyLmVuZE9mR3JvdXAgPSB7XG4gIFwiW1wiOiBcIl1cIixcbiAgXCJ7XCI6IFwifVwiLFxuICBcIlxcXFxiZWdpbmdyb3VwXCI6IFwiXFxcXGVuZGdyb3VwXCJcbiAgLyoqXG4gICAqIFBhcnNlcyBhbiBcImV4cHJlc3Npb25cIiwgd2hpY2ggaXMgYSBsaXN0IG9mIGF0b21zLlxuICAgKlxuICAgKiBgYnJlYWtPbkluZml4YDogU2hvdWxkIHRoZSBwYXJzaW5nIHN0b3Agd2hlbiB3ZSBoaXQgaW5maXggbm9kZXM/IFRoaXNcbiAgICogICAgICAgICAgICAgICAgIGhhcHBlbnMgd2hlbiBmdW5jdGlvbnMgaGF2ZSBoaWdoZXIgcHJlY2VuZGVuY2UgaGFuIGluZml4XG4gICAqICAgICAgICAgICAgICAgICBub2RlcyBpbiBpbXBsaWNpdCBwYXJzZXMuXG4gICAqXG4gICAqIGBicmVha09uVG9rZW5UZXh0YDogVGhlIHRleHQgb2YgdGhlIHRva2VuIHRoYXQgdGhlIGV4cHJlc3Npb24gc2hvdWxkIGVuZFxuICAgKiAgICAgICAgICAgICAgICAgICAgIHdpdGgsIG9yIGBudWxsYCBpZiBzb21ldGhpbmcgZWxzZSBzaG91bGQgZW5kIHRoZVxuICAgKiAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb24uXG4gICAqL1xuXG59O1xuUGFyc2VyX1BhcnNlci5TVVBTVUJfR1JFRURJTkVTUyA9IDE7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3BhcnNlVHJlZS5qc1xuLyoqXG4gKiBQcm92aWRlcyBhIHNpbmdsZSBmdW5jdGlvbiBmb3IgcGFyc2luZyBhbiBleHByZXNzaW9uIHVzaW5nIGEgUGFyc2VyXG4gKiBUT0RPKGVtaWx5KTogUmVtb3ZlIHRoaXNcbiAqL1xuXG5cblxuLyoqXG4gKiBQYXJzZXMgYW4gZXhwcmVzc2lvbiB1c2luZyBhIFBhcnNlciwgdGhlbiByZXR1cm5zIHRoZSBwYXJzZWQgcmVzdWx0LlxuICovXG52YXIgcGFyc2VUcmVlX3BhcnNlVHJlZSA9IGZ1bmN0aW9uIHBhcnNlVHJlZSh0b1BhcnNlLCBzZXR0aW5ncykge1xuICBpZiAoISh0eXBlb2YgdG9QYXJzZSA9PT0gJ3N0cmluZycgfHwgdG9QYXJzZSBpbnN0YW5jZW9mIFN0cmluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdLYVRlWCBjYW4gb25seSBwYXJzZSBzdHJpbmcgdHlwZWQgZXhwcmVzc2lvbicpO1xuICB9XG5cbiAgdmFyIHBhcnNlciA9IG5ldyBQYXJzZXJfUGFyc2VyKHRvUGFyc2UsIHNldHRpbmdzKTsgLy8gQmxhbmsgb3V0IGFueSBcXGRmQHRhZyB0byBhdm9pZCBzcHVyaW91cyBcIkR1cGxpY2F0ZSBcXHRhZ1wiIGVycm9yc1xuXG4gIGRlbGV0ZSBwYXJzZXIuZ3VsbGV0Lm1hY3Jvcy5jdXJyZW50W1wiXFxcXGRmQHRhZ1wiXTtcbiAgdmFyIHRyZWUgPSBwYXJzZXIucGFyc2UoKTsgLy8gSWYgdGhlIGlucHV0IHVzZWQgXFx0YWcsIGl0IHdpbGwgc2V0IHRoZSBcXGRmQHRhZyBtYWNybyB0byB0aGUgdGFnLlxuICAvLyBJbiB0aGlzIGNhc2UsIHdlIHNlcGFyYXRlbHkgcGFyc2UgdGhlIHRhZyBhbmQgd3JhcCB0aGUgdHJlZS5cblxuICBpZiAocGFyc2VyLmd1bGxldC5tYWNyb3MuZ2V0KFwiXFxcXGRmQHRhZ1wiKSkge1xuICAgIGlmICghc2V0dGluZ3MuZGlzcGxheU1vZGUpIHtcbiAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIlxcXFx0YWcgd29ya3Mgb25seSBpbiBkaXNwbGF5IGVxdWF0aW9uc1wiKTtcbiAgICB9XG5cbiAgICBwYXJzZXIuZ3VsbGV0LmZlZWQoXCJcXFxcZGZAdGFnXCIpO1xuICAgIHRyZWUgPSBbe1xuICAgICAgdHlwZTogXCJ0YWdcIixcbiAgICAgIG1vZGU6IFwidGV4dFwiLFxuICAgICAgYm9keTogdHJlZSxcbiAgICAgIHRhZzogcGFyc2VyLnBhcnNlKClcbiAgICB9XTtcbiAgfVxuXG4gIHJldHVybiB0cmVlO1xufTtcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgc3JjX3BhcnNlVHJlZSA9IChwYXJzZVRyZWVfcGFyc2VUcmVlKTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4va2F0ZXguanNcbi8qIGVzbGludCBuby1jb25zb2xlOjAgKi9cblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBtYWluIGVudHJ5IHBvaW50IGZvciBLYVRlWC4gSGVyZSwgd2UgZXhwb3NlIGZ1bmN0aW9ucyBmb3JcbiAqIHJlbmRlcmluZyBleHByZXNzaW9ucyBlaXRoZXIgdG8gRE9NIG5vZGVzIG9yIHRvIG1hcmt1cCBzdHJpbmdzLlxuICpcbiAqIFdlIGFsc28gZXhwb3NlIHRoZSBQYXJzZUVycm9yIGNsYXNzIHRvIGNoZWNrIGlmIGVycm9ycyB0aHJvd24gZnJvbSBLYVRlWCBhcmVcbiAqIGVycm9ycyBpbiB0aGUgZXhwcmVzc2lvbiwgb3IgZXJyb3JzIGluIGphdmFzY3JpcHQgaGFuZGxpbmcuXG4gKi9cblxuXG5cblxuXG5cblxuXG5cblxuLyoqXG4gKiBQYXJzZSBhbmQgYnVpbGQgYW4gZXhwcmVzc2lvbiwgYW5kIHBsYWNlIHRoYXQgZXhwcmVzc2lvbiBpbiB0aGUgRE9NIG5vZGVcbiAqIGdpdmVuLlxuICovXG52YXIga2F0ZXhfcmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKGV4cHJlc3Npb24sIGJhc2VOb2RlLCBvcHRpb25zKSB7XG4gIGJhc2VOb2RlLnRleHRDb250ZW50ID0gXCJcIjtcbiAgdmFyIG5vZGUgPSBrYXRleF9yZW5kZXJUb0RvbVRyZWUoZXhwcmVzc2lvbiwgb3B0aW9ucykudG9Ob2RlKCk7XG4gIGJhc2VOb2RlLmFwcGVuZENoaWxkKG5vZGUpO1xufTsgLy8gS2FUZVgncyBzdHlsZXMgZG9uJ3Qgd29yayBwcm9wZXJseSBpbiBxdWlya3MgbW9kZS4gUHJpbnQgb3V0IGFuIGVycm9yLCBhbmRcbi8vIGRpc2FibGUgcmVuZGVyaW5nLlxuXG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgaWYgKGRvY3VtZW50LmNvbXBhdE1vZGUgIT09IFwiQ1NTMUNvbXBhdFwiKSB7XG4gICAgdHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29uc29sZS53YXJuKFwiV2FybmluZzogS2FUZVggZG9lc24ndCB3b3JrIGluIHF1aXJrcyBtb2RlLiBNYWtlIHN1cmUgeW91ciBcIiArIFwid2Vic2l0ZSBoYXMgYSBzdWl0YWJsZSBkb2N0eXBlLlwiKTtcblxuICAgIGthdGV4X3JlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIkthVGVYIGRvZXNuJ3Qgd29yayBpbiBxdWlya3MgbW9kZS5cIik7XG4gICAgfTtcbiAgfVxufVxuLyoqXG4gKiBQYXJzZSBhbmQgYnVpbGQgYW4gZXhwcmVzc2lvbiwgYW5kIHJldHVybiB0aGUgbWFya3VwIGZvciB0aGF0LlxuICovXG5cblxudmFyIHJlbmRlclRvU3RyaW5nID0gZnVuY3Rpb24gcmVuZGVyVG9TdHJpbmcoZXhwcmVzc2lvbiwgb3B0aW9ucykge1xuICB2YXIgbWFya3VwID0ga2F0ZXhfcmVuZGVyVG9Eb21UcmVlKGV4cHJlc3Npb24sIG9wdGlvbnMpLnRvTWFya3VwKCk7XG4gIHJldHVybiBtYXJrdXA7XG59O1xuLyoqXG4gKiBQYXJzZSBhbiBleHByZXNzaW9uIGFuZCByZXR1cm4gdGhlIHBhcnNlIHRyZWUuXG4gKi9cblxuXG52YXIga2F0ZXhfZ2VuZXJhdGVQYXJzZVRyZWUgPSBmdW5jdGlvbiBnZW5lcmF0ZVBhcnNlVHJlZShleHByZXNzaW9uLCBvcHRpb25zKSB7XG4gIHZhciBzZXR0aW5ncyA9IG5ldyBzcmNfU2V0dGluZ3Mob3B0aW9ucyk7XG4gIHJldHVybiBzcmNfcGFyc2VUcmVlKGV4cHJlc3Npb24sIHNldHRpbmdzKTtcbn07XG4vKipcbiAqIElmIHRoZSBnaXZlbiBlcnJvciBpcyBhIEthVGVYIFBhcnNlRXJyb3IgYW5kIG9wdGlvbnMudGhyb3dPbkVycm9yIGlzIGZhbHNlLFxuICogcmVuZGVycyB0aGUgaW52YWxpZCBMYVRlWCBhcyBhIHNwYW4gd2l0aCBob3ZlciB0aXRsZSBnaXZpbmcgdGhlIEthVGVYXG4gKiBlcnJvciBtZXNzYWdlLiAgT3RoZXJ3aXNlLCBzaW1wbHkgdGhyb3dzIHRoZSBlcnJvci5cbiAqL1xuXG5cbnZhciBrYXRleF9yZW5kZXJFcnJvciA9IGZ1bmN0aW9uIHJlbmRlckVycm9yKGVycm9yLCBleHByZXNzaW9uLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLnRocm93T25FcnJvciB8fCAhKGVycm9yIGluc3RhbmNlb2Ygc3JjX1BhcnNlRXJyb3IpKSB7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cblxuICB2YXIgbm9kZSA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcImthdGV4LWVycm9yXCJdLCBbbmV3IGRvbVRyZWVfU3ltYm9sTm9kZShleHByZXNzaW9uKV0pO1xuICBub2RlLnNldEF0dHJpYnV0ZShcInRpdGxlXCIsIGVycm9yLnRvU3RyaW5nKCkpO1xuICBub2RlLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIFwiY29sb3I6XCIgKyBvcHRpb25zLmVycm9yQ29sb3IpO1xuICByZXR1cm4gbm9kZTtcbn07XG4vKipcbiAqIEdlbmVyYXRlcyBhbmQgcmV0dXJucyB0aGUga2F0ZXggYnVpbGQgdHJlZS4gVGhpcyBpcyB1c2VkIGZvciBhZHZhbmNlZFxuICogdXNlIGNhc2VzIChsaWtlIHJlbmRlcmluZyB0byBjdXN0b20gb3V0cHV0KS5cbiAqL1xuXG5cbnZhciBrYXRleF9yZW5kZXJUb0RvbVRyZWUgPSBmdW5jdGlvbiByZW5kZXJUb0RvbVRyZWUoZXhwcmVzc2lvbiwgb3B0aW9ucykge1xuICB2YXIgc2V0dGluZ3MgPSBuZXcgc3JjX1NldHRpbmdzKG9wdGlvbnMpO1xuXG4gIHRyeSB7XG4gICAgdmFyIHRyZWUgPSBzcmNfcGFyc2VUcmVlKGV4cHJlc3Npb24sIHNldHRpbmdzKTtcbiAgICByZXR1cm4gYnVpbGRUcmVlX2J1aWxkVHJlZSh0cmVlLCBleHByZXNzaW9uLCBzZXR0aW5ncyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGthdGV4X3JlbmRlckVycm9yKGVycm9yLCBleHByZXNzaW9uLCBzZXR0aW5ncyk7XG4gIH1cbn07XG4vKipcbiAqIEdlbmVyYXRlcyBhbmQgcmV0dXJucyB0aGUga2F0ZXggYnVpbGQgdHJlZSwgd2l0aCBqdXN0IEhUTUwgKG5vIE1hdGhNTCkuXG4gKiBUaGlzIGlzIHVzZWQgZm9yIGFkdmFuY2VkIHVzZSBjYXNlcyAobGlrZSByZW5kZXJpbmcgdG8gY3VzdG9tIG91dHB1dCkuXG4gKi9cblxuXG52YXIga2F0ZXhfcmVuZGVyVG9IVE1MVHJlZSA9IGZ1bmN0aW9uIHJlbmRlclRvSFRNTFRyZWUoZXhwcmVzc2lvbiwgb3B0aW9ucykge1xuICB2YXIgc2V0dGluZ3MgPSBuZXcgc3JjX1NldHRpbmdzKG9wdGlvbnMpO1xuXG4gIHRyeSB7XG4gICAgdmFyIHRyZWUgPSBzcmNfcGFyc2VUcmVlKGV4cHJlc3Npb24sIHNldHRpbmdzKTtcbiAgICByZXR1cm4gYnVpbGRUcmVlX2J1aWxkSFRNTFRyZWUodHJlZSwgZXhwcmVzc2lvbiwgc2V0dGluZ3MpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBrYXRleF9yZW5kZXJFcnJvcihlcnJvciwgZXhwcmVzc2lvbiwgc2V0dGluZ3MpO1xuICB9XG59O1xuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBrYXRleF8wID0gKHtcbiAgLyoqXG4gICAqIEN1cnJlbnQgS2FUZVggdmVyc2lvblxuICAgKi9cbiAgdmVyc2lvbjogXCIwLjEwLjJcIixcblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgZ2l2ZW4gTGFUZVggaW50byBhbiBIVE1MK01hdGhNTCBjb21iaW5hdGlvbiwgYW5kIGFkZHNcbiAgICogaXQgYXMgYSBjaGlsZCB0byB0aGUgc3BlY2lmaWVkIERPTSBub2RlLlxuICAgKi9cbiAgcmVuZGVyOiBrYXRleF9yZW5kZXIsXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIGdpdmVuIExhVGVYIGludG8gYW4gSFRNTCtNYXRoTUwgY29tYmluYXRpb24gc3RyaW5nLFxuICAgKiBmb3Igc2VuZGluZyB0byB0aGUgY2xpZW50LlxuICAgKi9cbiAgcmVuZGVyVG9TdHJpbmc6IHJlbmRlclRvU3RyaW5nLFxuXG4gIC8qKlxuICAgKiBLYVRlWCBlcnJvciwgdXN1YWxseSBkdXJpbmcgcGFyc2luZy5cbiAgICovXG4gIFBhcnNlRXJyb3I6IHNyY19QYXJzZUVycm9yLFxuXG4gIC8qKlxuICAgKiBQYXJzZXMgdGhlIGdpdmVuIExhVGVYIGludG8gS2FUZVgncyBpbnRlcm5hbCBwYXJzZSB0cmVlIHN0cnVjdHVyZSxcbiAgICogd2l0aG91dCByZW5kZXJpbmcgdG8gSFRNTCBvciBNYXRoTUwuXG4gICAqXG4gICAqIE5PVEU6IFRoaXMgbWV0aG9kIGlzIG5vdCBjdXJyZW50bHkgcmVjb21tZW5kZWQgZm9yIHB1YmxpYyB1c2UuXG4gICAqIFRoZSBpbnRlcm5hbCB0cmVlIHJlcHJlc2VudGF0aW9uIGlzIHVuc3RhYmxlIGFuZCBpcyB2ZXJ5IGxpa2VseVxuICAgKiB0byBjaGFuZ2UuIFVzZSBhdCB5b3VyIG93biByaXNrLlxuICAgKi9cbiAgX19wYXJzZToga2F0ZXhfZ2VuZXJhdGVQYXJzZVRyZWUsXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIGdpdmVuIExhVGVYIGludG8gYW4gSFRNTCtNYXRoTUwgaW50ZXJuYWwgRE9NIHRyZWVcbiAgICogcmVwcmVzZW50YXRpb24sIHdpdGhvdXQgZmxhdHRlbmluZyB0aGF0IHJlcHJlc2VudGF0aW9uIHRvIGEgc3RyaW5nLlxuICAgKlxuICAgKiBOT1RFOiBUaGlzIG1ldGhvZCBpcyBub3QgY3VycmVudGx5IHJlY29tbWVuZGVkIGZvciBwdWJsaWMgdXNlLlxuICAgKiBUaGUgaW50ZXJuYWwgdHJlZSByZXByZXNlbnRhdGlvbiBpcyB1bnN0YWJsZSBhbmQgaXMgdmVyeSBsaWtlbHlcbiAgICogdG8gY2hhbmdlLiBVc2UgYXQgeW91ciBvd24gcmlzay5cbiAgICovXG4gIF9fcmVuZGVyVG9Eb21UcmVlOiBrYXRleF9yZW5kZXJUb0RvbVRyZWUsXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIGdpdmVuIExhVGVYIGludG8gYW4gSFRNTCBpbnRlcm5hbCBET00gdHJlZSByZXByZXNlbnRhdGlvbixcbiAgICogd2l0aG91dCBNYXRoTUwgYW5kIHdpdGhvdXQgZmxhdHRlbmluZyB0aGF0IHJlcHJlc2VudGF0aW9uIHRvIGEgc3RyaW5nLlxuICAgKlxuICAgKiBOT1RFOiBUaGlzIG1ldGhvZCBpcyBub3QgY3VycmVudGx5IHJlY29tbWVuZGVkIGZvciBwdWJsaWMgdXNlLlxuICAgKiBUaGUgaW50ZXJuYWwgdHJlZSByZXByZXNlbnRhdGlvbiBpcyB1bnN0YWJsZSBhbmQgaXMgdmVyeSBsaWtlbHlcbiAgICogdG8gY2hhbmdlLiBVc2UgYXQgeW91ciBvd24gcmlzay5cbiAgICovXG4gIF9fcmVuZGVyVG9IVE1MVHJlZToga2F0ZXhfcmVuZGVyVG9IVE1MVHJlZSxcblxuICAvKipcbiAgICogZXh0ZW5kcyBpbnRlcm5hbCBmb250IG1ldHJpY3Mgb2JqZWN0IHdpdGggYSBuZXcgb2JqZWN0XG4gICAqIGVhY2gga2V5IGluIHRoZSBuZXcgb2JqZWN0IHJlcHJlc2VudHMgYSBmb250IG5hbWVcbiAgKi9cbiAgX19zZXRGb250TWV0cmljczogc2V0Rm9udE1ldHJpY3MsXG5cbiAgLyoqXG4gICAqIGFkZHMgYSBuZXcgc3ltYm9sIHRvIGJ1aWx0aW4gc3ltYm9scyB0YWJsZVxuICAgKi9cbiAgX19kZWZpbmVTeW1ib2w6IGRlZmluZVN5bWJvbCxcblxuICAvKipcbiAgICogYWRkcyBhIG5ldyBtYWNybyB0byBidWlsdGluIG1hY3JvIGxpc3RcbiAgICovXG4gIF9fZGVmaW5lTWFjcm86IGRlZmluZU1hY3JvLFxuXG4gIC8qKlxuICAgKiBFeHBvc2UgdGhlIGRvbSB0cmVlIG5vZGUgdHlwZXMsIHdoaWNoIGNhbiBiZSB1c2VmdWwgZm9yIHR5cGUgY2hlY2tpbmcgbm9kZXMuXG4gICAqXG4gICAqIE5PVEU6IFRoaXMgbWV0aG9kIGlzIG5vdCBjdXJyZW50bHkgcmVjb21tZW5kZWQgZm9yIHB1YmxpYyB1c2UuXG4gICAqIFRoZSBpbnRlcm5hbCB0cmVlIHJlcHJlc2VudGF0aW9uIGlzIHVuc3RhYmxlIGFuZCBpcyB2ZXJ5IGxpa2VseVxuICAgKiB0byBjaGFuZ2UuIFVzZSBhdCB5b3VyIG93biByaXNrLlxuICAgKi9cbiAgX19kb21UcmVlOiB7XG4gICAgU3BhbjogZG9tVHJlZV9TcGFuLFxuICAgIEFuY2hvcjogZG9tVHJlZV9BbmNob3IsXG4gICAgU3ltYm9sTm9kZTogZG9tVHJlZV9TeW1ib2xOb2RlLFxuICAgIFN2Z05vZGU6IFN2Z05vZGUsXG4gICAgUGF0aE5vZGU6IGRvbVRyZWVfUGF0aE5vZGUsXG4gICAgTGluZU5vZGU6IExpbmVOb2RlXG4gIH1cbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9rYXRleC53ZWJwYWNrLmpzXG4vKipcbiAqIFRoaXMgaXMgdGhlIHdlYnBhY2sgZW50cnkgcG9pbnQgZm9yIEthVGVYLiBBcyBFQ01BU2NyaXB0LCBmbG93WzFdIGFuZCBqZXN0WzJdXG4gKiBkb2Vzbid0IHN1cHBvcnQgQ1NTIG1vZHVsZXMgbmF0aXZlbHksIGEgc2VwYXJhdGUgZW50cnkgcG9pbnQgaXMgdXNlZCBhbmRcbiAqIGl0IGlzIG5vdCBmbG93dHlwZWQuXG4gKlxuICogWzFdIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2xhbWJkYWhhbmRzL2QxOWUwZGE5NjI4NWI3NDlmMGVmXG4gKiBbMl0gaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vamVzdC9kb2NzL2VuL3dlYnBhY2suaHRtbFxuICovXG5cblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIga2F0ZXhfd2VicGFjayA9IF9fd2VicGFja19leHBvcnRzX19bXCJkZWZhdWx0XCJdID0gKGthdGV4XzApO1xuXG4vKioqLyB9KVxuLyoqKioqKi8gXSlbXCJkZWZhdWx0XCJdO1xufSk7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiLy8gaW1wb3J0ICdrYXRleC9kaXN0L2thdGV4Lm1pbi5jc3MnO1xuaW1wb3J0IGthdGV4IGZyb20gJ2thdGV4J1xuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ2thdGV4LWZvcm11bGEnLCBjbGFzcyBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKClcbiAgfVxuXG4gIGNvbm5lY3RlZENhbGxiYWNrICgpIHtcbiAgICBjb25zdCBzaGFkb3dSb290ID0gdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSlcblxuICAgIGxldCBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpXG4gICAgbGV0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJylcbiAgICBsaW5rLmhyZWYgPSAnZm9ybXVsYS9rYXRleC5taW4uY3NzJ1xuICAgIGxpbmsucmVsID0gJ3N0eWxlc2hlZXQnXG5cbiAgICBzaGFkb3dSb290LmFwcGVuZENoaWxkKGxpbmspXG4gICAgc2hhZG93Um9vdC5hcHBlbmRDaGlsZChzcGFuKVxuXG4gICAgbGV0IGRpc3BsYXlNb2RlID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2Rpc3BsYXlNb2RlJylcblxuICAgIGlmICghZGlzcGxheU1vZGUpIHtcbiAgICAgIGRpc3BsYXlNb2RlID0gZmFsc2VcbiAgICB9IGVsc2Uge1xuICAgICAgZGlzcGxheU1vZGUgPSBKU09OLnBhcnNlKGRpc3BsYXlNb2RlKVxuICAgIH1cblxuICAgIGthdGV4LnJlbmRlcih0aGlzLmlubmVySFRNTCwgc3Bhbiwge1xuICAgICAgdGhyb3dPbkVycm9yOiBmYWxzZSxcbiAgICAgIGRpc3BsYXlNb2RlOiBkaXNwbGF5TW9kZVxuICAgIH0pXG4gIH1cblxuICBkaXNjb25uZWN0ZWRDYWxsYmFjayAoKSB7XG4gICAgaWYgKHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKSB7XG4gICAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpXG4gICAgfVxuICB9XG59KVxuIl0sInNvdXJjZVJvb3QiOiIifQ==