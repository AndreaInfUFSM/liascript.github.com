/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@webcomponents/custom-elements/custom-elements.min.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@webcomponents/custom-elements/custom-elements.min.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

(function(){
/*

 Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
 This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
 The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
 The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
 Code distributed by Google as part of the polymer project is also
 subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
'use strict';var aa=new Set("annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph".split(" "));function g(a){var b=aa.has(a);a=/^[a-z][.0-9_a-z]*-[\-.0-9_a-z]*$/.test(a);return!b&&a}function l(a){var b=a.isConnected;if(void 0!==b)return b;for(;a&&!(a.__CE_isImportDocument||a instanceof Document);)a=a.parentNode||(window.ShadowRoot&&a instanceof ShadowRoot?a.host:void 0);return!(!a||!(a.__CE_isImportDocument||a instanceof Document))}
function n(a,b){for(;b&&b!==a&&!b.nextSibling;)b=b.parentNode;return b&&b!==a?b.nextSibling:null}
function p(a,b,d){d=void 0===d?new Set:d;for(var c=a;c;){if(c.nodeType===Node.ELEMENT_NODE){var e=c;b(e);var f=e.localName;if("link"===f&&"import"===e.getAttribute("rel")){c=e.import;if(c instanceof Node&&!d.has(c))for(d.add(c),c=c.firstChild;c;c=c.nextSibling)p(c,b,d);c=n(a,e);continue}else if("template"===f){c=n(a,e);continue}if(e=e.__CE_shadowRoot)for(e=e.firstChild;e;e=e.nextSibling)p(e,b,d)}c=c.firstChild?c.firstChild:n(a,c)}}function r(a,b,d){a[b]=d};function u(){this.a=new Map;this.g=new Map;this.c=[];this.f=[];this.b=!1}function ba(a,b,d){a.a.set(b,d);a.g.set(d.constructorFunction,d)}function ca(a,b){a.b=!0;a.c.push(b)}function da(a,b){a.b=!0;a.f.push(b)}function v(a,b){a.b&&p(b,function(b){return w(a,b)})}function w(a,b){if(a.b&&!b.__CE_patched){b.__CE_patched=!0;for(var d=0;d<a.c.length;d++)a.c[d](b);for(d=0;d<a.f.length;d++)a.f[d](b)}}
function x(a,b){var d=[];p(b,function(b){return d.push(b)});for(b=0;b<d.length;b++){var c=d[b];1===c.__CE_state?a.connectedCallback(c):y(a,c)}}function z(a,b){var d=[];p(b,function(b){return d.push(b)});for(b=0;b<d.length;b++){var c=d[b];1===c.__CE_state&&a.disconnectedCallback(c)}}
function A(a,b,d){d=void 0===d?{}:d;var c=d.u||new Set,e=d.i||function(b){return y(a,b)},f=[];p(b,function(b){if("link"===b.localName&&"import"===b.getAttribute("rel")){var d=b.import;d instanceof Node&&(d.__CE_isImportDocument=!0,d.__CE_hasRegistry=!0);d&&"complete"===d.readyState?d.__CE_documentLoadHandled=!0:b.addEventListener("load",function(){var d=b.import;if(!d.__CE_documentLoadHandled){d.__CE_documentLoadHandled=!0;var f=new Set(c);f.delete(d);A(a,d,{u:f,i:e})}})}else f.push(b)},c);if(a.b)for(b=
0;b<f.length;b++)w(a,f[b]);for(b=0;b<f.length;b++)e(f[b])}
function y(a,b){if(void 0===b.__CE_state){var d=b.ownerDocument;if(d.defaultView||d.__CE_isImportDocument&&d.__CE_hasRegistry)if(d=a.a.get(b.localName)){d.constructionStack.push(b);var c=d.constructorFunction;try{try{if(new c!==b)throw Error("The custom element constructor did not produce the element being upgraded.");}finally{d.constructionStack.pop()}}catch(t){throw b.__CE_state=2,t;}b.__CE_state=1;b.__CE_definition=d;if(d.attributeChangedCallback)for(d=d.observedAttributes,c=0;c<d.length;c++){var e=
d[c],f=b.getAttribute(e);null!==f&&a.attributeChangedCallback(b,e,null,f,null)}l(b)&&a.connectedCallback(b)}}}u.prototype.connectedCallback=function(a){var b=a.__CE_definition;b.connectedCallback&&b.connectedCallback.call(a)};u.prototype.disconnectedCallback=function(a){var b=a.__CE_definition;b.disconnectedCallback&&b.disconnectedCallback.call(a)};
u.prototype.attributeChangedCallback=function(a,b,d,c,e){var f=a.__CE_definition;f.attributeChangedCallback&&-1<f.observedAttributes.indexOf(b)&&f.attributeChangedCallback.call(a,b,d,c,e)};function B(a){var b=document;this.c=a;this.a=b;this.b=void 0;A(this.c,this.a);"loading"===this.a.readyState&&(this.b=new MutationObserver(this.f.bind(this)),this.b.observe(this.a,{childList:!0,subtree:!0}))}function C(a){a.b&&a.b.disconnect()}B.prototype.f=function(a){var b=this.a.readyState;"interactive"!==b&&"complete"!==b||C(this);for(b=0;b<a.length;b++)for(var d=a[b].addedNodes,c=0;c<d.length;c++)A(this.c,d[c])};function ea(){var a=this;this.b=this.a=void 0;this.c=new Promise(function(b){a.b=b;a.a&&b(a.a)})}function D(a){if(a.a)throw Error("Already resolved.");a.a=void 0;a.b&&a.b(void 0)};function E(a){this.c=!1;this.a=a;this.j=new Map;this.f=function(b){return b()};this.b=!1;this.g=[];this.o=new B(a)}
E.prototype.l=function(a,b){var d=this;if(!(b instanceof Function))throw new TypeError("Custom element constructors must be functions.");if(!g(a))throw new SyntaxError("The element name '"+a+"' is not valid.");if(this.a.a.get(a))throw Error("A custom element with name '"+a+"' has already been defined.");if(this.c)throw Error("A custom element is already being defined.");this.c=!0;try{var c=function(b){var a=e[b];if(void 0!==a&&!(a instanceof Function))throw Error("The '"+b+"' callback must be a function.");
return a},e=b.prototype;if(!(e instanceof Object))throw new TypeError("The custom element constructor's prototype is not an object.");var f=c("connectedCallback");var t=c("disconnectedCallback");var k=c("adoptedCallback");var h=c("attributeChangedCallback");var m=b.observedAttributes||[]}catch(q){return}finally{this.c=!1}b={localName:a,constructorFunction:b,connectedCallback:f,disconnectedCallback:t,adoptedCallback:k,attributeChangedCallback:h,observedAttributes:m,constructionStack:[]};ba(this.a,
a,b);this.g.push(b);this.b||(this.b=!0,this.f(function(){return fa(d)}))};E.prototype.i=function(a){A(this.a,a)};
function fa(a){if(!1!==a.b){a.b=!1;for(var b=a.g,d=[],c=new Map,e=0;e<b.length;e++)c.set(b[e].localName,[]);A(a.a,document,{i:function(b){if(void 0===b.__CE_state){var e=b.localName,f=c.get(e);f?f.push(b):a.a.a.get(e)&&d.push(b)}}});for(e=0;e<d.length;e++)y(a.a,d[e]);for(;0<b.length;){var f=b.shift();e=f.localName;f=c.get(f.localName);for(var t=0;t<f.length;t++)y(a.a,f[t]);(e=a.j.get(e))&&D(e)}}}E.prototype.get=function(a){if(a=this.a.a.get(a))return a.constructorFunction};
E.prototype.m=function(a){if(!g(a))return Promise.reject(new SyntaxError("'"+a+"' is not a valid custom element name."));var b=this.j.get(a);if(b)return b.c;b=new ea;this.j.set(a,b);this.a.a.get(a)&&!this.g.some(function(b){return b.localName===a})&&D(b);return b.c};E.prototype.s=function(a){C(this.o);var b=this.f;this.f=function(d){return a(function(){return b(d)})}};window.CustomElementRegistry=E;E.prototype.define=E.prototype.l;E.prototype.upgrade=E.prototype.i;E.prototype.get=E.prototype.get;
E.prototype.whenDefined=E.prototype.m;E.prototype.polyfillWrapFlushCallback=E.prototype.s;var F=window.Document.prototype.createElement,G=window.Document.prototype.createElementNS,ha=window.Document.prototype.importNode,ia=window.Document.prototype.prepend,ja=window.Document.prototype.append,ka=window.DocumentFragment.prototype.prepend,la=window.DocumentFragment.prototype.append,H=window.Node.prototype.cloneNode,I=window.Node.prototype.appendChild,J=window.Node.prototype.insertBefore,K=window.Node.prototype.removeChild,L=window.Node.prototype.replaceChild,M=Object.getOwnPropertyDescriptor(window.Node.prototype,
"textContent"),N=window.Element.prototype.attachShadow,O=Object.getOwnPropertyDescriptor(window.Element.prototype,"innerHTML"),P=window.Element.prototype.getAttribute,Q=window.Element.prototype.setAttribute,R=window.Element.prototype.removeAttribute,S=window.Element.prototype.getAttributeNS,T=window.Element.prototype.setAttributeNS,U=window.Element.prototype.removeAttributeNS,ma=window.Element.prototype.insertAdjacentElement,na=window.Element.prototype.insertAdjacentHTML,oa=window.Element.prototype.prepend,
pa=window.Element.prototype.append,V=window.Element.prototype.before,qa=window.Element.prototype.after,ra=window.Element.prototype.replaceWith,sa=window.Element.prototype.remove,ta=window.HTMLElement,W=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,"innerHTML"),ua=window.HTMLElement.prototype.insertAdjacentElement,va=window.HTMLElement.prototype.insertAdjacentHTML;var wa=new function(){};function xa(){var a=X;window.HTMLElement=function(){function b(){var b=this.constructor,c=a.g.get(b);if(!c)throw Error("The custom element being constructed was not registered with `customElements`.");var e=c.constructionStack;if(0===e.length)return e=F.call(document,c.localName),Object.setPrototypeOf(e,b.prototype),e.__CE_state=1,e.__CE_definition=c,w(a,e),e;c=e.length-1;var f=e[c];if(f===wa)throw Error("The HTMLElement constructor was either called reentrantly for this constructor or called multiple times.");
e[c]=wa;Object.setPrototypeOf(f,b.prototype);w(a,f);return f}b.prototype=ta.prototype;Object.defineProperty(b.prototype,"constructor",{writable:!0,configurable:!0,enumerable:!1,value:b});return b}()};function Y(a,b,d){function c(b){return function(d){for(var e=[],c=0;c<arguments.length;++c)e[c]=arguments[c];c=[];for(var f=[],m=0;m<e.length;m++){var q=e[m];q instanceof Element&&l(q)&&f.push(q);if(q instanceof DocumentFragment)for(q=q.firstChild;q;q=q.nextSibling)c.push(q);else c.push(q)}b.apply(this,e);for(e=0;e<f.length;e++)z(a,f[e]);if(l(this))for(e=0;e<c.length;e++)f=c[e],f instanceof Element&&x(a,f)}}void 0!==d.h&&(b.prepend=c(d.h));void 0!==d.append&&(b.append=c(d.append))};function ya(){var a=X;r(Document.prototype,"createElement",function(b){if(this.__CE_hasRegistry){var d=a.a.get(b);if(d)return new d.constructorFunction}b=F.call(this,b);w(a,b);return b});r(Document.prototype,"importNode",function(b,d){b=ha.call(this,b,!!d);this.__CE_hasRegistry?A(a,b):v(a,b);return b});r(Document.prototype,"createElementNS",function(b,d){if(this.__CE_hasRegistry&&(null===b||"http://www.w3.org/1999/xhtml"===b)){var c=a.a.get(d);if(c)return new c.constructorFunction}b=G.call(this,b,
d);w(a,b);return b});Y(a,Document.prototype,{h:ia,append:ja})};function za(){function a(a,c){Object.defineProperty(a,"textContent",{enumerable:c.enumerable,configurable:!0,get:c.get,set:function(a){if(this.nodeType===Node.TEXT_NODE)c.set.call(this,a);else{var d=void 0;if(this.firstChild){var e=this.childNodes,k=e.length;if(0<k&&l(this)){d=Array(k);for(var h=0;h<k;h++)d[h]=e[h]}}c.set.call(this,a);if(d)for(a=0;a<d.length;a++)z(b,d[a])}}})}var b=X;r(Node.prototype,"insertBefore",function(a,c){if(a instanceof DocumentFragment){var e=Array.prototype.slice.apply(a.childNodes);
a=J.call(this,a,c);if(l(this))for(c=0;c<e.length;c++)x(b,e[c]);return a}e=l(a);c=J.call(this,a,c);e&&z(b,a);l(this)&&x(b,a);return c});r(Node.prototype,"appendChild",function(a){if(a instanceof DocumentFragment){var c=Array.prototype.slice.apply(a.childNodes);a=I.call(this,a);if(l(this))for(var e=0;e<c.length;e++)x(b,c[e]);return a}c=l(a);e=I.call(this,a);c&&z(b,a);l(this)&&x(b,a);return e});r(Node.prototype,"cloneNode",function(a){a=H.call(this,!!a);this.ownerDocument.__CE_hasRegistry?A(b,a):v(b,
a);return a});r(Node.prototype,"removeChild",function(a){var c=l(a),e=K.call(this,a);c&&z(b,a);return e});r(Node.prototype,"replaceChild",function(a,c){if(a instanceof DocumentFragment){var e=Array.prototype.slice.apply(a.childNodes);a=L.call(this,a,c);if(l(this))for(z(b,c),c=0;c<e.length;c++)x(b,e[c]);return a}e=l(a);var f=L.call(this,a,c),d=l(this);d&&z(b,c);e&&z(b,a);d&&x(b,a);return f});M&&M.get?a(Node.prototype,M):ca(b,function(b){a(b,{enumerable:!0,configurable:!0,get:function(){for(var a=[],
b=0;b<this.childNodes.length;b++){var f=this.childNodes[b];f.nodeType!==Node.COMMENT_NODE&&a.push(f.textContent)}return a.join("")},set:function(a){for(;this.firstChild;)K.call(this,this.firstChild);null!=a&&""!==a&&I.call(this,document.createTextNode(a))}})})};function Aa(a){function b(b){return function(e){for(var c=[],d=0;d<arguments.length;++d)c[d]=arguments[d];d=[];for(var k=[],h=0;h<c.length;h++){var m=c[h];m instanceof Element&&l(m)&&k.push(m);if(m instanceof DocumentFragment)for(m=m.firstChild;m;m=m.nextSibling)d.push(m);else d.push(m)}b.apply(this,c);for(c=0;c<k.length;c++)z(a,k[c]);if(l(this))for(c=0;c<d.length;c++)k=d[c],k instanceof Element&&x(a,k)}}var d=Element.prototype;void 0!==V&&(d.before=b(V));void 0!==V&&(d.after=b(qa));void 0!==ra&&
r(d,"replaceWith",function(b){for(var e=[],c=0;c<arguments.length;++c)e[c]=arguments[c];c=[];for(var d=[],k=0;k<e.length;k++){var h=e[k];h instanceof Element&&l(h)&&d.push(h);if(h instanceof DocumentFragment)for(h=h.firstChild;h;h=h.nextSibling)c.push(h);else c.push(h)}k=l(this);ra.apply(this,e);for(e=0;e<d.length;e++)z(a,d[e]);if(k)for(z(a,this),e=0;e<c.length;e++)d=c[e],d instanceof Element&&x(a,d)});void 0!==sa&&r(d,"remove",function(){var b=l(this);sa.call(this);b&&z(a,this)})};function Ba(){function a(a,b){Object.defineProperty(a,"innerHTML",{enumerable:b.enumerable,configurable:!0,get:b.get,set:function(a){var e=this,d=void 0;l(this)&&(d=[],p(this,function(a){a!==e&&d.push(a)}));b.set.call(this,a);if(d)for(var f=0;f<d.length;f++){var t=d[f];1===t.__CE_state&&c.disconnectedCallback(t)}this.ownerDocument.__CE_hasRegistry?A(c,this):v(c,this);return a}})}function b(a,b){r(a,"insertAdjacentElement",function(a,e){var d=l(e);a=b.call(this,a,e);d&&z(c,e);l(a)&&x(c,e);return a})}
function d(a,b){function e(a,b){for(var e=[];a!==b;a=a.nextSibling)e.push(a);for(b=0;b<e.length;b++)A(c,e[b])}r(a,"insertAdjacentHTML",function(a,c){a=a.toLowerCase();if("beforebegin"===a){var d=this.previousSibling;b.call(this,a,c);e(d||this.parentNode.firstChild,this)}else if("afterbegin"===a)d=this.firstChild,b.call(this,a,c),e(this.firstChild,d);else if("beforeend"===a)d=this.lastChild,b.call(this,a,c),e(d||this.firstChild,null);else if("afterend"===a)d=this.nextSibling,b.call(this,a,c),e(this.nextSibling,
d);else throw new SyntaxError("The value provided ("+String(a)+") is not one of 'beforebegin', 'afterbegin', 'beforeend', or 'afterend'.");})}var c=X;N&&r(Element.prototype,"attachShadow",function(a){a=N.call(this,a);var b=c;if(b.b&&!a.__CE_patched){a.__CE_patched=!0;for(var e=0;e<b.c.length;e++)b.c[e](a)}return this.__CE_shadowRoot=a});O&&O.get?a(Element.prototype,O):W&&W.get?a(HTMLElement.prototype,W):da(c,function(b){a(b,{enumerable:!0,configurable:!0,get:function(){return H.call(this,!0).innerHTML},
set:function(a){var b="template"===this.localName,c=b?this.content:this,e=G.call(document,this.namespaceURI,this.localName);for(e.innerHTML=a;0<c.childNodes.length;)K.call(c,c.childNodes[0]);for(a=b?e.content:e;0<a.childNodes.length;)I.call(c,a.childNodes[0])}})});r(Element.prototype,"setAttribute",function(a,b){if(1!==this.__CE_state)return Q.call(this,a,b);var e=P.call(this,a);Q.call(this,a,b);b=P.call(this,a);c.attributeChangedCallback(this,a,e,b,null)});r(Element.prototype,"setAttributeNS",function(a,
b,d){if(1!==this.__CE_state)return T.call(this,a,b,d);var e=S.call(this,a,b);T.call(this,a,b,d);d=S.call(this,a,b);c.attributeChangedCallback(this,b,e,d,a)});r(Element.prototype,"removeAttribute",function(a){if(1!==this.__CE_state)return R.call(this,a);var b=P.call(this,a);R.call(this,a);null!==b&&c.attributeChangedCallback(this,a,b,null,null)});r(Element.prototype,"removeAttributeNS",function(a,b){if(1!==this.__CE_state)return U.call(this,a,b);var d=S.call(this,a,b);U.call(this,a,b);var e=S.call(this,
a,b);d!==e&&c.attributeChangedCallback(this,b,d,e,a)});ua?b(HTMLElement.prototype,ua):ma?b(Element.prototype,ma):console.warn("Custom Elements: `Element#insertAdjacentElement` was not patched.");va?d(HTMLElement.prototype,va):na?d(Element.prototype,na):console.warn("Custom Elements: `Element#insertAdjacentHTML` was not patched.");Y(c,Element.prototype,{h:oa,append:pa});Aa(c)};var Z=window.customElements;if(!Z||Z.forcePolyfill||"function"!=typeof Z.define||"function"!=typeof Z.get){var X=new u;xa();ya();Y(X,DocumentFragment.prototype,{h:ka,append:la});za();Ba();document.__CE_hasRegistry=!0;var customElements=new E(X);Object.defineProperty(window,"customElements",{configurable:!0,enumerable:!0,value:customElements})};
}).call(self);

//# sourceMappingURL=custom-elements.min.js.map


/***/ }),

/***/ "./node_modules/dexie/dist/dexie.es.js":
/*!*********************************************!*\
  !*** ./node_modules/dexie/dist/dexie.es.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*
 * Dexie.js - a minimalistic wrapper for IndexedDB
 * ===============================================
 *
 * By David Fahlander, david.fahlander@gmail.com
 *
 * Version {version}, {date}
 *
 * http://dexie.org
 *
 * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/
 */
 
var keys = Object.keys;
var isArray = Array.isArray;
var _global = typeof self !== 'undefined' ? self :
    typeof window !== 'undefined' ? window :
        global;
function extend(obj, extension) {
    if (typeof extension !== 'object')
        return obj;
    keys(extension).forEach(function (key) {
        obj[key] = extension[key];
    });
    return obj;
}
var getProto = Object.getPrototypeOf;
var _hasOwn = {}.hasOwnProperty;
function hasOwn(obj, prop) {
    return _hasOwn.call(obj, prop);
}
function props(proto, extension) {
    if (typeof extension === 'function')
        extension = extension(getProto(proto));
    keys(extension).forEach(function (key) {
        setProp(proto, key, extension[key]);
    });
}
var defineProperty = Object.defineProperty;
function setProp(obj, prop, functionOrGetSet, options) {
    defineProperty(obj, prop, extend(functionOrGetSet && hasOwn(functionOrGetSet, "get") && typeof functionOrGetSet.get === 'function' ?
        { get: functionOrGetSet.get, set: functionOrGetSet.set, configurable: true } :
        { value: functionOrGetSet, configurable: true, writable: true }, options));
}
function derive(Child) {
    return {
        from: function (Parent) {
            Child.prototype = Object.create(Parent.prototype);
            setProp(Child.prototype, "constructor", Child);
            return {
                extend: props.bind(null, Child.prototype)
            };
        }
    };
}
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
function getPropertyDescriptor(obj, prop) {
    var pd = getOwnPropertyDescriptor(obj, prop), proto;
    return pd || (proto = getProto(obj)) && getPropertyDescriptor(proto, prop);
}
var _slice = [].slice;
function slice(args, start, end) {
    return _slice.call(args, start, end);
}
function override(origFunc, overridedFactory) {
    return overridedFactory(origFunc);
}
function assert(b) {
    if (!b)
        throw new Error("Assertion Failed");
}
function asap(fn) {
    if (_global.setImmediate)
        setImmediate(fn);
    else
        setTimeout(fn, 0);
}

/** Generate an object (hash map) based on given array.
 * @param extractor Function taking an array item and its index and returning an array of 2 items ([key, value]) to
 *        instert on the resulting object for each item in the array. If this function returns a falsy value, the
 *        current item wont affect the resulting object.
 */
function arrayToObject(array, extractor) {
    return array.reduce(function (result, item, i) {
        var nameAndValue = extractor(item, i);
        if (nameAndValue)
            result[nameAndValue[0]] = nameAndValue[1];
        return result;
    }, {});
}
function trycatcher(fn, reject) {
    return function () {
        try {
            fn.apply(this, arguments);
        }
        catch (e) {
            reject(e);
        }
    };
}
function tryCatch(fn, onerror, args) {
    try {
        fn.apply(null, args);
    }
    catch (ex) {
        onerror && onerror(ex);
    }
}
function getByKeyPath(obj, keyPath) {
    // http://www.w3.org/TR/IndexedDB/#steps-for-extracting-a-key-from-a-value-using-a-key-path
    if (hasOwn(obj, keyPath))
        return obj[keyPath]; // This line is moved from last to first for optimization purpose.
    if (!keyPath)
        return obj;
    if (typeof keyPath !== 'string') {
        var rv = [];
        for (var i = 0, l = keyPath.length; i < l; ++i) {
            var val = getByKeyPath(obj, keyPath[i]);
            rv.push(val);
        }
        return rv;
    }
    var period = keyPath.indexOf('.');
    if (period !== -1) {
        var innerObj = obj[keyPath.substr(0, period)];
        return innerObj === undefined ? undefined : getByKeyPath(innerObj, keyPath.substr(period + 1));
    }
    return undefined;
}
function setByKeyPath(obj, keyPath, value) {
    if (!obj || keyPath === undefined)
        return;
    if ('isFrozen' in Object && Object.isFrozen(obj))
        return;
    if (typeof keyPath !== 'string' && 'length' in keyPath) {
        assert(typeof value !== 'string' && 'length' in value);
        for (var i = 0, l = keyPath.length; i < l; ++i) {
            setByKeyPath(obj, keyPath[i], value[i]);
        }
    }
    else {
        var period = keyPath.indexOf('.');
        if (period !== -1) {
            var currentKeyPath = keyPath.substr(0, period);
            var remainingKeyPath = keyPath.substr(period + 1);
            if (remainingKeyPath === "")
                if (value === undefined)
                    delete obj[currentKeyPath];
                else
                    obj[currentKeyPath] = value;
            else {
                var innerObj = obj[currentKeyPath];
                if (!innerObj)
                    innerObj = (obj[currentKeyPath] = {});
                setByKeyPath(innerObj, remainingKeyPath, value);
            }
        }
        else {
            if (value === undefined)
                delete obj[keyPath];
            else
                obj[keyPath] = value;
        }
    }
}
function delByKeyPath(obj, keyPath) {
    if (typeof keyPath === 'string')
        setByKeyPath(obj, keyPath, undefined);
    else if ('length' in keyPath)
        [].map.call(keyPath, function (kp) {
            setByKeyPath(obj, kp, undefined);
        });
}
function shallowClone(obj) {
    var rv = {};
    for (var m in obj) {
        if (hasOwn(obj, m))
            rv[m] = obj[m];
    }
    return rv;
}
var concat = [].concat;
function flatten(a) {
    return concat.apply([], a);
}
//https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm
var intrinsicTypes = "Boolean,String,Date,RegExp,Blob,File,FileList,ArrayBuffer,DataView,Uint8ClampedArray,ImageData,Map,Set"
    .split(',').concat(flatten([8, 16, 32, 64].map(function (num) { return ["Int", "Uint", "Float"].map(function (t) { return t + num + "Array"; }); }))).filter(function (t) { return _global[t]; }).map(function (t) { return _global[t]; });
function deepClone(any) {
    if (!any || typeof any !== 'object')
        return any;
    var rv;
    if (isArray(any)) {
        rv = [];
        for (var i = 0, l = any.length; i < l; ++i) {
            rv.push(deepClone(any[i]));
        }
    }
    else if (intrinsicTypes.indexOf(any.constructor) >= 0) {
        rv = any;
    }
    else {
        rv = any.constructor ? Object.create(any.constructor.prototype) : {};
        for (var prop in any) {
            if (hasOwn(any, prop)) {
                rv[prop] = deepClone(any[prop]);
            }
        }
    }
    return rv;
}
function getObjectDiff(a, b, rv, prfx) {
    // Compares objects a and b and produces a diff object.
    rv = rv || {};
    prfx = prfx || '';
    keys(a).forEach(function (prop) {
        if (!hasOwn(b, prop))
            rv[prfx + prop] = undefined; // Property removed
        else {
            var ap = a[prop], bp = b[prop];
            if (typeof ap === 'object' && typeof bp === 'object' &&
                ap && bp &&
                // Now compare constructors are same (not equal because wont work in Safari)
                ('' + ap.constructor) === ('' + bp.constructor))
                // Same type of object but its properties may have changed
                getObjectDiff(ap, bp, rv, prfx + prop + ".");
            else if (ap !== bp)
                rv[prfx + prop] = b[prop]; // Primitive value changed
        }
    });
    keys(b).forEach(function (prop) {
        if (!hasOwn(a, prop)) {
            rv[prfx + prop] = b[prop]; // Property added
        }
    });
    return rv;
}
// If first argument is iterable or array-like, return it as an array
var iteratorSymbol = typeof Symbol !== 'undefined' && Symbol.iterator;
var getIteratorOf = iteratorSymbol ? function (x) {
    var i;
    return x != null && (i = x[iteratorSymbol]) && i.apply(x);
} : function () { return null; };
var NO_CHAR_ARRAY = {};
// Takes one or several arguments and returns an array based on the following criteras:
// * If several arguments provided, return arguments converted to an array in a way that
//   still allows javascript engine to optimize the code.
// * If single argument is an array, return a clone of it.
// * If this-pointer equals NO_CHAR_ARRAY, don't accept strings as valid iterables as a special
//   case to the two bullets below.
// * If single argument is an iterable, convert it to an array and return the resulting array.
// * If single argument is array-like (has length of type number), convert it to an array.
function getArrayOf(arrayLike) {
    var i, a, x, it;
    if (arguments.length === 1) {
        if (isArray(arrayLike))
            return arrayLike.slice();
        if (this === NO_CHAR_ARRAY && typeof arrayLike === 'string')
            return [arrayLike];
        if ((it = getIteratorOf(arrayLike))) {
            a = [];
            while ((x = it.next()), !x.done)
                a.push(x.value);
            return a;
        }
        if (arrayLike == null)
            return [arrayLike];
        i = arrayLike.length;
        if (typeof i === 'number') {
            a = new Array(i);
            while (i--)
                a[i] = arrayLike[i];
            return a;
        }
        return [arrayLike];
    }
    i = arguments.length;
    a = new Array(i);
    while (i--)
        a[i] = arguments[i];
    return a;
}

// By default, debug will be true only if platform is a web platform and its page is served from localhost.
// When debug = true, error's stacks will contain asyncronic long stacks.
var debug = typeof location !== 'undefined' &&
    // By default, use debug mode if served from localhost.
    /^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);
function setDebug(value, filter) {
    debug = value;
    libraryFilter = filter;
}
var libraryFilter = function () { return true; };
var NEEDS_THROW_FOR_STACK = !new Error("").stack;
function getErrorWithStack() {
    "use strict";
    if (NEEDS_THROW_FOR_STACK)
        try {
            // Doing something naughty in strict mode here to trigger a specific error
            // that can be explicitely ignored in debugger's exception settings.
            // If we'd just throw new Error() here, IE's debugger's exception settings
            // will just consider it as "exception thrown by javascript code" which is
            // something you wouldn't want it to ignore.
            getErrorWithStack.arguments;
            throw new Error(); // Fallback if above line don't throw.
        }
        catch (e) {
            return e;
        }
    return new Error();
}
function prettyStack(exception, numIgnoredFrames) {
    var stack = exception.stack;
    if (!stack)
        return "";
    numIgnoredFrames = (numIgnoredFrames || 0);
    if (stack.indexOf(exception.name) === 0)
        numIgnoredFrames += (exception.name + exception.message).split('\n').length;
    return stack.split('\n')
        .slice(numIgnoredFrames)
        .filter(libraryFilter)
        .map(function (frame) { return "\n" + frame; })
        .join('');
}
function deprecated(what, fn) {
    return function () {
        console.warn(what + " is deprecated. See https://github.com/dfahlander/Dexie.js/wiki/Deprecations. " + prettyStack(getErrorWithStack(), 1));
        return fn.apply(this, arguments);
    };
}

var dexieErrorNames = [
    'Modify',
    'Bulk',
    'OpenFailed',
    'VersionChange',
    'Schema',
    'Upgrade',
    'InvalidTable',
    'MissingAPI',
    'NoSuchDatabase',
    'InvalidArgument',
    'SubTransaction',
    'Unsupported',
    'Internal',
    'DatabaseClosed',
    'PrematureCommit',
    'ForeignAwait'
];
var idbDomErrorNames = [
    'Unknown',
    'Constraint',
    'Data',
    'TransactionInactive',
    'ReadOnly',
    'Version',
    'NotFound',
    'InvalidState',
    'InvalidAccess',
    'Abort',
    'Timeout',
    'QuotaExceeded',
    'Syntax',
    'DataClone'
];
var errorList = dexieErrorNames.concat(idbDomErrorNames);
var defaultTexts = {
    VersionChanged: "Database version changed by other database connection",
    DatabaseClosed: "Database has been closed",
    Abort: "Transaction aborted",
    TransactionInactive: "Transaction has already completed or failed"
};
//
// DexieError - base class of all out exceptions.
//
function DexieError(name, msg) {
    // Reason we don't use ES6 classes is because:
    // 1. It bloats transpiled code and increases size of minified code.
    // 2. It doesn't give us much in this case.
    // 3. It would require sub classes to call super(), which
    //    is not needed when deriving from Error.
    this._e = getErrorWithStack();
    this.name = name;
    this.message = msg;
}
derive(DexieError).from(Error).extend({
    stack: {
        get: function () {
            return this._stack ||
                (this._stack = this.name + ": " + this.message + prettyStack(this._e, 2));
        }
    },
    toString: function () { return this.name + ": " + this.message; }
});
function getMultiErrorMessage(msg, failures) {
    return msg + ". Errors: " + failures
        .map(function (f) { return f.toString(); })
        .filter(function (v, i, s) { return s.indexOf(v) === i; }) // Only unique error strings
        .join('\n');
}
//
// ModifyError - thrown in Collection.modify()
// Specific constructor because it contains members failures and failedKeys.
//
function ModifyError(msg, failures, successCount, failedKeys) {
    this._e = getErrorWithStack();
    this.failures = failures;
    this.failedKeys = failedKeys;
    this.successCount = successCount;
}
derive(ModifyError).from(DexieError);
function BulkError(msg, failures) {
    this._e = getErrorWithStack();
    this.name = "BulkError";
    this.failures = failures;
    this.message = getMultiErrorMessage(msg, failures);
}
derive(BulkError).from(DexieError);
//
//
// Dynamically generate error names and exception classes based
// on the names in errorList.
//
//
// Map of {ErrorName -> ErrorName + "Error"}
var errnames = errorList.reduce(function (obj, name) { return (obj[name] = name + "Error", obj); }, {});
// Need an alias for DexieError because we're gonna create subclasses with the same name.
var BaseException = DexieError;
// Map of {ErrorName -> exception constructor}
var exceptions = errorList.reduce(function (obj, name) {
    // Let the name be "DexieError" because this name may
    // be shown in call stack and when debugging. DexieError is
    // the most true name because it derives from DexieError,
    // and we cannot change Function.name programatically without
    // dynamically create a Function object, which would be considered
    // 'eval-evil'.
    var fullName = name + "Error";
    function DexieError(msgOrInner, inner) {
        this._e = getErrorWithStack();
        this.name = fullName;
        if (!msgOrInner) {
            this.message = defaultTexts[name] || fullName;
            this.inner = null;
        }
        else if (typeof msgOrInner === 'string') {
            this.message = msgOrInner;
            this.inner = inner || null;
        }
        else if (typeof msgOrInner === 'object') {
            this.message = msgOrInner.name + " " + msgOrInner.message;
            this.inner = msgOrInner;
        }
    }
    derive(DexieError).from(BaseException);
    obj[name] = DexieError;
    return obj;
}, {});
// Use ECMASCRIPT standard exceptions where applicable:
exceptions.Syntax = SyntaxError;
exceptions.Type = TypeError;
exceptions.Range = RangeError;
var exceptionMap = idbDomErrorNames.reduce(function (obj, name) {
    obj[name + "Error"] = exceptions[name];
    return obj;
}, {});
function mapError(domError, message) {
    if (!domError || domError instanceof DexieError || domError instanceof TypeError || domError instanceof SyntaxError || !domError.name || !exceptionMap[domError.name])
        return domError;
    var rv = new exceptionMap[domError.name](message || domError.message, domError);
    if ("stack" in domError) {
        // Derive stack from inner exception if it has a stack
        setProp(rv, "stack", { get: function () {
                return this.inner.stack;
            } });
    }
    return rv;
}
var fullNameExceptions = errorList.reduce(function (obj, name) {
    if (["Syntax", "Type", "Range"].indexOf(name) === -1)
        obj[name + "Error"] = exceptions[name];
    return obj;
}, {});
fullNameExceptions.ModifyError = ModifyError;
fullNameExceptions.DexieError = DexieError;
fullNameExceptions.BulkError = BulkError;

function nop() { }
function mirror(val) { return val; }
function pureFunctionChain(f1, f2) {
    // Enables chained events that takes ONE argument and returns it to the next function in chain.
    // This pattern is used in the hook("reading") event.
    if (f1 == null || f1 === mirror)
        return f2;
    return function (val) {
        return f2(f1(val));
    };
}
function callBoth(on1, on2) {
    return function () {
        on1.apply(this, arguments);
        on2.apply(this, arguments);
    };
}
function hookCreatingChain(f1, f2) {
    // Enables chained events that takes several arguments and may modify first argument by making a modification and then returning the same instance.
    // This pattern is used in the hook("creating") event.
    if (f1 === nop)
        return f2;
    return function () {
        var res = f1.apply(this, arguments);
        if (res !== undefined)
            arguments[0] = res;
        var onsuccess = this.onsuccess, // In case event listener has set this.onsuccess
        onerror = this.onerror; // In case event listener has set this.onerror
        this.onsuccess = null;
        this.onerror = null;
        var res2 = f2.apply(this, arguments);
        if (onsuccess)
            this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
        if (onerror)
            this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
        return res2 !== undefined ? res2 : res;
    };
}
function hookDeletingChain(f1, f2) {
    if (f1 === nop)
        return f2;
    return function () {
        f1.apply(this, arguments);
        var onsuccess = this.onsuccess, // In case event listener has set this.onsuccess
        onerror = this.onerror; // In case event listener has set this.onerror
        this.onsuccess = this.onerror = null;
        f2.apply(this, arguments);
        if (onsuccess)
            this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
        if (onerror)
            this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
    };
}
function hookUpdatingChain(f1, f2) {
    if (f1 === nop)
        return f2;
    return function (modifications) {
        var res = f1.apply(this, arguments);
        extend(modifications, res); // If f1 returns new modifications, extend caller's modifications with the result before calling next in chain.
        var onsuccess = this.onsuccess, // In case event listener has set this.onsuccess
        onerror = this.onerror; // In case event listener has set this.onerror
        this.onsuccess = null;
        this.onerror = null;
        var res2 = f2.apply(this, arguments);
        if (onsuccess)
            this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
        if (onerror)
            this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
        return res === undefined ?
            (res2 === undefined ? undefined : res2) :
            (extend(res, res2));
    };
}
function reverseStoppableEventChain(f1, f2) {
    if (f1 === nop)
        return f2;
    return function () {
        if (f2.apply(this, arguments) === false)
            return false;
        return f1.apply(this, arguments);
    };
}

function promisableChain(f1, f2) {
    if (f1 === nop)
        return f2;
    return function () {
        var res = f1.apply(this, arguments);
        if (res && typeof res.then === 'function') {
            var thiz = this, i = arguments.length, args = new Array(i);
            while (i--)
                args[i] = arguments[i];
            return res.then(function () {
                return f2.apply(thiz, args);
            });
        }
        return f2.apply(this, arguments);
    };
}

/*
 * Copyright (c) 2014-2017 David Fahlander
 * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/LICENSE-2.0
 */
//
// Promise and Zone (PSD) for Dexie library
//
// I started out writing this Promise class by copying promise-light (https://github.com/taylorhakes/promise-light) by
// https://github.com/taylorhakes - an A+ and ECMASCRIPT 6 compliant Promise implementation.
//
// In previous versions this was fixed by not calling setTimeout when knowing that the resolve() or reject() came from another
// tick. In Dexie v1.4.0, I've rewritten the Promise class entirely. Just some fragments of promise-light is left. I use
// another strategy now that simplifies everything a lot: to always execute callbacks in a new micro-task, but have an own micro-task
// engine that is indexedDB compliant across all browsers.
// Promise class has also been optimized a lot with inspiration from bluebird - to avoid closures as much as possible.
// Also with inspiration from bluebird, asyncronic stacks in debug mode.
//
// Specific non-standard features of this Promise class:
// * Custom zone support (a.k.a. PSD) with ability to keep zones also when using native promises as well as
//   native async / await.
// * Promise.follow() method built upon the custom zone engine, that allows user to track all promises created from current stack frame
//   and below + all promises that those promises creates or awaits.
// * Detect any unhandled promise in a PSD-scope (PSD.onunhandled). 
//
// David Fahlander, https://github.com/dfahlander
//
// Just a pointer that only this module knows about.
// Used in Promise constructor to emulate a private constructor.
var INTERNAL = {};
// Async stacks (long stacks) must not grow infinitely.
var LONG_STACKS_CLIP_LIMIT = 100;
var MAX_LONG_STACKS = 20;
var ZONE_ECHO_LIMIT = 7;
var nativePromiseInstanceAndProto = (function () {
    try {
        // Be able to patch native async functions
        return new Function("let F=async ()=>{},p=F();return [p,Object.getPrototypeOf(p),Promise.resolve(),F.constructor];")();
    }
    catch (e) {
        var P = _global.Promise;
        return P ?
            [P.resolve(), P.prototype, P.resolve()] :
            [];
    }
})();
var resolvedNativePromise = nativePromiseInstanceAndProto[0];
var nativePromiseProto = nativePromiseInstanceAndProto[1];
var resolvedGlobalPromise = nativePromiseInstanceAndProto[2];
var nativePromiseThen = nativePromiseProto && nativePromiseProto.then;
var NativePromise = resolvedNativePromise && resolvedNativePromise.constructor;
var AsyncFunction = nativePromiseInstanceAndProto[3];
var patchGlobalPromise = !!resolvedGlobalPromise;
var stack_being_generated = false;
/* The default function used only for the very first promise in a promise chain.
   As soon as then promise is resolved or rejected, all next tasks will be executed in micro ticks
   emulated in this module. For indexedDB compatibility, this means that every method needs to
   execute at least one promise before doing an indexedDB operation. Dexie will always call
   db.ready().then() for every operation to make sure the indexedDB event is started in an
   indexedDB-compatible emulated micro task loop.
*/
var schedulePhysicalTick = resolvedGlobalPromise ?
    function () { resolvedGlobalPromise.then(physicalTick); }
    :
        _global.setImmediate ?
            // setImmediate supported. Those modern platforms also supports Function.bind().
            setImmediate.bind(null, physicalTick) :
            _global.MutationObserver ?
                // MutationObserver supported
                function () {
                    var hiddenDiv = document.createElement("div");
                    (new MutationObserver(function () {
                        physicalTick();
                        hiddenDiv = null;
                    })).observe(hiddenDiv, { attributes: true });
                    hiddenDiv.setAttribute('i', '1');
                } :
                // No support for setImmediate or MutationObserver. No worry, setTimeout is only called
                // once time. Every tick that follows will be our emulated micro tick.
                // Could have uses setTimeout.bind(null, 0, physicalTick) if it wasnt for that FF13 and below has a bug 
                function () { setTimeout(physicalTick, 0); };
// Configurable through Promise.scheduler.
// Don't export because it would be unsafe to let unknown
// code call it unless they do try..catch within their callback.
// This function can be retrieved through getter of Promise.scheduler though,
// but users must not do Promise.scheduler = myFuncThatThrowsException
var asap$1 = function (callback, args) {
    microtickQueue.push([callback, args]);
    if (needsNewPhysicalTick) {
        schedulePhysicalTick();
        needsNewPhysicalTick = false;
    }
};
var isOutsideMicroTick = true;
var needsNewPhysicalTick = true;
var unhandledErrors = [];
var rejectingErrors = [];
var currentFulfiller = null;
var rejectionMapper = mirror; // Remove in next major when removing error mapping of DOMErrors and DOMExceptions
var globalPSD = {
    id: 'global',
    global: true,
    ref: 0,
    unhandleds: [],
    onunhandled: globalError,
    pgp: false,
    env: {},
    finalize: function () {
        this.unhandleds.forEach(function (uh) {
            try {
                globalError(uh[0], uh[1]);
            }
            catch (e) { }
        });
    }
};
var PSD = globalPSD;
var microtickQueue = []; // Callbacks to call in this or next physical tick.
var numScheduledCalls = 0; // Number of listener-calls left to do in this physical tick.
var tickFinalizers = []; // Finalizers to call when there are no more async calls scheduled within current physical tick.
function Promise(fn) {
    if (typeof this !== 'object')
        throw new TypeError('Promises must be constructed via new');
    this._listeners = [];
    this.onuncatched = nop; // Deprecate in next major. Not needed. Better to use global error handler.
    // A library may set `promise._lib = true;` after promise is created to make resolve() or reject()
    // execute the microtask engine implicitely within the call to resolve() or reject().
    // To remain A+ compliant, a library must only set `_lib=true` if it can guarantee that the stack
    // only contains library code when calling resolve() or reject().
    // RULE OF THUMB: ONLY set _lib = true for promises explicitely resolving/rejecting directly from
    // global scope (event handler, timer etc)!
    this._lib = false;
    // Current async scope
    var psd = (this._PSD = PSD);
    if (debug) {
        this._stackHolder = getErrorWithStack();
        this._prev = null;
        this._numPrev = 0; // Number of previous promises (for long stacks)
    }
    if (typeof fn !== 'function') {
        if (fn !== INTERNAL)
            throw new TypeError('Not a function');
        // Private constructor (INTERNAL, state, value).
        // Used internally by Promise.resolve() and Promise.reject().
        this._state = arguments[1];
        this._value = arguments[2];
        if (this._state === false)
            handleRejection(this, this._value); // Map error, set stack and addPossiblyUnhandledError().
        return;
    }
    this._state = null; // null (=pending), false (=rejected) or true (=resolved)
    this._value = null; // error or result
    ++psd.ref; // Refcounting current scope
    executePromiseTask(this, fn);
}
// Prepare a property descriptor to put onto Promise.prototype.then
var thenProp = {
    get: function () {
        var psd = PSD, microTaskId = totalEchoes;
        function then(onFulfilled, onRejected) {
            var _this = this;
            var possibleAwait = !psd.global && (psd !== PSD || microTaskId !== totalEchoes);
            if (possibleAwait)
                decrementExpectedAwaits();
            var rv = new Promise(function (resolve, reject) {
                propagateToListener(_this, new Listener(nativeAwaitCompatibleWrap(onFulfilled, psd, possibleAwait), nativeAwaitCompatibleWrap(onRejected, psd, possibleAwait), resolve, reject, psd));
            });
            debug && linkToPreviousPromise(rv, this);
            return rv;
        }
        then.prototype = INTERNAL; // For idempotense, see setter below.
        return then;
    },
    // Be idempotent and allow another framework (such as zone.js or another instance of a Dexie.Promise module) to replace Promise.prototype.then
    // and when that framework wants to restore the original property, we must identify that and restore the original property descriptor.
    set: function (value) {
        setProp(this, 'then', value && value.prototype === INTERNAL ?
            thenProp : // Restore to original property descriptor.
            {
                get: function () {
                    return value; // Getter returning provided value (behaves like value is just changed)
                },
                set: thenProp.set // Keep a setter that is prepared to restore original.
            });
    }
};
props(Promise.prototype, {
    then: thenProp,
    _then: function (onFulfilled, onRejected) {
        // A little tinier version of then() that don't have to create a resulting promise.
        propagateToListener(this, new Listener(null, null, onFulfilled, onRejected, PSD));
    },
    catch: function (onRejected) {
        if (arguments.length === 1)
            return this.then(null, onRejected);
        // First argument is the Error type to catch
        var type = arguments[0], handler = arguments[1];
        return typeof type === 'function' ? this.then(null, function (err) {
            // Catching errors by its constructor type (similar to java / c++ / c#)
            // Sample: promise.catch(TypeError, function (e) { ... });
            return err instanceof type ? handler(err) : PromiseReject(err);
        })
            : this.then(null, function (err) {
                // Catching errors by the error.name property. Makes sense for indexedDB where error type
                // is always DOMError but where e.name tells the actual error type.
                // Sample: promise.catch('ConstraintError', function (e) { ... });
                return err && err.name === type ? handler(err) : PromiseReject(err);
            });
    },
    finally: function (onFinally) {
        return this.then(function (value) {
            onFinally();
            return value;
        }, function (err) {
            onFinally();
            return PromiseReject(err);
        });
    },
    stack: {
        get: function () {
            if (this._stack)
                return this._stack;
            try {
                stack_being_generated = true;
                var stacks = getStack(this, [], MAX_LONG_STACKS);
                var stack = stacks.join("\nFrom previous: ");
                if (this._state !== null)
                    this._stack = stack; // Stack may be updated on reject.
                return stack;
            }
            finally {
                stack_being_generated = false;
            }
        }
    },
    timeout: function (ms, msg) {
        var _this = this;
        return ms < Infinity ?
            new Promise(function (resolve, reject) {
                var handle = setTimeout(function () { return reject(new exceptions.Timeout(msg)); }, ms);
                _this.then(resolve, reject).finally(clearTimeout.bind(null, handle));
            }) : this;
    }
});
if (typeof Symbol !== 'undefined' && Symbol.toStringTag)
    setProp(Promise.prototype, Symbol.toStringTag, 'Promise');
// Now that Promise.prototype is defined, we have all it takes to set globalPSD.env.
// Environment globals snapshotted on leaving global zone
globalPSD.env = snapShot();
function Listener(onFulfilled, onRejected, resolve, reject, zone) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.resolve = resolve;
    this.reject = reject;
    this.psd = zone;
}
// Promise Static Properties
props(Promise, {
    all: function () {
        var values = getArrayOf.apply(null, arguments) // Supports iterables, implicit arguments and array-like.
            .map(onPossibleParallellAsync); // Handle parallell async/awaits 
        return new Promise(function (resolve, reject) {
            if (values.length === 0)
                resolve([]);
            var remaining = values.length;
            values.forEach(function (a, i) { return Promise.resolve(a).then(function (x) {
                values[i] = x;
                if (!--remaining)
                    resolve(values);
            }, reject); });
        });
    },
    resolve: function (value) {
        if (value instanceof Promise)
            return value;
        if (value && typeof value.then === 'function')
            return new Promise(function (resolve, reject) {
                value.then(resolve, reject);
            });
        var rv = new Promise(INTERNAL, true, value);
        linkToPreviousPromise(rv, currentFulfiller);
        return rv;
    },
    reject: PromiseReject,
    race: function () {
        var values = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
        return new Promise(function (resolve, reject) {
            values.map(function (value) { return Promise.resolve(value).then(resolve, reject); });
        });
    },
    PSD: {
        get: function () { return PSD; },
        set: function (value) { return PSD = value; }
    },
    //totalEchoes: {get: ()=>totalEchoes},
    //task: {get: ()=>task},
    newPSD: newScope,
    usePSD: usePSD,
    scheduler: {
        get: function () { return asap$1; },
        set: function (value) { asap$1 = value; }
    },
    rejectionMapper: {
        get: function () { return rejectionMapper; },
        set: function (value) { rejectionMapper = value; } // Map reject failures
    },
    follow: function (fn, zoneProps) {
        return new Promise(function (resolve, reject) {
            return newScope(function (resolve, reject) {
                var psd = PSD;
                psd.unhandleds = []; // For unhandled standard- or 3rd party Promises. Checked at psd.finalize()
                psd.onunhandled = reject; // Triggered directly on unhandled promises of this library.
                psd.finalize = callBoth(function () {
                    var _this = this;
                    // Unhandled standard or 3rd part promises are put in PSD.unhandleds and
                    // examined upon scope completion while unhandled rejections in this Promise
                    // will trigger directly through psd.onunhandled
                    run_at_end_of_this_or_next_physical_tick(function () {
                        _this.unhandleds.length === 0 ? resolve() : reject(_this.unhandleds[0]);
                    });
                }, psd.finalize);
                fn();
            }, zoneProps, resolve, reject);
        });
    }
});
/**
* Take a potentially misbehaving resolver function and make sure
* onFulfilled and onRejected are only called once.
*
* Makes no guarantees about asynchrony.
*/
function executePromiseTask(promise, fn) {
    // Promise Resolution Procedure:
    // https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
    try {
        fn(function (value) {
            if (promise._state !== null)
                return; // Already settled
            if (value === promise)
                throw new TypeError('A promise cannot be resolved with itself.');
            var shouldExecuteTick = promise._lib && beginMicroTickScope();
            if (value && typeof value.then === 'function') {
                executePromiseTask(promise, function (resolve, reject) {
                    value instanceof Promise ?
                        value._then(resolve, reject) :
                        value.then(resolve, reject);
                });
            }
            else {
                promise._state = true;
                promise._value = value;
                propagateAllListeners(promise);
            }
            if (shouldExecuteTick)
                endMicroTickScope();
        }, handleRejection.bind(null, promise)); // If Function.bind is not supported. Exception is handled in catch below
    }
    catch (ex) {
        handleRejection(promise, ex);
    }
}
function handleRejection(promise, reason) {
    rejectingErrors.push(reason);
    if (promise._state !== null)
        return;
    var shouldExecuteTick = promise._lib && beginMicroTickScope();
    reason = rejectionMapper(reason);
    promise._state = false;
    promise._value = reason;
    debug && reason !== null && typeof reason === 'object' && !reason._promise && tryCatch(function () {
        var origProp = getPropertyDescriptor(reason, "stack");
        reason._promise = promise;
        setProp(reason, "stack", {
            get: function () {
                return stack_being_generated ?
                    origProp && (origProp.get ?
                        origProp.get.apply(reason) :
                        origProp.value) :
                    promise.stack;
            }
        });
    });
    // Add the failure to a list of possibly uncaught errors
    addPossiblyUnhandledError(promise);
    propagateAllListeners(promise);
    if (shouldExecuteTick)
        endMicroTickScope();
}
function propagateAllListeners(promise) {
    //debug && linkToPreviousPromise(promise);
    var listeners = promise._listeners;
    promise._listeners = [];
    for (var i = 0, len = listeners.length; i < len; ++i) {
        propagateToListener(promise, listeners[i]);
    }
    var psd = promise._PSD;
    --psd.ref || psd.finalize(); // if psd.ref reaches zero, call psd.finalize();
    if (numScheduledCalls === 0) {
        // If numScheduledCalls is 0, it means that our stack is not in a callback of a scheduled call,
        // and that no deferreds where listening to this rejection or success.
        // Since there is a risk that our stack can contain application code that may
        // do stuff after this code is finished that may generate new calls, we cannot
        // call finalizers here.
        ++numScheduledCalls;
        asap$1(function () {
            if (--numScheduledCalls === 0)
                finalizePhysicalTick(); // Will detect unhandled errors
        }, []);
    }
}
function propagateToListener(promise, listener) {
    if (promise._state === null) {
        promise._listeners.push(listener);
        return;
    }
    var cb = promise._state ? listener.onFulfilled : listener.onRejected;
    if (cb === null) {
        // This Listener doesnt have a listener for the event being triggered (onFulfilled or onReject) so lets forward the event to any eventual listeners on the Promise instance returned by then() or catch()
        return (promise._state ? listener.resolve : listener.reject)(promise._value);
    }
    ++listener.psd.ref;
    ++numScheduledCalls;
    asap$1(callListener, [cb, promise, listener]);
}
function callListener(cb, promise, listener) {
    try {
        // Set static variable currentFulfiller to the promise that is being fullfilled,
        // so that we connect the chain of promises (for long stacks support)
        currentFulfiller = promise;
        // Call callback and resolve our listener with it's return value.
        var ret, value = promise._value;
        if (promise._state) {
            // cb is onResolved
            ret = cb(value);
        }
        else {
            // cb is onRejected
            if (rejectingErrors.length)
                rejectingErrors = [];
            ret = cb(value);
            if (rejectingErrors.indexOf(value) === -1)
                markErrorAsHandled(promise); // Callback didnt do Promise.reject(err) nor reject(err) onto another promise.
        }
        listener.resolve(ret);
    }
    catch (e) {
        // Exception thrown in callback. Reject our listener.
        listener.reject(e);
    }
    finally {
        // Restore env and currentFulfiller.
        currentFulfiller = null;
        if (--numScheduledCalls === 0)
            finalizePhysicalTick();
        --listener.psd.ref || listener.psd.finalize();
    }
}
function getStack(promise, stacks, limit) {
    if (stacks.length === limit)
        return stacks;
    var stack = "";
    if (promise._state === false) {
        var failure = promise._value, errorName, message;
        if (failure != null) {
            errorName = failure.name || "Error";
            message = failure.message || failure;
            stack = prettyStack(failure, 0);
        }
        else {
            errorName = failure; // If error is undefined or null, show that.
            message = "";
        }
        stacks.push(errorName + (message ? ": " + message : "") + stack);
    }
    if (debug) {
        stack = prettyStack(promise._stackHolder, 2);
        if (stack && stacks.indexOf(stack) === -1)
            stacks.push(stack);
        if (promise._prev)
            getStack(promise._prev, stacks, limit);
    }
    return stacks;
}
function linkToPreviousPromise(promise, prev) {
    // Support long stacks by linking to previous completed promise.
    var numPrev = prev ? prev._numPrev + 1 : 0;
    if (numPrev < LONG_STACKS_CLIP_LIMIT) {
        promise._prev = prev;
        promise._numPrev = numPrev;
    }
}
/* The callback to schedule with setImmediate() or setTimeout().
   It runs a virtual microtick and executes any callback registered in microtickQueue.
 */
function physicalTick() {
    beginMicroTickScope() && endMicroTickScope();
}
function beginMicroTickScope() {
    var wasRootExec = isOutsideMicroTick;
    isOutsideMicroTick = false;
    needsNewPhysicalTick = false;
    return wasRootExec;
}
/* Executes micro-ticks without doing try..catch.
   This can be possible because we only use this internally and
   the registered functions are exception-safe (they do try..catch
   internally before calling any external method). If registering
   functions in the microtickQueue that are not exception-safe, this
   would destroy the framework and make it instable. So we don't export
   our asap method.
*/
function endMicroTickScope() {
    var callbacks, i, l;
    do {
        while (microtickQueue.length > 0) {
            callbacks = microtickQueue;
            microtickQueue = [];
            l = callbacks.length;
            for (i = 0; i < l; ++i) {
                var item = callbacks[i];
                item[0].apply(null, item[1]);
            }
        }
    } while (microtickQueue.length > 0);
    isOutsideMicroTick = true;
    needsNewPhysicalTick = true;
}
function finalizePhysicalTick() {
    var unhandledErrs = unhandledErrors;
    unhandledErrors = [];
    unhandledErrs.forEach(function (p) {
        p._PSD.onunhandled.call(null, p._value, p);
    });
    var finalizers = tickFinalizers.slice(0); // Clone first because finalizer may remove itself from list.
    var i = finalizers.length;
    while (i)
        finalizers[--i]();
}
function run_at_end_of_this_or_next_physical_tick(fn) {
    function finalizer() {
        fn();
        tickFinalizers.splice(tickFinalizers.indexOf(finalizer), 1);
    }
    tickFinalizers.push(finalizer);
    ++numScheduledCalls;
    asap$1(function () {
        if (--numScheduledCalls === 0)
            finalizePhysicalTick();
    }, []);
}
function addPossiblyUnhandledError(promise) {
    // Only add to unhandledErrors if not already there. The first one to add to this list
    // will be upon the first rejection so that the root cause (first promise in the
    // rejection chain) is the one listed.
    if (!unhandledErrors.some(function (p) { return p._value === promise._value; }))
        unhandledErrors.push(promise);
}
function markErrorAsHandled(promise) {
    // Called when a reject handled is actually being called.
    // Search in unhandledErrors for any promise whos _value is this promise_value (list
    // contains only rejected promises, and only one item per error)
    var i = unhandledErrors.length;
    while (i)
        if (unhandledErrors[--i]._value === promise._value) {
            // Found a promise that failed with this same error object pointer,
            // Remove that since there is a listener that actually takes care of it.
            unhandledErrors.splice(i, 1);
            return;
        }
}
function PromiseReject(reason) {
    return new Promise(INTERNAL, false, reason);
}
function wrap(fn, errorCatcher) {
    var psd = PSD;
    return function () {
        var wasRootExec = beginMicroTickScope(), outerScope = PSD;
        try {
            switchToZone(psd, true);
            return fn.apply(this, arguments);
        }
        catch (e) {
            errorCatcher && errorCatcher(e);
        }
        finally {
            switchToZone(outerScope, false);
            if (wasRootExec)
                endMicroTickScope();
        }
    };
}
//
// variables used for native await support
//
var task = { awaits: 0, echoes: 0, id: 0 }; // The ongoing macro-task when using zone-echoing.
var taskCounter = 0; // ID counter for macro tasks.
var zoneStack = []; // Stack of left zones to restore asynchronically.
var zoneEchoes = 0; // zoneEchoes is a must in order to persist zones between native await expressions.
var totalEchoes = 0; // ID counter for micro-tasks. Used to detect possible native await in our Promise.prototype.then.
var zone_id_counter = 0;
function newScope(fn, props$$1, a1, a2) {
    var parent = PSD, psd = Object.create(parent);
    psd.parent = parent;
    psd.ref = 0;
    psd.global = false;
    psd.id = ++zone_id_counter;
    // Prepare for promise patching (done in usePSD):
    var globalEnv = globalPSD.env;
    psd.env = patchGlobalPromise ? {
        Promise: Promise,
        PromiseProp: { value: Promise, configurable: true, writable: true },
        all: Promise.all,
        race: Promise.race,
        resolve: Promise.resolve,
        reject: Promise.reject,
        nthen: getPatchedPromiseThen(globalEnv.nthen, psd),
        gthen: getPatchedPromiseThen(globalEnv.gthen, psd) // global then
    } : {};
    if (props$$1)
        extend(psd, props$$1);
    // unhandleds and onunhandled should not be specifically set here.
    // Leave them on parent prototype.
    // unhandleds.push(err) will push to parent's prototype
    // onunhandled() will call parents onunhandled (with this scope's this-pointer though!)
    ++parent.ref;
    psd.finalize = function () {
        --this.parent.ref || this.parent.finalize();
    };
    var rv = usePSD(psd, fn, a1, a2);
    if (psd.ref === 0)
        psd.finalize();
    return rv;
}
// Function to call if scopeFunc returns NativePromise
// Also for each NativePromise in the arguments to Promise.all()
function incrementExpectedAwaits() {
    if (!task.id)
        task.id = ++taskCounter;
    ++task.awaits;
    task.echoes += ZONE_ECHO_LIMIT;
    return task.id;
}
// Function to call when 'then' calls back on a native promise where onAwaitExpected() had been called.
// Also call this when a native await calls then method on a promise. In that case, don't supply
// sourceTaskId because we already know it refers to current task.
function decrementExpectedAwaits(sourceTaskId) {
    if (!task.awaits || (sourceTaskId && sourceTaskId !== task.id))
        return;
    if (--task.awaits === 0)
        task.id = 0;
    task.echoes = task.awaits * ZONE_ECHO_LIMIT; // Will reset echoes to 0 if awaits is 0.
}
// Call from Promise.all() and Promise.race()
function onPossibleParallellAsync(possiblePromise) {
    if (task.echoes && possiblePromise && possiblePromise.constructor === NativePromise) {
        incrementExpectedAwaits();
        return possiblePromise.then(function (x) {
            decrementExpectedAwaits();
            return x;
        }, function (e) {
            decrementExpectedAwaits();
            return rejection(e);
        });
    }
    return possiblePromise;
}
function zoneEnterEcho(targetZone) {
    ++totalEchoes;
    if (!task.echoes || --task.echoes === 0) {
        task.echoes = task.id = 0; // Cancel zone echoing.
    }
    zoneStack.push(PSD);
    switchToZone(targetZone, true);
}
function zoneLeaveEcho() {
    var zone = zoneStack[zoneStack.length - 1];
    zoneStack.pop();
    switchToZone(zone, false);
}
function switchToZone(targetZone, bEnteringZone) {
    var currentZone = PSD;
    if (bEnteringZone ? task.echoes && (!zoneEchoes++ || targetZone !== PSD) : zoneEchoes && (!--zoneEchoes || targetZone !== PSD)) {
        // Enter or leave zone asynchronically as well, so that tasks initiated during current tick
        // will be surrounded by the zone when they are invoked.
        enqueueNativeMicroTask(bEnteringZone ? zoneEnterEcho.bind(null, targetZone) : zoneLeaveEcho);
    }
    if (targetZone === PSD)
        return;
    PSD = targetZone; // The actual zone switch occurs at this line.
    // Snapshot on every leave from global zone.
    if (currentZone === globalPSD)
        globalPSD.env = snapShot();
    if (patchGlobalPromise) {
        // Let's patch the global and native Promises (may be same or may be different)
        var GlobalPromise = globalPSD.env.Promise;
        // Swich environments (may be PSD-zone or the global zone. Both apply.)
        var targetEnv = targetZone.env;
        // Change Promise.prototype.then for native and global Promise (they MAY differ on polyfilled environments, but both can be accessed)
        // Must be done on each zone change because the patched method contains targetZone in its closure.
        nativePromiseProto.then = targetEnv.nthen;
        GlobalPromise.prototype.then = targetEnv.gthen;
        if (currentZone.global || targetZone.global) {
            // Leaving or entering global zone. It's time to patch / restore global Promise.
            // Set this Promise to window.Promise so that transiled async functions will work on Firefox, Safari and IE, as well as with Zonejs and angular.
            Object.defineProperty(_global, 'Promise', targetEnv.PromiseProp);
            // Support Promise.all() etc to work indexedDB-safe also when people are including es6-promise as a module (they might
            // not be accessing global.Promise but a local reference to it)
            GlobalPromise.all = targetEnv.all;
            GlobalPromise.race = targetEnv.race;
            GlobalPromise.resolve = targetEnv.resolve;
            GlobalPromise.reject = targetEnv.reject;
        }
    }
}
function snapShot() {
    var GlobalPromise = _global.Promise;
    return patchGlobalPromise ? {
        Promise: GlobalPromise,
        PromiseProp: Object.getOwnPropertyDescriptor(_global, "Promise"),
        all: GlobalPromise.all,
        race: GlobalPromise.race,
        resolve: GlobalPromise.resolve,
        reject: GlobalPromise.reject,
        nthen: nativePromiseProto.then,
        gthen: GlobalPromise.prototype.then
    } : {};
}
function usePSD(psd, fn, a1, a2, a3) {
    var outerScope = PSD;
    try {
        switchToZone(psd, true);
        return fn(a1, a2, a3);
    }
    finally {
        switchToZone(outerScope, false);
    }
}
function enqueueNativeMicroTask(job) {
    //
    // Precondition: nativePromiseThen !== undefined
    //
    nativePromiseThen.call(resolvedNativePromise, job);
}
function nativeAwaitCompatibleWrap(fn, zone, possibleAwait) {
    return typeof fn !== 'function' ? fn : function () {
        var outerZone = PSD;
        if (possibleAwait)
            incrementExpectedAwaits();
        switchToZone(zone, true);
        try {
            return fn.apply(this, arguments);
        }
        finally {
            switchToZone(outerZone, false);
        }
    };
}
function getPatchedPromiseThen(origThen, zone) {
    return function (onResolved, onRejected) {
        return origThen.call(this, nativeAwaitCompatibleWrap(onResolved, zone, false), nativeAwaitCompatibleWrap(onRejected, zone, false));
    };
}
var UNHANDLEDREJECTION = "unhandledrejection";
function globalError(err, promise) {
    var rv;
    try {
        rv = promise.onuncatched(err);
    }
    catch (e) { }
    if (rv !== false)
        try {
            var event, eventData = { promise: promise, reason: err };
            if (_global.document && document.createEvent) {
                event = document.createEvent('Event');
                event.initEvent(UNHANDLEDREJECTION, true, true);
                extend(event, eventData);
            }
            else if (_global.CustomEvent) {
                event = new CustomEvent(UNHANDLEDREJECTION, { detail: eventData });
                extend(event, eventData);
            }
            if (event && _global.dispatchEvent) {
                dispatchEvent(event);
                if (!_global.PromiseRejectionEvent && _global.onunhandledrejection)
                    // No native support for PromiseRejectionEvent but user has set window.onunhandledrejection. Manually call it.
                    try {
                        _global.onunhandledrejection(event);
                    }
                    catch (_) { }
            }
            if (!event.defaultPrevented) {
                console.warn("Unhandled rejection: " + (err.stack || err));
            }
        }
        catch (e) { }
}
var rejection = Promise.reject;

function Events(ctx) {
    var evs = {};
    var rv = function (eventName, subscriber) {
        if (subscriber) {
            // Subscribe. If additional arguments than just the subscriber was provided, forward them as well.
            var i = arguments.length, args = new Array(i - 1);
            while (--i)
                args[i - 1] = arguments[i];
            evs[eventName].subscribe.apply(null, args);
            return ctx;
        }
        else if (typeof (eventName) === 'string') {
            // Return interface allowing to fire or unsubscribe from event
            return evs[eventName];
        }
    };
    rv.addEventType = add;
    for (var i = 1, l = arguments.length; i < l; ++i) {
        add(arguments[i]);
    }
    return rv;
    function add(eventName, chainFunction, defaultFunction) {
        if (typeof eventName === 'object')
            return addConfiguredEvents(eventName);
        if (!chainFunction)
            chainFunction = reverseStoppableEventChain;
        if (!defaultFunction)
            defaultFunction = nop;
        var context = {
            subscribers: [],
            fire: defaultFunction,
            subscribe: function (cb) {
                if (context.subscribers.indexOf(cb) === -1) {
                    context.subscribers.push(cb);
                    context.fire = chainFunction(context.fire, cb);
                }
            },
            unsubscribe: function (cb) {
                context.subscribers = context.subscribers.filter(function (fn) { return fn !== cb; });
                context.fire = context.subscribers.reduce(chainFunction, defaultFunction);
            }
        };
        evs[eventName] = rv[eventName] = context;
        return context;
    }
    function addConfiguredEvents(cfg) {
        // events(this, {reading: [functionChain, nop]});
        keys(cfg).forEach(function (eventName) {
            var args = cfg[eventName];
            if (isArray(args)) {
                add(eventName, cfg[eventName][0], cfg[eventName][1]);
            }
            else if (args === 'asap') {
                // Rather than approaching event subscription using a functional approach, we here do it in a for-loop where subscriber is executed in its own stack
                // enabling that any exception that occur wont disturb the initiator and also not nescessary be catched and forgotten.
                var context = add(eventName, mirror, function fire() {
                    // Optimazation-safe cloning of arguments into args.
                    var i = arguments.length, args = new Array(i);
                    while (i--)
                        args[i] = arguments[i];
                    // All each subscriber:
                    context.subscribers.forEach(function (fn) {
                        asap(function fireEvent() {
                            fn.apply(null, args);
                        });
                    });
                });
            }
            else
                throw new exceptions.InvalidArgument("Invalid event config");
        });
    }
}

/*
 * Dexie.js - a minimalistic wrapper for IndexedDB
 * ===============================================
 *
 * Copyright (c) 2014-2017 David Fahlander
 *
 * Version {version}, {date}
 *
 * http://dexie.org
 *
 * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/LICENSE-2.0
 *
 */
var DEXIE_VERSION = '{version}';
var maxString = String.fromCharCode(65535);
var maxKey = (function () { try {
    IDBKeyRange.only([[]]);
    return [[]];
}
catch (e) {
    return maxString;
} })();
var minKey = -Infinity;
var INVALID_KEY_ARGUMENT = "Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.";
var STRING_EXPECTED = "String expected.";
var connections = [];
var isIEOrEdge = typeof navigator !== 'undefined' && /(MSIE|Trident|Edge)/.test(navigator.userAgent);
var hasIEDeleteObjectStoreBug = isIEOrEdge;
var hangsOnDeleteLargeKeyRange = isIEOrEdge;
var dexieStackFrameFilter = function (frame) { return !/(dexie\.js|dexie\.min\.js)/.test(frame); };
var dbNamesDB; // Global database for backing Dexie.getDatabaseNames() on browser without indexedDB.webkitGetDatabaseNames() 
// Init debug
setDebug(debug, dexieStackFrameFilter);
function Dexie(dbName, options) {
    /// <param name="options" type="Object" optional="true">Specify only if you wich to control which addons that should run on this instance</param>
    var deps = Dexie.dependencies;
    var opts = extend({
        // Default Options
        addons: Dexie.addons,
        autoOpen: true,
        indexedDB: deps.indexedDB,
        IDBKeyRange: deps.IDBKeyRange // Backend IDBKeyRange api. Default to browser env.
    }, options);
    var addons = opts.addons, autoOpen = opts.autoOpen, indexedDB = opts.indexedDB, IDBKeyRange = opts.IDBKeyRange;
    var globalSchema = this._dbSchema = {};
    var versions = [];
    var dbStoreNames = [];
    var allTables = {};
    ///<var type="IDBDatabase" />
    var idbdb = null; // Instance of IDBDatabase
    var dbOpenError = null;
    var isBeingOpened = false;
    var onReadyBeingFired = null;
    var openComplete = false;
    var READONLY = "readonly", READWRITE = "readwrite";
    var db = this;
    var dbReadyResolve, dbReadyPromise = new Promise(function (resolve) {
        dbReadyResolve = resolve;
    }), cancelOpen, openCanceller = new Promise(function (_, reject) {
        cancelOpen = reject;
    });
    var autoSchema = true;
    var hasNativeGetDatabaseNames = !!getNativeGetDatabaseNamesFn(indexedDB), hasGetAll;
    function init() {
        // Default subscribers to "versionchange" and "blocked".
        // Can be overridden by custom handlers. If custom handlers return false, these default
        // behaviours will be prevented.
        db.on("versionchange", function (ev) {
            // Default behavior for versionchange event is to close database connection.
            // Caller can override this behavior by doing db.on("versionchange", function(){ return false; });
            // Let's not block the other window from making it's delete() or open() call.
            // NOTE! This event is never fired in IE,Edge or Safari.
            if (ev.newVersion > 0)
                console.warn("Another connection wants to upgrade database '" + db.name + "'. Closing db now to resume the upgrade.");
            else
                console.warn("Another connection wants to delete database '" + db.name + "'. Closing db now to resume the delete request.");
            db.close();
            // In many web applications, it would be recommended to force window.reload()
            // when this event occurs. To do that, subscribe to the versionchange event
            // and call window.location.reload(true) if ev.newVersion > 0 (not a deletion)
            // The reason for this is that your current web app obviously has old schema code that needs
            // to be updated. Another window got a newer version of the app and needs to upgrade DB but
            // your window is blocking it unless we close it here.
        });
        db.on("blocked", function (ev) {
            if (!ev.newVersion || ev.newVersion < ev.oldVersion)
                console.warn("Dexie.delete('" + db.name + "') was blocked");
            else
                console.warn("Upgrade '" + db.name + "' blocked by other connection holding version " + ev.oldVersion / 10);
        });
    }
    //
    //
    //
    // ------------------------- Versioning Framework---------------------------
    //
    //
    //
    this.version = function (versionNumber) {
        /// <param name="versionNumber" type="Number"></param>
        /// <returns type="Version"></returns>
        if (idbdb || isBeingOpened)
            throw new exceptions.Schema("Cannot add version when database is open");
        this.verno = Math.max(this.verno, versionNumber);
        var versionInstance = versions.filter(function (v) { return v._cfg.version === versionNumber; })[0];
        if (versionInstance)
            return versionInstance;
        versionInstance = new Version(versionNumber);
        versions.push(versionInstance);
        versions.sort(lowerVersionFirst);
        // Disable autoschema mode, as at least one version is specified.
        autoSchema = false;
        return versionInstance;
    };
    function Version(versionNumber) {
        this._cfg = {
            version: versionNumber,
            storesSource: null,
            dbschema: {},
            tables: {},
            contentUpgrade: null
        };
        this.stores({}); // Derive earlier schemas by default.
    }
    extend(Version.prototype, {
        stores: function (stores) {
            /// <summary>
            ///   Defines the schema for a particular version
            /// </summary>
            /// <param name="stores" type="Object">
            /// Example: <br/>
            ///   {users: "id++,first,last,&amp;username,*email", <br/>
            ///   passwords: "id++,&amp;username"}<br/>
            /// <br/>
            /// Syntax: {Table: "[primaryKey][++],[&amp;][*]index1,[&amp;][*]index2,..."}<br/><br/>
            /// Special characters:<br/>
            ///  "&amp;"  means unique key, <br/>
            ///  "*"  means value is multiEntry, <br/>
            ///  "++" means auto-increment and only applicable for primary key <br/>
            /// </param>
            this._cfg.storesSource = this._cfg.storesSource ? extend(this._cfg.storesSource, stores) : stores;
            // Derive stores from earlier versions if they are not explicitely specified as null or a new syntax.
            var storesSpec = {};
            versions.forEach(function (version) {
                extend(storesSpec, version._cfg.storesSource);
            });
            var dbschema = (this._cfg.dbschema = {});
            this._parseStoresSpec(storesSpec, dbschema);
            // Update the latest schema to this version
            // Update API
            globalSchema = db._dbSchema = dbschema;
            removeTablesApi([allTables, db, Transaction.prototype]); // Keep Transaction.prototype even though it should be depr.
            setApiOnPlace([allTables, db, Transaction.prototype, this._cfg.tables], keys(dbschema), dbschema);
            dbStoreNames = keys(dbschema);
            return this;
        },
        upgrade: function (upgradeFunction) {
            this._cfg.contentUpgrade = upgradeFunction;
            return this;
        },
        _parseStoresSpec: function (stores, outSchema) {
            keys(stores).forEach(function (tableName) {
                if (stores[tableName] !== null) {
                    var instanceTemplate = {};
                    var indexes = parseIndexSyntax(stores[tableName]);
                    var primKey = indexes.shift();
                    if (primKey.multi)
                        throw new exceptions.Schema("Primary key cannot be multi-valued");
                    if (primKey.keyPath)
                        setByKeyPath(instanceTemplate, primKey.keyPath, primKey.auto ? 0 : primKey.keyPath);
                    indexes.forEach(function (idx) {
                        if (idx.auto)
                            throw new exceptions.Schema("Only primary key can be marked as autoIncrement (++)");
                        if (!idx.keyPath)
                            throw new exceptions.Schema("Index must have a name and cannot be an empty string");
                        setByKeyPath(instanceTemplate, idx.keyPath, idx.compound ? idx.keyPath.map(function () { return ""; }) : "");
                    });
                    outSchema[tableName] = new TableSchema(tableName, primKey, indexes, instanceTemplate);
                }
            });
        }
    });
    function runUpgraders(oldVersion, idbtrans, reject) {
        var trans = db._createTransaction(READWRITE, dbStoreNames, globalSchema);
        trans.create(idbtrans);
        trans._completion.catch(reject);
        var rejectTransaction = trans._reject.bind(trans);
        newScope(function () {
            PSD.trans = trans;
            if (oldVersion === 0) {
                // Create tables:
                keys(globalSchema).forEach(function (tableName) {
                    createTable(idbtrans, tableName, globalSchema[tableName].primKey, globalSchema[tableName].indexes);
                });
                Promise.follow(function () { return db.on.populate.fire(trans); }).catch(rejectTransaction);
            }
            else
                updateTablesAndIndexes(oldVersion, trans, idbtrans).catch(rejectTransaction);
        });
    }
    function updateTablesAndIndexes(oldVersion, trans, idbtrans) {
        // Upgrade version to version, step-by-step from oldest to newest version.
        // Each transaction object will contain the table set that was current in that version (but also not-yet-deleted tables from its previous version)
        var queue = [];
        var oldVersionStruct = versions.filter(function (version) { return version._cfg.version === oldVersion; })[0];
        if (!oldVersionStruct)
            throw new exceptions.Upgrade("Dexie specification of currently installed DB version is missing");
        globalSchema = db._dbSchema = oldVersionStruct._cfg.dbschema;
        var anyContentUpgraderHasRun = false;
        var versToRun = versions.filter(function (v) { return v._cfg.version > oldVersion; });
        versToRun.forEach(function (version) {
            /// <param name="version" type="Version"></param>
            queue.push(function () {
                var oldSchema = globalSchema;
                var newSchema = version._cfg.dbschema;
                adjustToExistingIndexNames(oldSchema, idbtrans);
                adjustToExistingIndexNames(newSchema, idbtrans);
                globalSchema = db._dbSchema = newSchema;
                var diff = getSchemaDiff(oldSchema, newSchema);
                // Add tables           
                diff.add.forEach(function (tuple) {
                    createTable(idbtrans, tuple[0], tuple[1].primKey, tuple[1].indexes);
                });
                // Change tables
                diff.change.forEach(function (change) {
                    if (change.recreate) {
                        throw new exceptions.Upgrade("Not yet support for changing primary key");
                    }
                    else {
                        var store = idbtrans.objectStore(change.name);
                        // Add indexes
                        change.add.forEach(function (idx) {
                            addIndex(store, idx);
                        });
                        // Update indexes
                        change.change.forEach(function (idx) {
                            store.deleteIndex(idx.name);
                            addIndex(store, idx);
                        });
                        // Delete indexes
                        change.del.forEach(function (idxName) {
                            store.deleteIndex(idxName);
                        });
                    }
                });
                if (version._cfg.contentUpgrade) {
                    anyContentUpgraderHasRun = true;
                    return Promise.follow(function () {
                        version._cfg.contentUpgrade(trans);
                    });
                }
            });
            queue.push(function (idbtrans) {
                if (!anyContentUpgraderHasRun || !hasIEDeleteObjectStoreBug) {
                    var newSchema = version._cfg.dbschema;
                    // Delete old tables
                    deleteRemovedTables(newSchema, idbtrans);
                }
            });
        });
        // Now, create a queue execution engine
        function runQueue() {
            return queue.length ? Promise.resolve(queue.shift()(trans.idbtrans)).then(runQueue) :
                Promise.resolve();
        }
        return runQueue().then(function () {
            createMissingTables(globalSchema, idbtrans); // At last, make sure to create any missing tables. (Needed by addons that add stores to DB without specifying version)
        });
    }
    function getSchemaDiff(oldSchema, newSchema) {
        var diff = {
            del: [],
            add: [],
            change: [] // Array of {name: tableName, recreate: newDefinition, del: delIndexNames, add: newIndexDefs, change: changedIndexDefs}
        };
        for (var table in oldSchema) {
            if (!newSchema[table])
                diff.del.push(table);
        }
        for (table in newSchema) {
            var oldDef = oldSchema[table], newDef = newSchema[table];
            if (!oldDef) {
                diff.add.push([table, newDef]);
            }
            else {
                var change = {
                    name: table,
                    def: newDef,
                    recreate: false,
                    del: [],
                    add: [],
                    change: []
                };
                if (oldDef.primKey.src !== newDef.primKey.src) {
                    // Primary key has changed. Remove and re-add table.
                    change.recreate = true;
                    diff.change.push(change);
                }
                else {
                    // Same primary key. Just find out what differs:
                    var oldIndexes = oldDef.idxByName;
                    var newIndexes = newDef.idxByName;
                    for (var idxName in oldIndexes) {
                        if (!newIndexes[idxName])
                            change.del.push(idxName);
                    }
                    for (idxName in newIndexes) {
                        var oldIdx = oldIndexes[idxName], newIdx = newIndexes[idxName];
                        if (!oldIdx)
                            change.add.push(newIdx);
                        else if (oldIdx.src !== newIdx.src)
                            change.change.push(newIdx);
                    }
                    if (change.del.length > 0 || change.add.length > 0 || change.change.length > 0) {
                        diff.change.push(change);
                    }
                }
            }
        }
        return diff;
    }
    function createTable(idbtrans, tableName, primKey, indexes) {
        /// <param name="idbtrans" type="IDBTransaction"></param>
        var store = idbtrans.db.createObjectStore(tableName, primKey.keyPath ? { keyPath: primKey.keyPath, autoIncrement: primKey.auto } : { autoIncrement: primKey.auto });
        indexes.forEach(function (idx) { addIndex(store, idx); });
        return store;
    }
    function createMissingTables(newSchema, idbtrans) {
        keys(newSchema).forEach(function (tableName) {
            if (!idbtrans.db.objectStoreNames.contains(tableName)) {
                createTable(idbtrans, tableName, newSchema[tableName].primKey, newSchema[tableName].indexes);
            }
        });
    }
    function deleteRemovedTables(newSchema, idbtrans) {
        for (var i = 0; i < idbtrans.db.objectStoreNames.length; ++i) {
            var storeName = idbtrans.db.objectStoreNames[i];
            if (newSchema[storeName] == null) {
                idbtrans.db.deleteObjectStore(storeName);
            }
        }
    }
    function addIndex(store, idx) {
        store.createIndex(idx.name, idx.keyPath, { unique: idx.unique, multiEntry: idx.multi });
    }
    //
    //
    //      Dexie Protected API
    //
    //
    this._allTables = allTables;
    this._createTransaction = function (mode, storeNames, dbschema, parentTransaction) {
        return new Transaction(mode, storeNames, dbschema, parentTransaction);
    };
    /* Generate a temporary transaction when db operations are done outside a transaction scope.
    */
    function tempTransaction(mode, storeNames, fn) {
        if (!openComplete && (!PSD.letThrough)) {
            if (!isBeingOpened) {
                if (!autoOpen)
                    return rejection(new exceptions.DatabaseClosed());
                db.open().catch(nop); // Open in background. If if fails, it will be catched by the final promise anyway.
            }
            return dbReadyPromise.then(function () { return tempTransaction(mode, storeNames, fn); });
        }
        else {
            var trans = db._createTransaction(mode, storeNames, globalSchema);
            try {
                trans.create();
            }
            catch (ex) {
                return rejection(ex);
            }
            return trans._promise(mode, function (resolve, reject) {
                return newScope(function () {
                    PSD.trans = trans;
                    return fn(resolve, reject, trans);
                });
            }).then(function (result) {
                // Instead of resolving value directly, wait with resolving it until transaction has completed.
                // Otherwise the data would not be in the DB if requesting it in the then() operation.
                // Specifically, to ensure that the following expression will work:
                //
                //   db.friends.put({name: "Arne"}).then(function () {
                //       db.friends.where("name").equals("Arne").count(function(count) {
                //           assert (count === 1);
                //       });
                //   });
                //
                return trans._completion.then(function () { return result; });
            }); /*.catch(err => { // Don't do this as of now. If would affect bulk- and modify methods in a way that could be more intuitive. But wait! Maybe change in next major.
                trans._reject(err);
                return rejection(err);
            });*/
        }
    }
    this._whenReady = function (fn) {
        return openComplete || PSD.letThrough ? fn() : new Promise(function (resolve, reject) {
            if (!isBeingOpened) {
                if (!autoOpen) {
                    reject(new exceptions.DatabaseClosed());
                    return;
                }
                db.open().catch(nop); // Open in background. If if fails, it will be catched by the final promise anyway.
            }
            dbReadyPromise.then(resolve, reject);
        }).then(fn);
    };
    //
    //
    //
    //
    //      Dexie API
    //
    //
    //
    this.verno = 0;
    this.open = function () {
        if (isBeingOpened || idbdb)
            return dbReadyPromise.then(function () { return dbOpenError ? rejection(dbOpenError) : db; });
        debug && (openCanceller._stackHolder = getErrorWithStack()); // Let stacks point to when open() was called rather than where new Dexie() was called.
        isBeingOpened = true;
        dbOpenError = null;
        openComplete = false;
        // Function pointers to call when the core opening process completes.
        var resolveDbReady = dbReadyResolve, 
        // upgradeTransaction to abort on failure.
        upgradeTransaction = null;
        return Promise.race([openCanceller, new Promise(function (resolve, reject) {
                // Multiply db.verno with 10 will be needed to workaround upgrading bug in IE:
                // IE fails when deleting objectStore after reading from it.
                // A future version of Dexie.js will stopover an intermediate version to workaround this.
                // At that point, we want to be backward compatible. Could have been multiplied with 2, but by using 10, it is easier to map the number to the real version number.
                // If no API, throw!
                if (!indexedDB)
                    throw new exceptions.MissingAPI("indexedDB API not found. If using IE10+, make sure to run your code on a server URL " +
                        "(not locally). If using old Safari versions, make sure to include indexedDB polyfill.");
                var req = autoSchema ? indexedDB.open(dbName) : indexedDB.open(dbName, Math.round(db.verno * 10));
                if (!req)
                    throw new exceptions.MissingAPI("IndexedDB API not available"); // May happen in Safari private mode, see https://github.com/dfahlander/Dexie.js/issues/134
                req.onerror = eventRejectHandler(reject);
                req.onblocked = wrap(fireOnBlocked);
                req.onupgradeneeded = wrap(function (e) {
                    upgradeTransaction = req.transaction;
                    if (autoSchema && !db._allowEmptyDB) {
                        // Caller did not specify a version or schema. Doing that is only acceptable for opening alread existing databases.
                        // If onupgradeneeded is called it means database did not exist. Reject the open() promise and make sure that we
                        // do not create a new database by accident here.
                        req.onerror = preventDefault; // Prohibit onabort error from firing before we're done!
                        upgradeTransaction.abort(); // Abort transaction (would hope that this would make DB disappear but it doesnt.)
                        // Close database and delete it.
                        req.result.close();
                        var delreq = indexedDB.deleteDatabase(dbName); // The upgrade transaction is atomic, and javascript is single threaded - meaning that there is no risk that we delete someone elses database here!
                        delreq.onsuccess = delreq.onerror = wrap(function () {
                            reject(new exceptions.NoSuchDatabase("Database " + dbName + " doesnt exist"));
                        });
                    }
                    else {
                        upgradeTransaction.onerror = eventRejectHandler(reject);
                        var oldVer = e.oldVersion > Math.pow(2, 62) ? 0 : e.oldVersion; // Safari 8 fix.
                        runUpgraders(oldVer / 10, upgradeTransaction, reject, req);
                    }
                }, reject);
                req.onsuccess = wrap(function () {
                    // Core opening procedure complete. Now let's just record some stuff.
                    upgradeTransaction = null;
                    idbdb = req.result;
                    connections.push(db); // Used for emulating versionchange event on IE/Edge/Safari.
                    if (autoSchema)
                        readGlobalSchema();
                    else if (idbdb.objectStoreNames.length > 0) {
                        try {
                            adjustToExistingIndexNames(globalSchema, idbdb.transaction(safariMultiStoreFix(idbdb.objectStoreNames), READONLY));
                        }
                        catch (e) {
                            // Safari may bail out if > 1 store names. However, this shouldnt be a showstopper. Issue #120.
                        }
                    }
                    idbdb.onversionchange = wrap(function (ev) {
                        db._vcFired = true; // detect implementations that not support versionchange (IE/Edge/Safari)
                        db.on("versionchange").fire(ev);
                    });
                    if (!hasNativeGetDatabaseNames && dbName !== '__dbnames') {
                        dbNamesDB.dbnames.put({ name: dbName }).catch(nop);
                    }
                    resolve();
                }, reject);
            })]).then(function () {
            // Before finally resolving the dbReadyPromise and this promise,
            // call and await all on('ready') subscribers:
            // Dexie.vip() makes subscribers able to use the database while being opened.
            // This is a must since these subscribers take part of the opening procedure.
            onReadyBeingFired = [];
            return Promise.resolve(Dexie.vip(db.on.ready.fire)).then(function fireRemainders() {
                if (onReadyBeingFired.length > 0) {
                    // In case additional subscribers to db.on('ready') were added during the time db.on.ready.fire was executed.
                    var remainders = onReadyBeingFired.reduce(promisableChain, nop);
                    onReadyBeingFired = [];
                    return Promise.resolve(Dexie.vip(remainders)).then(fireRemainders);
                }
            });
        }).finally(function () {
            onReadyBeingFired = null;
        }).then(function () {
            // Resolve the db.open() with the db instance.
            isBeingOpened = false;
            return db;
        }).catch(function (err) {
            try {
                // Did we fail within onupgradeneeded? Make sure to abort the upgrade transaction so it doesnt commit.
                upgradeTransaction && upgradeTransaction.abort();
            }
            catch (e) { }
            isBeingOpened = false; // Set before calling db.close() so that it doesnt reject openCanceller again (leads to unhandled rejection event).
            db.close(); // Closes and resets idbdb, removes connections, resets dbReadyPromise and openCanceller so that a later db.open() is fresh.
            // A call to db.close() may have made on-ready subscribers fail. Use dbOpenError if set, since err could be a follow-up error on that.
            dbOpenError = err; // Record the error. It will be used to reject further promises of db operations.
            return rejection(dbOpenError);
        }).finally(function () {
            openComplete = true;
            resolveDbReady(); // dbReadyPromise is resolved no matter if open() rejects or resolved. It's just to wake up waiters.
        });
    };
    this.close = function () {
        var idx = connections.indexOf(db);
        if (idx >= 0)
            connections.splice(idx, 1);
        if (idbdb) {
            try {
                idbdb.close();
            }
            catch (e) { }
            idbdb = null;
        }
        autoOpen = false;
        dbOpenError = new exceptions.DatabaseClosed();
        if (isBeingOpened)
            cancelOpen(dbOpenError);
        // Reset dbReadyPromise promise:
        dbReadyPromise = new Promise(function (resolve) {
            dbReadyResolve = resolve;
        });
        openCanceller = new Promise(function (_, reject) {
            cancelOpen = reject;
        });
    };
    this.delete = function () {
        var hasArguments = arguments.length > 0;
        return new Promise(function (resolve, reject) {
            if (hasArguments)
                throw new exceptions.InvalidArgument("Arguments not allowed in db.delete()");
            if (isBeingOpened) {
                dbReadyPromise.then(doDelete);
            }
            else {
                doDelete();
            }
            function doDelete() {
                db.close();
                var req = indexedDB.deleteDatabase(dbName);
                req.onsuccess = wrap(function () {
                    if (!hasNativeGetDatabaseNames) {
                        dbNamesDB.dbnames.delete(dbName).catch(nop);
                    }
                    resolve();
                });
                req.onerror = eventRejectHandler(reject);
                req.onblocked = fireOnBlocked;
            }
        });
    };
    this.backendDB = function () {
        return idbdb;
    };
    this.isOpen = function () {
        return idbdb !== null;
    };
    this.hasBeenClosed = function () {
        return dbOpenError && (dbOpenError instanceof exceptions.DatabaseClosed);
    };
    this.hasFailed = function () {
        return dbOpenError !== null;
    };
    this.dynamicallyOpened = function () {
        return autoSchema;
    };
    //
    // Properties
    //
    this.name = dbName;
    // db.tables - an array of all Table instances.
    props(this, {
        tables: {
            get: function () {
                /// <returns type="Array" elementType="Table" />
                return keys(allTables).map(function (name) { return allTables[name]; });
            }
        }
    });
    //
    // Events
    //
    this.on = Events(this, "populate", "blocked", "versionchange", { ready: [promisableChain, nop] });
    this.on.ready.subscribe = override(this.on.ready.subscribe, function (subscribe) {
        return function (subscriber, bSticky) {
            Dexie.vip(function () {
                if (openComplete) {
                    // Database already open. Call subscriber asap.
                    if (!dbOpenError)
                        Promise.resolve().then(subscriber);
                    // bSticky: Also subscribe to future open sucesses (after close / reopen) 
                    if (bSticky)
                        subscribe(subscriber);
                }
                else if (onReadyBeingFired) {
                    // db.on('ready') subscribers are currently being executed and have not yet resolved or rejected
                    onReadyBeingFired.push(subscriber);
                    if (bSticky)
                        subscribe(subscriber);
                }
                else {
                    // Database not yet open. Subscribe to it.
                    subscribe(subscriber);
                    // If bSticky is falsy, make sure to unsubscribe subscriber when fired once.
                    if (!bSticky)
                        subscribe(function unsubscribe() {
                            db.on.ready.unsubscribe(subscriber);
                            db.on.ready.unsubscribe(unsubscribe);
                        });
                }
            });
        };
    });
    this.transaction = function () {
        /// <summary>
        ///
        /// </summary>
        /// <param name="mode" type="String">"r" for readonly, or "rw" for readwrite</param>
        /// <param name="tableInstances">Table instance, Array of Table instances, String or String Array of object stores to include in the transaction</param>
        /// <param name="scopeFunc" type="Function">Function to execute with transaction</param>
        var args = extractTransactionArgs.apply(this, arguments);
        return this._transaction.apply(this, args);
    };
    function extractTransactionArgs(mode, _tableArgs_, scopeFunc) {
        // Let table arguments be all arguments between mode and last argument.
        var i = arguments.length;
        if (i < 2)
            throw new exceptions.InvalidArgument("Too few arguments");
        // Prevent optimzation killer (https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments)
        // and clone arguments except the first one into local var 'args'.
        var args = new Array(i - 1);
        while (--i)
            args[i - 1] = arguments[i];
        // Let scopeFunc be the last argument and pop it so that args now only contain the table arguments.
        scopeFunc = args.pop();
        var tables = flatten(args); // Support using array as middle argument, or a mix of arrays and non-arrays.
        return [mode, tables, scopeFunc];
    }
    this._transaction = function (mode, tables, scopeFunc) {
        var parentTransaction = PSD.trans;
        // Check if parent transactions is bound to this db instance, and if caller wants to reuse it
        if (!parentTransaction || parentTransaction.db !== db || mode.indexOf('!') !== -1)
            parentTransaction = null;
        var onlyIfCompatible = mode.indexOf('?') !== -1;
        mode = mode.replace('!', '').replace('?', ''); // Ok. Will change arguments[0] as well but we wont touch arguments henceforth.
        try {
            //
            // Get storeNames from arguments. Either through given table instances, or through given table names.
            //
            var storeNames = tables.map(function (table) {
                var storeName = table instanceof Table ? table.name : table;
                if (typeof storeName !== 'string')
                    throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");
                return storeName;
            });
            //
            // Resolve mode. Allow shortcuts "r" and "rw".
            //
            if (mode == "r" || mode == READONLY)
                mode = READONLY;
            else if (mode == "rw" || mode == READWRITE)
                mode = READWRITE;
            else
                throw new exceptions.InvalidArgument("Invalid transaction mode: " + mode);
            if (parentTransaction) {
                // Basic checks
                if (parentTransaction.mode === READONLY && mode === READWRITE) {
                    if (onlyIfCompatible) {
                        // Spawn new transaction instead.
                        parentTransaction = null;
                    }
                    else
                        throw new exceptions.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");
                }
                if (parentTransaction) {
                    storeNames.forEach(function (storeName) {
                        if (parentTransaction && parentTransaction.storeNames.indexOf(storeName) === -1) {
                            if (onlyIfCompatible) {
                                // Spawn new transaction instead.
                                parentTransaction = null;
                            }
                            else
                                throw new exceptions.SubTransaction("Table " + storeName +
                                    " not included in parent transaction.");
                        }
                    });
                }
                if (onlyIfCompatible && parentTransaction && !parentTransaction.active) {
                    // '?' mode should not keep using an inactive transaction.
                    parentTransaction = null;
                }
            }
        }
        catch (e) {
            return parentTransaction ?
                parentTransaction._promise(null, function (_, reject) { reject(e); }) :
                rejection(e);
        }
        // If this is a sub-transaction, lock the parent and then launch the sub-transaction.
        return (parentTransaction ?
            parentTransaction._promise(mode, enterTransactionScope, "lock") :
            PSD.trans ?
                // no parent transaction despite PSD.trans exists. Make sure also
                // that the zone we create is not a sub-zone of current, because
                // Promise.follow() should not wait for it if so.
                usePSD(PSD.transless, function () { return db._whenReady(enterTransactionScope); }) :
                db._whenReady(enterTransactionScope));
        function enterTransactionScope() {
            return Promise.resolve().then(function () {
                // Keep a pointer to last non-transactional PSD to use if someone calls Dexie.ignoreTransaction().
                var transless = PSD.transless || PSD;
                // Our transaction.
                //return new Promise((resolve, reject) => {
                var trans = db._createTransaction(mode, storeNames, globalSchema, parentTransaction);
                // Let the transaction instance be part of a Promise-specific data (PSD) value.
                var zoneProps = {
                    trans: trans,
                    transless: transless
                };
                if (parentTransaction) {
                    // Emulate transaction commit awareness for inner transaction (must 'commit' when the inner transaction has no more operations ongoing)
                    trans.idbtrans = parentTransaction.idbtrans;
                }
                else {
                    trans.create(); // Create the backend transaction so that complete() or error() will trigger even if no operation is made upon it.
                }
                // Support for native async await.
                if (scopeFunc.constructor === AsyncFunction) {
                    incrementExpectedAwaits();
                }
                var returnValue;
                var promiseFollowed = Promise.follow(function () {
                    // Finally, call the scope function with our table and transaction arguments.
                    returnValue = scopeFunc.call(trans, trans);
                    if (returnValue) {
                        if (returnValue.constructor === NativePromise) {
                            var decrementor = decrementExpectedAwaits.bind(null, null);
                            returnValue.then(decrementor, decrementor);
                        }
                        else if (typeof returnValue.next === 'function' && typeof returnValue.throw === 'function') {
                            // scopeFunc returned an iterator with throw-support. Handle yield as await.
                            returnValue = awaitIterator(returnValue);
                        }
                    }
                }, zoneProps);
                return (returnValue && typeof returnValue.then === 'function' ?
                    // Promise returned. User uses promise-style transactions.
                    Promise.resolve(returnValue).then(function (x) { return trans.active ?
                        x // Transaction still active. Continue.
                        : rejection(new exceptions.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn")); })
                    // No promise returned. Wait for all outstanding promises before continuing. 
                    : promiseFollowed.then(function () { return returnValue; })).then(function (x) {
                    // sub transactions don't react to idbtrans.oncomplete. We must trigger a completion:
                    if (parentTransaction)
                        trans._resolve();
                    // wait for trans._completion
                    // (if root transaction, this means 'complete' event. If sub-transaction, we've just fired it ourselves)
                    return trans._completion.then(function () { return x; });
                }).catch(function (e) {
                    trans._reject(e); // Yes, above then-handler were maybe not called because of an unhandled rejection in scopeFunc!
                    return rejection(e);
                });
            });
        }
    };
    this.table = function (tableName) {
        /// <returns type="Table"></returns>
        if (!hasOwn(allTables, tableName)) {
            throw new exceptions.InvalidTable("Table " + tableName + " does not exist");
        }
        return allTables[tableName];
    };
    //
    //
    //
    // Table Class
    //
    //
    //
    function Table(name, tableSchema, optionalTrans) {
        /// <param name="name" type="String"></param>
        this.name = name;
        this.schema = tableSchema;
        this._tx = optionalTrans;
        this.hook = allTables[name] ? allTables[name].hook : Events(null, {
            "creating": [hookCreatingChain, nop],
            "reading": [pureFunctionChain, mirror],
            "updating": [hookUpdatingChain, nop],
            "deleting": [hookDeletingChain, nop]
        });
    }
    function BulkErrorHandlerCatchAll(errorList, done, supportHooks) {
        return (supportHooks ? hookedEventRejectHandler : eventRejectHandler)(function (e) {
            errorList.push(e);
            done && done();
        });
    }
    function bulkDelete(idbstore, trans, keysOrTuples, hasDeleteHook, deletingHook) {
        // If hasDeleteHook, keysOrTuples must be an array of tuples: [[key1, value2],[key2,value2],...],
        // else keysOrTuples must be just an array of keys: [key1, key2, ...].
        return new Promise(function (resolve, reject) {
            var len = keysOrTuples.length, lastItem = len - 1;
            if (len === 0)
                return resolve();
            if (!hasDeleteHook) {
                for (var i = 0; i < len; ++i) {
                    var req = idbstore.delete(keysOrTuples[i]);
                    req.onerror = eventRejectHandler(reject);
                    if (i === lastItem)
                        req.onsuccess = wrap(function () { return resolve(); });
                }
            }
            else {
                var hookCtx, errorHandler = hookedEventRejectHandler(reject), successHandler = hookedEventSuccessHandler(null);
                tryCatch(function () {
                    for (var i = 0; i < len; ++i) {
                        hookCtx = { onsuccess: null, onerror: null };
                        var tuple = keysOrTuples[i];
                        deletingHook.call(hookCtx, tuple[0], tuple[1], trans);
                        var req = idbstore.delete(tuple[0]);
                        req._hookCtx = hookCtx;
                        req.onerror = errorHandler;
                        if (i === lastItem)
                            req.onsuccess = hookedEventSuccessHandler(resolve);
                        else
                            req.onsuccess = successHandler;
                    }
                }, function (err) {
                    hookCtx.onerror && hookCtx.onerror(err);
                    throw err;
                });
            }
        });
    }
    props(Table.prototype, {
        //
        // Table Protected Methods
        //
        _trans: function getTransaction(mode, fn, writeLocked) {
            var trans = this._tx || PSD.trans;
            return trans && trans.db === db ?
                trans === PSD.trans ?
                    trans._promise(mode, fn, writeLocked) :
                    newScope(function () { return trans._promise(mode, fn, writeLocked); }, { trans: trans, transless: PSD.transless || PSD }) :
                tempTransaction(mode, [this.name], fn);
        },
        _idbstore: function getIDBObjectStore(mode, fn, writeLocked) {
            var tableName = this.name;
            function supplyIdbStore(resolve, reject, trans) {
                if (trans.storeNames.indexOf(tableName) === -1)
                    throw new exceptions.NotFound("Table" + tableName + " not part of transaction");
                return fn(resolve, reject, trans.idbtrans.objectStore(tableName), trans);
            }
            return this._trans(mode, supplyIdbStore, writeLocked);
        },
        //
        // Table Public Methods
        //
        get: function (keyOrCrit, cb) {
            if (keyOrCrit && keyOrCrit.constructor === Object)
                return this.where(keyOrCrit).first(cb);
            var self = this;
            return this._idbstore(READONLY, function (resolve, reject, idbstore) {
                var req = idbstore.get(keyOrCrit);
                req.onerror = eventRejectHandler(reject);
                req.onsuccess = wrap(function () {
                    resolve(self.hook.reading.fire(req.result));
                }, reject);
            }).then(cb);
        },
        where: function (indexOrCrit) {
            if (typeof indexOrCrit === 'string')
                return new WhereClause(this, indexOrCrit);
            if (isArray(indexOrCrit))
                return new WhereClause(this, "[" + indexOrCrit.join('+') + "]");
            // indexOrCrit is an object map of {[keyPath]:value} 
            var keyPaths = keys(indexOrCrit);
            if (keyPaths.length === 1)
                // Only one critera. This was the easy case:
                return this
                    .where(keyPaths[0])
                    .equals(indexOrCrit[keyPaths[0]]);
            // Multiple criterias.
            // Let's try finding a compound index that matches all keyPaths in
            // arbritary order:
            var compoundIndex = this.schema.indexes.concat(this.schema.primKey).filter(function (ix) {
                return ix.compound &&
                    keyPaths.every(function (keyPath) { return ix.keyPath.indexOf(keyPath) >= 0; }) &&
                    ix.keyPath.every(function (keyPath) { return keyPaths.indexOf(keyPath) >= 0; });
            })[0];
            if (compoundIndex && maxKey !== maxString)
                // Cool! We found such compound index
                // and this browser supports compound indexes (maxKey !== maxString)!
                return this
                    .where(compoundIndex.name)
                    .equals(compoundIndex.keyPath.map(function (kp) { return indexOrCrit[kp]; }));
            if (!compoundIndex)
                console.warn("The query " + JSON.stringify(indexOrCrit) + " on " + this.name + " would benefit of a " +
                    ("compound index [" + keyPaths.join('+') + "]"));
            // Ok, now let's fallback to finding at least one matching index
            // and filter the rest.
            var idxByName = this.schema.idxByName;
            var simpleIndex = keyPaths.reduce(function (r, keyPath) { return [
                r[0] || idxByName[keyPath],
                r[0] || !idxByName[keyPath] ?
                    combine(r[1], function (x) { return '' + getByKeyPath(x, keyPath) ==
                        '' + indexOrCrit[keyPath]; })
                    : r[1]
            ]; }, [null, null]);
            var idx = simpleIndex[0];
            return idx ?
                this.where(idx.name).equals(indexOrCrit[idx.keyPath])
                    .filter(simpleIndex[1]) :
                compoundIndex ?
                    this.filter(simpleIndex[1]) : // Has compound but browser bad. Allow filter.
                    this.where(keyPaths).equals(''); // No index at all. Fail lazily.
        },
        count: function (cb) {
            return this.toCollection().count(cb);
        },
        offset: function (offset) {
            return this.toCollection().offset(offset);
        },
        limit: function (numRows) {
            return this.toCollection().limit(numRows);
        },
        reverse: function () {
            return this.toCollection().reverse();
        },
        filter: function (filterFunction) {
            return this.toCollection().and(filterFunction);
        },
        each: function (fn) {
            return this.toCollection().each(fn);
        },
        toArray: function (cb) {
            return this.toCollection().toArray(cb);
        },
        orderBy: function (index) {
            return new Collection(new WhereClause(this, isArray(index) ?
                "[" + index.join('+') + "]" :
                index));
        },
        toCollection: function () {
            return new Collection(new WhereClause(this));
        },
        mapToClass: function (constructor, structure) {
            /// <summary>
            ///     Map table to a javascript constructor function. Objects returned from the database will be instances of this class, making
            ///     it possible to the instanceOf operator as well as extending the class using constructor.prototype.method = function(){...}.
            /// </summary>
            /// <param name="constructor">Constructor function representing the class.</param>
            /// <param name="structure" optional="true">Helps IDE code completion by knowing the members that objects contain and not just the indexes. Also
            /// know what type each member has. Example: {name: String, emailAddresses: [String], password}</param>
            this.schema.mappedClass = constructor;
            var instanceTemplate = Object.create(constructor.prototype);
            if (structure) {
                // structure and instanceTemplate is for IDE code competion only while constructor.prototype is for actual inheritance.
                applyStructure(instanceTemplate, structure);
            }
            this.schema.instanceTemplate = instanceTemplate;
            // Now, subscribe to the when("reading") event to make all objects that come out from this table inherit from given class
            // no matter which method to use for reading (Table.get() or Table.where(...)... )
            var readHook = function (obj) {
                if (!obj)
                    return obj; // No valid object. (Value is null). Return as is.
                // Create a new object that derives from constructor:
                var res = Object.create(constructor.prototype);
                // Clone members:
                for (var m in obj)
                    if (hasOwn(obj, m))
                        try {
                            res[m] = obj[m];
                        }
                        catch (_) { }
                return res;
            };
            if (this.schema.readHook) {
                this.hook.reading.unsubscribe(this.schema.readHook);
            }
            this.schema.readHook = readHook;
            this.hook("reading", readHook);
            return constructor;
        },
        defineClass: function (structure) {
            /// <summary>
            ///     Define all members of the class that represents the table. This will help code completion of when objects are read from the database
            ///     as well as making it possible to extend the prototype of the returned constructor function.
            /// </summary>
            /// <param name="structure">Helps IDE code completion by knowing the members that objects contain and not just the indexes. Also
            /// know what type each member has. Example: {name: String, emailAddresses: [String], properties: {shoeSize: Number}}</param>
            return this.mapToClass(Dexie.defineClass(structure), structure);
        },
        bulkDelete: function (keys$$1) {
            if (this.hook.deleting.fire === nop) {
                return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {
                    resolve(bulkDelete(idbstore, trans, keys$$1, false, nop));
                });
            }
            else {
                return this
                    .where(':id')
                    .anyOf(keys$$1)
                    .delete()
                    .then(function () { }); // Resolve with undefined.
            }
        },
        bulkPut: function (objects, keys$$1) {
            var _this = this;
            return this._idbstore(READWRITE, function (resolve, reject, idbstore) {
                if (!idbstore.keyPath && !_this.schema.primKey.auto && !keys$$1)
                    throw new exceptions.InvalidArgument("bulkPut() with non-inbound keys requires keys array in second argument");
                if (idbstore.keyPath && keys$$1)
                    throw new exceptions.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");
                if (keys$$1 && keys$$1.length !== objects.length)
                    throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");
                if (objects.length === 0)
                    return resolve(); // Caller provided empty list.
                var done = function (result) {
                    if (errorList.length === 0)
                        resolve(result);
                    else
                        reject(new BulkError(_this.name + ".bulkPut(): " + errorList.length + " of " + numObjs + " operations failed", errorList));
                };
                var req, errorList = [], errorHandler, numObjs = objects.length, table = _this;
                if (_this.hook.creating.fire === nop && _this.hook.updating.fire === nop) {
                    //
                    // Standard Bulk (no 'creating' or 'updating' hooks to care about)
                    //
                    errorHandler = BulkErrorHandlerCatchAll(errorList);
                    for (var i = 0, l = objects.length; i < l; ++i) {
                        req = keys$$1 ? idbstore.put(objects[i], keys$$1[i]) : idbstore.put(objects[i]);
                        req.onerror = errorHandler;
                    }
                    // Only need to catch success or error on the last operation
                    // according to the IDB spec.
                    req.onerror = BulkErrorHandlerCatchAll(errorList, done);
                    req.onsuccess = eventSuccessHandler(done);
                }
                else {
                    var effectiveKeys = keys$$1 || idbstore.keyPath && objects.map(function (o) { return getByKeyPath(o, idbstore.keyPath); });
                    // Generate map of {[key]: object}
                    var objectLookup = effectiveKeys && arrayToObject(effectiveKeys, function (key, i) { return key != null && [key, objects[i]]; });
                    var promise = !effectiveKeys ?
                        // Auto-incremented key-less objects only without any keys argument.
                        table.bulkAdd(objects) :
                        // Keys provided. Either as inbound in provided objects, or as a keys argument.
                        // Begin with updating those that exists in DB:
                        table.where(':id').anyOf(effectiveKeys.filter(function (key) { return key != null; })).modify(function () {
                            this.value = objectLookup[this.primKey];
                            objectLookup[this.primKey] = null; // Mark as "don't add this"
                        }).catch(ModifyError, function (e) {
                            errorList = e.failures; // No need to concat here. These are the first errors added.
                        }).then(function () {
                            // Now, let's examine which items didnt exist so we can add them:
                            var objsToAdd = [], keysToAdd = keys$$1 && [];
                            // Iterate backwards. Why? Because if same key was used twice, just add the last one.
                            for (var i = effectiveKeys.length - 1; i >= 0; --i) {
                                var key = effectiveKeys[i];
                                if (key == null || objectLookup[key]) {
                                    objsToAdd.push(objects[i]);
                                    keys$$1 && keysToAdd.push(key);
                                    if (key != null)
                                        objectLookup[key] = null; // Mark as "dont add again"
                                }
                            }
                            // The items are in reverse order so reverse them before adding.
                            // Could be important in order to get auto-incremented keys the way the caller
                            // would expect. Could have used unshift instead of push()/reverse(),
                            // but: http://jsperf.com/unshift-vs-reverse
                            objsToAdd.reverse();
                            keys$$1 && keysToAdd.reverse();
                            return table.bulkAdd(objsToAdd, keysToAdd);
                        }).then(function (lastAddedKey) {
                            // Resolve with key of the last object in given arguments to bulkPut():
                            var lastEffectiveKey = effectiveKeys[effectiveKeys.length - 1]; // Key was provided.
                            return lastEffectiveKey != null ? lastEffectiveKey : lastAddedKey;
                        });
                    promise.then(done).catch(BulkError, function (e) {
                        // Concat failure from ModifyError and reject using our 'done' method.
                        errorList = errorList.concat(e.failures);
                        done();
                    }).catch(reject);
                }
            }, "locked"); // If called from transaction scope, lock transaction til all steps are done.
        },
        bulkAdd: function (objects, keys$$1) {
            var self = this, creatingHook = this.hook.creating.fire;
            return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {
                if (!idbstore.keyPath && !self.schema.primKey.auto && !keys$$1)
                    throw new exceptions.InvalidArgument("bulkAdd() with non-inbound keys requires keys array in second argument");
                if (idbstore.keyPath && keys$$1)
                    throw new exceptions.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");
                if (keys$$1 && keys$$1.length !== objects.length)
                    throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");
                if (objects.length === 0)
                    return resolve(); // Caller provided empty list.
                function done(result) {
                    if (errorList.length === 0)
                        resolve(result);
                    else
                        reject(new BulkError(self.name + ".bulkAdd(): " + errorList.length + " of " + numObjs + " operations failed", errorList));
                }
                var req, errorList = [], errorHandler, successHandler, numObjs = objects.length;
                if (creatingHook !== nop) {
                    //
                    // There are subscribers to hook('creating')
                    // Must behave as documented.
                    //
                    var keyPath = idbstore.keyPath, hookCtx;
                    errorHandler = BulkErrorHandlerCatchAll(errorList, null, true);
                    successHandler = hookedEventSuccessHandler(null);
                    tryCatch(function () {
                        for (var i = 0, l = objects.length; i < l; ++i) {
                            hookCtx = { onerror: null, onsuccess: null };
                            var key = keys$$1 && keys$$1[i];
                            var obj = objects[i], effectiveKey = keys$$1 ? key : keyPath ? getByKeyPath(obj, keyPath) : undefined, keyToUse = creatingHook.call(hookCtx, effectiveKey, obj, trans);
                            if (effectiveKey == null && keyToUse != null) {
                                if (keyPath) {
                                    obj = deepClone(obj);
                                    setByKeyPath(obj, keyPath, keyToUse);
                                }
                                else {
                                    key = keyToUse;
                                }
                            }
                            req = key != null ? idbstore.add(obj, key) : idbstore.add(obj);
                            req._hookCtx = hookCtx;
                            if (i < l - 1) {
                                req.onerror = errorHandler;
                                if (hookCtx.onsuccess)
                                    req.onsuccess = successHandler;
                            }
                        }
                    }, function (err) {
                        hookCtx.onerror && hookCtx.onerror(err);
                        throw err;
                    });
                    req.onerror = BulkErrorHandlerCatchAll(errorList, done, true);
                    req.onsuccess = hookedEventSuccessHandler(done);
                }
                else {
                    //
                    // Standard Bulk (no 'creating' hook to care about)
                    //
                    errorHandler = BulkErrorHandlerCatchAll(errorList);
                    for (var i = 0, l = objects.length; i < l; ++i) {
                        req = keys$$1 ? idbstore.add(objects[i], keys$$1[i]) : idbstore.add(objects[i]);
                        req.onerror = errorHandler;
                    }
                    // Only need to catch success or error on the last operation
                    // according to the IDB spec.
                    req.onerror = BulkErrorHandlerCatchAll(errorList, done);
                    req.onsuccess = eventSuccessHandler(done);
                }
            });
        },
        add: function (obj, key) {
            /// <summary>
            ///   Add an object to the database. In case an object with same primary key already exists, the object will not be added.
            /// </summary>
            /// <param name="obj" type="Object">A javascript object to insert</param>
            /// <param name="key" optional="true">Primary key</param>
            var creatingHook = this.hook.creating.fire;
            return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {
                var hookCtx = { onsuccess: null, onerror: null };
                if (creatingHook !== nop) {
                    var effectiveKey = (key != null) ? key : (idbstore.keyPath ? getByKeyPath(obj, idbstore.keyPath) : undefined);
                    var keyToUse = creatingHook.call(hookCtx, effectiveKey, obj, trans); // Allow subscribers to when("creating") to generate the key.
                    if (effectiveKey == null && keyToUse != null) {
                        if (idbstore.keyPath)
                            setByKeyPath(obj, idbstore.keyPath, keyToUse);
                        else
                            key = keyToUse;
                    }
                }
                try {
                    var req = key != null ? idbstore.add(obj, key) : idbstore.add(obj);
                    req._hookCtx = hookCtx;
                    req.onerror = hookedEventRejectHandler(reject);
                    req.onsuccess = hookedEventSuccessHandler(function (result) {
                        // TODO: Remove these two lines in next major release (2.0?)
                        // It's no good practice to have side effects on provided parameters
                        var keyPath = idbstore.keyPath;
                        if (keyPath)
                            setByKeyPath(obj, keyPath, result);
                        resolve(result);
                    });
                }
                catch (e) {
                    if (hookCtx.onerror)
                        hookCtx.onerror(e);
                    throw e;
                }
            });
        },
        put: function (obj, key) {
            var _this = this;
            /// <summary>
            ///   Add an object to the database but in case an object with same primary key alread exists, the existing one will get updated.
            /// </summary>
            /// <param name="obj" type="Object">A javascript object to insert or update</param>
            /// <param name="key" optional="true">Primary key</param>
            var creatingHook = this.hook.creating.fire, updatingHook = this.hook.updating.fire;
            if (creatingHook !== nop || updatingHook !== nop) {
                //
                // People listens to when("creating") or when("updating") events!
                // We must know whether the put operation results in an CREATE or UPDATE.
                //
                var keyPath = this.schema.primKey.keyPath;
                var effectiveKey = (key !== undefined) ? key : (keyPath && getByKeyPath(obj, keyPath));
                if (effectiveKey == null)
                    return this.add(obj);
                // Since key is optional, make sure we get it from obj if not provided
                // Primary key exist. Lock transaction and try modifying existing. If nothing modified, call add().
                // clone obj before this async call. If caller modifies obj the line after put(), the IDB spec requires that it should not affect operation.
                obj = deepClone(obj);
                return this._trans(READWRITE, function () {
                    return _this.where(":id").equals(effectiveKey).modify(function () {
                        // Replace extisting value with our object
                        // CRUD event firing handled in Collection.modify()
                        this.value = obj;
                    }).then(function (count) { return count === 0 ? _this.add(obj, key) : effectiveKey; });
                }, "locked"); // Lock needed because operation is splitted into modify() and add().
            }
            else {
                // Use the standard IDB put() method.
                return this._idbstore(READWRITE, function (resolve, reject, idbstore) {
                    var req = key !== undefined ? idbstore.put(obj, key) : idbstore.put(obj);
                    req.onerror = eventRejectHandler(reject);
                    req.onsuccess = wrap(function (ev) {
                        var keyPath = idbstore.keyPath;
                        if (keyPath)
                            setByKeyPath(obj, keyPath, ev.target.result);
                        resolve(req.result);
                    });
                });
            }
        },
        'delete': function (key) {
            /// <param name="key">Primary key of the object to delete</param>
            if (this.hook.deleting.subscribers.length) {
                // People listens to when("deleting") event. Must implement delete using Collection.delete() that will
                // call the CRUD event. Only Collection.delete() will know whether an object was actually deleted.
                return this.where(":id").equals(key).delete();
            }
            else {
                // No one listens. Use standard IDB delete() method.
                return this._idbstore(READWRITE, function (resolve, reject, idbstore) {
                    var req = idbstore.delete(key);
                    req.onerror = eventRejectHandler(reject);
                    req.onsuccess = wrap(function () {
                        resolve(req.result);
                    });
                });
            }
        },
        clear: function () {
            if (this.hook.deleting.subscribers.length) {
                // People listens to when("deleting") event. Must implement delete using Collection.delete() that will
                // call the CRUD event. Only Collection.delete() will knows which objects that are actually deleted.
                return this.toCollection().delete();
            }
            else {
                return this._idbstore(READWRITE, function (resolve, reject, idbstore) {
                    var req = idbstore.clear();
                    req.onerror = eventRejectHandler(reject);
                    req.onsuccess = wrap(function () {
                        resolve(req.result);
                    });
                });
            }
        },
        update: function (keyOrObject, modifications) {
            if (typeof modifications !== 'object' || isArray(modifications))
                throw new exceptions.InvalidArgument("Modifications must be an object.");
            if (typeof keyOrObject === 'object' && !isArray(keyOrObject)) {
                // object to modify. Also modify given object with the modifications:
                keys(modifications).forEach(function (keyPath) {
                    setByKeyPath(keyOrObject, keyPath, modifications[keyPath]);
                });
                var key = getByKeyPath(keyOrObject, this.schema.primKey.keyPath);
                if (key === undefined)
                    return rejection(new exceptions.InvalidArgument("Given object does not contain its primary key"));
                return this.where(":id").equals(key).modify(modifications);
            }
            else {
                // key to modify
                return this.where(":id").equals(keyOrObject).modify(modifications);
            }
        }
    });
    //
    //
    //
    // Transaction Class
    //
    //
    //
    function Transaction(mode, storeNames, dbschema, parent) {
        var _this = this;
        /// <summary>
        ///    Transaction class. Represents a database transaction. All operations on db goes through a Transaction.
        /// </summary>
        /// <param name="mode" type="String">Any of "readwrite" or "readonly"</param>
        /// <param name="storeNames" type="Array">Array of table names to operate on</param>
        this.db = db;
        this.mode = mode;
        this.storeNames = storeNames;
        this.idbtrans = null;
        this.on = Events(this, "complete", "error", "abort");
        this.parent = parent || null;
        this.active = true;
        this._reculock = 0;
        this._blockedFuncs = [];
        this._resolve = null;
        this._reject = null;
        this._waitingFor = null;
        this._waitingQueue = null;
        this._spinCount = 0; // Just for debugging waitFor()
        this._completion = new Promise(function (resolve, reject) {
            _this._resolve = resolve;
            _this._reject = reject;
        });
        this._completion.then(function () {
            _this.active = false;
            _this.on.complete.fire();
        }, function (e) {
            var wasActive = _this.active;
            _this.active = false;
            _this.on.error.fire(e);
            _this.parent ?
                _this.parent._reject(e) :
                wasActive && _this.idbtrans && _this.idbtrans.abort();
            return rejection(e); // Indicate we actually DO NOT catch this error.
        });
    }
    props(Transaction.prototype, {
        //
        // Transaction Protected Methods (not required by API users, but needed internally and eventually by dexie extensions)
        //
        _lock: function () {
            assert(!PSD.global); // Locking and unlocking reuires to be within a PSD scope.
            // Temporary set all requests into a pending queue if they are called before database is ready.
            ++this._reculock; // Recursive read/write lock pattern using PSD (Promise Specific Data) instead of TLS (Thread Local Storage)
            if (this._reculock === 1 && !PSD.global)
                PSD.lockOwnerFor = this;
            return this;
        },
        _unlock: function () {
            assert(!PSD.global); // Locking and unlocking reuires to be within a PSD scope.
            if (--this._reculock === 0) {
                if (!PSD.global)
                    PSD.lockOwnerFor = null;
                while (this._blockedFuncs.length > 0 && !this._locked()) {
                    var fnAndPSD = this._blockedFuncs.shift();
                    try {
                        usePSD(fnAndPSD[1], fnAndPSD[0]);
                    }
                    catch (e) { }
                }
            }
            return this;
        },
        _locked: function () {
            // Checks if any write-lock is applied on this transaction.
            // To simplify the Dexie API for extension implementations, we support recursive locks.
            // This is accomplished by using "Promise Specific Data" (PSD).
            // PSD data is bound to a Promise and any child Promise emitted through then() or resolve( new Promise() ).
            // PSD is local to code executing on top of the call stacks of any of any code executed by Promise():
            //         * callback given to the Promise() constructor  (function (resolve, reject){...})
            //         * callbacks given to then()/catch()/finally() methods (function (value){...})
            // If creating a new independant Promise instance from within a Promise call stack, the new Promise will derive the PSD from the call stack of the parent Promise.
            // Derivation is done so that the inner PSD __proto__ points to the outer PSD.
            // PSD.lockOwnerFor will point to current transaction object if the currently executing PSD scope owns the lock.
            return this._reculock && PSD.lockOwnerFor !== this;
        },
        create: function (idbtrans) {
            var _this = this;
            if (!this.mode)
                return this;
            assert(!this.idbtrans);
            if (!idbtrans && !idbdb) {
                switch (dbOpenError && dbOpenError.name) {
                    case "DatabaseClosedError":
                        // Errors where it is no difference whether it was caused by the user operation or an earlier call to db.open()
                        throw new exceptions.DatabaseClosed(dbOpenError);
                    case "MissingAPIError":
                        // Errors where it is no difference whether it was caused by the user operation or an earlier call to db.open()
                        throw new exceptions.MissingAPI(dbOpenError.message, dbOpenError);
                    default:
                        // Make it clear that the user operation was not what caused the error - the error had occurred earlier on db.open()!
                        throw new exceptions.OpenFailed(dbOpenError);
                }
            }
            if (!this.active)
                throw new exceptions.TransactionInactive();
            assert(this._completion._state === null);
            idbtrans = this.idbtrans = idbtrans || idbdb.transaction(safariMultiStoreFix(this.storeNames), this.mode);
            idbtrans.onerror = wrap(function (ev) {
                preventDefault(ev); // Prohibit default bubbling to window.error
                _this._reject(idbtrans.error);
            });
            idbtrans.onabort = wrap(function (ev) {
                preventDefault(ev);
                _this.active && _this._reject(new exceptions.Abort(idbtrans.error));
                _this.active = false;
                _this.on("abort").fire(ev);
            });
            idbtrans.oncomplete = wrap(function () {
                _this.active = false;
                _this._resolve();
            });
            return this;
        },
        _promise: function (mode, fn, bWriteLock) {
            var _this = this;
            if (mode === READWRITE && this.mode !== READWRITE)
                return rejection(new exceptions.ReadOnly("Transaction is readonly"));
            if (!this.active)
                return rejection(new exceptions.TransactionInactive());
            if (this._locked()) {
                return new Promise(function (resolve, reject) {
                    _this._blockedFuncs.push([function () {
                            _this._promise(mode, fn, bWriteLock).then(resolve, reject);
                        }, PSD]);
                });
            }
            else if (bWriteLock) {
                return newScope(function () {
                    var p = new Promise(function (resolve, reject) {
                        _this._lock();
                        var rv = fn(resolve, reject, _this);
                        if (rv && rv.then)
                            rv.then(resolve, reject);
                    });
                    p.finally(function () { return _this._unlock(); });
                    p._lib = true;
                    return p;
                });
            }
            else {
                var p = new Promise(function (resolve, reject) {
                    var rv = fn(resolve, reject, _this);
                    if (rv && rv.then)
                        rv.then(resolve, reject);
                });
                p._lib = true;
                return p;
            }
        },
        _root: function () {
            return this.parent ? this.parent._root() : this;
        },
        waitFor: function (promise) {
            // Always operate on the root transaction (in case this is a sub stransaction)
            var root = this._root();
            // For stability reasons, convert parameter to promise no matter what type is passed to waitFor().
            // (We must be able to call .then() on it.)
            promise = Promise.resolve(promise);
            if (root._waitingFor) {
                // Already called waitFor(). Wait for both to complete.
                root._waitingFor = root._waitingFor.then(function () { return promise; });
            }
            else {
                // We're not in waiting state. Start waiting state.
                root._waitingFor = promise;
                root._waitingQueue = [];
                // Start interacting with indexedDB until promise completes:
                var store = root.idbtrans.objectStore(root.storeNames[0]);
                (function spin() {
                    ++root._spinCount; // For debugging only
                    while (root._waitingQueue.length)
                        (root._waitingQueue.shift())();
                    if (root._waitingFor)
                        store.get(-Infinity).onsuccess = spin;
                }());
            }
            var currentWaitPromise = root._waitingFor;
            return new Promise(function (resolve, reject) {
                promise.then(function (res) { return root._waitingQueue.push(wrap(resolve.bind(null, res))); }, function (err) { return root._waitingQueue.push(wrap(reject.bind(null, err))); }).finally(function () {
                    if (root._waitingFor === currentWaitPromise) {
                        // No one added a wait after us. Safe to stop the spinning.
                        root._waitingFor = null;
                    }
                });
            });
        },
        //
        // Transaction Public Properties and Methods
        //
        abort: function () {
            this.active && this._reject(new exceptions.Abort());
            this.active = false;
        },
        tables: {
            get: deprecated("Transaction.tables", function () { return allTables; })
        },
        table: function (name) {
            var table = db.table(name); // Don't check that table is part of transaction. It must fail lazily!
            return new Table(name, table.schema, this);
        }
    });
    //
    //
    //
    // WhereClause
    //
    //
    //
    function WhereClause(table, index, orCollection) {
        /// <param name="table" type="Table"></param>
        /// <param name="index" type="String" optional="true"></param>
        /// <param name="orCollection" type="Collection" optional="true"></param>
        this._ctx = {
            table: table,
            index: index === ":id" ? null : index,
            or: orCollection
        };
    }
    props(WhereClause.prototype, function () {
        // WhereClause private methods
        function fail(collectionOrWhereClause, err, T) {
            var collection = collectionOrWhereClause instanceof WhereClause ?
                new Collection(collectionOrWhereClause) :
                collectionOrWhereClause;
            collection._ctx.error = T ? new T(err) : new TypeError(err);
            return collection;
        }
        function emptyCollection(whereClause) {
            return new Collection(whereClause, function () { return IDBKeyRange.only(""); }).limit(0);
        }
        function upperFactory(dir) {
            return dir === "next" ? function (s) { return s.toUpperCase(); } : function (s) { return s.toLowerCase(); };
        }
        function lowerFactory(dir) {
            return dir === "next" ? function (s) { return s.toLowerCase(); } : function (s) { return s.toUpperCase(); };
        }
        function nextCasing(key, lowerKey, upperNeedle, lowerNeedle, cmp, dir) {
            var length = Math.min(key.length, lowerNeedle.length);
            var llp = -1;
            for (var i = 0; i < length; ++i) {
                var lwrKeyChar = lowerKey[i];
                if (lwrKeyChar !== lowerNeedle[i]) {
                    if (cmp(key[i], upperNeedle[i]) < 0)
                        return key.substr(0, i) + upperNeedle[i] + upperNeedle.substr(i + 1);
                    if (cmp(key[i], lowerNeedle[i]) < 0)
                        return key.substr(0, i) + lowerNeedle[i] + upperNeedle.substr(i + 1);
                    if (llp >= 0)
                        return key.substr(0, llp) + lowerKey[llp] + upperNeedle.substr(llp + 1);
                    return null;
                }
                if (cmp(key[i], lwrKeyChar) < 0)
                    llp = i;
            }
            if (length < lowerNeedle.length && dir === "next")
                return key + upperNeedle.substr(key.length);
            if (length < key.length && dir === "prev")
                return key.substr(0, upperNeedle.length);
            return (llp < 0 ? null : key.substr(0, llp) + lowerNeedle[llp] + upperNeedle.substr(llp + 1));
        }
        function addIgnoreCaseAlgorithm(whereClause, match, needles, suffix) {
            /// <param name="needles" type="Array" elementType="String"></param>
            var upper, lower, compare, upperNeedles, lowerNeedles, direction, nextKeySuffix, needlesLen = needles.length;
            if (!needles.every(function (s) { return typeof s === 'string'; })) {
                return fail(whereClause, STRING_EXPECTED);
            }
            function initDirection(dir) {
                upper = upperFactory(dir);
                lower = lowerFactory(dir);
                compare = (dir === "next" ? simpleCompare : simpleCompareReverse);
                var needleBounds = needles.map(function (needle) {
                    return { lower: lower(needle), upper: upper(needle) };
                }).sort(function (a, b) {
                    return compare(a.lower, b.lower);
                });
                upperNeedles = needleBounds.map(function (nb) { return nb.upper; });
                lowerNeedles = needleBounds.map(function (nb) { return nb.lower; });
                direction = dir;
                nextKeySuffix = (dir === "next" ? "" : suffix);
            }
            initDirection("next");
            var c = new Collection(whereClause, function () {
                return IDBKeyRange.bound(upperNeedles[0], lowerNeedles[needlesLen - 1] + suffix);
            });
            c._ondirectionchange = function (direction) {
                // This event onlys occur before filter is called the first time.
                initDirection(direction);
            };
            var firstPossibleNeedle = 0;
            c._addAlgorithm(function (cursor, advance, resolve) {
                /// <param name="cursor" type="IDBCursor"></param>
                /// <param name="advance" type="Function"></param>
                /// <param name="resolve" type="Function"></param>
                var key = cursor.key;
                if (typeof key !== 'string')
                    return false;
                var lowerKey = lower(key);
                if (match(lowerKey, lowerNeedles, firstPossibleNeedle)) {
                    return true;
                }
                else {
                    var lowestPossibleCasing = null;
                    for (var i = firstPossibleNeedle; i < needlesLen; ++i) {
                        var casing = nextCasing(key, lowerKey, upperNeedles[i], lowerNeedles[i], compare, direction);
                        if (casing === null && lowestPossibleCasing === null)
                            firstPossibleNeedle = i + 1;
                        else if (lowestPossibleCasing === null || compare(lowestPossibleCasing, casing) > 0) {
                            lowestPossibleCasing = casing;
                        }
                    }
                    if (lowestPossibleCasing !== null) {
                        advance(function () { cursor.continue(lowestPossibleCasing + nextKeySuffix); });
                    }
                    else {
                        advance(resolve);
                    }
                    return false;
                }
            });
            return c;
        }
        //
        // WhereClause public methods
        //
        return {
            between: function (lower, upper, includeLower, includeUpper) {
                /// <summary>
                ///     Filter out records whose where-field lays between given lower and upper values. Applies to Strings, Numbers and Dates.
                /// </summary>
                /// <param name="lower"></param>
                /// <param name="upper"></param>
                /// <param name="includeLower" optional="true">Whether items that equals lower should be included. Default true.</param>
                /// <param name="includeUpper" optional="true">Whether items that equals upper should be included. Default false.</param>
                /// <returns type="Collection"></returns>
                includeLower = includeLower !== false; // Default to true
                includeUpper = includeUpper === true; // Default to false
                try {
                    if ((cmp(lower, upper) > 0) ||
                        (cmp(lower, upper) === 0 && (includeLower || includeUpper) && !(includeLower && includeUpper)))
                        return emptyCollection(this); // Workaround for idiotic W3C Specification that DataError must be thrown if lower > upper. The natural result would be to return an empty collection.
                    return new Collection(this, function () { return IDBKeyRange.bound(lower, upper, !includeLower, !includeUpper); });
                }
                catch (e) {
                    return fail(this, INVALID_KEY_ARGUMENT);
                }
            },
            equals: function (value) {
                return new Collection(this, function () { return IDBKeyRange.only(value); });
            },
            above: function (value) {
                return new Collection(this, function () { return IDBKeyRange.lowerBound(value, true); });
            },
            aboveOrEqual: function (value) {
                return new Collection(this, function () { return IDBKeyRange.lowerBound(value); });
            },
            below: function (value) {
                return new Collection(this, function () { return IDBKeyRange.upperBound(value, true); });
            },
            belowOrEqual: function (value) {
                return new Collection(this, function () { return IDBKeyRange.upperBound(value); });
            },
            startsWith: function (str) {
                /// <param name="str" type="String"></param>
                if (typeof str !== 'string')
                    return fail(this, STRING_EXPECTED);
                return this.between(str, str + maxString, true, true);
            },
            startsWithIgnoreCase: function (str) {
                /// <param name="str" type="String"></param>
                if (str === "")
                    return this.startsWith(str);
                return addIgnoreCaseAlgorithm(this, function (x, a) { return x.indexOf(a[0]) === 0; }, [str], maxString);
            },
            equalsIgnoreCase: function (str) {
                /// <param name="str" type="String"></param>
                return addIgnoreCaseAlgorithm(this, function (x, a) { return x === a[0]; }, [str], "");
            },
            anyOfIgnoreCase: function () {
                var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
                if (set.length === 0)
                    return emptyCollection(this);
                return addIgnoreCaseAlgorithm(this, function (x, a) { return a.indexOf(x) !== -1; }, set, "");
            },
            startsWithAnyOfIgnoreCase: function () {
                var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
                if (set.length === 0)
                    return emptyCollection(this);
                return addIgnoreCaseAlgorithm(this, function (x, a) {
                    return a.some(function (n) {
                        return x.indexOf(n) === 0;
                    });
                }, set, maxString);
            },
            anyOf: function () {
                var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
                var compare = ascending;
                try {
                    set.sort(compare);
                }
                catch (e) {
                    return fail(this, INVALID_KEY_ARGUMENT);
                }
                if (set.length === 0)
                    return emptyCollection(this);
                var c = new Collection(this, function () { return IDBKeyRange.bound(set[0], set[set.length - 1]); });
                c._ondirectionchange = function (direction) {
                    compare = (direction === "next" ? ascending : descending);
                    set.sort(compare);
                };
                var i = 0;
                c._addAlgorithm(function (cursor, advance, resolve) {
                    var key = cursor.key;
                    while (compare(key, set[i]) > 0) {
                        // The cursor has passed beyond this key. Check next.
                        ++i;
                        if (i === set.length) {
                            // There is no next. Stop searching.
                            advance(resolve);
                            return false;
                        }
                    }
                    if (compare(key, set[i]) === 0) {
                        // The current cursor value should be included and we should continue a single step in case next item has the same key or possibly our next key in set.
                        return true;
                    }
                    else {
                        // cursor.key not yet at set[i]. Forward cursor to the next key to hunt for.
                        advance(function () { cursor.continue(set[i]); });
                        return false;
                    }
                });
                return c;
            },
            notEqual: function (value) {
                return this.inAnyRange([[minKey, value], [value, maxKey]], { includeLowers: false, includeUppers: false });
            },
            noneOf: function () {
                var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
                if (set.length === 0)
                    return new Collection(this); // Return entire collection.
                try {
                    set.sort(ascending);
                }
                catch (e) {
                    return fail(this, INVALID_KEY_ARGUMENT);
                }
                // Transform ["a","b","c"] to a set of ranges for between/above/below: [[minKey,"a"], ["a","b"], ["b","c"], ["c",maxKey]]
                var ranges = set.reduce(function (res, val) { return res ? res.concat([[res[res.length - 1][1], val]]) : [[minKey, val]]; }, null);
                ranges.push([set[set.length - 1], maxKey]);
                return this.inAnyRange(ranges, { includeLowers: false, includeUppers: false });
            },
            /** Filter out values withing given set of ranges.
            * Example, give children and elders a rebate of 50%:
            *
            *   db.friends.where('age').inAnyRange([[0,18],[65,Infinity]]).modify({Rebate: 1/2});
            *
            * @param {(string|number|Date|Array)[][]} ranges
            * @param {{includeLowers: boolean, includeUppers: boolean}} options
            */
            inAnyRange: function (ranges, options) {
                if (ranges.length === 0)
                    return emptyCollection(this);
                if (!ranges.every(function (range) { return range[0] !== undefined && range[1] !== undefined && ascending(range[0], range[1]) <= 0; })) {
                    return fail(this, "First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower", exceptions.InvalidArgument);
                }
                var includeLowers = !options || options.includeLowers !== false; // Default to true
                var includeUppers = options && options.includeUppers === true; // Default to false
                function addRange(ranges, newRange) {
                    for (var i = 0, l = ranges.length; i < l; ++i) {
                        var range = ranges[i];
                        if (cmp(newRange[0], range[1]) < 0 && cmp(newRange[1], range[0]) > 0) {
                            range[0] = min(range[0], newRange[0]);
                            range[1] = max(range[1], newRange[1]);
                            break;
                        }
                    }
                    if (i === l)
                        ranges.push(newRange);
                    return ranges;
                }
                var sortDirection = ascending;
                function rangeSorter(a, b) { return sortDirection(a[0], b[0]); }
                // Join overlapping ranges
                var set;
                try {
                    set = ranges.reduce(addRange, []);
                    set.sort(rangeSorter);
                }
                catch (ex) {
                    return fail(this, INVALID_KEY_ARGUMENT);
                }
                var i = 0;
                var keyIsBeyondCurrentEntry = includeUppers ?
                    function (key) { return ascending(key, set[i][1]) > 0; } :
                    function (key) { return ascending(key, set[i][1]) >= 0; };
                var keyIsBeforeCurrentEntry = includeLowers ?
                    function (key) { return descending(key, set[i][0]) > 0; } :
                    function (key) { return descending(key, set[i][0]) >= 0; };
                function keyWithinCurrentRange(key) {
                    return !keyIsBeyondCurrentEntry(key) && !keyIsBeforeCurrentEntry(key);
                }
                var checkKey = keyIsBeyondCurrentEntry;
                var c = new Collection(this, function () {
                    return IDBKeyRange.bound(set[0][0], set[set.length - 1][1], !includeLowers, !includeUppers);
                });
                c._ondirectionchange = function (direction) {
                    if (direction === "next") {
                        checkKey = keyIsBeyondCurrentEntry;
                        sortDirection = ascending;
                    }
                    else {
                        checkKey = keyIsBeforeCurrentEntry;
                        sortDirection = descending;
                    }
                    set.sort(rangeSorter);
                };
                c._addAlgorithm(function (cursor, advance, resolve) {
                    var key = cursor.key;
                    while (checkKey(key)) {
                        // The cursor has passed beyond this key. Check next.
                        ++i;
                        if (i === set.length) {
                            // There is no next. Stop searching.
                            advance(resolve);
                            return false;
                        }
                    }
                    if (keyWithinCurrentRange(key)) {
                        // The current cursor value should be included and we should continue a single step in case next item has the same key or possibly our next key in set.
                        return true;
                    }
                    else if (cmp(key, set[i][1]) === 0 || cmp(key, set[i][0]) === 0) {
                        // includeUpper or includeLower is false so keyWithinCurrentRange() returns false even though we are at range border.
                        // Continue to next key but don't include this one.
                        return false;
                    }
                    else {
                        // cursor.key not yet at set[i]. Forward cursor to the next key to hunt for.
                        advance(function () {
                            if (sortDirection === ascending)
                                cursor.continue(set[i][0]);
                            else
                                cursor.continue(set[i][1]);
                        });
                        return false;
                    }
                });
                return c;
            },
            startsWithAnyOf: function () {
                var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
                if (!set.every(function (s) { return typeof s === 'string'; })) {
                    return fail(this, "startsWithAnyOf() only works with strings");
                }
                if (set.length === 0)
                    return emptyCollection(this);
                return this.inAnyRange(set.map(function (str) {
                    return [str, str + maxString];
                }));
            }
        };
    });
    //
    //
    //
    // Collection Class
    //
    //
    //
    function Collection(whereClause, keyRangeGenerator) {
        /// <summary>
        ///
        /// </summary>
        /// <param name="whereClause" type="WhereClause">Where clause instance</param>
        /// <param name="keyRangeGenerator" value="function(){ return IDBKeyRange.bound(0,1);}" optional="true"></param>
        var keyRange = null, error = null;
        if (keyRangeGenerator)
            try {
                keyRange = keyRangeGenerator();
            }
            catch (ex) {
                error = ex;
            }
        var whereCtx = whereClause._ctx, table = whereCtx.table;
        this._ctx = {
            table: table,
            index: whereCtx.index,
            isPrimKey: (!whereCtx.index || (table.schema.primKey.keyPath && whereCtx.index === table.schema.primKey.name)),
            range: keyRange,
            keysOnly: false,
            dir: "next",
            unique: "",
            algorithm: null,
            filter: null,
            replayFilter: null,
            justLimit: true,
            isMatch: null,
            offset: 0,
            limit: Infinity,
            error: error,
            or: whereCtx.or,
            valueMapper: table.hook.reading.fire
        };
    }
    function isPlainKeyRange(ctx, ignoreLimitFilter) {
        return !(ctx.filter || ctx.algorithm || ctx.or) &&
            (ignoreLimitFilter ? ctx.justLimit : !ctx.replayFilter);
    }
    props(Collection.prototype, function () {
        //
        // Collection Private Functions
        //
        function addFilter(ctx, fn) {
            ctx.filter = combine(ctx.filter, fn);
        }
        function addReplayFilter(ctx, factory, isLimitFilter) {
            var curr = ctx.replayFilter;
            ctx.replayFilter = curr ? function () { return combine(curr(), factory()); } : factory;
            ctx.justLimit = isLimitFilter && !curr;
        }
        function addMatchFilter(ctx, fn) {
            ctx.isMatch = combine(ctx.isMatch, fn);
        }
        /** @param ctx {
         *      isPrimKey: boolean,
         *      table: Table,
         *      index: string
         * }
         * @param store IDBObjectStore
         **/
        function getIndexOrStore(ctx, store) {
            if (ctx.isPrimKey)
                return store;
            var indexSpec = ctx.table.schema.idxByName[ctx.index];
            if (!indexSpec)
                throw new exceptions.Schema("KeyPath " + ctx.index + " on object store " + store.name + " is not indexed");
            return store.index(indexSpec.name);
        }
        /** @param ctx {
         *      isPrimKey: boolean,
         *      table: Table,
         *      index: string,
         *      keysOnly: boolean,
         *      range?: IDBKeyRange,
         *      dir: "next" | "prev"
         * }
         */
        function openCursor(ctx, store) {
            var idxOrStore = getIndexOrStore(ctx, store);
            return ctx.keysOnly && 'openKeyCursor' in idxOrStore ?
                idxOrStore.openKeyCursor(ctx.range || null, ctx.dir + ctx.unique) :
                idxOrStore.openCursor(ctx.range || null, ctx.dir + ctx.unique);
        }
        function iter(ctx, fn, resolve, reject, idbstore) {
            var filter = ctx.replayFilter ? combine(ctx.filter, ctx.replayFilter()) : ctx.filter;
            if (!ctx.or) {
                iterate(openCursor(ctx, idbstore), combine(ctx.algorithm, filter), fn, resolve, reject, !ctx.keysOnly && ctx.valueMapper);
            }
            else
                (function () {
                    var set = {};
                    var resolved = 0;
                    function resolveboth() {
                        if (++resolved === 2)
                            resolve(); // Seems like we just support or btwn max 2 expressions, but there are no limit because we do recursion.
                    }
                    function union(item, cursor, advance) {
                        if (!filter || filter(cursor, advance, resolveboth, reject)) {
                            var primaryKey = cursor.primaryKey;
                            var key = '' + primaryKey;
                            if (key === '[object ArrayBuffer]')
                                key = '' + new Uint8Array(primaryKey);
                            if (!hasOwn(set, key)) {
                                set[key] = true;
                                fn(item, cursor, advance);
                            }
                        }
                    }
                    ctx.or._iterate(union, resolveboth, reject, idbstore);
                    iterate(openCursor(ctx, idbstore), ctx.algorithm, union, resolveboth, reject, !ctx.keysOnly && ctx.valueMapper);
                })();
        }
        return {
            //
            // Collection Protected Functions
            //
            _read: function (fn, cb) {
                var ctx = this._ctx;
                return ctx.error ?
                    ctx.table._trans(null, rejection.bind(null, ctx.error)) :
                    ctx.table._idbstore(READONLY, fn).then(cb);
            },
            _write: function (fn) {
                var ctx = this._ctx;
                return ctx.error ?
                    ctx.table._trans(null, rejection.bind(null, ctx.error)) :
                    ctx.table._idbstore(READWRITE, fn, "locked"); // When doing write operations on collections, always lock the operation so that upcoming operations gets queued.
            },
            _addAlgorithm: function (fn) {
                var ctx = this._ctx;
                ctx.algorithm = combine(ctx.algorithm, fn);
            },
            _iterate: function (fn, resolve, reject, idbstore) {
                return iter(this._ctx, fn, resolve, reject, idbstore);
            },
            clone: function (props$$1) {
                var rv = Object.create(this.constructor.prototype), ctx = Object.create(this._ctx);
                if (props$$1)
                    extend(ctx, props$$1);
                rv._ctx = ctx;
                return rv;
            },
            raw: function () {
                this._ctx.valueMapper = null;
                return this;
            },
            //
            // Collection Public methods
            //
            each: function (fn) {
                var ctx = this._ctx;
                return this._read(function (resolve, reject, idbstore) {
                    iter(ctx, fn, resolve, reject, idbstore);
                });
            },
            count: function (cb) {
                var ctx = this._ctx;
                if (isPlainKeyRange(ctx, true)) {
                    // This is a plain key range. We can use the count() method if the index.
                    return this._read(function (resolve, reject, idbstore) {
                        var idx = getIndexOrStore(ctx, idbstore);
                        var req = (ctx.range ? idx.count(ctx.range) : idx.count());
                        req.onerror = eventRejectHandler(reject);
                        req.onsuccess = function (e) {
                            resolve(Math.min(e.target.result, ctx.limit));
                        };
                    }, cb);
                }
                else {
                    // Algorithms, filters or expressions are applied. Need to count manually.
                    var count = 0;
                    return this._read(function (resolve, reject, idbstore) {
                        iter(ctx, function () { ++count; return false; }, function () { resolve(count); }, reject, idbstore);
                    }, cb);
                }
            },
            sortBy: function (keyPath, cb) {
                /// <param name="keyPath" type="String"></param>
                var parts = keyPath.split('.').reverse(), lastPart = parts[0], lastIndex = parts.length - 1;
                function getval(obj, i) {
                    if (i)
                        return getval(obj[parts[i]], i - 1);
                    return obj[lastPart];
                }
                var order = this._ctx.dir === "next" ? 1 : -1;
                function sorter(a, b) {
                    var aVal = getval(a, lastIndex), bVal = getval(b, lastIndex);
                    return aVal < bVal ? -order : aVal > bVal ? order : 0;
                }
                return this.toArray(function (a) {
                    return a.sort(sorter);
                }).then(cb);
            },
            toArray: function (cb) {
                var ctx = this._ctx;
                return this._read(function (resolve, reject, idbstore) {
                    if (hasGetAll && ctx.dir === 'next' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {
                        // Special optimation if we could use IDBObjectStore.getAll() or
                        // IDBKeyRange.getAll():
                        var readingHook = ctx.table.hook.reading.fire;
                        var idxOrStore = getIndexOrStore(ctx, idbstore);
                        var req = ctx.limit < Infinity ?
                            idxOrStore.getAll(ctx.range, ctx.limit) :
                            idxOrStore.getAll(ctx.range);
                        req.onerror = eventRejectHandler(reject);
                        req.onsuccess = readingHook === mirror ?
                            eventSuccessHandler(resolve) :
                            eventSuccessHandler(function (res) {
                                try {
                                    resolve(res.map(readingHook));
                                }
                                catch (e) {
                                    reject(e);
                                }
                            });
                    }
                    else {
                        // Getting array through a cursor.
                        var a = [];
                        iter(ctx, function (item) { a.push(item); }, function arrayComplete() {
                            resolve(a);
                        }, reject, idbstore);
                    }
                }, cb);
            },
            offset: function (offset) {
                var ctx = this._ctx;
                if (offset <= 0)
                    return this;
                ctx.offset += offset; // For count()
                if (isPlainKeyRange(ctx)) {
                    addReplayFilter(ctx, function () {
                        var offsetLeft = offset;
                        return function (cursor, advance) {
                            if (offsetLeft === 0)
                                return true;
                            if (offsetLeft === 1) {
                                --offsetLeft;
                                return false;
                            }
                            advance(function () {
                                cursor.advance(offsetLeft);
                                offsetLeft = 0;
                            });
                            return false;
                        };
                    });
                }
                else {
                    addReplayFilter(ctx, function () {
                        var offsetLeft = offset;
                        return function () { return (--offsetLeft < 0); };
                    });
                }
                return this;
            },
            limit: function (numRows) {
                this._ctx.limit = Math.min(this._ctx.limit, numRows); // For count()
                addReplayFilter(this._ctx, function () {
                    var rowsLeft = numRows;
                    return function (cursor, advance, resolve) {
                        if (--rowsLeft <= 0)
                            advance(resolve); // Stop after this item has been included
                        return rowsLeft >= 0; // If numRows is already below 0, return false because then 0 was passed to numRows initially. Otherwise we wouldnt come here.
                    };
                }, true);
                return this;
            },
            until: function (filterFunction, bIncludeStopEntry) {
                addFilter(this._ctx, function (cursor, advance, resolve) {
                    if (filterFunction(cursor.value)) {
                        advance(resolve);
                        return bIncludeStopEntry;
                    }
                    else {
                        return true;
                    }
                });
                return this;
            },
            first: function (cb) {
                return this.limit(1).toArray(function (a) { return a[0]; }).then(cb);
            },
            last: function (cb) {
                return this.reverse().first(cb);
            },
            filter: function (filterFunction) {
                /// <param name="jsFunctionFilter" type="Function">function(val){return true/false}</param>
                addFilter(this._ctx, function (cursor) {
                    return filterFunction(cursor.value);
                });
                // match filters not used in Dexie.js but can be used by 3rd part libraries to test a
                // collection for a match without querying DB. Used by Dexie.Observable.
                addMatchFilter(this._ctx, filterFunction);
                return this;
            },
            and: function (filterFunction) {
                return this.filter(filterFunction);
            },
            or: function (indexName) {
                return new WhereClause(this._ctx.table, indexName, this);
            },
            reverse: function () {
                this._ctx.dir = (this._ctx.dir === "prev" ? "next" : "prev");
                if (this._ondirectionchange)
                    this._ondirectionchange(this._ctx.dir);
                return this;
            },
            desc: function () {
                return this.reverse();
            },
            eachKey: function (cb) {
                var ctx = this._ctx;
                ctx.keysOnly = !ctx.isMatch;
                return this.each(function (val, cursor) { cb(cursor.key, cursor); });
            },
            eachUniqueKey: function (cb) {
                this._ctx.unique = "unique";
                return this.eachKey(cb);
            },
            eachPrimaryKey: function (cb) {
                var ctx = this._ctx;
                ctx.keysOnly = !ctx.isMatch;
                return this.each(function (val, cursor) { cb(cursor.primaryKey, cursor); });
            },
            keys: function (cb) {
                var ctx = this._ctx;
                ctx.keysOnly = !ctx.isMatch;
                var a = [];
                return this.each(function (item, cursor) {
                    a.push(cursor.key);
                }).then(function () {
                    return a;
                }).then(cb);
            },
            primaryKeys: function (cb) {
                var ctx = this._ctx;
                if (hasGetAll && ctx.dir === 'next' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {
                    // Special optimation if we could use IDBObjectStore.getAllKeys() or
                    // IDBKeyRange.getAllKeys():
                    return this._read(function (resolve, reject, idbstore) {
                        var idxOrStore = getIndexOrStore(ctx, idbstore);
                        var req = ctx.limit < Infinity ?
                            idxOrStore.getAllKeys(ctx.range, ctx.limit) :
                            idxOrStore.getAllKeys(ctx.range);
                        req.onerror = eventRejectHandler(reject);
                        req.onsuccess = eventSuccessHandler(resolve);
                    }).then(cb);
                }
                ctx.keysOnly = !ctx.isMatch;
                var a = [];
                return this.each(function (item, cursor) {
                    a.push(cursor.primaryKey);
                }).then(function () {
                    return a;
                }).then(cb);
            },
            uniqueKeys: function (cb) {
                this._ctx.unique = "unique";
                return this.keys(cb);
            },
            firstKey: function (cb) {
                return this.limit(1).keys(function (a) { return a[0]; }).then(cb);
            },
            lastKey: function (cb) {
                return this.reverse().firstKey(cb);
            },
            distinct: function () {
                var ctx = this._ctx, idx = ctx.index && ctx.table.schema.idxByName[ctx.index];
                if (!idx || !idx.multi)
                    return this; // distinct() only makes differencies on multiEntry indexes.
                var set = {};
                addFilter(this._ctx, function (cursor) {
                    var strKey = cursor.primaryKey.toString(); // Converts any Date to String, String to String, Number to String and Array to comma-separated string
                    var found = hasOwn(set, strKey);
                    set[strKey] = true;
                    return !found;
                });
                return this;
            },
            //
            // Methods that mutate storage
            //
            modify: function (changes) {
                var self = this, ctx = this._ctx, hook = ctx.table.hook, updatingHook = hook.updating.fire, deletingHook = hook.deleting.fire;
                return this._write(function (resolve, reject, idbstore, trans) {
                    var modifyer;
                    if (typeof changes === 'function') {
                        // Changes is a function that may update, add or delete propterties or even require a deletion the object itself (delete this.item)
                        if (updatingHook === nop && deletingHook === nop) {
                            // Noone cares about what is being changed. Just let the modifier function be the given argument as is.
                            modifyer = changes;
                        }
                        else {
                            // People want to know exactly what is being modified or deleted.
                            // Let modifyer be a proxy function that finds out what changes the caller is actually doing
                            // and call the hooks accordingly!
                            modifyer = function (item) {
                                var origItem = deepClone(item); // Clone the item first so we can compare laters.
                                if (changes.call(this, item, this) === false)
                                    return false; // Call the real modifyer function (If it returns false explicitely, it means it dont want to modify anyting on this object)
                                if (!hasOwn(this, "value")) {
                                    // The real modifyer function requests a deletion of the object. Inform the deletingHook that a deletion is taking place.
                                    deletingHook.call(this, this.primKey, item, trans);
                                }
                                else {
                                    // No deletion. Check what was changed
                                    var objectDiff = getObjectDiff(origItem, this.value);
                                    var additionalChanges = updatingHook.call(this, objectDiff, this.primKey, origItem, trans);
                                    if (additionalChanges) {
                                        // Hook want to apply additional modifications. Make sure to fullfill the will of the hook.
                                        item = this.value;
                                        keys(additionalChanges).forEach(function (keyPath) {
                                            setByKeyPath(item, keyPath, additionalChanges[keyPath]); // Adding {keyPath: undefined} means that the keyPath should be deleted. Handled by setByKeyPath
                                        });
                                    }
                                }
                            };
                        }
                    }
                    else if (updatingHook === nop) {
                        // changes is a set of {keyPath: value} and no one is listening to the updating hook.
                        var keyPaths = keys(changes);
                        var numKeys = keyPaths.length;
                        modifyer = function (item) {
                            var anythingModified = false;
                            for (var i = 0; i < numKeys; ++i) {
                                var keyPath = keyPaths[i], val = changes[keyPath];
                                if (getByKeyPath(item, keyPath) !== val) {
                                    setByKeyPath(item, keyPath, val); // Adding {keyPath: undefined} means that the keyPath should be deleted. Handled by setByKeyPath
                                    anythingModified = true;
                                }
                            }
                            return anythingModified;
                        };
                    }
                    else {
                        // changes is a set of {keyPath: value} and people are listening to the updating hook so we need to call it and
                        // allow it to add additional modifications to make.
                        var origChanges = changes;
                        changes = shallowClone(origChanges); // Let's work with a clone of the changes keyPath/value set so that we can restore it in case a hook extends it.
                        modifyer = function (item) {
                            var anythingModified = false;
                            var additionalChanges = updatingHook.call(this, changes, this.primKey, deepClone(item), trans);
                            if (additionalChanges)
                                extend(changes, additionalChanges);
                            keys(changes).forEach(function (keyPath) {
                                var val = changes[keyPath];
                                if (getByKeyPath(item, keyPath) !== val) {
                                    setByKeyPath(item, keyPath, val);
                                    anythingModified = true;
                                }
                            });
                            if (additionalChanges)
                                changes = shallowClone(origChanges); // Restore original changes for next iteration
                            return anythingModified;
                        };
                    }
                    var count = 0;
                    var successCount = 0;
                    var iterationComplete = false;
                    var failures = [];
                    var failKeys = [];
                    var currentKey = null;
                    function modifyItem(item, cursor) {
                        currentKey = cursor.primaryKey;
                        var thisContext = {
                            primKey: cursor.primaryKey,
                            value: item,
                            onsuccess: null,
                            onerror: null
                        };
                        function onerror(e) {
                            failures.push(e);
                            failKeys.push(thisContext.primKey);
                            checkFinished();
                            return true; // Catch these errors and let a final rejection decide whether or not to abort entire transaction
                        }
                        if (modifyer.call(thisContext, item, thisContext) !== false) {
                            var bDelete = !hasOwn(thisContext, "value");
                            ++count;
                            tryCatch(function () {
                                var req = (bDelete ? cursor.delete() : cursor.update(thisContext.value));
                                req._hookCtx = thisContext;
                                req.onerror = hookedEventRejectHandler(onerror);
                                req.onsuccess = hookedEventSuccessHandler(function () {
                                    ++successCount;
                                    checkFinished();
                                });
                            }, onerror);
                        }
                        else if (thisContext.onsuccess) {
                            // Hook will expect either onerror or onsuccess to always be called!
                            thisContext.onsuccess(thisContext.value);
                        }
                    }
                    function doReject(e) {
                        if (e) {
                            failures.push(e);
                            failKeys.push(currentKey);
                        }
                        return reject(new ModifyError("Error modifying one or more objects", failures, successCount, failKeys));
                    }
                    function checkFinished() {
                        if (iterationComplete && successCount + failures.length === count) {
                            if (failures.length > 0)
                                doReject();
                            else
                                resolve(successCount);
                        }
                    }
                    self.clone().raw()._iterate(modifyItem, function () {
                        iterationComplete = true;
                        checkFinished();
                    }, doReject, idbstore);
                });
            },
            'delete': function () {
                var _this = this;
                var ctx = this._ctx, range = ctx.range, deletingHook = ctx.table.hook.deleting.fire, hasDeleteHook = deletingHook !== nop;
                if (!hasDeleteHook &&
                    isPlainKeyRange(ctx) &&
                    ((ctx.isPrimKey && !hangsOnDeleteLargeKeyRange) || !range)) {
                    // May use IDBObjectStore.delete(IDBKeyRange) in this case (Issue #208)
                    // For chromium, this is the way most optimized version.
                    // For IE/Edge, this could hang the indexedDB engine and make operating system instable
                    // (https://gist.github.com/dfahlander/5a39328f029de18222cf2125d56c38f7)
                    return this._write(function (resolve, reject, idbstore) {
                        // Our API contract is to return a count of deleted items, so we have to count() before delete().
                        var onerror = eventRejectHandler(reject), countReq = (range ? idbstore.count(range) : idbstore.count());
                        countReq.onerror = onerror;
                        countReq.onsuccess = function () {
                            var count = countReq.result;
                            tryCatch(function () {
                                var delReq = (range ? idbstore.delete(range) : idbstore.clear());
                                delReq.onerror = onerror;
                                delReq.onsuccess = function () { return resolve(count); };
                            }, function (err) { return reject(err); });
                        };
                    });
                }
                // Default version to use when collection is not a vanilla IDBKeyRange on the primary key.
                // Divide into chunks to not starve RAM.
                // If has delete hook, we will have to collect not just keys but also objects, so it will use
                // more memory and need lower chunk size.
                var CHUNKSIZE = hasDeleteHook ? 2000 : 10000;
                return this._write(function (resolve, reject, idbstore, trans) {
                    var totalCount = 0;
                    // Clone collection and change its table and set a limit of CHUNKSIZE on the cloned Collection instance.
                    var collection = _this
                        .clone({
                        keysOnly: !ctx.isMatch && !hasDeleteHook
                    }) // load just keys (unless filter() or and() or deleteHook has subscribers)
                        .distinct() // In case multiEntry is used, never delete same key twice because resulting count
                        .limit(CHUNKSIZE)
                        .raw(); // Don't filter through reading-hooks (like mapped classes etc)
                    var keysOrTuples = [];
                    // We're gonna do things on as many chunks that are needed.
                    // Use recursion of nextChunk function:
                    var nextChunk = function () { return collection.each(hasDeleteHook ? function (val, cursor) {
                        // Somebody subscribes to hook('deleting'). Collect all primary keys and their values,
                        // so that the hook can be called with its values in bulkDelete().
                        keysOrTuples.push([cursor.primaryKey, cursor.value]);
                    } : function (val, cursor) {
                        // No one subscribes to hook('deleting'). Collect only primary keys:
                        keysOrTuples.push(cursor.primaryKey);
                    }).then(function () {
                        // Chromium deletes faster when doing it in sort order.
                        hasDeleteHook ?
                            keysOrTuples.sort(function (a, b) { return ascending(a[0], b[0]); }) :
                            keysOrTuples.sort(ascending);
                        return bulkDelete(idbstore, trans, keysOrTuples, hasDeleteHook, deletingHook);
                    }).then(function () {
                        var count = keysOrTuples.length;
                        totalCount += count;
                        keysOrTuples = [];
                        return count < CHUNKSIZE ? totalCount : nextChunk();
                    }); };
                    resolve(nextChunk());
                });
            }
        };
    });
    //
    //
    //
    // ------------------------- Help functions ---------------------------
    //
    //
    //
    function lowerVersionFirst(a, b) {
        return a._cfg.version - b._cfg.version;
    }
    function setApiOnPlace(objs, tableNames, dbschema) {
        tableNames.forEach(function (tableName) {
            var schema = dbschema[tableName];
            objs.forEach(function (obj) {
                if (!(tableName in obj)) {
                    if (obj === Transaction.prototype || obj instanceof Transaction) {
                        // obj is a Transaction prototype (or prototype of a subclass to Transaction)
                        // Make the API a getter that returns this.table(tableName)
                        setProp(obj, tableName, { get: function () { return this.table(tableName); } });
                    }
                    else {
                        // Table will not be bound to a transaction (will use Dexie.currentTransaction)
                        obj[tableName] = new Table(tableName, schema);
                    }
                }
            });
        });
    }
    function removeTablesApi(objs) {
        objs.forEach(function (obj) {
            for (var key in obj) {
                if (obj[key] instanceof Table)
                    delete obj[key];
            }
        });
    }
    function iterate(req, filter, fn, resolve, reject, valueMapper) {
        // Apply valueMapper (hook('reading') or mappped class)
        var mappedFn = valueMapper ? function (x, c, a) { return fn(valueMapper(x), c, a); } : fn;
        // Wrap fn with PSD and microtick stuff from Promise.
        var wrappedFn = wrap(mappedFn, reject);
        if (!req.onerror)
            req.onerror = eventRejectHandler(reject);
        if (filter) {
            req.onsuccess = trycatcher(function filter_record() {
                var cursor = req.result;
                if (cursor) {
                    var c = function () { cursor.continue(); };
                    if (filter(cursor, function (advancer) { c = advancer; }, resolve, reject))
                        wrappedFn(cursor.value, cursor, function (advancer) { c = advancer; });
                    c();
                }
                else {
                    resolve();
                }
            }, reject);
        }
        else {
            req.onsuccess = trycatcher(function filter_record() {
                var cursor = req.result;
                if (cursor) {
                    var c = function () { cursor.continue(); };
                    wrappedFn(cursor.value, cursor, function (advancer) { c = advancer; });
                    c();
                }
                else {
                    resolve();
                }
            }, reject);
        }
    }
    function parseIndexSyntax(indexes) {
        /// <param name="indexes" type="String"></param>
        /// <returns type="Array" elementType="IndexSpec"></returns>
        var rv = [];
        indexes.split(',').forEach(function (index) {
            index = index.trim();
            var name = index.replace(/([&*]|\+\+)/g, ""); // Remove "&", "++" and "*"
            // Let keyPath of "[a+b]" be ["a","b"]:
            var keyPath = /^\[/.test(name) ? name.match(/^\[(.*)\]$/)[1].split('+') : name;
            rv.push(new IndexSpec(name, keyPath || null, /\&/.test(index), /\*/.test(index), /\+\+/.test(index), isArray(keyPath), /\./.test(index)));
        });
        return rv;
    }
    function cmp(key1, key2) {
        return indexedDB.cmp(key1, key2);
    }
    function min(a, b) {
        return cmp(a, b) < 0 ? a : b;
    }
    function max(a, b) {
        return cmp(a, b) > 0 ? a : b;
    }
    function ascending(a, b) {
        return indexedDB.cmp(a, b);
    }
    function descending(a, b) {
        return indexedDB.cmp(b, a);
    }
    function simpleCompare(a, b) {
        return a < b ? -1 : a === b ? 0 : 1;
    }
    function simpleCompareReverse(a, b) {
        return a > b ? -1 : a === b ? 0 : 1;
    }
    function combine(filter1, filter2) {
        return filter1 ?
            filter2 ?
                function () { return filter1.apply(this, arguments) && filter2.apply(this, arguments); } :
                filter1 :
            filter2;
    }
    function readGlobalSchema() {
        db.verno = idbdb.version / 10;
        db._dbSchema = globalSchema = {};
        dbStoreNames = slice(idbdb.objectStoreNames, 0);
        if (dbStoreNames.length === 0)
            return; // Database contains no stores.
        var trans = idbdb.transaction(safariMultiStoreFix(dbStoreNames), 'readonly');
        dbStoreNames.forEach(function (storeName) {
            var store = trans.objectStore(storeName), keyPath = store.keyPath, dotted = keyPath && typeof keyPath === 'string' && keyPath.indexOf('.') !== -1;
            var primKey = new IndexSpec(keyPath, keyPath || "", false, false, !!store.autoIncrement, keyPath && typeof keyPath !== 'string', dotted);
            var indexes = [];
            for (var j = 0; j < store.indexNames.length; ++j) {
                var idbindex = store.index(store.indexNames[j]);
                keyPath = idbindex.keyPath;
                dotted = keyPath && typeof keyPath === 'string' && keyPath.indexOf('.') !== -1;
                var index = new IndexSpec(idbindex.name, keyPath, !!idbindex.unique, !!idbindex.multiEntry, false, keyPath && typeof keyPath !== 'string', dotted);
                indexes.push(index);
            }
            globalSchema[storeName] = new TableSchema(storeName, primKey, indexes, {});
        });
        setApiOnPlace([allTables], keys(globalSchema), globalSchema);
    }
    function adjustToExistingIndexNames(schema, idbtrans) {
        /// <summary>
        /// Issue #30 Problem with existing db - adjust to existing index names when migrating from non-dexie db
        /// </summary>
        /// <param name="schema" type="Object">Map between name and TableSchema</param>
        /// <param name="idbtrans" type="IDBTransaction"></param>
        var storeNames = idbtrans.db.objectStoreNames;
        for (var i = 0; i < storeNames.length; ++i) {
            var storeName = storeNames[i];
            var store = idbtrans.objectStore(storeName);
            hasGetAll = 'getAll' in store;
            for (var j = 0; j < store.indexNames.length; ++j) {
                var indexName = store.indexNames[j];
                var keyPath = store.index(indexName).keyPath;
                var dexieName = typeof keyPath === 'string' ? keyPath : "[" + slice(keyPath).join('+') + "]";
                if (schema[storeName]) {
                    var indexSpec = schema[storeName].idxByName[dexieName];
                    if (indexSpec)
                        indexSpec.name = indexName;
                }
            }
        }
        // Bug with getAll() on Safari ver<604 on Workers only, see discussion following PR #579
        if (/Safari/.test(navigator.userAgent) &&
            !/(Chrome\/|Edge\/)/.test(navigator.userAgent) &&
            _global.WorkerGlobalScope && _global instanceof _global.WorkerGlobalScope &&
            [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604) {
            hasGetAll = false;
        }
    }
    function fireOnBlocked(ev) {
        db.on("blocked").fire(ev);
        // Workaround (not fully*) for missing "versionchange" event in IE,Edge and Safari:
        connections
            .filter(function (c) { return c.name === db.name && c !== db && !c._vcFired; })
            .map(function (c) { return c.on("versionchange").fire(ev); });
    }
    extend(this, {
        Collection: Collection,
        Table: Table,
        Transaction: Transaction,
        Version: Version,
        WhereClause: WhereClause
    });
    init();
    addons.forEach(function (fn) {
        fn(db);
    });
}
function parseType(type) {
    if (typeof type === 'function') {
        return new type();
    }
    else if (isArray(type)) {
        return [parseType(type[0])];
    }
    else if (type && typeof type === 'object') {
        var rv = {};
        applyStructure(rv, type);
        return rv;
    }
    else {
        return type;
    }
}
function applyStructure(obj, structure) {
    keys(structure).forEach(function (member) {
        var value = parseType(structure[member]);
        obj[member] = value;
    });
    return obj;
}
function hookedEventSuccessHandler(resolve) {
    // wrap() is needed when calling hooks because the rare scenario of:
    //  * hook does a db operation that fails immediately (IDB throws exception)
    //    For calling db operations on correct transaction, wrap makes sure to set PSD correctly.
    //    wrap() will also execute in a virtual tick.
    //  * If not wrapped in a virtual tick, direct exception will launch a new physical tick.
    //  * If this was the last event in the bulk, the promise will resolve after a physical tick
    //    and the transaction will have committed already.
    // If no hook, the virtual tick will be executed in the reject()/resolve of the final promise,
    // because it is always marked with _lib = true when created using Transaction._promise().
    return wrap(function (event) {
        var req = event.target, ctx = req._hookCtx, // Contains the hook error handler. Put here instead of closure to boost performance.
        result = ctx.value || req.result, // Pass the object value on updates. The result from IDB is the primary key.
        hookSuccessHandler = ctx && ctx.onsuccess;
        hookSuccessHandler && hookSuccessHandler(result);
        resolve && resolve(result);
    }, resolve);
}
function eventRejectHandler(reject) {
    return wrap(function (event) {
        preventDefault(event);
        reject(event.target.error);
        return false;
    });
}
function eventSuccessHandler(resolve) {
    return wrap(function (event) {
        resolve(event.target.result);
    });
}
function hookedEventRejectHandler(reject) {
    return wrap(function (event) {
        // See comment on hookedEventSuccessHandler() why wrap() is needed only when supporting hooks.
        var req = event.target, err = req.error, ctx = req._hookCtx, // Contains the hook error handler. Put here instead of closure to boost performance.
        hookErrorHandler = ctx && ctx.onerror;
        hookErrorHandler && hookErrorHandler(err);
        preventDefault(event);
        reject(err);
        return false;
    });
}
function preventDefault(event) {
    if (event.stopPropagation)
        event.stopPropagation();
    if (event.preventDefault)
        event.preventDefault();
}
function awaitIterator(iterator) {
    var callNext = function (result) { return iterator.next(result); }, doThrow = function (error) { return iterator.throw(error); }, onSuccess = step(callNext), onError = step(doThrow);
    function step(getNext) {
        return function (val) {
            var next = getNext(val), value = next.value;
            return next.done ? value :
                (!value || typeof value.then !== 'function' ?
                    isArray(value) ? Promise.all(value).then(onSuccess, onError) : onSuccess(value) :
                    value.then(onSuccess, onError));
        };
    }
    return step(callNext)();
}
//
// IndexSpec struct
//
function IndexSpec(name, keyPath, unique, multi, auto, compound, dotted) {
    /// <param name="name" type="String"></param>
    /// <param name="keyPath" type="String"></param>
    /// <param name="unique" type="Boolean"></param>
    /// <param name="multi" type="Boolean"></param>
    /// <param name="auto" type="Boolean"></param>
    /// <param name="compound" type="Boolean"></param>
    /// <param name="dotted" type="Boolean"></param>
    this.name = name;
    this.keyPath = keyPath;
    this.unique = unique;
    this.multi = multi;
    this.auto = auto;
    this.compound = compound;
    this.dotted = dotted;
    var keyPathSrc = typeof keyPath === 'string' ? keyPath : keyPath && ('[' + [].join.call(keyPath, '+') + ']');
    this.src = (unique ? '&' : '') + (multi ? '*' : '') + (auto ? "++" : "") + keyPathSrc;
}
//
// TableSchema struct
//
function TableSchema(name, primKey, indexes, instanceTemplate) {
    /// <param name="name" type="String"></param>
    /// <param name="primKey" type="IndexSpec"></param>
    /// <param name="indexes" type="Array" elementType="IndexSpec"></param>
    /// <param name="instanceTemplate" type="Object"></param>
    this.name = name;
    this.primKey = primKey || new IndexSpec();
    this.indexes = indexes || [new IndexSpec()];
    this.instanceTemplate = instanceTemplate;
    this.mappedClass = null;
    this.idxByName = arrayToObject(indexes, function (index) { return [index.name, index]; });
}
function safariMultiStoreFix(storeNames) {
    return storeNames.length === 1 ? storeNames[0] : storeNames;
}
function getNativeGetDatabaseNamesFn(indexedDB) {
    var fn = indexedDB && (indexedDB.getDatabaseNames || indexedDB.webkitGetDatabaseNames);
    return fn && fn.bind(indexedDB);
}
// Export Error classes
props(Dexie, fullNameExceptions); // Dexie.XXXError = class XXXError {...};
//
// Static methods and properties
// 
props(Dexie, {
    //
    // Static delete() method.
    //
    delete: function (databaseName) {
        var db = new Dexie(databaseName), promise = db.delete();
        promise.onblocked = function (fn) {
            db.on("blocked", fn);
            return this;
        };
        return promise;
    },
    //
    // Static exists() method.
    //
    exists: function (name) {
        return new Dexie(name).open().then(function (db) {
            db.close();
            return true;
        }).catch(Dexie.NoSuchDatabaseError, function () { return false; });
    },
    //
    // Static method for retrieving a list of all existing databases at current host.
    //
    getDatabaseNames: function (cb) {
        var getDatabaseNames = getNativeGetDatabaseNamesFn(Dexie.dependencies.indexedDB);
        return getDatabaseNames ? new Promise(function (resolve, reject) {
            var req = getDatabaseNames();
            req.onsuccess = function (event) {
                resolve(slice(event.target.result, 0)); // Converst DOMStringList to Array<String>
            };
            req.onerror = eventRejectHandler(reject);
        }).then(cb) : dbNamesDB.dbnames.toCollection().primaryKeys(cb);
    },
    defineClass: function () {
        // Default constructor able to copy given properties into this object.
        function Class(properties) {
            /// <param name="properties" type="Object" optional="true">Properties to initialize object with.
            /// </param>
            if (properties)
                extend(this, properties);
        }
        return Class;
    },
    applyStructure: applyStructure,
    ignoreTransaction: function (scopeFunc) {
        // In case caller is within a transaction but needs to create a separate transaction.
        // Example of usage:
        //
        // Let's say we have a logger function in our app. Other application-logic should be unaware of the
        // logger function and not need to include the 'logentries' table in all transaction it performs.
        // The logging should always be done in a separate transaction and not be dependant on the current
        // running transaction context. Then you could use Dexie.ignoreTransaction() to run code that starts a new transaction.
        //
        //     Dexie.ignoreTransaction(function() {
        //         db.logentries.add(newLogEntry);
        //     });
        //
        // Unless using Dexie.ignoreTransaction(), the above example would try to reuse the current transaction
        // in current Promise-scope.
        //
        // An alternative to Dexie.ignoreTransaction() would be setImmediate() or setTimeout(). The reason we still provide an
        // API for this because
        //  1) The intention of writing the statement could be unclear if using setImmediate() or setTimeout().
        //  2) setTimeout() would wait unnescessary until firing. This is however not the case with setImmediate().
        //  3) setImmediate() is not supported in the ES standard.
        //  4) You might want to keep other PSD state that was set in a parent PSD, such as PSD.letThrough.
        return PSD.trans ?
            usePSD(PSD.transless, scopeFunc) : // Use the closest parent that was non-transactional.
            scopeFunc(); // No need to change scope because there is no ongoing transaction.
    },
    vip: function (fn) {
        // To be used by subscribers to the on('ready') event.
        // This will let caller through to access DB even when it is blocked while the db.ready() subscribers are firing.
        // This would have worked automatically if we were certain that the Provider was using Dexie.Promise for all asyncronic operations. The promise PSD
        // from the provider.connect() call would then be derived all the way to when provider would call localDatabase.applyChanges(). But since
        // the provider more likely is using non-promise async APIs or other thenable implementations, we cannot assume that.
        // Note that this method is only useful for on('ready') subscribers that is returning a Promise from the event. If not using vip()
        // the database could deadlock since it wont open until the returned Promise is resolved, and any non-VIPed operation started by
        // the caller will not resolve until database is opened.
        return newScope(function () {
            PSD.letThrough = true; // Make sure we are let through if still blocking db due to onready is firing.
            return fn();
        });
    },
    async: function (generatorFn) {
        return function () {
            try {
                var rv = awaitIterator(generatorFn.apply(this, arguments));
                if (!rv || typeof rv.then !== 'function')
                    return Promise.resolve(rv);
                return rv;
            }
            catch (e) {
                return rejection(e);
            }
        };
    },
    spawn: function (generatorFn, args, thiz) {
        try {
            var rv = awaitIterator(generatorFn.apply(thiz, args || []));
            if (!rv || typeof rv.then !== 'function')
                return Promise.resolve(rv);
            return rv;
        }
        catch (e) {
            return rejection(e);
        }
    },
    // Dexie.currentTransaction property
    currentTransaction: {
        get: function () { return PSD.trans || null; }
    },
    waitFor: function (promiseOrFunction, optionalTimeout) {
        // If a function is provided, invoke it and pass the returning value to Transaction.waitFor()
        var promise = Promise.resolve(typeof promiseOrFunction === 'function' ? Dexie.ignoreTransaction(promiseOrFunction) : promiseOrFunction)
            .timeout(optionalTimeout || 60000); // Default the timeout to one minute. Caller may specify Infinity if required.       
        // Run given promise on current transaction. If no current transaction, just return a Dexie promise based
        // on given value.
        return PSD.trans ? PSD.trans.waitFor(promise) : promise;
    },
    // Export our Promise implementation since it can be handy as a standalone Promise implementation
    Promise: Promise,
    // Dexie.debug proptery:
    // Dexie.debug = false
    // Dexie.debug = true
    // Dexie.debug = "dexie" - don't hide dexie's stack frames.
    debug: {
        get: function () { return debug; },
        set: function (value) {
            setDebug(value, value === 'dexie' ? function () { return true; } : dexieStackFrameFilter);
        }
    },
    // Export our derive/extend/override methodology
    derive: derive,
    extend: extend,
    props: props,
    override: override,
    // Export our Events() function - can be handy as a toolkit
    Events: Events,
    // Utilities
    getByKeyPath: getByKeyPath,
    setByKeyPath: setByKeyPath,
    delByKeyPath: delByKeyPath,
    shallowClone: shallowClone,
    deepClone: deepClone,
    getObjectDiff: getObjectDiff,
    asap: asap,
    maxKey: maxKey,
    minKey: minKey,
    // Addon registry
    addons: [],
    // Global DB connection list
    connections: connections,
    MultiModifyError: exceptions.Modify,
    errnames: errnames,
    // Export other static classes
    IndexSpec: IndexSpec,
    TableSchema: TableSchema,
    //
    // Dependencies
    //
    // These will automatically work in browsers with indexedDB support, or where an indexedDB polyfill has been included.
    //
    // In node.js, however, these properties must be set "manually" before instansiating a new Dexie().
    // For node.js, you need to require indexeddb-js or similar and then set these deps.
    //
    dependencies: (function () {
        try {
            return {
                // Required:
                indexedDB: _global.indexedDB || _global.mozIndexedDB || _global.webkitIndexedDB || _global.msIndexedDB,
                IDBKeyRange: _global.IDBKeyRange || _global.webkitIDBKeyRange
            };
        }
        catch (e) {
            return {
                indexedDB: null,
                IDBKeyRange: null
            };
        }
    })(),
    // API Version Number: Type Number, make sure to always set a version number that can be comparable correctly. Example: 0.9, 0.91, 0.92, 1.0, 1.01, 1.1, 1.2, 1.21, etc.
    semVer: DEXIE_VERSION,
    version: DEXIE_VERSION.split('.')
        .map(function (n) { return parseInt(n); })
        .reduce(function (p, c, i) { return p + (c / Math.pow(10, i * 2)); }),
    // https://github.com/dfahlander/Dexie.js/issues/186
    // typescript compiler tsc in mode ts-->es5 & commonJS, will expect require() to return
    // x.default. Workaround: Set Dexie.default = Dexie.
    default: Dexie,
    // Make it possible to import {Dexie} (non-default import)
    // Reason 1: May switch to that in future.
    // Reason 2: We declare it both default and named exported in d.ts to make it possible
    // to let addons extend the Dexie interface with Typescript 2.1 (works only when explicitely
    // exporting the symbol, not just default exporting)
    Dexie: Dexie
});
// Map DOMErrors and DOMExceptions to corresponding Dexie errors. May change in Dexie v2.0.
Promise.rejectionMapper = mapError;
// Initialize dbNamesDB (won't ever be opened on chromium browsers')
dbNamesDB = new Dexie('__dbnames');
dbNamesDB.version(1).stores({ dbnames: 'name' });
(function () {
    // Migrate from Dexie 1.x database names stored in localStorage:
    var DBNAMES = 'Dexie.DatabaseNames';
    try {
        if (typeof localStorage !== undefined && _global.document !== undefined) {
            // Have localStorage and is not executing in a worker. Lets migrate from Dexie 1.x.
            JSON.parse(localStorage.getItem(DBNAMES) || "[]")
                .forEach(function (name) { return dbNamesDB.dbnames.put({ name: name }).catch(nop); });
            localStorage.removeItem(DBNAMES);
        }
    }
    catch (_e) { }
})();

/* harmony default export */ __webpack_exports__["default"] = (Dexie);
//# sourceMappingURL=dexie.es.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/promise-polyfill/src/finally.js":
/*!******************************************************!*\
  !*** ./node_modules/promise-polyfill/src/finally.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @this {Promise}
 */
function finallyConstructor(callback) {
  var constructor = this.constructor;
  return this.then(
    function(value) {
      // @ts-ignore
      return constructor.resolve(callback()).then(function() {
        return value;
      });
    },
    function(reason) {
      // @ts-ignore
      return constructor.resolve(callback()).then(function() {
        // @ts-ignore
        return constructor.reject(reason);
      });
    }
  );
}

/* harmony default export */ __webpack_exports__["default"] = (finallyConstructor);


/***/ }),

/***/ "./node_modules/promise-polyfill/src/index.js":
/*!****************************************************!*\
  !*** ./node_modules/promise-polyfill/src/index.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(setImmediate) {/* harmony import */ var _finally__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./finally */ "./node_modules/promise-polyfill/src/finally.js");


// Store setTimeout reference so promise-polyfill will be unaffected by
// other code modifying setTimeout (like sinon.useFakeTimers())
var setTimeoutFunc = setTimeout;

function isArray(x) {
  return Boolean(x && typeof x.length !== 'undefined');
}

function noop() {}

// Polyfill for Function.prototype.bind
function bind(fn, thisArg) {
  return function() {
    fn.apply(thisArg, arguments);
  };
}

/**
 * @constructor
 * @param {Function} fn
 */
function Promise(fn) {
  if (!(this instanceof Promise))
    throw new TypeError('Promises must be constructed via new');
  if (typeof fn !== 'function') throw new TypeError('not a function');
  /** @type {!number} */
  this._state = 0;
  /** @type {!boolean} */
  this._handled = false;
  /** @type {Promise|undefined} */
  this._value = undefined;
  /** @type {!Array<!Function>} */
  this._deferreds = [];

  doResolve(fn, this);
}

function handle(self, deferred) {
  while (self._state === 3) {
    self = self._value;
  }
  if (self._state === 0) {
    self._deferreds.push(deferred);
    return;
  }
  self._handled = true;
  Promise._immediateFn(function() {
    var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;
    if (cb === null) {
      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);
      return;
    }
    var ret;
    try {
      ret = cb(self._value);
    } catch (e) {
      reject(deferred.promise, e);
      return;
    }
    resolve(deferred.promise, ret);
  });
}

function resolve(self, newValue) {
  try {
    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
    if (newValue === self)
      throw new TypeError('A promise cannot be resolved with itself.');
    if (
      newValue &&
      (typeof newValue === 'object' || typeof newValue === 'function')
    ) {
      var then = newValue.then;
      if (newValue instanceof Promise) {
        self._state = 3;
        self._value = newValue;
        finale(self);
        return;
      } else if (typeof then === 'function') {
        doResolve(bind(then, newValue), self);
        return;
      }
    }
    self._state = 1;
    self._value = newValue;
    finale(self);
  } catch (e) {
    reject(self, e);
  }
}

function reject(self, newValue) {
  self._state = 2;
  self._value = newValue;
  finale(self);
}

function finale(self) {
  if (self._state === 2 && self._deferreds.length === 0) {
    Promise._immediateFn(function() {
      if (!self._handled) {
        Promise._unhandledRejectionFn(self._value);
      }
    });
  }

  for (var i = 0, len = self._deferreds.length; i < len; i++) {
    handle(self, self._deferreds[i]);
  }
  self._deferreds = null;
}

/**
 * @constructor
 */
function Handler(onFulfilled, onRejected, promise) {
  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
  this.promise = promise;
}

/**
 * Take a potentially misbehaving resolver function and make sure
 * onFulfilled and onRejected are only called once.
 *
 * Makes no guarantees about asynchrony.
 */
function doResolve(fn, self) {
  var done = false;
  try {
    fn(
      function(value) {
        if (done) return;
        done = true;
        resolve(self, value);
      },
      function(reason) {
        if (done) return;
        done = true;
        reject(self, reason);
      }
    );
  } catch (ex) {
    if (done) return;
    done = true;
    reject(self, ex);
  }
}

Promise.prototype['catch'] = function(onRejected) {
  return this.then(null, onRejected);
};

Promise.prototype.then = function(onFulfilled, onRejected) {
  // @ts-ignore
  var prom = new this.constructor(noop);

  handle(this, new Handler(onFulfilled, onRejected, prom));
  return prom;
};

Promise.prototype['finally'] = _finally__WEBPACK_IMPORTED_MODULE_0__["default"];

Promise.all = function(arr) {
  return new Promise(function(resolve, reject) {
    if (!isArray(arr)) {
      return reject(new TypeError('Promise.all accepts an array'));
    }

    var args = Array.prototype.slice.call(arr);
    if (args.length === 0) return resolve([]);
    var remaining = args.length;

    function res(i, val) {
      try {
        if (val && (typeof val === 'object' || typeof val === 'function')) {
          var then = val.then;
          if (typeof then === 'function') {
            then.call(
              val,
              function(val) {
                res(i, val);
              },
              reject
            );
            return;
          }
        }
        args[i] = val;
        if (--remaining === 0) {
          resolve(args);
        }
      } catch (ex) {
        reject(ex);
      }
    }

    for (var i = 0; i < args.length; i++) {
      res(i, args[i]);
    }
  });
};

Promise.resolve = function(value) {
  if (value && typeof value === 'object' && value.constructor === Promise) {
    return value;
  }

  return new Promise(function(resolve) {
    resolve(value);
  });
};

Promise.reject = function(value) {
  return new Promise(function(resolve, reject) {
    reject(value);
  });
};

Promise.race = function(arr) {
  return new Promise(function(resolve, reject) {
    if (!isArray(arr)) {
      return reject(new TypeError('Promise.race accepts an array'));
    }

    for (var i = 0, len = arr.length; i < len; i++) {
      Promise.resolve(arr[i]).then(resolve, reject);
    }
  });
};

// Use polyfill for setImmediate for performance gains
Promise._immediateFn =
  // @ts-ignore
  (typeof setImmediate === 'function' &&
    function(fn) {
      // @ts-ignore
      setImmediate(fn);
    }) ||
  function(fn) {
    setTimeoutFunc(fn, 0);
  };

Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {
  if (typeof console !== 'undefined' && console) {
    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console
  }
};

/* harmony default export */ __webpack_exports__["default"] = (Promise);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./src/elm/Main.elm":
/*!**************************!*\
  !*** ./src/elm/Main.elm ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

console.warn('Compiled in DEV mode. Follow the advice at https://elm-lang.org/0.19.0/optimize for better performance and smaller assets.');


var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log_UNUSED = F2(function(tag, value)
{
	return value;
});

var _Debug_log = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString_UNUSED(value)
{
	return '<internals>';
}

function _Debug_toString(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File === 'function' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[94m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash_UNUSED(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.start.line === region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'on lines ' + region.start.line + ' through ' + region.end.line;
}



// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	/**/
	if (x.$ === 'Set_elm_builtin')
	{
		x = elm$core$Set$toList(x);
		y = elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = elm$core$Dict$toList(x);
		y = elm$core$Dict$toList(y);
	}
	//*/

	/**_UNUSED/
	if (x.$ < 0)
	{
		x = elm$core$Dict$toList(x);
		y = elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**_UNUSED/
	if (typeof x.$ === 'undefined')
	//*/
	/**/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? elm$core$Basics$LT : n ? elm$core$Basics$GT : elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0_UNUSED = 0;
var _Utils_Tuple0 = { $: '#0' };

function _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr_UNUSED(c) { return c; }
function _Utils_chr(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil_UNUSED = { $: 0 };
var _List_Nil = { $: '[]' };

function _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === elm$core$Basics$EQ ? 0 : ord === elm$core$Basics$LT ? -1 : 1;
	}));
});



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return word
		? elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? elm$core$Maybe$Nothing
		: elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? elm$core$Maybe$Just(n) : elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**/
function _Json_errorToString(error)
{
	return elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? elm$core$Result$Ok(value)
		: (value instanceof String)
			? elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return elm$core$Result$Err(A2(elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return (elm$core$Result$isOk(result)) ? result : elm$core$Result$Err(A2(elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return (elm$core$Result$isOk(result)) ? result : elm$core$Result$Err(A2(elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!elm$core$Result$isOk(result))
					{
						return elm$core$Result$Err(A2(elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return elm$core$Result$Ok(elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if (elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return elm$core$Result$Err(elm$json$Json$Decode$OneOf(elm$core$List$reverse(errors)));

		case 1:
			return elm$core$Result$Err(A2(elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!elm$core$Result$isOk(result))
		{
			return elm$core$Result$Err(A2(elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2(elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return elm$core$Result$Err(A2(elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap(value) { return { $: 0, a: value }; }
function _Json_unwrap(value) { return value.a; }

function _Json_wrap_UNUSED(value) { return value; }
function _Json_unwrap_UNUSED(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	elm$core$Result$isOk(result) || _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/);
	var managers = {};
	result = init(result.a);
	var model = result.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		result = A2(update, msg, model);
		stepper(model = result.a, viewMetadata);
		_Platform_dispatchEffects(managers, result.b, subscriptions(model));
	}

	_Platform_dispatchEffects(managers, result.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				p: bag.n,
				q: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.q)
		{
			x = temp.p(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		r: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].r;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		r: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].r;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}



// SEND REQUEST

var _Http_toTask = F3(function(router, toTask, request)
{
	return _Scheduler_binding(function(callback)
	{
		function done(response) {
			callback(toTask(request.expect.a(response)));
		}

		var xhr = new XMLHttpRequest();
		xhr.addEventListener('error', function() { done(elm$http$Http$NetworkError_); });
		xhr.addEventListener('timeout', function() { done(elm$http$Http$Timeout_); });
		xhr.addEventListener('load', function() { done(_Http_toResponse(request.expect.b, xhr)); });
		elm$core$Maybe$isJust(request.tracker) && _Http_track(router, xhr, request.tracker.a);

		try {
			xhr.open(request.method, request.url, true);
		} catch (e) {
			return done(elm$http$Http$BadUrl_(request.url));
		}

		_Http_configureRequest(xhr, request);

		request.body.a && xhr.setRequestHeader('Content-Type', request.body.a);
		xhr.send(request.body.b);

		return function() { xhr.c = true; xhr.abort(); };
	});
});


// CONFIGURE

function _Http_configureRequest(xhr, request)
{
	for (var headers = request.headers; headers.b; headers = headers.b) // WHILE_CONS
	{
		xhr.setRequestHeader(headers.a.a, headers.a.b);
	}
	xhr.timeout = request.timeout.a || 0;
	xhr.responseType = request.expect.d;
	xhr.withCredentials = request.allowCookiesFromOtherDomains;
}


// RESPONSES

function _Http_toResponse(toBody, xhr)
{
	return A2(
		200 <= xhr.status && xhr.status < 300 ? elm$http$Http$GoodStatus_ : elm$http$Http$BadStatus_,
		_Http_toMetadata(xhr),
		toBody(xhr.response)
	);
}


// METADATA

function _Http_toMetadata(xhr)
{
	return {
		url: xhr.responseURL,
		statusCode: xhr.status,
		statusText: xhr.statusText,
		headers: _Http_parseHeaders(xhr.getAllResponseHeaders())
	};
}


// HEADERS

function _Http_parseHeaders(rawHeaders)
{
	if (!rawHeaders)
	{
		return elm$core$Dict$empty;
	}

	var headers = elm$core$Dict$empty;
	var headerPairs = rawHeaders.split('\r\n');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf(': ');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3(elm$core$Dict$update, key, function(oldValue) {
				return elm$core$Maybe$Just(elm$core$Maybe$isJust(oldValue)
					? value + ', ' + oldValue.a
					: value
				);
			}, headers);
		}
	}
	return headers;
}


// EXPECT

var _Http_expect = F3(function(type, toBody, toValue)
{
	return {
		$: 0,
		d: type,
		b: toBody,
		a: toValue
	};
});

var _Http_mapExpect = F2(function(func, expect)
{
	return {
		$: 0,
		d: expect.d,
		b: expect.b,
		a: function(x) { return func(expect.a(x)); }
	};
});

function _Http_toDataView(arrayBuffer)
{
	return new DataView(arrayBuffer);
}


// BODY and PARTS

var _Http_emptyBody = { $: 0 };
var _Http_pair = F2(function(a, b) { return { $: 0, a: a, b: b }; });

function _Http_toFormData(parts)
{
	for (var formData = new FormData(); parts.b; parts = parts.b) // WHILE_CONS
	{
		var part = parts.a;
		formData.append(part.a, part.b);
	}
	return formData;
}

var _Http_bytesToBlob = F2(function(mime, bytes)
{
	return new Blob([bytes], { type: mime });
});


// PROGRESS

function _Http_track(router, xhr, tracker)
{
	// TODO check out lengthComputable on loadstart event

	xhr.upload.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2(elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, elm$http$Http$Sending({
			sent: event.loaded,
			size: event.total
		}))));
	});
	xhr.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2(elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, elm$http$Http$Receiving({
			received: event.loaded,
			size: event.lengthComputable ? elm$core$Maybe$Just(event.total) : elm$core$Maybe$Nothing
		}))));
	});
}

// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function(options, string)
{
	var flags = 'g';
	if (options.multiline) { flags += 'm'; }
	if (options.caseInsensitive) { flags += 'i'; }

	try
	{
		return elm$core$Maybe$Just(new RegExp(string, flags));
	}
	catch(error)
	{
		return elm$core$Maybe$Nothing;
	}
});


// USE

var _Regex_contains = F2(function(re, string)
{
	return string.match(re) !== null;
});


var _Regex_findAtMost = F3(function(n, re, str)
{
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex == re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch
				? elm$core$Maybe$Just(submatch)
				: elm$core$Maybe$Nothing;
		}
		out.push(A4(elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _List_fromArray(out);
});


var _Regex_replaceAtMost = F4(function(n, re, replacer, string)
{
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch
				? elm$core$Maybe$Just(submatch)
				: elm$core$Maybe$Nothing;
		}
		return replacer(A4(elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
	}
	return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function(n, re, str)
{
	var string = str;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		var result = re.exec(string);
		if (!result) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _List_fromArray(out);
});

var _Regex_infinity = Infinity;



var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**_UNUSED/
	var node = args['node'];
	//*/
	/**/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS


function _VirtualDom_noScript(tag)
{
	return tag == 'script' ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return /^formAction$/i.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri_UNUSED(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,'')) ? '' : value;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,''))
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri_UNUSED(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value) ? '' : value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value)
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2(elm$json$Json$Decode$map, func, handler.a)
				:
			A3(elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		message: func(record.message),
		stopPropagation: record.stopPropagation,
		preventDefault: record.preventDefault
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.message;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.stopPropagation;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.preventDefault) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}




// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var view = impl.view;
			/**_UNUSED/
			var domNode = args['node'];
			//*/
			/**/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.setup && impl.setup(sendToApp)
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.body);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.onUrlChange;
	var onUrlRequest = impl.onUrlRequest;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };

	return _Browser_document({
		setup: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.protocol === next.protocol
							&& curr.host === next.host
							&& curr.port_.a === next.port_.a
						)
							? elm$browser$Browser$Internal(next)
							: elm$browser$Browser$External(href)
					));
				}
			});
		},
		init: function(flags)
		{
			return A3(impl.init, flags, _Browser_getUrl(), key);
		},
		view: impl.view,
		update: impl.update,
		subscriptions: impl.subscriptions
	});
}

function _Browser_getUrl()
{
	return elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2(elm$core$Task$perform, elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2(elm$core$Task$perform, elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2(elm$core$Task$perform, elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return elm$core$Result$isOk(result) ? elm$core$Maybe$Just(result.a) : elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { hidden: 'hidden', change: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { hidden: 'mozHidden', change: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { hidden: 'msHidden', change: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { hidden: 'webkitHidden', change: 'webkitvisibilitychange' }
		: { hidden: 'hidden', change: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail(elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		scene: _Browser_getScene(),
		viewport: {
			x: _Browser_window.pageXOffset,
			y: _Browser_window.pageYOffset,
			width: _Browser_doc.documentElement.clientWidth,
			height: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		width: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		height: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			scene: {
				width: node.scrollWidth,
				height: node.scrollHeight
			},
			viewport: {
				x: node.scrollLeft,
				y: node.scrollTop,
				width: node.clientWidth,
				height: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			scene: _Browser_getScene(),
			viewport: {
				x: x,
				y: y,
				width: _Browser_doc.documentElement.clientWidth,
				height: _Browser_doc.documentElement.clientHeight
			},
			element: {
				x: x + rect.left,
				y: y + rect.top,
				width: rect.width,
				height: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2(elm$core$Task$perform, elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2(elm$core$Task$perform, elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}




// STRINGS


var _Parser_isSubString = F5(function(smallString, offset, row, col, bigString)
{
	var smallLength = smallString.length;
	var isGood = offset + smallLength <= bigString.length;

	for (var i = 0; isGood && i < smallLength; )
	{
		var code = bigString.charCodeAt(offset);
		isGood =
			smallString[i++] === bigString[offset++]
			&& (
				code === 0x000A /* \n */
					? ( row++, col=1 )
					: ( col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1 )
			)
	}

	return _Utils_Tuple3(isGood ? offset : -1, row, col);
});



// CHARS


var _Parser_isSubChar = F3(function(predicate, offset, string)
{
	return (
		string.length <= offset
			? -1
			:
		(string.charCodeAt(offset) & 0xF800) === 0xD800
			? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)
			:
		(predicate(_Utils_chr(string[offset]))
			? ((string[offset] === '\n') ? -2 : (offset + 1))
			: -1
		)
	);
});


var _Parser_isAsciiCode = F3(function(code, offset, string)
{
	return string.charCodeAt(offset) === code;
});



// NUMBERS


var _Parser_chompBase10 = F2(function(offset, string)
{
	for (; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (code < 0x30 || 0x39 < code)
		{
			return offset;
		}
	}
	return offset;
});


var _Parser_consumeBase = F3(function(base, offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var digit = string.charCodeAt(offset) - 0x30;
		if (digit < 0 || base <= digit) break;
		total = base * total + digit;
	}
	return _Utils_Tuple2(offset, total);
});


var _Parser_consumeBase16 = F2(function(offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (0x30 <= code && code <= 0x39)
		{
			total = 16 * total + code - 0x30;
		}
		else if (0x41 <= code && code <= 0x46)
		{
			total = 16 * total + code - 55;
		}
		else if (0x61 <= code && code <= 0x66)
		{
			total = 16 * total + code - 87;
		}
		else
		{
			break;
		}
	}
	return _Utils_Tuple2(offset, total);
});



// FIND STRING


var _Parser_findSubString = F5(function(smallString, offset, row, col, bigString)
{
	var newOffset = bigString.indexOf(smallString, offset);
	var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;

	while (offset < target)
	{
		var code = bigString.charCodeAt(offset++);
		code === 0x000A /* \n */
			? ( col=1, row++ )
			: ( col++, (code & 0xF800) === 0xD800 && offset++ )
	}

	return _Utils_Tuple3(newOffset, row, col);
});
var author$project$Index$Model$Model = F3(
	function (input, courses, initialized) {
		return {courses: courses, initialized: initialized, input: input};
	});
var elm$core$Basics$False = {$: 'False'};
var elm$core$Basics$EQ = {$: 'EQ'};
var elm$core$Basics$LT = {$: 'LT'};
var elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var elm$core$Array$foldr = F3(
	function (func, baseCase, _n0) {
		var tree = _n0.c;
		var tail = _n0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3(elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3(elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			elm$core$Elm$JsArray$foldr,
			helper,
			A3(elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var elm$core$List$cons = _List_cons;
var elm$core$Array$toList = function (array) {
	return A3(elm$core$Array$foldr, elm$core$List$cons, _List_Nil, array);
};
var elm$core$Basics$GT = {$: 'GT'};
var elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3(elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var elm$core$Dict$toList = function (dict) {
	return A3(
		elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var elm$core$Dict$keys = function (dict) {
	return A3(
		elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2(elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var elm$core$Set$toList = function (_n0) {
	var dict = _n0.a;
	return elm$core$Dict$keys(dict);
};
var author$project$Index$Model$init = A3(author$project$Index$Model$Model, '', _List_Nil, false);
var elm$core$Basics$negate = function (n) {
	return -n;
};
var elm$core$Dict$RBEmpty_elm_builtin = {$: 'RBEmpty_elm_builtin'};
var elm$core$Dict$empty = elm$core$Dict$RBEmpty_elm_builtin;
var author$project$Lia$Definition$Types$default = function (base) {
	return {attributes: _List_Nil, author: '', base: base, comment: _List_Nil, date: '', debug: false, email: '', imports: _List_Nil, language: 'en', logo: '', macro: elm$core$Dict$empty, narrator: 'US English Male', onload: '', resources: _List_Nil, section: -1, translation: elm$core$Dict$empty, uid: -1, version: ''};
};
var author$project$Lia$Index$Model$init = '';
var author$project$Lia$Settings$Model$Buttons = F4(
	function (settings, informations, translations, share) {
		return {informations: informations, settings: settings, share: share, translations: translations};
	});
var author$project$Lia$Settings$Model$init_buttons = A4(author$project$Lia$Settings$Model$Buttons, false, false, false, false);
var elm$core$Basics$True = {$: 'True'};
var author$project$Lia$Settings$Model$init = function (mode) {
	return {buttons: author$project$Lia$Settings$Model$init_buttons, editor: 'dreamweaver', font_size: 100, initialized: false, lang: 'default', light: true, mode: mode, sound: true, speaking: false, table_of_contents: true, theme: 'default'};
};
var author$project$Translations$En = {$: 'En'};
var elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};
	});
var elm$core$Array$branchFactor = 32;
var elm$core$Basics$ceiling = _Basics_ceiling;
var elm$core$Basics$fdiv = _Basics_fdiv;
var elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var elm$core$Basics$toFloat = _Basics_toFloat;
var elm$core$Array$shiftStep = elm$core$Basics$ceiling(
	A2(elm$core$Basics$logBase, 2, elm$core$Array$branchFactor));
var elm$core$Elm$JsArray$empty = _JsArray_empty;
var elm$core$Array$empty = A4(elm$core$Array$Array_elm_builtin, 0, elm$core$Array$shiftStep, elm$core$Elm$JsArray$empty, elm$core$Elm$JsArray$empty);
var elm$core$Basics$gt = _Utils_gt;
var elm$core$Basics$identity = function (x) {
	return x;
};
var elm$core$Basics$sub = _Basics_sub;
var elm$core$Maybe$Nothing = {$: 'Nothing'};
var author$project$Lia$Model$init = F5(
	function (mode, url, readme, origin, slide_number) {
		return {
			definition: author$project$Lia$Definition$Types$default(url),
			error: elm$core$Maybe$Nothing,
			index_model: author$project$Lia$Index$Model$init,
			load_slide: -1,
			origin: origin,
			readme: readme,
			ready: false,
			resource: _List_Nil,
			search_index: elm$core$Basics$identity,
			section_active: function () {
				if (slide_number.$ === 'Nothing') {
					return 0;
				} else {
					var idx = slide_number.a;
					return ((idx - 1) > 0) ? (idx - 1) : 0;
				}
			}(),
			sections: elm$core$Array$empty,
			settings: author$project$Lia$Settings$Model$init(mode),
			title: 'Lia',
			to_do: _List_Nil,
			translation: author$project$Translations$En,
			url: url
		};
	});
var author$project$Lia$Settings$Model$Textbook = {$: 'Textbook'};
var author$project$Lia$Script$init_textbook = F4(
	function (url, readme, origin, slide_number) {
		return A5(author$project$Lia$Model$init, author$project$Lia$Settings$Model$Textbook, url, readme, origin, slide_number);
	});
var elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var elm$core$Basics$append = _Utils_append;
var elm$core$Maybe$Just = function (a) {
	return {$: 'Just', a: a};
};
var elm$core$String$fromInt = _String_fromNumber;
var elm$url$Url$addPort = F2(
	function (maybePort, starter) {
		if (maybePort.$ === 'Nothing') {
			return starter;
		} else {
			var port_ = maybePort.a;
			return starter + (':' + elm$core$String$fromInt(port_));
		}
	});
var elm$url$Url$addPrefixed = F3(
	function (prefix, maybeSegment, starter) {
		if (maybeSegment.$ === 'Nothing') {
			return starter;
		} else {
			var segment = maybeSegment.a;
			return _Utils_ap(
				starter,
				_Utils_ap(prefix, segment));
		}
	});
var elm$url$Url$toString = function (url) {
	var http = function () {
		var _n0 = url.protocol;
		switch (_n0.$) {
			case 'Http':
				return 'http://';
			case 'Https':
				return 'https://';
			case 'File':
				return 'file://';
			default:
				return 'file:///';
		}
	}();
	return A3(
		elm$url$Url$addPrefixed,
		'#',
		url.fragment,
		A3(
			elm$url$Url$addPrefixed,
			'?',
			url.query,
			_Utils_ap(
				A2(
					elm$url$Url$addPort,
					url.port_,
					_Utils_ap(http, url.host)),
				url.path)));
};
var author$project$Main$get_base = function (url) {
	return elm$url$Url$toString(
		_Utils_update(
			url,
			{fragment: elm$core$Maybe$Nothing}));
};
var elm$core$Basics$le = _Utils_le;
var elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var elm$core$List$reverse = function (list) {
	return A3(elm$core$List$foldl, elm$core$List$cons, _List_Nil, list);
};
var elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var author$project$Main$get_origin = function (query) {
	if (query.$ === 'Just') {
		var url = query.a;
		return A2(
			elm$core$String$join,
			'/',
			elm$core$List$reverse(
				A2(
					elm$core$List$drop,
					1,
					elm$core$List$reverse(
						A2(elm$core$String$split, '/', url))))) + '/';
	} else {
		return '';
	}
};
var author$project$Model$Idle = {$: 'Idle'};
var author$project$Model$Loading = {$: 'Loading'};
var author$project$Model$Model = F7(
	function (key, url, state, lia, code, size, index) {
		return {code: code, index: index, key: key, lia: lia, size: size, state: state, url: url};
	});
var author$project$Update$Load_ReadMe_Result = F2(
	function (a, b) {
		return {$: 'Load_ReadMe_Result', a: a, b: b};
	});
var elm$core$Result$Ok = function (a) {
	return {$: 'Ok', a: a};
};
var elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var elm$core$Basics$compare = _Utils_compare;
var elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _n1 = A2(elm$core$Basics$compare, targetKey, key);
				switch (_n1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 'EQ':
						return elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var elm$core$Dict$Black = {$: 'Black'};
var elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: 'RBNode_elm_builtin', a: a, b: b, c: c, d: d, e: e};
	});
var elm$core$Dict$Red = {$: 'Red'};
var elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Red')) {
			var _n1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
				var _n3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					elm$core$Dict$RBNode_elm_builtin,
					elm$core$Dict$Red,
					key,
					value,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, lK, lV, lLeft, lRight),
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, rK, rV, rLeft, rRight));
			} else {
				return A5(
					elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) && (left.d.$ === 'RBNode_elm_builtin')) && (left.d.a.$ === 'Red')) {
				var _n5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _n6 = left.d;
				var _n7 = _n6.a;
				var llK = _n6.b;
				var llV = _n6.c;
				var llLeft = _n6.d;
				var llRight = _n6.e;
				var lRight = left.e;
				return A5(
					elm$core$Dict$RBNode_elm_builtin,
					elm$core$Dict$Red,
					lK,
					lV,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, llK, llV, llLeft, llRight),
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, key, value, lRight, right));
			} else {
				return A5(elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, key, value, elm$core$Dict$RBEmpty_elm_builtin, elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _n1 = A2(elm$core$Basics$compare, key, nKey);
			switch (_n1.$) {
				case 'LT':
					return A5(
						elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3(elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 'EQ':
					return A5(elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3(elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _n0 = A3(elm$core$Dict$insertHelp, key, value, dict);
		if ((_n0.$ === 'RBNode_elm_builtin') && (_n0.a.$ === 'Red')) {
			var _n1 = _n0.a;
			var k = _n0.b;
			var v = _n0.c;
			var l = _n0.d;
			var r = _n0.e;
			return A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _n0;
			return x;
		}
	});
var elm$core$Basics$eq = _Utils_equal;
var elm$core$Basics$lt = _Utils_lt;
var elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.e.d.$ === 'RBNode_elm_builtin') && (dict.e.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _n1 = dict.d;
			var lClr = _n1.a;
			var lK = _n1.b;
			var lV = _n1.c;
			var lLeft = _n1.d;
			var lRight = _n1.e;
			var _n2 = dict.e;
			var rClr = _n2.a;
			var rK = _n2.b;
			var rV = _n2.c;
			var rLeft = _n2.d;
			var _n3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _n2.e;
			return A5(
				elm$core$Dict$RBNode_elm_builtin,
				elm$core$Dict$Red,
				rlK,
				rlV,
				A5(
					elm$core$Dict$RBNode_elm_builtin,
					elm$core$Dict$Black,
					k,
					v,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, lK, lV, lLeft, lRight),
					rlL),
				A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _n4 = dict.d;
			var lClr = _n4.a;
			var lK = _n4.b;
			var lV = _n4.c;
			var lLeft = _n4.d;
			var lRight = _n4.e;
			var _n5 = dict.e;
			var rClr = _n5.a;
			var rK = _n5.b;
			var rV = _n5.c;
			var rLeft = _n5.d;
			var rRight = _n5.e;
			if (clr.$ === 'Black') {
				return A5(
					elm$core$Dict$RBNode_elm_builtin,
					elm$core$Dict$Black,
					k,
					v,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					elm$core$Dict$RBNode_elm_builtin,
					elm$core$Dict$Black,
					k,
					v,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.d.d.$ === 'RBNode_elm_builtin') && (dict.d.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _n1 = dict.d;
			var lClr = _n1.a;
			var lK = _n1.b;
			var lV = _n1.c;
			var _n2 = _n1.d;
			var _n3 = _n2.a;
			var llK = _n2.b;
			var llV = _n2.c;
			var llLeft = _n2.d;
			var llRight = _n2.e;
			var lRight = _n1.e;
			var _n4 = dict.e;
			var rClr = _n4.a;
			var rK = _n4.b;
			var rV = _n4.c;
			var rLeft = _n4.d;
			var rRight = _n4.e;
			return A5(
				elm$core$Dict$RBNode_elm_builtin,
				elm$core$Dict$Red,
				lK,
				lV,
				A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, llK, llV, llLeft, llRight),
				A5(
					elm$core$Dict$RBNode_elm_builtin,
					elm$core$Dict$Black,
					k,
					v,
					lRight,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _n5 = dict.d;
			var lClr = _n5.a;
			var lK = _n5.b;
			var lV = _n5.c;
			var lLeft = _n5.d;
			var lRight = _n5.e;
			var _n6 = dict.e;
			var rClr = _n6.a;
			var rK = _n6.b;
			var rV = _n6.c;
			var rLeft = _n6.d;
			var rRight = _n6.e;
			if (clr.$ === 'Black') {
				return A5(
					elm$core$Dict$RBNode_elm_builtin,
					elm$core$Dict$Black,
					k,
					v,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					elm$core$Dict$RBNode_elm_builtin,
					elm$core$Dict$Black,
					k,
					v,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
			var _n1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, key, value, lRight, right));
		} else {
			_n2$2:
			while (true) {
				if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Black')) {
					if (right.d.$ === 'RBNode_elm_builtin') {
						if (right.d.a.$ === 'Black') {
							var _n3 = right.a;
							var _n4 = right.d;
							var _n5 = _n4.a;
							return elm$core$Dict$moveRedRight(dict);
						} else {
							break _n2$2;
						}
					} else {
						var _n6 = right.a;
						var _n7 = right.d;
						return elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _n2$2;
				}
			}
			return dict;
		}
	});
var elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor.$ === 'Black') {
			if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
				var _n3 = lLeft.a;
				return A5(
					elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					elm$core$Dict$removeMin(left),
					right);
			} else {
				var _n4 = elm$core$Dict$moveRedLeft(dict);
				if (_n4.$ === 'RBNode_elm_builtin') {
					var nColor = _n4.a;
					var nKey = _n4.b;
					var nValue = _n4.c;
					var nLeft = _n4.d;
					var nRight = _n4.e;
					return A5(
						elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Black')) {
					var _n4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
						var _n6 = lLeft.a;
						return A5(
							elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2(elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _n7 = elm$core$Dict$moveRedLeft(dict);
						if (_n7.$ === 'RBNode_elm_builtin') {
							var nColor = _n7.a;
							var nKey = _n7.b;
							var nValue = _n7.c;
							var nLeft = _n7.d;
							var nRight = _n7.e;
							return A5(
								elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2(elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2(elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7(elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBNode_elm_builtin') {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _n1 = elm$core$Dict$getMin(right);
				if (_n1.$ === 'RBNode_elm_builtin') {
					var minKey = _n1.b;
					var minValue = _n1.c;
					return A5(
						elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						elm$core$Dict$removeMin(right));
				} else {
					return elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2(elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var elm$core$Dict$remove = F2(
	function (key, dict) {
		var _n0 = A2(elm$core$Dict$removeHelp, key, dict);
		if ((_n0.$ === 'RBNode_elm_builtin') && (_n0.a.$ === 'Red')) {
			var _n1 = _n0.a;
			var k = _n0.b;
			var v = _n0.c;
			var l = _n0.d;
			var r = _n0.e;
			return A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _n0;
			return x;
		}
	});
var elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _n0 = alter(
			A2(elm$core$Dict$get, targetKey, dictionary));
		if (_n0.$ === 'Just') {
			var value = _n0.a;
			return A3(elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2(elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var elm$core$Maybe$isJust = function (maybe) {
	if (maybe.$ === 'Just') {
		return true;
	} else {
		return false;
	}
};
var elm$core$Result$isOk = function (result) {
	if (result.$ === 'Ok') {
		return true;
	} else {
		return false;
	}
};
var elm$core$Array$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var elm$core$Array$SubTree = function (a) {
	return {$: 'SubTree', a: a};
};
var elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _n0 = A2(elm$core$Elm$JsArray$initializeFromList, elm$core$Array$branchFactor, nodes);
			var node = _n0.a;
			var remainingNodes = _n0.b;
			var newAcc = A2(
				elm$core$List$cons,
				elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var elm$core$Tuple$first = function (_n0) {
	var x = _n0.a;
	return x;
};
var elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = elm$core$Basics$ceiling(nodeListSize / elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2(elm$core$Elm$JsArray$initializeFromList, elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2(elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var elm$core$Basics$add = _Basics_add;
var elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var elm$core$Basics$floor = _Basics_floor;
var elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var elm$core$Basics$mul = _Basics_mul;
var elm$core$Elm$JsArray$length = _JsArray_length;
var elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.nodeListSize) {
			return A4(
				elm$core$Array$Array_elm_builtin,
				elm$core$Elm$JsArray$length(builder.tail),
				elm$core$Array$shiftStep,
				elm$core$Elm$JsArray$empty,
				builder.tail);
		} else {
			var treeLen = builder.nodeListSize * elm$core$Array$branchFactor;
			var depth = elm$core$Basics$floor(
				A2(elm$core$Basics$logBase, elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? elm$core$List$reverse(builder.nodeList) : builder.nodeList;
			var tree = A2(elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);
			return A4(
				elm$core$Array$Array_elm_builtin,
				elm$core$Elm$JsArray$length(builder.tail) + treeLen,
				A2(elm$core$Basics$max, 5, depth * elm$core$Array$shiftStep),
				tree,
				builder.tail);
		}
	});
var elm$core$Basics$idiv = _Basics_idiv;
var elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					elm$core$Array$builderToArray,
					false,
					{nodeList: nodeList, nodeListSize: (len / elm$core$Array$branchFactor) | 0, tail: tail});
			} else {
				var leaf = elm$core$Array$Leaf(
					A3(elm$core$Elm$JsArray$initialize, elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2(elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var elm$core$Basics$remainderBy = _Basics_remainderBy;
var elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return elm$core$Array$empty;
		} else {
			var tailLen = len % elm$core$Array$branchFactor;
			var tail = A3(elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - elm$core$Array$branchFactor;
			return A5(elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var elm$core$Result$Err = function (a) {
	return {$: 'Err', a: a};
};
var elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 'Failure', a: a, b: b};
	});
var elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 'Index', a: a, b: b};
	});
var elm$json$Json$Decode$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var elm$core$Basics$and = _Basics_and;
var elm$core$Basics$or = _Basics_or;
var elm$core$Char$toCode = _Char_toCode;
var elm$core$Char$isLower = function (_char) {
	var code = elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var elm$core$Char$isUpper = function (_char) {
	var code = elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var elm$core$Char$isAlpha = function (_char) {
	return elm$core$Char$isLower(_char) || elm$core$Char$isUpper(_char);
};
var elm$core$Char$isDigit = function (_char) {
	var code = elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var elm$core$Char$isAlphaNum = function (_char) {
	return elm$core$Char$isLower(_char) || (elm$core$Char$isUpper(_char) || elm$core$Char$isDigit(_char));
};
var elm$core$List$length = function (xs) {
	return A3(
		elm$core$List$foldl,
		F2(
			function (_n0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var elm$core$List$map2 = _List_map2;
var elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2(elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var elm$core$List$range = F2(
	function (lo, hi) {
		return A3(elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			elm$core$List$map2,
			f,
			A2(
				elm$core$List$range,
				0,
				elm$core$List$length(xs) - 1),
			xs);
	});
var elm$core$String$all = _String_all;
var elm$core$String$uncons = _String_uncons;
var elm$json$Json$Decode$indent = function (str) {
	return A2(
		elm$core$String$join,
		'\n    ',
		A2(elm$core$String$split, '\n', str));
};
var elm$json$Json$Encode$encode = _Json_encode;
var elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + (elm$core$String$fromInt(i + 1) + (') ' + elm$json$Json$Decode$indent(
			elm$json$Json$Decode$errorToString(error))));
	});
var elm$json$Json$Decode$errorToString = function (error) {
	return A2(elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 'Field':
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _n1 = elm$core$String$uncons(f);
						if (_n1.$ === 'Nothing') {
							return false;
						} else {
							var _n2 = _n1.a;
							var _char = _n2.a;
							var rest = _n2.b;
							return elm$core$Char$isAlpha(_char) && A2(elm$core$String$all, elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2(elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'Index':
					var i = error.a;
					var err = error.b;
					var indexName = '[' + (elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2(elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'OneOf':
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									elm$core$String$join,
									'',
									elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										elm$core$String$join,
										'',
										elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + (elm$core$String$fromInt(
								elm$core$List$length(errors)) + ' ways:'));
							return A2(
								elm$core$String$join,
								'\n\n',
								A2(
									elm$core$List$cons,
									introduction,
									A2(elm$core$List$indexedMap, elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								elm$core$String$join,
								'',
								elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + (elm$json$Json$Decode$indent(
						A2(elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var elm$core$Platform$sendToApp = _Platform_sendToApp;
var elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var elm$core$Result$map = F2(
	function (func, ra) {
		if (ra.$ === 'Ok') {
			var a = ra.a;
			return elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return elm$core$Result$Err(e);
		}
	});
var elm$http$Http$BadStatus_ = F2(
	function (a, b) {
		return {$: 'BadStatus_', a: a, b: b};
	});
var elm$http$Http$BadUrl_ = function (a) {
	return {$: 'BadUrl_', a: a};
};
var elm$http$Http$GoodStatus_ = F2(
	function (a, b) {
		return {$: 'GoodStatus_', a: a, b: b};
	});
var elm$http$Http$NetworkError_ = {$: 'NetworkError_'};
var elm$http$Http$Receiving = function (a) {
	return {$: 'Receiving', a: a};
};
var elm$http$Http$Sending = function (a) {
	return {$: 'Sending', a: a};
};
var elm$http$Http$Timeout_ = {$: 'Timeout_'};
var elm$http$Http$expectStringResponse = F2(
	function (toMsg, toResult) {
		return A3(
			_Http_expect,
			'',
			elm$core$Basics$identity,
			A2(elm$core$Basics$composeR, toResult, toMsg));
	});
var elm$core$Result$mapError = F2(
	function (f, result) {
		if (result.$ === 'Ok') {
			var v = result.a;
			return elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return elm$core$Result$Err(
				f(e));
		}
	});
var elm$http$Http$BadBody = function (a) {
	return {$: 'BadBody', a: a};
};
var elm$http$Http$BadStatus = function (a) {
	return {$: 'BadStatus', a: a};
};
var elm$http$Http$BadUrl = function (a) {
	return {$: 'BadUrl', a: a};
};
var elm$http$Http$NetworkError = {$: 'NetworkError'};
var elm$http$Http$Timeout = {$: 'Timeout'};
var elm$http$Http$resolve = F2(
	function (toResult, response) {
		switch (response.$) {
			case 'BadUrl_':
				var url = response.a;
				return elm$core$Result$Err(
					elm$http$Http$BadUrl(url));
			case 'Timeout_':
				return elm$core$Result$Err(elm$http$Http$Timeout);
			case 'NetworkError_':
				return elm$core$Result$Err(elm$http$Http$NetworkError);
			case 'BadStatus_':
				var metadata = response.a;
				return elm$core$Result$Err(
					elm$http$Http$BadStatus(metadata.statusCode));
			default:
				var body = response.b;
				return A2(
					elm$core$Result$mapError,
					elm$http$Http$BadBody,
					toResult(body));
		}
	});
var elm$http$Http$expectString = function (toMsg) {
	return A2(
		elm$http$Http$expectStringResponse,
		toMsg,
		elm$http$Http$resolve(elm$core$Result$Ok));
};
var elm$http$Http$emptyBody = _Http_emptyBody;
var elm$http$Http$Request = function (a) {
	return {$: 'Request', a: a};
};
var elm$core$Task$succeed = _Scheduler_succeed;
var elm$http$Http$State = F2(
	function (reqs, subs) {
		return {reqs: reqs, subs: subs};
	});
var elm$http$Http$init = elm$core$Task$succeed(
	A2(elm$http$Http$State, elm$core$Dict$empty, _List_Nil));
var elm$core$Task$andThen = _Scheduler_andThen;
var elm$core$Process$kill = _Scheduler_kill;
var elm$core$Process$spawn = _Scheduler_spawn;
var elm$http$Http$updateReqs = F3(
	function (router, cmds, reqs) {
		updateReqs:
		while (true) {
			if (!cmds.b) {
				return elm$core$Task$succeed(reqs);
			} else {
				var cmd = cmds.a;
				var otherCmds = cmds.b;
				if (cmd.$ === 'Cancel') {
					var tracker = cmd.a;
					var _n2 = A2(elm$core$Dict$get, tracker, reqs);
					if (_n2.$ === 'Nothing') {
						var $temp$router = router,
							$temp$cmds = otherCmds,
							$temp$reqs = reqs;
						router = $temp$router;
						cmds = $temp$cmds;
						reqs = $temp$reqs;
						continue updateReqs;
					} else {
						var pid = _n2.a;
						return A2(
							elm$core$Task$andThen,
							function (_n3) {
								return A3(
									elm$http$Http$updateReqs,
									router,
									otherCmds,
									A2(elm$core$Dict$remove, tracker, reqs));
							},
							elm$core$Process$kill(pid));
					}
				} else {
					var req = cmd.a;
					return A2(
						elm$core$Task$andThen,
						function (pid) {
							var _n4 = req.tracker;
							if (_n4.$ === 'Nothing') {
								return A3(elm$http$Http$updateReqs, router, otherCmds, reqs);
							} else {
								var tracker = _n4.a;
								return A3(
									elm$http$Http$updateReqs,
									router,
									otherCmds,
									A3(elm$core$Dict$insert, tracker, pid, reqs));
							}
						},
						elm$core$Process$spawn(
							A3(
								_Http_toTask,
								router,
								elm$core$Platform$sendToApp(router),
								req)));
				}
			}
		}
	});
var elm$http$Http$onEffects = F4(
	function (router, cmds, subs, state) {
		return A2(
			elm$core$Task$andThen,
			function (reqs) {
				return elm$core$Task$succeed(
					A2(elm$http$Http$State, reqs, subs));
			},
			A3(elm$http$Http$updateReqs, router, cmds, state.reqs));
	});
var elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							elm$core$List$foldl,
							fn,
							acc,
							elm$core$List$reverse(r4)) : A4(elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4(elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _n0 = f(mx);
		if (_n0.$ === 'Just') {
			var x = _n0.a;
			return A2(elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			elm$core$List$foldr,
			elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			elm$core$Task$andThen,
			function (a) {
				return A2(
					elm$core$Task$andThen,
					function (b) {
						return elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var elm$core$Task$sequence = function (tasks) {
	return A3(
		elm$core$List$foldr,
		elm$core$Task$map2(elm$core$List$cons),
		elm$core$Task$succeed(_List_Nil),
		tasks);
};
var elm$http$Http$maybeSend = F4(
	function (router, desiredTracker, progress, _n0) {
		var actualTracker = _n0.a;
		var toMsg = _n0.b;
		return _Utils_eq(desiredTracker, actualTracker) ? elm$core$Maybe$Just(
			A2(
				elm$core$Platform$sendToApp,
				router,
				toMsg(progress))) : elm$core$Maybe$Nothing;
	});
var elm$http$Http$onSelfMsg = F3(
	function (router, _n0, state) {
		var tracker = _n0.a;
		var progress = _n0.b;
		return A2(
			elm$core$Task$andThen,
			function (_n1) {
				return elm$core$Task$succeed(state);
			},
			elm$core$Task$sequence(
				A2(
					elm$core$List$filterMap,
					A3(elm$http$Http$maybeSend, router, tracker, progress),
					state.subs)));
	});
var elm$http$Http$Cancel = function (a) {
	return {$: 'Cancel', a: a};
};
var elm$http$Http$cmdMap = F2(
	function (func, cmd) {
		if (cmd.$ === 'Cancel') {
			var tracker = cmd.a;
			return elm$http$Http$Cancel(tracker);
		} else {
			var r = cmd.a;
			return elm$http$Http$Request(
				{
					allowCookiesFromOtherDomains: r.allowCookiesFromOtherDomains,
					body: r.body,
					expect: A2(_Http_mapExpect, func, r.expect),
					headers: r.headers,
					method: r.method,
					timeout: r.timeout,
					tracker: r.tracker,
					url: r.url
				});
		}
	});
var elm$http$Http$MySub = F2(
	function (a, b) {
		return {$: 'MySub', a: a, b: b};
	});
var elm$http$Http$subMap = F2(
	function (func, _n0) {
		var tracker = _n0.a;
		var toMsg = _n0.b;
		return A2(
			elm$http$Http$MySub,
			tracker,
			A2(elm$core$Basics$composeR, toMsg, func));
	});
_Platform_effectManagers['Http'] = _Platform_createManager(elm$http$Http$init, elm$http$Http$onEffects, elm$http$Http$onSelfMsg, elm$http$Http$cmdMap, elm$http$Http$subMap);
var elm$http$Http$command = _Platform_leaf('Http');
var elm$http$Http$subscription = _Platform_leaf('Http');
var elm$http$Http$request = function (r) {
	return elm$http$Http$command(
		elm$http$Http$Request(
			{allowCookiesFromOtherDomains: false, body: r.body, expect: r.expect, headers: r.headers, method: r.method, timeout: r.timeout, tracker: r.tracker, url: r.url}));
};
var elm$http$Http$get = function (r) {
	return elm$http$Http$request(
		{body: elm$http$Http$emptyBody, expect: r.expect, headers: _List_Nil, method: 'GET', timeout: elm$core$Maybe$Nothing, tracker: elm$core$Maybe$Nothing, url: r.url});
};
var author$project$Update$download = F2(
	function (msg, url) {
		return elm$http$Http$get(
			{
				expect: elm$http$Http$expectString(msg),
				url: url
			});
	});
var author$project$Port$Event$Event = F3(
	function (topic, section, message) {
		return {message: message, section: section, topic: topic};
	});
var elm$json$Json$Encode$int = _Json_wrap;
var elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			elm$core$List$foldl,
			F2(
				function (_n0, obj) {
					var k = _n0.a;
					var v = _n0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(_Utils_Tuple0),
			pairs));
};
var elm$json$Json$Encode$string = _Json_wrap;
var author$project$Port$Event$encode = function (_n0) {
	var topic = _n0.topic;
	var section = _n0.section;
	var message = _n0.message;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'topic',
				elm$json$Json$Encode$string(topic)),
				_Utils_Tuple2(
				'section',
				elm$json$Json$Encode$int(section)),
				_Utils_Tuple2('message', message)
			]));
};
var elm$json$Json$Encode$null = _Json_encodeNull;
var author$project$Index$Update$init = A3(
	author$project$Port$Event$Event,
	'index',
	-1,
	author$project$Port$Event$encode(
		A3(author$project$Port$Event$Event, 'list', -1, elm$json$Json$Encode$null)));
var author$project$Update$event2js = _Platform_outgoingPort(
	'event2js',
	function ($) {
		return elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'message',
					elm$core$Basics$identity($.message)),
					_Utils_Tuple2(
					'section',
					elm$json$Json$Encode$int($.section)),
					_Utils_Tuple2(
					'topic',
					elm$json$Json$Encode$string($.topic))
				]));
	});
var author$project$Update$initIndex = function (model) {
	return _Utils_Tuple2(
		model,
		author$project$Update$event2js(author$project$Index$Update$init));
};
var andre_dietrich$parser_combinators$Combine$app = function (_n0) {
	var inner = _n0.a;
	return inner;
};
var andre_dietrich$parser_combinators$Combine$InputStream = F3(
	function (data, input, position) {
		return {data: data, input: input, position: position};
	});
var andre_dietrich$parser_combinators$Combine$initStream = function (s) {
	return A3(andre_dietrich$parser_combinators$Combine$InputStream, s, s, 0);
};
var andre_dietrich$parser_combinators$Combine$runParser = F3(
	function (p, st, s) {
		var _n0 = A3(
			andre_dietrich$parser_combinators$Combine$app,
			p,
			st,
			andre_dietrich$parser_combinators$Combine$initStream(s));
		if (_n0.c.$ === 'Ok') {
			var state = _n0.a;
			var stream = _n0.b;
			var res = _n0.c.a;
			return elm$core$Result$Ok(
				_Utils_Tuple3(state, stream, res));
		} else {
			var state = _n0.a;
			var stream = _n0.b;
			var ms = _n0.c.a;
			return elm$core$Result$Err(
				_Utils_Tuple3(state, stream, ms));
		}
	});
var andre_dietrich$parser_combinators$Combine$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var andre_dietrich$parser_combinators$Combine$andThen = F2(
	function (f, p) {
		return andre_dietrich$parser_combinators$Combine$Parser(
			F2(
				function (state, stream) {
					var _n0 = A3(andre_dietrich$parser_combinators$Combine$app, p, state, stream);
					if (_n0.c.$ === 'Ok') {
						var rstate = _n0.a;
						var rstream = _n0.b;
						var res = _n0.c.a;
						return A3(
							andre_dietrich$parser_combinators$Combine$app,
							f(res),
							rstate,
							rstream);
					} else {
						var estate = _n0.a;
						var estream = _n0.b;
						var ms = _n0.c.a;
						return _Utils_Tuple3(
							estate,
							estream,
							elm$core$Result$Err(ms));
					}
				}));
	});
var andre_dietrich$parser_combinators$Combine$bimap = F3(
	function (fok, ferr, p) {
		return andre_dietrich$parser_combinators$Combine$Parser(
			F2(
				function (state, stream) {
					var _n0 = A3(andre_dietrich$parser_combinators$Combine$app, p, state, stream);
					if (_n0.c.$ === 'Ok') {
						var rstate = _n0.a;
						var rstream = _n0.b;
						var res = _n0.c.a;
						return _Utils_Tuple3(
							rstate,
							rstream,
							elm$core$Result$Ok(
								fok(res)));
					} else {
						var estate = _n0.a;
						var estream = _n0.b;
						var ms = _n0.c.a;
						return _Utils_Tuple3(
							estate,
							estream,
							elm$core$Result$Err(
								ferr(ms)));
					}
				}));
	});
var andre_dietrich$parser_combinators$Combine$map = F2(
	function (f, p) {
		return A3(andre_dietrich$parser_combinators$Combine$bimap, f, elm$core$Basics$identity, p);
	});
var pilatch$flip$Flip$flip = F3(
	function (_function, argB, argA) {
		return A2(_function, argA, argB);
	});
var andre_dietrich$parser_combinators$Combine$andMap = F2(
	function (rp, lp) {
		return A2(
			andre_dietrich$parser_combinators$Combine$andThen,
			A2(pilatch$flip$Flip$flip, andre_dietrich$parser_combinators$Combine$map, rp),
			lp);
	});
var elm$core$Basics$always = F2(
	function (a, _n0) {
		return a;
	});
var andre_dietrich$parser_combinators$Combine$ignore = F2(
	function (p1, p2) {
		return A2(
			andre_dietrich$parser_combinators$Combine$andMap,
			p1,
			A2(andre_dietrich$parser_combinators$Combine$map, elm$core$Basics$always, p2));
	});
var andre_dietrich$parser_combinators$Combine$keep = F2(
	function (p1, p2) {
		return A2(
			andre_dietrich$parser_combinators$Combine$andMap,
			p1,
			A2(
				andre_dietrich$parser_combinators$Combine$map,
				pilatch$flip$Flip$flip(elm$core$Basics$always),
				p2));
	});
var andre_dietrich$parser_combinators$Combine$succeed = function (res) {
	return andre_dietrich$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return _Utils_Tuple3(
					state,
					stream,
					elm$core$Result$Ok(res));
			}));
};
var andre_dietrich$parser_combinators$Combine$lazy = function (t) {
	return A2(
		andre_dietrich$parser_combinators$Combine$andThen,
		t,
		andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0));
};
var andre_dietrich$parser_combinators$Combine$maybe = function (p) {
	return andre_dietrich$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				var _n0 = A3(andre_dietrich$parser_combinators$Combine$app, p, state, stream);
				if (_n0.c.$ === 'Ok') {
					var rstate = _n0.a;
					var rstream = _n0.b;
					var res = _n0.c.a;
					return _Utils_Tuple3(
						rstate,
						rstream,
						elm$core$Result$Ok(
							elm$core$Maybe$Just(res)));
				} else {
					return _Utils_Tuple3(
						state,
						stream,
						elm$core$Result$Ok(elm$core$Maybe$Nothing));
				}
			}));
};
var andre_dietrich$parser_combinators$Combine$modifyState = function (f) {
	return andre_dietrich$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					andre_dietrich$parser_combinators$Combine$app,
					andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0),
					f(state),
					stream);
			}));
};
var andre_dietrich$parser_combinators$Combine$onsuccess = function (res) {
	return andre_dietrich$parser_combinators$Combine$map(
		elm$core$Basics$always(res));
};
var andre_dietrich$parser_combinators$Combine$skip = function (p) {
	return A2(andre_dietrich$parser_combinators$Combine$onsuccess, _Utils_Tuple0, p);
};
var andre_dietrich$parser_combinators$Combine$mapError = andre_dietrich$parser_combinators$Combine$bimap(elm$core$Basics$identity);
var andre_dietrich$parser_combinators$Combine$onerror = F2(
	function (m, p) {
		return A2(
			andre_dietrich$parser_combinators$Combine$mapError,
			elm$core$Basics$always(
				_List_fromArray(
					[m])),
			p);
	});
var elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var elm$core$String$length = _String_length;
var elm$core$String$slice = _String_slice;
var elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			elm$core$String$slice,
			n,
			elm$core$String$length(string),
			string);
	});
var elm$core$String$startsWith = _String_startsWith;
var elm$regex$Regex$Match = F4(
	function (match, index, number, submatches) {
		return {index: index, match: match, number: number, submatches: submatches};
	});
var elm$regex$Regex$findAtMost = _Regex_findAtMost;
var elm$regex$Regex$never = _Regex_never;
var andre_dietrich$parser_combinators$Combine$regexer = F5(
	function (input, output, pat, state, stream) {
		var pattern = A2(elm$core$String$startsWith, '^', pat) ? pat : ('^' + pat);
		var _n0 = A3(
			elm$regex$Regex$findAtMost,
			1,
			A2(
				elm$core$Maybe$withDefault,
				elm$regex$Regex$never,
				input(pattern)),
			stream.input);
		if (_n0.b && (!_n0.b.b)) {
			var match = _n0.a;
			var len = elm$core$String$length(match.match);
			var pos = stream.position + len;
			var rem = A2(elm$core$String$dropLeft, len, stream.input);
			return _Utils_Tuple3(
				state,
				_Utils_update(
					stream,
					{input: rem, position: pos}),
				elm$core$Result$Ok(
					output(match)));
		} else {
			return _Utils_Tuple3(
				state,
				stream,
				elm$core$Result$Err(
					_List_fromArray(
						['expected input matching Regexp /' + (pattern + '/')])));
		}
	});
var elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
var elm$regex$Regex$fromString = function (string) {
	return A2(
		elm$regex$Regex$fromStringWith,
		{caseInsensitive: false, multiline: false},
		string);
};
var andre_dietrich$parser_combinators$Combine$regex = A2(
	elm$core$Basics$composeR,
	A2(
		andre_dietrich$parser_combinators$Combine$regexer,
		elm$regex$Regex$fromString,
		function ($) {
			return $.match;
		}),
	andre_dietrich$parser_combinators$Combine$Parser);
var andre_dietrich$parser_combinators$Combine$whitespace = A2(
	andre_dietrich$parser_combinators$Combine$onerror,
	'optional whitespace',
	andre_dietrich$parser_combinators$Combine$regex('\\s*'));
var andre_dietrich$parser_combinators$Combine$emptyErr = andre_dietrich$parser_combinators$Combine$Parser(
	F2(
		function (state, stream) {
			return _Utils_Tuple3(
				state,
				stream,
				elm$core$Result$Err(_List_Nil));
		}));
var andre_dietrich$parser_combinators$Combine$or = F2(
	function (lp, rp) {
		return andre_dietrich$parser_combinators$Combine$Parser(
			F2(
				function (state, stream) {
					var _n0 = A3(andre_dietrich$parser_combinators$Combine$app, lp, state, stream);
					if (_n0.c.$ === 'Ok') {
						var res = _n0;
						return res;
					} else {
						var lms = _n0.c.a;
						var _n1 = A3(andre_dietrich$parser_combinators$Combine$app, rp, state, stream);
						if (_n1.c.$ === 'Ok') {
							var res = _n1;
							return res;
						} else {
							var rms = _n1.c.a;
							return _Utils_Tuple3(
								state,
								stream,
								elm$core$Result$Err(
									_Utils_ap(lms, rms)));
						}
					}
				}));
	});
var andre_dietrich$parser_combinators$Combine$choice = function (xs) {
	return A3(elm$core$List$foldr, andre_dietrich$parser_combinators$Combine$or, andre_dietrich$parser_combinators$Combine$emptyErr, xs);
};
var andre_dietrich$parser_combinators$Combine$many = function (p) {
	var accumulate = F3(
		function (acc, state, stream) {
			accumulate:
			while (true) {
				var _n0 = A3(andre_dietrich$parser_combinators$Combine$app, p, state, stream);
				if (_n0.c.$ === 'Ok') {
					var rstate = _n0.a;
					var rstream = _n0.b;
					var res = _n0.c.a;
					if (_Utils_eq(stream, rstream)) {
						return _Utils_Tuple3(
							rstate,
							rstream,
							elm$core$List$reverse(acc));
					} else {
						var $temp$acc = A2(elm$core$List$cons, res, acc),
							$temp$state = rstate,
							$temp$stream = rstream;
						acc = $temp$acc;
						state = $temp$state;
						stream = $temp$stream;
						continue accumulate;
					}
				} else {
					return _Utils_Tuple3(
						state,
						stream,
						elm$core$List$reverse(acc));
				}
			}
		});
	return andre_dietrich$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				var _n1 = A3(accumulate, _List_Nil, state, stream);
				var rstate = _n1.a;
				var rstream = _n1.b;
				var res = _n1.c;
				return _Utils_Tuple3(
					rstate,
					rstream,
					elm$core$Result$Ok(res));
			}));
};
var andre_dietrich$parser_combinators$Combine$many1 = function (p) {
	return A2(
		andre_dietrich$parser_combinators$Combine$andMap,
		andre_dietrich$parser_combinators$Combine$many(p),
		A2(andre_dietrich$parser_combinators$Combine$map, elm$core$List$cons, p));
};
var andre_dietrich$parser_combinators$Combine$string = function (s) {
	return andre_dietrich$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				if (A2(elm$core$String$startsWith, s, stream.input)) {
					var len = elm$core$String$length(s);
					var pos = stream.position + len;
					var rem = A2(elm$core$String$dropLeft, len, stream.input);
					return _Utils_Tuple3(
						state,
						_Utils_update(
							stream,
							{input: rem, position: pos}),
						elm$core$Result$Ok(s));
				} else {
					return _Utils_Tuple3(
						state,
						stream,
						elm$core$Result$Err(
							_List_fromArray(
								['expected \"' + (s + '\"')])));
				}
			}));
};
var author$project$Lia$Markdown$Inline$Types$Chars = F2(
	function (a, b) {
		return {$: 'Chars', a: a, b: b};
	});
var author$project$Lia$Markdown$Inline$Parser$combine = function (list) {
	combine:
	while (true) {
		if (!list.b) {
			return _List_Nil;
		} else {
			if (!list.b.b) {
				var xs = list.a;
				return _List_fromArray(
					[xs]);
			} else {
				var x1 = list.a;
				var _n1 = list.b;
				var x2 = _n1.a;
				var xs = _n1.b;
				var _n2 = _Utils_Tuple2(x1, x2);
				if ((((_n2.a.$ === 'Chars') && (_n2.a.b.$ === 'Nothing')) && (_n2.b.$ === 'Chars')) && (_n2.b.b.$ === 'Nothing')) {
					var _n3 = _n2.a;
					var str1 = _n3.a;
					var _n4 = _n3.b;
					var _n5 = _n2.b;
					var str2 = _n5.a;
					var _n6 = _n5.b;
					var $temp$list = A2(
						elm$core$List$cons,
						A2(
							author$project$Lia$Markdown$Inline$Types$Chars,
							_Utils_ap(str1, str2),
							elm$core$Maybe$Nothing),
						xs);
					list = $temp$list;
					continue combine;
				} else {
					return A2(
						elm$core$List$cons,
						x1,
						author$project$Lia$Markdown$Inline$Parser$combine(
							A2(elm$core$List$cons, x2, xs)));
				}
			}
		}
	}
};
var andre_dietrich$parser_combinators$Combine$manyTill = F2(
	function (p, end_) {
		var accumulate = F3(
			function (acc, state, stream) {
				accumulate:
				while (true) {
					var _n0 = A3(andre_dietrich$parser_combinators$Combine$app, end_, state, stream);
					if (_n0.c.$ === 'Ok') {
						var rstate = _n0.a;
						var rstream = _n0.b;
						return _Utils_Tuple3(
							rstate,
							rstream,
							elm$core$Result$Ok(
								elm$core$List$reverse(acc)));
					} else {
						var estate = _n0.a;
						var estream = _n0.b;
						var ms = _n0.c.a;
						var _n1 = A3(andre_dietrich$parser_combinators$Combine$app, p, state, stream);
						if (_n1.c.$ === 'Ok') {
							var rstate = _n1.a;
							var rstream = _n1.b;
							var res = _n1.c.a;
							var $temp$acc = A2(elm$core$List$cons, res, acc),
								$temp$state = rstate,
								$temp$stream = rstream;
							acc = $temp$acc;
							state = $temp$state;
							stream = $temp$stream;
							continue accumulate;
						} else {
							return _Utils_Tuple3(
								estate,
								estream,
								elm$core$Result$Err(ms));
						}
					}
				}
			});
		return andre_dietrich$parser_combinators$Combine$Parser(
			accumulate(_List_Nil));
	});
var andre_dietrich$parser_combinators$Combine$optional = F2(
	function (res, p) {
		return A2(
			andre_dietrich$parser_combinators$Combine$or,
			p,
			andre_dietrich$parser_combinators$Combine$succeed(res));
	});
var andre_dietrich$parser_combinators$Combine$fail = function (m) {
	return andre_dietrich$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return _Utils_Tuple3(
					state,
					stream,
					elm$core$Result$Err(
						_List_fromArray(
							[m])));
			}));
};
var andre_dietrich$parser_combinators$Combine$Num$unwrap = function (value) {
	if (value.$ === 'Just') {
		var v = value.a;
		return andre_dietrich$parser_combinators$Combine$succeed(v);
	} else {
		return andre_dietrich$parser_combinators$Combine$fail('impossible state in Combine.Num.unwrap');
	}
};
var elm$core$String$toInt = _String_toInt;
var andre_dietrich$parser_combinators$Combine$Num$int = A2(
	andre_dietrich$parser_combinators$Combine$onerror,
	'expected an int',
	A2(
		andre_dietrich$parser_combinators$Combine$andThen,
		andre_dietrich$parser_combinators$Combine$Num$unwrap,
		A2(
			andre_dietrich$parser_combinators$Combine$map,
			elm$core$String$toInt,
			andre_dietrich$parser_combinators$Combine$regex('-?(?:0|[1-9]\\d*)'))));
var author$project$Lia$Markdown$Effect$Parser$effect_number = function () {
	var state = function (n) {
		return A2(
			andre_dietrich$parser_combinators$Combine$keep,
			andre_dietrich$parser_combinators$Combine$succeed(n),
			andre_dietrich$parser_combinators$Combine$modifyState(
				function (s) {
					return _Utils_update(
						s,
						{
							effect_model: function () {
								if (_Utils_cmp(n, s.effect_model.effects) > 0) {
									var e = s.effect_model;
									return _Utils_update(
										e,
										{effects: n});
								} else {
									return s.effect_model;
								}
							}(),
							effect_number: A2(elm$core$List$cons, n, s.effect_number)
						});
				}));
	};
	return A2(andre_dietrich$parser_combinators$Combine$andThen, state, andre_dietrich$parser_combinators$Combine$Num$int);
}();
var author$project$Lia$Markdown$Effect$Parser$reset_effect_number = andre_dietrich$parser_combinators$Combine$modifyState(
	function (s) {
		return _Utils_update(
			s,
			{
				effect_number: A2(elm$core$List$drop, 1, s.effect_number)
			});
	});
var author$project$Lia$Markdown$Inline$Types$EInline = F4(
	function (a, b, c, d) {
		return {$: 'EInline', a: a, b: b, c: c, d: d};
	});
var author$project$Lia$Markdown$Effect$Parser$inline = function (inlines) {
	return A2(
		andre_dietrich$parser_combinators$Combine$ignore,
		author$project$Lia$Markdown$Effect$Parser$reset_effect_number,
		A2(
			andre_dietrich$parser_combinators$Combine$andMap,
			A2(
				andre_dietrich$parser_combinators$Combine$manyTill,
				inlines,
				andre_dietrich$parser_combinators$Combine$string('}')),
			A2(
				andre_dietrich$parser_combinators$Combine$ignore,
				andre_dietrich$parser_combinators$Combine$string('}{'),
				A2(
					andre_dietrich$parser_combinators$Combine$andMap,
					A2(
						andre_dietrich$parser_combinators$Combine$optional,
						99999,
						A2(
							andre_dietrich$parser_combinators$Combine$keep,
							andre_dietrich$parser_combinators$Combine$Num$int,
							andre_dietrich$parser_combinators$Combine$regex('[\t ]*-[\t ]*'))),
					A2(
						andre_dietrich$parser_combinators$Combine$map,
						author$project$Lia$Markdown$Inline$Types$EInline,
						A2(
							andre_dietrich$parser_combinators$Combine$keep,
							author$project$Lia$Markdown$Effect$Parser$effect_number,
							andre_dietrich$parser_combinators$Combine$string('{')))))));
};
var author$project$Lia$Markdown$Footnote$Model$insert = F3(
	function (key, val, model) {
		return A3(elm$core$Dict$insert, key, val, model);
	});
var author$project$Lia$Markdown$Footnote$Parser$add_footnote = function (_n0) {
	var key = _n0.a;
	var val = _n0.b;
	return andre_dietrich$parser_combinators$Combine$modifyState(
		function (s) {
			return _Utils_update(
				s,
				{
					footnotes: A3(author$project$Lia$Markdown$Footnote$Model$insert, key, val, s.footnotes)
				});
		});
};
var author$project$Lia$Markdown$Inline$Types$FootnoteMark = F2(
	function (a, b) {
		return {$: 'FootnoteMark', a: a, b: b};
	});
var author$project$Lia$Markdown$Types$Paragraph = F2(
	function (a, b) {
		return {$: 'Paragraph', a: a, b: b};
	});
var author$project$Lia$Markdown$Footnote$Parser$store = function (_n0) {
	var key = _n0.a;
	var val = _n0.b;
	if (val.$ === 'Just') {
		var v = val.a;
		return A2(
			andre_dietrich$parser_combinators$Combine$keep,
			andre_dietrich$parser_combinators$Combine$succeed(
				author$project$Lia$Markdown$Inline$Types$FootnoteMark(key)),
			author$project$Lia$Markdown$Footnote$Parser$add_footnote(
				_Utils_Tuple2(
					key,
					_List_fromArray(
						[
							A2(
							author$project$Lia$Markdown$Types$Paragraph,
							elm$core$Maybe$Nothing,
							_List_fromArray(
								[
									A2(author$project$Lia$Markdown$Inline$Types$Chars, v, elm$core$Maybe$Nothing)
								]))
						]))));
	} else {
		return andre_dietrich$parser_combinators$Combine$succeed(
			author$project$Lia$Markdown$Inline$Types$FootnoteMark(key));
	}
};
var andre_dietrich$parser_combinators$Combine$primitive = andre_dietrich$parser_combinators$Combine$Parser;
var andre_dietrich$parser_combinators$Combine$Char$satisfy = function (pred) {
	return andre_dietrich$parser_combinators$Combine$primitive(
		F2(
			function (state, stream) {
				var message = 'could not satisfy predicate';
				var _n0 = elm$core$String$uncons(stream.input);
				if (_n0.$ === 'Just') {
					var _n1 = _n0.a;
					var h = _n1.a;
					var rest = _n1.b;
					return pred(h) ? _Utils_Tuple3(
						state,
						_Utils_update(
							stream,
							{input: rest, position: stream.position + 1}),
						elm$core$Result$Ok(h)) : _Utils_Tuple3(
						state,
						stream,
						elm$core$Result$Err(
							_List_fromArray(
								[message])));
				} else {
					return _Utils_Tuple3(
						state,
						stream,
						elm$core$Result$Err(
							_List_fromArray(
								[message])));
				}
			}));
};
var andre_dietrich$parser_combinators$Combine$Char$anyChar = A2(
	andre_dietrich$parser_combinators$Combine$onerror,
	'expected any character',
	andre_dietrich$parser_combinators$Combine$Char$satisfy(
		elm$core$Basics$always(true)));
var elm$core$String$fromList = _String_fromList;
var author$project$Lia$Parser$Helper$stringTill = function (p) {
	return A2(
		andre_dietrich$parser_combinators$Combine$map,
		elm$core$String$fromList,
		A2(andre_dietrich$parser_combinators$Combine$manyTill, andre_dietrich$parser_combinators$Combine$Char$anyChar, p));
};
var elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var author$project$Lia$Markdown$Footnote$Parser$inline = A2(
	andre_dietrich$parser_combinators$Combine$andThen,
	author$project$Lia$Markdown$Footnote$Parser$store,
	A2(
		andre_dietrich$parser_combinators$Combine$andMap,
		andre_dietrich$parser_combinators$Combine$maybe(
			A2(
				andre_dietrich$parser_combinators$Combine$keep,
				author$project$Lia$Parser$Helper$stringTill(
					andre_dietrich$parser_combinators$Combine$string(')')),
				andre_dietrich$parser_combinators$Combine$string('('))),
		A2(
			andre_dietrich$parser_combinators$Combine$map,
			elm$core$Tuple$pair,
			A2(
				andre_dietrich$parser_combinators$Combine$keep,
				author$project$Lia$Parser$Helper$stringTill(
					andre_dietrich$parser_combinators$Combine$string(']')),
				andre_dietrich$parser_combinators$Combine$string('[^')))));
var author$project$Lia$Markdown$Inline$Multimedia$regex = function (pattern) {
	return A2(
		elm$core$Maybe$withDefault,
		elm$regex$Regex$never,
		elm$regex$Regex$fromString(pattern));
};
var elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return elm$core$Maybe$Just(x);
	} else {
		return elm$core$Maybe$Nothing;
	}
};
var author$project$Lia$Markdown$Inline$Multimedia$check = F2(
	function (pattern, url) {
		var _n0 = A3(elm$regex$Regex$findAtMost, 1, pattern, url);
		if (_n0.b && (!_n0.b.b)) {
			var match = _n0.a;
			return A2(
				elm$core$Maybe$withDefault,
				elm$core$Maybe$Nothing,
				elm$core$List$head(match.submatches));
		} else {
			return elm$core$Maybe$Nothing;
		}
	});
var author$project$Lia$Markdown$Inline$Multimedia$search = F2(
	function (patterns, url) {
		search:
		while (true) {
			if (patterns.b) {
				var t = patterns.a;
				var ts = patterns.b;
				var _n1 = A2(author$project$Lia$Markdown$Inline$Multimedia$check, t.pattern, url);
				if (_n1.$ === 'Just') {
					var str = _n1.a;
					return _Utils_Tuple2(
						true,
						t.embed(str));
				} else {
					var $temp$patterns = ts,
						$temp$url = url;
					patterns = $temp$patterns;
					url = $temp$url;
					continue search;
				}
			} else {
				return _Utils_Tuple2(false, url);
			}
		}
	});
var author$project$Lia$Markdown$Inline$Multimedia$audio = author$project$Lia$Markdown$Inline$Multimedia$search(
	_List_fromArray(
		[
			{
			embed: function (w) {
				return 'https://w.soundcloud.com/player/?url=https://soundcloud.com/' + w;
			},
			pattern: author$project$Lia$Markdown$Inline$Multimedia$regex('https?:\\/\\/(?:w\\.|www\\.|)(?:soundcloud\\.com\\/)(?:(?:player\\/\\?url=https\\%3A\\/\\/api.soundcloud.com\\/tracks\\/)|)(((\\w|-)[^A-z]{7})|([A-Za-z0-9]+(?:[-_][A-Za-z0-9]+)*(?!\\/sets(?:\\/|$))(?:\\/[A-Za-z0-9]+(?:[-_][A-Za-z0-9]+)*){1,2}))')
		}
		]));
var author$project$Lia$Markdown$Inline$Multimedia$movie = author$project$Lia$Markdown$Inline$Multimedia$search(
	_List_fromArray(
		[
			{
			embed: function (w) {
				return 'https://www.youtube.com/embed/' + w;
			},
			pattern: author$project$Lia$Markdown$Inline$Multimedia$regex('(?:http(?:s)?://)?(?:www\\.)?(?:youtu\\.be/|youtube\\.com/(?:(?:watch)?\\?(?:.*&)?v(?:i)?=|(?:v|vi|user)/))([^\\?&\"\'<> #]+)')
		},
			{
			embed: function (w) {
				return 'https://player.vimeo.com/video/' + w;
			},
			pattern: author$project$Lia$Markdown$Inline$Multimedia$regex('(?:http(?:s)?://)?(?:www\\.)?(?:player.)?(?:vimeo\\.com).*?(\\d+)')
		},
			{
			embed: function (w) {
				return 'https://www.teachertube.com/embed/video/' + w;
			},
			pattern: author$project$Lia$Markdown$Inline$Multimedia$regex('(?:http(?:s)?://)?(?:www\\.)?(?:teachertube\\.com).*?(\\d+)')
		}
		]));
var author$project$Lia$Markdown$Inline$Parser$attr_ = function (dict) {
	return A3(
		elm$core$Dict$insert,
		'style',
		function () {
			var _n0 = A2(elm$core$Dict$get, 'style', dict);
			if (_n0.$ === 'Just') {
				var value = _n0.a;
				return 'display: inline-block;' + value;
			} else {
				return 'display: inline-block;';
			}
		}(),
		dict);
};
var elm$core$String$toLower = _String_toLower;
var author$project$Lia$Markdown$Inline$Parser$attribute = A2(
	andre_dietrich$parser_combinators$Combine$andMap,
	author$project$Lia$Parser$Helper$stringTill(
		andre_dietrich$parser_combinators$Combine$regex('\"[ \t\n]*')),
	A2(
		andre_dietrich$parser_combinators$Combine$map,
		F2(
			function (k, v) {
				return _Utils_Tuple2(
					elm$core$String$toLower(k),
					v);
			}),
		A2(
			andre_dietrich$parser_combinators$Combine$ignore,
			andre_dietrich$parser_combinators$Combine$regex('[ \t\n]*=[ \t\n]*\"'),
			A2(
				andre_dietrich$parser_combinators$Combine$keep,
				andre_dietrich$parser_combinators$Combine$regex('\\w+'),
				andre_dietrich$parser_combinators$Combine$whitespace))));
var author$project$Lia$Markdown$Inline$Parser$comment = function (p) {
	return A2(
		andre_dietrich$parser_combinators$Combine$keep,
		A2(
			andre_dietrich$parser_combinators$Combine$manyTill,
			p,
			andre_dietrich$parser_combinators$Combine$string('-->')),
		andre_dietrich$parser_combinators$Combine$string('<!--'));
};
var author$project$Lia$Markdown$Effect$Model$Element = F3(
	function (narrator, comment, paragraphs) {
		return {comment: comment, narrator: narrator, paragraphs: paragraphs};
	});
var andre_dietrich$parser_combinators$Combine$withState = function (f) {
	return andre_dietrich$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					andre_dietrich$parser_combinators$Combine$app,
					f(state),
					state,
					stream);
			}));
};
var elm$core$Array$length = function (_n0) {
	var len = _n0.a;
	return len;
};
var author$project$Lia$Markdown$Effect$Parser$get_counter = function (idx) {
	return andre_dietrich$parser_combinators$Combine$withState(
		function (s) {
			return andre_dietrich$parser_combinators$Combine$succeed(
				function () {
					var _n0 = A2(elm$core$Dict$get, idx, s.effect_model.comments);
					if (_n0.$ === 'Just') {
						var e = _n0.a;
						return elm$core$Array$length(e.paragraphs) - 1;
					} else {
						return 0;
					}
				}());
		});
};
var elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var elm$core$String$concat = function (strings) {
	return A2(elm$core$String$join, '', strings);
};
var author$project$Lia$Markdown$Inline$Stringify$inline2string = function (inline) {
	inline2string:
	while (true) {
		switch (inline.$) {
			case 'Chars':
				var str = inline.a;
				return str;
			case 'Bold':
				var x = inline.a;
				var $temp$inline = x;
				inline = $temp$inline;
				continue inline2string;
			case 'Italic':
				var x = inline.a;
				var $temp$inline = x;
				inline = $temp$inline;
				continue inline2string;
			case 'Strike':
				var x = inline.a;
				var $temp$inline = x;
				inline = $temp$inline;
				continue inline2string;
			case 'Underline':
				var x = inline.a;
				var $temp$inline = x;
				inline = $temp$inline;
				continue inline2string;
			case 'Superscript':
				var x = inline.a;
				var $temp$inline = x;
				inline = $temp$inline;
				continue inline2string;
			case 'Verbatim':
				var str = inline.a;
				return str;
			case 'Formula':
				var str = inline.b;
				return str;
			case 'Ref':
				var ref = inline.a;
				return author$project$Lia$Markdown$Inline$Stringify$ref2string(ref);
			case 'EInline':
				var inlines = inline.c;
				return author$project$Lia$Markdown$Inline$Stringify$stringify(inlines);
			case 'Container':
				var inlines = inline.a;
				return author$project$Lia$Markdown$Inline$Stringify$stringify(inlines);
			default:
				return '';
		}
	}
};
var author$project$Lia$Markdown$Inline$Stringify$ref2string = function (ref) {
	switch (ref.$) {
		case 'Movie':
			var alt = ref.a;
			return author$project$Lia$Markdown$Inline$Stringify$stringify(alt);
		case 'Image':
			var alt = ref.a;
			return author$project$Lia$Markdown$Inline$Stringify$stringify(alt);
		case 'Audio':
			var alt = ref.a;
			return author$project$Lia$Markdown$Inline$Stringify$stringify(alt);
		case 'Link':
			var alt = ref.a;
			return author$project$Lia$Markdown$Inline$Stringify$stringify(alt);
		default:
			var alt = ref.a;
			return author$project$Lia$Markdown$Inline$Stringify$stringify(alt);
	}
};
var author$project$Lia$Markdown$Inline$Stringify$stringify = function (inlines) {
	return elm$core$String$concat(
		A2(elm$core$List$map, author$project$Lia$Markdown$Inline$Stringify$inline2string, inlines));
};
var elm$core$Array$fromListHelp = F3(
	function (list, nodeList, nodeListSize) {
		fromListHelp:
		while (true) {
			var _n0 = A2(elm$core$Elm$JsArray$initializeFromList, elm$core$Array$branchFactor, list);
			var jsArray = _n0.a;
			var remainingItems = _n0.b;
			if (_Utils_cmp(
				elm$core$Elm$JsArray$length(jsArray),
				elm$core$Array$branchFactor) < 0) {
				return A2(
					elm$core$Array$builderToArray,
					true,
					{nodeList: nodeList, nodeListSize: nodeListSize, tail: jsArray});
			} else {
				var $temp$list = remainingItems,
					$temp$nodeList = A2(
					elm$core$List$cons,
					elm$core$Array$Leaf(jsArray),
					nodeList),
					$temp$nodeListSize = nodeListSize + 1;
				list = $temp$list;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue fromListHelp;
			}
		}
	});
var elm$core$Array$fromList = function (list) {
	if (!list.b) {
		return elm$core$Array$empty;
	} else {
		return A3(elm$core$Array$fromListHelp, list, _List_Nil, 0);
	}
};
var elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var elm$core$Array$bitMask = 4294967295 >>> (32 - elm$core$Array$shiftStep);
var elm$core$Basics$ge = _Utils_ge;
var elm$core$Bitwise$and = _Bitwise_and;
var elm$core$Elm$JsArray$push = _JsArray_push;
var elm$core$Elm$JsArray$singleton = _JsArray_singleton;
var elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
var elm$core$Elm$JsArray$unsafeSet = _JsArray_unsafeSet;
var elm$core$Array$insertTailInTree = F4(
	function (shift, index, tail, tree) {
		var pos = elm$core$Array$bitMask & (index >>> shift);
		if (_Utils_cmp(
			pos,
			elm$core$Elm$JsArray$length(tree)) > -1) {
			if (shift === 5) {
				return A2(
					elm$core$Elm$JsArray$push,
					elm$core$Array$Leaf(tail),
					tree);
			} else {
				var newSub = elm$core$Array$SubTree(
					A4(elm$core$Array$insertTailInTree, shift - elm$core$Array$shiftStep, index, tail, elm$core$Elm$JsArray$empty));
				return A2(elm$core$Elm$JsArray$push, newSub, tree);
			}
		} else {
			var value = A2(elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (value.$ === 'SubTree') {
				var subTree = value.a;
				var newSub = elm$core$Array$SubTree(
					A4(elm$core$Array$insertTailInTree, shift - elm$core$Array$shiftStep, index, tail, subTree));
				return A3(elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			} else {
				var newSub = elm$core$Array$SubTree(
					A4(
						elm$core$Array$insertTailInTree,
						shift - elm$core$Array$shiftStep,
						index,
						tail,
						elm$core$Elm$JsArray$singleton(value)));
				return A3(elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			}
		}
	});
var elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var elm$core$Array$unsafeReplaceTail = F2(
	function (newTail, _n0) {
		var len = _n0.a;
		var startShift = _n0.b;
		var tree = _n0.c;
		var tail = _n0.d;
		var originalTailLen = elm$core$Elm$JsArray$length(tail);
		var newTailLen = elm$core$Elm$JsArray$length(newTail);
		var newArrayLen = len + (newTailLen - originalTailLen);
		if (_Utils_eq(newTailLen, elm$core$Array$branchFactor)) {
			var overflow = _Utils_cmp(newArrayLen >>> elm$core$Array$shiftStep, 1 << startShift) > 0;
			if (overflow) {
				var newShift = startShift + elm$core$Array$shiftStep;
				var newTree = A4(
					elm$core$Array$insertTailInTree,
					newShift,
					len,
					newTail,
					elm$core$Elm$JsArray$singleton(
						elm$core$Array$SubTree(tree)));
				return A4(elm$core$Array$Array_elm_builtin, newArrayLen, newShift, newTree, elm$core$Elm$JsArray$empty);
			} else {
				return A4(
					elm$core$Array$Array_elm_builtin,
					newArrayLen,
					startShift,
					A4(elm$core$Array$insertTailInTree, startShift, len, newTail, tree),
					elm$core$Elm$JsArray$empty);
			}
		} else {
			return A4(elm$core$Array$Array_elm_builtin, newArrayLen, startShift, tree, newTail);
		}
	});
var elm$core$Array$push = F2(
	function (a, array) {
		var tail = array.d;
		return A2(
			elm$core$Array$unsafeReplaceTail,
			A2(elm$core$Elm$JsArray$push, a, tail),
			array);
	});
var elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return elm$core$Maybe$Just(
				f(value));
		} else {
			return elm$core$Maybe$Nothing;
		}
	});
var elm$core$String$trim = _String_trim;
var author$project$Lia$Markdown$Effect$Parser$add_comment = F2(
	function (visible, _n0) {
		var idx = _n0.a;
		var temp_narrator = _n0.b;
		var par = _n0.c;
		var rslt = function (id2) {
			return andre_dietrich$parser_combinators$Combine$succeed(
				_Utils_Tuple2(idx, id2));
		};
		var mod = function (s) {
			var narrator = A2(
				elm$core$Maybe$withDefault,
				s.defines.narrator,
				A2(elm$core$Maybe$map, elm$core$String$trim, temp_narrator));
			return _Utils_update(
				s,
				{
					effect_model: function () {
						var e = s.effect_model;
						return _Utils_update(
							e,
							{
								comments: function () {
									var _n1 = A2(elm$core$Dict$get, idx, e.comments);
									if (_n1.$ === 'Just') {
										var cmt = _n1.a;
										return A3(
											elm$core$Dict$insert,
											idx,
											visible ? _Utils_update(
												cmt,
												{
													comment: cmt.comment + ('\n' + author$project$Lia$Markdown$Inline$Stringify$stringify(par)),
													paragraphs: A2(
														elm$core$Array$push,
														_Utils_Tuple2(elm$core$Maybe$Nothing, par),
														cmt.paragraphs)
												}) : _Utils_update(
												cmt,
												{
													comment: cmt.comment + ('\n' + author$project$Lia$Markdown$Inline$Stringify$stringify(par))
												}),
											e.comments);
									} else {
										return A3(
											elm$core$Dict$insert,
											idx,
											A3(
												author$project$Lia$Markdown$Effect$Model$Element,
												narrator,
												author$project$Lia$Markdown$Inline$Stringify$stringify(par),
												elm$core$Array$fromList(
													visible ? _List_fromArray(
														[
															_Utils_Tuple2(elm$core$Maybe$Nothing, par)
														]) : _List_Nil)),
											e.comments);
									}
								}()
							});
					}()
				});
		};
		return A2(
			andre_dietrich$parser_combinators$Combine$andThen,
			rslt,
			A2(
				andre_dietrich$parser_combinators$Combine$keep,
				author$project$Lia$Markdown$Effect$Parser$get_counter(idx),
				andre_dietrich$parser_combinators$Combine$modifyState(mod)));
	});
var andre_dietrich$parser_combinators$Combine$modifyStream = function (f) {
	return andre_dietrich$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					andre_dietrich$parser_combinators$Combine$app,
					andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0),
					state,
					_Utils_update(
						stream,
						{
							input: f(stream.input)
						}));
			}));
};
var andre_dietrich$parser_combinators$Combine$putState = function (state) {
	return andre_dietrich$parser_combinators$Combine$Parser(
		F2(
			function (_n0, stream) {
				return A3(
					andre_dietrich$parser_combinators$Combine$app,
					andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0),
					state,
					stream);
			}));
};
var author$project$Lia$Parser$Context$par_ = function (s) {
	return _Utils_eq(s.identation, _List_Nil) ? andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0) : (s.identation_skip ? andre_dietrich$parser_combinators$Combine$skip(
		andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0)) : andre_dietrich$parser_combinators$Combine$skip(
		andre_dietrich$parser_combinators$Combine$regex(
			elm$core$String$concat(s.identation))));
};
var author$project$Lia$Parser$Context$skip_ = F2(
	function (bool, state) {
		return _Utils_update(
			state,
			{identation_skip: bool});
	});
var author$project$Lia$Parser$Context$indentation = A2(
	andre_dietrich$parser_combinators$Combine$ignore,
	andre_dietrich$parser_combinators$Combine$modifyState(
		author$project$Lia$Parser$Context$skip_(false)),
	andre_dietrich$parser_combinators$Combine$withState(author$project$Lia$Parser$Context$par_));
var author$project$Lia$Parser$Helper$c_frame = A2(
	andre_dietrich$parser_combinators$Combine$map,
	elm$core$String$length,
	andre_dietrich$parser_combinators$Combine$regex('`{3,}'));
var elm$core$List$singleton = function (value) {
	return _List_fromArray(
		[value]);
};
var author$project$Lia$Markdown$Macro$Parser$code_block = A2(
	andre_dietrich$parser_combinators$Combine$map,
	A2(elm$core$Basics$composeR, elm$core$String$concat, elm$core$List$singleton),
	A2(
		andre_dietrich$parser_combinators$Combine$manyTill,
		A2(
			andre_dietrich$parser_combinators$Combine$keep,
			andre_dietrich$parser_combinators$Combine$regex('(.(?!```))*\\n?'),
			andre_dietrich$parser_combinators$Combine$maybe(author$project$Lia$Parser$Context$indentation)),
		A2(
			andre_dietrich$parser_combinators$Combine$keep,
			author$project$Lia$Parser$Helper$c_frame,
			andre_dietrich$parser_combinators$Combine$maybe(author$project$Lia$Parser$Context$indentation))));
var author$project$Lia$Markdown$Macro$Parser$get = F2(
	function (name, def) {
		switch (name) {
			case '@author':
				return elm$core$Maybe$Just(def.author);
			case '@date':
				return elm$core$Maybe$Just(def.date);
			case '@email':
				return elm$core$Maybe$Just(def.email);
			case '@version':
				return elm$core$Maybe$Just(def.version);
			case '@section':
				return elm$core$Maybe$Just(
					elm$core$String$fromInt(def.section));
			case '@uid':
				return elm$core$Maybe$Just(
					elm$core$String$fromInt(def.section) + ('_' + elm$core$String$fromInt(def.uid)));
			default:
				return A2(elm$core$Dict$get, name, def.macro);
		}
	});
var andre_dietrich$parser_combinators$Combine$between = F3(
	function (lp, rp, p) {
		return A2(
			andre_dietrich$parser_combinators$Combine$ignore,
			rp,
			A2(andre_dietrich$parser_combinators$Combine$keep, p, lp));
	});
var andre_dietrich$parser_combinators$Combine$parens = A2(
	andre_dietrich$parser_combinators$Combine$between,
	andre_dietrich$parser_combinators$Combine$string('('),
	andre_dietrich$parser_combinators$Combine$string(')'));
var andre_dietrich$parser_combinators$Combine$sepBy1 = F2(
	function (sep, p) {
		return A2(
			andre_dietrich$parser_combinators$Combine$andMap,
			andre_dietrich$parser_combinators$Combine$many(
				A2(andre_dietrich$parser_combinators$Combine$keep, p, sep)),
			A2(andre_dietrich$parser_combinators$Combine$map, elm$core$List$cons, p));
	});
var andre_dietrich$parser_combinators$Combine$sepBy = F2(
	function (sep, p) {
		return A2(
			andre_dietrich$parser_combinators$Combine$or,
			A2(andre_dietrich$parser_combinators$Combine$sepBy1, sep, p),
			andre_dietrich$parser_combinators$Combine$succeed(_List_Nil));
	});
var author$project$Lia$Utils$toJSstring = A2(
	elm$core$Basics$composeR,
	elm$core$String$split('\\'),
	elm$core$String$join('\\\\'));
var author$project$Lia$Markdown$Macro$Parser$parameter = A2(
	andre_dietrich$parser_combinators$Combine$map,
	author$project$Lia$Utils$toJSstring,
	andre_dietrich$parser_combinators$Combine$choice(
		_List_fromArray(
			[
				A2(
				andre_dietrich$parser_combinators$Combine$ignore,
				author$project$Lia$Parser$Helper$c_frame,
				A2(
					andre_dietrich$parser_combinators$Combine$keep,
					andre_dietrich$parser_combinators$Combine$regex('(([^`]+|(`[^`]+)|(``[^`]+))|\\n)+'),
					author$project$Lia$Parser$Helper$c_frame)),
				A2(
				andre_dietrich$parser_combinators$Combine$ignore,
				andre_dietrich$parser_combinators$Combine$string('`'),
				A2(
					andre_dietrich$parser_combinators$Combine$keep,
					andre_dietrich$parser_combinators$Combine$regex('[^`\n]+'),
					andre_dietrich$parser_combinators$Combine$string('`'))),
				andre_dietrich$parser_combinators$Combine$regex('[^),]+')
			])));
var author$project$Lia$Markdown$Macro$Parser$parameter_list = A2(
	andre_dietrich$parser_combinators$Combine$optional,
	_List_Nil,
	andre_dietrich$parser_combinators$Combine$parens(
		A2(
			andre_dietrich$parser_combinators$Combine$sepBy,
			andre_dietrich$parser_combinators$Combine$string(','),
			author$project$Lia$Markdown$Macro$Parser$parameter)));
var author$project$Lia$Parser$Helper$spaces = andre_dietrich$parser_combinators$Combine$regex('[\t ]*');
var author$project$Lia$Markdown$Macro$Parser$pattern = A2(
	andre_dietrich$parser_combinators$Combine$keep,
	andre_dietrich$parser_combinators$Combine$regex('@[\\w.]+'),
	author$project$Lia$Parser$Helper$spaces);
var author$project$Lia$Markdown$Macro$Parser$simple_macro = A2(
	andre_dietrich$parser_combinators$Combine$andMap,
	author$project$Lia$Markdown$Macro$Parser$parameter_list,
	A2(andre_dietrich$parser_combinators$Combine$map, elm$core$Tuple$pair, author$project$Lia$Markdown$Macro$Parser$pattern));
var author$project$Lia$Markdown$Macro$Parser$uid_update = function (state) {
	var def = state.defines;
	return _Utils_update(
		state,
		{
			defines: _Utils_update(
				def,
				{uid: def.uid + 1})
		});
};
var author$project$Lia$Markdown$Macro$Parser$uid_macro = A2(
	andre_dietrich$parser_combinators$Combine$onsuccess,
	_Utils_Tuple2('@uid', _List_Nil),
	A2(
		andre_dietrich$parser_combinators$Combine$keep,
		andre_dietrich$parser_combinators$Combine$modifyState(author$project$Lia$Markdown$Macro$Parser$uid_update),
		andre_dietrich$parser_combinators$Combine$string('@uid')));
var elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3(elm$core$List$foldr, elm$core$List$cons, ys, xs);
		}
	});
var elm$core$String$lines = _String_lines;
var elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			elm$core$String$join,
			after,
			A2(elm$core$String$split, before, string));
	});
var author$project$Lia$Markdown$Macro$Parser$eval_parameter = F2(
	function (param, _n5) {
		var state = _n5.a;
		var i = _n5.b;
		var code = _n5.c;
		var _n6 = A2(author$project$Lia$Markdown$Macro$Parser$macro_parse, state, param);
		var new_state = _n6.a;
		var new_param = _n6.b;
		return _Utils_Tuple3(
			new_state,
			i + 1,
			A3(
				elm$core$String$replace,
				'@' + elm$core$String$fromInt(i),
				new_param,
				code));
	});
var author$project$Lia$Markdown$Macro$Parser$inject_macro = function (_n2) {
	var name = _n2.a;
	var params = _n2.b;
	var inject = function (state) {
		var _n3 = A2(author$project$Lia$Markdown$Macro$Parser$get, name, state.defines);
		if (_n3.$ === 'Just') {
			var code = _n3.a;
			var code_ = _Utils_eq(state.identation, _List_Nil) ? code : A2(
				elm$core$String$join,
				'\n' + elm$core$String$concat(state.identation),
				elm$core$String$lines(code));
			var _n4 = A3(
				elm$core$List$foldl,
				author$project$Lia$Markdown$Macro$Parser$eval_parameter,
				_Utils_Tuple3(state, 0, code_),
				params);
			var new_state = _n4.a;
			var new_code = _n4.c;
			return A2(
				andre_dietrich$parser_combinators$Combine$keep,
				andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0),
				A2(
					andre_dietrich$parser_combinators$Combine$keep,
					andre_dietrich$parser_combinators$Combine$putState(new_state),
					andre_dietrich$parser_combinators$Combine$modifyStream(
						elm$core$Basics$append(new_code))));
		} else {
			return andre_dietrich$parser_combinators$Combine$fail('macro definition not found');
		}
	};
	return andre_dietrich$parser_combinators$Combine$withState(inject);
};
var author$project$Lia$Markdown$Macro$Parser$macro_parse = F2(
	function (defines, str) {
		var _n0 = A3(
			andre_dietrich$parser_combinators$Combine$runParser,
			A2(
				andre_dietrich$parser_combinators$Combine$map,
				elm$core$String$concat,
				andre_dietrich$parser_combinators$Combine$many1(
					A2(
						andre_dietrich$parser_combinators$Combine$or,
						andre_dietrich$parser_combinators$Combine$regex('@input[^@]+'),
						A2(
							andre_dietrich$parser_combinators$Combine$keep,
							andre_dietrich$parser_combinators$Combine$regex('[^@]+'),
							author$project$Lia$Markdown$Macro$Parser$cyclic$macro())))),
			defines,
			str);
		if (_n0.$ === 'Ok') {
			var _n1 = _n0.a;
			var state = _n1.a;
			var s = _n1.c;
			return _Utils_Tuple2(state, s);
		} else {
			return _Utils_Tuple2(defines, str);
		}
	});
function author$project$Lia$Markdown$Macro$Parser$cyclic$macro() {
	return andre_dietrich$parser_combinators$Combine$skip(
		andre_dietrich$parser_combinators$Combine$maybe(
			andre_dietrich$parser_combinators$Combine$many1(
				andre_dietrich$parser_combinators$Combine$choice(
					_List_fromArray(
						[
							A2(andre_dietrich$parser_combinators$Combine$andThen, author$project$Lia$Markdown$Macro$Parser$inject_macro, author$project$Lia$Markdown$Macro$Parser$uid_macro),
							A2(andre_dietrich$parser_combinators$Combine$andThen, author$project$Lia$Markdown$Macro$Parser$inject_macro, author$project$Lia$Markdown$Macro$Parser$simple_macro),
							author$project$Lia$Markdown$Macro$Parser$cyclic$macro_listing()
						])))));
}
function author$project$Lia$Markdown$Macro$Parser$cyclic$macro_listing() {
	return A2(
		andre_dietrich$parser_combinators$Combine$andThen,
		function (name) {
			return A2(
				andre_dietrich$parser_combinators$Combine$andThen,
				function (params) {
					return A2(
						andre_dietrich$parser_combinators$Combine$andThen,
						function (p) {
							return author$project$Lia$Markdown$Macro$Parser$inject_macro(
								_Utils_Tuple2(name, p));
						},
						A2(
							andre_dietrich$parser_combinators$Combine$map,
							elm$core$List$append(params),
							author$project$Lia$Markdown$Macro$Parser$code_block));
				},
				A2(
					andre_dietrich$parser_combinators$Combine$ignore,
					andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\n'),
					author$project$Lia$Markdown$Macro$Parser$parameter_list));
		},
		A2(
			andre_dietrich$parser_combinators$Combine$keep,
			author$project$Lia$Markdown$Macro$Parser$pattern,
			A2(
				andre_dietrich$parser_combinators$Combine$keep,
				andre_dietrich$parser_combinators$Combine$regex('[\t ]*[a-zA-Z0-9_]*[\t ]*'),
				author$project$Lia$Parser$Helper$c_frame)));
}
try {
	var author$project$Lia$Markdown$Macro$Parser$macro = author$project$Lia$Markdown$Macro$Parser$cyclic$macro();
	author$project$Lia$Markdown$Macro$Parser$cyclic$macro = function () {
		return author$project$Lia$Markdown$Macro$Parser$macro;
	};
	var author$project$Lia$Markdown$Macro$Parser$macro_listing = author$project$Lia$Markdown$Macro$Parser$cyclic$macro_listing();
	author$project$Lia$Markdown$Macro$Parser$cyclic$macro_listing = function () {
		return author$project$Lia$Markdown$Macro$Parser$macro_listing;
	};
} catch ($) {
throw 'Some top-level definitions from `Lia.Markdown.Macro.Parser` are causing infinite recursion:\n\n  ┌─────┐\n  │    eval_parameter\n  │     ↓\n  │    macro\n  │     ↓\n  │    inject_macro\n  │     ↓\n  │    macro_listing\n  │     ↓\n  │    macro_parse\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.0/halting-problem to learn how to fix it!';}
var author$project$Lia$Parser$Helper$spaces1 = andre_dietrich$parser_combinators$Combine$regex('[\t ]+');
var author$project$Lia$Markdown$Effect$Parser$hidden_comment = andre_dietrich$parser_combinators$Combine$skip(
	A2(
		andre_dietrich$parser_combinators$Combine$andThen,
		author$project$Lia$Markdown$Effect$Parser$add_comment(false),
		A2(
			andre_dietrich$parser_combinators$Combine$ignore,
			author$project$Lia$Markdown$Effect$Parser$reset_effect_number,
			A2(
				andre_dietrich$parser_combinators$Combine$andMap,
				A2(
					andre_dietrich$parser_combinators$Combine$manyTill,
					andre_dietrich$parser_combinators$Combine$Char$anyChar,
					andre_dietrich$parser_combinators$Combine$string('-->')),
				A2(
					andre_dietrich$parser_combinators$Combine$ignore,
					andre_dietrich$parser_combinators$Combine$regex('}}--[\t ]*'),
					A2(
						andre_dietrich$parser_combinators$Combine$andMap,
						andre_dietrich$parser_combinators$Combine$maybe(
							A2(
								andre_dietrich$parser_combinators$Combine$keep,
								andre_dietrich$parser_combinators$Combine$regex('[A-Za-z0-9 ]+'),
								A2(andre_dietrich$parser_combinators$Combine$keep, author$project$Lia$Markdown$Macro$Parser$macro, author$project$Lia$Parser$Helper$spaces1))),
						A2(
							andre_dietrich$parser_combinators$Combine$map,
							F3(
								function (i, voice, text) {
									return _Utils_Tuple3(
										i,
										voice,
										_List_fromArray(
											[
												A2(
												author$project$Lia$Markdown$Inline$Types$Chars,
												elm$core$String$trim(
													elm$core$String$fromList(text)),
												elm$core$Maybe$Nothing)
											]));
								}),
							A2(
								andre_dietrich$parser_combinators$Combine$keep,
								author$project$Lia$Markdown$Effect$Parser$effect_number,
								andre_dietrich$parser_combinators$Combine$regex('<!--[\t ]*--{{')))))))));
var author$project$Lia$Markdown$Inline$Parser$comments = andre_dietrich$parser_combinators$Combine$skip(
	andre_dietrich$parser_combinators$Combine$many(
		A2(
			andre_dietrich$parser_combinators$Combine$or,
			andre_dietrich$parser_combinators$Combine$skip(
				author$project$Lia$Markdown$Inline$Parser$comment(andre_dietrich$parser_combinators$Combine$Char$anyChar)),
			author$project$Lia$Markdown$Effect$Parser$hidden_comment)));
var elm$core$Dict$fromList = function (assocs) {
	return A3(
		elm$core$List$foldl,
		F2(
			function (_n0, dict) {
				var key = _n0.a;
				var value = _n0.b;
				return A3(elm$core$Dict$insert, key, value, dict);
			}),
		elm$core$Dict$empty,
		assocs);
};
var author$project$Lia$Markdown$Inline$Parser$annotations = A2(
	andre_dietrich$parser_combinators$Combine$ignore,
	author$project$Lia$Markdown$Inline$Parser$comments,
	andre_dietrich$parser_combinators$Combine$maybe(
		A2(
			andre_dietrich$parser_combinators$Combine$map,
			A2(elm$core$Basics$composeR, elm$core$Dict$fromList, author$project$Lia$Markdown$Inline$Parser$attr_),
			A2(
				andre_dietrich$parser_combinators$Combine$keep,
				author$project$Lia$Markdown$Inline$Parser$comment(author$project$Lia$Markdown$Inline$Parser$attribute),
				author$project$Lia$Parser$Helper$spaces))));
var author$project$Lia$Markdown$Inline$Types$Verbatim = F2(
	function (a, b) {
		return {$: 'Verbatim', a: a, b: b};
	});
var author$project$Lia$Markdown$Inline$Parser$code = A2(
	andre_dietrich$parser_combinators$Combine$map,
	author$project$Lia$Markdown$Inline$Types$Verbatim,
	A2(
		andre_dietrich$parser_combinators$Combine$ignore,
		andre_dietrich$parser_combinators$Combine$string('`'),
		A2(
			andre_dietrich$parser_combinators$Combine$keep,
			andre_dietrich$parser_combinators$Combine$regex('[^`\\n]+'),
			andre_dietrich$parser_combinators$Combine$string('`'))));
var author$project$Lia$Markdown$Inline$Parser$email = A2(
	andre_dietrich$parser_combinators$Combine$map,
	elm$core$Basics$append('mailto:'),
	A2(
		andre_dietrich$parser_combinators$Combine$keep,
		andre_dietrich$parser_combinators$Combine$regex('[a-zA-Z0-9_.\\-]+@[a-zA-Z0-9_.\\-]+'),
		andre_dietrich$parser_combinators$Combine$maybe(
			andre_dietrich$parser_combinators$Combine$string('mailto:'))));
var author$project$Lia$Markdown$Effect$Model$add_javascript = F3(
	function (idx, script, model) {
		return _Utils_update(
			model,
			{
				javascript: A3(
					elm$core$Dict$insert,
					idx,
					function () {
						var _n0 = A2(elm$core$Dict$get, idx, model.javascript);
						if (_n0.$ === 'Just') {
							var a = _n0.a;
							return A2(
								elm$core$List$append,
								a,
								_List_fromArray(
									[script]));
						} else {
							return _List_fromArray(
								[script]);
						}
					}(),
					model.javascript)
			});
	});
var author$project$Lia$Markdown$Inline$Types$HTML = function (a) {
	return {$: 'HTML', a: a};
};
var author$project$Lia$Markdown$Inline$Parser$html_block = A2(
	andre_dietrich$parser_combinators$Combine$map,
	author$project$Lia$Markdown$Inline$Types$HTML,
	andre_dietrich$parser_combinators$Combine$regex('<((\\w+|-)+)[\\s\\S]*?</\\1>'));
var author$project$Lia$Markdown$Inline$Parser$html_void = A2(
	andre_dietrich$parser_combinators$Combine$map,
	author$project$Lia$Markdown$Inline$Types$HTML,
	andre_dietrich$parser_combinators$Combine$regex('<[^>\\n]*>'));
var author$project$Lia$Markdown$Inline$Parser$javascript = A2(
	andre_dietrich$parser_combinators$Combine$keep,
	author$project$Lia$Parser$Helper$stringTill(
		andre_dietrich$parser_combinators$Combine$string('</script>')),
	andre_dietrich$parser_combinators$Combine$string('<script>'));
var author$project$Lia$Markdown$Inline$Parser$html = function () {
	var state = function (script) {
		return andre_dietrich$parser_combinators$Combine$modifyState(
			function (s) {
				return _Utils_update(
					s,
					{
						effect_model: A3(
							author$project$Lia$Markdown$Effect$Model$add_javascript,
							A2(
								elm$core$Maybe$withDefault,
								0,
								elm$core$List$head(s.effect_number)),
							script,
							s.effect_model)
					});
			});
	};
	return andre_dietrich$parser_combinators$Combine$choice(
		_List_fromArray(
			[
				A2(
				andre_dietrich$parser_combinators$Combine$keep,
				andre_dietrich$parser_combinators$Combine$succeed(
					A2(author$project$Lia$Markdown$Inline$Types$Chars, '', elm$core$Maybe$Nothing)),
				A2(andre_dietrich$parser_combinators$Combine$andThen, state, author$project$Lia$Markdown$Inline$Parser$javascript)),
				author$project$Lia$Markdown$Inline$Parser$html_block,
				author$project$Lia$Markdown$Inline$Parser$html_void
			]));
}();
var author$project$Lia$Markdown$Inline$Parser$url = andre_dietrich$parser_combinators$Combine$regex('[a-zA-Z]+://(/)?[a-zA-Z0-9\\.\\-\\_]+\\.([a-z\\.]{2,6})[^ \\]\\)\t\n]*');
var author$project$Lia$Markdown$Inline$Types$Link = F3(
	function (a, b, c) {
		return {$: 'Link', a: a, b: b, c: c};
	});
var author$project$Lia$Markdown$Inline$Types$Ref = F2(
	function (a, b) {
		return {$: 'Ref', a: a, b: b};
	});
var author$project$Lia$Markdown$Inline$Parser$inline_url = A2(
	andre_dietrich$parser_combinators$Combine$map,
	function (u) {
		return author$project$Lia$Markdown$Inline$Types$Ref(
			A3(
				author$project$Lia$Markdown$Inline$Types$Link,
				_List_fromArray(
					[
						A2(author$project$Lia$Markdown$Inline$Types$Chars, u, elm$core$Maybe$Nothing)
					]),
				u,
				''));
	},
	author$project$Lia$Markdown$Inline$Parser$url);
var elm$core$String$isEmpty = function (string) {
	return string === '';
};
var author$project$Lia$Markdown$Inline$Parser$nicer_ref = F4(
	function (ref_type, info_string, url_string, title_string) {
		return A3(
			ref_type,
			info_string,
			url_string,
			elm$core$String$isEmpty(title_string) ? url_string : title_string);
	});
var author$project$Lia$Markdown$Inline$Parser$ref_title = A2(
	andre_dietrich$parser_combinators$Combine$optional,
	'',
	A2(
		andre_dietrich$parser_combinators$Combine$ignore,
		author$project$Lia$Parser$Helper$spaces,
		A2(
			andre_dietrich$parser_combinators$Combine$keep,
			author$project$Lia$Parser$Helper$stringTill(
				andre_dietrich$parser_combinators$Combine$string('\"')),
			A2(
				andre_dietrich$parser_combinators$Combine$ignore,
				andre_dietrich$parser_combinators$Combine$string('\"'),
				author$project$Lia$Parser$Helper$spaces))));
var author$project$Lia$Markdown$Inline$Parser$ref_pattern = F3(
	function (ref_type, info_type, url_type) {
		return A2(
			andre_dietrich$parser_combinators$Combine$ignore,
			andre_dietrich$parser_combinators$Combine$string(')'),
			A2(
				andre_dietrich$parser_combinators$Combine$andMap,
				author$project$Lia$Markdown$Inline$Parser$ref_title,
				A2(
					andre_dietrich$parser_combinators$Combine$andMap,
					url_type,
					A2(
						andre_dietrich$parser_combinators$Combine$ignore,
						andre_dietrich$parser_combinators$Combine$string('('),
						A2(
							andre_dietrich$parser_combinators$Combine$map,
							author$project$Lia$Markdown$Inline$Parser$nicer_ref(ref_type),
							info_type)))));
	});
var author$project$Lia$Parser$Context$searchIndex = andre_dietrich$parser_combinators$Combine$withState(
	function (state) {
		return andre_dietrich$parser_combinators$Combine$succeed(state.search_index);
	});
var author$project$Lia$Markdown$Inline$Parser$ref_url_1 = andre_dietrich$parser_combinators$Combine$choice(
	_List_fromArray(
		[
			author$project$Lia$Markdown$Inline$Parser$url,
			A2(
			andre_dietrich$parser_combinators$Combine$andMap,
			andre_dietrich$parser_combinators$Combine$regex('#[\\w-]+'),
			author$project$Lia$Parser$Context$searchIndex),
			A2(
			andre_dietrich$parser_combinators$Combine$andMap,
			andre_dietrich$parser_combinators$Combine$regex('#\\S+'),
			author$project$Lia$Parser$Context$searchIndex),
			andre_dietrich$parser_combinators$Combine$regex('[^\\)\n \"]*')
		]));
var author$project$Lia$Markdown$Inline$Parser$ref_url_2 = A2(
	andre_dietrich$parser_combinators$Combine$or,
	author$project$Lia$Markdown$Inline$Parser$url,
	A2(
		andre_dietrich$parser_combinators$Combine$andMap,
		andre_dietrich$parser_combinators$Combine$regex('[^\\)\n \"]*'),
		A2(
			andre_dietrich$parser_combinators$Combine$map,
			elm$core$Basics$append,
			andre_dietrich$parser_combinators$Combine$withState(
				function (s) {
					return andre_dietrich$parser_combinators$Combine$succeed(s.defines.base);
				}))));
var author$project$Lia$Markdown$Inline$Types$Container = F2(
	function (a, b) {
		return {$: 'Container', a: a, b: b};
	});
var author$project$Lia$Markdown$Inline$Parser$toContainer = function (inline_list) {
	var _n0 = author$project$Lia$Markdown$Inline$Parser$combine(inline_list);
	if (_n0.b && (!_n0.b.b)) {
		var one = _n0.a;
		return one;
	} else {
		var moreThanOne = _n0;
		return A2(author$project$Lia$Markdown$Inline$Types$Container, moreThanOne, elm$core$Maybe$Nothing);
	}
};
var author$project$Lia$Markdown$Inline$Types$Formula = F3(
	function (a, b, c) {
		return {$: 'Formula', a: a, b: b, c: c};
	});
var author$project$Lia$Markdown$Inline$Parser$Formula$formula_block = A2(
	andre_dietrich$parser_combinators$Combine$map,
	author$project$Lia$Markdown$Inline$Types$Formula('true'),
	A2(
		andre_dietrich$parser_combinators$Combine$keep,
		author$project$Lia$Parser$Helper$stringTill(
			andre_dietrich$parser_combinators$Combine$string('$$')),
		andre_dietrich$parser_combinators$Combine$string('$$')));
var author$project$Lia$Markdown$Inline$Parser$Formula$formula_inline = A2(
	andre_dietrich$parser_combinators$Combine$map,
	author$project$Lia$Markdown$Inline$Types$Formula('false'),
	A2(
		andre_dietrich$parser_combinators$Combine$ignore,
		andre_dietrich$parser_combinators$Combine$string('$'),
		A2(
			andre_dietrich$parser_combinators$Combine$keep,
			andre_dietrich$parser_combinators$Combine$regex('[^\\n$]+'),
			andre_dietrich$parser_combinators$Combine$string('$'))));
var author$project$Lia$Markdown$Inline$Parser$Formula$formula = A2(andre_dietrich$parser_combinators$Combine$or, author$project$Lia$Markdown$Inline$Parser$Formula$formula_block, author$project$Lia$Markdown$Inline$Parser$Formula$formula_inline);
var author$project$Lia$Markdown$Inline$Types$Symbol = F2(
	function (a, b) {
		return {$: 'Symbol', a: a, b: b};
	});
var author$project$Lia$Markdown$Inline$Parser$Symbol$arrows = A2(
	andre_dietrich$parser_combinators$Combine$map,
	author$project$Lia$Markdown$Inline$Types$Symbol,
	andre_dietrich$parser_combinators$Combine$choice(
		_List_fromArray(
			[
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'⟷',
				andre_dietrich$parser_combinators$Combine$string('<-->')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'⟵',
				andre_dietrich$parser_combinators$Combine$string('<--')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'⟶',
				andre_dietrich$parser_combinators$Combine$string('-->')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'↞',
				andre_dietrich$parser_combinators$Combine$string('<<-')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'↠',
				andre_dietrich$parser_combinators$Combine$string('->>')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'↔',
				andre_dietrich$parser_combinators$Combine$string('<->')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'↣',
				andre_dietrich$parser_combinators$Combine$string('>->')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'↢',
				andre_dietrich$parser_combinators$Combine$string('<-<')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'→',
				andre_dietrich$parser_combinators$Combine$string('->')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'←',
				andre_dietrich$parser_combinators$Combine$string('<-')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'↜',
				andre_dietrich$parser_combinators$Combine$string('<~')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'↝',
				andre_dietrich$parser_combinators$Combine$string('~>')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'⟺',
				andre_dietrich$parser_combinators$Combine$string('<==>')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'⟹',
				andre_dietrich$parser_combinators$Combine$string('==>')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'⟸',
				andre_dietrich$parser_combinators$Combine$string('<==')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'⇔',
				andre_dietrich$parser_combinators$Combine$string('<=>')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'⇒',
				andre_dietrich$parser_combinators$Combine$string('=>')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'⇐',
				andre_dietrich$parser_combinators$Combine$string('<='))
			])));
var author$project$Lia$Markdown$Inline$Parser$Symbol$smileys = A2(
	andre_dietrich$parser_combinators$Combine$map,
	author$project$Lia$Markdown$Inline$Types$Symbol,
	andre_dietrich$parser_combinators$Combine$choice(
		_List_fromArray(
			[
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'🙂',
				andre_dietrich$parser_combinators$Combine$string(':-)')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'😉',
				andre_dietrich$parser_combinators$Combine$string(';-)')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'😀',
				andre_dietrich$parser_combinators$Combine$string(':-D')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'😮',
				andre_dietrich$parser_combinators$Combine$string(':-O')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'🙁',
				andre_dietrich$parser_combinators$Combine$string(':-(')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'😐',
				andre_dietrich$parser_combinators$Combine$string(':-|')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'😕',
				andre_dietrich$parser_combinators$Combine$string(':-/')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'😕',
				andre_dietrich$parser_combinators$Combine$string(':-\\')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'😛',
				andre_dietrich$parser_combinators$Combine$string(':-P')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'😛',
				andre_dietrich$parser_combinators$Combine$string(':-p')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'😜',
				andre_dietrich$parser_combinators$Combine$string(';-P')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'😜',
				andre_dietrich$parser_combinators$Combine$string(';-p')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'😗',
				andre_dietrich$parser_combinators$Combine$string(':-*')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'😘',
				andre_dietrich$parser_combinators$Combine$string(';-*')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'😂',
				andre_dietrich$parser_combinators$Combine$string(':\')')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'😢',
				andre_dietrich$parser_combinators$Combine$string(':\'(')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'😭',
				andre_dietrich$parser_combinators$Combine$string(':\'[')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'😠',
				andre_dietrich$parser_combinators$Combine$string(':-[')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'😷',
				andre_dietrich$parser_combinators$Combine$string(':-#')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'😷',
				andre_dietrich$parser_combinators$Combine$string(':-X')),
				A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				'😖',
				andre_dietrich$parser_combinators$Combine$string(':-§'))
			])));
var author$project$Lia$Markdown$Inline$Types$Audio = F3(
	function (a, b, c) {
		return {$: 'Audio', a: a, b: b, c: c};
	});
var author$project$Lia$Markdown$Inline$Types$Bold = F2(
	function (a, b) {
		return {$: 'Bold', a: a, b: b};
	});
var author$project$Lia$Markdown$Inline$Types$Image = F3(
	function (a, b, c) {
		return {$: 'Image', a: a, b: b, c: c};
	});
var author$project$Lia$Markdown$Inline$Types$Italic = F2(
	function (a, b) {
		return {$: 'Italic', a: a, b: b};
	});
var author$project$Lia$Markdown$Inline$Types$Mail = F3(
	function (a, b, c) {
		return {$: 'Mail', a: a, b: b, c: c};
	});
var author$project$Lia$Markdown$Inline$Types$Movie = F3(
	function (a, b, c) {
		return {$: 'Movie', a: a, b: b, c: c};
	});
var author$project$Lia$Markdown$Inline$Types$Strike = F2(
	function (a, b) {
		return {$: 'Strike', a: a, b: b};
	});
var author$project$Lia$Markdown$Inline$Types$Superscript = F2(
	function (a, b) {
		return {$: 'Superscript', a: a, b: b};
	});
var author$project$Lia$Markdown$Inline$Types$Underline = F2(
	function (a, b) {
		return {$: 'Underline', a: a, b: b};
	});
var author$project$Lia$Markdown$Inline$Parser$between_ = function (str) {
	return A2(
		andre_dietrich$parser_combinators$Combine$map,
		author$project$Lia$Markdown$Inline$Parser$toContainer,
		A2(
			andre_dietrich$parser_combinators$Combine$keep,
			A2(
				andre_dietrich$parser_combinators$Combine$manyTill,
				author$project$Lia$Markdown$Inline$Parser$cyclic$inlines(),
				andre_dietrich$parser_combinators$Combine$string(str)),
			andre_dietrich$parser_combinators$Combine$string(str)));
};
function author$project$Lia$Markdown$Inline$Parser$cyclic$ref_video() {
	return A2(
		andre_dietrich$parser_combinators$Combine$ignore,
		andre_dietrich$parser_combinators$Combine$string(')'),
		A2(
			andre_dietrich$parser_combinators$Combine$andMap,
			author$project$Lia$Markdown$Inline$Parser$ref_title,
			A2(
				andre_dietrich$parser_combinators$Combine$andMap,
				A2(andre_dietrich$parser_combinators$Combine$map, author$project$Lia$Markdown$Inline$Multimedia$movie, author$project$Lia$Markdown$Inline$Parser$ref_url_2),
				A2(
					andre_dietrich$parser_combinators$Combine$ignore,
					andre_dietrich$parser_combinators$Combine$string('('),
					A2(
						andre_dietrich$parser_combinators$Combine$map,
						author$project$Lia$Markdown$Inline$Types$Movie,
						author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info())))));
}
function author$project$Lia$Markdown$Inline$Parser$cyclic$ref_audio() {
	return A2(
		andre_dietrich$parser_combinators$Combine$ignore,
		andre_dietrich$parser_combinators$Combine$string(')'),
		A2(
			andre_dietrich$parser_combinators$Combine$andMap,
			author$project$Lia$Markdown$Inline$Parser$ref_title,
			A2(
				andre_dietrich$parser_combinators$Combine$andMap,
				A2(andre_dietrich$parser_combinators$Combine$map, author$project$Lia$Markdown$Inline$Multimedia$audio, author$project$Lia$Markdown$Inline$Parser$ref_url_2),
				A2(
					andre_dietrich$parser_combinators$Combine$ignore,
					andre_dietrich$parser_combinators$Combine$string('('),
					A2(
						andre_dietrich$parser_combinators$Combine$map,
						author$project$Lia$Markdown$Inline$Types$Audio,
						author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info())))));
}
function author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info() {
	return A2(
		andre_dietrich$parser_combinators$Combine$keep,
		A2(
			andre_dietrich$parser_combinators$Combine$manyTill,
			author$project$Lia$Markdown$Inline$Parser$cyclic$inlines(),
			andre_dietrich$parser_combinators$Combine$string(']')),
		andre_dietrich$parser_combinators$Combine$string('['));
}
function author$project$Lia$Markdown$Inline$Parser$cyclic$inlines() {
	return andre_dietrich$parser_combinators$Combine$lazy(
		function (_n2) {
			return A2(
				andre_dietrich$parser_combinators$Combine$keep,
				A2(
					andre_dietrich$parser_combinators$Combine$or,
					author$project$Lia$Markdown$Inline$Parser$html,
					A2(
						andre_dietrich$parser_combinators$Combine$andMap,
						A2(andre_dietrich$parser_combinators$Combine$keep, author$project$Lia$Markdown$Inline$Parser$annotations, author$project$Lia$Markdown$Macro$Parser$macro),
						andre_dietrich$parser_combinators$Combine$choice(
							_List_fromArray(
								[
									author$project$Lia$Markdown$Inline$Parser$code,
									author$project$Lia$Markdown$Footnote$Parser$inline,
									author$project$Lia$Markdown$Inline$Parser$cyclic$reference(),
									author$project$Lia$Markdown$Inline$Parser$Formula$formula,
									author$project$Lia$Markdown$Effect$Parser$inline(
									author$project$Lia$Markdown$Inline$Parser$cyclic$inlines()),
									author$project$Lia$Markdown$Inline$Parser$cyclic$strings()
								])))),
				author$project$Lia$Markdown$Macro$Parser$macro);
		});
}
function author$project$Lia$Markdown$Inline$Parser$cyclic$reference() {
	return andre_dietrich$parser_combinators$Combine$lazy(
		function (_n1) {
			var movie = A2(
				andre_dietrich$parser_combinators$Combine$keep,
				author$project$Lia$Markdown$Inline$Parser$cyclic$ref_video(),
				andre_dietrich$parser_combinators$Combine$string('!?'));
			var mail_ = A3(
				author$project$Lia$Markdown$Inline$Parser$ref_pattern,
				author$project$Lia$Markdown$Inline$Types$Mail,
				author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info(),
				author$project$Lia$Markdown$Inline$Parser$email);
			var link = A3(
				author$project$Lia$Markdown$Inline$Parser$ref_pattern,
				author$project$Lia$Markdown$Inline$Types$Link,
				author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info(),
				author$project$Lia$Markdown$Inline$Parser$ref_url_1);
			var image = A2(
				andre_dietrich$parser_combinators$Combine$keep,
				A3(
					author$project$Lia$Markdown$Inline$Parser$ref_pattern,
					author$project$Lia$Markdown$Inline$Types$Image,
					author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info(),
					author$project$Lia$Markdown$Inline$Parser$ref_url_2),
				andre_dietrich$parser_combinators$Combine$string('!'));
			var audio = A2(
				andre_dietrich$parser_combinators$Combine$keep,
				author$project$Lia$Markdown$Inline$Parser$cyclic$ref_audio(),
				andre_dietrich$parser_combinators$Combine$string('?'));
			return A2(
				andre_dietrich$parser_combinators$Combine$map,
				author$project$Lia$Markdown$Inline$Types$Ref,
				andre_dietrich$parser_combinators$Combine$choice(
					_List_fromArray(
						[movie, audio, image, mail_, link])));
		});
}
function author$project$Lia$Markdown$Inline$Parser$cyclic$strings() {
	return andre_dietrich$parser_combinators$Combine$lazy(
		function (_n0) {
			var underline = A2(
				andre_dietrich$parser_combinators$Combine$map,
				author$project$Lia$Markdown$Inline$Types$Underline,
				author$project$Lia$Markdown$Inline$Parser$between_('~~'));
			var superscript = A2(
				andre_dietrich$parser_combinators$Combine$map,
				author$project$Lia$Markdown$Inline$Types$Superscript,
				author$project$Lia$Markdown$Inline$Parser$between_('^'));
			var strike = A2(
				andre_dietrich$parser_combinators$Combine$map,
				author$project$Lia$Markdown$Inline$Types$Strike,
				author$project$Lia$Markdown$Inline$Parser$between_('~'));
			var italic = A2(
				andre_dietrich$parser_combinators$Combine$map,
				author$project$Lia$Markdown$Inline$Types$Italic,
				A2(
					andre_dietrich$parser_combinators$Combine$or,
					author$project$Lia$Markdown$Inline$Parser$between_('*'),
					author$project$Lia$Markdown$Inline$Parser$between_('_')));
			var escape = A2(
				andre_dietrich$parser_combinators$Combine$map,
				author$project$Lia$Markdown$Inline$Types$Chars,
				A2(
					andre_dietrich$parser_combinators$Combine$keep,
					andre_dietrich$parser_combinators$Combine$regex('[\\^*_+-~`\\\\${}\\[\\]|#]'),
					andre_dietrich$parser_combinators$Combine$string('\\')));
			var characters = A2(
				andre_dietrich$parser_combinators$Combine$map,
				author$project$Lia$Markdown$Inline$Types$Chars,
				andre_dietrich$parser_combinators$Combine$regex('[~:_;\\-<>=${}\\[\\]\\(\\) ]'));
			var bold = A2(
				andre_dietrich$parser_combinators$Combine$map,
				author$project$Lia$Markdown$Inline$Types$Bold,
				A2(
					andre_dietrich$parser_combinators$Combine$or,
					author$project$Lia$Markdown$Inline$Parser$between_('**'),
					author$project$Lia$Markdown$Inline$Parser$between_('__')));
			var base2 = A2(
				andre_dietrich$parser_combinators$Combine$map,
				author$project$Lia$Markdown$Inline$Types$Chars,
				andre_dietrich$parser_combinators$Combine$regex('[^\n|*]+'));
			var base = A2(
				andre_dietrich$parser_combinators$Combine$map,
				author$project$Lia$Markdown$Inline$Types$Chars,
				andre_dietrich$parser_combinators$Combine$regex('[^*_~:;`!\\^\\[\\]\\(\\)|{}\\\\\\n\\-<>=$ ]+'));
			return andre_dietrich$parser_combinators$Combine$choice(
				_List_fromArray(
					[author$project$Lia$Markdown$Inline$Parser$inline_url, base, author$project$Lia$Markdown$Inline$Parser$Symbol$arrows, author$project$Lia$Markdown$Inline$Parser$Symbol$smileys, escape, bold, italic, underline, strike, superscript, characters, base2]));
		});
}
try {
	var author$project$Lia$Markdown$Inline$Parser$ref_video = author$project$Lia$Markdown$Inline$Parser$cyclic$ref_video();
	author$project$Lia$Markdown$Inline$Parser$cyclic$ref_video = function () {
		return author$project$Lia$Markdown$Inline$Parser$ref_video;
	};
	var author$project$Lia$Markdown$Inline$Parser$ref_audio = author$project$Lia$Markdown$Inline$Parser$cyclic$ref_audio();
	author$project$Lia$Markdown$Inline$Parser$cyclic$ref_audio = function () {
		return author$project$Lia$Markdown$Inline$Parser$ref_audio;
	};
	var author$project$Lia$Markdown$Inline$Parser$ref_info = author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info();
	author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info = function () {
		return author$project$Lia$Markdown$Inline$Parser$ref_info;
	};
	var author$project$Lia$Markdown$Inline$Parser$inlines = author$project$Lia$Markdown$Inline$Parser$cyclic$inlines();
	author$project$Lia$Markdown$Inline$Parser$cyclic$inlines = function () {
		return author$project$Lia$Markdown$Inline$Parser$inlines;
	};
	var author$project$Lia$Markdown$Inline$Parser$reference = author$project$Lia$Markdown$Inline$Parser$cyclic$reference();
	author$project$Lia$Markdown$Inline$Parser$cyclic$reference = function () {
		return author$project$Lia$Markdown$Inline$Parser$reference;
	};
	var author$project$Lia$Markdown$Inline$Parser$strings = author$project$Lia$Markdown$Inline$Parser$cyclic$strings();
	author$project$Lia$Markdown$Inline$Parser$cyclic$strings = function () {
		return author$project$Lia$Markdown$Inline$Parser$strings;
	};
} catch ($) {
throw 'Some top-level definitions from `Lia.Markdown.Inline.Parser` are causing infinite recursion:\n\n  ┌─────┐\n  │    between_\n  │     ↓\n  │    ref_video\n  │     ↓\n  │    ref_audio\n  │     ↓\n  │    ref_info\n  │     ↓\n  │    inlines\n  │     ↓\n  │    reference\n  │     ↓\n  │    strings\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.0/halting-problem to learn how to fix it!';}
var author$project$Lia$Markdown$Effect$Model$Model = F4(
	function (visible, effects, comments, javascript) {
		return {comments: comments, effects: effects, javascript: javascript, visible: visible};
	});
var author$project$Lia$Markdown$Effect$Model$init = A4(author$project$Lia$Markdown$Effect$Model$Model, 0, 0, elm$core$Dict$empty, elm$core$Dict$empty);
var author$project$Lia$Markdown$Footnote$Model$init = elm$core$Dict$empty;
var author$project$Lia$Parser$Context$init = F2(
	function (search_index, global) {
		return {
			code_vector: elm$core$Array$empty,
			defines: global,
			defines_updated: false,
			effect_model: author$project$Lia$Markdown$Effect$Model$init,
			effect_number: _List_fromArray(
				[0]),
			footnotes: author$project$Lia$Markdown$Footnote$Model$init,
			identation: _List_Nil,
			identation_skip: false,
			quiz_vector: elm$core$Array$empty,
			search_index: search_index,
			survey_vector: elm$core$Array$empty
		};
	});
var author$project$Lia$Definition$Parser$inline_parser = F2(
	function (defines, str) {
		var _n0 = A3(
			andre_dietrich$parser_combinators$Combine$runParser,
			A2(
				andre_dietrich$parser_combinators$Combine$map,
				author$project$Lia$Markdown$Inline$Parser$combine,
				andre_dietrich$parser_combinators$Combine$many1(author$project$Lia$Markdown$Inline$Parser$inlines)),
			A2(author$project$Lia$Parser$Context$init, elm$core$Basics$identity, defines),
			A3(elm$core$String$replace, '\n', ' ', str));
		if (_n0.$ === 'Ok') {
			var _n1 = _n0.a;
			var rslt = _n1.c;
			return rslt;
		} else {
			return _List_Nil;
		}
	});
var author$project$Lia$Definition$Parser$set = function (fct) {
	return andre_dietrich$parser_combinators$Combine$modifyState(
		function (s) {
			return _Utils_update(
				s,
				{
					defines: fct(s.defines)
				});
		});
};
var andre_dietrich$parser_combinators$Combine$regexWith = F2(
	function (caseInsensitive, multiline) {
		return A2(
			elm$core$Basics$composeR,
			A2(
				andre_dietrich$parser_combinators$Combine$regexer,
				elm$regex$Regex$fromStringWith(
					{caseInsensitive: caseInsensitive, multiline: multiline}),
				function ($) {
					return $.match;
				}),
			andre_dietrich$parser_combinators$Combine$Parser);
	});
var author$project$Lia$Parser$Context$indentation_append = function (str) {
	return andre_dietrich$parser_combinators$Combine$modifyState(
		function (state) {
			return _Utils_update(
				state,
				{
					identation: A2(
						elm$core$List$append,
						state.identation,
						_List_fromArray(
							[str])),
					identation_skip: true
				});
		});
};
var author$project$Lia$Parser$Context$indentation_pop = andre_dietrich$parser_combinators$Combine$modifyState(
	function (state) {
		return _Utils_update(
			state,
			{
				identation: elm$core$List$reverse(
					A2(
						elm$core$List$drop,
						1,
						elm$core$List$reverse(state.identation))),
				identation_skip: false
			});
	});
var author$project$Lia$Parser$Context$indentation_skip = andre_dietrich$parser_combinators$Combine$modifyState(
	author$project$Lia$Parser$Context$skip_(true));
var elm$core$String$trimLeft = _String_trimLeft;
var elm$core$String$trimRight = _String_trimRight;
var author$project$Lia$Definition$Parser$ending = A2(
	andre_dietrich$parser_combinators$Combine$map,
	function (list) {
		return elm$core$String$trimRight(
			elm$core$String$concat(
				A2(elm$core$List$map, elm$core$String$trimLeft, list)));
	},
	A2(
		andre_dietrich$parser_combinators$Combine$ignore,
		author$project$Lia$Parser$Context$indentation_pop,
		A2(
			andre_dietrich$parser_combinators$Combine$keep,
			andre_dietrich$parser_combinators$Combine$many1(
				A2(
					andre_dietrich$parser_combinators$Combine$keep,
					andre_dietrich$parser_combinators$Combine$regex('.+\\n'),
					author$project$Lia$Parser$Context$indentation)),
			A2(
				andre_dietrich$parser_combinators$Combine$ignore,
				author$project$Lia$Parser$Context$indentation_skip,
				author$project$Lia$Parser$Context$indentation_append('  ')))));
var author$project$Lia$Definition$Parser$store = F2(
	function (str, fn) {
		return A2(
			andre_dietrich$parser_combinators$Combine$keep,
			A2(
				andre_dietrich$parser_combinators$Combine$andThen,
				A2(elm$core$Basics$composeR, fn, author$project$Lia$Definition$Parser$set),
				author$project$Lia$Definition$Parser$ending),
			A3(andre_dietrich$parser_combinators$Combine$regexWith, true, false, str));
	});
var author$project$Lia$Definition$Types$Link = function (a) {
	return {$: 'Link', a: a};
};
var author$project$Lia$Definition$Types$Script = function (a) {
	return {$: 'Script', a: a};
};
var author$project$Lia$Definition$Types$toURL = F2(
	function (basis, url) {
		return A2(elm$core$String$startsWith, 'http', url) ? url : _Utils_ap(basis, url);
	});
var author$project$Lia$Definition$Types$append = F4(
	function (to, base, urls, list) {
		return A2(
			elm$core$List$append,
			list,
			A2(
				elm$core$List$map,
				A2(
					elm$core$Basics$composeR,
					author$project$Lia$Definition$Types$toURL(base),
					to),
				A2(elm$core$String$split, '\n', urls)));
	});
var author$project$Lia$Definition$Types$addToResources = F3(
	function (to, urls, def) {
		return _Utils_update(
			def,
			{
				resources: A4(author$project$Lia$Definition$Types$append, to, def.base, urls, def.resources)
			});
	});
var author$project$Lia$Definition$Types$add_imports = F2(
	function (url, def) {
		return _Utils_update(
			def,
			{
				imports: A2(
					elm$core$List$append,
					def.imports,
					A2(
						elm$core$List$map,
						author$project$Lia$Definition$Types$toURL(def.base),
						A2(elm$core$String$split, '\n', url)))
			});
	});
var elm$core$String$words = _String_words;
var author$project$Lia$Definition$Types$add_translation = F2(
	function (str, def) {
		var _n0 = elm$core$String$words(str);
		if ((_n0.b && _n0.b.b) && (!_n0.b.b.b)) {
			var lang = _n0.a;
			var _n1 = _n0.b;
			var url = _n1.a;
			return _Utils_update(
				def,
				{
					translation: A3(
						elm$core$Dict$insert,
						lang,
						A2(author$project$Lia$Definition$Types$toURL, def.base, url),
						def.translation)
				});
		} else {
			return def;
		}
	});
var author$project$Lia$Markdown$Macro$Parser$add = F2(
	function (_n0, def) {
		var name = _n0.a;
		var code = _n0.b;
		return _Utils_update(
			def,
			{
				macro: A3(elm$core$Dict$insert, name, code, def.macro)
			});
	});
var author$project$Lia$Parser$Helper$newline = andre_dietrich$parser_combinators$Combine$string('\n');
var author$project$Lia$Definition$Parser$definition = andre_dietrich$parser_combinators$Combine$lazy(
	function (_n0) {
		var list = andre_dietrich$parser_combinators$Combine$choice(
			_List_fromArray(
				[
					A2(
					author$project$Lia$Definition$Parser$store,
					'author:',
					F2(
						function (x, d) {
							return _Utils_update(
								d,
								{author: x});
						})),
					A2(
					author$project$Lia$Definition$Parser$store,
					'base:',
					F2(
						function (x, d) {
							return _Utils_update(
								d,
								{base: x});
						})),
					A2(
					author$project$Lia$Definition$Parser$store,
					'comment:',
					F2(
						function (x, d) {
							return _Utils_update(
								d,
								{
									comment: A2(author$project$Lia$Definition$Parser$inline_parser, d, x)
								});
						})),
					A2(
					author$project$Lia$Definition$Parser$store,
					'attribute:',
					F2(
						function (x, d) {
							return _Utils_update(
								d,
								{
									attributes: A2(
										elm$core$List$append,
										d.attributes,
										_List_fromArray(
											[
												A2(author$project$Lia$Definition$Parser$inline_parser, d, x)
											]))
								});
						})),
					A2(
					author$project$Lia$Definition$Parser$store,
					'date:',
					F2(
						function (x, d) {
							return _Utils_update(
								d,
								{date: x});
						})),
					A2(
					author$project$Lia$Definition$Parser$store,
					'email:',
					F2(
						function (x, d) {
							return _Utils_update(
								d,
								{email: x});
						})),
					A2(
					author$project$Lia$Definition$Parser$store,
					'language:',
					F2(
						function (x, d) {
							return _Utils_update(
								d,
								{language: x});
						})),
					A2(
					author$project$Lia$Definition$Parser$store,
					'logo:',
					F2(
						function (x, d) {
							return _Utils_update(
								d,
								{
									logo: A2(author$project$Lia$Definition$Types$toURL, d.base, x)
								});
						})),
					A2(
					author$project$Lia$Definition$Parser$store,
					'narrator:',
					F2(
						function (x, d) {
							return _Utils_update(
								d,
								{narrator: x});
						})),
					A2(
					author$project$Lia$Definition$Parser$store,
					'script:',
					author$project$Lia$Definition$Types$addToResources(author$project$Lia$Definition$Types$Script)),
					A2(author$project$Lia$Definition$Parser$store, 'import:', author$project$Lia$Definition$Types$add_imports),
					A2(
					author$project$Lia$Definition$Parser$store,
					'link:',
					author$project$Lia$Definition$Types$addToResources(author$project$Lia$Definition$Types$Link)),
					A2(author$project$Lia$Definition$Parser$store, 'translation:', author$project$Lia$Definition$Types$add_translation),
					A2(
					author$project$Lia$Definition$Parser$store,
					'version:',
					F2(
						function (x, d) {
							return _Utils_update(
								d,
								{version: x});
						})),
					A2(
					author$project$Lia$Definition$Parser$store,
					'debug:',
					F2(
						function (x, d) {
							return _Utils_update(
								d,
								{
									debug: (x === 'true') ? true : false
								});
						})),
					A2(
					andre_dietrich$parser_combinators$Combine$andThen,
					function (x) {
						return author$project$Lia$Definition$Parser$set(
							function (def) {
								return _Utils_update(
									def,
									{
										onload: elm$core$String$trim(x)
									});
							});
					},
					A2(
						andre_dietrich$parser_combinators$Combine$keep,
						author$project$Lia$Parser$Helper$stringTill(
							andre_dietrich$parser_combinators$Combine$string('\n@end')),
						andre_dietrich$parser_combinators$Combine$regex('@onload[\t ]*\\n'))),
					A2(
					andre_dietrich$parser_combinators$Combine$andThen,
					function (x) {
						return author$project$Lia$Definition$Parser$set(
							author$project$Lia$Markdown$Macro$Parser$add(x));
					},
					A2(
						andre_dietrich$parser_combinators$Combine$ignore,
						author$project$Lia$Parser$Helper$newline,
						A2(
							andre_dietrich$parser_combinators$Combine$andMap,
							andre_dietrich$parser_combinators$Combine$regex('.+'),
							A2(
								andre_dietrich$parser_combinators$Combine$map,
								elm$core$Tuple$pair,
								A2(
									andre_dietrich$parser_combinators$Combine$ignore,
									andre_dietrich$parser_combinators$Combine$regex('[\t ]*:[\t ]*'),
									author$project$Lia$Markdown$Macro$Parser$pattern))))),
					A2(
					andre_dietrich$parser_combinators$Combine$andThen,
					function (x) {
						return author$project$Lia$Definition$Parser$set(
							author$project$Lia$Markdown$Macro$Parser$add(x));
					},
					A2(
						andre_dietrich$parser_combinators$Combine$andMap,
						author$project$Lia$Parser$Helper$stringTill(
							andre_dietrich$parser_combinators$Combine$string('\n@end')),
						A2(
							andre_dietrich$parser_combinators$Combine$map,
							elm$core$Tuple$pair,
							A2(
								andre_dietrich$parser_combinators$Combine$ignore,
								andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\n'),
								author$project$Lia$Markdown$Macro$Parser$pattern))))
				]));
		return andre_dietrich$parser_combinators$Combine$skip(
			author$project$Lia$Markdown$Inline$Parser$comment(
				A2(
					andre_dietrich$parser_combinators$Combine$ignore,
					andre_dietrich$parser_combinators$Combine$whitespace,
					andre_dietrich$parser_combinators$Combine$many1(
						A2(andre_dietrich$parser_combinators$Combine$keep, list, andre_dietrich$parser_combinators$Combine$whitespace)))));
	});
var author$project$Lia$Definition$Parser$parse = andre_dietrich$parser_combinators$Combine$lazy(
	function (_n0) {
		return andre_dietrich$parser_combinators$Combine$skip(
			A2(
				andre_dietrich$parser_combinators$Combine$ignore,
				andre_dietrich$parser_combinators$Combine$whitespace,
				andre_dietrich$parser_combinators$Combine$maybe(
					A2(
						andre_dietrich$parser_combinators$Combine$keep,
						andre_dietrich$parser_combinators$Combine$modifyState(
							function (s) {
								return _Utils_update(
									s,
									{defines_updated: true});
							}),
						author$project$Lia$Definition$Parser$definition))));
	});
var andre_dietrich$parser_combinators$Combine$ParseLocation = F3(
	function (source, line, column) {
		return {column: column, line: line, source: source};
	});
var andre_dietrich$parser_combinators$Combine$currentLocation = function (stream) {
	var find = F3(
		function (position, currentLine_, lines) {
			find:
			while (true) {
				if (!lines.b) {
					return A3(andre_dietrich$parser_combinators$Combine$ParseLocation, '', currentLine_, position);
				} else {
					var line = lines.a;
					var rest = lines.b;
					var length = elm$core$String$length(line);
					var lengthPlusNL = length + 1;
					if (_Utils_eq(position, length)) {
						return A3(andre_dietrich$parser_combinators$Combine$ParseLocation, line, currentLine_, position);
					} else {
						if (_Utils_cmp(position, length) > 0) {
							var $temp$position = position - lengthPlusNL,
								$temp$currentLine_ = currentLine_ + 1,
								$temp$lines = rest;
							position = $temp$position;
							currentLine_ = $temp$currentLine_;
							lines = $temp$lines;
							continue find;
						} else {
							return A3(andre_dietrich$parser_combinators$Combine$ParseLocation, line, currentLine_, position);
						}
					}
				}
			}
		});
	return A3(
		find,
		stream.position,
		0,
		A2(elm$core$String$split, '\n', stream.data));
};
var elm$core$String$cons = _String_cons;
var elm$core$String$fromChar = function (_char) {
	return A2(elm$core$String$cons, _char, '');
};
var elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var elm$core$String$repeatHelp = F3(
	function (n, chunk, result) {
		return (n <= 0) ? result : A3(
			elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var elm$core$String$repeat = F2(
	function (n, chunk) {
		return A3(elm$core$String$repeatHelp, n, chunk, '');
	});
var elm$core$String$padLeft = F3(
	function (n, _char, string) {
		return _Utils_ap(
			A2(
				elm$core$String$repeat,
				n - elm$core$String$length(string),
				elm$core$String$fromChar(_char)),
			string);
	});
var author$project$Lia$Parser$Parser$formatError = F2(
	function (ms, stream) {
		var separator = '|> ';
		var separatorOffset = elm$core$String$length(separator);
		var location = andre_dietrich$parser_combinators$Combine$currentLocation(stream);
		var padding = (location.column + separatorOffset) + 2;
		var expectationSeparator = '\n  * ';
		return 'Parse error around line:\\n\\n' + (elm$core$String$fromInt(location.line) + (separator + (location.source + ('\\n' + (A3(
			elm$core$String$padLeft,
			padding,
			_Utils_chr(' '),
			'^') + ('\\nI expected one of the following:\\n' + (expectationSeparator + A2(elm$core$String$join, expectationSeparator, ms))))))));
	});
var author$project$Lia$Parser$Parser$parse_defintion = F2(
	function (base, code) {
		var _n0 = A3(
			andre_dietrich$parser_combinators$Combine$runParser,
			author$project$Lia$Definition$Parser$parse,
			A2(
				author$project$Lia$Parser$Context$init,
				elm$core$Basics$identity,
				author$project$Lia$Definition$Types$default(base)),
			code);
		if (_n0.$ === 'Ok') {
			var _n1 = _n0.a;
			var state = _n1.a;
			var data = _n1.b;
			return elm$core$Result$Ok(
				_Utils_Tuple2(state.defines, data.input));
		} else {
			var _n2 = _n0.a;
			var stream = _n2.b;
			var ms = _n2.c;
			return elm$core$Result$Err(
				A2(author$project$Lia$Parser$Parser$formatError, ms, stream));
		}
	});
var elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3(elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var elm$core$Dict$union = F2(
	function (t1, t2) {
		return A3(elm$core$Dict$foldl, elm$core$Dict$insert, t2, t1);
	});
var author$project$Lia$Definition$Types$add_macros = F2(
	function (orig, temp) {
		return _Utils_update(
			orig,
			{
				attributes: A2(elm$core$List$append, orig.attributes, temp.attributes),
				macro: A2(elm$core$Dict$union, orig.macro, temp.macro),
				onload: elm$core$String$trim(orig.onload + ('\n' + temp.onload))
			});
	});
var elm$core$Basics$not = _Basics_not;
var elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2(elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var author$project$Lia$Model$load_src = F2(
	function (old, _new) {
		var member = function (x) {
			return !A2(elm$core$List$member, x, old);
		};
		var to_load = A2(elm$core$List$filter, member, _new);
		return _Utils_Tuple2(
			A2(elm$core$List$append, old, to_load),
			A2(
				elm$core$List$map,
				function (res) {
					return A3(
						author$project$Port$Event$Event,
						'resource',
						0,
						A2(
							elm$json$Json$Encode$list,
							elm$json$Json$Encode$string,
							function () {
								if (res.$ === 'Script') {
									var url = res.a;
									return _List_fromArray(
										['script', url]);
								} else {
									var url = res.a;
									return _List_fromArray(
										['link', url]);
								}
							}()));
				},
				to_load));
	});
var author$project$Lia$Script$add_todos = F2(
	function (definition, model) {
		var _n0 = A2(author$project$Lia$Model$load_src, model.resource, definition.resources);
		var res = _n0.a;
		var events = _n0.b;
		return _Utils_update(
			model,
			{
				definition: A2(author$project$Lia$Definition$Types$add_macros, model.definition, definition),
				resource: res,
				to_do: A2(
					elm$core$List$append,
					model.to_do,
					elm$core$List$reverse(events))
			});
	});
var author$project$Translations$Bg = {$: 'Bg'};
var author$project$Translations$De = {$: 'De'};
var author$project$Translations$Fa = {$: 'Fa'};
var author$project$Translations$Hy = {$: 'Hy'};
var author$project$Translations$Ua = {$: 'Ua'};
var author$project$Translations$getLnFromCode = function (code) {
	switch (code) {
		case 'bg':
			return author$project$Translations$Bg;
		case 'de':
			return author$project$Translations$De;
		case 'en':
			return author$project$Translations$En;
		case 'fa':
			return author$project$Translations$Fa;
		case 'hy':
			return author$project$Translations$Hy;
		case 'ua':
			return author$project$Translations$Ua;
		default:
			return author$project$Translations$En;
	}
};
var author$project$Lia$Script$init_script = F2(
	function (model, script) {
		var _n0 = A2(author$project$Lia$Parser$Parser$parse_defintion, model.origin, script);
		if (_n0.$ === 'Ok') {
			var _n1 = _n0.a;
			var definition = _n1.a;
			var code = _n1.b;
			return _Utils_Tuple3(
				A2(
					author$project$Lia$Script$add_todos,
					definition,
					_Utils_update(
						model,
						{
							definition: _Utils_update(
								definition,
								{attributes: _List_Nil, imports: _List_Nil, resources: _List_Nil}),
							translation: author$project$Translations$getLnFromCode(definition.language)
						})),
				elm$core$Maybe$Just(code),
				definition.imports);
		} else {
			var msg = _n0.a;
			return _Utils_Tuple3(
				_Utils_update(
					model,
					{
						error: elm$core$Maybe$Just(msg)
					}),
				elm$core$Maybe$Nothing,
				_List_Nil);
		}
	});
var author$project$Model$Error = function (a) {
	return {$: 'Error', a: a};
};
var author$project$Model$Parsing = F2(
	function (a, b) {
		return {$: 'Parsing', a: a, b: b};
	});
var author$project$Update$LiaParse = {$: 'LiaParse'};
var author$project$Update$Load_Template_Result = function (a) {
	return {$: 'Load_Template_Result', a: a};
};
var elm$core$Process$sleep = _Process_sleep;
var elm$core$Task$Perform = function (a) {
	return {$: 'Perform', a: a};
};
var elm$core$Task$init = elm$core$Task$succeed(_Utils_Tuple0);
var elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			elm$core$Task$andThen,
			function (a) {
				return elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var elm$core$Task$spawnCmd = F2(
	function (router, _n0) {
		var task = _n0.a;
		return _Scheduler_spawn(
			A2(
				elm$core$Task$andThen,
				elm$core$Platform$sendToApp(router),
				task));
	});
var elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			elm$core$Task$map,
			function (_n0) {
				return _Utils_Tuple0;
			},
			elm$core$Task$sequence(
				A2(
					elm$core$List$map,
					elm$core$Task$spawnCmd(router),
					commands)));
	});
var elm$core$Task$onSelfMsg = F3(
	function (_n0, _n1, _n2) {
		return elm$core$Task$succeed(_Utils_Tuple0);
	});
var elm$core$Task$cmdMap = F2(
	function (tagger, _n0) {
		var task = _n0.a;
		return elm$core$Task$Perform(
			A2(elm$core$Task$map, tagger, task));
	});
_Platform_effectManagers['Task'] = _Platform_createManager(elm$core$Task$init, elm$core$Task$onEffects, elm$core$Task$onSelfMsg, elm$core$Task$cmdMap);
var elm$core$Task$command = _Platform_leaf('Task');
var elm$core$Task$perform = F2(
	function (toMessage, task) {
		return elm$core$Task$command(
			elm$core$Task$Perform(
				A2(elm$core$Task$map, toMessage, task)));
	});
var author$project$Update$message = function (msg) {
	return A2(
		elm$core$Task$perform,
		elm$core$Basics$identity,
		A2(
			elm$core$Task$andThen,
			elm$core$Basics$always(
				elm$core$Task$succeed(msg)),
			elm$core$Process$sleep(0)));
};
var elm$core$Platform$Cmd$batch = _Platform_batch;
var elm$core$Platform$Cmd$none = elm$core$Platform$Cmd$batch(_List_Nil);
var author$project$Update$load_readme = F2(
	function (model, document) {
		var _n0 = A2(
			author$project$Lia$Script$init_script,
			model.lia,
			A3(elm$core$String$replace, '\u000d', '', document));
		if (_n0.b.$ === 'Just') {
			if (!_n0.c.b) {
				var lia = _n0.a;
				var code = _n0.b.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							code: elm$core$Maybe$Just(code),
							lia: lia,
							size: elm$core$String$length(code),
							state: A2(author$project$Model$Parsing, true, 0)
						}),
					author$project$Update$message(author$project$Update$LiaParse));
			} else {
				var lia = _n0.a;
				var code = _n0.b.a;
				var templates = _n0.c;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							code: elm$core$Maybe$Just(code),
							lia: lia,
							size: elm$core$String$length(code),
							state: A2(
								author$project$Model$Parsing,
								true,
								elm$core$List$length(templates))
						}),
					elm$core$Platform$Cmd$batch(
						A2(
							elm$core$List$cons,
							author$project$Update$message(author$project$Update$LiaParse),
							A2(
								elm$core$List$map,
								author$project$Update$download(author$project$Update$Load_Template_Result),
								templates))));
			}
		} else {
			var lia = _n0.a;
			var _n1 = _n0.b;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						state: author$project$Model$Error(
							A2(elm$core$Maybe$withDefault, '', lia.error))
					}),
				elm$core$Platform$Cmd$none);
		}
	});
var elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (maybeValue.$ === 'Just') {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return elm$core$Maybe$Nothing;
		}
	});
var author$project$Main$init = F3(
	function (flags, url, key) {
		var slide = A2(elm$core$Maybe$andThen, elm$core$String$toInt, url.fragment);
		var _n0 = _Utils_Tuple3(url.query, flags.course, flags.script);
		if (_n0.a.$ === 'Just') {
			var query = _n0.a.a;
			return _Utils_Tuple2(
				A7(
					author$project$Model$Model,
					key,
					url,
					author$project$Model$Loading,
					A4(
						author$project$Lia$Script$init_textbook,
						author$project$Main$get_base(url),
						query,
						author$project$Main$get_origin(url.query),
						slide),
					elm$core$Maybe$Nothing,
					0,
					author$project$Index$Model$init),
				A2(
					author$project$Update$download,
					author$project$Update$Load_ReadMe_Result(query),
					query));
		} else {
			if (_n0.b.$ === 'Just') {
				var query = _n0.b.a;
				return _Utils_Tuple2(
					A7(
						author$project$Model$Model,
						key,
						_Utils_update(
							url,
							{
								query: elm$core$Maybe$Just(query)
							}),
						author$project$Model$Loading,
						A4(
							author$project$Lia$Script$init_textbook,
							author$project$Main$get_base(url),
							query,
							author$project$Main$get_origin(url.query),
							slide),
						elm$core$Maybe$Nothing,
						0,
						author$project$Index$Model$init),
					A2(
						author$project$Update$download,
						author$project$Update$Load_ReadMe_Result(query),
						query));
			} else {
				if (_n0.c.$ === 'Just') {
					var script = _n0.c.a;
					return A2(
						author$project$Update$load_readme,
						A7(
							author$project$Model$Model,
							key,
							url,
							author$project$Model$Idle,
							A4(author$project$Lia$Script$init_textbook, '', '', '', slide),
							elm$core$Maybe$Nothing,
							0,
							author$project$Index$Model$init),
						script);
				} else {
					return author$project$Update$initIndex(
						A7(
							author$project$Model$Model,
							key,
							url,
							author$project$Model$Idle,
							A4(author$project$Lia$Script$init_textbook, '', '', '', slide),
							elm$core$Maybe$Nothing,
							0,
							author$project$Index$Model$init));
				}
			}
		}
	});
var author$project$Update$LinkClicked = function (a) {
	return {$: 'LinkClicked', a: a};
};
var author$project$Update$UrlChanged = function (a) {
	return {$: 'UrlChanged', a: a};
};
var author$project$Lia$Markdown$Update$FootnoteShow = function (a) {
	return {$: 'FootnoteShow', a: a};
};
var elm$json$Json$Decode$string = _Json_decodeString;
var author$project$Lia$Markdown$Update$footnote = _Platform_incomingPort('footnote', elm$json$Json$Decode$string);
var author$project$Lia$Markdown$Update$subscriptions = function (_n0) {
	return author$project$Lia$Markdown$Update$footnote(author$project$Lia$Markdown$Update$FootnoteShow);
};
var author$project$Lia$Update$UpdateMarkdown = function (a) {
	return {$: 'UpdateMarkdown', a: a};
};
var elm$core$Array$getHelp = F3(
	function (shift, index, tree) {
		getHelp:
		while (true) {
			var pos = elm$core$Array$bitMask & (index >>> shift);
			var _n0 = A2(elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_n0.$ === 'SubTree') {
				var subTree = _n0.a;
				var $temp$shift = shift - elm$core$Array$shiftStep,
					$temp$index = index,
					$temp$tree = subTree;
				shift = $temp$shift;
				index = $temp$index;
				tree = $temp$tree;
				continue getHelp;
			} else {
				var values = _n0.a;
				return A2(elm$core$Elm$JsArray$unsafeGet, elm$core$Array$bitMask & index, values);
			}
		}
	});
var elm$core$Array$tailIndex = function (len) {
	return (len >>> 5) << 5;
};
var elm$core$Array$get = F2(
	function (index, _n0) {
		var len = _n0.a;
		var startShift = _n0.b;
		var tree = _n0.c;
		var tail = _n0.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? elm$core$Maybe$Nothing : ((_Utils_cmp(
			index,
			elm$core$Array$tailIndex(len)) > -1) ? elm$core$Maybe$Just(
			A2(elm$core$Elm$JsArray$unsafeGet, elm$core$Array$bitMask & index, tail)) : elm$core$Maybe$Just(
			A3(elm$core$Array$getHelp, startShift, index, tree)));
	});
var author$project$Lia$Update$get_active_section = function (model) {
	return A2(elm$core$Array$get, model.section_active, model.sections);
};
var elm$core$Platform$Sub$map = _Platform_map;
var elm$core$Platform$Sub$batch = _Platform_batch;
var elm$core$Platform$Sub$none = elm$core$Platform$Sub$batch(_List_Nil);
var author$project$Lia$Update$subscriptions = function (model) {
	var _n0 = author$project$Lia$Update$get_active_section(model);
	if (_n0.$ === 'Just') {
		var section = _n0.a;
		return A2(
			elm$core$Platform$Sub$map,
			author$project$Lia$Update$UpdateMarkdown,
			author$project$Lia$Markdown$Update$subscriptions(section));
	} else {
		return elm$core$Platform$Sub$none;
	}
};
var author$project$Lia$Script$subscriptions = function (model) {
	return author$project$Lia$Update$subscriptions(model);
};
var author$project$Update$Handle = function (a) {
	return {$: 'Handle', a: a};
};
var author$project$Update$LiaScript = function (a) {
	return {$: 'LiaScript', a: a};
};
var elm$json$Json$Decode$andThen = _Json_andThen;
var elm$json$Json$Decode$field = _Json_decodeField;
var elm$json$Json$Decode$int = _Json_decodeInt;
var elm$json$Json$Decode$succeed = _Json_succeed;
var elm$json$Json$Decode$value = _Json_decodeValue;
var author$project$Update$event2elm = _Platform_incomingPort(
	'event2elm',
	A2(
		elm$json$Json$Decode$andThen,
		function (topic) {
			return A2(
				elm$json$Json$Decode$andThen,
				function (section) {
					return A2(
						elm$json$Json$Decode$andThen,
						function (message) {
							return elm$json$Json$Decode$succeed(
								{message: message, section: section, topic: topic});
						},
						A2(elm$json$Json$Decode$field, 'message', elm$json$Json$Decode$value));
				},
				A2(elm$json$Json$Decode$field, 'section', elm$json$Json$Decode$int));
		},
		A2(elm$json$Json$Decode$field, 'topic', elm$json$Json$Decode$string)));
var author$project$Update$subscriptions = function (model) {
	return elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				author$project$Update$event2elm(author$project$Update$Handle),
				A2(
				elm$core$Platform$Sub$map,
				author$project$Update$LiaScript,
				author$project$Lia$Script$subscriptions(model.lia))
			]));
};
var author$project$Index$Update$Handle = function (a) {
	return {$: 'Handle', a: a};
};
var author$project$Index$Update$handle = author$project$Index$Update$Handle;
var author$project$Index$Update$IndexError = function (a) {
	return {$: 'IndexError', a: a};
};
var author$project$Index$Update$IndexList = function (a) {
	return {$: 'IndexList', a: a};
};
var author$project$Index$Model$Course = F4(
	function (id, versions, active, last_visit) {
		return {active: active, id: id, last_visit: last_visit, versions: versions};
	});
var author$project$Index$Model$Version = F2(
	function (title, definition) {
		return {definition: definition, title: title};
	});
var elm$json$Json$Decode$map2 = _Json_map2;
var author$project$Lia$Definition$Json$Decode$andMap = F2(
	function (key, dec) {
		return A2(
			elm$json$Json$Decode$map2,
			elm$core$Basics$apR,
			A2(elm$json$Json$Decode$field, key, dec));
	});
var elm$json$Json$Decode$map = _Json_map1;
var elm$json$Json$Decode$oneOf = _Json_oneOf;
var author$project$Lia$Definition$Json$Decode$decResource = elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			elm$json$Json$Decode$map,
			author$project$Lia$Definition$Types$Link,
			A2(elm$json$Json$Decode$field, 'Link', elm$json$Json$Decode$string)),
			A2(
			elm$json$Json$Decode$map,
			author$project$Lia$Definition$Types$Script,
			A2(elm$json$Json$Decode$field, 'Script', elm$json$Json$Decode$string))
		]));
var author$project$Lia$Definition$Types$Definition = function (author) {
	return function (date) {
		return function (email) {
			return function (language) {
				return function (logo) {
					return function (narrator) {
						return function (version) {
							return function (comment) {
								return function (resources) {
									return function (base) {
										return function (translation) {
											return function (macro) {
												return function (imports) {
													return function (attributes) {
														return function (section) {
															return function (uid) {
																return function (debug) {
																	return function (onload) {
																		return {attributes: attributes, author: author, base: base, comment: comment, date: date, debug: debug, email: email, imports: imports, language: language, logo: logo, macro: macro, narrator: narrator, onload: onload, resources: resources, section: section, translation: translation, uid: uid, version: version};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var author$project$Lia$Markdown$Inline$Json$Decode$strReader = F2(
	function (key, type_) {
		return A2(
			elm$json$Json$Decode$map,
			type_,
			A2(elm$json$Json$Decode$field, key, elm$json$Json$Decode$string));
	});
var elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
var elm$json$Json$Decode$dict = function (decoder) {
	return A2(
		elm$json$Json$Decode$map,
		elm$core$Dict$fromList,
		elm$json$Json$Decode$keyValuePairs(decoder));
};
var elm$json$Json$Decode$maybe = function (decoder) {
	return elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2(elm$json$Json$Decode$map, elm$core$Maybe$Just, decoder),
				elm$json$Json$Decode$succeed(elm$core$Maybe$Nothing)
			]));
};
var author$project$Lia$Markdown$Inline$Json$Decode$toAnnotation = function (fn) {
	return A2(
		elm$json$Json$Decode$map,
		fn,
		elm$json$Json$Decode$maybe(
			A2(
				elm$json$Json$Decode$field,
				'a',
				elm$json$Json$Decode$dict(elm$json$Json$Decode$string))));
};
var elm$json$Json$Decode$bool = _Json_decodeBool;
var elm$json$Json$Decode$lazy = function (thunk) {
	return A2(
		elm$json$Json$Decode$andThen,
		thunk,
		elm$json$Json$Decode$succeed(_Utils_Tuple0));
};
var elm$json$Json$Decode$list = _Json_decodeList;
var elm$json$Json$Decode$map3 = _Json_map3;
var author$project$Lia$Markdown$Inline$Json$Decode$inlReader = F2(
	function (key, type_) {
		return A2(
			elm$json$Json$Decode$map,
			type_,
			A2(
				elm$json$Json$Decode$field,
				key,
				elm$json$Json$Decode$lazy(
					function (_n2) {
						return author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decInline();
					})));
	});
var author$project$Lia$Markdown$Inline$Json$Decode$toMultimedia = F2(
	function (fn3, _class) {
		return A4(
			elm$json$Json$Decode$map3,
			fn3,
			A2(
				elm$json$Json$Decode$field,
				_class,
				elm$json$Json$Decode$lazy(
					function (_n1) {
						return author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decode();
					})),
			A3(
				elm$json$Json$Decode$map2,
				elm$core$Tuple$pair,
				A2(elm$json$Json$Decode$field, 'stream', elm$json$Json$Decode$bool),
				A2(elm$json$Json$Decode$field, 'url', elm$json$Json$Decode$string)),
			A2(elm$json$Json$Decode$field, 'title', elm$json$Json$Decode$string));
	});
var author$project$Lia$Markdown$Inline$Json$Decode$toRef = F2(
	function (fn3, _class) {
		return A4(
			elm$json$Json$Decode$map3,
			fn3,
			A2(
				elm$json$Json$Decode$field,
				_class,
				elm$json$Json$Decode$lazy(
					function (_n0) {
						return author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decode();
					})),
			A2(elm$json$Json$Decode$field, 'url', elm$json$Json$Decode$string),
			A2(elm$json$Json$Decode$field, 'title', elm$json$Json$Decode$string));
	});
function author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decode() {
	return elm$json$Json$Decode$list(
		author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decInline());
}
function author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decInline() {
	return A2(
		elm$json$Json$Decode$andThen,
		author$project$Lia$Markdown$Inline$Json$Decode$toAnnotation,
		elm$json$Json$Decode$oneOf(
			_List_fromArray(
				[
					A2(author$project$Lia$Markdown$Inline$Json$Decode$strReader, 'Chars', author$project$Lia$Markdown$Inline$Types$Chars),
					A2(author$project$Lia$Markdown$Inline$Json$Decode$strReader, 'FootnoteMark', author$project$Lia$Markdown$Inline$Types$FootnoteMark),
					A2(author$project$Lia$Markdown$Inline$Json$Decode$strReader, 'Symbol', author$project$Lia$Markdown$Inline$Types$Symbol),
					A2(author$project$Lia$Markdown$Inline$Json$Decode$strReader, 'Verbatim', author$project$Lia$Markdown$Inline$Types$Verbatim),
					A2(author$project$Lia$Markdown$Inline$Json$Decode$inlReader, 'Bold', author$project$Lia$Markdown$Inline$Types$Bold),
					A2(author$project$Lia$Markdown$Inline$Json$Decode$inlReader, 'Italic', author$project$Lia$Markdown$Inline$Types$Italic),
					A2(author$project$Lia$Markdown$Inline$Json$Decode$inlReader, 'Strike', author$project$Lia$Markdown$Inline$Types$Strike),
					A2(author$project$Lia$Markdown$Inline$Json$Decode$inlReader, 'Superscript', author$project$Lia$Markdown$Inline$Types$Superscript),
					A2(author$project$Lia$Markdown$Inline$Json$Decode$inlReader, 'Underline', author$project$Lia$Markdown$Inline$Types$Underline),
					A2(
					author$project$Lia$Markdown$Inline$Json$Decode$strReader,
					'HTML',
					F2(
						function (str, _n3) {
							return author$project$Lia$Markdown$Inline$Types$HTML(str);
						})),
					A2(
					elm$json$Json$Decode$map,
					author$project$Lia$Markdown$Inline$Types$Ref,
					A2(
						elm$json$Json$Decode$field,
						'Ref',
						author$project$Lia$Markdown$Inline$Json$Decode$cyclic$toReference())),
					A2(
					elm$json$Json$Decode$map,
					author$project$Lia$Markdown$Inline$Types$Container,
					A2(
						elm$json$Json$Decode$field,
						'Container',
						elm$json$Json$Decode$lazy(
							function (_n4) {
								return author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decode();
							}))),
					A4(
					elm$json$Json$Decode$map3,
					author$project$Lia$Markdown$Inline$Types$EInline,
					A2(elm$json$Json$Decode$field, 'i', elm$json$Json$Decode$int),
					A2(elm$json$Json$Decode$field, 'j', elm$json$Json$Decode$int),
					A2(
						elm$json$Json$Decode$field,
						'EInline',
						elm$json$Json$Decode$lazy(
							function (_n5) {
								return author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decode();
							})))
				])));
}
function author$project$Lia$Markdown$Inline$Json$Decode$cyclic$toReference() {
	return elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2(author$project$Lia$Markdown$Inline$Json$Decode$toRef, author$project$Lia$Markdown$Inline$Types$Link, 'Link'),
				A2(author$project$Lia$Markdown$Inline$Json$Decode$toRef, author$project$Lia$Markdown$Inline$Types$Mail, 'Mail'),
				A2(author$project$Lia$Markdown$Inline$Json$Decode$toRef, author$project$Lia$Markdown$Inline$Types$Image, 'Image'),
				A2(author$project$Lia$Markdown$Inline$Json$Decode$toMultimedia, author$project$Lia$Markdown$Inline$Types$Audio, 'Audio'),
				A2(author$project$Lia$Markdown$Inline$Json$Decode$toMultimedia, author$project$Lia$Markdown$Inline$Types$Movie, 'Movie')
			]));
}
try {
	var author$project$Lia$Markdown$Inline$Json$Decode$decode = author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decode();
	author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decode = function () {
		return author$project$Lia$Markdown$Inline$Json$Decode$decode;
	};
	var author$project$Lia$Markdown$Inline$Json$Decode$decInline = author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decInline();
	author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decInline = function () {
		return author$project$Lia$Markdown$Inline$Json$Decode$decInline;
	};
	var author$project$Lia$Markdown$Inline$Json$Decode$toReference = author$project$Lia$Markdown$Inline$Json$Decode$cyclic$toReference();
	author$project$Lia$Markdown$Inline$Json$Decode$cyclic$toReference = function () {
		return author$project$Lia$Markdown$Inline$Json$Decode$toReference;
	};
} catch ($) {
throw 'Some top-level definitions from `Lia.Markdown.Inline.Json.Decode` are causing infinite recursion:\n\n  ┌─────┐\n  │    decode\n  │     ↓\n  │    decInline\n  │     ↓\n  │    inlReader\n  │     ↓\n  │    toReference\n  │     ↓\n  │    toMultimedia\n  │     ↓\n  │    toRef\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.0/halting-problem to learn how to fix it!';}
var author$project$Lia$Definition$Json$Decode$decode = A3(
	author$project$Lia$Definition$Json$Decode$andMap,
	'onload',
	elm$json$Json$Decode$string,
	A3(
		elm$json$Json$Decode$map2,
		elm$core$Basics$apR,
		elm$json$Json$Decode$succeed(false),
		A3(
			elm$json$Json$Decode$map2,
			elm$core$Basics$apR,
			elm$json$Json$Decode$succeed(-1),
			A3(
				elm$json$Json$Decode$map2,
				elm$core$Basics$apR,
				elm$json$Json$Decode$succeed(-1),
				A3(
					author$project$Lia$Definition$Json$Decode$andMap,
					'attributes',
					elm$json$Json$Decode$list(author$project$Lia$Markdown$Inline$Json$Decode$decode),
					A3(
						elm$json$Json$Decode$map2,
						elm$core$Basics$apR,
						elm$json$Json$Decode$succeed(_List_Nil),
						A3(
							author$project$Lia$Definition$Json$Decode$andMap,
							'macro',
							elm$json$Json$Decode$dict(elm$json$Json$Decode$string),
							A3(
								author$project$Lia$Definition$Json$Decode$andMap,
								'translation',
								elm$json$Json$Decode$dict(elm$json$Json$Decode$string),
								A3(
									author$project$Lia$Definition$Json$Decode$andMap,
									'base',
									elm$json$Json$Decode$string,
									A3(
										author$project$Lia$Definition$Json$Decode$andMap,
										'resources',
										elm$json$Json$Decode$list(author$project$Lia$Definition$Json$Decode$decResource),
										A3(
											author$project$Lia$Definition$Json$Decode$andMap,
											'comment',
											author$project$Lia$Markdown$Inline$Json$Decode$decode,
											A3(
												author$project$Lia$Definition$Json$Decode$andMap,
												'version',
												elm$json$Json$Decode$string,
												A3(
													author$project$Lia$Definition$Json$Decode$andMap,
													'narrator',
													elm$json$Json$Decode$string,
													A3(
														author$project$Lia$Definition$Json$Decode$andMap,
														'logo',
														elm$json$Json$Decode$string,
														A3(
															author$project$Lia$Definition$Json$Decode$andMap,
															'language',
															elm$json$Json$Decode$string,
															A3(
																author$project$Lia$Definition$Json$Decode$andMap,
																'email',
																elm$json$Json$Decode$string,
																A3(
																	author$project$Lia$Definition$Json$Decode$andMap,
																	'date',
																	elm$json$Json$Decode$string,
																	A3(
																		author$project$Lia$Definition$Json$Decode$andMap,
																		'author',
																		elm$json$Json$Decode$string,
																		elm$json$Json$Decode$succeed(author$project$Lia$Definition$Types$Definition)))))))))))))))))));
var author$project$Index$Update$decVersion = A3(
	elm$json$Json$Decode$map2,
	author$project$Index$Model$Version,
	A2(elm$json$Json$Decode$field, 'title', author$project$Lia$Markdown$Inline$Json$Decode$decode),
	author$project$Lia$Definition$Json$Decode$decode);
var elm$json$Json$Decode$map4 = _Json_map4;
var author$project$Index$Update$decCourse = A5(
	elm$json$Json$Decode$map4,
	author$project$Index$Model$Course,
	A2(elm$json$Json$Decode$field, 'id', elm$json$Json$Decode$string),
	A2(
		elm$json$Json$Decode$field,
		'data',
		elm$json$Json$Decode$dict(author$project$Index$Update$decVersion)),
	elm$json$Json$Decode$succeed(elm$core$Maybe$Nothing),
	A2(elm$json$Json$Decode$field, 'updated_str', elm$json$Json$Decode$string));
var author$project$Index$Update$decList = A2(
	elm$json$Json$Decode$map,
	author$project$Index$Update$IndexList,
	A2(
		elm$json$Json$Decode$field,
		'list',
		elm$json$Json$Decode$list(author$project$Index$Update$decCourse)));
var elm$json$Json$Decode$decodeValue = _Json_run;
var author$project$Index$Update$decode = function (json) {
	var _n0 = A2(elm$json$Json$Decode$decodeValue, author$project$Index$Update$decList, json);
	if (_n0.$ === 'Ok') {
		var rslt = _n0.a;
		return rslt;
	} else {
		var msg = _n0.a;
		return author$project$Index$Update$IndexError('decode');
	}
};
var author$project$Index$Update$delete = function (id) {
	return A3(
		author$project$Port$Event$Event,
		'delete',
		-1,
		elm$json$Json$Encode$string(id));
};
var author$project$Index$Update$update = F2(
	function (msg, model) {
		update:
		while (true) {
			switch (msg.$) {
				case 'IndexList':
					var list = msg.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{courses: list, initialized: true}),
						elm$core$Platform$Cmd$none,
						_List_Nil);
				case 'IndexError':
					return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, _List_Nil);
				case 'Delete':
					var courseID = msg.a;
					return _Utils_Tuple3(
						model,
						elm$core$Platform$Cmd$none,
						_List_fromArray(
							[
								author$project$Index$Update$delete(courseID)
							]));
				case 'Handle':
					var json = msg.a;
					var $temp$msg = author$project$Index$Update$decode(json),
						$temp$model = model;
					msg = $temp$msg;
					model = $temp$model;
					continue update;
				default:
					var url = msg.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{input: url}),
						elm$core$Platform$Cmd$none,
						_List_Nil);
			}
		}
	});
var author$project$Lia$Json$Decode$andMap = F2(
	function (key, dec) {
		return A2(
			elm$json$Json$Decode$map2,
			elm$core$Basics$apR,
			A2(elm$json$Json$Decode$field, key, dec));
	});
var author$project$Lia$Types$SectionBase = F3(
	function (identation, title, code) {
		return {code: code, identation: identation, title: title};
	});
var author$project$Lia$Json$Decode$toSectionBase = A4(
	elm$json$Json$Decode$map3,
	author$project$Lia$Types$SectionBase,
	A2(elm$json$Json$Decode$field, 'indentation', elm$json$Json$Decode$int),
	A2(elm$json$Json$Decode$field, 'title', author$project$Lia$Markdown$Inline$Json$Decode$decode),
	A2(elm$json$Json$Decode$field, 'code', elm$json$Json$Decode$string));
var author$project$Lia$Model$Model = function (url) {
	return function (readme) {
		return function (origin) {
			return function (title) {
				return function (settings) {
					return function (error) {
						return function (sections) {
							return function (section_active) {
								return function (definition) {
									return function (index_model) {
										return function (resource) {
											return function (to_do) {
												return function (translation) {
													return function (ready) {
														return function (search_index) {
															return function (load_slide) {
																return {definition: definition, error: error, index_model: index_model, load_slide: load_slide, origin: origin, readme: readme, ready: ready, resource: resource, search_index: search_index, section_active: section_active, sections: sections, settings: settings, title: title, to_do: to_do, translation: translation, url: url};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var author$project$Lia$Settings$Model$Slides = {$: 'Slides'};
var author$project$Lia$Types$init_section = F2(
	function (idx, base) {
		return {body: _List_Nil, code: base.code, code_vector: elm$core$Array$empty, definition: elm$core$Maybe$Nothing, effect_model: author$project$Lia$Markdown$Effect$Model$init, error: elm$core$Maybe$Nothing, footnote2show: elm$core$Maybe$Nothing, footnotes: author$project$Lia$Markdown$Footnote$Model$init, idx: idx, indentation: base.identation, parsed: false, quiz_vector: elm$core$Array$empty, survey_vector: elm$core$Array$empty, title: base.title, visible: true, visited: true};
	});
var elm$core$Elm$JsArray$foldl = _JsArray_foldl;
var elm$core$Elm$JsArray$indexedMap = _JsArray_indexedMap;
var elm$core$Array$indexedMap = F2(
	function (func, _n0) {
		var len = _n0.a;
		var tree = _n0.c;
		var tail = _n0.d;
		var initialBuilder = {
			nodeList: _List_Nil,
			nodeListSize: 0,
			tail: A3(
				elm$core$Elm$JsArray$indexedMap,
				func,
				elm$core$Array$tailIndex(len),
				tail)
		};
		var helper = F2(
			function (node, builder) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3(elm$core$Elm$JsArray$foldl, helper, builder, subTree);
				} else {
					var leaf = node.a;
					var offset = builder.nodeListSize * elm$core$Array$branchFactor;
					var mappedLeaf = elm$core$Array$Leaf(
						A3(elm$core$Elm$JsArray$indexedMap, func, offset, leaf));
					return {
						nodeList: A2(elm$core$List$cons, mappedLeaf, builder.nodeList),
						nodeListSize: builder.nodeListSize + 1,
						tail: builder.tail
					};
				}
			});
		return A2(
			elm$core$Array$builderToArray,
			true,
			A3(elm$core$Elm$JsArray$foldl, helper, initialBuilder, tree));
	});
var elm$json$Json$Decode$array = _Json_decodeArray;
var author$project$Lia$Json$Decode$toModel = A3(
	elm$json$Json$Decode$map2,
	elm$core$Basics$apR,
	elm$json$Json$Decode$succeed(-1),
	A3(
		elm$json$Json$Decode$map2,
		elm$core$Basics$apR,
		elm$json$Json$Decode$succeed(elm$core$Basics$identity),
		A3(
			elm$json$Json$Decode$map2,
			elm$core$Basics$apR,
			elm$json$Json$Decode$succeed(false),
			A3(
				author$project$Lia$Json$Decode$andMap,
				'translation',
				A2(elm$json$Json$Decode$map, author$project$Translations$getLnFromCode, elm$json$Json$Decode$string),
				A3(
					elm$json$Json$Decode$map2,
					elm$core$Basics$apR,
					elm$json$Json$Decode$succeed(_List_Nil),
					A3(
						elm$json$Json$Decode$map2,
						elm$core$Basics$apR,
						elm$json$Json$Decode$succeed(_List_Nil),
						A3(
							elm$json$Json$Decode$map2,
							elm$core$Basics$apR,
							elm$json$Json$Decode$succeed(author$project$Lia$Index$Model$init),
							A3(
								author$project$Lia$Json$Decode$andMap,
								'definition',
								author$project$Lia$Definition$Json$Decode$decode,
								A3(
									author$project$Lia$Json$Decode$andMap,
									'section_active',
									elm$json$Json$Decode$int,
									A3(
										author$project$Lia$Json$Decode$andMap,
										'sections',
										A2(
											elm$json$Json$Decode$map,
											elm$core$Array$indexedMap(author$project$Lia$Types$init_section),
											elm$json$Json$Decode$array(author$project$Lia$Json$Decode$toSectionBase)),
										A3(
											elm$json$Json$Decode$map2,
											elm$core$Basics$apR,
											elm$json$Json$Decode$succeed(elm$core$Maybe$Nothing),
											A3(
												elm$json$Json$Decode$map2,
												elm$core$Basics$apR,
												elm$json$Json$Decode$succeed(
													author$project$Lia$Settings$Model$init(author$project$Lia$Settings$Model$Slides)),
												A3(
													author$project$Lia$Json$Decode$andMap,
													'str_title',
													elm$json$Json$Decode$string,
													A3(
														author$project$Lia$Json$Decode$andMap,
														'origin',
														elm$json$Json$Decode$string,
														A3(
															author$project$Lia$Json$Decode$andMap,
															'readme',
															elm$json$Json$Decode$string,
															A3(
																author$project$Lia$Json$Decode$andMap,
																'url',
																elm$json$Json$Decode$string,
																elm$json$Json$Decode$succeed(author$project$Lia$Model$Model)))))))))))))))));
var author$project$Lia$Json$Decode$decode = function (json) {
	return A2(elm$json$Json$Decode$decodeValue, author$project$Lia$Json$Decode$toModel, json);
};
var author$project$Lia$Script$add_imports = F2(
	function (model, code) {
		var _n0 = A2(author$project$Lia$Parser$Parser$parse_defintion, model.url, code);
		if (_n0.$ === 'Ok') {
			var _n1 = _n0.a;
			var definition = _n1.a;
			return A2(author$project$Lia$Script$add_todos, definition, model);
		} else {
			return model;
		}
	});
var author$project$Lia$Update$Handle = function (a) {
	return {$: 'Handle', a: a};
};
var author$project$Lia$Script$handle = author$project$Lia$Update$Handle;
var author$project$Lia$Update$Load = function (a) {
	return {$: 'Load', a: a};
};
var author$project$Lia$Index$Update$make_visible = function (section) {
	return _Utils_update(
		section,
		{visible: true});
};
var elm$core$String$contains = _String_contains;
var author$project$Lia$Index$Update$search = F2(
	function (pattern, section) {
		return _Utils_update(
			section,
			{
				visible: A2(elm$core$String$contains, pattern, section.code)
			});
	});
var elm$core$Elm$JsArray$map = _JsArray_map;
var elm$core$Array$map = F2(
	function (func, _n0) {
		var len = _n0.a;
		var startShift = _n0.b;
		var tree = _n0.c;
		var tail = _n0.d;
		var helper = function (node) {
			if (node.$ === 'SubTree') {
				var subTree = node.a;
				return elm$core$Array$SubTree(
					A2(elm$core$Elm$JsArray$map, helper, subTree));
			} else {
				var values = node.a;
				return elm$core$Array$Leaf(
					A2(elm$core$Elm$JsArray$map, func, values));
			}
		};
		return A4(
			elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			A2(elm$core$Elm$JsArray$map, helper, tree),
			A2(elm$core$Elm$JsArray$map, func, tail));
	});
var author$project$Lia$Index$Update$scan = F2(
	function (sections, pattern) {
		var check = (pattern === '') ? author$project$Lia$Index$Update$make_visible : author$project$Lia$Index$Update$search(
			elm$core$String$toLower(pattern));
		return A2(elm$core$Array$map, check, sections);
	});
var author$project$Lia$Index$Update$update = F2(
	function (msg, sections) {
		var pattern = msg.a;
		return _Utils_Tuple2(
			pattern,
			A2(author$project$Lia$Index$Update$scan, sections, pattern));
	});
var author$project$Lia$Markdown$Effect$Update$has_next = function (model) {
	return _Utils_cmp(model.visible, model.effects) < 0;
};
var author$project$Lia$Markdown$Effect$Update$has_previous = function (model) {
	return model.visible > 0;
};
var author$project$Lia$Markdown$Code$Update$Handle = function (a) {
	return {$: 'Handle', a: a};
};
var author$project$Lia$Markdown$Code$Update$handle = author$project$Lia$Markdown$Code$Update$Handle;
var author$project$Lia$Markdown$Quiz$Update$Handle = function (a) {
	return {$: 'Handle', a: a};
};
var author$project$Lia$Markdown$Quiz$Update$handle = author$project$Lia$Markdown$Quiz$Update$Handle;
var author$project$Lia$Markdown$Survey$Update$Handle = function (a) {
	return {$: 'Handle', a: a};
};
var author$project$Lia$Markdown$Survey$Update$handle = author$project$Lia$Markdown$Survey$Update$Handle;
var author$project$Lia$Markdown$Update$UpdateCode = function (a) {
	return {$: 'UpdateCode', a: a};
};
var author$project$Lia$Markdown$Update$UpdateQuiz = function (a) {
	return {$: 'UpdateQuiz', a: a};
};
var author$project$Lia$Markdown$Update$UpdateSurvey = function (a) {
	return {$: 'UpdateSurvey', a: a};
};
var author$project$Port$Eval$Eval = F3(
	function (ok, result, details) {
		return {details: details, ok: ok, result: result};
	});
var author$project$Port$Eval$decoder = A4(
	elm$json$Json$Decode$map3,
	author$project$Port$Eval$Eval,
	A2(elm$json$Json$Decode$field, 'ok', elm$json$Json$Decode$bool),
	A2(elm$json$Json$Decode$field, 'result', elm$json$Json$Decode$string),
	A2(
		elm$json$Json$Decode$field,
		'details',
		elm$json$Json$Decode$list(elm$json$Json$Decode$value)));
var author$project$Port$Eval$decode = function (json) {
	var _n0 = A2(elm$json$Json$Decode$decodeValue, author$project$Port$Eval$decoder, json);
	if (_n0.$ === 'Ok') {
		var result = _n0.a;
		return result;
	} else {
		var info = _n0.a;
		return A3(
			author$project$Port$Eval$Eval,
			false,
			elm$json$Json$Decode$errorToString(info),
			_List_Nil);
	}
};
var author$project$Lia$Markdown$Code$Events$evalDecode = function (event) {
	return author$project$Port$Eval$decode(event.message);
};
var elm$json$Json$Encode$bool = _Json_wrap;
var author$project$Lia$Markdown$Code$Events$toggle = F4(
	function (message, id1, id2, value) {
		return _List_fromArray(
			[
				A3(
				author$project$Port$Event$Event,
				'flip',
				id1,
				author$project$Port$Event$encode(
					A3(
						author$project$Port$Event$Event,
						message,
						id2,
						elm$json$Json$Encode$bool(value))))
			]);
	});
var author$project$Lia$Markdown$Code$Events$flip_view = F3(
	function (id1, id2, file) {
		return A4(author$project$Lia$Markdown$Code$Events$toggle, 'view', id1, id2, file.visible);
	});
var author$project$Lia$Markdown$Code$Events$fullscreen = F3(
	function (id1, id2, file) {
		return A4(author$project$Lia$Markdown$Code$Events$toggle, 'fullscreen', id1, id2, file.fullscreen);
	});
var author$project$Lia$Markdown$Code$Events$input = F2(
	function (idx, string) {
		return A3(
			author$project$Port$Event$Event,
			'input',
			idx,
			elm$json$Json$Encode$string(string));
	});
var author$project$Lia$Markdown$Code$Json$fromFile = function (file) {
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'lang',
				elm$json$Json$Encode$string(file.lang)),
				_Utils_Tuple2(
				'name',
				elm$json$Json$Encode$string(file.name)),
				_Utils_Tuple2(
				'code',
				elm$json$Json$Encode$string(file.code)),
				_Utils_Tuple2(
				'visible',
				elm$json$Json$Encode$bool(file.visible)),
				_Utils_Tuple2(
				'fullscreen',
				elm$json$Json$Encode$bool(file.fullscreen))
			]));
};
var author$project$Lia$Markdown$Code$Log$encLevel = function (level) {
	return elm$json$Json$Encode$int(
		function () {
			switch (level.$) {
				case 'Debug':
					return -1;
				case 'Info':
					return 0;
				case 'Warn':
					return 1;
				default:
					return 2;
			}
		}());
};
var author$project$Lia$Markdown$Code$Log$encMessage = function (_n0) {
	var level = _n0.level;
	var text = _n0.text;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'level',
				author$project$Lia$Markdown$Code$Log$encLevel(level)),
				_Utils_Tuple2(
				'text',
				elm$json$Json$Encode$string(text))
			]));
};
var author$project$Lia$Markdown$Code$Log$encode = function (log) {
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'ok',
				elm$json$Json$Encode$bool(log.ok)),
				_Utils_Tuple2(
				'level',
				author$project$Lia$Markdown$Code$Log$encLevel(log.level)),
				_Utils_Tuple2(
				'messages',
				A2(elm$json$Json$Encode$list, author$project$Lia$Markdown$Code$Log$encMessage, log.messages)),
				_Utils_Tuple2(
				'lines',
				elm$json$Json$Encode$int(log.lines)),
				_Utils_Tuple2(
				'details',
				A2(elm$json$Json$Encode$list, elm$core$Basics$identity, log.details))
			]));
};
var elm$core$Array$foldl = F3(
	function (func, baseCase, _n0) {
		var tree = _n0.c;
		var tail = _n0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3(elm$core$Elm$JsArray$foldl, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3(elm$core$Elm$JsArray$foldl, func, acc, values);
				}
			});
		return A3(
			elm$core$Elm$JsArray$foldl,
			func,
			A3(elm$core$Elm$JsArray$foldl, helper, baseCase, tree),
			tail);
	});
var elm$json$Json$Encode$array = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				elm$core$Array$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var author$project$Lia$Markdown$Code$Events$load = F2(
	function (idx, project) {
		return _Utils_Tuple2(
			project,
			_List_fromArray(
				[
					A3(
					author$project$Port$Event$Event,
					'load',
					idx,
					elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'file',
								A2(elm$json$Json$Encode$array, author$project$Lia$Markdown$Code$Json$fromFile, project.file)),
								_Utils_Tuple2(
								'version_active',
								elm$json$Json$Encode$int(project.version_active)),
								_Utils_Tuple2(
								'log',
								author$project$Lia$Markdown$Code$Log$encode(project.log))
							])))
				]));
	});
var author$project$Lia$Markdown$Code$Events$stop = function (idx) {
	return _List_fromArray(
		[
			A3(author$project$Port$Event$Event, 'stop', idx, elm$json$Json$Encode$null)
		]);
};
var author$project$Lia$Markdown$Code$Json$fromVersion = function (_n0) {
	var hashes = _n0.a;
	var log = _n0.b;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'hashes',
				A2(elm$json$Json$Encode$list, elm$json$Json$Encode$string, hashes)),
				_Utils_Tuple2(
				'log',
				author$project$Lia$Markdown$Code$Log$encode(log))
			]));
};
var author$project$Lia$Markdown$Code$Events$version_update = F2(
	function (idx, project) {
		return _Utils_Tuple2(
			project,
			_List_fromArray(
				[
					A3(
					author$project$Port$Event$Event,
					'version_update',
					idx,
					elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'version_active',
								elm$json$Json$Encode$int(project.version_active)),
								_Utils_Tuple2(
								'log',
								author$project$Lia$Markdown$Code$Log$encode(project.log)),
								_Utils_Tuple2(
								'version',
								function () {
									var _n0 = A2(elm$core$Array$get, project.version_active, project.version);
									if (_n0.$ === 'Just') {
										var version = _n0.a;
										return author$project$Lia$Markdown$Code$Json$fromVersion(version);
									} else {
										return elm$json$Json$Encode$null;
									}
								}())
							])))
				]));
	});
var author$project$Lia$Markdown$Code$Log$Debug = {$: 'Debug'};
var author$project$Lia$Markdown$Code$Log$Message = F2(
	function (level, text) {
		return {level: level, text: text};
	});
var author$project$Lia$Markdown$Code$Log$add_ = F3(
	function (level, str, log) {
		var lines = elm$core$List$length(
			elm$core$String$lines(str));
		var _n0 = log.messages;
		if (_n0.b) {
			var x = _n0.a;
			var xs = _n0.b;
			return _Utils_update(
				log,
				{
					lines: (log.lines + lines) - 1,
					messages: _Utils_eq(x.level, level) ? A2(
						elm$core$List$cons,
						_Utils_update(
							x,
							{
								text: _Utils_ap(x.text, str)
							}),
						xs) : A2(
						elm$core$List$cons,
						A2(author$project$Lia$Markdown$Code$Log$Message, level, str),
						A2(elm$core$List$cons, x, xs))
				});
		} else {
			return _Utils_update(
				log,
				{
					lines: lines,
					messages: _List_fromArray(
						[
							A2(author$project$Lia$Markdown$Code$Log$Message, level, str)
						])
				});
		}
	});
var author$project$Lia$Markdown$Code$Log$add_Debug = author$project$Lia$Markdown$Code$Log$add_(author$project$Lia$Markdown$Code$Log$Debug);
var author$project$Lia$Markdown$Code$Log$Error = {$: 'Error'};
var author$project$Lia$Markdown$Code$Log$add_Error = author$project$Lia$Markdown$Code$Log$add_(author$project$Lia$Markdown$Code$Log$Error);
var author$project$Lia$Markdown$Code$Log$Info = {$: 'Info'};
var author$project$Lia$Markdown$Code$Log$add_Info = author$project$Lia$Markdown$Code$Log$add_(author$project$Lia$Markdown$Code$Log$Info);
var author$project$Lia$Markdown$Code$Log$Warn = {$: 'Warn'};
var author$project$Lia$Markdown$Code$Log$add_Warn = author$project$Lia$Markdown$Code$Log$add_(author$project$Lia$Markdown$Code$Log$Warn);
var author$project$Lia$Markdown$Code$Log$Log = F5(
	function (ok, level, messages, lines, details) {
		return {details: details, level: level, lines: lines, messages: messages, ok: ok};
	});
var author$project$Lia$Markdown$Code$Log$empty = A5(author$project$Lia$Markdown$Code$Log$Log, true, author$project$Lia$Markdown$Code$Log$Debug, _List_Nil, 0, _List_Nil);
var author$project$Lia$Markdown$Code$Terminal$Terminal = F3(
	function (input, history, history_value) {
		return {history: history, history_value: history_value, input: input};
	});
var author$project$Lia$Markdown$Code$Terminal$init = A3(author$project$Lia$Markdown$Code$Terminal$Terminal, '', elm$core$Array$empty, 0);
var author$project$Lia$Markdown$Code$Types$loadVersion = F2(
	function (idx, project) {
		var _n0 = A2(elm$core$Array$get, idx, project.version);
		if (_n0.$ === 'Just') {
			var _n1 = _n0.a;
			var hashes = _n1.a;
			var log = _n1.b;
			var get = function (h) {
				return A2(elm$core$Dict$get, h, project.repository);
			};
			var code = elm$core$Array$fromList(
				A2(elm$core$List$map, get, hashes));
			return _Utils_update(
				project,
				{
					file: A2(
						elm$core$Array$indexedMap,
						F2(
							function (i, a) {
								return _Utils_update(
									a,
									{
										code: function () {
											var _n2 = A2(elm$core$Array$get, i, code);
											if ((_n2.$ === 'Just') && (_n2.a.$ === 'Just')) {
												var str = _n2.a.a;
												return str;
											} else {
												return a.code;
											}
										}()
									});
							}),
						project.file),
					log: log,
					version_active: idx
				});
		} else {
			return project;
		}
	});
var elm$core$Array$setHelp = F4(
	function (shift, index, value, tree) {
		var pos = elm$core$Array$bitMask & (index >>> shift);
		var _n0 = A2(elm$core$Elm$JsArray$unsafeGet, pos, tree);
		if (_n0.$ === 'SubTree') {
			var subTree = _n0.a;
			var newSub = A4(elm$core$Array$setHelp, shift - elm$core$Array$shiftStep, index, value, subTree);
			return A3(
				elm$core$Elm$JsArray$unsafeSet,
				pos,
				elm$core$Array$SubTree(newSub),
				tree);
		} else {
			var values = _n0.a;
			var newLeaf = A3(elm$core$Elm$JsArray$unsafeSet, elm$core$Array$bitMask & index, value, values);
			return A3(
				elm$core$Elm$JsArray$unsafeSet,
				pos,
				elm$core$Array$Leaf(newLeaf),
				tree);
		}
	});
var elm$core$Array$set = F3(
	function (index, value, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? array : ((_Utils_cmp(
			index,
			elm$core$Array$tailIndex(len)) > -1) ? A4(
			elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			tree,
			A3(elm$core$Elm$JsArray$unsafeSet, elm$core$Array$bitMask & index, value, tail)) : A4(
			elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			A4(elm$core$Array$setHelp, startShift, index, value, tree),
			tail));
	});
var author$project$Lia$Markdown$Code$Update$clr = function (project) {
	var _n0 = A2(elm$core$Array$get, project.version_active, project.version);
	if (_n0.$ === 'Just') {
		var _n1 = _n0.a;
		var code = _n1.a;
		return _Utils_update(
			project,
			{
				log: author$project$Lia$Markdown$Code$Log$empty,
				version: A3(
					elm$core$Array$set,
					project.version_active,
					_Utils_Tuple2(code, author$project$Lia$Markdown$Code$Log$empty),
					project.version)
			});
	} else {
		return project;
	}
};
var author$project$Port$Eval$replace_input = F2(
	function (_n0, into) {
		var _int = _n0.a;
		var insert = _n0.b;
		return A3(
			elm$core$String$replace,
			'@input(' + (elm$core$String$fromInt(_int) + ')'),
			insert,
			into);
	});
var author$project$Port$Eval$event = F3(
	function (id, code, replacement) {
		var replacement_0 = author$project$Lia$Utils$toJSstring(
			A2(
				elm$core$Maybe$withDefault,
				'',
				elm$core$List$head(replacement)));
		return A3(
			author$project$Port$Event$Event,
			'eval',
			id,
			elm$json$Json$Encode$string(
				A3(
					elm$core$String$replace,
					'@input',
					replacement_0,
					A3(
						elm$core$List$foldl,
						author$project$Port$Eval$replace_input,
						code,
						A2(
							elm$core$List$indexedMap,
							F2(
								function (i, r) {
									return _Utils_Tuple2(
										i,
										author$project$Lia$Utils$toJSstring(r));
								}),
							replacement)))));
	});
var author$project$Lia$Markdown$Code$Events$eval = F2(
	function (idx, project) {
		return _List_fromArray(
			[
				A3(
				author$project$Port$Eval$event,
				idx,
				project.evaluation,
				elm$core$Array$toList(
					A2(
						elm$core$Array$map,
						function ($) {
							return $.code;
						},
						project.file)))
			]);
	});
var author$project$Lia$Markdown$Code$Update$eval = F2(
	function (idx, project) {
		return _Utils_Tuple2(
			_Utils_update(
				project,
				{running: true}),
			A2(author$project$Lia$Markdown$Code$Events$eval, idx, project));
	});
var elm$json$Json$Encode$dict = F3(
	function (toKey, toValue, dictionary) {
		return _Json_wrap(
			A3(
				elm$core$Dict$foldl,
				F3(
					function (key, value, obj) {
						return A3(
							_Json_addField,
							toKey(key),
							toValue(value),
							obj);
					}),
				_Json_emptyObject(_Utils_Tuple0),
				dictionary));
	});
var author$project$Lia$Markdown$Code$Events$version_append = F3(
	function (idx, project, repo_update) {
		return A3(
			author$project$Port$Event$Event,
			'version_append',
			idx,
			elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'version_active',
						elm$json$Json$Encode$int(project.version_active)),
						_Utils_Tuple2(
						'log',
						author$project$Lia$Markdown$Code$Log$encode(project.log)),
						_Utils_Tuple2(
						'file',
						A2(elm$json$Json$Encode$array, author$project$Lia$Markdown$Code$Json$fromFile, project.file)),
						_Utils_Tuple2(
						'version',
						function () {
							var _n0 = A2(
								elm$core$Array$get,
								elm$core$Array$length(project.version) - 1,
								project.version);
							if (_n0.$ === 'Just') {
								var version = _n0.a;
								return author$project$Lia$Markdown$Code$Json$fromVersion(version);
							} else {
								return elm$json$Json$Encode$null;
							}
						}()),
						_Utils_Tuple2(
						'repository',
						A3(elm$json$Json$Encode$dict, elm$core$Basics$identity, elm$json$Json$Encode$string, repo_update))
					])));
	});
var elm$core$Basics$neq = _Utils_notEqual;
var elm$core$Dict$diff = F2(
	function (t1, t2) {
		return A3(
			elm$core$Dict$foldl,
			F3(
				function (k, v, t) {
					return A2(elm$core$Dict$remove, k, t);
				}),
			t1,
			t2);
	});
var elm$core$Bitwise$or = _Bitwise_or;
var elm$core$Array$repeat = F2(
	function (n, e) {
		return A2(
			elm$core$Array$initialize,
			n,
			function (_n0) {
				return e;
			});
	});
var truqu$elm_md5$MD5$emptyWords = A2(elm$core$Array$repeat, 16, 0);
var truqu$elm_md5$MD5$addUnsigned = F2(
	function (x, y) {
		return 4294967295 & (x + y);
	});
var truqu$elm_md5$MD5$rotateLeft = F2(
	function (bits, input) {
		return (input << bits) | (input >>> (32 - bits));
	});
var truqu$elm_md5$MD5$cmn = F8(
	function (fun, a, b, c, d, x, s, ac) {
		return A2(
			truqu$elm_md5$MD5$addUnsigned,
			b,
			A2(
				truqu$elm_md5$MD5$rotateLeft,
				s,
				A2(
					truqu$elm_md5$MD5$addUnsigned,
					a,
					A2(
						truqu$elm_md5$MD5$addUnsigned,
						ac,
						A2(
							truqu$elm_md5$MD5$addUnsigned,
							A3(fun, b, c, d),
							x)))));
	});
var elm$core$Bitwise$xor = _Bitwise_xor;
var truqu$elm_md5$MD5$f = F3(
	function (x, y, z) {
		return z ^ (x & (y ^ z));
	});
var truqu$elm_md5$MD5$ff = F7(
	function (a, b, c, d, x, s, ac) {
		return A8(truqu$elm_md5$MD5$cmn, truqu$elm_md5$MD5$f, a, b, c, d, x, s, ac);
	});
var truqu$elm_md5$MD5$g = F3(
	function (x, y, z) {
		return y ^ (z & (x ^ y));
	});
var truqu$elm_md5$MD5$gg = F7(
	function (a, b, c, d, x, s, ac) {
		return A8(truqu$elm_md5$MD5$cmn, truqu$elm_md5$MD5$g, a, b, c, d, x, s, ac);
	});
var truqu$elm_md5$MD5$h = F3(
	function (x, y, z) {
		return z ^ (x ^ y);
	});
var truqu$elm_md5$MD5$hh = F7(
	function (a, b, c, d, x, s, ac) {
		return A8(truqu$elm_md5$MD5$cmn, truqu$elm_md5$MD5$h, a, b, c, d, x, s, ac);
	});
var elm$core$Bitwise$complement = _Bitwise_complement;
var truqu$elm_md5$MD5$i = F3(
	function (x, y, z) {
		return y ^ (x | (~z));
	});
var truqu$elm_md5$MD5$ii = F7(
	function (a, b, c, d, x, s, ac) {
		return A8(truqu$elm_md5$MD5$cmn, truqu$elm_md5$MD5$i, a, b, c, d, x, s, ac);
	});
var truqu$elm_md5$MD5$hex_ = F2(
	function (xs, acc) {
		var a = acc.a;
		var b = acc.b;
		var c = acc.c;
		var d = acc.d;
		if ((((((((((((((((xs.b && xs.b.b) && xs.b.b.b) && xs.b.b.b.b) && xs.b.b.b.b.b) && xs.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && xs.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && (!xs.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b)) {
			var x0 = xs.a;
			var _n1 = xs.b;
			var x1 = _n1.a;
			var _n2 = _n1.b;
			var x2 = _n2.a;
			var _n3 = _n2.b;
			var x3 = _n3.a;
			var _n4 = _n3.b;
			var x4 = _n4.a;
			var _n5 = _n4.b;
			var x5 = _n5.a;
			var _n6 = _n5.b;
			var x6 = _n6.a;
			var _n7 = _n6.b;
			var x7 = _n7.a;
			var _n8 = _n7.b;
			var x8 = _n8.a;
			var _n9 = _n8.b;
			var x9 = _n9.a;
			var _n10 = _n9.b;
			var x10 = _n10.a;
			var _n11 = _n10.b;
			var x11 = _n11.a;
			var _n12 = _n11.b;
			var x12 = _n12.a;
			var _n13 = _n12.b;
			var x13 = _n13.a;
			var _n14 = _n13.b;
			var x14 = _n14.a;
			var _n15 = _n14.b;
			var x15 = _n15.a;
			var s44 = 21;
			var s43 = 15;
			var s42 = 10;
			var s41 = 6;
			var s34 = 23;
			var s33 = 16;
			var s32 = 11;
			var s31 = 4;
			var s24 = 20;
			var s23 = 14;
			var s22 = 9;
			var s21 = 5;
			var s14 = 22;
			var s13 = 17;
			var s12 = 12;
			var s11 = 7;
			var d00 = d;
			var c00 = c;
			var b00 = b;
			var a00 = a;
			var a01 = A7(truqu$elm_md5$MD5$ff, a00, b00, c00, d00, x0, s11, 3614090360);
			var d01 = A7(truqu$elm_md5$MD5$ff, d00, a01, b00, c00, x1, s12, 3905402710);
			var c01 = A7(truqu$elm_md5$MD5$ff, c00, d01, a01, b00, x2, s13, 606105819);
			var b01 = A7(truqu$elm_md5$MD5$ff, b00, c01, d01, a01, x3, s14, 3250441966);
			var a02 = A7(truqu$elm_md5$MD5$ff, a01, b01, c01, d01, x4, s11, 4118548399);
			var d02 = A7(truqu$elm_md5$MD5$ff, d01, a02, b01, c01, x5, s12, 1200080426);
			var c02 = A7(truqu$elm_md5$MD5$ff, c01, d02, a02, b01, x6, s13, 2821735955);
			var b02 = A7(truqu$elm_md5$MD5$ff, b01, c02, d02, a02, x7, s14, 4249261313);
			var a03 = A7(truqu$elm_md5$MD5$ff, a02, b02, c02, d02, x8, s11, 1770035416);
			var d03 = A7(truqu$elm_md5$MD5$ff, d02, a03, b02, c02, x9, s12, 2336552879);
			var c03 = A7(truqu$elm_md5$MD5$ff, c02, d03, a03, b02, x10, s13, 4294925233);
			var b03 = A7(truqu$elm_md5$MD5$ff, b02, c03, d03, a03, x11, s14, 2304563134);
			var a04 = A7(truqu$elm_md5$MD5$ff, a03, b03, c03, d03, x12, s11, 1804603682);
			var d04 = A7(truqu$elm_md5$MD5$ff, d03, a04, b03, c03, x13, s12, 4254626195);
			var c04 = A7(truqu$elm_md5$MD5$ff, c03, d04, a04, b03, x14, s13, 2792965006);
			var b04 = A7(truqu$elm_md5$MD5$ff, b03, c04, d04, a04, x15, s14, 1236535329);
			var a05 = A7(truqu$elm_md5$MD5$gg, a04, b04, c04, d04, x1, s21, 4129170786);
			var d05 = A7(truqu$elm_md5$MD5$gg, d04, a05, b04, c04, x6, s22, 3225465664);
			var c05 = A7(truqu$elm_md5$MD5$gg, c04, d05, a05, b04, x11, s23, 643717713);
			var b05 = A7(truqu$elm_md5$MD5$gg, b04, c05, d05, a05, x0, s24, 3921069994);
			var a06 = A7(truqu$elm_md5$MD5$gg, a05, b05, c05, d05, x5, s21, 3593408605);
			var d06 = A7(truqu$elm_md5$MD5$gg, d05, a06, b05, c05, x10, s22, 38016083);
			var c06 = A7(truqu$elm_md5$MD5$gg, c05, d06, a06, b05, x15, s23, 3634488961);
			var b06 = A7(truqu$elm_md5$MD5$gg, b05, c06, d06, a06, x4, s24, 3889429448);
			var a07 = A7(truqu$elm_md5$MD5$gg, a06, b06, c06, d06, x9, s21, 568446438);
			var d07 = A7(truqu$elm_md5$MD5$gg, d06, a07, b06, c06, x14, s22, 3275163606);
			var c07 = A7(truqu$elm_md5$MD5$gg, c06, d07, a07, b06, x3, s23, 4107603335);
			var b07 = A7(truqu$elm_md5$MD5$gg, b06, c07, d07, a07, x8, s24, 1163531501);
			var a08 = A7(truqu$elm_md5$MD5$gg, a07, b07, c07, d07, x13, s21, 2850285829);
			var d08 = A7(truqu$elm_md5$MD5$gg, d07, a08, b07, c07, x2, s22, 4243563512);
			var c08 = A7(truqu$elm_md5$MD5$gg, c07, d08, a08, b07, x7, s23, 1735328473);
			var b08 = A7(truqu$elm_md5$MD5$gg, b07, c08, d08, a08, x12, s24, 2368359562);
			var a09 = A7(truqu$elm_md5$MD5$hh, a08, b08, c08, d08, x5, s31, 4294588738);
			var d09 = A7(truqu$elm_md5$MD5$hh, d08, a09, b08, c08, x8, s32, 2272392833);
			var c09 = A7(truqu$elm_md5$MD5$hh, c08, d09, a09, b08, x11, s33, 1839030562);
			var b09 = A7(truqu$elm_md5$MD5$hh, b08, c09, d09, a09, x14, s34, 4259657740);
			var a10 = A7(truqu$elm_md5$MD5$hh, a09, b09, c09, d09, x1, s31, 2763975236);
			var d10 = A7(truqu$elm_md5$MD5$hh, d09, a10, b09, c09, x4, s32, 1272893353);
			var c10 = A7(truqu$elm_md5$MD5$hh, c09, d10, a10, b09, x7, s33, 4139469664);
			var b10 = A7(truqu$elm_md5$MD5$hh, b09, c10, d10, a10, x10, s34, 3200236656);
			var a11 = A7(truqu$elm_md5$MD5$hh, a10, b10, c10, d10, x13, s31, 681279174);
			var d11 = A7(truqu$elm_md5$MD5$hh, d10, a11, b10, c10, x0, s32, 3936430074);
			var c11 = A7(truqu$elm_md5$MD5$hh, c10, d11, a11, b10, x3, s33, 3572445317);
			var b11 = A7(truqu$elm_md5$MD5$hh, b10, c11, d11, a11, x6, s34, 76029189);
			var a12 = A7(truqu$elm_md5$MD5$hh, a11, b11, c11, d11, x9, s31, 3654602809);
			var d12 = A7(truqu$elm_md5$MD5$hh, d11, a12, b11, c11, x12, s32, 3873151461);
			var c12 = A7(truqu$elm_md5$MD5$hh, c11, d12, a12, b11, x15, s33, 530742520);
			var b12 = A7(truqu$elm_md5$MD5$hh, b11, c12, d12, a12, x2, s34, 3299628645);
			var a13 = A7(truqu$elm_md5$MD5$ii, a12, b12, c12, d12, x0, s41, 4096336452);
			var d13 = A7(truqu$elm_md5$MD5$ii, d12, a13, b12, c12, x7, s42, 1126891415);
			var c13 = A7(truqu$elm_md5$MD5$ii, c12, d13, a13, b12, x14, s43, 2878612391);
			var b13 = A7(truqu$elm_md5$MD5$ii, b12, c13, d13, a13, x5, s44, 4237533241);
			var a14 = A7(truqu$elm_md5$MD5$ii, a13, b13, c13, d13, x12, s41, 1700485571);
			var d14 = A7(truqu$elm_md5$MD5$ii, d13, a14, b13, c13, x3, s42, 2399980690);
			var c14 = A7(truqu$elm_md5$MD5$ii, c13, d14, a14, b13, x10, s43, 4293915773);
			var b14 = A7(truqu$elm_md5$MD5$ii, b13, c14, d14, a14, x1, s44, 2240044497);
			var a15 = A7(truqu$elm_md5$MD5$ii, a14, b14, c14, d14, x8, s41, 1873313359);
			var d15 = A7(truqu$elm_md5$MD5$ii, d14, a15, b14, c14, x15, s42, 4264355552);
			var c15 = A7(truqu$elm_md5$MD5$ii, c14, d15, a15, b14, x6, s43, 2734768916);
			var b15 = A7(truqu$elm_md5$MD5$ii, b14, c15, d15, a15, x13, s44, 1309151649);
			var a16 = A7(truqu$elm_md5$MD5$ii, a15, b15, c15, d15, x4, s41, 4149444226);
			var d16 = A7(truqu$elm_md5$MD5$ii, d15, a16, b15, c15, x11, s42, 3174756917);
			var c16 = A7(truqu$elm_md5$MD5$ii, c15, d16, a16, b15, x2, s43, 718787259);
			var b16 = A7(truqu$elm_md5$MD5$ii, b15, c16, d16, a16, x9, s44, 3951481745);
			var b17 = A2(truqu$elm_md5$MD5$addUnsigned, b00, b16);
			var c17 = A2(truqu$elm_md5$MD5$addUnsigned, c00, c16);
			var d17 = A2(truqu$elm_md5$MD5$addUnsigned, d00, d16);
			var a17 = A2(truqu$elm_md5$MD5$addUnsigned, a00, a16);
			return {a: a17, b: b17, c: c17, d: d17};
		} else {
			return acc;
		}
	});
var truqu$elm_md5$MD5$iget = F2(
	function (index, array) {
		return A2(
			elm$core$Maybe$withDefault,
			0,
			A2(elm$core$Array$get, index, array));
	});
var truqu$elm_md5$MD5$consume = F2(
	function (_char, _n0) {
		var hashState = _n0.a;
		var _n1 = _n0.b;
		var byteCount = _n1.a;
		var words = _n1.b;
		var totalByteCount = _n0.c;
		var wordCount = (byteCount / 4) | 0;
		var oldWord = A2(truqu$elm_md5$MD5$iget, wordCount, words);
		var bytePosition = 8 * (byteCount % 4);
		var code = _char << bytePosition;
		var newWord = oldWord | code;
		var newWords = A3(elm$core$Array$set, wordCount, newWord, words);
		return (byteCount === 63) ? _Utils_Tuple3(
			A2(
				truqu$elm_md5$MD5$hex_,
				elm$core$Array$toList(newWords),
				hashState),
			_Utils_Tuple2(0, truqu$elm_md5$MD5$emptyWords),
			totalByteCount + 1) : _Utils_Tuple3(
			hashState,
			_Utils_Tuple2(byteCount + 1, newWords),
			totalByteCount + 1);
	});
var truqu$elm_md5$MD5$finishUp = function (_n0) {
	var hashState = _n0.a;
	var _n1 = _n0.b;
	var byteCount = _n1.a;
	var words = _n1.b;
	var totalByteCount = _n0.c;
	var wordCount = (byteCount / 4) | 0;
	var oldWord = A2(truqu$elm_md5$MD5$iget, wordCount, words);
	var bytePosition = 8 * (byteCount % 4);
	var code = 128 << bytePosition;
	var newWord = oldWord | code;
	var newWords = A3(elm$core$Array$set, wordCount, newWord, words);
	return (wordCount < 14) ? function (x) {
		return A2(truqu$elm_md5$MD5$hex_, x, hashState);
	}(
		elm$core$Array$toList(
			A3(
				elm$core$Array$set,
				15,
				totalByteCount >>> 29,
				A3(elm$core$Array$set, 14, totalByteCount << 3, newWords)))) : function (x) {
		return A2(
			truqu$elm_md5$MD5$hex_,
			x,
			A2(
				truqu$elm_md5$MD5$hex_,
				elm$core$Array$toList(newWords),
				hashState));
	}(
		elm$core$Array$toList(
			A3(
				elm$core$Array$set,
				15,
				totalByteCount >>> 29,
				A3(elm$core$Array$set, 14, totalByteCount << 3, truqu$elm_md5$MD5$emptyWords))));
};
var truqu$elm_md5$MD5$State = F4(
	function (a, b, c, d) {
		return {a: a, b: b, c: c, d: d};
	});
var truqu$elm_md5$MD5$initialHashState = A4(truqu$elm_md5$MD5$State, 1732584193, 4023233417, 2562383102, 271733878);
var elm$core$String$foldl = _String_foldl;
var zwilias$elm_utf_tools$String$UTF8$utf32ToUtf8 = F3(
	function (add, _char, acc) {
		return (_char < 128) ? A2(add, _char, acc) : ((_char < 2048) ? A2(
			add,
			128 | (63 & _char),
			A2(add, 192 | (_char >>> 6), acc)) : ((_char < 65536) ? A2(
			add,
			128 | (63 & _char),
			A2(
				add,
				128 | (63 & (_char >>> 6)),
				A2(add, 224 | (_char >>> 12), acc))) : A2(
			add,
			128 | (63 & _char),
			A2(
				add,
				128 | (63 & (_char >>> 6)),
				A2(
					add,
					128 | (63 & (_char >>> 12)),
					A2(add, 240 | (_char >>> 18), acc))))));
	});
var zwilias$elm_utf_tools$String$UTF8$foldl = F3(
	function (op, initialAcc, input) {
		return A3(
			elm$core$String$foldl,
			F2(
				function (_char, acc) {
					return A3(
						zwilias$elm_utf_tools$String$UTF8$utf32ToUtf8,
						op,
						elm$core$Char$toCode(_char),
						acc);
				}),
			initialAcc,
			input);
	});
var truqu$elm_md5$MD5$hash = function (input) {
	return truqu$elm_md5$MD5$finishUp(
		A3(
			zwilias$elm_utf_tools$String$UTF8$foldl,
			truqu$elm_md5$MD5$consume,
			_Utils_Tuple3(
				truqu$elm_md5$MD5$initialHashState,
				_Utils_Tuple2(0, truqu$elm_md5$MD5$emptyWords),
				0),
			input));
};
var truqu$elm_md5$MD5$bytes = function (string) {
	var _n0 = truqu$elm_md5$MD5$hash(string);
	var a = _n0.a;
	var b = _n0.b;
	var c = _n0.c;
	var d = _n0.d;
	return _List_fromArray(
		[a & 255, (a >>> 8) & 255, (a >>> 16) & 255, (a >>> 24) & 255, b & 255, (b >>> 8) & 255, (b >>> 16) & 255, (b >>> 24) & 255, c & 255, (c >>> 8) & 255, (c >>> 16) & 255, (c >>> 24) & 255, d & 255, (d >>> 8) & 255, (d >>> 16) & 255, (d >>> 24) & 255]);
};
var truqu$elm_md5$MD5$toHex = function (_byte) {
	switch (_byte) {
		case 0:
			return '0';
		case 1:
			return '1';
		case 2:
			return '2';
		case 3:
			return '3';
		case 4:
			return '4';
		case 5:
			return '5';
		case 6:
			return '6';
		case 7:
			return '7';
		case 8:
			return '8';
		case 9:
			return '9';
		case 10:
			return 'a';
		case 11:
			return 'b';
		case 12:
			return 'c';
		case 13:
			return 'd';
		case 14:
			return 'e';
		case 15:
			return 'f';
		default:
			return _Utils_ap(
				truqu$elm_md5$MD5$toHex((_byte / 16) | 0),
				truqu$elm_md5$MD5$toHex(_byte % 16));
	}
};
var truqu$elm_md5$MD5$hex = function (s) {
	return A3(
		elm$core$List$foldl,
		F2(
			function (b, acc) {
				return _Utils_ap(
					acc,
					A3(
						elm$core$String$padLeft,
						2,
						_Utils_chr('0'),
						truqu$elm_md5$MD5$toHex(b)));
			}),
		'',
		truqu$elm_md5$MD5$bytes(s));
};
var author$project$Lia$Markdown$Code$Types$updateVersion = function (project) {
	var code = A2(
		elm$core$Array$map,
		function ($) {
			return $.code;
		},
		project.file);
	var hashes = elm$core$Array$toList(
		A2(elm$core$Array$map, truqu$elm_md5$MD5$hex, code));
	if (A2(
		elm$core$Maybe$withDefault,
		false,
		A2(
			elm$core$Maybe$map,
			elm$core$Basics$neq(hashes),
			A2(
				elm$core$Maybe$map,
				elm$core$Tuple$first,
				A2(elm$core$Array$get, project.version_active, project.version))))) {
		var repository = A2(
			elm$core$Dict$union,
			project.repository,
			elm$core$Dict$fromList(
				A3(
					elm$core$List$map2,
					elm$core$Tuple$pair,
					hashes,
					elm$core$Array$toList(code))));
		return elm$core$Maybe$Just(
			_Utils_Tuple2(
				_Utils_update(
					project,
					{
						log: author$project$Lia$Markdown$Code$Log$empty,
						repository: repository,
						version: A2(
							elm$core$Array$push,
							_Utils_Tuple2(hashes, author$project$Lia$Markdown$Code$Log$empty),
							project.version),
						version_active: elm$core$Array$length(project.version)
					}),
				A2(elm$core$Dict$diff, repository, project.repository)));
	} else {
		return elm$core$Maybe$Nothing;
	}
};
var author$project$Lia$Markdown$Code$Update$is_version_new = F2(
	function (idx, _n0) {
		var project = _n0.a;
		var events = _n0.b;
		var _n1 = author$project$Lia$Markdown$Code$Types$updateVersion(project);
		if (_n1.$ === 'Just') {
			var _n2 = _n1.a;
			var new_project = _n2.a;
			var repo_update = _n2.b;
			return _Utils_Tuple2(
				new_project,
				A2(
					elm$core$List$cons,
					A3(author$project$Lia$Markdown$Code$Events$version_append, idx, new_project, repo_update),
					events));
		} else {
			return _Utils_Tuple2(project, events);
		}
	});
var author$project$Lia$Markdown$Code$Update$logger = F3(
	function (fn, event_str, project) {
		var _n0 = _Utils_Tuple2(
			A2(elm$core$Array$get, project.version_active, project.version),
			A2(elm$json$Json$Decode$decodeValue, elm$json$Json$Decode$string, event_str));
		if ((_n0.a.$ === 'Just') && (_n0.b.$ === 'Ok')) {
			var _n1 = _n0.a.a;
			var code = _n1.a;
			var str = _n0.b.a;
			return _Utils_update(
				project,
				{
					log: A2(fn, str, project.log),
					version: A3(
						elm$core$Array$set,
						project.version_active,
						_Utils_Tuple2(
							code,
							A2(fn, str, project.log)),
						project.version)
				});
		} else {
			return project;
		}
	});
var author$project$Lia$Markdown$Code$Update$maybe_project = F3(
	function (idx, f, model) {
		return A2(
			elm$core$Maybe$map,
			f,
			A2(elm$core$Array$get, idx, model));
	});
var author$project$Lia$Markdown$Code$Update$maybe_update = F3(
	function (idx, model, project) {
		if (project.$ === 'Just') {
			var _n1 = project.a;
			var p = _n1.a;
			var logs = _n1.b;
			return _Utils_Tuple2(
				A3(elm$core$Array$set, idx, p, model),
				_Utils_eq(logs, _List_Nil) ? _List_Nil : logs);
		} else {
			return _Utils_Tuple2(model, _List_Nil);
		}
	});
var author$project$Lia$Markdown$Code$Json$fromProject = function (p) {
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'file',
				A2(elm$json$Json$Encode$array, author$project$Lia$Markdown$Code$Json$fromFile, p.file)),
				_Utils_Tuple2(
				'version',
				A2(elm$json$Json$Encode$array, author$project$Lia$Markdown$Code$Json$fromVersion, p.version)),
				_Utils_Tuple2(
				'version_active',
				elm$json$Json$Encode$int(p.version_active)),
				_Utils_Tuple2(
				'log',
				author$project$Lia$Markdown$Code$Log$encode(p.log)),
				_Utils_Tuple2(
				'repository',
				A3(elm$json$Json$Encode$dict, elm$core$Basics$identity, elm$json$Json$Encode$string, p.repository)),
				_Utils_Tuple2(
				'compact_view',
				elm$json$Json$Encode$bool(p.compact_view))
			]));
};
var author$project$Lia$Markdown$Code$Json$fromVector = function (vector) {
	return A2(elm$json$Json$Encode$array, author$project$Lia$Markdown$Code$Json$fromProject, vector);
};
var author$project$Port$Event$store = function (message) {
	return A3(author$project$Port$Event$Event, 'store', -1, message);
};
var author$project$Lia$Markdown$Code$Events$store = function (model) {
	return author$project$Port$Event$store(
		author$project$Lia$Markdown$Code$Json$fromVector(model));
};
var author$project$Lia$Markdown$Code$Json$copy = F2(
	function (old, _new) {
		return _Utils_update(
			_new,
			{evaluation: old.evaluation});
	});
var author$project$Lia$Markdown$Code$Json$merge = F2(
	function (old, _new) {
		return elm$core$Array$fromList(
			A3(
				elm$core$List$map2,
				author$project$Lia$Markdown$Code$Json$copy,
				elm$core$Array$toList(old),
				elm$core$Array$toList(_new)));
	});
var author$project$Lia$Markdown$Code$Types$Project = function (file) {
	return function (focus) {
		return function (version) {
			return function (version_active) {
				return function (repository) {
					return function (evaluation) {
						return function (log) {
							return function (running) {
								return function (terminal) {
									return function (compact_view) {
										return {compact_view: compact_view, evaluation: evaluation, file: file, focus: focus, log: log, repository: repository, running: running, terminal: terminal, version: version, version_active: version_active};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var author$project$Lia$Markdown$Code$Json$project = F6(
	function (files, version, active, log, repository, compact) {
		return author$project$Lia$Markdown$Code$Types$Project(files)(-1)(version)(active)(repository)('')(log)(false)(elm$core$Maybe$Nothing)(compact);
	});
var author$project$Lia$Markdown$Code$Types$File = F5(
	function (lang, name, code, visible, fullscreen) {
		return {code: code, fullscreen: fullscreen, lang: lang, name: name, visible: visible};
	});
var elm$json$Json$Decode$map5 = _Json_map5;
var author$project$Lia$Markdown$Code$Json$toFile = A6(
	elm$json$Json$Decode$map5,
	author$project$Lia$Markdown$Code$Types$File,
	A2(elm$json$Json$Decode$field, 'lang', elm$json$Json$Decode$string),
	A2(elm$json$Json$Decode$field, 'name', elm$json$Json$Decode$string),
	A2(elm$json$Json$Decode$field, 'code', elm$json$Json$Decode$string),
	A2(elm$json$Json$Decode$field, 'visible', elm$json$Json$Decode$bool),
	A2(elm$json$Json$Decode$field, 'fullscreen', elm$json$Json$Decode$bool));
var author$project$Lia$Markdown$Code$Log$decLevel = A2(
	elm$json$Json$Decode$andThen,
	function (_int) {
		return elm$json$Json$Decode$succeed(
			function () {
				switch (_int) {
					case 0:
						return author$project$Lia$Markdown$Code$Log$Info;
					case 1:
						return author$project$Lia$Markdown$Code$Log$Warn;
					case 2:
						return author$project$Lia$Markdown$Code$Log$Error;
					default:
						return author$project$Lia$Markdown$Code$Log$Debug;
				}
			}());
	},
	elm$json$Json$Decode$int);
var author$project$Lia$Markdown$Code$Log$decMessage = A3(
	elm$json$Json$Decode$map2,
	author$project$Lia$Markdown$Code$Log$Message,
	A2(elm$json$Json$Decode$field, 'level', author$project$Lia$Markdown$Code$Log$decLevel),
	A2(elm$json$Json$Decode$field, 'text', elm$json$Json$Decode$string));
var author$project$Lia$Markdown$Code$Log$decoder = A6(
	elm$json$Json$Decode$map5,
	author$project$Lia$Markdown$Code$Log$Log,
	A2(elm$json$Json$Decode$field, 'ok', elm$json$Json$Decode$bool),
	A2(elm$json$Json$Decode$field, 'level', author$project$Lia$Markdown$Code$Log$decLevel),
	A2(
		elm$json$Json$Decode$field,
		'messages',
		elm$json$Json$Decode$list(author$project$Lia$Markdown$Code$Log$decMessage)),
	A2(elm$json$Json$Decode$field, 'lines', elm$json$Json$Decode$int),
	A2(
		elm$json$Json$Decode$field,
		'details',
		elm$json$Json$Decode$list(elm$json$Json$Decode$value)));
var author$project$Lia$Markdown$Code$Json$toVersion = A3(
	elm$json$Json$Decode$map2,
	elm$core$Tuple$pair,
	A2(
		elm$json$Json$Decode$field,
		'hashes',
		elm$json$Json$Decode$list(elm$json$Json$Decode$string)),
	A2(elm$json$Json$Decode$field, 'log', author$project$Lia$Markdown$Code$Log$decoder));
var elm$json$Json$Decode$map6 = _Json_map6;
var author$project$Lia$Markdown$Code$Json$toProject = A7(
	elm$json$Json$Decode$map6,
	author$project$Lia$Markdown$Code$Json$project,
	A2(
		elm$json$Json$Decode$field,
		'file',
		elm$json$Json$Decode$array(author$project$Lia$Markdown$Code$Json$toFile)),
	A2(
		elm$json$Json$Decode$field,
		'version',
		elm$json$Json$Decode$array(author$project$Lia$Markdown$Code$Json$toVersion)),
	A2(elm$json$Json$Decode$field, 'version_active', elm$json$Json$Decode$int),
	A2(elm$json$Json$Decode$field, 'log', author$project$Lia$Markdown$Code$Log$decoder),
	A2(
		elm$json$Json$Decode$field,
		'repository',
		elm$json$Json$Decode$dict(elm$json$Json$Decode$string)),
	A2(elm$json$Json$Decode$field, 'compact_view', elm$json$Json$Decode$bool));
var elm$json$Json$Decode$null = _Json_decodeNull;
var elm$json$Json$Decode$nullable = function (decoder) {
	return elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				elm$json$Json$Decode$null(elm$core$Maybe$Nothing),
				A2(elm$json$Json$Decode$map, elm$core$Maybe$Just, decoder)
			]));
};
var author$project$Lia$Markdown$Code$Json$toVector = function (json) {
	return A2(
		elm$json$Json$Decode$decodeValue,
		elm$json$Json$Decode$nullable(
			elm$json$Json$Decode$array(author$project$Lia$Markdown$Code$Json$toProject)),
		json);
};
var author$project$Lia$Markdown$Code$Update$restore = F2(
	function (json, model) {
		var _n0 = author$project$Lia$Markdown$Code$Json$toVector(json);
		if (_n0.$ === 'Ok') {
			if (_n0.a.$ === 'Just') {
				var model_ = _n0.a.a;
				return _Utils_Tuple2(
					A2(author$project$Lia$Markdown$Code$Json$merge, model, model_),
					_List_Nil);
			} else {
				var _n1 = _n0.a;
				return _Utils_Tuple2(
					model,
					(!elm$core$Array$length(model)) ? _List_Nil : _List_fromArray(
						[
							author$project$Lia$Markdown$Code$Events$store(model)
						]));
			}
		} else {
			return _Utils_Tuple2(model, _List_Nil);
		}
	});
var author$project$Lia$Markdown$Code$Log$add_Eval = F2(
	function (_eval, log) {
		return (_eval.ok ? author$project$Lia$Markdown$Code$Log$add_Info(_eval.result) : author$project$Lia$Markdown$Code$Log$add_Error(_eval.result))(
			_Utils_update(
				log,
				{details: _eval.details, ok: _eval.ok}));
	});
var author$project$Lia$Markdown$Code$Update$set_result = F3(
	function (_continue, e, project) {
		var _n0 = A2(elm$core$Array$get, project.version_active, project.version);
		if (_n0.$ === 'Just') {
			var _n1 = _n0.a;
			var code = _n1.a;
			return _Utils_update(
				project,
				{
					log: A2(author$project$Lia$Markdown$Code$Log$add_Eval, e, project.log),
					running: _continue ? project.running : false,
					version: A3(
						elm$core$Array$set,
						project.version_active,
						_Utils_Tuple2(
							code,
							A2(author$project$Lia$Markdown$Code$Log$add_Eval, e, project.log)),
						project.version)
				});
		} else {
			return project;
		}
	});
var author$project$Lia$Markdown$Code$Update$stop = function (project) {
	var _n0 = A2(elm$core$Array$get, project.version_active, project.version);
	if (_n0.$ === 'Just') {
		var _n1 = _n0.a;
		var code = _n1.a;
		return _Utils_update(
			project,
			{
				running: false,
				terminal: elm$core$Maybe$Nothing,
				version: A3(
					elm$core$Array$set,
					project.version_active,
					_Utils_Tuple2(code, project.log),
					project.version)
			});
	} else {
		return project;
	}
};
var author$project$Lia$Markdown$Code$Update$update_file = F5(
	function (id_1, id_2, model, f, f_log) {
		var _n0 = A2(elm$core$Array$get, id_1, model);
		if (_n0.$ === 'Just') {
			var project = _n0.a;
			var _n1 = A2(
				elm$core$Maybe$map,
				f,
				A2(elm$core$Array$get, id_2, project.file));
			if (_n1.$ === 'Just') {
				var file = _n1.a;
				return _Utils_Tuple2(
					A3(
						elm$core$Array$set,
						id_1,
						_Utils_update(
							project,
							{
								file: A3(elm$core$Array$set, id_2, file, project.file)
							}),
						model),
					f_log(file));
			} else {
				return _Utils_Tuple2(model, _List_Nil);
			}
		} else {
			return _Utils_Tuple2(model, _List_Nil);
		}
	});
var author$project$Lia$Markdown$Code$Terminal$print_to = function (terminal) {
	return (A2(
		elm$core$Maybe$withDefault,
		true,
		A2(
			elm$core$Maybe$map,
			function (h) {
				return !_Utils_eq(h, terminal.input);
			},
			A2(elm$core$Array$get, terminal.history_value, terminal.history))) && (terminal.input !== '')) ? _Utils_update(
		terminal,
		{
			history: A2(elm$core$Array$push, terminal.input, terminal.history),
			history_value: elm$core$Array$length(terminal.history) + 1,
			input: ''
		}) : _Utils_update(
		terminal,
		{history_value: terminal.history_value + 1, input: ''});
};
var author$project$Lia$Markdown$Code$Terminal$restore_input = F2(
	function (up, terminal) {
		var new_hist = up ? (terminal.history_value - 1) : (terminal.history_value + 1);
		var _n0 = A2(elm$core$Array$get, new_hist, terminal.history);
		if (_n0.$ === 'Just') {
			var str = _n0.a;
			return _Utils_update(
				terminal,
				{history_value: new_hist, input: str});
		} else {
			return terminal;
		}
	});
var author$project$Lia$Markdown$Code$Terminal$update = F2(
	function (msg, terminal) {
		if (msg.$ === 'KeyDown') {
			var key = msg.a;
			return (key === 13) ? _Utils_Tuple2(
				author$project$Lia$Markdown$Code$Terminal$print_to(terminal),
				elm$core$Maybe$Just(terminal.input + '\n')) : ((key === 38) ? _Utils_Tuple2(
				A2(author$project$Lia$Markdown$Code$Terminal$restore_input, true, terminal),
				elm$core$Maybe$Nothing) : ((key === 40) ? _Utils_Tuple2(
				A2(author$project$Lia$Markdown$Code$Terminal$restore_input, false, terminal),
				elm$core$Maybe$Nothing) : _Utils_Tuple2(terminal, elm$core$Maybe$Nothing)));
		} else {
			var str = msg.a;
			return _Utils_Tuple2(
				_Utils_update(
					terminal,
					{input: str}),
				elm$core$Maybe$Nothing);
		}
	});
var author$project$Lia$Markdown$Code$Update$update_terminal = F3(
	function (f, msg, project) {
		var _n0 = A2(
			elm$core$Maybe$map,
			author$project$Lia$Markdown$Code$Terminal$update(msg),
			project.terminal);
		if (_n0.$ === 'Just') {
			if (_n0.a.b.$ === 'Nothing') {
				var _n1 = _n0.a;
				var terminal = _n1.a;
				var _n2 = _n1.b;
				return _Utils_Tuple2(
					_Utils_update(
						project,
						{
							terminal: elm$core$Maybe$Just(terminal)
						}),
					_List_Nil);
			} else {
				var _n3 = _n0.a;
				var terminal = _n3.a;
				var str = _n3.b.a;
				return _Utils_Tuple2(
					_Utils_update(
						project,
						{
							log: A2(author$project$Lia$Markdown$Code$Log$add_Info, str, project.log),
							terminal: elm$core$Maybe$Just(terminal)
						}),
					_List_fromArray(
						[
							f(str)
						]));
			}
		} else {
			return _Utils_Tuple2(project, _List_Nil);
		}
	});
var author$project$Lia$Markdown$Code$Update$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'Eval':
				var idx = msg.a;
				return A3(
					author$project$Lia$Markdown$Code$Update$maybe_update,
					idx,
					model,
					A2(
						elm$core$Maybe$map,
						author$project$Lia$Markdown$Code$Update$is_version_new(idx),
						A3(
							author$project$Lia$Markdown$Code$Update$maybe_project,
							idx,
							author$project$Lia$Markdown$Code$Update$eval(idx),
							model)));
			case 'Update':
				var id_1 = msg.a;
				var id_2 = msg.b;
				var code_str = msg.c;
				return A5(
					author$project$Lia$Markdown$Code$Update$update_file,
					id_1,
					id_2,
					model,
					function (f) {
						return _Utils_update(
							f,
							{code: code_str});
					},
					function (_n1) {
						return _List_Nil;
					});
			case 'FlipView':
				var id_1 = msg.a;
				var id_2 = msg.b;
				return A5(
					author$project$Lia$Markdown$Code$Update$update_file,
					id_1,
					id_2,
					model,
					function (f) {
						return _Utils_update(
							f,
							{visible: !f.visible});
					},
					A2(author$project$Lia$Markdown$Code$Events$flip_view, id_1, id_2));
			case 'FlipFullscreen':
				var id_1 = msg.a;
				var id_2 = msg.b;
				return A5(
					author$project$Lia$Markdown$Code$Update$update_file,
					id_1,
					id_2,
					model,
					function (f) {
						return _Utils_update(
							f,
							{fullscreen: !f.fullscreen});
					},
					A2(author$project$Lia$Markdown$Code$Events$fullscreen, id_1, id_2));
			case 'Load':
				var idx = msg.a;
				var version = msg.b;
				return A3(
					author$project$Lia$Markdown$Code$Update$maybe_update,
					idx,
					model,
					A2(
						elm$core$Maybe$map,
						author$project$Lia$Markdown$Code$Events$load(idx),
						A3(
							author$project$Lia$Markdown$Code$Update$maybe_project,
							idx,
							author$project$Lia$Markdown$Code$Types$loadVersion(version),
							model)));
			case 'First':
				var idx = msg.a;
				return A3(
					author$project$Lia$Markdown$Code$Update$maybe_update,
					idx,
					model,
					A2(
						elm$core$Maybe$map,
						author$project$Lia$Markdown$Code$Events$load(idx),
						A3(
							author$project$Lia$Markdown$Code$Update$maybe_project,
							idx,
							author$project$Lia$Markdown$Code$Types$loadVersion(0),
							model)));
			case 'Last':
				var idx = msg.a;
				var version = A2(
					elm$core$Maybe$withDefault,
					0,
					A3(
						author$project$Lia$Markdown$Code$Update$maybe_project,
						idx,
						A2(
							elm$core$Basics$composeR,
							function ($) {
								return $.version;
							},
							A2(
								elm$core$Basics$composeR,
								elm$core$Array$length,
								elm$core$Basics$add(-1))),
						model));
				return A3(
					author$project$Lia$Markdown$Code$Update$maybe_update,
					idx,
					model,
					A2(
						elm$core$Maybe$map,
						author$project$Lia$Markdown$Code$Events$load(idx),
						A3(
							author$project$Lia$Markdown$Code$Update$maybe_project,
							idx,
							author$project$Lia$Markdown$Code$Types$loadVersion(version),
							model)));
			case 'Handle':
				var event = msg.a;
				var _n2 = event.topic;
				switch (_n2) {
					case 'eval':
						var e = author$project$Lia$Markdown$Code$Events$evalDecode(event);
						var _n3 = e.result;
						switch (_n3) {
							case 'LIA: wait':
								return A3(
									author$project$Lia$Markdown$Code$Update$maybe_update,
									event.section,
									model,
									A2(
										elm$core$Maybe$map,
										function (p) {
											return _Utils_Tuple2(p, _List_Nil);
										},
										A3(
											author$project$Lia$Markdown$Code$Update$maybe_project,
											event.section,
											function (p) {
												return _Utils_update(
													p,
													{log: author$project$Lia$Markdown$Code$Log$empty});
											},
											model)));
							case 'LIA: stop':
								return A3(
									author$project$Lia$Markdown$Code$Update$maybe_update,
									event.section,
									model,
									A2(
										elm$core$Maybe$map,
										author$project$Lia$Markdown$Code$Events$version_update(event.section),
										A3(author$project$Lia$Markdown$Code$Update$maybe_project, event.section, author$project$Lia$Markdown$Code$Update$stop, model)));
							case 'LIA: clear':
								return A3(
									author$project$Lia$Markdown$Code$Update$maybe_update,
									event.section,
									model,
									A2(
										elm$core$Maybe$map,
										function (p) {
											return _Utils_Tuple2(p, _List_Nil);
										},
										A3(author$project$Lia$Markdown$Code$Update$maybe_project, event.section, author$project$Lia$Markdown$Code$Update$clr, model)));
							case 'LIA: terminal':
								return A3(
									author$project$Lia$Markdown$Code$Update$maybe_update,
									event.section,
									model,
									A2(
										elm$core$Maybe$map,
										function (p) {
											return _Utils_Tuple2(p, _List_Nil);
										},
										A3(
											author$project$Lia$Markdown$Code$Update$maybe_project,
											event.section,
											function (p) {
												return _Utils_update(
													p,
													{
														log: e.ok ? author$project$Lia$Markdown$Code$Log$empty : p.log,
														terminal: elm$core$Maybe$Just(author$project$Lia$Markdown$Code$Terminal$init)
													});
											},
											model)));
							default:
								return A3(
									author$project$Lia$Markdown$Code$Update$maybe_update,
									event.section,
									model,
									A2(
										elm$core$Maybe$map,
										author$project$Lia$Markdown$Code$Events$version_update(event.section),
										A3(
											author$project$Lia$Markdown$Code$Update$maybe_project,
											event.section,
											A2(author$project$Lia$Markdown$Code$Update$set_result, false, e),
											model)));
						}
					case 'restore':
						return A2(author$project$Lia$Markdown$Code$Update$restore, event.message, model);
					case 'debug':
						return A3(
							author$project$Lia$Markdown$Code$Update$maybe_update,
							event.section,
							model,
							A2(
								elm$core$Maybe$map,
								function (p) {
									return _Utils_Tuple2(p, _List_Nil);
								},
								A3(
									author$project$Lia$Markdown$Code$Update$maybe_project,
									event.section,
									A2(author$project$Lia$Markdown$Code$Update$logger, author$project$Lia$Markdown$Code$Log$add_Debug, event.message),
									model)));
					case 'info':
						return A3(
							author$project$Lia$Markdown$Code$Update$maybe_update,
							event.section,
							model,
							A2(
								elm$core$Maybe$map,
								function (p) {
									return _Utils_Tuple2(p, _List_Nil);
								},
								A3(
									author$project$Lia$Markdown$Code$Update$maybe_project,
									event.section,
									A2(author$project$Lia$Markdown$Code$Update$logger, author$project$Lia$Markdown$Code$Log$add_Info, event.message),
									model)));
					case 'warn':
						return A3(
							author$project$Lia$Markdown$Code$Update$maybe_update,
							event.section,
							model,
							A2(
								elm$core$Maybe$map,
								function (p) {
									return _Utils_Tuple2(p, _List_Nil);
								},
								A3(
									author$project$Lia$Markdown$Code$Update$maybe_project,
									event.section,
									A2(author$project$Lia$Markdown$Code$Update$logger, author$project$Lia$Markdown$Code$Log$add_Warn, event.message),
									model)));
					case 'error':
						return A3(
							author$project$Lia$Markdown$Code$Update$maybe_update,
							event.section,
							model,
							A2(
								elm$core$Maybe$map,
								function (p) {
									return _Utils_Tuple2(p, _List_Nil);
								},
								A3(
									author$project$Lia$Markdown$Code$Update$maybe_project,
									event.section,
									A2(author$project$Lia$Markdown$Code$Update$logger, author$project$Lia$Markdown$Code$Log$add_Error, event.message),
									model)));
					default:
						return _Utils_Tuple2(model, _List_Nil);
				}
			case 'Stop':
				var idx = msg.a;
				return A3(
					author$project$Lia$Markdown$Code$Update$maybe_update,
					idx,
					model,
					A2(
						elm$core$Maybe$map,
						function (p) {
							return _Utils_Tuple2(
								p,
								author$project$Lia$Markdown$Code$Events$stop(idx));
						},
						A3(
							author$project$Lia$Markdown$Code$Update$maybe_project,
							idx,
							function (p) {
								return _Utils_update(
									p,
									{running: false, terminal: elm$core$Maybe$Nothing});
							},
							model)));
			default:
				var idx = msg.a;
				var childMsg = msg.b;
				return A3(
					author$project$Lia$Markdown$Code$Update$maybe_update,
					idx,
					model,
					A3(
						author$project$Lia$Markdown$Code$Update$maybe_project,
						idx,
						A2(
							author$project$Lia$Markdown$Code$Update$update_terminal,
							author$project$Lia$Markdown$Code$Events$input(idx),
							childMsg),
						model));
		}
	});
var author$project$Lia$Markdown$Effect$Model$current_comment = function (model) {
	return A2(
		elm$core$Maybe$map,
		function (e) {
			return _Utils_Tuple2(e.comment, e.narrator);
		},
		A2(elm$core$Dict$get, model.visible, model.comments));
};
var elm$core$List$concat = function (lists) {
	return A3(elm$core$List$foldr, elm$core$List$append, _List_Nil, lists);
};
var elm$core$List$sortBy = _List_sortBy;
var elm$core$List$sort = function (xs) {
	return A2(elm$core$List$sortBy, elm$core$Basics$identity, xs);
};
var author$project$Lia$Markdown$Effect$Model$get_all_javascript = function (model) {
	return elm$core$List$concat(
		A2(
			elm$core$List$map,
			function (_n0) {
				var v = _n0.b;
				return v;
			},
			elm$core$List$sort(
				elm$core$Dict$toList(model.javascript))));
};
var author$project$Lia$Markdown$Effect$Model$get_javascript = function (model) {
	var _n0 = A2(elm$core$Dict$get, model.visible, model.javascript);
	if (_n0.$ === 'Just') {
		var a = _n0.a;
		return a;
	} else {
		return _List_Nil;
	}
};
var author$project$Lia$Markdown$Effect$Update$Rendered = F2(
	function (a, b) {
		return {$: 'Rendered', a: a, b: b};
	});
var author$project$Lia$Markdown$Effect$Update$Send = function (a) {
	return {$: 'Send', a: a};
};
var author$project$Lia$Markdown$Effect$Update$executeEvent = F2(
	function (delay, code) {
		return A3(
			author$project$Port$Event$Event,
			'execute',
			-1,
			elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'delay',
						elm$json$Json$Encode$int(delay)),
						_Utils_Tuple2(
						'code',
						elm$json$Json$Encode$string(code))
					])));
	});
var author$project$Port$TTS$cancel = A3(
	author$project$Port$Event$Event,
	'speak',
	-1,
	elm$json$Json$Encode$string('cancel'));
var author$project$Port$TTS$speak = F3(
	function (loud, voice, text) {
		return A3(
			author$project$Port$Event$Event,
			'speak',
			-1,
			A2(
				elm$json$Json$Encode$list,
				elm$json$Json$Encode$string,
				_List_fromArray(
					[
						voice,
						text,
						loud ? 'true' : 'false'
					])));
	});
var elm$browser$Browser$External = function (a) {
	return {$: 'External', a: a};
};
var elm$browser$Browser$Internal = function (a) {
	return {$: 'Internal', a: a};
};
var elm$browser$Browser$Dom$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var elm$core$Basics$never = function (_n0) {
	never:
	while (true) {
		var nvr = _n0.a;
		var $temp$_n0 = nvr;
		_n0 = $temp$_n0;
		continue never;
	}
};
var elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 'Normal':
			return 0;
		case 'MayStopPropagation':
			return 1;
		case 'MayPreventDefault':
			return 2;
		default:
			return 3;
	}
};
var elm$url$Url$File = {$: 'File'};
var elm$url$Url$File2 = {$: 'File2'};
var elm$url$Url$Http = {$: 'Http'};
var elm$url$Url$Https = {$: 'Https'};
var elm$core$String$indexes = _String_indexes;
var elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3(elm$core$String$slice, 0, n, string);
	});
var elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {fragment: fragment, host: host, path: path, port_: port_, protocol: protocol, query: query};
	});
var elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if (elm$core$String$isEmpty(str) || A2(elm$core$String$contains, '@', str)) {
			return elm$core$Maybe$Nothing;
		} else {
			var _n0 = A2(elm$core$String$indexes, ':', str);
			if (!_n0.b) {
				return elm$core$Maybe$Just(
					A6(elm$url$Url$Url, protocol, str, elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_n0.b.b) {
					var i = _n0.a;
					var _n1 = elm$core$String$toInt(
						A2(elm$core$String$dropLeft, i + 1, str));
					if (_n1.$ === 'Nothing') {
						return elm$core$Maybe$Just(
							A6(elm$url$Url$Url, protocol, str, elm$core$Maybe$Nothing, path, params, frag));
					} else {
						var port_ = _n1;
						return elm$core$Maybe$Just(
							A6(
								elm$url$Url$Url,
								protocol,
								A2(elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					if (!_n0.b.b.b) {
						var _n2 = _n0.b;
						var i = _n2.a;
						var _n3 = elm$core$String$toInt(
							A2(elm$core$String$dropLeft, i + 1, str));
						if (_n3.$ === 'Nothing') {
							return elm$core$Maybe$Just(
								A6(elm$url$Url$Url, protocol, str, elm$core$Maybe$Nothing, path, params, frag));
						} else {
							var port_ = _n3;
							return elm$core$Maybe$Just(
								A6(
									elm$url$Url$Url,
									protocol,
									A2(elm$core$String$left, i, str),
									port_,
									path,
									params,
									frag));
						}
					} else {
						return elm$core$Maybe$Nothing;
					}
				}
			}
		}
	});
var elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if (elm$core$String$isEmpty(str)) {
			return elm$core$Maybe$Nothing;
		} else {
			var _n0 = A2(elm$core$String$indexes, '/', str);
			if (!_n0.b) {
				return A5(elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _n0.a;
				return A5(
					elm$url$Url$chompBeforePath,
					protocol,
					A2(elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2(elm$core$String$left, i, str));
			}
		}
	});
var elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if (elm$core$String$isEmpty(str)) {
			return elm$core$Maybe$Nothing;
		} else {
			var _n0 = A2(elm$core$String$indexes, '?', str);
			if (!_n0.b) {
				return A4(elm$url$Url$chompBeforeQuery, protocol, elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _n0.a;
				return A4(
					elm$url$Url$chompBeforeQuery,
					protocol,
					elm$core$Maybe$Just(
						A2(elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2(elm$core$String$left, i, str));
			}
		}
	});
var elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if (elm$core$String$isEmpty(str)) {
			return elm$core$Maybe$Nothing;
		} else {
			var _n0 = A2(elm$core$String$indexes, '#', str);
			if (!_n0.b) {
				return A3(elm$url$Url$chompBeforeFragment, protocol, elm$core$Maybe$Nothing, str);
			} else {
				var i = _n0.a;
				return A3(
					elm$url$Url$chompBeforeFragment,
					protocol,
					elm$core$Maybe$Just(
						A2(elm$core$String$dropLeft, i + 1, str)),
					A2(elm$core$String$left, i, str));
			}
		}
	});
var elm$url$Url$fromString = function (str) {
	return A2(elm$core$String$startsWith, 'http://', str) ? A2(
		elm$url$Url$chompAfterProtocol,
		elm$url$Url$Http,
		A2(elm$core$String$dropLeft, 7, str)) : (A2(elm$core$String$startsWith, 'https://', str) ? A2(
		elm$url$Url$chompAfterProtocol,
		elm$url$Url$Https,
		A2(elm$core$String$dropLeft, 8, str)) : (A2(elm$core$String$startsWith, 'file:///', str) ? A2(
		elm$url$Url$chompAfterProtocol,
		elm$url$Url$File2,
		A2(elm$core$String$dropLeft, 8, str)) : (A2(elm$core$String$startsWith, 'file://', str) ? A2(
		elm$url$Url$chompAfterProtocol,
		elm$url$Url$File,
		A2(elm$core$String$dropLeft, 7, str)) : elm$core$Maybe$Nothing)));
};
var elm$browser$Browser$Dom$getViewport = _Browser_withWindow(_Browser_getViewport);
var author$project$Lia$Markdown$Effect$Update$execute = F4(
	function (sound, run_all, delay, model) {
		var javascript = run_all ? author$project$Lia$Markdown$Effect$Model$get_all_javascript(model) : author$project$Lia$Markdown$Effect$Model$get_javascript(model);
		return A3(
			author$project$Lia$Markdown$Effect$Update$update,
			sound,
			author$project$Lia$Markdown$Effect$Update$Send(
				A2(
					elm$core$List$cons,
					A3(
						author$project$Port$Event$Event,
						'persistent',
						-1,
						elm$json$Json$Encode$string('load')),
					A2(
						elm$core$List$map,
						author$project$Lia$Markdown$Effect$Update$executeEvent(delay),
						javascript))),
			model);
	});
var author$project$Lia$Markdown$Effect$Update$update = F3(
	function (sound, msg, model) {
		switch (msg.$) {
			case 'Init':
				var run_all_javascript = msg.a;
				return _Utils_Tuple3(
					model,
					A2(
						elm$core$Task$perform,
						author$project$Lia$Markdown$Effect$Update$Rendered(run_all_javascript),
						elm$browser$Browser$Dom$getViewport),
					_List_Nil);
			case 'Next':
				return author$project$Lia$Markdown$Effect$Update$has_next(model) ? A4(
					author$project$Lia$Markdown$Effect$Update$execute,
					sound,
					false,
					0,
					_Utils_update(
						model,
						{visible: model.visible + 1})) : _Utils_Tuple3(model, elm$core$Platform$Cmd$none, _List_Nil);
			case 'Previous':
				return author$project$Lia$Markdown$Effect$Update$has_previous(model) ? A4(
					author$project$Lia$Markdown$Effect$Update$execute,
					sound,
					false,
					0,
					_Utils_update(
						model,
						{visible: model.visible - 1})) : _Utils_Tuple3(model, elm$core$Platform$Cmd$none, _List_Nil);
			case 'Send':
				var event = msg.a;
				var events = A2(
					elm$core$List$cons,
					A3(
						author$project$Port$Event$Event,
						'scrollTo',
						-1,
						elm$json$Json$Encode$string('focused')),
					event);
				return _Utils_Tuple3(
					model,
					elm$core$Platform$Cmd$none,
					function () {
						var _n1 = author$project$Lia$Markdown$Effect$Model$current_comment(model);
						if (_n1.$ === 'Just') {
							var _n2 = _n1.a;
							var comment = _n2.a;
							var narrator = _n2.b;
							return A2(
								elm$core$List$cons,
								A3(author$project$Port$TTS$speak, sound, narrator, comment),
								events);
						} else {
							return A2(elm$core$List$cons, author$project$Port$TTS$cancel, events);
						}
					}());
			default:
				var run_all_javascript = msg.a;
				return A4(author$project$Lia$Markdown$Effect$Update$execute, sound, run_all_javascript, 0, model);
		}
	});
var author$project$Lia$Markdown$Quiz$Block$Update$toString = function (state) {
	if (state.$ === 'Text') {
		var str = state.a;
		return str;
	} else {
		if (state.b.b && (!state.b.b.b)) {
			var _n1 = state.b;
			var i = _n1.a;
			return elm$core$String$fromInt(i);
		} else {
			return '';
		}
	}
};
var author$project$Lia$Markdown$Quiz$Types$Open = {$: 'Open'};
var author$project$Lia$Markdown$Quiz$Types$ReSolved = {$: 'ReSolved'};
var author$project$Lia$Markdown$Quiz$Types$Solved = {$: 'Solved'};
var author$project$Lia$Markdown$Quiz$Json$decSolution = function (i) {
	switch (i) {
		case 0:
			return elm$json$Json$Decode$succeed(author$project$Lia$Markdown$Quiz$Types$Open);
		case 1:
			return elm$json$Json$Decode$succeed(author$project$Lia$Markdown$Quiz$Types$Solved);
		default:
			return elm$json$Json$Decode$succeed(author$project$Lia$Markdown$Quiz$Types$ReSolved);
	}
};
var author$project$Lia$Markdown$Quiz$Block$Types$Select = F2(
	function (a, b) {
		return {$: 'Select', a: a, b: b};
	});
var author$project$Lia$Markdown$Quiz$Block$Types$Text = function (a) {
	return {$: 'Text', a: a};
};
var author$project$Lia$Markdown$Quiz$Block$Json$decode = elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			elm$json$Json$Decode$map,
			author$project$Lia$Markdown$Quiz$Block$Types$Text,
			A2(elm$json$Json$Decode$field, 'Text', elm$json$Json$Decode$string)),
			A2(
			elm$json$Json$Decode$map,
			A2(
				elm$core$Basics$composeR,
				elm$core$List$singleton,
				author$project$Lia$Markdown$Quiz$Block$Types$Select(false)),
			A2(elm$json$Json$Decode$field, 'Select', elm$json$Json$Decode$int))
		]));
var author$project$Lia$Markdown$Quiz$Matrix$Json$uid = 'Matrix';
var author$project$Lia$Markdown$Quiz$Vector$Types$MultipleChoice = function (a) {
	return {$: 'MultipleChoice', a: a};
};
var author$project$Lia$Markdown$Quiz$Vector$Types$SingleChoice = function (a) {
	return {$: 'SingleChoice', a: a};
};
var author$project$Lia$Markdown$Quiz$Vector$Json$decode = elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			elm$json$Json$Decode$map,
			author$project$Lia$Markdown$Quiz$Vector$Types$SingleChoice,
			A2(
				elm$json$Json$Decode$field,
				'SingleChoice',
				elm$json$Json$Decode$list(elm$json$Json$Decode$bool))),
			A2(
			elm$json$Json$Decode$map,
			author$project$Lia$Markdown$Quiz$Vector$Types$MultipleChoice,
			A2(
				elm$json$Json$Decode$field,
				'MultipleChoice',
				elm$json$Json$Decode$list(elm$json$Json$Decode$bool)))
		]));
var author$project$Lia$Markdown$Quiz$Matrix$Json$decode = A2(
	elm$json$Json$Decode$field,
	author$project$Lia$Markdown$Quiz$Matrix$Json$uid,
	elm$json$Json$Decode$array(author$project$Lia$Markdown$Quiz$Vector$Json$decode));
var author$project$Lia$Markdown$Quiz$Types$Block_State = function (a) {
	return {$: 'Block_State', a: a};
};
var author$project$Lia$Markdown$Quiz$Types$Empty_State = {$: 'Empty_State'};
var author$project$Lia$Markdown$Quiz$Types$Matrix_State = function (a) {
	return {$: 'Matrix_State', a: a};
};
var author$project$Lia$Markdown$Quiz$Types$Vector_State = function (a) {
	return {$: 'Vector_State', a: a};
};
var author$project$Lia$Markdown$Quiz$Json$decState = elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(elm$json$Json$Decode$map, author$project$Lia$Markdown$Quiz$Types$Block_State, author$project$Lia$Markdown$Quiz$Block$Json$decode),
			A2(elm$json$Json$Decode$map, author$project$Lia$Markdown$Quiz$Types$Vector_State, author$project$Lia$Markdown$Quiz$Vector$Json$decode),
			A2(elm$json$Json$Decode$map, author$project$Lia$Markdown$Quiz$Types$Matrix_State, author$project$Lia$Markdown$Quiz$Matrix$Json$decode),
			A2(
			elm$json$Json$Decode$andThen,
			function (_n0) {
				return elm$json$Json$Decode$succeed(author$project$Lia$Markdown$Quiz$Types$Empty_State);
			},
			A2(elm$json$Json$Decode$field, 'Empty', elm$json$Json$Decode$value))
		]));
var author$project$Lia$Markdown$Quiz$Types$Element = F5(
	function (solved, state, trial, hint, error_msg) {
		return {error_msg: error_msg, hint: hint, solved: solved, state: state, trial: trial};
	});
var author$project$Lia$Markdown$Quiz$Json$decElement = A6(
	elm$json$Json$Decode$map5,
	author$project$Lia$Markdown$Quiz$Types$Element,
	A2(
		elm$json$Json$Decode$andThen,
		author$project$Lia$Markdown$Quiz$Json$decSolution,
		A2(elm$json$Json$Decode$field, 'solved', elm$json$Json$Decode$int)),
	A2(elm$json$Json$Decode$field, 'state', author$project$Lia$Markdown$Quiz$Json$decState),
	A2(elm$json$Json$Decode$field, 'trial', elm$json$Json$Decode$int),
	A2(elm$json$Json$Decode$field, 'hint', elm$json$Json$Decode$int),
	A2(elm$json$Json$Decode$field, 'error_msg', elm$json$Json$Decode$string));
var author$project$Lia$Markdown$Quiz$Json$decode = function (json) {
	return A2(
		elm$json$Json$Decode$decodeValue,
		elm$json$Json$Decode$array(author$project$Lia$Markdown$Quiz$Json$decElement),
		json);
};
var elm$core$List$intersperse = F2(
	function (sep, xs) {
		if (!xs.b) {
			return _List_Nil;
		} else {
			var hd = xs.a;
			var tl = xs.b;
			var step = F2(
				function (x, rest) {
					return A2(
						elm$core$List$cons,
						sep,
						A2(elm$core$List$cons, x, rest));
				});
			var spersed = A3(elm$core$List$foldr, step, _List_Nil, tl);
			return A2(elm$core$List$cons, hd, spersed);
		}
	});
var elm$core$Tuple$second = function (_n0) {
	var y = _n0.b;
	return y;
};
var author$project$Lia$Markdown$Quiz$Vector$Update$toString = function (state) {
	if (state.$ === 'SingleChoice') {
		var list = state.a;
		return elm$core$String$fromInt(
			A2(
				elm$core$Maybe$withDefault,
				-1,
				A2(
					elm$core$Maybe$map,
					elm$core$Tuple$first,
					elm$core$List$head(
						A2(
							elm$core$List$filter,
							elm$core$Tuple$second,
							A2(elm$core$List$indexedMap, elm$core$Tuple$pair, list))))));
	} else {
		var values = state.a;
		return function (str) {
			return '[' + (str + ']');
		}(
			elm$core$String$concat(
				A2(
					elm$core$List$intersperse,
					',',
					A2(
						elm$core$List$map,
						function (s) {
							return s ? '1' : '0';
						},
						values))));
	}
};
var author$project$Lia$Markdown$Quiz$Matrix$Update$toString = function (state) {
	return function (str) {
		return '[' + (str + ']');
	}(
		elm$core$String$concat(
			A2(
				elm$core$List$intersperse,
				',',
				A2(
					elm$core$List$map,
					author$project$Lia$Markdown$Quiz$Vector$Update$toString,
					elm$core$Array$toList(state)))));
};
var author$project$Lia$Markdown$Quiz$Types$toState = function (quiz) {
	switch (quiz.$) {
		case 'Empty_Type':
			return author$project$Lia$Markdown$Quiz$Types$Empty_State;
		case 'Block_Type':
			var q = quiz.a;
			return author$project$Lia$Markdown$Quiz$Types$Block_State(q.solution);
		case 'Vector_Type':
			var q = quiz.a;
			return author$project$Lia$Markdown$Quiz$Types$Vector_State(q.solution);
		default:
			var q = quiz.a;
			return author$project$Lia$Markdown$Quiz$Types$Matrix_State(q.solution);
	}
};
var elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var author$project$Lia$Markdown$Quiz$Block$Types$comp = F2(
	function (quiz, state) {
		var _n0 = _Utils_Tuple2(quiz.solution, state);
		_n0$2:
		while (true) {
			if (_n0.a.$ === 'Text') {
				if (_n0.b.$ === 'Text') {
					var str1 = _n0.a.a;
					var str2 = _n0.b.a;
					return _Utils_eq(str1, str2);
				} else {
					break _n0$2;
				}
			} else {
				if (((_n0.b.$ === 'Select') && _n0.b.b.b) && (!_n0.b.b.b.b)) {
					var _n1 = _n0.a;
					var list = _n1.b;
					var _n2 = _n0.b;
					var _n3 = _n2.b;
					var i = _n3.a;
					return !elm$core$List$isEmpty(
						A2(
							elm$core$List$filter,
							elm$core$Basics$eq(i),
							list));
				} else {
					break _n0$2;
				}
			}
		}
		return false;
	});
var author$project$Lia$Markdown$Quiz$Vector$Types$Quiz = F2(
	function (options, solution) {
		return {options: options, solution: solution};
	});
var author$project$Lia$Markdown$Quiz$Vector$Types$comp = F2(
	function (quiz, state) {
		var _n0 = _Utils_Tuple2(quiz.solution, state);
		_n0$2:
		while (true) {
			if (_n0.a.$ === 'SingleChoice') {
				if (_n0.b.$ === 'SingleChoice') {
					var list1 = _n0.a.a;
					var list2 = _n0.b.a;
					return A2(
						elm$core$List$any,
						elm$core$Basics$identity,
						A3(elm$core$List$map2, elm$core$Basics$eq, list1, list2));
				} else {
					break _n0$2;
				}
			} else {
				if (_n0.b.$ === 'MultipleChoice') {
					var list1 = _n0.a.a;
					var list2 = _n0.b.a;
					return _Utils_eq(list1, list2);
				} else {
					break _n0$2;
				}
			}
		}
		return false;
	});
var elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var elm$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			elm$core$List$any,
			A2(elm$core$Basics$composeL, elm$core$Basics$not, isOkay),
			list);
	});
var author$project$Lia$Markdown$Quiz$Matrix$Types$comp = F2(
	function (quiz, state) {
		var list2 = elm$core$Array$toList(state);
		var list1 = A2(
			elm$core$List$map,
			author$project$Lia$Markdown$Quiz$Vector$Types$Quiz(_List_Nil),
			elm$core$Array$toList(quiz.solution));
		return A2(
			elm$core$List$all,
			elm$core$Basics$identity,
			A3(elm$core$List$map2, author$project$Lia$Markdown$Quiz$Vector$Types$comp, list1, list2));
	});
var author$project$Lia$Markdown$Quiz$Types$comp = F2(
	function (quiz, state) {
		return function () {
			var _n0 = _Utils_Tuple2(quiz, state);
			_n0$3:
			while (true) {
				switch (_n0.a.$) {
					case 'Block_Type':
						if (_n0.b.$ === 'Block_State') {
							var q = _n0.a.a;
							var s = _n0.b.a;
							return A2(author$project$Lia$Markdown$Quiz$Block$Types$comp, q, s);
						} else {
							break _n0$3;
						}
					case 'Vector_Type':
						if (_n0.b.$ === 'Vector_State') {
							var q = _n0.a.a;
							var s = _n0.b.a;
							return A2(author$project$Lia$Markdown$Quiz$Vector$Types$comp, q, s);
						} else {
							break _n0$3;
						}
					case 'Matrix_Type':
						if (_n0.b.$ === 'Matrix_State') {
							var q = _n0.a.a;
							var s = _n0.b.a;
							return A2(author$project$Lia$Markdown$Quiz$Matrix$Types$comp, q, s);
						} else {
							break _n0$3;
						}
					default:
						break _n0$3;
				}
			}
			return false;
		}() ? author$project$Lia$Markdown$Quiz$Types$Solved : author$project$Lia$Markdown$Quiz$Types$Open;
	});
var author$project$Lia$Markdown$Quiz$Update$check = F2(
	function (solution, e) {
		return _Utils_update(
			e,
			{
				solved: A2(author$project$Lia$Markdown$Quiz$Types$comp, solution, e.state),
				trial: e.trial + 1
			});
	});
var author$project$Lia$Markdown$Quiz$Update$evalEventDecoder = function (json) {
	var _eval = author$project$Port$Eval$decode(json);
	return _eval.ok ? ((_eval.result === 'true') ? function (e) {
		return _Utils_update(
			e,
			{error_msg: '', solved: author$project$Lia$Markdown$Quiz$Types$Solved, trial: e.trial + 1});
	} : function (e) {
		return _Utils_update(
			e,
			{error_msg: '', solved: author$project$Lia$Markdown$Quiz$Types$Open, trial: e.trial + 1});
	}) : function (e) {
		return _Utils_update(
			e,
			{error_msg: _eval.result});
	};
};
var author$project$Lia$Markdown$Quiz$Block$Update$update = F2(
	function (msg, state) {
		var _n0 = _Utils_Tuple2(msg, state);
		_n0$3:
		while (true) {
			if (_n0.b.$ === 'Select') {
				switch (_n0.a.$) {
					case 'Choose':
						var option = _n0.a.a;
						var _n1 = _n0.b;
						return A2(
							author$project$Lia$Markdown$Quiz$Block$Types$Select,
							false,
							_List_fromArray(
								[option]));
					case 'Toggle':
						var _n2 = _n0.a;
						var _n3 = _n0.b;
						var open = _n3.a;
						var id = _n3.b;
						return A2(author$project$Lia$Markdown$Quiz$Block$Types$Select, !open, id);
					default:
						break _n0$3;
				}
			} else {
				if (_n0.a.$ === 'Input') {
					var str = _n0.a.a;
					return author$project$Lia$Markdown$Quiz$Block$Types$Text(str);
				} else {
					break _n0$3;
				}
			}
		}
		return state;
	});
var author$project$Lia$Markdown$Quiz$Vector$Update$toggleSingle = F2(
	function (id, list) {
		if (!list.b) {
			return _List_Nil;
		} else {
			var xs = list.b;
			return A2(
				elm$core$List$cons,
				(!id) ? true : false,
				A2(author$project$Lia$Markdown$Quiz$Vector$Update$toggleSingle, id - 1, xs));
		}
	});
var author$project$Lia$Markdown$Quiz$Vector$Update$toggleMultiple = F2(
	function (id, list) {
		if (!list.b) {
			return _List_Nil;
		} else {
			var x = list.a;
			var xs = list.b;
			return A2(
				elm$core$List$cons,
				(!id) ? (!x) : x,
				A2(author$project$Lia$Markdown$Quiz$Vector$Update$toggleSingle, id - 1, xs));
		}
	});
var author$project$Lia$Markdown$Quiz$Vector$Update$toggle = F2(
	function (id, state) {
		if (state.$ === 'SingleChoice') {
			var list = state.a;
			return author$project$Lia$Markdown$Quiz$Vector$Types$SingleChoice(
				A2(author$project$Lia$Markdown$Quiz$Vector$Update$toggleSingle, id, list));
		} else {
			var list = state.a;
			return author$project$Lia$Markdown$Quiz$Vector$Types$MultipleChoice(
				A2(author$project$Lia$Markdown$Quiz$Vector$Update$toggleMultiple, id, list));
		}
	});
var author$project$Lia$Markdown$Quiz$Matrix$Update$update = F2(
	function (msg, state) {
		var row_id = msg.a;
		var column_id = msg.b;
		var _n1 = A2(
			elm$core$Maybe$map,
			author$project$Lia$Markdown$Quiz$Vector$Update$toggle(column_id),
			A2(elm$core$Array$get, row_id, state));
		if (_n1.$ === 'Just') {
			var row = _n1.a;
			return A3(elm$core$Array$set, row_id, row, state);
		} else {
			return state;
		}
	});
var author$project$Lia$Markdown$Quiz$Vector$Update$update = F2(
	function (msg, state) {
		var id = msg.a;
		return A2(author$project$Lia$Markdown$Quiz$Vector$Update$toggle, id, state);
	});
var author$project$Lia$Markdown$Quiz$Update$state_ = F2(
	function (msg, e) {
		return _Utils_update(
			e,
			{
				state: function () {
					var _n0 = _Utils_Tuple2(msg, e.state);
					_n0$3:
					while (true) {
						switch (_n0.a.$) {
							case 'Block_Update':
								if (_n0.b.$ === 'Block_State') {
									var _n1 = _n0.a;
									var m = _n1.b;
									var s = _n0.b.a;
									return author$project$Lia$Markdown$Quiz$Types$Block_State(
										A2(author$project$Lia$Markdown$Quiz$Block$Update$update, m, s));
								} else {
									break _n0$3;
								}
							case 'Vector_Update':
								if (_n0.b.$ === 'Vector_State') {
									var _n2 = _n0.a;
									var m = _n2.b;
									var s = _n0.b.a;
									return author$project$Lia$Markdown$Quiz$Types$Vector_State(
										A2(author$project$Lia$Markdown$Quiz$Vector$Update$update, m, s));
								} else {
									break _n0$3;
								}
							case 'Matrix_Update':
								if (_n0.b.$ === 'Matrix_State') {
									var _n3 = _n0.a;
									var m = _n3.b;
									var s = _n0.b.a;
									return author$project$Lia$Markdown$Quiz$Types$Matrix_State(
										A2(author$project$Lia$Markdown$Quiz$Matrix$Update$update, m, s));
								} else {
									break _n0$3;
								}
							default:
								break _n0$3;
						}
					}
					return e.state;
				}()
			});
	});
var author$project$Lia$Markdown$Quiz$Block$Json$encode = function (state) {
	return elm$json$Json$Encode$object(
		function () {
			if (state.$ === 'Text') {
				var x = state.a;
				return _List_fromArray(
					[
						_Utils_Tuple2(
						'Text',
						elm$json$Json$Encode$string(x))
					]);
			} else {
				if (state.b.b && (!state.b.b.b)) {
					var _n1 = state.b;
					var x = _n1.a;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Select',
							elm$json$Json$Encode$int(x))
						]);
				} else {
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Select',
							elm$json$Json$Encode$int(-1))
						]);
				}
			}
		}());
};
var author$project$Lia$Markdown$Quiz$Vector$Json$encode = function (state) {
	return elm$json$Json$Encode$object(
		function () {
			if (state.$ === 'SingleChoice') {
				var list = state.a;
				return _List_fromArray(
					[
						_Utils_Tuple2(
						'SingleChoice',
						A2(elm$json$Json$Encode$list, elm$json$Json$Encode$bool, list))
					]);
			} else {
				var list = state.a;
				return _List_fromArray(
					[
						_Utils_Tuple2(
						'MultipleChoice',
						A2(elm$json$Json$Encode$list, elm$json$Json$Encode$bool, list))
					]);
			}
		}());
};
var author$project$Lia$Markdown$Quiz$Matrix$Json$encode = function (state) {
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				author$project$Lia$Markdown$Quiz$Matrix$Json$uid,
				A2(elm$json$Json$Encode$array, author$project$Lia$Markdown$Quiz$Vector$Json$encode, state))
			]));
};
var author$project$Lia$Markdown$Quiz$Json$encState = function (state) {
	switch (state.$) {
		case 'Empty_State':
			return elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2('Empty', elm$json$Json$Encode$null)
					]));
		case 'Block_State':
			var s = state.a;
			return author$project$Lia$Markdown$Quiz$Block$Json$encode(s);
		case 'Vector_State':
			var s = state.a;
			return author$project$Lia$Markdown$Quiz$Vector$Json$encode(s);
		default:
			var s = state.a;
			return author$project$Lia$Markdown$Quiz$Matrix$Json$encode(s);
	}
};
var author$project$Lia$Markdown$Quiz$Json$encElement = function (element) {
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'solved',
				elm$json$Json$Encode$int(
					function () {
						var _n0 = element.solved;
						switch (_n0.$) {
							case 'Open':
								return 0;
							case 'Solved':
								return 1;
							default:
								return -1;
						}
					}())),
				_Utils_Tuple2(
				'state',
				author$project$Lia$Markdown$Quiz$Json$encState(element.state)),
				_Utils_Tuple2(
				'trial',
				elm$json$Json$Encode$int(element.trial)),
				_Utils_Tuple2(
				'hint',
				elm$json$Json$Encode$int(element.hint)),
				_Utils_Tuple2(
				'error_msg',
				elm$json$Json$Encode$string(element.error_msg))
			]));
};
var author$project$Lia$Markdown$Quiz$Json$encode = function (vector) {
	return A2(elm$json$Json$Encode$array, author$project$Lia$Markdown$Quiz$Json$encElement, vector);
};
var author$project$Lia$Markdown$Quiz$Update$store = function (vector) {
	return _Utils_Tuple2(
		vector,
		elm$core$List$singleton(
			author$project$Port$Event$store(
				author$project$Lia$Markdown$Quiz$Json$encode(vector))));
};
var author$project$Lia$Markdown$Quiz$Update$get = F2(
	function (idx, vector) {
		var _n0 = A2(elm$core$Array$get, idx, vector);
		if (_n0.$ === 'Just') {
			var elem = _n0.a;
			return (_Utils_eq(elem.solved, author$project$Lia$Markdown$Quiz$Types$Solved) || _Utils_eq(elem.solved, author$project$Lia$Markdown$Quiz$Types$ReSolved)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(elem);
		} else {
			return elm$core$Maybe$Nothing;
		}
	});
var author$project$Lia$Markdown$Quiz$Update$update_ = F3(
	function (idx, vector, f) {
		var _n0 = A2(author$project$Lia$Markdown$Quiz$Update$get, idx, vector);
		if (_n0.$ === 'Just') {
			var elem = _n0.a;
			return A3(
				elm$core$Array$set,
				idx,
				f(elem),
				vector);
		} else {
			return vector;
		}
	});
var elm$core$Result$withDefault = F2(
	function (def, result) {
		if (result.$ === 'Ok') {
			var a = result.a;
			return a;
		} else {
			return def;
		}
	});
var author$project$Lia$Markdown$Quiz$Update$update = F2(
	function (msg, vector) {
		switch (msg.$) {
			case 'Block_Update':
				var id = msg.a;
				return _Utils_Tuple2(
					A3(
						author$project$Lia$Markdown$Quiz$Update$update_,
						id,
						vector,
						author$project$Lia$Markdown$Quiz$Update$state_(msg)),
					_List_Nil);
			case 'Vector_Update':
				var id = msg.a;
				return _Utils_Tuple2(
					A3(
						author$project$Lia$Markdown$Quiz$Update$update_,
						id,
						vector,
						author$project$Lia$Markdown$Quiz$Update$state_(msg)),
					_List_Nil);
			case 'Matrix_Update':
				var id = msg.a;
				return _Utils_Tuple2(
					A3(
						author$project$Lia$Markdown$Quiz$Update$update_,
						id,
						vector,
						author$project$Lia$Markdown$Quiz$Update$state_(msg)),
					_List_Nil);
			case 'Check':
				if (msg.c.$ === 'Nothing') {
					var id = msg.a;
					var solution = msg.b;
					var _n1 = msg.c;
					return author$project$Lia$Markdown$Quiz$Update$store(
						A3(
							author$project$Lia$Markdown$Quiz$Update$update_,
							id,
							vector,
							author$project$Lia$Markdown$Quiz$Update$check(solution)));
				} else {
					var idx = msg.a;
					var code = msg.c.a;
					var state = function () {
						var _n2 = A2(
							elm$core$Maybe$map,
							function ($) {
								return $.state;
							},
							A2(elm$core$Array$get, idx, vector));
						_n2$3:
						while (true) {
							if (_n2.$ === 'Just') {
								switch (_n2.a.$) {
									case 'Block_State':
										var b = _n2.a.a;
										return author$project$Lia$Markdown$Quiz$Block$Update$toString(b);
									case 'Vector_State':
										var s = _n2.a.a;
										return author$project$Lia$Markdown$Quiz$Vector$Update$toString(s);
									case 'Matrix_State':
										var m = _n2.a.a;
										return author$project$Lia$Markdown$Quiz$Matrix$Update$toString(m);
									default:
										break _n2$3;
								}
							} else {
								break _n2$3;
							}
						}
						return '';
					}();
					return _Utils_Tuple2(
						vector,
						_List_fromArray(
							[
								A3(
								author$project$Port$Eval$event,
								idx,
								code,
								_List_fromArray(
									[state]))
							]));
				}
			case 'ShowHint':
				var idx = msg.a;
				return author$project$Lia$Markdown$Quiz$Update$store(
					A3(
						author$project$Lia$Markdown$Quiz$Update$update_,
						idx,
						vector,
						function (e) {
							return _Utils_update(
								e,
								{hint: e.hint + 1});
						}));
			case 'ShowSolution':
				var idx = msg.a;
				var solution = msg.b;
				return author$project$Lia$Markdown$Quiz$Update$store(
					A3(
						author$project$Lia$Markdown$Quiz$Update$update_,
						idx,
						vector,
						function (e) {
							return _Utils_update(
								e,
								{
									error_msg: '',
									solved: author$project$Lia$Markdown$Quiz$Types$ReSolved,
									state: author$project$Lia$Markdown$Quiz$Types$toState(solution)
								});
						}));
			default:
				var event = msg.a;
				var _n3 = event.topic;
				switch (_n3) {
					case 'eval':
						return author$project$Lia$Markdown$Quiz$Update$store(
							A3(
								author$project$Lia$Markdown$Quiz$Update$update_,
								event.section,
								vector,
								author$project$Lia$Markdown$Quiz$Update$evalEventDecoder(event.message)));
					case 'restore':
						return _Utils_Tuple2(
							A2(
								elm$core$Result$withDefault,
								vector,
								author$project$Lia$Markdown$Quiz$Json$decode(event.message)),
							_List_Nil);
					default:
						return _Utils_Tuple2(vector, _List_Nil);
				}
		}
	});
var author$project$Lia$Markdown$Survey$Json$dict2json = function (dict) {
	return elm$json$Json$Encode$object(
		A2(
			elm$core$List$map,
			function (_n0) {
				var s = _n0.a;
				var b = _n0.b;
				return _Utils_Tuple2(
					s,
					elm$json$Json$Encode$bool(b));
			},
			elm$core$Dict$toList(dict)));
};
var author$project$Lia$Markdown$Survey$Json$fromState = function (state) {
	return elm$json$Json$Encode$object(
		function () {
			switch (state.$) {
				case 'Text_State':
					var str = state.a;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Text',
							elm$json$Json$Encode$string(str))
						]);
				case 'Select_State':
					var i = state.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Select',
							elm$json$Json$Encode$int(i))
						]);
				case 'Vector_State':
					var single = state.a;
					var vector = state.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							single ? 'SingleChoice' : 'MultipleChoice',
							author$project$Lia$Markdown$Survey$Json$dict2json(vector))
						]);
				default:
					var single = state.a;
					var matrix = state.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							single ? 'SingleChoiceMatrix' : 'MultipleChoiceMatrix',
							A2(elm$json$Json$Encode$array, author$project$Lia$Markdown$Survey$Json$dict2json, matrix))
						]);
			}
		}());
};
var author$project$Lia$Markdown$Survey$Json$fromElement = function (_n0) {
	var b = _n0.a;
	var state = _n0.b;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'submitted',
				elm$json$Json$Encode$bool(b)),
				_Utils_Tuple2(
				'state',
				author$project$Lia$Markdown$Survey$Json$fromState(state))
			]));
};
var author$project$Lia$Markdown$Survey$Json$fromVector = function (vector) {
	return A2(elm$json$Json$Encode$array, author$project$Lia$Markdown$Survey$Json$fromElement, vector);
};
var author$project$Lia$Markdown$Survey$Types$Matrix_State = F2(
	function (a, b) {
		return {$: 'Matrix_State', a: a, b: b};
	});
var author$project$Lia$Markdown$Survey$Types$Select_State = F2(
	function (a, b) {
		return {$: 'Select_State', a: a, b: b};
	});
var author$project$Lia$Markdown$Survey$Types$Text_State = function (a) {
	return {$: 'Text_State', a: a};
};
var author$project$Lia$Markdown$Survey$Types$Vector_State = F2(
	function (a, b) {
		return {$: 'Vector_State', a: a, b: b};
	});
var author$project$Lia$Markdown$Survey$Json$toState = elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			elm$json$Json$Decode$map,
			author$project$Lia$Markdown$Survey$Types$Text_State,
			A2(elm$json$Json$Decode$field, 'Text', elm$json$Json$Decode$string)),
			A2(
			elm$json$Json$Decode$map,
			author$project$Lia$Markdown$Survey$Types$Select_State(false),
			A2(elm$json$Json$Decode$field, 'Select', elm$json$Json$Decode$int)),
			A2(
			elm$json$Json$Decode$map,
			author$project$Lia$Markdown$Survey$Types$Vector_State(true),
			A2(
				elm$json$Json$Decode$field,
				'SingleChoice',
				elm$json$Json$Decode$dict(elm$json$Json$Decode$bool))),
			A2(
			elm$json$Json$Decode$map,
			author$project$Lia$Markdown$Survey$Types$Vector_State(false),
			A2(
				elm$json$Json$Decode$field,
				'MultipleChoice',
				elm$json$Json$Decode$dict(elm$json$Json$Decode$bool))),
			A2(
			elm$json$Json$Decode$map,
			author$project$Lia$Markdown$Survey$Types$Matrix_State(false),
			A2(
				elm$json$Json$Decode$field,
				'SingleChoiceMatrix',
				elm$json$Json$Decode$array(
					elm$json$Json$Decode$dict(elm$json$Json$Decode$bool)))),
			A2(
			elm$json$Json$Decode$map,
			author$project$Lia$Markdown$Survey$Types$Matrix_State(true),
			A2(
				elm$json$Json$Decode$field,
				'MultipleChoiceMatrix',
				elm$json$Json$Decode$array(
					elm$json$Json$Decode$dict(elm$json$Json$Decode$bool))))
		]));
var author$project$Lia$Markdown$Survey$Json$toElement = A3(
	elm$json$Json$Decode$map2,
	elm$core$Tuple$pair,
	A2(elm$json$Json$Decode$field, 'submitted', elm$json$Json$Decode$bool),
	A2(elm$json$Json$Decode$field, 'state', author$project$Lia$Markdown$Survey$Json$toState));
var author$project$Lia$Markdown$Survey$Json$toVector = function (json) {
	return A2(
		elm$json$Json$Decode$decodeValue,
		elm$json$Json$Decode$array(author$project$Lia$Markdown$Survey$Json$toElement),
		json);
};
var author$project$Lia$Markdown$Survey$Types$key_value_string = function (_n0) {
	var key = _n0.a;
	var value = _n0.b;
	return '\"' + (key + ('\": ' + (value ? '1' : '0')));
};
var author$project$Lia$Markdown$Survey$Types$toString = function (state) {
	switch (state.$) {
		case 'Text_State':
			var str = state.a;
			return str;
		case 'Select_State':
			var i = state.b;
			return elm$core$String$fromInt(i);
		case 'Vector_State':
			var dict = state.b;
			return '{' + (elm$core$String$concat(
				A2(
					elm$core$List$intersperse,
					', ',
					A2(
						elm$core$List$map,
						author$project$Lia$Markdown$Survey$Types$key_value_string,
						elm$core$Dict$toList(dict)))) + '}');
		default:
			var array = state.b;
			return '[' + (elm$core$String$concat(
				A2(
					elm$core$List$intersperse,
					',\n',
					A2(
						elm$core$List$map,
						A2(
							elm$core$Basics$composeR,
							author$project$Lia$Markdown$Survey$Types$Vector_State(false),
							author$project$Lia$Markdown$Survey$Types$toString),
						elm$core$Array$toList(array)))) + ']');
	}
};
var author$project$Lia$Markdown$Survey$Update$Submit = F2(
	function (a, b) {
		return {$: 'Submit', a: a, b: b};
	});
var author$project$Lia$Markdown$Survey$Update$submit = F2(
	function (vector, idx) {
		var _n0 = A2(elm$core$Array$get, idx, vector);
		if ((_n0.$ === 'Just') && (!_n0.a.a)) {
			var _n1 = _n0.a;
			var state = _n1.b;
			return A3(
				elm$core$Array$set,
				idx,
				_Utils_Tuple2(true, state),
				vector);
		} else {
			return vector;
		}
	});
var elm$core$Dict$values = function (dict) {
	return A3(
		elm$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return A2(elm$core$List$cons, value, valueList);
			}),
		_List_Nil,
		dict);
};
var author$project$Lia$Markdown$Survey$Update$submitable = F2(
	function (vector, idx) {
		var _n0 = A2(elm$core$Array$get, idx, vector);
		if ((_n0.$ === 'Just') && (!_n0.a.a)) {
			switch (_n0.a.b.$) {
				case 'Text_State':
					var _n1 = _n0.a;
					var state = _n1.b.a;
					return state !== '';
				case 'Select_State':
					var _n2 = _n0.a;
					var _n3 = _n2.b;
					var state = _n3.b;
					return !_Utils_eq(state, -1);
				case 'Vector_State':
					var _n4 = _n0.a;
					var _n5 = _n4.b;
					var state = _n5.b;
					return function (s) {
						return s > 0;
					}(
						elm$core$List$length(
							A2(
								elm$core$List$filter,
								function (a) {
									return a;
								},
								elm$core$Dict$values(state))));
				default:
					var _n6 = _n0.a;
					var _n7 = _n6.b;
					var state = _n7.b;
					return A2(
						elm$core$List$all,
						function (a) {
							return elm$core$List$length(a) > 0;
						},
						A2(
							elm$core$List$map,
							function (l) {
								return A2(
									elm$core$List$filter,
									function (a) {
										return a;
									},
									l);
							},
							A2(
								elm$core$List$map,
								elm$core$Dict$values,
								elm$core$Array$toList(state))));
			}
		} else {
			return false;
		}
	});
var author$project$Lia$Markdown$Survey$Update$set_state = F3(
	function (vector, idx, state) {
		return A3(
			elm$core$Array$set,
			idx,
			_Utils_Tuple2(false, state),
			vector);
	});
var elm$core$Dict$map = F2(
	function (func, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			return A5(
				elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				A2(func, key, value),
				A2(elm$core$Dict$map, func, left),
				A2(elm$core$Dict$map, func, right));
		}
	});
var author$project$Lia$Markdown$Survey$Update$update_matrix = F4(
	function (vector, col_id, row_id, _var) {
		var _n0 = A2(elm$core$Array$get, col_id, vector);
		if (((_n0.$ === 'Just') && (!_n0.a.a)) && (_n0.a.b.$ === 'Matrix_State')) {
			if (!_n0.a.b.a) {
				var _n1 = _n0.a;
				var _n2 = _n1.b;
				var matrix = _n2.b;
				var row = A2(elm$core$Array$get, row_id, matrix);
				return A3(
					author$project$Lia$Markdown$Survey$Update$set_state,
					vector,
					col_id,
					A2(
						author$project$Lia$Markdown$Survey$Types$Matrix_State,
						false,
						A2(
							elm$core$Maybe$withDefault,
							matrix,
							A2(
								elm$core$Maybe$map,
								function (d) {
									return A3(elm$core$Array$set, row_id, d, matrix);
								},
								A2(
									elm$core$Maybe$map,
									function (d) {
										return A3(
											elm$core$Dict$update,
											_var,
											function (_n5) {
												return elm$core$Maybe$Just(true);
											},
											d);
									},
									A2(
										elm$core$Maybe$map,
										function (d) {
											return A2(
												elm$core$Dict$map,
												F2(
													function (_n3, _n4) {
														return false;
													}),
												d);
										},
										row))))));
			} else {
				var _n6 = _n0.a;
				var _n7 = _n6.b;
				var matrix = _n7.b;
				var row = A2(elm$core$Array$get, row_id, matrix);
				return A3(
					author$project$Lia$Markdown$Survey$Update$set_state,
					vector,
					col_id,
					A2(
						author$project$Lia$Markdown$Survey$Types$Matrix_State,
						true,
						A2(
							elm$core$Maybe$withDefault,
							matrix,
							A2(
								elm$core$Maybe$map,
								function (d) {
									return A3(elm$core$Array$set, row_id, d, matrix);
								},
								A2(
									elm$core$Maybe$map,
									function (d) {
										return A3(
											elm$core$Dict$update,
											_var,
											function (b) {
												return A2(elm$core$Maybe$map, elm$core$Basics$not, b);
											},
											d);
									},
									row)))));
			}
		} else {
			return vector;
		}
	});
var author$project$Lia$Markdown$Survey$Update$update_select = F3(
	function (vector, id, value) {
		var _n0 = A2(elm$core$Array$get, id, vector);
		if (((_n0.$ === 'Just') && (!_n0.a.a)) && (_n0.a.b.$ === 'Select_State')) {
			var _n1 = _n0.a;
			var _n2 = _n1.b;
			return A3(
				author$project$Lia$Markdown$Survey$Update$set_state,
				vector,
				id,
				A2(author$project$Lia$Markdown$Survey$Types$Select_State, false, value));
		} else {
			return vector;
		}
	});
var author$project$Lia$Markdown$Survey$Update$update_select_chose = F2(
	function (vector, id) {
		var _n0 = A2(elm$core$Array$get, id, vector);
		if (((_n0.$ === 'Just') && (!_n0.a.a)) && (_n0.a.b.$ === 'Select_State')) {
			var _n1 = _n0.a;
			var _n2 = _n1.b;
			var b = _n2.a;
			var value = _n2.b;
			return A3(
				author$project$Lia$Markdown$Survey$Update$set_state,
				vector,
				id,
				A2(author$project$Lia$Markdown$Survey$Types$Select_State, !b, value));
		} else {
			return vector;
		}
	});
var author$project$Lia$Markdown$Survey$Update$update_text = F3(
	function (vector, idx, str) {
		var _n0 = A2(elm$core$Array$get, idx, vector);
		if (((_n0.$ === 'Just') && (!_n0.a.a)) && (_n0.a.b.$ === 'Text_State')) {
			var _n1 = _n0.a;
			return A3(
				author$project$Lia$Markdown$Survey$Update$set_state,
				vector,
				idx,
				author$project$Lia$Markdown$Survey$Types$Text_State(str));
		} else {
			return vector;
		}
	});
var author$project$Lia$Markdown$Survey$Update$update_vector = F3(
	function (vector, idx, _var) {
		var _n0 = A2(elm$core$Array$get, idx, vector);
		if (((_n0.$ === 'Just') && (!_n0.a.a)) && (_n0.a.b.$ === 'Vector_State')) {
			if (!_n0.a.b.a) {
				var _n1 = _n0.a;
				var _n2 = _n1.b;
				var element = _n2.b;
				return A3(
					author$project$Lia$Markdown$Survey$Update$set_state,
					vector,
					idx,
					A2(
						author$project$Lia$Markdown$Survey$Types$Vector_State,
						false,
						A3(
							elm$core$Dict$update,
							_var,
							function (_n5) {
								return elm$core$Maybe$Just(true);
							},
							A2(
								elm$core$Dict$map,
								F2(
									function (_n3, _n4) {
										return false;
									}),
								element))));
			} else {
				var _n6 = _n0.a;
				var _n7 = _n6.b;
				var element = _n7.b;
				return A3(
					author$project$Lia$Markdown$Survey$Update$set_state,
					vector,
					idx,
					A2(
						author$project$Lia$Markdown$Survey$Types$Vector_State,
						true,
						A3(
							elm$core$Dict$update,
							_var,
							function (b) {
								return A2(elm$core$Maybe$map, elm$core$Basics$not, b);
							},
							element)));
			}
		} else {
			return vector;
		}
	});
var author$project$Lia$Markdown$Survey$Update$update = F2(
	function (msg, vector) {
		update:
		while (true) {
			switch (msg.$) {
				case 'TextUpdate':
					var idx = msg.a;
					var str = msg.b;
					return _Utils_Tuple2(
						A3(author$project$Lia$Markdown$Survey$Update$update_text, vector, idx, str),
						_List_Nil);
				case 'SelectUpdate':
					var id = msg.a;
					var value = msg.b;
					return _Utils_Tuple2(
						A3(author$project$Lia$Markdown$Survey$Update$update_select, vector, id, value),
						_List_Nil);
				case 'SelectChose':
					var id = msg.a;
					return _Utils_Tuple2(
						A2(author$project$Lia$Markdown$Survey$Update$update_select_chose, vector, id),
						_List_Nil);
				case 'VectorUpdate':
					var idx = msg.a;
					var _var = msg.b;
					return _Utils_Tuple2(
						A3(author$project$Lia$Markdown$Survey$Update$update_vector, vector, idx, _var),
						_List_Nil);
				case 'MatrixUpdate':
					var idx = msg.a;
					var row = msg.b;
					var _var = msg.c;
					return _Utils_Tuple2(
						A4(author$project$Lia$Markdown$Survey$Update$update_matrix, vector, idx, row, _var),
						_List_Nil);
				case 'Submit':
					if (msg.b.$ === 'Nothing') {
						var id = msg.a;
						var _n1 = msg.b;
						if (A2(author$project$Lia$Markdown$Survey$Update$submitable, vector, id)) {
							var new_vector = A2(author$project$Lia$Markdown$Survey$Update$submit, vector, id);
							return _Utils_Tuple2(
								new_vector,
								elm$core$List$singleton(
									author$project$Port$Event$store(
										author$project$Lia$Markdown$Survey$Json$fromVector(new_vector))));
						} else {
							return _Utils_Tuple2(vector, _List_Nil);
						}
					} else {
						var id = msg.a;
						var code = msg.b.a;
						var _n2 = A2(elm$core$Array$get, id, vector);
						if ((_n2.$ === 'Just') && (!_n2.a.a)) {
							var _n3 = _n2.a;
							var state = _n3.b;
							return _Utils_Tuple2(
								vector,
								_List_fromArray(
									[
										A3(
										author$project$Port$Eval$event,
										id,
										code,
										_List_fromArray(
											[
												author$project$Lia$Markdown$Survey$Types$toString(state)
											]))
									]));
						} else {
							return _Utils_Tuple2(vector, _List_Nil);
						}
					}
				default:
					var event = msg.a;
					var _n4 = event.topic;
					switch (_n4) {
						case 'eval':
							if ('true' === author$project$Port$Eval$decode(event.message).result) {
								var $temp$msg = A2(author$project$Lia$Markdown$Survey$Update$Submit, event.section, elm$core$Maybe$Nothing),
									$temp$vector = vector;
								msg = $temp$msg;
								vector = $temp$vector;
								continue update;
							} else {
								return _Utils_Tuple2(vector, _List_Nil);
							}
						case 'restore':
							return _Utils_Tuple2(
								A2(
									elm$core$Result$withDefault,
									vector,
									author$project$Lia$Markdown$Survey$Json$toVector(event.message)),
								_List_Nil);
						default:
							return _Utils_Tuple2(vector, _List_Nil);
					}
			}
		}
	});
var author$project$Lia$Markdown$Update$UpdateEffect = F2(
	function (a, b) {
		return {$: 'UpdateEffect', a: a, b: b};
	});
var author$project$Lia$Markdown$Update$send = F2(
	function (name, values) {
		return A2(
			elm$core$List$map,
			elm$core$Tuple$pair(name),
			values);
	});
var elm$core$Platform$Cmd$map = _Platform_map;
var author$project$Lia$Markdown$Update$update = F2(
	function (msg, section) {
		switch (msg.$) {
			case 'UpdateEffect':
				var sound = msg.a;
				var childMsg = msg.b;
				var _n1 = A3(author$project$Lia$Markdown$Effect$Update$update, sound, childMsg, section.effect_model);
				var effect_model = _n1.a;
				var cmd = _n1.b;
				var event = _n1.c;
				return _Utils_Tuple3(
					_Utils_update(
						section,
						{effect_model: effect_model}),
					A2(
						elm$core$Platform$Cmd$map,
						author$project$Lia$Markdown$Update$UpdateEffect(sound),
						cmd),
					A2(
						author$project$Lia$Markdown$Update$send,
						'effect',
						A2(elm$core$List$map, author$project$Port$Event$encode, event)));
			case 'UpdateCode':
				var childMsg = msg.a;
				var _n2 = A2(author$project$Lia$Markdown$Code$Update$update, childMsg, section.code_vector);
				if (!_n2.b.b) {
					var vector = _n2.a;
					return _Utils_Tuple3(
						_Utils_update(
							section,
							{code_vector: vector}),
						elm$core$Platform$Cmd$none,
						_List_Nil);
				} else {
					var vector = _n2.a;
					var events = _n2.b;
					return _Utils_Tuple3(
						_Utils_update(
							section,
							{code_vector: vector}),
						elm$core$Platform$Cmd$none,
						A2(
							author$project$Lia$Markdown$Update$send,
							'code',
							A2(elm$core$List$map, author$project$Port$Event$encode, events)));
				}
			case 'UpdateQuiz':
				var childMsg = msg.a;
				var _n3 = A2(author$project$Lia$Markdown$Quiz$Update$update, childMsg, section.quiz_vector);
				var vector = _n3.a;
				var event = _n3.b;
				return _Utils_Tuple3(
					_Utils_update(
						section,
						{quiz_vector: vector}),
					elm$core$Platform$Cmd$none,
					A2(
						author$project$Lia$Markdown$Update$send,
						'quiz',
						A2(elm$core$List$map, author$project$Port$Event$encode, event)));
			case 'UpdateSurvey':
				var childMsg = msg.a;
				var _n4 = A2(author$project$Lia$Markdown$Survey$Update$update, childMsg, section.survey_vector);
				var vector = _n4.a;
				var event = _n4.b;
				return _Utils_Tuple3(
					_Utils_update(
						section,
						{survey_vector: vector}),
					elm$core$Platform$Cmd$none,
					A2(
						author$project$Lia$Markdown$Update$send,
						'survey',
						A2(elm$core$List$map, author$project$Port$Event$encode, event)));
			case 'FootnoteShow':
				var key = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						section,
						{
							footnote2show: elm$core$Maybe$Just(key)
						}),
					elm$core$Platform$Cmd$none,
					_List_Nil);
			default:
				return _Utils_Tuple3(
					_Utils_update(
						section,
						{footnote2show: elm$core$Maybe$Nothing}),
					elm$core$Platform$Cmd$none,
					_List_Nil);
		}
	});
var author$project$Lia$Markdown$Update$handle = F3(
	function (topic, event, section) {
		switch (topic) {
			case 'code':
				return A2(
					author$project$Lia$Markdown$Update$update,
					author$project$Lia$Markdown$Update$UpdateCode(
						author$project$Lia$Markdown$Code$Update$handle(event)),
					section);
			case 'quiz':
				return A2(
					author$project$Lia$Markdown$Update$update,
					author$project$Lia$Markdown$Update$UpdateQuiz(
						author$project$Lia$Markdown$Quiz$Update$handle(event)),
					section);
			case 'survey':
				return A2(
					author$project$Lia$Markdown$Update$update,
					author$project$Lia$Markdown$Update$UpdateSurvey(
						author$project$Lia$Markdown$Survey$Update$handle(event)),
					section);
			default:
				return _Utils_Tuple3(section, elm$core$Platform$Cmd$none, _List_Nil);
		}
	});
var author$project$Lia$Markdown$Effect$Update$Init = function (a) {
	return {$: 'Init', a: a};
};
var author$project$Lia$Markdown$Effect$Update$init = function (run_all_javascript) {
	return author$project$Lia$Markdown$Effect$Update$Init(run_all_javascript);
};
var author$project$Lia$Markdown$Update$initEffect = F2(
	function (run_all_javascript, sound) {
		return author$project$Lia$Markdown$Update$update(
			A2(
				author$project$Lia$Markdown$Update$UpdateEffect,
				sound,
				author$project$Lia$Markdown$Effect$Update$init(run_all_javascript)));
	});
var author$project$Lia$Markdown$Effect$Update$Next = {$: 'Next'};
var author$project$Lia$Markdown$Effect$Update$next = author$project$Lia$Markdown$Effect$Update$Next;
var author$project$Lia$Markdown$Update$nextEffect = function (sound) {
	return author$project$Lia$Markdown$Update$update(
		A2(author$project$Lia$Markdown$Update$UpdateEffect, sound, author$project$Lia$Markdown$Effect$Update$next));
};
var author$project$Lia$Markdown$Effect$Update$Previous = {$: 'Previous'};
var author$project$Lia$Markdown$Effect$Update$previous = author$project$Lia$Markdown$Effect$Update$Previous;
var author$project$Lia$Markdown$Update$previousEffect = function (sound) {
	return author$project$Lia$Markdown$Update$update(
		A2(author$project$Lia$Markdown$Update$UpdateEffect, sound, author$project$Lia$Markdown$Effect$Update$previous));
};
var author$project$Lia$Settings$Update$Handle = function (a) {
	return {$: 'Handle', a: a};
};
var author$project$Lia$Settings$Update$handle = author$project$Lia$Settings$Update$Handle;
var author$project$Lia$Settings$Model$Presentation = {$: 'Presentation'};
var author$project$Lia$Settings$Json$settings = F9(
	function (model, toc, mode, theme, light, editor, font_size, sound, lang) {
		return _Utils_update(
			model,
			{editor: editor, font_size: font_size, lang: lang, light: light, mode: mode, sound: sound, table_of_contents: toc, theme: theme});
	});
var elm$json$Json$Decode$fail = _Json_fail;
var author$project$Lia$Settings$Json$toMode = function (str) {
	switch (str) {
		case 'Textbook':
			return elm$json$Json$Decode$succeed(author$project$Lia$Settings$Model$Textbook);
		case 'Presentation':
			return elm$json$Json$Decode$succeed(author$project$Lia$Settings$Model$Presentation);
		case 'Slides':
			return elm$json$Json$Decode$succeed(author$project$Lia$Settings$Model$Slides);
		default:
			return elm$json$Json$Decode$fail('unknown presentation mode');
	}
};
var elm$json$Json$Decode$map8 = _Json_map8;
var author$project$Lia$Settings$Json$toModel = F2(
	function (model, json) {
		return A2(
			elm$json$Json$Decode$decodeValue,
			A9(
				elm$json$Json$Decode$map8,
				author$project$Lia$Settings$Json$settings(model),
				A2(elm$json$Json$Decode$field, 'table_of_contents', elm$json$Json$Decode$bool),
				A2(
					elm$json$Json$Decode$andThen,
					author$project$Lia$Settings$Json$toMode,
					A2(elm$json$Json$Decode$field, 'mode', elm$json$Json$Decode$string)),
				A2(elm$json$Json$Decode$field, 'theme', elm$json$Json$Decode$string),
				A2(elm$json$Json$Decode$field, 'light', elm$json$Json$Decode$bool),
				A2(elm$json$Json$Decode$field, 'editor', elm$json$Json$Decode$string),
				A2(elm$json$Json$Decode$field, 'font_size', elm$json$Json$Decode$int),
				A2(elm$json$Json$Decode$field, 'sound', elm$json$Json$Decode$bool),
				A2(elm$json$Json$Decode$field, 'lang', elm$json$Json$Decode$string)),
			json);
	});
var author$project$Lia$Settings$Update$load = F2(
	function (model, json) {
		return A2(
			elm$core$Result$withDefault,
			model,
			A2(author$project$Lia$Settings$Json$toModel, model, json));
	});
var author$project$Lia$Settings$Json$fromMode = function (mode) {
	return elm$json$Json$Encode$string(
		function () {
			switch (mode.$) {
				case 'Textbook':
					return 'Textbook';
				case 'Presentation':
					return 'Presentation';
				default:
					return 'Slides';
			}
		}());
};
var author$project$Lia$Settings$Json$fromModel = function (model) {
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'table_of_contents',
				elm$json$Json$Encode$bool(model.table_of_contents)),
				_Utils_Tuple2(
				'mode',
				author$project$Lia$Settings$Json$fromMode(model.mode)),
				_Utils_Tuple2(
				'theme',
				elm$json$Json$Encode$string(model.theme)),
				_Utils_Tuple2(
				'light',
				elm$json$Json$Encode$bool(model.light)),
				_Utils_Tuple2(
				'editor',
				elm$json$Json$Encode$string(model.editor)),
				_Utils_Tuple2(
				'font_size',
				elm$json$Json$Encode$int(model.font_size)),
				_Utils_Tuple2(
				'sound',
				elm$json$Json$Encode$bool(model.sound)),
				_Utils_Tuple2(
				'lang',
				elm$json$Json$Encode$string(model.lang))
			]));
};
var author$project$Lia$Settings$Update$log = function (model) {
	return _Utils_Tuple2(
		model,
		_List_fromArray(
			[
				A3(
				author$project$Port$Event$Event,
				'settings',
				-1,
				author$project$Lia$Settings$Json$fromModel(model))
			]));
};
var author$project$Lia$Settings$Update$no_log = function (model) {
	return _Utils_Tuple2(model, _List_Nil);
};
var author$project$Lia$Settings$Update$toggle = F2(
	function (toggle_button, buttons) {
		var new_buttons = author$project$Lia$Settings$Model$init_buttons;
		switch (toggle_button.$) {
			case 'Settings':
				return _Utils_update(
					new_buttons,
					{settings: !buttons.settings});
			case 'Translations':
				return _Utils_update(
					new_buttons,
					{translations: !buttons.translations});
			case 'Informations':
				return _Utils_update(
					new_buttons,
					{informations: !buttons.informations});
			default:
				return _Utils_update(
					new_buttons,
					{share: !buttons.share});
		}
	});
var author$project$Port$TTS$Start = {$: 'Start'};
var author$project$Port$TTS$Error = function (a) {
	return {$: 'Error', a: a};
};
var author$project$Port$TTS$Stop = {$: 'Stop'};
var author$project$Port$TTS$decode = function (json) {
	var _n0 = A2(elm$json$Json$Decode$decodeValue, elm$json$Json$Decode$string, json);
	if (_n0.$ === 'Ok') {
		switch (_n0.a) {
			case 'start':
				return author$project$Port$TTS$Start;
			case 'stop':
				return author$project$Port$TTS$Stop;
			default:
				var msg = _n0.a;
				return author$project$Port$TTS$Error(msg);
		}
	} else {
		var msg = _n0.a;
		return author$project$Port$TTS$Error(
			elm$json$Json$Decode$errorToString(msg));
	}
};
var author$project$Port$TTS$event = function (on) {
	return A3(
		author$project$Port$Event$Event,
		'effect',
		-1,
		author$project$Port$Event$encode(
			A3(
				author$project$Port$Event$Event,
				'speak',
				-1,
				elm$json$Json$Encode$string(
					on ? 'repeat' : 'cancel'))));
};
var author$project$Lia$Settings$Update$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'Handle':
				var event = msg.a;
				return author$project$Lia$Settings$Update$no_log(
					function () {
						var _n1 = event.topic;
						switch (_n1) {
							case 'init':
								return A2(
									author$project$Lia$Settings$Update$load,
									_Utils_update(
										model,
										{initialized: true}),
									event.message);
							case 'speak':
								return _Utils_update(
									model,
									{
										speaking: _Utils_eq(
											author$project$Port$TTS$decode(event.message),
											author$project$Port$TTS$Start)
									});
							default:
								return model;
						}
					}());
			case 'Toggle':
				switch (msg.a.$) {
					case 'TableOfContents':
						var _n2 = msg.a;
						return author$project$Lia$Settings$Update$log(
							_Utils_update(
								model,
								{buttons: author$project$Lia$Settings$Model$init_buttons, table_of_contents: !model.table_of_contents}));
					case 'Sound':
						var _n3 = msg.a;
						var _n4 = author$project$Lia$Settings$Update$log(
							_Utils_update(
								model,
								{sound: !model.sound}));
						var new_model = _n4.a;
						var events = _n4.b;
						return _Utils_Tuple2(
							new_model,
							A2(
								elm$core$List$cons,
								author$project$Port$TTS$event(new_model.sound),
								events));
					case 'Light':
						var _n5 = msg.a;
						return author$project$Lia$Settings$Update$log(
							_Utils_update(
								model,
								{light: !model.light}));
					default:
						var button = msg.a.a;
						return author$project$Lia$Settings$Update$no_log(
							_Utils_update(
								model,
								{
									buttons: A2(author$project$Lia$Settings$Update$toggle, button, model.buttons)
								}));
				}
			case 'SwitchMode':
				var _n6 = model.mode;
				switch (_n6.$) {
					case 'Presentation':
						return author$project$Lia$Settings$Update$log(
							_Utils_update(
								model,
								{mode: author$project$Lia$Settings$Model$Slides}));
					case 'Slides':
						var _n7 = author$project$Lia$Settings$Update$log(
							_Utils_update(
								model,
								{mode: author$project$Lia$Settings$Model$Textbook, sound: false}));
						var new_model = _n7.a;
						var events = _n7.b;
						return _Utils_Tuple2(
							new_model,
							A2(
								elm$core$List$cons,
								author$project$Port$TTS$event(new_model.sound),
								events));
					default:
						var _n8 = author$project$Lia$Settings$Update$log(
							_Utils_update(
								model,
								{mode: author$project$Lia$Settings$Model$Presentation, sound: true}));
						var new_model = _n8.a;
						var events = _n8.b;
						return _Utils_Tuple2(
							new_model,
							A2(
								elm$core$List$cons,
								author$project$Port$TTS$event(new_model.sound),
								events));
				}
			case 'ChangeTheme':
				var theme = msg.a;
				return author$project$Lia$Settings$Update$log(
					_Utils_update(
						model,
						{theme: theme}));
			case 'ChangeEditor':
				var theme = msg.a;
				return author$project$Lia$Settings$Update$log(
					_Utils_update(
						model,
						{editor: theme}));
			case 'ChangeFontSize':
				var inc = msg.a;
				return author$project$Lia$Settings$Update$log(
					_Utils_update(
						model,
						{
							font_size: inc ? (model.font_size + 10) : ((model.font_size <= 10) ? model.font_size : (model.font_size - 10))
						}));
			case 'ChangeLang':
				var lang = msg.a;
				return author$project$Lia$Settings$Update$log(
					_Utils_update(
						model,
						{lang: lang}));
			default:
				return _Utils_Tuple2(
					model,
					_List_fromArray(
						[
							A3(author$project$Port$Event$Event, 'reset', -1, elm$json$Json$Encode$null)
						]));
		}
	});
var author$project$Lia$Update$InitSection = {$: 'InitSection'};
var author$project$Lia$Update$UpdateSettings = function (a) {
	return {$: 'UpdateSettings', a: a};
};
var elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _n0) {
				stepState:
				while (true) {
					var list = _n0.a;
					var result = _n0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _n2 = list.a;
						var lKey = _n2.a;
						var lValue = _n2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_n0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_n0 = $temp$_n0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _n3 = A3(
			elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _n3.a;
		var intermediateResult = _n3.b;
		return A3(
			elm$core$List$foldl,
			F2(
				function (_n4, result) {
					var k = _n4.a;
					var v = _n4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var author$project$Lia$Markdown$Chart$Parser$magicMerge = F2(
	function (left, right) {
		return A6(
			elm$core$Dict$merge,
			elm$core$Dict$insert,
			F4(
				function (key, l, r, dict) {
					return A3(
						elm$core$Dict$insert,
						key,
						_Utils_ap(l, r),
						dict);
				}),
			elm$core$Dict$insert,
			left,
			right,
			elm$core$Dict$empty);
	});
var elm$core$String$toFloat = _String_toFloat;
var andre_dietrich$parser_combinators$Combine$Num$float = A2(
	andre_dietrich$parser_combinators$Combine$onerror,
	'expected a float',
	A2(
		andre_dietrich$parser_combinators$Combine$andThen,
		andre_dietrich$parser_combinators$Combine$Num$unwrap,
		A2(
			andre_dietrich$parser_combinators$Combine$map,
			elm$core$String$toFloat,
			andre_dietrich$parser_combinators$Combine$regex('-?(?:0|[1-9]\\d*)\\.\\d+'))));
var author$project$Lia$Markdown$Chart$Parser$number = A2(
	andre_dietrich$parser_combinators$Combine$or,
	andre_dietrich$parser_combinators$Combine$Num$float,
	A2(
		andre_dietrich$parser_combinators$Combine$map,
		elm$core$Basics$toFloat,
		A2(
			andre_dietrich$parser_combinators$Combine$ignore,
			A2(
				andre_dietrich$parser_combinators$Combine$optional,
				'.',
				andre_dietrich$parser_combinators$Combine$string('.')),
			andre_dietrich$parser_combinators$Combine$Num$int)));
var elm$core$Set$Set_elm_builtin = function (a) {
	return {$: 'Set_elm_builtin', a: a};
};
var elm$core$Set$empty = elm$core$Set$Set_elm_builtin(elm$core$Dict$empty);
var elm$core$Set$insert = F2(
	function (key, _n0) {
		var dict = _n0.a;
		return elm$core$Set$Set_elm_builtin(
			A3(elm$core$Dict$insert, key, _Utils_Tuple0, dict));
	});
var elm$core$Set$fromList = function (list) {
	return A3(elm$core$List$foldl, elm$core$Set$insert, elm$core$Set$empty, list);
};
var elm$core$Set$remove = F2(
	function (key, _n0) {
		var dict = _n0.a;
		return elm$core$Set$Set_elm_builtin(
			A2(elm$core$Dict$remove, key, dict));
	});
var elm$core$String$foldr = _String_foldr;
var elm$core$String$toList = function (string) {
	return A3(elm$core$String$foldr, elm$core$List$cons, _List_Nil, string);
};
var author$project$Lia$Markdown$Chart$Parser$row = function () {
	var indexes = F2(
		function (y_label, str) {
			return _Utils_Tuple2(
				function (w) {
					return (w === '') ? ' ' : w;
				}(
					elm$core$String$trim(y_label)),
				elm$core$Dict$fromList(
					A2(
						elm$core$List$map,
						function (c) {
							return _Utils_Tuple2(
								c,
								A2(
									elm$core$String$indexes,
									elm$core$String$fromChar(c),
									str));
						},
						elm$core$Set$toList(
							A2(
								elm$core$Set$remove,
								_Utils_chr(' '),
								elm$core$Set$fromList(
									elm$core$String$toList(str)))))));
		});
	return A2(
		andre_dietrich$parser_combinators$Combine$andMap,
		A2(
			andre_dietrich$parser_combinators$Combine$ignore,
			andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\n'),
			andre_dietrich$parser_combinators$Combine$regex('[ \\*a-zA-Z\\+#]*')),
		A2(
			andre_dietrich$parser_combinators$Combine$map,
			indexes,
			A2(
				andre_dietrich$parser_combinators$Combine$ignore,
				andre_dietrich$parser_combinators$Combine$string('|'),
				andre_dietrich$parser_combinators$Combine$regex('[^\n|]*'))));
}();
var author$project$Lia$Markdown$Chart$Parser$segmentation = F3(
	function (elements, i0, i1) {
		return _Utils_Tuple2(i0, (i1 - i0) / elements);
	});
var author$project$Lia$Markdown$Chart$Parser$unique = F2(
	function (start, list) {
		unique:
		while (true) {
			var _n0 = _Utils_Tuple2(list, start);
			if (_n0.a.b) {
				if (_n0.b.$ === 'Nothing') {
					var _n1 = _n0.a;
					var x = _n1.a;
					var xs = _n1.b;
					var _n2 = _n0.b;
					var $temp$start = elm$core$Maybe$Just(x),
						$temp$list = xs;
					start = $temp$start;
					list = $temp$list;
					continue unique;
				} else {
					var _n3 = _n0.a;
					var x = _n3.a;
					var xs = _n3.b;
					var s = _n0.b.a;
					if (_Utils_eq(x, s)) {
						return false;
					} else {
						var $temp$start = elm$core$Maybe$Just(x),
							$temp$list = xs;
						start = $temp$start;
						list = $temp$list;
						continue unique;
					}
				}
			} else {
				return true;
			}
		}
	});
var author$project$Lia$Markdown$Chart$Parser$x_axis = A2(
	andre_dietrich$parser_combinators$Combine$andMap,
	A2(
		andre_dietrich$parser_combinators$Combine$optional,
		1.0,
		A2(
			andre_dietrich$parser_combinators$Combine$ignore,
			andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\n'),
			A2(
				andre_dietrich$parser_combinators$Combine$keep,
				author$project$Lia$Markdown$Chart$Parser$number,
				andre_dietrich$parser_combinators$Combine$regex('[\t ]*')))),
	A2(
		andre_dietrich$parser_combinators$Combine$andMap,
		A2(
			andre_dietrich$parser_combinators$Combine$optional,
			'',
			andre_dietrich$parser_combinators$Combine$regex('[a-zA-Z_ .\\\\()\\-]+')),
		A2(
			andre_dietrich$parser_combinators$Combine$andMap,
			A2(andre_dietrich$parser_combinators$Combine$optional, 0.0, author$project$Lia$Markdown$Chart$Parser$number),
			A2(
				andre_dietrich$parser_combinators$Combine$map,
				F4(
					function (e, x0, x_label, x1) {
						return _Utils_Tuple2(
							elm$core$String$trim(x_label),
							A3(
								author$project$Lia$Markdown$Chart$Parser$segmentation,
								elm$core$String$length(e),
								x0,
								x1));
					}),
				A2(
					andre_dietrich$parser_combinators$Combine$ignore,
					andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\n[\t ]*'),
					A2(
						andre_dietrich$parser_combinators$Combine$keep,
						andre_dietrich$parser_combinators$Combine$regex('\\-+'),
						andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\+')))))));
var author$project$Lia$Markdown$Chart$Types$Chart = F4(
	function (title, y_label, x_label, diagrams) {
		return {diagrams: diagrams, title: title, x_label: x_label, y_label: y_label};
	});
var author$project$Lia$Markdown$Chart$Types$Dots = function (a) {
	return {$: 'Dots', a: a};
};
var author$project$Lia$Markdown$Chart$Types$Line = function (a) {
	return {$: 'Line', a: a};
};
var author$project$Lia$Markdown$Chart$Types$Point = F2(
	function (x, y) {
		return {x: x, y: y};
	});
var elm$core$List$unzip = function (pairs) {
	var step = F2(
		function (_n0, _n1) {
			var x = _n0.a;
			var y = _n0.b;
			var xs = _n1.a;
			var ys = _n1.b;
			return _Utils_Tuple2(
				A2(elm$core$List$cons, x, xs),
				A2(elm$core$List$cons, y, ys));
		});
	return A3(
		elm$core$List$foldr,
		step,
		_Utils_Tuple2(_List_Nil, _List_Nil),
		pairs);
};
var author$project$Lia$Markdown$Chart$Parser$parse = function () {
	var chart = F5(
		function (title, y_max, rows, y_min, _n6) {
			var x_label = _n6.a;
			var _n7 = _n6.b;
			var x0 = _n7.a;
			var x_segment = _n7.b;
			var _n0 = A3(
				author$project$Lia$Markdown$Chart$Parser$segmentation,
				elm$core$List$length(rows),
				y_min,
				y_max);
			var y0 = _n0.a;
			var y_segment = _n0.b;
			var _n1 = elm$core$List$unzip(rows);
			var y_label = _n1.a;
			var data = _n1.b;
			return A4(
				author$project$Lia$Markdown$Chart$Types$Chart,
				title,
				elm$core$String$trim(
					elm$core$String$concat(y_label)),
				x_label,
				A2(
					elm$core$Dict$map,
					F2(
						function (_n5, v) {
							return A2(
								author$project$Lia$Markdown$Chart$Parser$unique,
								elm$core$Maybe$Nothing,
								A2(
									elm$core$List$map,
									function ($) {
										return $.x;
									},
									v)) ? author$project$Lia$Markdown$Chart$Types$Line(v) : author$project$Lia$Markdown$Chart$Types$Dots(v);
						}),
					A2(
						elm$core$Dict$map,
						F2(
							function (_n4, v) {
								return A2(
									elm$core$List$sortBy,
									function ($) {
										return $.x;
									},
									v);
							}),
						A3(
							elm$core$List$foldr,
							author$project$Lia$Markdown$Chart$Parser$magicMerge,
							elm$core$Dict$empty,
							A2(
								elm$core$List$map,
								function (_n2) {
									var y = _n2.a;
									var l = _n2.b;
									return A2(
										elm$core$Dict$map,
										F2(
											function (_n3, xs) {
												return A2(
													elm$core$List$map,
													function (x) {
														return A2(author$project$Lia$Markdown$Chart$Types$Point, (x * x_segment) + x0, (y * y_segment) + y0);
													},
													xs);
											}),
										l);
								},
								A2(
									elm$core$List$indexedMap,
									elm$core$Tuple$pair,
									elm$core$List$reverse(data)))))));
		});
	return A2(
		andre_dietrich$parser_combinators$Combine$andMap,
		author$project$Lia$Markdown$Chart$Parser$x_axis,
		A2(
			andre_dietrich$parser_combinators$Combine$andMap,
			A2(
				andre_dietrich$parser_combinators$Combine$optional,
				0.0,
				A2(
					andre_dietrich$parser_combinators$Combine$keep,
					author$project$Lia$Markdown$Chart$Parser$number,
					andre_dietrich$parser_combinators$Combine$regex('[\t ]*'))),
			A2(
				andre_dietrich$parser_combinators$Combine$andMap,
				andre_dietrich$parser_combinators$Combine$many1(author$project$Lia$Markdown$Chart$Parser$row),
				A2(
					andre_dietrich$parser_combinators$Combine$andMap,
					A2(
						andre_dietrich$parser_combinators$Combine$optional,
						1.0,
						A2(
							andre_dietrich$parser_combinators$Combine$keep,
							author$project$Lia$Markdown$Chart$Parser$number,
							andre_dietrich$parser_combinators$Combine$regex('[\t ]*'))),
					A2(
						andre_dietrich$parser_combinators$Combine$map,
						chart,
						A2(
							andre_dietrich$parser_combinators$Combine$optional,
							'',
							andre_dietrich$parser_combinators$Combine$regex('[\t ]*[a-zA-Z0-9 .\\\\()\\-]+\\n')))))));
}();
var elm$core$String$dropRight = F2(
	function (n, string) {
		return (n < 1) ? string : A3(elm$core$String$slice, 0, -n, string);
	});
var author$project$Lia$Markdown$Code$Parser$code_body = function (len) {
	var control_frame = '`{' + (elm$core$String$fromInt(len) + '}');
	return A2(
		andre_dietrich$parser_combinators$Combine$map,
		A2(
			elm$core$Basics$composeR,
			elm$core$String$concat,
			elm$core$String$dropRight(1)),
		A2(
			andre_dietrich$parser_combinators$Combine$manyTill,
			A2(
				andre_dietrich$parser_combinators$Combine$keep,
				andre_dietrich$parser_combinators$Combine$regex('(?:.(?!' + (control_frame + '))*\\n')),
				andre_dietrich$parser_combinators$Combine$maybe(author$project$Lia$Parser$Context$indentation)),
			A2(
				andre_dietrich$parser_combinators$Combine$keep,
				andre_dietrich$parser_combinators$Combine$regex(control_frame),
				author$project$Lia$Parser$Context$indentation)));
};
var author$project$Lia$Markdown$Code$Parser$header = A2(
	andre_dietrich$parser_combinators$Combine$map,
	elm$core$String$toLower,
	A2(
		andre_dietrich$parser_combinators$Combine$keep,
		andre_dietrich$parser_combinators$Combine$regex('\\w*'),
		author$project$Lia$Parser$Helper$spaces));
var author$project$Lia$Markdown$Code$Parser$title = A2(
	andre_dietrich$parser_combinators$Combine$ignore,
	author$project$Lia$Parser$Helper$newline,
	A2(
		andre_dietrich$parser_combinators$Combine$andMap,
		andre_dietrich$parser_combinators$Combine$regex('.*'),
		A2(
			andre_dietrich$parser_combinators$Combine$map,
			elm$core$Tuple$pair,
			A2(
				andre_dietrich$parser_combinators$Combine$optional,
				true,
				A2(
					andre_dietrich$parser_combinators$Combine$keep,
					andre_dietrich$parser_combinators$Combine$choice(
						_List_fromArray(
							[
								A2(
								andre_dietrich$parser_combinators$Combine$onsuccess,
								true,
								andre_dietrich$parser_combinators$Combine$string('+')),
								A2(
								andre_dietrich$parser_combinators$Combine$onsuccess,
								false,
								andre_dietrich$parser_combinators$Combine$string('-'))
							])),
					author$project$Lia$Parser$Helper$spaces)))));
var author$project$Lia$Markdown$Code$Types$Snippet = F3(
	function (lang, name, code) {
		return {code: code, lang: lang, name: name};
	});
var author$project$Lia$Markdown$Code$Parser$listing = function () {
	var body = function (len) {
		return A2(
			andre_dietrich$parser_combinators$Combine$andMap,
			author$project$Lia$Markdown$Code$Parser$code_body(len),
			A2(
				andre_dietrich$parser_combinators$Combine$andMap,
				author$project$Lia$Markdown$Code$Parser$title,
				A2(
					andre_dietrich$parser_combinators$Combine$map,
					F3(
						function (h, _n0, c) {
							var v = _n0.a;
							var t = _n0.b;
							return _Utils_Tuple2(
								A3(
									author$project$Lia$Markdown$Code$Types$Snippet,
									h,
									elm$core$String$trim(t),
									c),
								v);
						}),
					author$project$Lia$Markdown$Code$Parser$header)));
	};
	return A2(andre_dietrich$parser_combinators$Combine$andThen, body, author$project$Lia$Parser$Helper$c_frame);
}();
var author$project$Lia$Markdown$Code$Types$Evaluate = function (a) {
	return {$: 'Evaluate', a: a};
};
var author$project$Lia$Markdown$Code$Types$hash = function (file) {
	return _Utils_Tuple2(
		truqu$elm_md5$MD5$hex(file.code),
		file.code);
};
var author$project$Lia$Markdown$Code$Types$toFile = function (_n0) {
	var lang = _n0.a.lang;
	var name = _n0.a.name;
	var code = _n0.a.code;
	var visible = _n0.b;
	return A5(author$project$Lia$Markdown$Code$Types$File, lang, name, code, visible, false);
};
var author$project$Lia$Markdown$Code$Types$initProject = F3(
	function (array, comment, output) {
		var files = A2(elm$core$Array$map, author$project$Lia$Markdown$Code$Types$toFile, array);
		var repository = elm$core$Array$toList(
			A2(elm$core$Array$map, author$project$Lia$Markdown$Code$Types$hash, files));
		return {
			compact_view: false,
			evaluation: comment,
			file: files,
			focus: -1,
			log: output,
			repository: elm$core$Dict$fromList(repository),
			running: false,
			terminal: elm$core$Maybe$Nothing,
			version: elm$core$Array$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						A2(elm$core$List$map, elm$core$Tuple$first, repository),
						author$project$Lia$Markdown$Code$Log$empty)
					])),
			version_active: 0
		};
	});
var elm$core$Elm$JsArray$appendN = _JsArray_appendN;
var elm$core$Elm$JsArray$slice = _JsArray_slice;
var elm$core$Array$appendHelpBuilder = F2(
	function (tail, builder) {
		var tailLen = elm$core$Elm$JsArray$length(tail);
		var notAppended = (elm$core$Array$branchFactor - elm$core$Elm$JsArray$length(builder.tail)) - tailLen;
		var appended = A3(elm$core$Elm$JsArray$appendN, elm$core$Array$branchFactor, builder.tail, tail);
		return (notAppended < 0) ? {
			nodeList: A2(
				elm$core$List$cons,
				elm$core$Array$Leaf(appended),
				builder.nodeList),
			nodeListSize: builder.nodeListSize + 1,
			tail: A3(elm$core$Elm$JsArray$slice, notAppended, tailLen, tail)
		} : ((!notAppended) ? {
			nodeList: A2(
				elm$core$List$cons,
				elm$core$Array$Leaf(appended),
				builder.nodeList),
			nodeListSize: builder.nodeListSize + 1,
			tail: elm$core$Elm$JsArray$empty
		} : {nodeList: builder.nodeList, nodeListSize: builder.nodeListSize, tail: appended});
	});
var elm$core$Array$sliceLeft = F2(
	function (from, array) {
		var len = array.a;
		var tree = array.c;
		var tail = array.d;
		if (!from) {
			return array;
		} else {
			if (_Utils_cmp(
				from,
				elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					elm$core$Array$Array_elm_builtin,
					len - from,
					elm$core$Array$shiftStep,
					elm$core$Elm$JsArray$empty,
					A3(
						elm$core$Elm$JsArray$slice,
						from - elm$core$Array$tailIndex(len),
						elm$core$Elm$JsArray$length(tail),
						tail));
			} else {
				var skipNodes = (from / elm$core$Array$branchFactor) | 0;
				var helper = F2(
					function (node, acc) {
						if (node.$ === 'SubTree') {
							var subTree = node.a;
							return A3(elm$core$Elm$JsArray$foldr, helper, acc, subTree);
						} else {
							var leaf = node.a;
							return A2(elm$core$List$cons, leaf, acc);
						}
					});
				var leafNodes = A3(
					elm$core$Elm$JsArray$foldr,
					helper,
					_List_fromArray(
						[tail]),
					tree);
				var nodesToInsert = A2(elm$core$List$drop, skipNodes, leafNodes);
				if (!nodesToInsert.b) {
					return elm$core$Array$empty;
				} else {
					var head = nodesToInsert.a;
					var rest = nodesToInsert.b;
					var firstSlice = from - (skipNodes * elm$core$Array$branchFactor);
					var initialBuilder = {
						nodeList: _List_Nil,
						nodeListSize: 0,
						tail: A3(
							elm$core$Elm$JsArray$slice,
							firstSlice,
							elm$core$Elm$JsArray$length(head),
							head)
					};
					return A2(
						elm$core$Array$builderToArray,
						true,
						A3(elm$core$List$foldl, elm$core$Array$appendHelpBuilder, initialBuilder, rest));
				}
			}
		}
	});
var elm$core$Array$fetchNewTail = F4(
	function (shift, end, treeEnd, tree) {
		fetchNewTail:
		while (true) {
			var pos = elm$core$Array$bitMask & (treeEnd >>> shift);
			var _n0 = A2(elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_n0.$ === 'SubTree') {
				var sub = _n0.a;
				var $temp$shift = shift - elm$core$Array$shiftStep,
					$temp$end = end,
					$temp$treeEnd = treeEnd,
					$temp$tree = sub;
				shift = $temp$shift;
				end = $temp$end;
				treeEnd = $temp$treeEnd;
				tree = $temp$tree;
				continue fetchNewTail;
			} else {
				var values = _n0.a;
				return A3(elm$core$Elm$JsArray$slice, 0, elm$core$Array$bitMask & end, values);
			}
		}
	});
var elm$core$Array$hoistTree = F3(
	function (oldShift, newShift, tree) {
		hoistTree:
		while (true) {
			if ((_Utils_cmp(oldShift, newShift) < 1) || (!elm$core$Elm$JsArray$length(tree))) {
				return tree;
			} else {
				var _n0 = A2(elm$core$Elm$JsArray$unsafeGet, 0, tree);
				if (_n0.$ === 'SubTree') {
					var sub = _n0.a;
					var $temp$oldShift = oldShift - elm$core$Array$shiftStep,
						$temp$newShift = newShift,
						$temp$tree = sub;
					oldShift = $temp$oldShift;
					newShift = $temp$newShift;
					tree = $temp$tree;
					continue hoistTree;
				} else {
					return tree;
				}
			}
		}
	});
var elm$core$Array$sliceTree = F3(
	function (shift, endIdx, tree) {
		var lastPos = elm$core$Array$bitMask & (endIdx >>> shift);
		var _n0 = A2(elm$core$Elm$JsArray$unsafeGet, lastPos, tree);
		if (_n0.$ === 'SubTree') {
			var sub = _n0.a;
			var newSub = A3(elm$core$Array$sliceTree, shift - elm$core$Array$shiftStep, endIdx, sub);
			return (!elm$core$Elm$JsArray$length(newSub)) ? A3(elm$core$Elm$JsArray$slice, 0, lastPos, tree) : A3(
				elm$core$Elm$JsArray$unsafeSet,
				lastPos,
				elm$core$Array$SubTree(newSub),
				A3(elm$core$Elm$JsArray$slice, 0, lastPos + 1, tree));
		} else {
			return A3(elm$core$Elm$JsArray$slice, 0, lastPos, tree);
		}
	});
var elm$core$Array$sliceRight = F2(
	function (end, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		if (_Utils_eq(end, len)) {
			return array;
		} else {
			if (_Utils_cmp(
				end,
				elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					elm$core$Array$Array_elm_builtin,
					end,
					startShift,
					tree,
					A3(elm$core$Elm$JsArray$slice, 0, elm$core$Array$bitMask & end, tail));
			} else {
				var endIdx = elm$core$Array$tailIndex(end);
				var depth = elm$core$Basics$floor(
					A2(
						elm$core$Basics$logBase,
						elm$core$Array$branchFactor,
						A2(elm$core$Basics$max, 1, endIdx - 1)));
				var newShift = A2(elm$core$Basics$max, 5, depth * elm$core$Array$shiftStep);
				return A4(
					elm$core$Array$Array_elm_builtin,
					end,
					newShift,
					A3(
						elm$core$Array$hoistTree,
						startShift,
						newShift,
						A3(elm$core$Array$sliceTree, startShift, endIdx, tree)),
					A4(elm$core$Array$fetchNewTail, startShift, end, endIdx, tree));
			}
		}
	});
var elm$core$Array$translateIndex = F2(
	function (index, _n0) {
		var len = _n0.a;
		var posIndex = (index < 0) ? (len + index) : index;
		return (posIndex < 0) ? 0 : ((_Utils_cmp(posIndex, len) > 0) ? len : posIndex);
	});
var elm$core$Array$slice = F3(
	function (from, to, array) {
		var correctTo = A2(elm$core$Array$translateIndex, to, array);
		var correctFrom = A2(elm$core$Array$translateIndex, from, array);
		return (_Utils_cmp(correctFrom, correctTo) > 0) ? elm$core$Array$empty : A2(
			elm$core$Array$sliceLeft,
			correctFrom,
			A2(elm$core$Array$sliceRight, correctTo, array));
	});
var author$project$Lia$Markdown$Code$Parser$evaluate = F2(
	function (lang_title_code, comment) {
		var ar = elm$core$Array$fromList(lang_title_code);
		var _n0 = function () {
			var _n1 = A2(
				elm$core$Array$get,
				elm$core$Array$length(ar) - 1,
				ar);
			if (_n1.$ === 'Just') {
				var _n2 = _n1.a;
				var snippet = _n2.a;
				var vis = _n2.b;
				return (elm$core$String$toLower(snippet.name) === '@output') ? _Utils_Tuple2(
					A2(
						author$project$Lia$Markdown$Code$Log$add_Eval,
						A3(author$project$Port$Eval$Eval, vis, snippet.code, _List_Nil),
						author$project$Lia$Markdown$Code$Log$empty),
					A3(elm$core$Array$slice, 0, -1, ar)) : _Utils_Tuple2(author$project$Lia$Markdown$Code$Log$empty, ar);
			} else {
				return _Utils_Tuple2(author$project$Lia$Markdown$Code$Log$empty, ar);
			}
		}();
		var output = _n0.a;
		var array = _n0.b;
		var add_state = function (s) {
			return _Utils_update(
				s,
				{
					code_vector: A2(
						elm$core$Array$push,
						A3(author$project$Lia$Markdown$Code$Types$initProject, array, comment, output),
						s.code_vector)
				});
		};
		return A2(
			andre_dietrich$parser_combinators$Combine$ignore,
			andre_dietrich$parser_combinators$Combine$modifyState(add_state),
			andre_dietrich$parser_combinators$Combine$withState(
				function (s) {
					return andre_dietrich$parser_combinators$Combine$succeed(
						author$project$Lia$Markdown$Code$Types$Evaluate(
							elm$core$Array$length(s.code_vector)));
				}));
	});
var author$project$Lia$Markdown$Code$Types$Highlight = function (a) {
	return {$: 'Highlight', a: a};
};
var author$project$Lia$Markdown$Code$Parser$result = function (_n0) {
	var lst = _n0.a;
	var script = _n0.b;
	if (script.$ === 'Just') {
		var str = script.a;
		return A2(author$project$Lia$Markdown$Code$Parser$evaluate, lst, str);
	} else {
		return andre_dietrich$parser_combinators$Combine$succeed(
			author$project$Lia$Markdown$Code$Types$Highlight(
				A2(elm$core$List$map, elm$core$Tuple$first, lst)));
	}
};
var author$project$Lia$Markdown$Code$Parser$parse = A2(
	andre_dietrich$parser_combinators$Combine$andThen,
	author$project$Lia$Markdown$Code$Parser$result,
	A2(
		andre_dietrich$parser_combinators$Combine$andMap,
		andre_dietrich$parser_combinators$Combine$maybe(
			A2(
				andre_dietrich$parser_combinators$Combine$keep,
				author$project$Lia$Markdown$Inline$Parser$javascript,
				A2(
					andre_dietrich$parser_combinators$Combine$keep,
					author$project$Lia$Markdown$Macro$Parser$macro,
					A2(
						andre_dietrich$parser_combinators$Combine$ignore,
						andre_dietrich$parser_combinators$Combine$maybe(author$project$Lia$Parser$Context$indentation),
						andre_dietrich$parser_combinators$Combine$regex('[ \n]?'))))),
		A2(
			andre_dietrich$parser_combinators$Combine$map,
			elm$core$Tuple$pair,
			A2(andre_dietrich$parser_combinators$Combine$sepBy1, author$project$Lia$Parser$Helper$newline, author$project$Lia$Markdown$Code$Parser$listing))));
var author$project$Lia$Parser$Helper$newlines1 = andre_dietrich$parser_combinators$Combine$regex('\\n+');
var author$project$Lia$Markdown$Effect$Parser$comment = function (paragraph) {
	return A2(
		andre_dietrich$parser_combinators$Combine$ignore,
		author$project$Lia$Markdown$Effect$Parser$reset_effect_number,
		A2(
			andre_dietrich$parser_combinators$Combine$andThen,
			author$project$Lia$Markdown$Effect$Parser$add_comment(true),
			A2(
				andre_dietrich$parser_combinators$Combine$andMap,
				A2(andre_dietrich$parser_combinators$Combine$keep, paragraph, author$project$Lia$Parser$Context$indentation),
				A2(
					andre_dietrich$parser_combinators$Combine$ignore,
					andre_dietrich$parser_combinators$Combine$maybe(
						A2(andre_dietrich$parser_combinators$Combine$ignore, author$project$Lia$Parser$Context$indentation_skip, author$project$Lia$Parser$Helper$newlines1)),
					A2(
						andre_dietrich$parser_combinators$Combine$ignore,
						andre_dietrich$parser_combinators$Combine$regex('}}--[\t ]*'),
						A2(
							andre_dietrich$parser_combinators$Combine$andMap,
							andre_dietrich$parser_combinators$Combine$maybe(
								A2(
									andre_dietrich$parser_combinators$Combine$keep,
									andre_dietrich$parser_combinators$Combine$regex('[A-Za-z0-9 ]+'),
									A2(andre_dietrich$parser_combinators$Combine$keep, author$project$Lia$Markdown$Macro$Parser$macro, author$project$Lia$Parser$Helper$spaces1))),
							A2(
								andre_dietrich$parser_combinators$Combine$map,
								F3(
									function (a, b, c) {
										return _Utils_Tuple3(a, b, c);
									}),
								A2(
									andre_dietrich$parser_combinators$Combine$keep,
									author$project$Lia$Markdown$Effect$Parser$effect_number,
									andre_dietrich$parser_combinators$Combine$regex('[\t ]*--{{')))))))));
};
var author$project$Lia$Parser$Helper$newlines = andre_dietrich$parser_combinators$Combine$regex('\\n*');
var author$project$Lia$Markdown$Effect$Parser$multi = function (blocks) {
	return A2(
		andre_dietrich$parser_combinators$Combine$keep,
		A2(
			andre_dietrich$parser_combinators$Combine$manyTill,
			A2(andre_dietrich$parser_combinators$Combine$ignore, author$project$Lia$Parser$Helper$newlines, blocks),
			andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\*{3,}')),
		A2(
			andre_dietrich$parser_combinators$Combine$ignore,
			andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\*{3,}\\n+'),
			author$project$Lia$Parser$Context$indentation));
};
var author$project$Lia$Markdown$Effect$Parser$single = function (blocks) {
	return A2(andre_dietrich$parser_combinators$Combine$map, elm$core$List$singleton, blocks);
};
var author$project$Lia$Markdown$Effect$Parser$markdown = function (blocks) {
	return A2(
		andre_dietrich$parser_combinators$Combine$ignore,
		author$project$Lia$Markdown$Effect$Parser$reset_effect_number,
		A2(
			andre_dietrich$parser_combinators$Combine$andMap,
			A2(
				andre_dietrich$parser_combinators$Combine$or,
				author$project$Lia$Markdown$Effect$Parser$multi(blocks),
				author$project$Lia$Markdown$Effect$Parser$single(blocks)),
			A2(
				andre_dietrich$parser_combinators$Combine$ignore,
				A2(
					andre_dietrich$parser_combinators$Combine$or,
					andre_dietrich$parser_combinators$Combine$skip(
						andre_dietrich$parser_combinators$Combine$string('\n')),
					author$project$Lia$Parser$Context$indentation_skip),
				A2(
					andre_dietrich$parser_combinators$Combine$ignore,
					andre_dietrich$parser_combinators$Combine$regex('}}[\t ]*'),
					A2(
						andre_dietrich$parser_combinators$Combine$andMap,
						A2(
							andre_dietrich$parser_combinators$Combine$optional,
							99999,
							A2(
								andre_dietrich$parser_combinators$Combine$keep,
								andre_dietrich$parser_combinators$Combine$Num$int,
								andre_dietrich$parser_combinators$Combine$regex('[\t ]*-[\t ]*'))),
						A2(
							andre_dietrich$parser_combinators$Combine$map,
							F3(
								function (a, b, c) {
									return _Utils_Tuple3(a, b, c);
								}),
							A2(
								andre_dietrich$parser_combinators$Combine$keep,
								author$project$Lia$Markdown$Effect$Parser$effect_number,
								andre_dietrich$parser_combinators$Combine$regex('[\t ]*{{'))))))));
};
var andre_dietrich$parser_combinators$Combine$sepEndBy1 = F2(
	function (sep, p) {
		return A2(
			andre_dietrich$parser_combinators$Combine$ignore,
			andre_dietrich$parser_combinators$Combine$maybe(sep),
			A2(andre_dietrich$parser_combinators$Combine$sepBy1, sep, p));
	});
var andre_dietrich$parser_combinators$Combine$sepEndBy = F2(
	function (sep, p) {
		return A2(
			andre_dietrich$parser_combinators$Combine$or,
			A2(andre_dietrich$parser_combinators$Combine$sepEndBy1, sep, p),
			andre_dietrich$parser_combinators$Combine$succeed(_List_Nil));
	});
var author$project$Lia$Markdown$Parser$md_annotations = andre_dietrich$parser_combinators$Combine$maybe(
	A2(
		andre_dietrich$parser_combinators$Combine$ignore,
		andre_dietrich$parser_combinators$Combine$maybe(
			A2(
				andre_dietrich$parser_combinators$Combine$ignore,
				author$project$Lia$Parser$Context$indentation,
				andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\n'))),
		A2(
			andre_dietrich$parser_combinators$Combine$map,
			elm$core$Dict$fromList,
			A2(
				andre_dietrich$parser_combinators$Combine$keep,
				author$project$Lia$Markdown$Inline$Parser$comment(author$project$Lia$Markdown$Inline$Parser$attribute),
				A2(andre_dietrich$parser_combinators$Combine$keep, author$project$Lia$Markdown$Macro$Parser$macro, author$project$Lia$Parser$Helper$spaces)))));
var author$project$Lia$Markdown$Inline$Parser$append_space = function (list) {
	return A2(
		elm$core$List$append,
		list,
		_List_fromArray(
			[
				A2(author$project$Lia$Markdown$Inline$Types$Chars, ' ', elm$core$Maybe$Nothing)
			]));
};
var author$project$Lia$Markdown$Inline$Parser$line = A2(
	andre_dietrich$parser_combinators$Combine$map,
	A2(elm$core$Basics$composeR, author$project$Lia$Markdown$Inline$Parser$append_space, author$project$Lia$Markdown$Inline$Parser$combine),
	andre_dietrich$parser_combinators$Combine$many1(author$project$Lia$Markdown$Inline$Parser$inlines));
var author$project$Lia$Markdown$Parser$table_row = A2(
	andre_dietrich$parser_combinators$Combine$keep,
	A2(
		andre_dietrich$parser_combinators$Combine$manyTill,
		A2(
			andre_dietrich$parser_combinators$Combine$keep,
			author$project$Lia$Markdown$Inline$Parser$line,
			andre_dietrich$parser_combinators$Combine$string('|')),
		andre_dietrich$parser_combinators$Combine$regex('\\|[\t ]*\\n')),
	author$project$Lia$Parser$Context$indentation);
var author$project$Lia$Markdown$Types$Table = F4(
	function (a, b, c, d) {
		return {$: 'Table', a: a, b: b, c: c, d: d};
	});
var author$project$Lia$Markdown$Parser$formated_table = function () {
	var format = A2(
		andre_dietrich$parser_combinators$Combine$ignore,
		andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\n'),
		A2(
			andre_dietrich$parser_combinators$Combine$keep,
			A2(
				andre_dietrich$parser_combinators$Combine$sepEndBy,
				andre_dietrich$parser_combinators$Combine$string('|'),
				andre_dietrich$parser_combinators$Combine$choice(
					_List_fromArray(
						[
							A2(
							andre_dietrich$parser_combinators$Combine$onsuccess,
							'center',
							andre_dietrich$parser_combinators$Combine$regex('[\t ]*:-{3,}:[\t ]*')),
							A2(
							andre_dietrich$parser_combinators$Combine$onsuccess,
							'left',
							andre_dietrich$parser_combinators$Combine$regex('[\t ]*:-{3,}[\t ]*')),
							A2(
							andre_dietrich$parser_combinators$Combine$onsuccess,
							'right',
							andre_dietrich$parser_combinators$Combine$regex('[\t ]*-{3,}:[\t ]*')),
							A2(
							andre_dietrich$parser_combinators$Combine$onsuccess,
							'left',
							andre_dietrich$parser_combinators$Combine$regex('[\t ]*-{3,}[\t ]*'))
						]))),
			A2(
				andre_dietrich$parser_combinators$Combine$ignore,
				andre_dietrich$parser_combinators$Combine$string('|'),
				author$project$Lia$Parser$Context$indentation)));
	return A2(
		andre_dietrich$parser_combinators$Combine$andMap,
		andre_dietrich$parser_combinators$Combine$many(author$project$Lia$Markdown$Parser$table_row),
		A2(
			andre_dietrich$parser_combinators$Combine$andMap,
			format,
			A2(
				andre_dietrich$parser_combinators$Combine$andMap,
				author$project$Lia$Markdown$Parser$table_row,
				A2(
					andre_dietrich$parser_combinators$Combine$map,
					author$project$Lia$Markdown$Types$Table,
					A2(andre_dietrich$parser_combinators$Combine$keep, author$project$Lia$Markdown$Parser$md_annotations, author$project$Lia$Parser$Context$indentation_skip)))));
}();
var author$project$Lia$Markdown$Types$HLine = function (a) {
	return {$: 'HLine', a: a};
};
var author$project$Lia$Markdown$Parser$horizontal_line = A2(
	andre_dietrich$parser_combinators$Combine$map,
	author$project$Lia$Markdown$Types$HLine,
	A2(
		andre_dietrich$parser_combinators$Combine$ignore,
		andre_dietrich$parser_combinators$Combine$regex('-{3,}'),
		author$project$Lia$Markdown$Parser$md_annotations));
var author$project$Lia$Markdown$Parser$paragraph = A2(
	andre_dietrich$parser_combinators$Combine$map,
	A2(elm$core$Basics$composeR, elm$core$List$concat, author$project$Lia$Markdown$Inline$Parser$combine),
	A2(
		andre_dietrich$parser_combinators$Combine$keep,
		andre_dietrich$parser_combinators$Combine$many1(
			A2(
				andre_dietrich$parser_combinators$Combine$ignore,
				author$project$Lia$Parser$Helper$newline,
				A2(andre_dietrich$parser_combinators$Combine$keep, author$project$Lia$Markdown$Inline$Parser$line, author$project$Lia$Parser$Context$indentation))),
		author$project$Lia$Parser$Context$indentation_skip));
var author$project$Lia$Markdown$Parser$simple_table = A2(
	andre_dietrich$parser_combinators$Combine$andMap,
	andre_dietrich$parser_combinators$Combine$many1(author$project$Lia$Markdown$Parser$table_row),
	A2(
		andre_dietrich$parser_combinators$Combine$map,
		F2(
			function (a, b) {
				return A4(author$project$Lia$Markdown$Types$Table, a, _List_Nil, _List_Nil, b);
			}),
		A2(andre_dietrich$parser_combinators$Combine$keep, author$project$Lia$Markdown$Parser$md_annotations, author$project$Lia$Parser$Context$indentation_skip)));
var avh4$elm_color$Color$RgbaSpace = F4(
	function (a, b, c, d) {
		return {$: 'RgbaSpace', a: a, b: b, c: c, d: d};
	});
var avh4$elm_color$Color$rgb = F3(
	function (r, g, b) {
		return A4(avh4$elm_color$Color$RgbaSpace, r, g, b, 1.0);
	});
var elm$core$List$maximum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return elm$core$Maybe$Just(
			A3(elm$core$List$foldl, elm$core$Basics$max, x, xs));
	} else {
		return elm$core$Maybe$Nothing;
	}
};
var andre_dietrich$elm_svgbob$SvgBob$Model$init = function (str) {
	var lines = elm$core$String$lines(str);
	var max = elm$core$List$maximum(
		A2(
			elm$core$List$map,
			function (line) {
				return elm$core$String$length(line);
			},
			lines));
	var lineArr = elm$core$Array$fromList(lines);
	var lineChar = A2(
		elm$core$Array$map,
		function (line) {
			return elm$core$Array$fromList(
				elm$core$String$toList(
					elm$core$String$trimRight(line)));
		},
		lineArr);
	return {
		columns: A2(elm$core$Maybe$withDefault, 0, max),
		lines: lineChar,
		rows: elm$core$Array$length(lineChar),
		settings: {
			arcRadius: 4.0,
			color: A3(avh4$elm_color$Color$rgb, 0, 0, 0),
			fontSize: 14.0,
			lineWidth: 1.0,
			textHeight: 16.0,
			textWidth: 8.0
		}
	};
};
var andre_dietrich$elm_svgbob$SvgBob$init = andre_dietrich$elm_svgbob$SvgBob$Model$init;
var author$project$Lia$Markdown$Parser$svgbody = function (len) {
	var control_frame = '`{' + (elm$core$String$fromInt(len) + ((len <= 8) ? '}' : ',}'));
	var ascii = (len <= 8) ? andre_dietrich$parser_combinators$Combine$regex('[\t ]*(ascii|art)[\t ]*\\n') : andre_dietrich$parser_combinators$Combine$regex('([\t ]*(ascii|art))?[\t ]*\\n');
	return A2(
		andre_dietrich$parser_combinators$Combine$keep,
		A2(
			andre_dietrich$parser_combinators$Combine$map,
			A2(
				elm$core$Basics$composeR,
				elm$core$String$concat,
				elm$core$String$dropRight(1)),
			A2(
				andre_dietrich$parser_combinators$Combine$manyTill,
				A2(
					andre_dietrich$parser_combinators$Combine$keep,
					andre_dietrich$parser_combinators$Combine$regex('(?:.(?!' + (control_frame + '))*\\n')),
					andre_dietrich$parser_combinators$Combine$maybe(author$project$Lia$Parser$Context$indentation)),
				A2(
					andre_dietrich$parser_combinators$Combine$keep,
					andre_dietrich$parser_combinators$Combine$regex(control_frame),
					author$project$Lia$Parser$Context$indentation))),
		ascii);
};
var author$project$Lia$Markdown$Types$ASCII = F2(
	function (a, b) {
		return {$: 'ASCII', a: a, b: b};
	});
var author$project$Lia$Markdown$Parser$svgbob = A2(
	andre_dietrich$parser_combinators$Combine$andMap,
	A2(andre_dietrich$parser_combinators$Combine$andThen, author$project$Lia$Markdown$Parser$svgbody, author$project$Lia$Parser$Helper$c_frame),
	A2(
		andre_dietrich$parser_combinators$Combine$map,
		F2(
			function (attr, txt) {
				return A2(
					author$project$Lia$Markdown$Types$ASCII,
					attr,
					andre_dietrich$elm_svgbob$SvgBob$init(txt));
			}),
		author$project$Lia$Markdown$Parser$md_annotations));
var author$project$Lia$Markdown$Effect$Model$set_annotation = F4(
	function (id1, id2, m, attr) {
		var _n0 = A2(elm$core$Dict$get, id1, m);
		if (_n0.$ === 'Just') {
			var e = _n0.a;
			var _n1 = A2(elm$core$Array$get, id2, e.paragraphs);
			if (_n1.$ === 'Just') {
				var _n2 = _n1.a;
				var par = _n2.b;
				return A3(
					elm$core$Dict$insert,
					id1,
					_Utils_update(
						e,
						{
							paragraphs: A3(
								elm$core$Array$set,
								id2,
								_Utils_Tuple2(attr, par),
								e.paragraphs)
						}),
					m);
			} else {
				return m;
			}
		} else {
			return m;
		}
	});
var author$project$Lia$Markdown$Types$Comment = function (a) {
	return {$: 'Comment', a: a};
};
var author$project$Lia$Markdown$Parser$to_comment = function (_n0) {
	var attr = _n0.a;
	var _n1 = _n0.b;
	var id1 = _n1.a;
	var id2 = _n1.b;
	return A2(
		andre_dietrich$parser_combinators$Combine$onsuccess,
		author$project$Lia$Markdown$Types$Comment(
			_Utils_Tuple2(id1, id2)),
		function () {
			if (attr.$ === 'Just') {
				return andre_dietrich$parser_combinators$Combine$modifyState(
					function (s) {
						var e = s.effect_model;
						return _Utils_update(
							s,
							{
								effect_model: _Utils_update(
									e,
									{
										comments: A4(author$project$Lia$Markdown$Effect$Model$set_annotation, id1, id2, e.comments, attr)
									})
							});
					});
			} else {
				return andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0);
			}
		}());
};
var author$project$Lia$Markdown$Inline$Parser$parse_inlines = F2(
	function (state, str) {
		var _n0 = A3(
			andre_dietrich$parser_combinators$Combine$runParser,
			author$project$Lia$Markdown$Inline$Parser$line,
			state,
			A3(elm$core$String$replace, '\n', ' ', str));
		if (_n0.$ === 'Ok') {
			var _n1 = _n0.a;
			var rslt = _n1.c;
			return rslt;
		} else {
			return _List_Nil;
		}
	});
var elm$core$String$endsWith = _String_endsWith;
var author$project$Lia$Markdown$Quiz$Block$Parser$check = F3(
	function (state, id, str) {
		var option = elm$core$String$trim(str);
		var inlines = author$project$Lia$Markdown$Inline$Parser$parse_inlines(state);
		return (A2(elm$core$String$startsWith, '(', option) && A2(elm$core$String$endsWith, ')', option)) ? _Utils_Tuple2(
			id,
			inlines(
				elm$core$String$trim(
					A3(elm$core$String$slice, 1, -1, option)))) : _Utils_Tuple2(
			-1,
			inlines(option));
	});
var author$project$Lia$Markdown$Quiz$Block$Types$Quiz = F2(
	function (options, solution) {
		return {options: options, solution: solution};
	});
var author$project$Lia$Markdown$Quiz$Block$Parser$toSelect = function (list) {
	return andre_dietrich$parser_combinators$Combine$succeed(
		A2(
			author$project$Lia$Markdown$Quiz$Block$Types$Quiz,
			A2(elm$core$List$map, elm$core$Tuple$second, list),
			A2(
				author$project$Lia$Markdown$Quiz$Block$Types$Select,
				false,
				A2(
					elm$core$List$map,
					elm$core$Tuple$first,
					A2(
						elm$core$List$filter,
						A2(
							elm$core$Basics$composeR,
							elm$core$Tuple$first,
							elm$core$Basics$le(0)),
						list)))));
};
var author$project$Lia$Markdown$Quiz$Block$Parser$split = F2(
	function (str, state) {
		var _n0 = A2(elm$core$String$split, '|', str);
		if (_n0.b && (!_n0.b.b)) {
			var solution = _n0.a;
			return andre_dietrich$parser_combinators$Combine$succeed(
				A2(
					author$project$Lia$Markdown$Quiz$Block$Types$Quiz,
					_List_Nil,
					author$project$Lia$Markdown$Quiz$Block$Types$Text(solution)));
		} else {
			var options = _n0;
			return author$project$Lia$Markdown$Quiz$Block$Parser$toSelect(
				A2(
					elm$core$List$indexedMap,
					author$project$Lia$Markdown$Quiz$Block$Parser$check(state),
					options));
		}
	});
var author$project$Lia$Markdown$Quiz$Block$Parser$parse = A2(
	andre_dietrich$parser_combinators$Combine$andThen,
	andre_dietrich$parser_combinators$Combine$withState,
	A2(
		andre_dietrich$parser_combinators$Combine$map,
		author$project$Lia$Markdown$Quiz$Block$Parser$split,
		A2(
			andre_dietrich$parser_combinators$Combine$ignore,
			author$project$Lia$Parser$Helper$newline,
			A2(
				andre_dietrich$parser_combinators$Combine$keep,
				author$project$Lia$Parser$Helper$stringTill(
					andre_dietrich$parser_combinators$Combine$string(']]')),
				andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\[\\[')))));
var author$project$Lia$Markdown$Quiz$Matrix$Parser$inBrackets = A2(
	andre_dietrich$parser_combinators$Combine$keep,
	A2(
		andre_dietrich$parser_combinators$Combine$manyTill,
		author$project$Lia$Markdown$Inline$Parser$inlines,
		andre_dietrich$parser_combinators$Combine$regex('[ \\t]*\\][ \\t]*')),
	andre_dietrich$parser_combinators$Combine$regex('[ \\t]*\\[[ \\t]*'));
var author$project$Lia$Markdown$Quiz$Matrix$Parser$inParenthesis = A2(
	andre_dietrich$parser_combinators$Combine$keep,
	A2(
		andre_dietrich$parser_combinators$Combine$manyTill,
		author$project$Lia$Markdown$Inline$Parser$inlines,
		andre_dietrich$parser_combinators$Combine$regex('[ \\t]*\\)[ \\t]*')),
	andre_dietrich$parser_combinators$Combine$regex('[ \\t]*\\([ \\t]*'));
var author$project$Lia$Markdown$Quiz$Matrix$Parser$options = A2(andre_dietrich$parser_combinators$Combine$or, author$project$Lia$Markdown$Quiz$Matrix$Parser$inParenthesis, author$project$Lia$Markdown$Quiz$Matrix$Parser$inBrackets);
var author$project$Lia$Markdown$Quiz$Matrix$Parser$header = A2(
	andre_dietrich$parser_combinators$Combine$ignore,
	author$project$Lia$Parser$Helper$newline,
	A2(
		andre_dietrich$parser_combinators$Combine$ignore,
		andre_dietrich$parser_combinators$Combine$string(']'),
		A2(
			andre_dietrich$parser_combinators$Combine$keep,
			andre_dietrich$parser_combinators$Combine$many1(author$project$Lia$Markdown$Quiz$Matrix$Parser$options),
			A2(
				andre_dietrich$parser_combinators$Combine$ignore,
				andre_dietrich$parser_combinators$Combine$string('['),
				A2(
					andre_dietrich$parser_combinators$Combine$ignore,
					author$project$Lia$Parser$Helper$spaces,
					andre_dietrich$parser_combinators$Combine$maybe(author$project$Lia$Parser$Context$indentation))))));
var author$project$Lia$Markdown$Quiz$Matrix$Types$Quiz = F3(
	function (headers, options, solution) {
		return {headers: headers, options: options, solution: solution};
	});
var author$project$Lia$Markdown$Quiz$Matrix$Parser$quiz = F2(
	function (main, _n0) {
		var vector = _n0.a;
		var inline = _n0.b;
		return A3(
			author$project$Lia$Markdown$Quiz$Matrix$Types$Quiz,
			main,
			inline,
			elm$core$Array$fromList(vector));
	});
var author$project$Lia$Markdown$Quiz$Vector$Parser$elements = F2(
	function (_true, _false) {
		return A2(
			andre_dietrich$parser_combinators$Combine$or,
			A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				true,
				andre_dietrich$parser_combinators$Combine$string(_true)),
			A2(
				andre_dietrich$parser_combinators$Combine$onsuccess,
				false,
				andre_dietrich$parser_combinators$Combine$string(_false)));
	});
var author$project$Lia$Markdown$Quiz$Vector$Parser$multiple = A2(author$project$Lia$Markdown$Quiz$Vector$Parser$elements, '[X]', '[ ]');
var author$project$Lia$Markdown$Quiz$Matrix$Parser$multiple = A2(
	andre_dietrich$parser_combinators$Combine$map,
	author$project$Lia$Markdown$Quiz$Vector$Types$MultipleChoice,
	andre_dietrich$parser_combinators$Combine$many1(
		A2(
			andre_dietrich$parser_combinators$Combine$ignore,
			author$project$Lia$Parser$Helper$spaces,
			A2(andre_dietrich$parser_combinators$Combine$keep, author$project$Lia$Markdown$Quiz$Vector$Parser$multiple, author$project$Lia$Parser$Helper$spaces))));
var author$project$Lia$Markdown$Quiz$Vector$Parser$single = A2(author$project$Lia$Markdown$Quiz$Vector$Parser$elements, '(X)', '( )');
var author$project$Lia$Markdown$Quiz$Matrix$Parser$single = A2(
	andre_dietrich$parser_combinators$Combine$map,
	author$project$Lia$Markdown$Quiz$Vector$Types$SingleChoice,
	andre_dietrich$parser_combinators$Combine$many1(
		A2(
			andre_dietrich$parser_combinators$Combine$ignore,
			author$project$Lia$Parser$Helper$spaces,
			A2(andre_dietrich$parser_combinators$Combine$keep, author$project$Lia$Markdown$Quiz$Vector$Parser$single, author$project$Lia$Parser$Helper$spaces))));
var author$project$Lia$Markdown$Quiz$Vector$Parser$choices = function (parser) {
	return A2(
		andre_dietrich$parser_combinators$Combine$map,
		elm$core$List$unzip,
		andre_dietrich$parser_combinators$Combine$many1(
			A2(
				andre_dietrich$parser_combinators$Combine$ignore,
				author$project$Lia$Parser$Helper$newline,
				A2(
					andre_dietrich$parser_combinators$Combine$andMap,
					author$project$Lia$Markdown$Inline$Parser$line,
					A2(
						andre_dietrich$parser_combinators$Combine$ignore,
						andre_dietrich$parser_combinators$Combine$string(']'),
						A2(
							andre_dietrich$parser_combinators$Combine$map,
							elm$core$Tuple$pair,
							A2(
								andre_dietrich$parser_combinators$Combine$keep,
								parser,
								A2(
									andre_dietrich$parser_combinators$Combine$ignore,
									andre_dietrich$parser_combinators$Combine$string('['),
									A2(
										andre_dietrich$parser_combinators$Combine$ignore,
										author$project$Lia$Parser$Helper$spaces,
										andre_dietrich$parser_combinators$Combine$maybe(author$project$Lia$Parser$Context$indentation))))))))));
};
var author$project$Lia$Markdown$Quiz$Matrix$Parser$rows = author$project$Lia$Markdown$Quiz$Vector$Parser$choices(
	A2(andre_dietrich$parser_combinators$Combine$or, author$project$Lia$Markdown$Quiz$Matrix$Parser$single, author$project$Lia$Markdown$Quiz$Matrix$Parser$multiple));
var author$project$Lia$Markdown$Quiz$Matrix$Parser$parse = A2(
	andre_dietrich$parser_combinators$Combine$andMap,
	author$project$Lia$Markdown$Quiz$Matrix$Parser$rows,
	A2(andre_dietrich$parser_combinators$Combine$map, author$project$Lia$Markdown$Quiz$Matrix$Parser$quiz, author$project$Lia$Markdown$Quiz$Matrix$Parser$header));
var author$project$Lia$Markdown$Quiz$Parser$get_counter = andre_dietrich$parser_combinators$Combine$withState(
	function (s) {
		return andre_dietrich$parser_combinators$Combine$succeed(
			elm$core$Array$length(s.quiz_vector));
	});
var author$project$Lia$Markdown$Quiz$Parser$hints = andre_dietrich$parser_combinators$Combine$many(
	A2(
		andre_dietrich$parser_combinators$Combine$ignore,
		author$project$Lia$Parser$Helper$newline,
		A2(
			andre_dietrich$parser_combinators$Combine$keep,
			author$project$Lia$Markdown$Inline$Parser$line,
			A2(
				andre_dietrich$parser_combinators$Combine$ignore,
				andre_dietrich$parser_combinators$Combine$string('[[?]]'),
				A2(
					andre_dietrich$parser_combinators$Combine$ignore,
					author$project$Lia$Parser$Helper$spaces,
					andre_dietrich$parser_combinators$Combine$maybe(author$project$Lia$Parser$Context$indentation))))));
var author$project$Lia$Markdown$Quiz$Parser$maybeJS = A2(
	andre_dietrich$parser_combinators$Combine$keep,
	andre_dietrich$parser_combinators$Combine$maybe(
		A2(
			andre_dietrich$parser_combinators$Combine$ignore,
			author$project$Lia$Parser$Helper$newline,
			A2(andre_dietrich$parser_combinators$Combine$keep, author$project$Lia$Markdown$Inline$Parser$javascript, author$project$Lia$Parser$Helper$spaces))),
	A2(
		andre_dietrich$parser_combinators$Combine$ignore,
		andre_dietrich$parser_combinators$Combine$maybe(author$project$Lia$Parser$Context$indentation),
		author$project$Lia$Markdown$Macro$Parser$macro));
var author$project$Lia$Markdown$Quiz$Types$Quiz = F4(
	function (quiz, id, hints, javascript) {
		return {hints: hints, id: id, javascript: javascript, quiz: quiz};
	});
var author$project$Lia$Markdown$Quiz$Parser$adds = function (type_) {
	return A2(
		andre_dietrich$parser_combinators$Combine$andMap,
		author$project$Lia$Markdown$Quiz$Parser$maybeJS,
		A2(
			andre_dietrich$parser_combinators$Combine$andMap,
			author$project$Lia$Markdown$Quiz$Parser$hints,
			A2(
				andre_dietrich$parser_combinators$Combine$map,
				author$project$Lia$Markdown$Quiz$Types$Quiz(type_),
				author$project$Lia$Markdown$Quiz$Parser$get_counter)));
};
var author$project$Lia$Markdown$Quiz$Parser$empty = andre_dietrich$parser_combinators$Combine$skip(
	A2(
		andre_dietrich$parser_combinators$Combine$ignore,
		author$project$Lia$Parser$Helper$newline,
		A2(
			andre_dietrich$parser_combinators$Combine$ignore,
			andre_dietrich$parser_combinators$Combine$string('[[!]]'),
			A2(
				andre_dietrich$parser_combinators$Combine$ignore,
				author$project$Lia$Parser$Helper$spaces,
				andre_dietrich$parser_combinators$Combine$maybe(author$project$Lia$Parser$Context$indentation)))));
var author$project$Lia$Markdown$Quiz$Block$Types$initState = function (state) {
	if (state.$ === 'Text') {
		return author$project$Lia$Markdown$Quiz$Block$Types$Text('');
	} else {
		return A2(
			author$project$Lia$Markdown$Quiz$Block$Types$Select,
			false,
			_List_fromArray(
				[-1]));
	}
};
var author$project$Lia$Markdown$Quiz$Vector$Types$initState = function (state) {
	if (state.$ === 'SingleChoice') {
		var list = state.a;
		return author$project$Lia$Markdown$Quiz$Vector$Types$SingleChoice(
			A2(
				elm$core$List$map,
				function (_n1) {
					return false;
				},
				list));
	} else {
		var list = state.a;
		return author$project$Lia$Markdown$Quiz$Vector$Types$MultipleChoice(
			A2(
				elm$core$List$map,
				function (_n2) {
					return false;
				},
				list));
	}
};
var author$project$Lia$Markdown$Quiz$Matrix$Types$initState = elm$core$Array$map(author$project$Lia$Markdown$Quiz$Vector$Types$initState);
var author$project$Lia$Markdown$Quiz$Types$initState = function (quiz) {
	switch (quiz.$) {
		case 'Empty_Type':
			return author$project$Lia$Markdown$Quiz$Types$Empty_State;
		case 'Block_Type':
			var q = quiz.a;
			return author$project$Lia$Markdown$Quiz$Types$Block_State(
				author$project$Lia$Markdown$Quiz$Block$Types$initState(q.solution));
		case 'Vector_Type':
			var q = quiz.a;
			return author$project$Lia$Markdown$Quiz$Types$Vector_State(
				author$project$Lia$Markdown$Quiz$Vector$Types$initState(q.solution));
		default:
			var q = quiz.a;
			return author$project$Lia$Markdown$Quiz$Types$Matrix_State(
				author$project$Lia$Markdown$Quiz$Matrix$Types$initState(q.solution));
	}
};
var author$project$Lia$Markdown$Quiz$Parser$modify_State = function (q) {
	var add_state = F2(
		function (e, s) {
			return _Utils_update(
				s,
				{
					quiz_vector: A2(
						elm$core$Array$push,
						A5(author$project$Lia$Markdown$Quiz$Types$Element, author$project$Lia$Markdown$Quiz$Types$Open, e, 0, 0, ''),
						s.quiz_vector)
				});
		});
	return A2(
		andre_dietrich$parser_combinators$Combine$keep,
		andre_dietrich$parser_combinators$Combine$succeed(q),
		andre_dietrich$parser_combinators$Combine$modifyState(
			add_state(
				author$project$Lia$Markdown$Quiz$Types$initState(q.quiz))));
};
var author$project$Lia$Markdown$Quiz$Types$Block_Type = function (a) {
	return {$: 'Block_Type', a: a};
};
var author$project$Lia$Markdown$Quiz$Types$Empty_Type = {$: 'Empty_Type'};
var author$project$Lia$Markdown$Quiz$Types$Matrix_Type = function (a) {
	return {$: 'Matrix_Type', a: a};
};
var author$project$Lia$Markdown$Quiz$Types$Vector_Type = function (a) {
	return {$: 'Vector_Type', a: a};
};
var author$project$Lia$Markdown$Quiz$Vector$Parser$toQuiz = F2(
	function (fn, _n0) {
		var bools = _n0.a;
		var inlines = _n0.b;
		return A2(
			author$project$Lia$Markdown$Quiz$Vector$Types$Quiz,
			inlines,
			fn(bools));
	});
var author$project$Lia$Markdown$Quiz$Vector$Parser$parse = A2(
	andre_dietrich$parser_combinators$Combine$or,
	A2(
		andre_dietrich$parser_combinators$Combine$map,
		author$project$Lia$Markdown$Quiz$Vector$Parser$toQuiz(author$project$Lia$Markdown$Quiz$Vector$Types$SingleChoice),
		author$project$Lia$Markdown$Quiz$Vector$Parser$choices(author$project$Lia$Markdown$Quiz$Vector$Parser$single)),
	A2(
		andre_dietrich$parser_combinators$Combine$map,
		author$project$Lia$Markdown$Quiz$Vector$Parser$toQuiz(author$project$Lia$Markdown$Quiz$Vector$Types$MultipleChoice),
		author$project$Lia$Markdown$Quiz$Vector$Parser$choices(author$project$Lia$Markdown$Quiz$Vector$Parser$multiple)));
var author$project$Lia$Markdown$Quiz$Parser$parse = A2(
	andre_dietrich$parser_combinators$Combine$andThen,
	author$project$Lia$Markdown$Quiz$Parser$modify_State,
	A2(
		andre_dietrich$parser_combinators$Combine$andThen,
		author$project$Lia$Markdown$Quiz$Parser$adds,
		andre_dietrich$parser_combinators$Combine$choice(
			_List_fromArray(
				[
					A2(andre_dietrich$parser_combinators$Combine$map, author$project$Lia$Markdown$Quiz$Types$Matrix_Type, author$project$Lia$Markdown$Quiz$Matrix$Parser$parse),
					A2(andre_dietrich$parser_combinators$Combine$map, author$project$Lia$Markdown$Quiz$Types$Vector_Type, author$project$Lia$Markdown$Quiz$Vector$Parser$parse),
					A2(andre_dietrich$parser_combinators$Combine$onsuccess, author$project$Lia$Markdown$Quiz$Types$Empty_Type, author$project$Lia$Markdown$Quiz$Parser$empty),
					A2(andre_dietrich$parser_combinators$Combine$map, author$project$Lia$Markdown$Quiz$Types$Block_Type, author$project$Lia$Markdown$Quiz$Block$Parser$parse)
				]))));
var author$project$Lia$Markdown$Survey$Parser$add_state = F2(
	function (state, c) {
		return _Utils_update(
			c,
			{
				survey_vector: A2(
					elm$core$Array$push,
					_Utils_Tuple2(false, state),
					c.survey_vector)
			});
	});
var author$project$Lia$Markdown$Survey$Parser$modify_State = function (survey_) {
	var state = function () {
		var extractor = F2(
			function (fn, v) {
				return elm$core$Dict$fromList(
					A2(elm$core$List$map, fn, v));
			});
		var _n0 = survey_.survey;
		switch (_n0.$) {
			case 'Text':
				return author$project$Lia$Markdown$Survey$Types$Text_State('');
			case 'Select':
				return A2(author$project$Lia$Markdown$Survey$Types$Select_State, false, -1);
			case 'Vector':
				var bool = _n0.a;
				var vars = _n0.b;
				return A2(
					author$project$Lia$Markdown$Survey$Types$Vector_State,
					bool,
					A2(
						extractor,
						function (_n1) {
							var v = _n1.a;
							return _Utils_Tuple2(v, false);
						},
						vars));
			default:
				var bool = _n0.a;
				var vars = _n0.c;
				var qs = _n0.d;
				return A2(
					author$project$Lia$Markdown$Survey$Types$Matrix_State,
					bool,
					A2(
						elm$core$Array$repeat,
						elm$core$List$length(qs),
						A2(
							extractor,
							function (v) {
								return _Utils_Tuple2(v, false);
							},
							vars)));
		}
	}();
	return A2(
		andre_dietrich$parser_combinators$Combine$keep,
		andre_dietrich$parser_combinators$Combine$succeed(survey_),
		andre_dietrich$parser_combinators$Combine$modifyState(
			author$project$Lia$Markdown$Survey$Parser$add_state(state)));
};
var andre_dietrich$parser_combinators$Combine$brackets = A2(
	andre_dietrich$parser_combinators$Combine$between,
	andre_dietrich$parser_combinators$Combine$string('['),
	andre_dietrich$parser_combinators$Combine$string(']'));
var author$project$Lia$Markdown$Survey$Parser$pattern = function (p) {
	return A2(
		andre_dietrich$parser_combinators$Combine$ignore,
		andre_dietrich$parser_combinators$Combine$regex('][\t ]*'),
		A2(
			andre_dietrich$parser_combinators$Combine$keep,
			p,
			A2(
				andre_dietrich$parser_combinators$Combine$ignore,
				andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\['),
				andre_dietrich$parser_combinators$Combine$maybe(author$project$Lia$Parser$Context$indentation))));
};
var author$project$Lia$Markdown$Survey$Parser$header = F2(
	function (begin, end) {
		return A2(
			andre_dietrich$parser_combinators$Combine$ignore,
			author$project$Lia$Parser$Helper$newline,
			author$project$Lia$Markdown$Survey$Parser$pattern(
				andre_dietrich$parser_combinators$Combine$many1(
					A2(
						andre_dietrich$parser_combinators$Combine$keep,
						A2(
							andre_dietrich$parser_combinators$Combine$manyTill,
							author$project$Lia$Markdown$Inline$Parser$inlines,
							andre_dietrich$parser_combinators$Combine$string(end)),
						andre_dietrich$parser_combinators$Combine$string(begin)))));
	});
var author$project$Lia$Markdown$Survey$Parser$questions = andre_dietrich$parser_combinators$Combine$many1(
	A2(
		andre_dietrich$parser_combinators$Combine$ignore,
		author$project$Lia$Parser$Helper$newline,
		A2(
			andre_dietrich$parser_combinators$Combine$keep,
			author$project$Lia$Markdown$Inline$Parser$line,
			A2(
				andre_dietrich$parser_combinators$Combine$ignore,
				andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\[[\t ]+\\]'),
				andre_dietrich$parser_combinators$Combine$maybe(author$project$Lia$Parser$Context$indentation)))));
var author$project$Lia$Markdown$Survey$Parser$text_lines = A2(
	andre_dietrich$parser_combinators$Combine$ignore,
	author$project$Lia$Parser$Helper$newline,
	A2(
		andre_dietrich$parser_combinators$Combine$map,
		elm$core$List$length,
		author$project$Lia$Markdown$Survey$Parser$pattern(
			A2(
				andre_dietrich$parser_combinators$Combine$ignore,
				andre_dietrich$parser_combinators$Combine$string(']'),
				A2(
					andre_dietrich$parser_combinators$Combine$keep,
					andre_dietrich$parser_combinators$Combine$many1(
						andre_dietrich$parser_combinators$Combine$regex('_{3,}[\t ]*')),
					A2(
						andre_dietrich$parser_combinators$Combine$ignore,
						andre_dietrich$parser_combinators$Combine$string('['),
						A2(
							andre_dietrich$parser_combinators$Combine$ignore,
							author$project$Lia$Parser$Helper$spaces,
							andre_dietrich$parser_combinators$Combine$maybe(author$project$Lia$Parser$Context$indentation))))))));
var author$project$Lia$Markdown$Survey$Types$Matrix = F4(
	function (a, b, c, d) {
		return {$: 'Matrix', a: a, b: b, c: c, d: d};
	});
var author$project$Lia$Markdown$Survey$Parser$toMatrix = F2(
	function (bool, ids) {
		return A3(
			author$project$Lia$Markdown$Survey$Types$Matrix,
			bool,
			ids,
			A2(elm$core$List$map, author$project$Lia$Markdown$Inline$Stringify$stringify, ids));
	});
var author$project$Lia$Markdown$Survey$Types$Select = function (a) {
	return {$: 'Select', a: a};
};
var author$project$Lia$Markdown$Survey$Parser$toSelect = function (quiz) {
	var _n0 = quiz.solution;
	if ((_n0.$ === 'Select') && (!_n0.b.b)) {
		return andre_dietrich$parser_combinators$Combine$succeed(
			author$project$Lia$Markdown$Survey$Types$Select(quiz.options));
	} else {
		return andre_dietrich$parser_combinators$Combine$fail('');
	}
};
var author$project$Lia$Markdown$Survey$Parser$id_str = andre_dietrich$parser_combinators$Combine$regex('\\w(\\w+| )*');
var author$project$Lia$Markdown$Survey$Parser$question = function (p) {
	return A2(
		andre_dietrich$parser_combinators$Combine$ignore,
		author$project$Lia$Parser$Helper$newline,
		A2(
			andre_dietrich$parser_combinators$Combine$andMap,
			author$project$Lia$Markdown$Inline$Parser$line,
			A2(andre_dietrich$parser_combinators$Combine$map, elm$core$Tuple$pair, p)));
};
var author$project$Lia$Markdown$Survey$Parser$vector = function (p) {
	return andre_dietrich$parser_combinators$Combine$many1(
		author$project$Lia$Markdown$Survey$Parser$question(
			author$project$Lia$Markdown$Survey$Parser$pattern(
				p(author$project$Lia$Markdown$Survey$Parser$id_str))));
};
var author$project$Lia$Markdown$Survey$Types$Survey = F3(
	function (survey, id, javascript) {
		return {id: id, javascript: javascript, survey: survey};
	});
var author$project$Lia$Markdown$Survey$Types$Text = function (a) {
	return {$: 'Text', a: a};
};
var author$project$Lia$Markdown$Survey$Types$Vector = F2(
	function (a, b) {
		return {$: 'Vector', a: a, b: b};
	});
var author$project$Lia$Markdown$Survey$Parser$survey = A2(
	andre_dietrich$parser_combinators$Combine$andMap,
	author$project$Lia$Markdown$Quiz$Parser$maybeJS,
	A2(
		andre_dietrich$parser_combinators$Combine$andMap,
		andre_dietrich$parser_combinators$Combine$withState(
			A2(
				elm$core$Basics$composeR,
				function ($) {
					return $.survey_vector;
				},
				A2(elm$core$Basics$composeR, elm$core$Array$length, andre_dietrich$parser_combinators$Combine$succeed))),
		A2(
			andre_dietrich$parser_combinators$Combine$map,
			author$project$Lia$Markdown$Survey$Types$Survey,
			andre_dietrich$parser_combinators$Combine$choice(
				_List_fromArray(
					[
						A2(andre_dietrich$parser_combinators$Combine$map, author$project$Lia$Markdown$Survey$Types$Text, author$project$Lia$Markdown$Survey$Parser$text_lines),
						A2(andre_dietrich$parser_combinators$Combine$andThen, author$project$Lia$Markdown$Survey$Parser$toSelect, author$project$Lia$Markdown$Quiz$Block$Parser$parse),
						A2(
						andre_dietrich$parser_combinators$Combine$map,
						author$project$Lia$Markdown$Survey$Types$Vector(false),
						author$project$Lia$Markdown$Survey$Parser$vector(andre_dietrich$parser_combinators$Combine$parens)),
						A2(
						andre_dietrich$parser_combinators$Combine$map,
						author$project$Lia$Markdown$Survey$Types$Vector(true),
						author$project$Lia$Markdown$Survey$Parser$vector(andre_dietrich$parser_combinators$Combine$brackets)),
						A2(
						andre_dietrich$parser_combinators$Combine$andMap,
						author$project$Lia$Markdown$Survey$Parser$questions,
						A2(
							andre_dietrich$parser_combinators$Combine$map,
							author$project$Lia$Markdown$Survey$Parser$toMatrix(false),
							A2(author$project$Lia$Markdown$Survey$Parser$header, '(', ')'))),
						A2(
						andre_dietrich$parser_combinators$Combine$andMap,
						author$project$Lia$Markdown$Survey$Parser$questions,
						A2(
							andre_dietrich$parser_combinators$Combine$map,
							author$project$Lia$Markdown$Survey$Parser$toMatrix(true),
							A2(author$project$Lia$Markdown$Survey$Parser$header, '[', ']')))
					])))));
var author$project$Lia$Markdown$Survey$Parser$parse = A2(andre_dietrich$parser_combinators$Combine$andThen, author$project$Lia$Markdown$Survey$Parser$modify_State, author$project$Lia$Markdown$Survey$Parser$survey);
var author$project$Lia$Markdown$Types$BulletList = F2(
	function (a, b) {
		return {$: 'BulletList', a: a, b: b};
	});
var author$project$Lia$Markdown$Types$Chart = F2(
	function (a, b) {
		return {$: 'Chart', a: a, b: b};
	});
var author$project$Lia$Markdown$Types$Code = F2(
	function (a, b) {
		return {$: 'Code', a: a, b: b};
	});
var author$project$Lia$Markdown$Types$Effect = F2(
	function (a, b) {
		return {$: 'Effect', a: a, b: b};
	});
var author$project$Lia$Markdown$Types$OrderedList = F2(
	function (a, b) {
		return {$: 'OrderedList', a: a, b: b};
	});
var author$project$Lia$Markdown$Types$Quiz = F3(
	function (a, b, c) {
		return {$: 'Quiz', a: a, b: b, c: c};
	});
var author$project$Lia$Markdown$Types$Quote = F2(
	function (a, b) {
		return {$: 'Quote', a: a, b: b};
	});
var author$project$Lia$Markdown$Types$Survey = F2(
	function (a, b) {
		return {$: 'Survey', a: a, b: b};
	});
function author$project$Lia$Markdown$Parser$cyclic$unordered_list() {
	return A2(
		andre_dietrich$parser_combinators$Combine$andMap,
		andre_dietrich$parser_combinators$Combine$many1(
			A2(
				andre_dietrich$parser_combinators$Combine$ignore,
				author$project$Lia$Parser$Context$indentation_pop,
				A2(
					andre_dietrich$parser_combinators$Combine$keep,
					andre_dietrich$parser_combinators$Combine$many1(
						A2(
							andre_dietrich$parser_combinators$Combine$ignore,
							andre_dietrich$parser_combinators$Combine$regex('\\n?'),
							author$project$Lia$Markdown$Parser$cyclic$blocks())),
					A2(
						andre_dietrich$parser_combinators$Combine$ignore,
						author$project$Lia$Parser$Context$indentation_append('  '),
						andre_dietrich$parser_combinators$Combine$regex('[*+-] '))))),
		A2(andre_dietrich$parser_combinators$Combine$map, author$project$Lia$Markdown$Types$BulletList, author$project$Lia$Markdown$Parser$md_annotations));
}
function author$project$Lia$Markdown$Parser$cyclic$solution() {
	var rslt = F3(
		function (e1, blocks_, e2) {
			return _Utils_Tuple2(blocks_, e2 - e1);
		});
	return andre_dietrich$parser_combinators$Combine$maybe(
		A2(
			andre_dietrich$parser_combinators$Combine$andMap,
			andre_dietrich$parser_combinators$Combine$withState(
				function (s) {
					return andre_dietrich$parser_combinators$Combine$succeed(s.effect_model.effects);
				}),
			A2(
				andre_dietrich$parser_combinators$Combine$andMap,
				A2(
					andre_dietrich$parser_combinators$Combine$manyTill,
					A2(
						andre_dietrich$parser_combinators$Combine$ignore,
						author$project$Lia$Parser$Helper$newlines,
						author$project$Lia$Markdown$Parser$cyclic$blocks()),
					A2(
						andre_dietrich$parser_combinators$Combine$ignore,
						andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\*{3,}[\t ]*'),
						author$project$Lia$Parser$Context$indentation)),
				A2(
					andre_dietrich$parser_combinators$Combine$map,
					rslt,
					A2(
						andre_dietrich$parser_combinators$Combine$keep,
						andre_dietrich$parser_combinators$Combine$withState(
							function (s) {
								return andre_dietrich$parser_combinators$Combine$succeed(s.effect_model.effects);
							}),
						A2(
							andre_dietrich$parser_combinators$Combine$ignore,
							andre_dietrich$parser_combinators$Combine$regex('[\t ]*\\*{3,}[\t ]*\\n+'),
							author$project$Lia$Parser$Context$indentation))))));
}
function author$project$Lia$Markdown$Parser$cyclic$quote() {
	return A2(
		andre_dietrich$parser_combinators$Combine$andMap,
		A2(
			andre_dietrich$parser_combinators$Combine$ignore,
			author$project$Lia$Parser$Context$indentation_pop,
			A2(
				andre_dietrich$parser_combinators$Combine$keep,
				andre_dietrich$parser_combinators$Combine$many1(
					A2(
						andre_dietrich$parser_combinators$Combine$ignore,
						andre_dietrich$parser_combinators$Combine$regex('\\n?'),
						A2(
							andre_dietrich$parser_combinators$Combine$ignore,
							andre_dietrich$parser_combinators$Combine$maybe(author$project$Lia$Parser$Context$indentation),
							author$project$Lia$Markdown$Parser$cyclic$blocks()))),
				A2(
					andre_dietrich$parser_combinators$Combine$ignore,
					author$project$Lia$Parser$Context$indentation_append('> ?'),
					andre_dietrich$parser_combinators$Combine$string('> ')))),
		A2(andre_dietrich$parser_combinators$Combine$map, author$project$Lia$Markdown$Types$Quote, author$project$Lia$Markdown$Parser$md_annotations));
}
function author$project$Lia$Markdown$Parser$cyclic$ordered_list() {
	return A2(
		andre_dietrich$parser_combinators$Combine$andMap,
		andre_dietrich$parser_combinators$Combine$many1(
			A2(
				andre_dietrich$parser_combinators$Combine$ignore,
				author$project$Lia$Parser$Context$indentation_pop,
				A2(
					andre_dietrich$parser_combinators$Combine$keep,
					andre_dietrich$parser_combinators$Combine$many1(
						A2(
							andre_dietrich$parser_combinators$Combine$ignore,
							andre_dietrich$parser_combinators$Combine$regex('\\n?'),
							author$project$Lia$Markdown$Parser$cyclic$blocks())),
					A2(
						andre_dietrich$parser_combinators$Combine$ignore,
						author$project$Lia$Parser$Context$indentation_append('   '),
						andre_dietrich$parser_combinators$Combine$regex('\\d+\\. '))))),
		A2(andre_dietrich$parser_combinators$Combine$map, author$project$Lia$Markdown$Types$OrderedList, author$project$Lia$Markdown$Parser$md_annotations));
}
function author$project$Lia$Markdown$Parser$cyclic$blocks() {
	return andre_dietrich$parser_combinators$Combine$lazy(
		function (_n0) {
			var b = andre_dietrich$parser_combinators$Combine$choice(
				_List_fromArray(
					[
						A2(
						andre_dietrich$parser_combinators$Combine$andMap,
						author$project$Lia$Markdown$Effect$Parser$markdown(
							author$project$Lia$Markdown$Parser$cyclic$blocks()),
						A2(andre_dietrich$parser_combinators$Combine$map, author$project$Lia$Markdown$Types$Effect, author$project$Lia$Markdown$Parser$md_annotations)),
						A2(
						andre_dietrich$parser_combinators$Combine$andThen,
						author$project$Lia$Markdown$Parser$to_comment,
						A2(
							andre_dietrich$parser_combinators$Combine$andMap,
							author$project$Lia$Markdown$Effect$Parser$comment(author$project$Lia$Markdown$Parser$paragraph),
							A2(andre_dietrich$parser_combinators$Combine$map, elm$core$Tuple$pair, author$project$Lia$Markdown$Parser$md_annotations))),
						A2(
						andre_dietrich$parser_combinators$Combine$andMap,
						author$project$Lia$Markdown$Chart$Parser$parse,
						A2(andre_dietrich$parser_combinators$Combine$map, author$project$Lia$Markdown$Types$Chart, author$project$Lia$Markdown$Parser$md_annotations)),
						author$project$Lia$Markdown$Parser$formated_table,
						author$project$Lia$Markdown$Parser$simple_table,
						author$project$Lia$Markdown$Parser$svgbob,
						A2(
						andre_dietrich$parser_combinators$Combine$andMap,
						author$project$Lia$Markdown$Code$Parser$parse,
						A2(andre_dietrich$parser_combinators$Combine$map, author$project$Lia$Markdown$Types$Code, author$project$Lia$Markdown$Parser$md_annotations)),
						author$project$Lia$Markdown$Parser$cyclic$quote(),
						author$project$Lia$Markdown$Parser$horizontal_line,
						A2(
						andre_dietrich$parser_combinators$Combine$andMap,
						author$project$Lia$Markdown$Survey$Parser$parse,
						A2(andre_dietrich$parser_combinators$Combine$map, author$project$Lia$Markdown$Types$Survey, author$project$Lia$Markdown$Parser$md_annotations)),
						A2(
						andre_dietrich$parser_combinators$Combine$andMap,
						author$project$Lia$Markdown$Parser$cyclic$solution(),
						A2(
							andre_dietrich$parser_combinators$Combine$andMap,
							author$project$Lia$Markdown$Quiz$Parser$parse,
							A2(andre_dietrich$parser_combinators$Combine$map, author$project$Lia$Markdown$Types$Quiz, author$project$Lia$Markdown$Parser$md_annotations))),
						author$project$Lia$Markdown$Parser$cyclic$ordered_list(),
						author$project$Lia$Markdown$Parser$cyclic$unordered_list(),
						A2(
						andre_dietrich$parser_combinators$Combine$andMap,
						author$project$Lia$Markdown$Parser$paragraph,
						A2(andre_dietrich$parser_combinators$Combine$map, author$project$Lia$Markdown$Types$Paragraph, author$project$Lia$Markdown$Parser$md_annotations))
					]));
			return A2(
				andre_dietrich$parser_combinators$Combine$ignore,
				andre_dietrich$parser_combinators$Combine$maybe(
					A2(andre_dietrich$parser_combinators$Combine$keep, author$project$Lia$Markdown$Effect$Parser$hidden_comment, andre_dietrich$parser_combinators$Combine$whitespace)),
				A2(
					andre_dietrich$parser_combinators$Combine$keep,
					b,
					A2(andre_dietrich$parser_combinators$Combine$keep, author$project$Lia$Markdown$Macro$Parser$macro, author$project$Lia$Parser$Context$indentation)));
		});
}
try {
	var author$project$Lia$Markdown$Parser$unordered_list = author$project$Lia$Markdown$Parser$cyclic$unordered_list();
	author$project$Lia$Markdown$Parser$cyclic$unordered_list = function () {
		return author$project$Lia$Markdown$Parser$unordered_list;
	};
	var author$project$Lia$Markdown$Parser$solution = author$project$Lia$Markdown$Parser$cyclic$solution();
	author$project$Lia$Markdown$Parser$cyclic$solution = function () {
		return author$project$Lia$Markdown$Parser$solution;
	};
	var author$project$Lia$Markdown$Parser$quote = author$project$Lia$Markdown$Parser$cyclic$quote();
	author$project$Lia$Markdown$Parser$cyclic$quote = function () {
		return author$project$Lia$Markdown$Parser$quote;
	};
	var author$project$Lia$Markdown$Parser$ordered_list = author$project$Lia$Markdown$Parser$cyclic$ordered_list();
	author$project$Lia$Markdown$Parser$cyclic$ordered_list = function () {
		return author$project$Lia$Markdown$Parser$ordered_list;
	};
	var author$project$Lia$Markdown$Parser$blocks = author$project$Lia$Markdown$Parser$cyclic$blocks();
	author$project$Lia$Markdown$Parser$cyclic$blocks = function () {
		return author$project$Lia$Markdown$Parser$blocks;
	};
} catch ($) {
throw 'Some top-level definitions from `Lia.Markdown.Parser` are causing infinite recursion:\n\n  ┌─────┐\n  │    unordered_list\n  │     ↓\n  │    solution\n  │     ↓\n  │    quote\n  │     ↓\n  │    ordered_list\n  │     ↓\n  │    blocks\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.0/halting-problem to learn how to fix it!';}
var author$project$Lia$Markdown$Footnote$Parser$block = function (p) {
	return A2(
		andre_dietrich$parser_combinators$Combine$andThen,
		author$project$Lia$Markdown$Footnote$Parser$add_footnote,
		A2(
			andre_dietrich$parser_combinators$Combine$andMap,
			p,
			A2(
				andre_dietrich$parser_combinators$Combine$ignore,
				author$project$Lia$Parser$Context$indentation_append('   '),
				A2(
					andre_dietrich$parser_combinators$Combine$map,
					elm$core$Tuple$pair,
					A2(
						andre_dietrich$parser_combinators$Combine$keep,
						author$project$Lia$Parser$Helper$stringTill(
							andre_dietrich$parser_combinators$Combine$string(']:')),
						andre_dietrich$parser_combinators$Combine$string('[^'))))));
};
var author$project$Lia$Markdown$Parser$ident_blocks = A2(
	andre_dietrich$parser_combinators$Combine$ignore,
	author$project$Lia$Parser$Context$indentation_pop,
	andre_dietrich$parser_combinators$Combine$many1(
		A2(
			andre_dietrich$parser_combinators$Combine$ignore,
			andre_dietrich$parser_combinators$Combine$regex('\\n?'),
			author$project$Lia$Markdown$Parser$blocks)));
var author$project$Lia$Markdown$Parser$footnotes = andre_dietrich$parser_combinators$Combine$skip(
	andre_dietrich$parser_combinators$Combine$many(
		A2(
			andre_dietrich$parser_combinators$Combine$ignore,
			author$project$Lia$Parser$Helper$newlines,
			author$project$Lia$Markdown$Footnote$Parser$block(author$project$Lia$Markdown$Parser$ident_blocks))));
var author$project$Lia$Markdown$Parser$run = A2(
	andre_dietrich$parser_combinators$Combine$ignore,
	author$project$Lia$Markdown$Parser$footnotes,
	andre_dietrich$parser_combinators$Combine$many(
		A2(
			andre_dietrich$parser_combinators$Combine$ignore,
			author$project$Lia$Parser$Helper$newlines,
			A2(andre_dietrich$parser_combinators$Combine$keep, author$project$Lia$Markdown$Parser$blocks, author$project$Lia$Markdown$Parser$footnotes))));
var author$project$Lia$Parser$Parser$parse_section = F3(
	function (search_index, global, section) {
		var _n0 = A3(
			andre_dietrich$parser_combinators$Combine$runParser,
			A2(andre_dietrich$parser_combinators$Combine$keep, author$project$Lia$Markdown$Parser$run, author$project$Lia$Definition$Parser$parse),
			A2(
				author$project$Lia$Parser$Context$init,
				search_index,
				_Utils_update(
					global,
					{section: section.idx})),
			section.code);
		if (_n0.$ === 'Ok') {
			var _n1 = _n0.a;
			var state = _n1.a;
			var es = _n1.c;
			return elm$core$Result$Ok(
				_Utils_update(
					section,
					{
						body: es,
						code_vector: state.code_vector,
						definition: state.defines_updated ? elm$core$Maybe$Just(state.defines) : elm$core$Maybe$Nothing,
						effect_model: state.effect_model,
						error: elm$core$Maybe$Nothing,
						footnotes: state.footnotes,
						parsed: true,
						quiz_vector: state.quiz_vector,
						survey_vector: state.survey_vector,
						visited: true
					}));
		} else {
			var _n2 = _n0.a;
			var stream = _n2.b;
			var ms = _n2.c;
			return elm$core$Result$Err(
				A2(author$project$Lia$Parser$Parser$formatError, ms, stream));
		}
	});
var author$project$Lia$Update$add_load = F4(
	function (length, idx, vector, logs) {
		return (!length) ? logs : A2(
			elm$core$List$cons,
			A3(
				author$project$Port$Event$Event,
				'load',
				idx,
				elm$json$Json$Encode$string(vector)),
			logs);
	});
var author$project$Lia$Update$set_active_section = F2(
	function (model, section) {
		return _Utils_update(
			model,
			{
				sections: A3(elm$core$Array$set, model.section_active, section, model.sections)
			});
	});
var author$project$Lia$Update$generate = function (model) {
	var _n0 = author$project$Lia$Update$get_active_section(model);
	if (_n0.$ === 'Just') {
		var sec = _n0.a;
		var section = function () {
			if (sec.parsed) {
				var effects = sec.effect_model;
				return _Utils_update(
					sec,
					{
						effect_model: _Utils_update(
							effects,
							{visible: 0})
					});
			} else {
				var _n2 = A3(author$project$Lia$Parser$Parser$parse_section, model.search_index, model.definition, sec);
				if (_n2.$ === 'Ok') {
					var new_sec = _n2.a;
					return new_sec;
				} else {
					var msg = _n2.a;
					return _Utils_update(
						sec,
						{
							body: _List_Nil,
							error: elm$core$Maybe$Just(msg)
						});
				}
			}
		}();
		var _n1 = A2(
			author$project$Lia$Model$load_src,
			model.resource,
			A2(
				elm$core$Maybe$withDefault,
				_List_Nil,
				A2(
					elm$core$Maybe$map,
					function ($) {
						return $.resources;
					},
					section.definition)));
		var resource = _n1.a;
		var logs = _n1.b;
		return A2(
			author$project$Lia$Update$set_active_section,
			_Utils_update(
				model,
				{
					resource: resource,
					to_do: A4(
						author$project$Lia$Update$add_load,
						elm$core$Array$length(section.survey_vector),
						model.section_active,
						'survey',
						A4(
							author$project$Lia$Update$add_load,
							elm$core$Array$length(section.code_vector),
							model.section_active,
							'code',
							A4(
								author$project$Lia$Update$add_load,
								elm$core$Array$length(section.quiz_vector),
								model.section_active,
								'quiz',
								A2(elm$core$List$append, logs, model.to_do))))
				}),
			section);
	} else {
		return model;
	}
};
var author$project$Lia$Update$send = F2(
	function (idx, events) {
		return A2(
			elm$core$List$map,
			function (_n0) {
				var name = _n0.a;
				var json = _n0.b;
				return A3(author$project$Port$Event$Event, name, idx, json);
			},
			events);
	});
var author$project$Lia$Update$speak = function (model) {
	return model.settings.initialized && model.settings.sound;
};
var author$project$Port$Event$decode = function (json) {
	return A2(
		elm$json$Json$Decode$decodeValue,
		A4(
			elm$json$Json$Decode$map3,
			author$project$Port$Event$Event,
			A2(elm$json$Json$Decode$field, 'topic', elm$json$Json$Decode$string),
			A2(elm$json$Json$Decode$field, 'section', elm$json$Json$Decode$int),
			A2(elm$json$Json$Decode$field, 'message', elm$json$Json$Decode$value)),
		json);
};
var author$project$Lia$Update$update = F2(
	function (msg, model) {
		update:
		while (true) {
			switch (msg.$) {
				case 'Load':
					var idx = msg.a;
					return ((_Utils_cmp(-1, idx) < 0) && (_Utils_cmp(
						idx,
						elm$core$Array$length(model.sections)) < 0)) ? _Utils_Tuple3(
						_Utils_update(
							model,
							{load_slide: idx + 1, section_active: idx}),
						elm$core$Platform$Cmd$none,
						_List_fromArray(
							[
								A3(
								author$project$Port$Event$Event,
								'persistent',
								idx,
								elm$json$Json$Encode$string('store'))
							])) : _Utils_Tuple3(model, elm$core$Platform$Cmd$none, _List_Nil);
				case 'UpdateSettings':
					var childMsg = msg.a;
					var _n1 = A2(author$project$Lia$Settings$Update$update, childMsg, model.settings);
					var settings = _n1.a;
					var events = _n1.b;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{settings: settings}),
						elm$core$Platform$Cmd$none,
						events);
				case 'UpdateIndex':
					var childMsg = msg.a;
					var _n2 = A2(author$project$Lia$Index$Update$update, childMsg, model.sections);
					var index = _n2.a;
					var sections = _n2.b;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{index_model: index, sections: sections}),
						elm$core$Platform$Cmd$none,
						_List_Nil);
				case 'Handle':
					var event = msg.a;
					var _n3 = event.topic;
					switch (_n3) {
						case 'settings':
							var _n4 = author$project$Port$Event$decode(event.message);
							if (_n4.$ === 'Ok') {
								var e = _n4.a;
								var $temp$msg = author$project$Lia$Update$UpdateSettings(
									author$project$Lia$Settings$Update$handle(e)),
									$temp$model = model;
								msg = $temp$msg;
								model = $temp$model;
								continue update;
							} else {
								return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, _List_Nil);
							}
						case 'load':
							var $temp$msg = author$project$Lia$Update$InitSection,
								$temp$model = author$project$Lia$Update$generate(model);
							msg = $temp$msg;
							model = $temp$model;
							continue update;
						case 'reset':
							return _Utils_Tuple3(
								model,
								elm$core$Platform$Cmd$none,
								_List_fromArray(
									[
										A3(author$project$Port$Event$Event, 'reset', -1, elm$json$Json$Encode$null)
									]));
						default:
							var _n5 = _Utils_Tuple2(
								A2(elm$core$Array$get, event.section, model.sections),
								author$project$Port$Event$decode(event.message));
							if ((_n5.a.$ === 'Just') && (_n5.b.$ === 'Ok')) {
								var sec = _n5.a.a;
								var e = _n5.b.a;
								var _n6 = A3(author$project$Lia$Markdown$Update$handle, event.topic, e, sec);
								var sec_ = _n6.a;
								var cmd_ = _n6.b;
								var events = _n6.c;
								return _Utils_Tuple3(
									_Utils_update(
										model,
										{
											sections: A3(elm$core$Array$set, event.section, sec_, model.sections)
										}),
									A2(elm$core$Platform$Cmd$map, author$project$Lia$Update$UpdateMarkdown, cmd_),
									A2(author$project$Lia$Update$send, event.section, events));
							} else {
								return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, _List_Nil);
							}
					}
				default:
					var _n7 = _Utils_Tuple2(
						msg,
						author$project$Lia$Update$get_active_section(model));
					_n7$4:
					while (true) {
						if (_n7.b.$ === 'Just') {
							switch (_n7.a.$) {
								case 'UpdateMarkdown':
									var childMsg = _n7.a.a;
									var sec = _n7.b.a;
									var _n8 = A2(author$project$Lia$Markdown$Update$update, childMsg, sec);
									var section = _n8.a;
									var cmd_ = _n8.b;
									var log_ = _n8.c;
									return _Utils_Tuple3(
										A2(author$project$Lia$Update$set_active_section, model, section),
										A2(elm$core$Platform$Cmd$map, author$project$Lia$Update$UpdateMarkdown, cmd_),
										A2(author$project$Lia$Update$send, model.section_active, log_));
								case 'NextSection':
									var _n9 = _n7.a;
									var sec = _n7.b.a;
									if (_Utils_eq(model.settings.mode, author$project$Lia$Settings$Model$Textbook) || (!author$project$Lia$Markdown$Effect$Update$has_next(sec.effect_model))) {
										var $temp$msg = author$project$Lia$Update$Load(model.section_active + 1),
											$temp$model = model;
										msg = $temp$msg;
										model = $temp$model;
										continue update;
									} else {
										var _n10 = A2(
											author$project$Lia$Markdown$Update$nextEffect,
											author$project$Lia$Update$speak(model),
											sec);
										var sec_ = _n10.a;
										var cmd_ = _n10.b;
										var log_ = _n10.c;
										return _Utils_Tuple3(
											A2(author$project$Lia$Update$set_active_section, model, sec_),
											A2(elm$core$Platform$Cmd$map, author$project$Lia$Update$UpdateMarkdown, cmd_),
											A2(author$project$Lia$Update$send, model.section_active, log_));
									}
								case 'PrevSection':
									var _n11 = _n7.a;
									var sec = _n7.b.a;
									if (_Utils_eq(model.settings.mode, author$project$Lia$Settings$Model$Textbook) || (!author$project$Lia$Markdown$Effect$Update$has_previous(sec.effect_model))) {
										var $temp$msg = author$project$Lia$Update$Load(model.section_active - 1),
											$temp$model = model;
										msg = $temp$msg;
										model = $temp$model;
										continue update;
									} else {
										var _n12 = A2(
											author$project$Lia$Markdown$Update$previousEffect,
											author$project$Lia$Update$speak(model),
											sec);
										var sec_ = _n12.a;
										var cmd_ = _n12.b;
										var log_ = _n12.c;
										return _Utils_Tuple3(
											A2(author$project$Lia$Update$set_active_section, model, sec_),
											A2(elm$core$Platform$Cmd$map, author$project$Lia$Update$UpdateMarkdown, cmd_),
											A2(author$project$Lia$Update$send, model.section_active, log_));
									}
								case 'InitSection':
									var _n13 = _n7.a;
									var sec = _n7.b.a;
									var _n14 = function () {
										var _n15 = model.settings.mode;
										if (_n15.$ === 'Textbook') {
											return A3(author$project$Lia$Markdown$Update$initEffect, true, false, sec);
										} else {
											return A3(
												author$project$Lia$Markdown$Update$initEffect,
												false,
												author$project$Lia$Update$speak(model),
												sec);
										}
									}();
									var sec_ = _n14.a;
									var cmd_ = _n14.b;
									var log_ = _n14.c;
									return _Utils_Tuple3(
										A2(
											author$project$Lia$Update$set_active_section,
											_Utils_update(
												model,
												{to_do: _List_Nil}),
											sec_),
										A2(elm$core$Platform$Cmd$map, author$project$Lia$Update$UpdateMarkdown, cmd_),
										A2(
											elm$core$List$cons,
											A3(author$project$Port$Event$Event, 'slide', model.section_active, elm$json$Json$Encode$null),
											A2(
												elm$core$List$append,
												A2(author$project$Lia$Update$send, model.section_active, log_),
												model.to_do)));
								default:
									break _n7$4;
							}
						} else {
							break _n7$4;
						}
					}
					return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, _List_Nil);
			}
		}
	});
var author$project$Lia$Script$load_slide = F2(
	function (idx, model) {
		return A2(
			author$project$Lia$Update$update,
			author$project$Lia$Update$Load(idx),
			model);
	});
var author$project$Lia$Script$pages = A2(
	elm$core$Basics$composeR,
	function ($) {
		return $.sections;
	},
	elm$core$Array$length);
var andre_dietrich$parser_combinators$Combine$currentColumn = A2(
	elm$core$Basics$composeR,
	andre_dietrich$parser_combinators$Combine$currentLocation,
	function ($) {
		return $.column;
	});
var andre_dietrich$parser_combinators$Combine$withColumn = function (f) {
	return andre_dietrich$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					andre_dietrich$parser_combinators$Combine$app,
					f(
						andre_dietrich$parser_combinators$Combine$currentColumn(stream)),
					state,
					stream);
			}));
};
var author$project$Lia$Parser$Preprocessor$check = function (c) {
	return c ? andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0) : andre_dietrich$parser_combinators$Combine$fail('');
};
var author$project$Lia$Parser$Preprocessor$body = A2(
	andre_dietrich$parser_combinators$Combine$map,
	elm$core$String$concat,
	andre_dietrich$parser_combinators$Combine$many(
		andre_dietrich$parser_combinators$Combine$choice(
			_List_fromArray(
				[
					andre_dietrich$parser_combinators$Combine$regex('(?:[^#`<]+|[\\x0D\n]+|<!--[\\S\\s]*?-->)'),
					andre_dietrich$parser_combinators$Combine$regex('(`{3,})[\\S\\s]*?\\1'),
					andre_dietrich$parser_combinators$Combine$regex('`.+?`'),
					andre_dietrich$parser_combinators$Combine$regex('(?:<([\\w+\\-]+)[\\S\\s]*?</\\2>|`|<)'),
					A2(
					andre_dietrich$parser_combinators$Combine$keep,
					andre_dietrich$parser_combinators$Combine$string('#'),
					andre_dietrich$parser_combinators$Combine$withColumn(author$project$Lia$Parser$Preprocessor$check))
				]))));
var author$project$Lia$Parser$Preprocessor$title_str = A2(andre_dietrich$parser_combinators$Combine$ignore, author$project$Lia$Parser$Helper$newline, author$project$Lia$Markdown$Inline$Parser$line);
var author$project$Lia$Parser$Preprocessor$title_tag = A2(
	andre_dietrich$parser_combinators$Combine$map,
	elm$core$String$length,
	andre_dietrich$parser_combinators$Combine$regex('#+'));
var author$project$Lia$Parser$Preprocessor$section = A2(
	andre_dietrich$parser_combinators$Combine$andMap,
	author$project$Lia$Parser$Preprocessor$body,
	A2(
		andre_dietrich$parser_combinators$Combine$andMap,
		author$project$Lia$Parser$Preprocessor$title_str,
		A2(andre_dietrich$parser_combinators$Combine$map, author$project$Lia$Types$SectionBase, author$project$Lia$Parser$Preprocessor$title_tag)));
var author$project$Lia$Parser$Parser$parse_titles = F2(
	function (defines, code) {
		var _n0 = A3(
			andre_dietrich$parser_combinators$Combine$runParser,
			author$project$Lia$Parser$Preprocessor$section,
			A2(author$project$Lia$Parser$Context$init, elm$core$Basics$identity, defines),
			code);
		if (_n0.$ === 'Ok') {
			var _n1 = _n0.a;
			var data = _n1.b;
			var rslt = _n1.c;
			return elm$core$Result$Ok(
				_Utils_Tuple2(rslt, data.input));
		} else {
			var _n2 = _n0.a;
			var stream = _n2.b;
			var ms = _n2.c;
			return elm$core$Result$Err(
				A2(author$project$Lia$Parser$Parser$formatError, ms, stream));
		}
	});
var author$project$Lia$Script$parse_section = F2(
	function (model, code) {
		var _n0 = A2(author$project$Lia$Parser$Parser$parse_titles, model.definition, code);
		if (_n0.$ === 'Ok') {
			var _n1 = _n0.a;
			var sec = _n1.a;
			var rest = _n1.b;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						sections: A2(
							elm$core$Array$push,
							A2(
								author$project$Lia$Types$init_section,
								author$project$Lia$Script$pages(model),
								sec),
							model.sections)
					}),
				elm$core$String$isEmpty(rest) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(rest));
		} else {
			var msg = _n0.a;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						error: elm$core$Maybe$Just(msg)
					}),
				elm$core$Maybe$Nothing);
		}
	});
var author$project$Lia$Script$update = author$project$Lia$Update$update;
var author$project$Update$LiaStart = {$: 'LiaStart'};
var author$project$Update$UpdateIndex = function (a) {
	return {$: 'UpdateIndex', a: a};
};
var author$project$Update$parse_error = function (msg) {
	switch (msg.$) {
		case 'BadUrl':
			var url = msg.a;
			return 'Bad Url ' + url;
		case 'Timeout':
			return 'Network timeout';
		case 'BadStatus':
			var _int = msg.a;
			return 'Bad status ' + elm$core$String$fromInt(_int);
		case 'NetworkError':
			return 'Network error';
		default:
			var body = msg.a;
			return 'Bad body ' + body;
	}
};
var author$project$Lia$Definition$Json$Encode$encResource = function (r) {
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				function () {
				if (r.$ === 'Link') {
					var url = r.a;
					return _Utils_Tuple2(
						'Link',
						elm$json$Json$Encode$string(url));
				} else {
					var url = r.a;
					return _Utils_Tuple2(
						'Script',
						elm$json$Json$Encode$string(url));
				}
			}()
			]));
};
var author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation = function (annotation) {
	if (annotation.$ === 'Just') {
		var a = annotation.a;
		return A3(elm$json$Json$Encode$dict, elm$core$Basics$identity, elm$json$Json$Encode$string, a);
	} else {
		return elm$json$Json$Encode$null;
	}
};
var author$project$Lia$Markdown$Inline$Json$Encode$encInline = function (element) {
	return elm$json$Json$Encode$object(
		function () {
			switch (element.$) {
				case 'Chars':
					var str = element.a;
					var a = element.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Chars',
							elm$json$Json$Encode$string(str)),
							_Utils_Tuple2(
							'a',
							author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				case 'Symbol':
					var str = element.a;
					var a = element.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Symbol',
							elm$json$Json$Encode$string(str)),
							_Utils_Tuple2(
							'a',
							author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				case 'Bold':
					var x = element.a;
					var a = element.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Bold',
							author$project$Lia$Markdown$Inline$Json$Encode$encInline(x)),
							_Utils_Tuple2(
							'a',
							author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				case 'Italic':
					var x = element.a;
					var a = element.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Italic',
							author$project$Lia$Markdown$Inline$Json$Encode$encInline(x)),
							_Utils_Tuple2(
							'a',
							author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				case 'Strike':
					var x = element.a;
					var a = element.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Strike',
							author$project$Lia$Markdown$Inline$Json$Encode$encInline(x)),
							_Utils_Tuple2(
							'a',
							author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				case 'Underline':
					var x = element.a;
					var a = element.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Underline',
							author$project$Lia$Markdown$Inline$Json$Encode$encInline(x)),
							_Utils_Tuple2(
							'a',
							author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				case 'Superscript':
					var x = element.a;
					var a = element.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Superscript',
							author$project$Lia$Markdown$Inline$Json$Encode$encInline(x)),
							_Utils_Tuple2(
							'a',
							author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				case 'Verbatim':
					var str = element.a;
					var a = element.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Verbatim',
							elm$json$Json$Encode$string(str)),
							_Utils_Tuple2(
							'a',
							author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				case 'Formula':
					var head = element.a;
					var body = element.b;
					var a = element.c;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Formula',
							elm$json$Json$Encode$string(head)),
							_Utils_Tuple2(
							'body',
							elm$json$Json$Encode$string(body)),
							_Utils_Tuple2(
							'a',
							author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				case 'Ref':
					var ref = element.a;
					var a = element.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Ref',
							author$project$Lia$Markdown$Inline$Json$Encode$encReference(ref)),
							_Utils_Tuple2(
							'a',
							author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				case 'FootnoteMark':
					var str = element.a;
					var a = element.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'FootnoteMark',
							elm$json$Json$Encode$string(str)),
							_Utils_Tuple2(
							'a',
							author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				case 'EInline':
					var i = element.a;
					var j = element.b;
					var list = element.c;
					var a = element.d;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'EInline',
							author$project$Lia$Markdown$Inline$Json$Encode$encode(list)),
							_Utils_Tuple2(
							'i',
							elm$json$Json$Encode$int(i)),
							_Utils_Tuple2(
							'j',
							elm$json$Json$Encode$int(j)),
							_Utils_Tuple2(
							'a',
							author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				case 'Container':
					var list = element.a;
					var a = element.b;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'Container',
							author$project$Lia$Markdown$Inline$Json$Encode$encode(list)),
							_Utils_Tuple2(
							'a',
							author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(a))
						]);
				default:
					var str = element.a;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'HTML',
							elm$json$Json$Encode$string(str)),
							_Utils_Tuple2(
							'a',
							author$project$Lia$Markdown$Inline$Json$Encode$encAnnotation(elm$core$Maybe$Nothing))
						]);
			}
		}());
};
var author$project$Lia$Markdown$Inline$Json$Encode$encMultimedia = F4(
	function (_class, list, _n1, title) {
		var stream = _n1.a;
		var url = _n1.b;
		return elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					_class,
					author$project$Lia$Markdown$Inline$Json$Encode$encode(list)),
					_Utils_Tuple2(
					'stream',
					elm$json$Json$Encode$bool(stream)),
					_Utils_Tuple2(
					'url',
					elm$json$Json$Encode$string(url)),
					_Utils_Tuple2(
					'title',
					elm$json$Json$Encode$string(title))
				]));
	});
var author$project$Lia$Markdown$Inline$Json$Encode$encRef = F4(
	function (_class, list, url, title) {
		return elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					_class,
					author$project$Lia$Markdown$Inline$Json$Encode$encode(list)),
					_Utils_Tuple2(
					'url',
					elm$json$Json$Encode$string(url)),
					_Utils_Tuple2(
					'title',
					elm$json$Json$Encode$string(title))
				]));
	});
var author$project$Lia$Markdown$Inline$Json$Encode$encReference = function (ref) {
	switch (ref.$) {
		case 'Link':
			var list = ref.a;
			var url = ref.b;
			var title = ref.c;
			return A4(author$project$Lia$Markdown$Inline$Json$Encode$encRef, 'Link', list, url, title);
		case 'Mail':
			var list = ref.a;
			var url = ref.b;
			var title = ref.c;
			return A4(author$project$Lia$Markdown$Inline$Json$Encode$encRef, 'Mail', list, url, title);
		case 'Image':
			var list = ref.a;
			var url = ref.b;
			var title = ref.c;
			return A4(author$project$Lia$Markdown$Inline$Json$Encode$encRef, 'Image', list, url, title);
		case 'Audio':
			var list = ref.a;
			var url = ref.b;
			var title = ref.c;
			return A4(author$project$Lia$Markdown$Inline$Json$Encode$encMultimedia, 'Audio', list, url, title);
		default:
			var list = ref.a;
			var url = ref.b;
			var title = ref.c;
			return A4(author$project$Lia$Markdown$Inline$Json$Encode$encMultimedia, 'Movie', list, url, title);
	}
};
var author$project$Lia$Markdown$Inline$Json$Encode$encode = function (list) {
	return A2(elm$json$Json$Encode$list, author$project$Lia$Markdown$Inline$Json$Encode$encInline, list);
};
var author$project$Lia$Definition$Json$Encode$encode = function (def) {
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'author',
				elm$json$Json$Encode$string(def.author)),
				_Utils_Tuple2(
				'date',
				elm$json$Json$Encode$string(def.date)),
				_Utils_Tuple2(
				'email',
				elm$json$Json$Encode$string(def.email)),
				_Utils_Tuple2(
				'language',
				elm$json$Json$Encode$string(def.language)),
				_Utils_Tuple2(
				'logo',
				elm$json$Json$Encode$string(def.logo)),
				_Utils_Tuple2(
				'version',
				elm$json$Json$Encode$string(def.version)),
				_Utils_Tuple2(
				'base',
				elm$json$Json$Encode$string(def.base)),
				_Utils_Tuple2(
				'narrator',
				elm$json$Json$Encode$string(def.narrator)),
				_Utils_Tuple2(
				'onload',
				elm$json$Json$Encode$string(def.onload)),
				_Utils_Tuple2(
				'comment',
				author$project$Lia$Markdown$Inline$Json$Encode$encode(def.comment)),
				_Utils_Tuple2(
				'attributes',
				A2(elm$json$Json$Encode$list, author$project$Lia$Markdown$Inline$Json$Encode$encode, def.attributes)),
				_Utils_Tuple2(
				'resources',
				A2(elm$json$Json$Encode$list, author$project$Lia$Definition$Json$Encode$encResource, def.resources)),
				_Utils_Tuple2(
				'translation',
				A3(elm$json$Json$Encode$dict, elm$core$Basics$identity, elm$json$Json$Encode$string, def.translation)),
				_Utils_Tuple2(
				'macro',
				A3(elm$json$Json$Encode$dict, elm$core$Basics$identity, elm$json$Json$Encode$string, def.macro))
			]));
};
var author$project$Lia$Json$Encode$encSection = function (sec) {
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'title',
				author$project$Lia$Markdown$Inline$Json$Encode$encode(sec.title)),
				_Utils_Tuple2(
				'code',
				elm$json$Json$Encode$string(sec.code)),
				_Utils_Tuple2(
				'indentation',
				elm$json$Json$Encode$int(sec.indentation))
			]));
};
var author$project$Lia$Json$Encode$get_title = function (sections) {
	return elm$core$String$trim(
		A2(
			elm$core$Maybe$withDefault,
			'Lia',
			A2(
				elm$core$Maybe$map,
				author$project$Lia$Markdown$Inline$Stringify$stringify,
				A2(
					elm$core$Maybe$map,
					function ($) {
						return $.title;
					},
					A2(elm$core$Array$get, 0, sections)))));
};
var author$project$Translations$getCodeFromLn = function (ln) {
	switch (ln.$) {
		case 'Bg':
			return 'bg';
		case 'De':
			return 'de';
		case 'Fa':
			return 'fa';
		case 'Hy':
			return 'hy';
		case 'Ua':
			return 'ua';
		default:
			return 'en';
	}
};
var author$project$Lia$Json$Encode$encode = function (model) {
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'title',
				author$project$Lia$Markdown$Inline$Json$Encode$encode(
					A2(
						elm$core$Maybe$withDefault,
						_List_fromArray(
							[
								A2(author$project$Lia$Markdown$Inline$Types$Chars, model.title, elm$core$Maybe$Nothing)
							]),
						A2(
							elm$core$Maybe$map,
							function ($) {
								return $.title;
							},
							A2(elm$core$Array$get, 0, model.sections))))),
				_Utils_Tuple2(
				'str_title',
				elm$json$Json$Encode$string(
					author$project$Lia$Json$Encode$get_title(model.sections))),
				_Utils_Tuple2(
				'definition',
				author$project$Lia$Definition$Json$Encode$encode(model.definition)),
				_Utils_Tuple2(
				'comment',
				elm$json$Json$Encode$string(
					author$project$Lia$Markdown$Inline$Stringify$stringify(model.definition.comment))),
				_Utils_Tuple2(
				'readme',
				elm$json$Json$Encode$string(model.readme)),
				_Utils_Tuple2(
				'url',
				elm$json$Json$Encode$string(model.url)),
				_Utils_Tuple2(
				'origin',
				elm$json$Json$Encode$string(model.origin)),
				_Utils_Tuple2(
				'sections',
				A2(elm$json$Json$Encode$array, author$project$Lia$Json$Encode$encSection, model.sections)),
				_Utils_Tuple2(
				'section_active',
				elm$json$Json$Encode$int(model.section_active)),
				_Utils_Tuple2(
				'version',
				elm$json$Json$Encode$int(
					A2(
						elm$core$Maybe$withDefault,
						0,
						elm$core$String$toInt(
							A2(
								elm$core$Maybe$withDefault,
								'0',
								elm$core$List$head(
									A2(elm$core$String$split, '.', model.definition.version))))))),
				_Utils_Tuple2(
				'error',
				function () {
					var _n0 = model.error;
					if (_n0.$ === 'Just') {
						var str = _n0.a;
						return elm$json$Json$Encode$string(str);
					} else {
						return elm$json$Json$Encode$null;
					}
				}()),
				_Utils_Tuple2(
				'translation',
				elm$json$Json$Encode$string(
					author$project$Translations$getCodeFromLn(model.translation)))
			]));
};
var author$project$Lia$Script$generateIndex = F2(
	function (id, title) {
		return _Utils_Tuple2(
			'#' + A3(
				elm$core$String$replace,
				' ',
				'-',
				elm$core$String$toLower(title)),
			'#' + elm$core$String$fromInt(id + 1));
	});
var author$project$Lia$Script$filterIndex = F2(
	function (str, _n0) {
		var idx = _n0.a;
		return _Utils_eq(str, idx);
	});
var author$project$Lia$Script$searchIndex = F2(
	function (index, str) {
		var fn = author$project$Lia$Script$filterIndex(
			elm$core$String$toLower(str));
		var _n0 = elm$core$List$head(
			A2(elm$core$List$filter, fn, index));
		if (_n0.$ === 'Just') {
			var _n1 = _n0.a;
			var key = _n1.b;
			return key;
		} else {
			return str;
		}
	});
var author$project$Lia$Script$load_first_slide = function (model) {
	return A2(
		author$project$Lia$Script$load_slide,
		(_Utils_cmp(
			model.section_active,
			author$project$Lia$Script$pages(model)) > 0) ? 0 : model.section_active,
		_Utils_update(
			model,
			{
				search_index: author$project$Lia$Script$searchIndex(
					A2(
						elm$core$List$indexedMap,
						author$project$Lia$Script$generateIndex,
						elm$core$Array$toList(
							A2(
								elm$core$Array$map,
								A2(
									elm$core$Basics$composeR,
									function ($) {
										return $.title;
									},
									A2(elm$core$Basics$composeR, author$project$Lia$Markdown$Inline$Stringify$stringify, elm$core$String$trim)),
								model.sections)))),
				to_do: A2(
					elm$core$List$cons,
					A3(
						author$project$Port$Event$Event,
						'init',
						model.section_active,
						author$project$Lia$Json$Encode$encode(model)),
					model.to_do)
			}));
};
var author$project$Model$Running = {$: 'Running'};
var elm$browser$Browser$Navigation$pushUrl = _Browser_pushUrl;
var author$project$Update$start = function (model) {
	var _n0 = author$project$Lia$Script$load_first_slide(model.lia);
	var parsed = _n0.a;
	var cmd = _n0.b;
	var events = _n0.c;
	return _Utils_Tuple2(
		_Utils_update(
			model,
			{
				lia: _Utils_update(
					parsed,
					{load_slide: -1}),
				state: author$project$Model$Running
			}),
		elm$core$Platform$Cmd$batch(
			A2(
				elm$core$List$cons,
				A2(elm$core$Platform$Cmd$map, author$project$Update$LiaScript, cmd),
				A2(
					elm$core$List$cons,
					(parsed.load_slide < 0) ? elm$core$Platform$Cmd$none : A2(
						elm$browser$Browser$Navigation$pushUrl,
						model.key,
						'#' + elm$core$String$fromInt(parsed.load_slide)),
					A2(elm$core$List$map, author$project$Update$event2js, events)))));
};
var elm$browser$Browser$Navigation$load = _Browser_load;
var elm$core$Basics$modBy = _Basics_modBy;
var author$project$Update$parsing = function (model) {
	parsing:
	while (true) {
		var _n9 = model.state;
		_n9$2:
		while (true) {
			if (_n9.$ === 'Parsing') {
				if (!_n9.a) {
					if (!_n9.b) {
						return A2(author$project$Update$update, author$project$Update$LiaStart, model);
					} else {
						break _n9$2;
					}
				} else {
					var templates_to_load = _n9.b;
					var _n10 = model.code;
					if (_n10.$ === 'Nothing') {
						var $temp$model = _Utils_update(
							model,
							{
								state: A2(author$project$Model$Parsing, false, templates_to_load)
							});
						model = $temp$model;
						continue parsing;
					} else {
						var code = _n10.a;
						var _n11 = A2(author$project$Lia$Script$parse_section, model.lia, code);
						var lia = _n11.a;
						var remaining_code = _n11.b;
						var new_model = _Utils_update(
							model,
							{code: remaining_code, lia: lia});
						if (!A2(
							elm$core$Basics$modBy,
							4,
							author$project$Lia$Script$pages(lia))) {
							return _Utils_Tuple2(
								new_model,
								author$project$Update$message(author$project$Update$LiaParse));
						} else {
							var $temp$model = new_model;
							model = $temp$model;
							continue parsing;
						}
					}
				}
			} else {
				break _n9$2;
			}
		}
		return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
	}
};
var author$project$Update$update = F2(
	function (msg, model) {
		update:
		while (true) {
			switch (msg.$) {
				case 'LiaScript':
					var childMsg = msg.a;
					var _n1 = A2(author$project$Lia$Script$update, childMsg, model.lia);
					var lia = _n1.a;
					var cmd = _n1.b;
					var events = _n1.c;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								lia: _Utils_update(
									lia,
									{load_slide: -1})
							}),
						elm$core$Platform$Cmd$batch(
							A2(
								elm$core$List$cons,
								A2(elm$core$Platform$Cmd$map, author$project$Update$LiaScript, cmd),
								A2(
									elm$core$List$cons,
									(lia.load_slide < 0) ? elm$core$Platform$Cmd$none : A2(
										elm$browser$Browser$Navigation$pushUrl,
										model.key,
										'#' + elm$core$String$fromInt(lia.load_slide)),
									A2(elm$core$List$map, author$project$Update$event2js, events)))));
				case 'Handle':
					var event = msg.a;
					var _n2 = event.topic;
					switch (_n2) {
						case 'index':
							var $temp$msg = author$project$Update$UpdateIndex(
								author$project$Index$Update$handle(event.message)),
								$temp$model = model;
							msg = $temp$msg;
							model = $temp$model;
							continue update;
						case 'restore':
							var _n3 = author$project$Lia$Json$Decode$decode(event.message);
							if (_n3.$ === 'Ok') {
								var lia = _n3.a;
								return author$project$Update$start(
									_Utils_update(
										model,
										{lia: lia}));
							} else {
								var info = _n3.a;
								return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
							}
						default:
							var $temp$msg = author$project$Update$LiaScript(
								author$project$Lia$Script$handle(event)),
								$temp$model = model;
							msg = $temp$msg;
							model = $temp$model;
							continue update;
					}
				case 'UpdateIndex':
					var childMsg = msg.a;
					var _n4 = A2(author$project$Index$Update$update, childMsg, model.index);
					var index = _n4.a;
					var cmd = _n4.b;
					var events = _n4.c;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{index: index}),
						elm$core$Platform$Cmd$batch(
							A2(
								elm$core$List$cons,
								A2(elm$core$Platform$Cmd$map, author$project$Update$UpdateIndex, cmd),
								A2(
									elm$core$List$map,
									A2(
										elm$core$Basics$composeR,
										author$project$Port$Event$encode,
										A2(
											elm$core$Basics$composeR,
											A2(author$project$Port$Event$Event, 'index', -1),
											author$project$Update$event2js)),
									events))));
				case 'LinkClicked':
					var urlRequest = msg.a;
					if (urlRequest.$ === 'Internal') {
						var url = urlRequest.a;
						return _Utils_Tuple2(
							model,
							_Utils_eq(url.query, model.url.query) ? A2(
								elm$browser$Browser$Navigation$pushUrl,
								model.key,
								elm$url$Url$toString(url)) : elm$browser$Browser$Navigation$load(
								elm$url$Url$toString(url)));
					} else {
						var href = urlRequest.a;
						return _Utils_Tuple2(
							model,
							elm$browser$Browser$Navigation$load(href));
					}
				case 'UrlChanged':
					var url = msg.a;
					var _n6 = A2(elm$core$Maybe$andThen, elm$core$String$toInt, url.fragment);
					if (_n6.$ === 'Just') {
						var id = _n6.a;
						var _n7 = A2(author$project$Lia$Script$load_slide, id - 1, model.lia);
						var lia = _n7.a;
						var cmd = _n7.b;
						var events = _n7.c;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									lia: _Utils_update(
										lia,
										{load_slide: -1})
								}),
							elm$core$Platform$Cmd$batch(
								A2(
									elm$core$List$cons,
									A2(elm$core$Platform$Cmd$map, author$project$Update$LiaScript, cmd),
									A2(elm$core$List$map, author$project$Update$event2js, events))));
					} else {
						return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
					}
				case 'LiaStart':
					return author$project$Update$start(model);
				case 'LiaParse':
					return author$project$Update$parsing(model);
				case 'Load_ReadMe_Result':
					if (msg.b.$ === 'Ok') {
						var readme = msg.b.a;
						return A2(author$project$Update$load_readme, model, readme);
					} else {
						var url = msg.a;
						var info = msg.b.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									state: author$project$Model$Error(
										author$project$Update$parse_error(info))
								}),
							author$project$Update$event2js(
								A3(
									author$project$Port$Event$Event,
									'offline',
									-1,
									elm$json$Json$Encode$string(url))));
					}
				default:
					if (msg.a.$ === 'Ok') {
						var template = msg.a.a;
						return author$project$Update$parsing(
							_Utils_update(
								model,
								{
									lia: A2(
										author$project$Lia$Script$add_imports,
										model.lia,
										A3(elm$core$String$replace, '\u000d', '', template)),
									state: function () {
										var _n8 = model.state;
										if (_n8.$ === 'Parsing') {
											var b = _n8.a;
											var templates = _n8.b;
											return A2(author$project$Model$Parsing, b, templates - 1);
										} else {
											return model.state;
										}
									}()
								}));
					} else {
						var info = msg.a.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									state: author$project$Model$Error(
										author$project$Update$parse_error(info))
								}),
							elm$core$Platform$Cmd$none);
					}
			}
		}
	});
var author$project$Index$Update$Input = function (a) {
	return {$: 'Input', a: a};
};
var elm$html$Html$a = _VirtualDom_node('a');
var elm$html$Html$div = _VirtualDom_node('div');
var elm$html$Html$h1 = _VirtualDom_node('h1');
var elm$html$Html$input = _VirtualDom_node('input');
var elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var elm$html$Html$text = elm$virtual_dom$VirtualDom$text;
var elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			elm$json$Json$Encode$string(string));
	});
var elm$html$Html$Attributes$class = elm$html$Html$Attributes$stringProperty('className');
var elm$html$Html$Attributes$href = function (url) {
	return A2(
		elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var elm$html$Html$Attributes$placeholder = elm$html$Html$Attributes$stringProperty('placeholder');
var elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var elm$html$Html$Attributes$style = elm$virtual_dom$VirtualDom$style;
var elm$html$Html$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 'MayStopPropagation', a: a};
};
var elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			elm$virtual_dom$VirtualDom$on,
			event,
			elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3(elm$core$List$foldr, elm$json$Json$Decode$field, decoder, fields);
	});
var elm$html$Html$Events$targetValue = A2(
	elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	elm$json$Json$Decode$string);
var elm$html$Html$Events$onInput = function (tagger) {
	return A2(
		elm$html$Html$Events$stopPropagationOn,
		'input',
		A2(
			elm$json$Json$Decode$map,
			elm$html$Html$Events$alwaysStop,
			A2(elm$json$Json$Decode$map, tagger, elm$html$Html$Events$targetValue)));
};
var author$project$Index$View$searchBar = function (url) {
	return A2(
		elm$html$Html$div,
		_List_fromArray(
			[
				A2(elm$html$Html$Attributes$style, 'width', '100%'),
				A2(elm$html$Html$Attributes$style, 'text-align', 'center')
			]),
		_List_fromArray(
			[
				A2(
				elm$html$Html$h1,
				_List_Nil,
				_List_fromArray(
					[
						elm$html$Html$text('Lia: Index')
					])),
				A2(
				elm$html$Html$input,
				_List_fromArray(
					[
						elm$html$Html$Events$onInput(author$project$Index$Update$Input),
						elm$html$Html$Attributes$placeholder('enter course URL')
					]),
				_List_Nil),
				A2(
				elm$html$Html$a,
				_List_fromArray(
					[
						elm$html$Html$Attributes$class('published-date'),
						elm$html$Html$Attributes$href('?' + url)
					]),
				_List_fromArray(
					[
						elm$html$Html$text('load URL')
					]))
			]));
};
var author$project$Index$Update$Delete = function (a) {
	return {$: 'Delete', a: a};
};
var author$project$Index$View$get_active = function (course) {
	var _n0 = course.active;
	if (_n0.$ === 'Nothing') {
		return A2(
			elm$core$Maybe$map,
			elm$core$Tuple$second,
			elm$core$List$head(
				A2(
					elm$core$List$sortBy,
					elm$core$Tuple$first,
					elm$core$Dict$toList(course.versions))));
	} else {
		var id = _n0.a;
		return A2(elm$core$Dict$get, id, course.versions);
	}
};
var elm$html$Html$span = _VirtualDom_node('span');
var author$project$Lia$Markdown$Effect$View$view = F3(
	function (viewer, idx, elements) {
		return A2(
			elm$core$List$cons,
			A2(
				elm$html$Html$span,
				_List_fromArray(
					[
						elm$html$Html$Attributes$class('lia-effect-circle')
					]),
				elm$core$List$singleton(
					elm$html$Html$text(
						elm$core$String$fromInt(idx)))),
			A2(
				elm$core$List$cons,
				elm$html$Html$text(' '),
				viewer(elements)));
	});
var author$project$Lia$Markdown$Footnote$View$braces = function (key) {
	return elm$html$Html$text('[' + (key + ']'));
};
var elm$html$Html$sup = _VirtualDom_node('sup');
var elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var elm$html$Html$Attributes$attribute = elm$virtual_dom$VirtualDom$attribute;
var author$project$Lia$Markdown$Footnote$View$inline = F2(
	function (key, attr) {
		return A2(
			elm$html$Html$sup,
			A2(
				elm$core$List$cons,
				A2(elm$html$Html$Attributes$attribute, 'onclick', 'showFootnote(\"' + (key + '\");')),
				A2(
					elm$core$List$cons,
					A2(elm$html$Html$Attributes$style, 'cursor', 'pointer'),
					attr)),
			_List_fromArray(
				[
					author$project$Lia$Markdown$Footnote$View$braces(key)
				]));
	});
var author$project$Lia$Markdown$Inline$View$annotation = F2(
	function (cls, attr) {
		if (attr.$ === 'Just') {
			var dict = attr.a;
			return A2(
				elm$core$List$map,
				function (_n2) {
					var key = _n2.a;
					var value = _n2.b;
					return A2(elm$html$Html$Attributes$attribute, key, value);
				},
				elm$core$Dict$toList(
					A3(
						elm$core$Dict$insert,
						'class',
						function () {
							var _n1 = A2(elm$core$Dict$get, 'class', dict);
							if (_n1.$ === 'Just') {
								var c = _n1.a;
								return 'lia-inline ' + (cls + (' ' + c));
							} else {
								return 'lia-inline ' + cls;
							}
						}(),
						dict)));
		} else {
			return _List_fromArray(
				[
					elm$html$Html$Attributes$class('lia-inline ' + cls)
				]);
		}
	});
var author$project$Lia$Markdown$Inline$View$attributes = function (attr) {
	if (attr.$ === 'Just') {
		var dict = attr.a;
		return A2(
			elm$core$List$map,
			function (_n1) {
				var key = _n1.a;
				var value = _n1.b;
				return A2(elm$html$Html$Attributes$attribute, key, value);
			},
			elm$core$Dict$toList(dict));
	} else {
		return _List_Nil;
	}
};
var elm$parser$Parser$DeadEnd = F3(
	function (row, col, problem) {
		return {col: col, problem: problem, row: row};
	});
var elm$parser$Parser$problemToDeadEnd = function (p) {
	return A3(elm$parser$Parser$DeadEnd, p.row, p.col, p.problem);
};
var elm$parser$Parser$Advanced$bagToList = F2(
	function (bag, list) {
		bagToList:
		while (true) {
			switch (bag.$) {
				case 'Empty':
					return list;
				case 'AddRight':
					var bag1 = bag.a;
					var x = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2(elm$core$List$cons, x, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
				default:
					var bag1 = bag.a;
					var bag2 = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2(elm$parser$Parser$Advanced$bagToList, bag2, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
			}
		}
	});
var elm$parser$Parser$Advanced$run = F2(
	function (_n0, src) {
		var parse = _n0.a;
		var _n1 = parse(
			{col: 1, context: _List_Nil, indent: 1, offset: 0, row: 1, src: src});
		if (_n1.$ === 'Good') {
			var value = _n1.b;
			return elm$core$Result$Ok(value);
		} else {
			var bag = _n1.b;
			return elm$core$Result$Err(
				A2(elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));
		}
	});
var elm$parser$Parser$run = F2(
	function (parser, source) {
		var _n0 = A2(elm$parser$Parser$Advanced$run, parser, source);
		if (_n0.$ === 'Ok') {
			var a = _n0.a;
			return elm$core$Result$Ok(a);
		} else {
			var problems = _n0.a;
			return elm$core$Result$Err(
				A2(elm$core$List$map, elm$parser$Parser$problemToDeadEnd, problems));
		}
	});
var elm$parser$Parser$Advanced$Bad = F2(
	function (a, b) {
		return {$: 'Bad', a: a, b: b};
	});
var elm$parser$Parser$Advanced$Good = F3(
	function (a, b, c) {
		return {$: 'Good', a: a, b: b, c: c};
	});
var elm$parser$Parser$Advanced$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var elm$parser$Parser$Advanced$andThen = F2(
	function (callback, _n0) {
		var parseA = _n0.a;
		return elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _n1 = parseA(s0);
				if (_n1.$ === 'Bad') {
					var p = _n1.a;
					var x = _n1.b;
					return A2(elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _n1.a;
					var a = _n1.b;
					var s1 = _n1.c;
					var _n2 = callback(a);
					var parseB = _n2.a;
					var _n3 = parseB(s1);
					if (_n3.$ === 'Bad') {
						var p2 = _n3.a;
						var x = _n3.b;
						return A2(elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _n3.a;
						var b = _n3.b;
						var s2 = _n3.c;
						return A3(elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);
					}
				}
			});
	});
var elm$parser$Parser$andThen = elm$parser$Parser$Advanced$andThen;
var elm$parser$Parser$Advanced$backtrackable = function (_n0) {
	var parse = _n0.a;
	return elm$parser$Parser$Advanced$Parser(
		function (s0) {
			var _n1 = parse(s0);
			if (_n1.$ === 'Bad') {
				var x = _n1.b;
				return A2(elm$parser$Parser$Advanced$Bad, false, x);
			} else {
				var a = _n1.b;
				var s1 = _n1.c;
				return A3(elm$parser$Parser$Advanced$Good, false, a, s1);
			}
		});
};
var elm$parser$Parser$backtrackable = elm$parser$Parser$Advanced$backtrackable;
var elm$parser$Parser$UnexpectedChar = {$: 'UnexpectedChar'};
var elm$parser$Parser$Advanced$AddRight = F2(
	function (a, b) {
		return {$: 'AddRight', a: a, b: b};
	});
var elm$parser$Parser$Advanced$DeadEnd = F4(
	function (row, col, problem, contextStack) {
		return {col: col, contextStack: contextStack, problem: problem, row: row};
	});
var elm$parser$Parser$Advanced$Empty = {$: 'Empty'};
var elm$parser$Parser$Advanced$fromState = F2(
	function (s, x) {
		return A2(
			elm$parser$Parser$Advanced$AddRight,
			elm$parser$Parser$Advanced$Empty,
			A4(elm$parser$Parser$Advanced$DeadEnd, s.row, s.col, x, s.context));
	});
var elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
var elm$parser$Parser$Advanced$chompIf = F2(
	function (isGood, expecting) {
		return elm$parser$Parser$Advanced$Parser(
			function (s) {
				var newOffset = A3(elm$parser$Parser$Advanced$isSubChar, isGood, s.offset, s.src);
				return _Utils_eq(newOffset, -1) ? A2(
					elm$parser$Parser$Advanced$Bad,
					false,
					A2(elm$parser$Parser$Advanced$fromState, s, expecting)) : (_Utils_eq(newOffset, -2) ? A3(
					elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: 1, context: s.context, indent: s.indent, offset: s.offset + 1, row: s.row + 1, src: s.src}) : A3(
					elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: s.col + 1, context: s.context, indent: s.indent, offset: newOffset, row: s.row, src: s.src}));
			});
	});
var elm$parser$Parser$chompIf = function (isGood) {
	return A2(elm$parser$Parser$Advanced$chompIf, isGood, elm$parser$Parser$UnexpectedChar);
};
var elm$parser$Parser$Advanced$chompWhileHelp = F5(
	function (isGood, offset, row, col, s0) {
		chompWhileHelp:
		while (true) {
			var newOffset = A3(elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.src);
			if (_Utils_eq(newOffset, -1)) {
				return A3(
					elm$parser$Parser$Advanced$Good,
					_Utils_cmp(s0.offset, offset) < 0,
					_Utils_Tuple0,
					{col: col, context: s0.context, indent: s0.indent, offset: offset, row: row, src: s0.src});
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				}
			}
		}
	});
var elm$parser$Parser$Advanced$chompWhile = function (isGood) {
	return elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A5(elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.offset, s.row, s.col, s);
		});
};
var elm$parser$Parser$chompWhile = elm$parser$Parser$Advanced$chompWhile;
var elm$parser$Parser$Advanced$map2 = F3(
	function (func, _n0, _n1) {
		var parseA = _n0.a;
		var parseB = _n1.a;
		return elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _n2 = parseA(s0);
				if (_n2.$ === 'Bad') {
					var p = _n2.a;
					var x = _n2.b;
					return A2(elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _n2.a;
					var a = _n2.b;
					var s1 = _n2.c;
					var _n3 = parseB(s1);
					if (_n3.$ === 'Bad') {
						var p2 = _n3.a;
						var x = _n3.b;
						return A2(elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _n3.a;
						var b = _n3.b;
						var s2 = _n3.c;
						return A3(
							elm$parser$Parser$Advanced$Good,
							p1 || p2,
							A2(func, a, b),
							s2);
					}
				}
			});
	});
var elm$parser$Parser$Advanced$ignorer = F2(
	function (keepParser, ignoreParser) {
		return A3(elm$parser$Parser$Advanced$map2, elm$core$Basics$always, keepParser, ignoreParser);
	});
var elm$parser$Parser$ignorer = elm$parser$Parser$Advanced$ignorer;
var elm$parser$Parser$Advanced$keeper = F2(
	function (parseFunc, parseArg) {
		return A3(elm$parser$Parser$Advanced$map2, elm$core$Basics$apL, parseFunc, parseArg);
	});
var elm$parser$Parser$keeper = elm$parser$Parser$Advanced$keeper;
var elm$parser$Parser$Advanced$Append = F2(
	function (a, b) {
		return {$: 'Append', a: a, b: b};
	});
var elm$parser$Parser$Advanced$oneOfHelp = F3(
	function (s0, bag, parsers) {
		oneOfHelp:
		while (true) {
			if (!parsers.b) {
				return A2(elm$parser$Parser$Advanced$Bad, false, bag);
			} else {
				var parse = parsers.a.a;
				var remainingParsers = parsers.b;
				var _n1 = parse(s0);
				if (_n1.$ === 'Good') {
					var step = _n1;
					return step;
				} else {
					var step = _n1;
					var p = step.a;
					var x = step.b;
					if (p) {
						return step;
					} else {
						var $temp$s0 = s0,
							$temp$bag = A2(elm$parser$Parser$Advanced$Append, bag, x),
							$temp$parsers = remainingParsers;
						s0 = $temp$s0;
						bag = $temp$bag;
						parsers = $temp$parsers;
						continue oneOfHelp;
					}
				}
			}
		}
	});
var elm$parser$Parser$Advanced$oneOf = function (parsers) {
	return elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3(elm$parser$Parser$Advanced$oneOfHelp, s, elm$parser$Parser$Advanced$Empty, parsers);
		});
};
var elm$parser$Parser$oneOf = elm$parser$Parser$Advanced$oneOf;
var elm$parser$Parser$Advanced$succeed = function (a) {
	return elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3(elm$parser$Parser$Advanced$Good, false, a, s);
		});
};
var elm$parser$Parser$succeed = elm$parser$Parser$Advanced$succeed;
var hecrj$html_parser$Html$Parser$Element = F3(
	function (a, b, c) {
		return {$: 'Element', a: a, b: b, c: c};
	});
var elm$parser$Parser$Advanced$mapChompedString = F2(
	function (func, _n0) {
		var parse = _n0.a;
		return elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _n1 = parse(s0);
				if (_n1.$ === 'Bad') {
					var p = _n1.a;
					var x = _n1.b;
					return A2(elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p = _n1.a;
					var a = _n1.b;
					var s1 = _n1.c;
					return A3(
						elm$parser$Parser$Advanced$Good,
						p,
						A2(
							func,
							A3(elm$core$String$slice, s0.offset, s1.offset, s0.src),
							a),
						s1);
				}
			});
	});
var elm$parser$Parser$Advanced$getChompedString = function (parser) {
	return A2(elm$parser$Parser$Advanced$mapChompedString, elm$core$Basics$always, parser);
};
var elm$parser$Parser$getChompedString = elm$parser$Parser$Advanced$getChompedString;
var elm$parser$Parser$Problem = function (a) {
	return {$: 'Problem', a: a};
};
var elm$parser$Parser$Advanced$problem = function (x) {
	return elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A2(
				elm$parser$Parser$Advanced$Bad,
				false,
				A2(elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var elm$parser$Parser$problem = function (msg) {
	return elm$parser$Parser$Advanced$problem(
		elm$parser$Parser$Problem(msg));
};
var hecrj$html_parser$Html$Parser$chompOneOrMore = function (fn) {
	return A2(
		elm$parser$Parser$ignorer,
		elm$parser$Parser$chompIf(fn),
		elm$parser$Parser$chompWhile(fn));
};
var hecrj$html_parser$Html$Parser$isSpaceCharacter = function (c) {
	return _Utils_eq(
		c,
		_Utils_chr(' ')) || (_Utils_eq(
		c,
		_Utils_chr('\t')) || (_Utils_eq(
		c,
		_Utils_chr('\n')) || (_Utils_eq(
		c,
		_Utils_chr('\u000d')) || (_Utils_eq(
		c,
		_Utils_chr('\u000c')) || _Utils_eq(
		c,
		_Utils_chr('\u00a0'))))));
};
var hecrj$html_parser$Html$Parser$closingTag = function (name) {
	var chompName = A2(
		elm$parser$Parser$andThen,
		function (closingName) {
			return _Utils_eq(
				elm$core$String$toLower(closingName),
				name) ? elm$parser$Parser$succeed(_Utils_Tuple0) : elm$parser$Parser$problem('closing tag does not match opening tag: ' + name);
		},
		elm$parser$Parser$getChompedString(
			hecrj$html_parser$Html$Parser$chompOneOrMore(
				function (c) {
					return (!hecrj$html_parser$Html$Parser$isSpaceCharacter(c)) && (!_Utils_eq(
						c,
						_Utils_chr('>')));
				})));
	return A2(
		elm$parser$Parser$ignorer,
		A2(
			elm$parser$Parser$ignorer,
			A2(
				elm$parser$Parser$ignorer,
				A2(
					elm$parser$Parser$ignorer,
					elm$parser$Parser$chompIf(
						elm$core$Basics$eq(
							_Utils_chr('<'))),
					elm$parser$Parser$chompIf(
						elm$core$Basics$eq(
							_Utils_chr('/')))),
				chompName),
			elm$parser$Parser$chompWhile(hecrj$html_parser$Html$Parser$isSpaceCharacter)),
		elm$parser$Parser$chompIf(
			elm$core$Basics$eq(
				_Utils_chr('>'))));
};
var elm$parser$Parser$Expecting = function (a) {
	return {$: 'Expecting', a: a};
};
var elm$parser$Parser$Advanced$Token = F2(
	function (a, b) {
		return {$: 'Token', a: a, b: b};
	});
var elm$parser$Parser$toToken = function (str) {
	return A2(
		elm$parser$Parser$Advanced$Token,
		str,
		elm$parser$Parser$Expecting(str));
};
var elm$parser$Parser$Advanced$findSubString = _Parser_findSubString;
var elm$parser$Parser$Advanced$fromInfo = F4(
	function (row, col, x, context) {
		return A2(
			elm$parser$Parser$Advanced$AddRight,
			elm$parser$Parser$Advanced$Empty,
			A4(elm$parser$Parser$Advanced$DeadEnd, row, col, x, context));
	});
var elm$parser$Parser$Advanced$chompUntil = function (_n0) {
	var str = _n0.a;
	var expecting = _n0.b;
	return elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _n1 = A5(elm$parser$Parser$Advanced$findSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _n1.a;
			var newRow = _n1.b;
			var newCol = _n1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				elm$parser$Parser$Advanced$Bad,
				false,
				A4(elm$parser$Parser$Advanced$fromInfo, newRow, newCol, expecting, s.context)) : A3(
				elm$parser$Parser$Advanced$Good,
				_Utils_cmp(s.offset, newOffset) < 0,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var elm$parser$Parser$chompUntil = function (str) {
	return elm$parser$Parser$Advanced$chompUntil(
		elm$parser$Parser$toToken(str));
};
var elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
var elm$parser$Parser$Advanced$token = function (_n0) {
	var str = _n0.a;
	var expecting = _n0.b;
	var progress = !elm$core$String$isEmpty(str);
	return elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _n1 = A5(elm$parser$Parser$Advanced$isSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _n1.a;
			var newRow = _n1.b;
			var newCol = _n1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				elm$parser$Parser$Advanced$Bad,
				false,
				A2(elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
				elm$parser$Parser$Advanced$Good,
				progress,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var elm$parser$Parser$token = function (str) {
	return elm$parser$Parser$Advanced$token(
		elm$parser$Parser$toToken(str));
};
var hecrj$html_parser$Html$Parser$Comment = function (a) {
	return {$: 'Comment', a: a};
};
var hecrj$html_parser$Html$Parser$comment = A2(
	elm$parser$Parser$keeper,
	A2(
		elm$parser$Parser$ignorer,
		A2(
			elm$parser$Parser$ignorer,
			elm$parser$Parser$succeed(hecrj$html_parser$Html$Parser$Comment),
			elm$parser$Parser$token('<!')),
		elm$parser$Parser$token('--')),
	A2(
		elm$parser$Parser$ignorer,
		elm$parser$Parser$getChompedString(
			elm$parser$Parser$chompUntil('-->')),
		elm$parser$Parser$token('-->')));
var hecrj$html_parser$Html$Parser$voidElements = _List_fromArray(
	['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'link', 'meta', 'param', 'source', 'track', 'wbr']);
var hecrj$html_parser$Html$Parser$isVoidElement = function (name) {
	return A2(elm$core$List$member, name, hecrj$html_parser$Html$Parser$voidElements);
};
var elm$parser$Parser$Done = function (a) {
	return {$: 'Done', a: a};
};
var elm$parser$Parser$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var elm$parser$Parser$Advanced$map = F2(
	function (func, _n0) {
		var parse = _n0.a;
		return elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _n1 = parse(s0);
				if (_n1.$ === 'Good') {
					var p = _n1.a;
					var a = _n1.b;
					var s1 = _n1.c;
					return A3(
						elm$parser$Parser$Advanced$Good,
						p,
						func(a),
						s1);
				} else {
					var p = _n1.a;
					var x = _n1.b;
					return A2(elm$parser$Parser$Advanced$Bad, p, x);
				}
			});
	});
var elm$parser$Parser$map = elm$parser$Parser$Advanced$map;
var elm$parser$Parser$Advanced$Done = function (a) {
	return {$: 'Done', a: a};
};
var elm$parser$Parser$Advanced$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var elm$parser$Parser$toAdvancedStep = function (step) {
	if (step.$ === 'Loop') {
		var s = step.a;
		return elm$parser$Parser$Advanced$Loop(s);
	} else {
		var a = step.a;
		return elm$parser$Parser$Advanced$Done(a);
	}
};
var elm$parser$Parser$Advanced$loopHelp = F4(
	function (p, state, callback, s0) {
		loopHelp:
		while (true) {
			var _n0 = callback(state);
			var parse = _n0.a;
			var _n1 = parse(s0);
			if (_n1.$ === 'Good') {
				var p1 = _n1.a;
				var step = _n1.b;
				var s1 = _n1.c;
				if (step.$ === 'Loop') {
					var newState = step.a;
					var $temp$p = p || p1,
						$temp$state = newState,
						$temp$callback = callback,
						$temp$s0 = s1;
					p = $temp$p;
					state = $temp$state;
					callback = $temp$callback;
					s0 = $temp$s0;
					continue loopHelp;
				} else {
					var result = step.a;
					return A3(elm$parser$Parser$Advanced$Good, p || p1, result, s1);
				}
			} else {
				var p1 = _n1.a;
				var x = _n1.b;
				return A2(elm$parser$Parser$Advanced$Bad, p || p1, x);
			}
		}
	});
var elm$parser$Parser$Advanced$loop = F2(
	function (state, callback) {
		return elm$parser$Parser$Advanced$Parser(
			function (s) {
				return A4(elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);
			});
	});
var elm$parser$Parser$loop = F2(
	function (state, callback) {
		return A2(
			elm$parser$Parser$Advanced$loop,
			state,
			function (s) {
				return A2(
					elm$parser$Parser$map,
					elm$parser$Parser$toAdvancedStep,
					callback(s));
			});
	});
var hecrj$html_parser$Html$Parser$many = function (parser_) {
	return A2(
		elm$parser$Parser$loop,
		_List_Nil,
		function (list) {
			return elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						elm$parser$Parser$map,
						function (_new) {
							return elm$parser$Parser$Loop(
								A2(elm$core$List$cons, _new, list));
						},
						parser_),
						elm$parser$Parser$succeed(
						elm$parser$Parser$Done(
							elm$core$List$reverse(list)))
					]));
		});
};
var hecrj$html_parser$Html$Parser$isTagAttributeCharacter = function (c) {
	return (!hecrj$html_parser$Html$Parser$isSpaceCharacter(c)) && ((!_Utils_eq(
		c,
		_Utils_chr('\"'))) && ((!_Utils_eq(
		c,
		_Utils_chr('\''))) && ((!_Utils_eq(
		c,
		_Utils_chr('>'))) && ((!_Utils_eq(
		c,
		_Utils_chr('/'))) && (!_Utils_eq(
		c,
		_Utils_chr('=')))))));
};
var hecrj$html_parser$Html$Parser$tagAttributeName = A2(
	elm$parser$Parser$map,
	elm$core$String$toLower,
	elm$parser$Parser$getChompedString(
		hecrj$html_parser$Html$Parser$chompOneOrMore(hecrj$html_parser$Html$Parser$isTagAttributeCharacter)));
var hecrj$html_parser$Html$Parser$chompSemicolon = elm$parser$Parser$chompIf(
	elm$core$Basics$eq(
		_Utils_chr(';')));
var hecrj$html_parser$Html$Parser$NamedCharacterReferences$dict = elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('Aacute', 'Á'),
			_Utils_Tuple2('aacute', 'á'),
			_Utils_Tuple2('Abreve', 'Ă'),
			_Utils_Tuple2('abreve', 'ă'),
			_Utils_Tuple2('ac', '∾'),
			_Utils_Tuple2('acd', '∿'),
			_Utils_Tuple2('acE', '∾̳'),
			_Utils_Tuple2('Acirc', 'Â'),
			_Utils_Tuple2('acirc', 'â'),
			_Utils_Tuple2('acute', '´'),
			_Utils_Tuple2('Acy', 'А'),
			_Utils_Tuple2('acy', 'а'),
			_Utils_Tuple2('AElig', 'Æ'),
			_Utils_Tuple2('aelig', 'æ'),
			_Utils_Tuple2('af', '\u2061'),
			_Utils_Tuple2('Afr', '\ud835\udd04'),
			_Utils_Tuple2('afr', '\ud835\udd1e'),
			_Utils_Tuple2('Agrave', 'À'),
			_Utils_Tuple2('agrave', 'à'),
			_Utils_Tuple2('alefsym', 'ℵ'),
			_Utils_Tuple2('aleph', 'ℵ'),
			_Utils_Tuple2('Alpha', 'Α'),
			_Utils_Tuple2('alpha', 'α'),
			_Utils_Tuple2('Amacr', 'Ā'),
			_Utils_Tuple2('amacr', 'ā'),
			_Utils_Tuple2('amalg', '⨿'),
			_Utils_Tuple2('amp', '&'),
			_Utils_Tuple2('AMP', '&'),
			_Utils_Tuple2('andand', '⩕'),
			_Utils_Tuple2('And', '⩓'),
			_Utils_Tuple2('and', '∧'),
			_Utils_Tuple2('andd', '⩜'),
			_Utils_Tuple2('andslope', '⩘'),
			_Utils_Tuple2('andv', '⩚'),
			_Utils_Tuple2('ang', '∠'),
			_Utils_Tuple2('ange', '⦤'),
			_Utils_Tuple2('angle', '∠'),
			_Utils_Tuple2('angmsdaa', '⦨'),
			_Utils_Tuple2('angmsdab', '⦩'),
			_Utils_Tuple2('angmsdac', '⦪'),
			_Utils_Tuple2('angmsdad', '⦫'),
			_Utils_Tuple2('angmsdae', '⦬'),
			_Utils_Tuple2('angmsdaf', '⦭'),
			_Utils_Tuple2('angmsdag', '⦮'),
			_Utils_Tuple2('angmsdah', '⦯'),
			_Utils_Tuple2('angmsd', '∡'),
			_Utils_Tuple2('angrt', '∟'),
			_Utils_Tuple2('angrtvb', '⊾'),
			_Utils_Tuple2('angrtvbd', '⦝'),
			_Utils_Tuple2('angsph', '∢'),
			_Utils_Tuple2('angst', 'Å'),
			_Utils_Tuple2('angzarr', '⍼'),
			_Utils_Tuple2('Aogon', 'Ą'),
			_Utils_Tuple2('aogon', 'ą'),
			_Utils_Tuple2('Aopf', '\ud835\udd38'),
			_Utils_Tuple2('aopf', '\ud835\udd52'),
			_Utils_Tuple2('apacir', '⩯'),
			_Utils_Tuple2('ap', '≈'),
			_Utils_Tuple2('apE', '⩰'),
			_Utils_Tuple2('ape', '≊'),
			_Utils_Tuple2('apid', '≋'),
			_Utils_Tuple2('apos', '\''),
			_Utils_Tuple2('ApplyFunction', '\u2061'),
			_Utils_Tuple2('approx', '≈'),
			_Utils_Tuple2('approxeq', '≊'),
			_Utils_Tuple2('Aring', 'Å'),
			_Utils_Tuple2('aring', 'å'),
			_Utils_Tuple2('Ascr', '\ud835\udc9c'),
			_Utils_Tuple2('ascr', '\ud835\udcb6'),
			_Utils_Tuple2('Assign', '≔'),
			_Utils_Tuple2('ast', '*'),
			_Utils_Tuple2('asymp', '≈'),
			_Utils_Tuple2('asympeq', '≍'),
			_Utils_Tuple2('Atilde', 'Ã'),
			_Utils_Tuple2('atilde', 'ã'),
			_Utils_Tuple2('Auml', 'Ä'),
			_Utils_Tuple2('auml', 'ä'),
			_Utils_Tuple2('awconint', '∳'),
			_Utils_Tuple2('awint', '⨑'),
			_Utils_Tuple2('backcong', '≌'),
			_Utils_Tuple2('backepsilon', '϶'),
			_Utils_Tuple2('backprime', '‵'),
			_Utils_Tuple2('backsim', '∽'),
			_Utils_Tuple2('backsimeq', '⋍'),
			_Utils_Tuple2('Backslash', '∖'),
			_Utils_Tuple2('Barv', '⫧'),
			_Utils_Tuple2('barvee', '⊽'),
			_Utils_Tuple2('barwed', '⌅'),
			_Utils_Tuple2('Barwed', '⌆'),
			_Utils_Tuple2('barwedge', '⌅'),
			_Utils_Tuple2('bbrk', '⎵'),
			_Utils_Tuple2('bbrktbrk', '⎶'),
			_Utils_Tuple2('bcong', '≌'),
			_Utils_Tuple2('Bcy', 'Б'),
			_Utils_Tuple2('bcy', 'б'),
			_Utils_Tuple2('bdquo', '„'),
			_Utils_Tuple2('becaus', '∵'),
			_Utils_Tuple2('because', '∵'),
			_Utils_Tuple2('Because', '∵'),
			_Utils_Tuple2('bemptyv', '⦰'),
			_Utils_Tuple2('bepsi', '϶'),
			_Utils_Tuple2('bernou', 'ℬ'),
			_Utils_Tuple2('Bernoullis', 'ℬ'),
			_Utils_Tuple2('Beta', 'Β'),
			_Utils_Tuple2('beta', 'β'),
			_Utils_Tuple2('beth', 'ℶ'),
			_Utils_Tuple2('between', '≬'),
			_Utils_Tuple2('Bfr', '\ud835\udd05'),
			_Utils_Tuple2('bfr', '\ud835\udd1f'),
			_Utils_Tuple2('bigcap', '⋂'),
			_Utils_Tuple2('bigcirc', '◯'),
			_Utils_Tuple2('bigcup', '⋃'),
			_Utils_Tuple2('bigodot', '⨀'),
			_Utils_Tuple2('bigoplus', '⨁'),
			_Utils_Tuple2('bigotimes', '⨂'),
			_Utils_Tuple2('bigsqcup', '⨆'),
			_Utils_Tuple2('bigstar', '★'),
			_Utils_Tuple2('bigtriangledown', '▽'),
			_Utils_Tuple2('bigtriangleup', '△'),
			_Utils_Tuple2('biguplus', '⨄'),
			_Utils_Tuple2('bigvee', '⋁'),
			_Utils_Tuple2('bigwedge', '⋀'),
			_Utils_Tuple2('bkarow', '⤍'),
			_Utils_Tuple2('blacklozenge', '⧫'),
			_Utils_Tuple2('blacksquare', '▪'),
			_Utils_Tuple2('blacktriangle', '▴'),
			_Utils_Tuple2('blacktriangledown', '▾'),
			_Utils_Tuple2('blacktriangleleft', '◂'),
			_Utils_Tuple2('blacktriangleright', '▸'),
			_Utils_Tuple2('blank', '␣'),
			_Utils_Tuple2('blk12', '▒'),
			_Utils_Tuple2('blk14', '░'),
			_Utils_Tuple2('blk34', '▓'),
			_Utils_Tuple2('block', '█'),
			_Utils_Tuple2('bne', '=⃥'),
			_Utils_Tuple2('bnequiv', '≡⃥'),
			_Utils_Tuple2('bNot', '⫭'),
			_Utils_Tuple2('bnot', '⌐'),
			_Utils_Tuple2('Bopf', '\ud835\udd39'),
			_Utils_Tuple2('bopf', '\ud835\udd53'),
			_Utils_Tuple2('bot', '⊥'),
			_Utils_Tuple2('bottom', '⊥'),
			_Utils_Tuple2('bowtie', '⋈'),
			_Utils_Tuple2('boxbox', '⧉'),
			_Utils_Tuple2('boxdl', '┐'),
			_Utils_Tuple2('boxdL', '╕'),
			_Utils_Tuple2('boxDl', '╖'),
			_Utils_Tuple2('boxDL', '╗'),
			_Utils_Tuple2('boxdr', '┌'),
			_Utils_Tuple2('boxdR', '╒'),
			_Utils_Tuple2('boxDr', '╓'),
			_Utils_Tuple2('boxDR', '╔'),
			_Utils_Tuple2('boxh', '─'),
			_Utils_Tuple2('boxH', '═'),
			_Utils_Tuple2('boxhd', '┬'),
			_Utils_Tuple2('boxHd', '╤'),
			_Utils_Tuple2('boxhD', '╥'),
			_Utils_Tuple2('boxHD', '╦'),
			_Utils_Tuple2('boxhu', '┴'),
			_Utils_Tuple2('boxHu', '╧'),
			_Utils_Tuple2('boxhU', '╨'),
			_Utils_Tuple2('boxHU', '╩'),
			_Utils_Tuple2('boxminus', '⊟'),
			_Utils_Tuple2('boxplus', '⊞'),
			_Utils_Tuple2('boxtimes', '⊠'),
			_Utils_Tuple2('boxul', '┘'),
			_Utils_Tuple2('boxuL', '╛'),
			_Utils_Tuple2('boxUl', '╜'),
			_Utils_Tuple2('boxUL', '╝'),
			_Utils_Tuple2('boxur', '└'),
			_Utils_Tuple2('boxuR', '╘'),
			_Utils_Tuple2('boxUr', '╙'),
			_Utils_Tuple2('boxUR', '╚'),
			_Utils_Tuple2('boxv', '│'),
			_Utils_Tuple2('boxV', '║'),
			_Utils_Tuple2('boxvh', '┼'),
			_Utils_Tuple2('boxvH', '╪'),
			_Utils_Tuple2('boxVh', '╫'),
			_Utils_Tuple2('boxVH', '╬'),
			_Utils_Tuple2('boxvl', '┤'),
			_Utils_Tuple2('boxvL', '╡'),
			_Utils_Tuple2('boxVl', '╢'),
			_Utils_Tuple2('boxVL', '╣'),
			_Utils_Tuple2('boxvr', '├'),
			_Utils_Tuple2('boxvR', '╞'),
			_Utils_Tuple2('boxVr', '╟'),
			_Utils_Tuple2('boxVR', '╠'),
			_Utils_Tuple2('bprime', '‵'),
			_Utils_Tuple2('breve', '˘'),
			_Utils_Tuple2('Breve', '˘'),
			_Utils_Tuple2('brvbar', '¦'),
			_Utils_Tuple2('bscr', '\ud835\udcb7'),
			_Utils_Tuple2('Bscr', 'ℬ'),
			_Utils_Tuple2('bsemi', '⁏'),
			_Utils_Tuple2('bsim', '∽'),
			_Utils_Tuple2('bsime', '⋍'),
			_Utils_Tuple2('bsolb', '⧅'),
			_Utils_Tuple2('bsol', '\\'),
			_Utils_Tuple2('bsolhsub', '⟈'),
			_Utils_Tuple2('bull', '•'),
			_Utils_Tuple2('bullet', '•'),
			_Utils_Tuple2('bump', '≎'),
			_Utils_Tuple2('bumpE', '⪮'),
			_Utils_Tuple2('bumpe', '≏'),
			_Utils_Tuple2('Bumpeq', '≎'),
			_Utils_Tuple2('bumpeq', '≏'),
			_Utils_Tuple2('Cacute', 'Ć'),
			_Utils_Tuple2('cacute', 'ć'),
			_Utils_Tuple2('capand', '⩄'),
			_Utils_Tuple2('capbrcup', '⩉'),
			_Utils_Tuple2('capcap', '⩋'),
			_Utils_Tuple2('cap', '∩'),
			_Utils_Tuple2('Cap', '⋒'),
			_Utils_Tuple2('capcup', '⩇'),
			_Utils_Tuple2('capdot', '⩀'),
			_Utils_Tuple2('CapitalDifferentialD', 'ⅅ'),
			_Utils_Tuple2('caps', '∩︀'),
			_Utils_Tuple2('caret', '⁁'),
			_Utils_Tuple2('caron', 'ˇ'),
			_Utils_Tuple2('Cayleys', 'ℭ'),
			_Utils_Tuple2('ccaps', '⩍'),
			_Utils_Tuple2('Ccaron', 'Č'),
			_Utils_Tuple2('ccaron', 'č'),
			_Utils_Tuple2('Ccedil', 'Ç'),
			_Utils_Tuple2('ccedil', 'ç'),
			_Utils_Tuple2('Ccirc', 'Ĉ'),
			_Utils_Tuple2('ccirc', 'ĉ'),
			_Utils_Tuple2('Cconint', '∰'),
			_Utils_Tuple2('ccups', '⩌'),
			_Utils_Tuple2('ccupssm', '⩐'),
			_Utils_Tuple2('Cdot', 'Ċ'),
			_Utils_Tuple2('cdot', 'ċ'),
			_Utils_Tuple2('cedil', '¸'),
			_Utils_Tuple2('Cedilla', '¸'),
			_Utils_Tuple2('cemptyv', '⦲'),
			_Utils_Tuple2('cent', '¢'),
			_Utils_Tuple2('centerdot', '·'),
			_Utils_Tuple2('CenterDot', '·'),
			_Utils_Tuple2('cfr', '\ud835\udd20'),
			_Utils_Tuple2('Cfr', 'ℭ'),
			_Utils_Tuple2('CHcy', 'Ч'),
			_Utils_Tuple2('chcy', 'ч'),
			_Utils_Tuple2('check', '✓'),
			_Utils_Tuple2('checkmark', '✓'),
			_Utils_Tuple2('Chi', 'Χ'),
			_Utils_Tuple2('chi', 'χ'),
			_Utils_Tuple2('circ', 'ˆ'),
			_Utils_Tuple2('circeq', '≗'),
			_Utils_Tuple2('circlearrowleft', '↺'),
			_Utils_Tuple2('circlearrowright', '↻'),
			_Utils_Tuple2('circledast', '⊛'),
			_Utils_Tuple2('circledcirc', '⊚'),
			_Utils_Tuple2('circleddash', '⊝'),
			_Utils_Tuple2('CircleDot', '⊙'),
			_Utils_Tuple2('circledR', '®'),
			_Utils_Tuple2('circledS', 'Ⓢ'),
			_Utils_Tuple2('CircleMinus', '⊖'),
			_Utils_Tuple2('CirclePlus', '⊕'),
			_Utils_Tuple2('CircleTimes', '⊗'),
			_Utils_Tuple2('cir', '○'),
			_Utils_Tuple2('cirE', '⧃'),
			_Utils_Tuple2('cire', '≗'),
			_Utils_Tuple2('cirfnint', '⨐'),
			_Utils_Tuple2('cirmid', '⫯'),
			_Utils_Tuple2('cirscir', '⧂'),
			_Utils_Tuple2('ClockwiseContourIntegral', '∲'),
			_Utils_Tuple2('CloseCurlyDoubleQuote', '”'),
			_Utils_Tuple2('CloseCurlyQuote', '’'),
			_Utils_Tuple2('clubs', '♣'),
			_Utils_Tuple2('clubsuit', '♣'),
			_Utils_Tuple2('colon', ':'),
			_Utils_Tuple2('Colon', '∷'),
			_Utils_Tuple2('Colone', '⩴'),
			_Utils_Tuple2('colone', '≔'),
			_Utils_Tuple2('coloneq', '≔'),
			_Utils_Tuple2('comma', ','),
			_Utils_Tuple2('commat', '@'),
			_Utils_Tuple2('comp', '∁'),
			_Utils_Tuple2('compfn', '∘'),
			_Utils_Tuple2('complement', '∁'),
			_Utils_Tuple2('complexes', 'ℂ'),
			_Utils_Tuple2('cong', '≅'),
			_Utils_Tuple2('congdot', '⩭'),
			_Utils_Tuple2('Congruent', '≡'),
			_Utils_Tuple2('conint', '∮'),
			_Utils_Tuple2('Conint', '∯'),
			_Utils_Tuple2('ContourIntegral', '∮'),
			_Utils_Tuple2('copf', '\ud835\udd54'),
			_Utils_Tuple2('Copf', 'ℂ'),
			_Utils_Tuple2('coprod', '∐'),
			_Utils_Tuple2('Coproduct', '∐'),
			_Utils_Tuple2('copy', '©'),
			_Utils_Tuple2('COPY', '©'),
			_Utils_Tuple2('copysr', '℗'),
			_Utils_Tuple2('CounterClockwiseContourIntegral', '∳'),
			_Utils_Tuple2('crarr', '↵'),
			_Utils_Tuple2('cross', '✗'),
			_Utils_Tuple2('Cross', '⨯'),
			_Utils_Tuple2('Cscr', '\ud835\udc9e'),
			_Utils_Tuple2('cscr', '\ud835\udcb8'),
			_Utils_Tuple2('csub', '⫏'),
			_Utils_Tuple2('csube', '⫑'),
			_Utils_Tuple2('csup', '⫐'),
			_Utils_Tuple2('csupe', '⫒'),
			_Utils_Tuple2('ctdot', '⋯'),
			_Utils_Tuple2('cudarrl', '⤸'),
			_Utils_Tuple2('cudarrr', '⤵'),
			_Utils_Tuple2('cuepr', '⋞'),
			_Utils_Tuple2('cuesc', '⋟'),
			_Utils_Tuple2('cularr', '↶'),
			_Utils_Tuple2('cularrp', '⤽'),
			_Utils_Tuple2('cupbrcap', '⩈'),
			_Utils_Tuple2('cupcap', '⩆'),
			_Utils_Tuple2('CupCap', '≍'),
			_Utils_Tuple2('cup', '∪'),
			_Utils_Tuple2('Cup', '⋓'),
			_Utils_Tuple2('cupcup', '⩊'),
			_Utils_Tuple2('cupdot', '⊍'),
			_Utils_Tuple2('cupor', '⩅'),
			_Utils_Tuple2('cups', '∪︀'),
			_Utils_Tuple2('curarr', '↷'),
			_Utils_Tuple2('curarrm', '⤼'),
			_Utils_Tuple2('curlyeqprec', '⋞'),
			_Utils_Tuple2('curlyeqsucc', '⋟'),
			_Utils_Tuple2('curlyvee', '⋎'),
			_Utils_Tuple2('curlywedge', '⋏'),
			_Utils_Tuple2('curren', '¤'),
			_Utils_Tuple2('curvearrowleft', '↶'),
			_Utils_Tuple2('curvearrowright', '↷'),
			_Utils_Tuple2('cuvee', '⋎'),
			_Utils_Tuple2('cuwed', '⋏'),
			_Utils_Tuple2('cwconint', '∲'),
			_Utils_Tuple2('cwint', '∱'),
			_Utils_Tuple2('cylcty', '⌭'),
			_Utils_Tuple2('dagger', '†'),
			_Utils_Tuple2('Dagger', '‡'),
			_Utils_Tuple2('daleth', 'ℸ'),
			_Utils_Tuple2('darr', '↓'),
			_Utils_Tuple2('Darr', '↡'),
			_Utils_Tuple2('dArr', '⇓'),
			_Utils_Tuple2('dash', '‐'),
			_Utils_Tuple2('Dashv', '⫤'),
			_Utils_Tuple2('dashv', '⊣'),
			_Utils_Tuple2('dbkarow', '⤏'),
			_Utils_Tuple2('dblac', '˝'),
			_Utils_Tuple2('Dcaron', 'Ď'),
			_Utils_Tuple2('dcaron', 'ď'),
			_Utils_Tuple2('Dcy', 'Д'),
			_Utils_Tuple2('dcy', 'д'),
			_Utils_Tuple2('ddagger', '‡'),
			_Utils_Tuple2('ddarr', '⇊'),
			_Utils_Tuple2('DD', 'ⅅ'),
			_Utils_Tuple2('dd', 'ⅆ'),
			_Utils_Tuple2('DDotrahd', '⤑'),
			_Utils_Tuple2('ddotseq', '⩷'),
			_Utils_Tuple2('deg', '°'),
			_Utils_Tuple2('Del', '∇'),
			_Utils_Tuple2('Delta', 'Δ'),
			_Utils_Tuple2('delta', 'δ'),
			_Utils_Tuple2('demptyv', '⦱'),
			_Utils_Tuple2('dfisht', '⥿'),
			_Utils_Tuple2('Dfr', '\ud835\udd07'),
			_Utils_Tuple2('dfr', '\ud835\udd21'),
			_Utils_Tuple2('dHar', '⥥'),
			_Utils_Tuple2('dharl', '⇃'),
			_Utils_Tuple2('dharr', '⇂'),
			_Utils_Tuple2('DiacriticalAcute', '´'),
			_Utils_Tuple2('DiacriticalDot', '˙'),
			_Utils_Tuple2('DiacriticalDoubleAcute', '˝'),
			_Utils_Tuple2('DiacriticalGrave', '`'),
			_Utils_Tuple2('DiacriticalTilde', '˜'),
			_Utils_Tuple2('diam', '⋄'),
			_Utils_Tuple2('diamond', '⋄'),
			_Utils_Tuple2('Diamond', '⋄'),
			_Utils_Tuple2('diamondsuit', '♦'),
			_Utils_Tuple2('diams', '♦'),
			_Utils_Tuple2('die', '¨'),
			_Utils_Tuple2('DifferentialD', 'ⅆ'),
			_Utils_Tuple2('digamma', 'ϝ'),
			_Utils_Tuple2('disin', '⋲'),
			_Utils_Tuple2('div', '÷'),
			_Utils_Tuple2('divide', '÷'),
			_Utils_Tuple2('divideontimes', '⋇'),
			_Utils_Tuple2('divonx', '⋇'),
			_Utils_Tuple2('DJcy', 'Ђ'),
			_Utils_Tuple2('djcy', 'ђ'),
			_Utils_Tuple2('dlcorn', '⌞'),
			_Utils_Tuple2('dlcrop', '⌍'),
			_Utils_Tuple2('dollar', '$'),
			_Utils_Tuple2('Dopf', '\ud835\udd3b'),
			_Utils_Tuple2('dopf', '\ud835\udd55'),
			_Utils_Tuple2('Dot', '¨'),
			_Utils_Tuple2('dot', '˙'),
			_Utils_Tuple2('DotDot', '⃜'),
			_Utils_Tuple2('doteq', '≐'),
			_Utils_Tuple2('doteqdot', '≑'),
			_Utils_Tuple2('DotEqual', '≐'),
			_Utils_Tuple2('dotminus', '∸'),
			_Utils_Tuple2('dotplus', '∔'),
			_Utils_Tuple2('dotsquare', '⊡'),
			_Utils_Tuple2('doublebarwedge', '⌆'),
			_Utils_Tuple2('DoubleContourIntegral', '∯'),
			_Utils_Tuple2('DoubleDot', '¨'),
			_Utils_Tuple2('DoubleDownArrow', '⇓'),
			_Utils_Tuple2('DoubleLeftArrow', '⇐'),
			_Utils_Tuple2('DoubleLeftRightArrow', '⇔'),
			_Utils_Tuple2('DoubleLeftTee', '⫤'),
			_Utils_Tuple2('DoubleLongLeftArrow', '⟸'),
			_Utils_Tuple2('DoubleLongLeftRightArrow', '⟺'),
			_Utils_Tuple2('DoubleLongRightArrow', '⟹'),
			_Utils_Tuple2('DoubleRightArrow', '⇒'),
			_Utils_Tuple2('DoubleRightTee', '⊨'),
			_Utils_Tuple2('DoubleUpArrow', '⇑'),
			_Utils_Tuple2('DoubleUpDownArrow', '⇕'),
			_Utils_Tuple2('DoubleVerticalBar', '∥'),
			_Utils_Tuple2('DownArrowBar', '⤓'),
			_Utils_Tuple2('downarrow', '↓'),
			_Utils_Tuple2('DownArrow', '↓'),
			_Utils_Tuple2('Downarrow', '⇓'),
			_Utils_Tuple2('DownArrowUpArrow', '⇵'),
			_Utils_Tuple2('DownBreve', '̑'),
			_Utils_Tuple2('downdownarrows', '⇊'),
			_Utils_Tuple2('downharpoonleft', '⇃'),
			_Utils_Tuple2('downharpoonright', '⇂'),
			_Utils_Tuple2('DownLeftRightVector', '⥐'),
			_Utils_Tuple2('DownLeftTeeVector', '⥞'),
			_Utils_Tuple2('DownLeftVectorBar', '⥖'),
			_Utils_Tuple2('DownLeftVector', '↽'),
			_Utils_Tuple2('DownRightTeeVector', '⥟'),
			_Utils_Tuple2('DownRightVectorBar', '⥗'),
			_Utils_Tuple2('DownRightVector', '⇁'),
			_Utils_Tuple2('DownTeeArrow', '↧'),
			_Utils_Tuple2('DownTee', '⊤'),
			_Utils_Tuple2('drbkarow', '⤐'),
			_Utils_Tuple2('drcorn', '⌟'),
			_Utils_Tuple2('drcrop', '⌌'),
			_Utils_Tuple2('Dscr', '\ud835\udc9f'),
			_Utils_Tuple2('dscr', '\ud835\udcb9'),
			_Utils_Tuple2('DScy', 'Ѕ'),
			_Utils_Tuple2('dscy', 'ѕ'),
			_Utils_Tuple2('dsol', '⧶'),
			_Utils_Tuple2('Dstrok', 'Đ'),
			_Utils_Tuple2('dstrok', 'đ'),
			_Utils_Tuple2('dtdot', '⋱'),
			_Utils_Tuple2('dtri', '▿'),
			_Utils_Tuple2('dtrif', '▾'),
			_Utils_Tuple2('duarr', '⇵'),
			_Utils_Tuple2('duhar', '⥯'),
			_Utils_Tuple2('dwangle', '⦦'),
			_Utils_Tuple2('DZcy', 'Џ'),
			_Utils_Tuple2('dzcy', 'џ'),
			_Utils_Tuple2('dzigrarr', '⟿'),
			_Utils_Tuple2('Eacute', 'É'),
			_Utils_Tuple2('eacute', 'é'),
			_Utils_Tuple2('easter', '⩮'),
			_Utils_Tuple2('Ecaron', 'Ě'),
			_Utils_Tuple2('ecaron', 'ě'),
			_Utils_Tuple2('Ecirc', 'Ê'),
			_Utils_Tuple2('ecirc', 'ê'),
			_Utils_Tuple2('ecir', '≖'),
			_Utils_Tuple2('ecolon', '≕'),
			_Utils_Tuple2('Ecy', 'Э'),
			_Utils_Tuple2('ecy', 'э'),
			_Utils_Tuple2('eDDot', '⩷'),
			_Utils_Tuple2('Edot', 'Ė'),
			_Utils_Tuple2('edot', 'ė'),
			_Utils_Tuple2('eDot', '≑'),
			_Utils_Tuple2('ee', 'ⅇ'),
			_Utils_Tuple2('efDot', '≒'),
			_Utils_Tuple2('Efr', '\ud835\udd08'),
			_Utils_Tuple2('efr', '\ud835\udd22'),
			_Utils_Tuple2('eg', '⪚'),
			_Utils_Tuple2('Egrave', 'È'),
			_Utils_Tuple2('egrave', 'è'),
			_Utils_Tuple2('egs', '⪖'),
			_Utils_Tuple2('egsdot', '⪘'),
			_Utils_Tuple2('el', '⪙'),
			_Utils_Tuple2('Element', '∈'),
			_Utils_Tuple2('elinters', '⏧'),
			_Utils_Tuple2('ell', 'ℓ'),
			_Utils_Tuple2('els', '⪕'),
			_Utils_Tuple2('elsdot', '⪗'),
			_Utils_Tuple2('Emacr', 'Ē'),
			_Utils_Tuple2('emacr', 'ē'),
			_Utils_Tuple2('empty', '∅'),
			_Utils_Tuple2('emptyset', '∅'),
			_Utils_Tuple2('EmptySmallSquare', '◻'),
			_Utils_Tuple2('emptyv', '∅'),
			_Utils_Tuple2('EmptyVerySmallSquare', '▫'),
			_Utils_Tuple2('emsp13', '\u2004'),
			_Utils_Tuple2('emsp14', '\u2005'),
			_Utils_Tuple2('emsp', '\u2003'),
			_Utils_Tuple2('ENG', 'Ŋ'),
			_Utils_Tuple2('eng', 'ŋ'),
			_Utils_Tuple2('ensp', '\u2002'),
			_Utils_Tuple2('Eogon', 'Ę'),
			_Utils_Tuple2('eogon', 'ę'),
			_Utils_Tuple2('Eopf', '\ud835\udd3c'),
			_Utils_Tuple2('eopf', '\ud835\udd56'),
			_Utils_Tuple2('epar', '⋕'),
			_Utils_Tuple2('eparsl', '⧣'),
			_Utils_Tuple2('eplus', '⩱'),
			_Utils_Tuple2('epsi', 'ε'),
			_Utils_Tuple2('Epsilon', 'Ε'),
			_Utils_Tuple2('epsilon', 'ε'),
			_Utils_Tuple2('epsiv', 'ϵ'),
			_Utils_Tuple2('eqcirc', '≖'),
			_Utils_Tuple2('eqcolon', '≕'),
			_Utils_Tuple2('eqsim', '≂'),
			_Utils_Tuple2('eqslantgtr', '⪖'),
			_Utils_Tuple2('eqslantless', '⪕'),
			_Utils_Tuple2('Equal', '⩵'),
			_Utils_Tuple2('equals', '='),
			_Utils_Tuple2('EqualTilde', '≂'),
			_Utils_Tuple2('equest', '≟'),
			_Utils_Tuple2('Equilibrium', '⇌'),
			_Utils_Tuple2('equiv', '≡'),
			_Utils_Tuple2('equivDD', '⩸'),
			_Utils_Tuple2('eqvparsl', '⧥'),
			_Utils_Tuple2('erarr', '⥱'),
			_Utils_Tuple2('erDot', '≓'),
			_Utils_Tuple2('escr', 'ℯ'),
			_Utils_Tuple2('Escr', 'ℰ'),
			_Utils_Tuple2('esdot', '≐'),
			_Utils_Tuple2('Esim', '⩳'),
			_Utils_Tuple2('esim', '≂'),
			_Utils_Tuple2('Eta', 'Η'),
			_Utils_Tuple2('eta', 'η'),
			_Utils_Tuple2('ETH', 'Ð'),
			_Utils_Tuple2('eth', 'ð'),
			_Utils_Tuple2('Euml', 'Ë'),
			_Utils_Tuple2('euml', 'ë'),
			_Utils_Tuple2('euro', '€'),
			_Utils_Tuple2('excl', '!'),
			_Utils_Tuple2('exist', '∃'),
			_Utils_Tuple2('Exists', '∃'),
			_Utils_Tuple2('expectation', 'ℰ'),
			_Utils_Tuple2('exponentiale', 'ⅇ'),
			_Utils_Tuple2('ExponentialE', 'ⅇ'),
			_Utils_Tuple2('fallingdotseq', '≒'),
			_Utils_Tuple2('Fcy', 'Ф'),
			_Utils_Tuple2('fcy', 'ф'),
			_Utils_Tuple2('female', '♀'),
			_Utils_Tuple2('ffilig', 'ﬃ'),
			_Utils_Tuple2('fflig', 'ﬀ'),
			_Utils_Tuple2('ffllig', 'ﬄ'),
			_Utils_Tuple2('Ffr', '\ud835\udd09'),
			_Utils_Tuple2('ffr', '\ud835\udd23'),
			_Utils_Tuple2('filig', 'ﬁ'),
			_Utils_Tuple2('FilledSmallSquare', '◼'),
			_Utils_Tuple2('FilledVerySmallSquare', '▪'),
			_Utils_Tuple2('fjlig', 'fj'),
			_Utils_Tuple2('flat', '♭'),
			_Utils_Tuple2('fllig', 'ﬂ'),
			_Utils_Tuple2('fltns', '▱'),
			_Utils_Tuple2('fnof', 'ƒ'),
			_Utils_Tuple2('Fopf', '\ud835\udd3d'),
			_Utils_Tuple2('fopf', '\ud835\udd57'),
			_Utils_Tuple2('forall', '∀'),
			_Utils_Tuple2('ForAll', '∀'),
			_Utils_Tuple2('fork', '⋔'),
			_Utils_Tuple2('forkv', '⫙'),
			_Utils_Tuple2('Fouriertrf', 'ℱ'),
			_Utils_Tuple2('fpartint', '⨍'),
			_Utils_Tuple2('frac12', '½'),
			_Utils_Tuple2('frac13', '⅓'),
			_Utils_Tuple2('frac14', '¼'),
			_Utils_Tuple2('frac15', '⅕'),
			_Utils_Tuple2('frac16', '⅙'),
			_Utils_Tuple2('frac18', '⅛'),
			_Utils_Tuple2('frac23', '⅔'),
			_Utils_Tuple2('frac25', '⅖'),
			_Utils_Tuple2('frac34', '¾'),
			_Utils_Tuple2('frac35', '⅗'),
			_Utils_Tuple2('frac38', '⅜'),
			_Utils_Tuple2('frac45', '⅘'),
			_Utils_Tuple2('frac56', '⅚'),
			_Utils_Tuple2('frac58', '⅝'),
			_Utils_Tuple2('frac78', '⅞'),
			_Utils_Tuple2('frasl', '⁄'),
			_Utils_Tuple2('frown', '⌢'),
			_Utils_Tuple2('fscr', '\ud835\udcbb'),
			_Utils_Tuple2('Fscr', 'ℱ'),
			_Utils_Tuple2('gacute', 'ǵ'),
			_Utils_Tuple2('Gamma', 'Γ'),
			_Utils_Tuple2('gamma', 'γ'),
			_Utils_Tuple2('Gammad', 'Ϝ'),
			_Utils_Tuple2('gammad', 'ϝ'),
			_Utils_Tuple2('gap', '⪆'),
			_Utils_Tuple2('Gbreve', 'Ğ'),
			_Utils_Tuple2('gbreve', 'ğ'),
			_Utils_Tuple2('Gcedil', 'Ģ'),
			_Utils_Tuple2('Gcirc', 'Ĝ'),
			_Utils_Tuple2('gcirc', 'ĝ'),
			_Utils_Tuple2('Gcy', 'Г'),
			_Utils_Tuple2('gcy', 'г'),
			_Utils_Tuple2('Gdot', 'Ġ'),
			_Utils_Tuple2('gdot', 'ġ'),
			_Utils_Tuple2('ge', '≥'),
			_Utils_Tuple2('gE', '≧'),
			_Utils_Tuple2('gEl', '⪌'),
			_Utils_Tuple2('gel', '⋛'),
			_Utils_Tuple2('geq', '≥'),
			_Utils_Tuple2('geqq', '≧'),
			_Utils_Tuple2('geqslant', '⩾'),
			_Utils_Tuple2('gescc', '⪩'),
			_Utils_Tuple2('ges', '⩾'),
			_Utils_Tuple2('gesdot', '⪀'),
			_Utils_Tuple2('gesdoto', '⪂'),
			_Utils_Tuple2('gesdotol', '⪄'),
			_Utils_Tuple2('gesl', '⋛︀'),
			_Utils_Tuple2('gesles', '⪔'),
			_Utils_Tuple2('Gfr', '\ud835\udd0a'),
			_Utils_Tuple2('gfr', '\ud835\udd24'),
			_Utils_Tuple2('gg', '≫'),
			_Utils_Tuple2('Gg', '⋙'),
			_Utils_Tuple2('ggg', '⋙'),
			_Utils_Tuple2('gimel', 'ℷ'),
			_Utils_Tuple2('GJcy', 'Ѓ'),
			_Utils_Tuple2('gjcy', 'ѓ'),
			_Utils_Tuple2('gla', '⪥'),
			_Utils_Tuple2('gl', '≷'),
			_Utils_Tuple2('glE', '⪒'),
			_Utils_Tuple2('glj', '⪤'),
			_Utils_Tuple2('gnap', '⪊'),
			_Utils_Tuple2('gnapprox', '⪊'),
			_Utils_Tuple2('gne', '⪈'),
			_Utils_Tuple2('gnE', '≩'),
			_Utils_Tuple2('gneq', '⪈'),
			_Utils_Tuple2('gneqq', '≩'),
			_Utils_Tuple2('gnsim', '⋧'),
			_Utils_Tuple2('Gopf', '\ud835\udd3e'),
			_Utils_Tuple2('gopf', '\ud835\udd58'),
			_Utils_Tuple2('grave', '`'),
			_Utils_Tuple2('GreaterEqual', '≥'),
			_Utils_Tuple2('GreaterEqualLess', '⋛'),
			_Utils_Tuple2('GreaterFullEqual', '≧'),
			_Utils_Tuple2('GreaterGreater', '⪢'),
			_Utils_Tuple2('GreaterLess', '≷'),
			_Utils_Tuple2('GreaterSlantEqual', '⩾'),
			_Utils_Tuple2('GreaterTilde', '≳'),
			_Utils_Tuple2('Gscr', '\ud835\udca2'),
			_Utils_Tuple2('gscr', 'ℊ'),
			_Utils_Tuple2('gsim', '≳'),
			_Utils_Tuple2('gsime', '⪎'),
			_Utils_Tuple2('gsiml', '⪐'),
			_Utils_Tuple2('gtcc', '⪧'),
			_Utils_Tuple2('gtcir', '⩺'),
			_Utils_Tuple2('gt', '>'),
			_Utils_Tuple2('GT', '>'),
			_Utils_Tuple2('Gt', '≫'),
			_Utils_Tuple2('gtdot', '⋗'),
			_Utils_Tuple2('gtlPar', '⦕'),
			_Utils_Tuple2('gtquest', '⩼'),
			_Utils_Tuple2('gtrapprox', '⪆'),
			_Utils_Tuple2('gtrarr', '⥸'),
			_Utils_Tuple2('gtrdot', '⋗'),
			_Utils_Tuple2('gtreqless', '⋛'),
			_Utils_Tuple2('gtreqqless', '⪌'),
			_Utils_Tuple2('gtrless', '≷'),
			_Utils_Tuple2('gtrsim', '≳'),
			_Utils_Tuple2('gvertneqq', '≩︀'),
			_Utils_Tuple2('gvnE', '≩︀'),
			_Utils_Tuple2('Hacek', 'ˇ'),
			_Utils_Tuple2('hairsp', '\u200a'),
			_Utils_Tuple2('half', '½'),
			_Utils_Tuple2('hamilt', 'ℋ'),
			_Utils_Tuple2('HARDcy', 'Ъ'),
			_Utils_Tuple2('hardcy', 'ъ'),
			_Utils_Tuple2('harrcir', '⥈'),
			_Utils_Tuple2('harr', '↔'),
			_Utils_Tuple2('hArr', '⇔'),
			_Utils_Tuple2('harrw', '↭'),
			_Utils_Tuple2('Hat', '^'),
			_Utils_Tuple2('hbar', 'ℏ'),
			_Utils_Tuple2('Hcirc', 'Ĥ'),
			_Utils_Tuple2('hcirc', 'ĥ'),
			_Utils_Tuple2('hearts', '♥'),
			_Utils_Tuple2('heartsuit', '♥'),
			_Utils_Tuple2('hellip', '…'),
			_Utils_Tuple2('hercon', '⊹'),
			_Utils_Tuple2('hfr', '\ud835\udd25'),
			_Utils_Tuple2('Hfr', 'ℌ'),
			_Utils_Tuple2('HilbertSpace', 'ℋ'),
			_Utils_Tuple2('hksearow', '⤥'),
			_Utils_Tuple2('hkswarow', '⤦'),
			_Utils_Tuple2('hoarr', '⇿'),
			_Utils_Tuple2('homtht', '∻'),
			_Utils_Tuple2('hookleftarrow', '↩'),
			_Utils_Tuple2('hookrightarrow', '↪'),
			_Utils_Tuple2('hopf', '\ud835\udd59'),
			_Utils_Tuple2('Hopf', 'ℍ'),
			_Utils_Tuple2('horbar', '―'),
			_Utils_Tuple2('HorizontalLine', '─'),
			_Utils_Tuple2('hscr', '\ud835\udcbd'),
			_Utils_Tuple2('Hscr', 'ℋ'),
			_Utils_Tuple2('hslash', 'ℏ'),
			_Utils_Tuple2('Hstrok', 'Ħ'),
			_Utils_Tuple2('hstrok', 'ħ'),
			_Utils_Tuple2('HumpDownHump', '≎'),
			_Utils_Tuple2('HumpEqual', '≏'),
			_Utils_Tuple2('hybull', '⁃'),
			_Utils_Tuple2('hyphen', '‐'),
			_Utils_Tuple2('Iacute', 'Í'),
			_Utils_Tuple2('iacute', 'í'),
			_Utils_Tuple2('ic', '\u2063'),
			_Utils_Tuple2('Icirc', 'Î'),
			_Utils_Tuple2('icirc', 'î'),
			_Utils_Tuple2('Icy', 'И'),
			_Utils_Tuple2('icy', 'и'),
			_Utils_Tuple2('Idot', 'İ'),
			_Utils_Tuple2('IEcy', 'Е'),
			_Utils_Tuple2('iecy', 'е'),
			_Utils_Tuple2('iexcl', '¡'),
			_Utils_Tuple2('iff', '⇔'),
			_Utils_Tuple2('ifr', '\ud835\udd26'),
			_Utils_Tuple2('Ifr', 'ℑ'),
			_Utils_Tuple2('Igrave', 'Ì'),
			_Utils_Tuple2('igrave', 'ì'),
			_Utils_Tuple2('ii', 'ⅈ'),
			_Utils_Tuple2('iiiint', '⨌'),
			_Utils_Tuple2('iiint', '∭'),
			_Utils_Tuple2('iinfin', '⧜'),
			_Utils_Tuple2('iiota', '℩'),
			_Utils_Tuple2('IJlig', 'Ĳ'),
			_Utils_Tuple2('ijlig', 'ĳ'),
			_Utils_Tuple2('Imacr', 'Ī'),
			_Utils_Tuple2('imacr', 'ī'),
			_Utils_Tuple2('image', 'ℑ'),
			_Utils_Tuple2('ImaginaryI', 'ⅈ'),
			_Utils_Tuple2('imagline', 'ℐ'),
			_Utils_Tuple2('imagpart', 'ℑ'),
			_Utils_Tuple2('imath', 'ı'),
			_Utils_Tuple2('Im', 'ℑ'),
			_Utils_Tuple2('imof', '⊷'),
			_Utils_Tuple2('imped', 'Ƶ'),
			_Utils_Tuple2('Implies', '⇒'),
			_Utils_Tuple2('incare', '℅'),
			_Utils_Tuple2('in', '∈'),
			_Utils_Tuple2('infin', '∞'),
			_Utils_Tuple2('infintie', '⧝'),
			_Utils_Tuple2('inodot', 'ı'),
			_Utils_Tuple2('intcal', '⊺'),
			_Utils_Tuple2('int', '∫'),
			_Utils_Tuple2('Int', '∬'),
			_Utils_Tuple2('integers', 'ℤ'),
			_Utils_Tuple2('Integral', '∫'),
			_Utils_Tuple2('intercal', '⊺'),
			_Utils_Tuple2('Intersection', '⋂'),
			_Utils_Tuple2('intlarhk', '⨗'),
			_Utils_Tuple2('intprod', '⨼'),
			_Utils_Tuple2('InvisibleComma', '\u2063'),
			_Utils_Tuple2('InvisibleTimes', '\u2062'),
			_Utils_Tuple2('IOcy', 'Ё'),
			_Utils_Tuple2('iocy', 'ё'),
			_Utils_Tuple2('Iogon', 'Į'),
			_Utils_Tuple2('iogon', 'į'),
			_Utils_Tuple2('Iopf', '\ud835\udd40'),
			_Utils_Tuple2('iopf', '\ud835\udd5a'),
			_Utils_Tuple2('Iota', 'Ι'),
			_Utils_Tuple2('iota', 'ι'),
			_Utils_Tuple2('iprod', '⨼'),
			_Utils_Tuple2('iquest', '¿'),
			_Utils_Tuple2('iscr', '\ud835\udcbe'),
			_Utils_Tuple2('Iscr', 'ℐ'),
			_Utils_Tuple2('isin', '∈'),
			_Utils_Tuple2('isindot', '⋵'),
			_Utils_Tuple2('isinE', '⋹'),
			_Utils_Tuple2('isins', '⋴'),
			_Utils_Tuple2('isinsv', '⋳'),
			_Utils_Tuple2('isinv', '∈'),
			_Utils_Tuple2('it', '\u2062'),
			_Utils_Tuple2('Itilde', 'Ĩ'),
			_Utils_Tuple2('itilde', 'ĩ'),
			_Utils_Tuple2('Iukcy', 'І'),
			_Utils_Tuple2('iukcy', 'і'),
			_Utils_Tuple2('Iuml', 'Ï'),
			_Utils_Tuple2('iuml', 'ï'),
			_Utils_Tuple2('Jcirc', 'Ĵ'),
			_Utils_Tuple2('jcirc', 'ĵ'),
			_Utils_Tuple2('Jcy', 'Й'),
			_Utils_Tuple2('jcy', 'й'),
			_Utils_Tuple2('Jfr', '\ud835\udd0d'),
			_Utils_Tuple2('jfr', '\ud835\udd27'),
			_Utils_Tuple2('jmath', 'ȷ'),
			_Utils_Tuple2('Jopf', '\ud835\udd41'),
			_Utils_Tuple2('jopf', '\ud835\udd5b'),
			_Utils_Tuple2('Jscr', '\ud835\udca5'),
			_Utils_Tuple2('jscr', '\ud835\udcbf'),
			_Utils_Tuple2('Jsercy', 'Ј'),
			_Utils_Tuple2('jsercy', 'ј'),
			_Utils_Tuple2('Jukcy', 'Є'),
			_Utils_Tuple2('jukcy', 'є'),
			_Utils_Tuple2('Kappa', 'Κ'),
			_Utils_Tuple2('kappa', 'κ'),
			_Utils_Tuple2('kappav', 'ϰ'),
			_Utils_Tuple2('Kcedil', 'Ķ'),
			_Utils_Tuple2('kcedil', 'ķ'),
			_Utils_Tuple2('Kcy', 'К'),
			_Utils_Tuple2('kcy', 'к'),
			_Utils_Tuple2('Kfr', '\ud835\udd0e'),
			_Utils_Tuple2('kfr', '\ud835\udd28'),
			_Utils_Tuple2('kgreen', 'ĸ'),
			_Utils_Tuple2('KHcy', 'Х'),
			_Utils_Tuple2('khcy', 'х'),
			_Utils_Tuple2('KJcy', 'Ќ'),
			_Utils_Tuple2('kjcy', 'ќ'),
			_Utils_Tuple2('Kopf', '\ud835\udd42'),
			_Utils_Tuple2('kopf', '\ud835\udd5c'),
			_Utils_Tuple2('Kscr', '\ud835\udca6'),
			_Utils_Tuple2('kscr', '\ud835\udcc0'),
			_Utils_Tuple2('lAarr', '⇚'),
			_Utils_Tuple2('Lacute', 'Ĺ'),
			_Utils_Tuple2('lacute', 'ĺ'),
			_Utils_Tuple2('laemptyv', '⦴'),
			_Utils_Tuple2('lagran', 'ℒ'),
			_Utils_Tuple2('Lambda', 'Λ'),
			_Utils_Tuple2('lambda', 'λ'),
			_Utils_Tuple2('lang', '⟨'),
			_Utils_Tuple2('Lang', '⟪'),
			_Utils_Tuple2('langd', '⦑'),
			_Utils_Tuple2('langle', '⟨'),
			_Utils_Tuple2('lap', '⪅'),
			_Utils_Tuple2('Laplacetrf', 'ℒ'),
			_Utils_Tuple2('laquo', '«'),
			_Utils_Tuple2('larrb', '⇤'),
			_Utils_Tuple2('larrbfs', '⤟'),
			_Utils_Tuple2('larr', '←'),
			_Utils_Tuple2('Larr', '↞'),
			_Utils_Tuple2('lArr', '⇐'),
			_Utils_Tuple2('larrfs', '⤝'),
			_Utils_Tuple2('larrhk', '↩'),
			_Utils_Tuple2('larrlp', '↫'),
			_Utils_Tuple2('larrpl', '⤹'),
			_Utils_Tuple2('larrsim', '⥳'),
			_Utils_Tuple2('larrtl', '↢'),
			_Utils_Tuple2('latail', '⤙'),
			_Utils_Tuple2('lAtail', '⤛'),
			_Utils_Tuple2('lat', '⪫'),
			_Utils_Tuple2('late', '⪭'),
			_Utils_Tuple2('lates', '⪭︀'),
			_Utils_Tuple2('lbarr', '⤌'),
			_Utils_Tuple2('lBarr', '⤎'),
			_Utils_Tuple2('lbbrk', '❲'),
			_Utils_Tuple2('lbrace', '{'),
			_Utils_Tuple2('lbrack', '['),
			_Utils_Tuple2('lbrke', '⦋'),
			_Utils_Tuple2('lbrksld', '⦏'),
			_Utils_Tuple2('lbrkslu', '⦍'),
			_Utils_Tuple2('Lcaron', 'Ľ'),
			_Utils_Tuple2('lcaron', 'ľ'),
			_Utils_Tuple2('Lcedil', 'Ļ'),
			_Utils_Tuple2('lcedil', 'ļ'),
			_Utils_Tuple2('lceil', '⌈'),
			_Utils_Tuple2('lcub', '{'),
			_Utils_Tuple2('Lcy', 'Л'),
			_Utils_Tuple2('lcy', 'л'),
			_Utils_Tuple2('ldca', '⤶'),
			_Utils_Tuple2('ldquo', '“'),
			_Utils_Tuple2('ldquor', '„'),
			_Utils_Tuple2('ldrdhar', '⥧'),
			_Utils_Tuple2('ldrushar', '⥋'),
			_Utils_Tuple2('ldsh', '↲'),
			_Utils_Tuple2('le', '≤'),
			_Utils_Tuple2('lE', '≦'),
			_Utils_Tuple2('LeftAngleBracket', '⟨'),
			_Utils_Tuple2('LeftArrowBar', '⇤'),
			_Utils_Tuple2('leftarrow', '←'),
			_Utils_Tuple2('LeftArrow', '←'),
			_Utils_Tuple2('Leftarrow', '⇐'),
			_Utils_Tuple2('LeftArrowRightArrow', '⇆'),
			_Utils_Tuple2('leftarrowtail', '↢'),
			_Utils_Tuple2('LeftCeiling', '⌈'),
			_Utils_Tuple2('LeftDoubleBracket', '⟦'),
			_Utils_Tuple2('LeftDownTeeVector', '⥡'),
			_Utils_Tuple2('LeftDownVectorBar', '⥙'),
			_Utils_Tuple2('LeftDownVector', '⇃'),
			_Utils_Tuple2('LeftFloor', '⌊'),
			_Utils_Tuple2('leftharpoondown', '↽'),
			_Utils_Tuple2('leftharpoonup', '↼'),
			_Utils_Tuple2('leftleftarrows', '⇇'),
			_Utils_Tuple2('leftrightarrow', '↔'),
			_Utils_Tuple2('LeftRightArrow', '↔'),
			_Utils_Tuple2('Leftrightarrow', '⇔'),
			_Utils_Tuple2('leftrightarrows', '⇆'),
			_Utils_Tuple2('leftrightharpoons', '⇋'),
			_Utils_Tuple2('leftrightsquigarrow', '↭'),
			_Utils_Tuple2('LeftRightVector', '⥎'),
			_Utils_Tuple2('LeftTeeArrow', '↤'),
			_Utils_Tuple2('LeftTee', '⊣'),
			_Utils_Tuple2('LeftTeeVector', '⥚'),
			_Utils_Tuple2('leftthreetimes', '⋋'),
			_Utils_Tuple2('LeftTriangleBar', '⧏'),
			_Utils_Tuple2('LeftTriangle', '⊲'),
			_Utils_Tuple2('LeftTriangleEqual', '⊴'),
			_Utils_Tuple2('LeftUpDownVector', '⥑'),
			_Utils_Tuple2('LeftUpTeeVector', '⥠'),
			_Utils_Tuple2('LeftUpVectorBar', '⥘'),
			_Utils_Tuple2('LeftUpVector', '↿'),
			_Utils_Tuple2('LeftVectorBar', '⥒'),
			_Utils_Tuple2('LeftVector', '↼'),
			_Utils_Tuple2('lEg', '⪋'),
			_Utils_Tuple2('leg', '⋚'),
			_Utils_Tuple2('leq', '≤'),
			_Utils_Tuple2('leqq', '≦'),
			_Utils_Tuple2('leqslant', '⩽'),
			_Utils_Tuple2('lescc', '⪨'),
			_Utils_Tuple2('les', '⩽'),
			_Utils_Tuple2('lesdot', '⩿'),
			_Utils_Tuple2('lesdoto', '⪁'),
			_Utils_Tuple2('lesdotor', '⪃'),
			_Utils_Tuple2('lesg', '⋚︀'),
			_Utils_Tuple2('lesges', '⪓'),
			_Utils_Tuple2('lessapprox', '⪅'),
			_Utils_Tuple2('lessdot', '⋖'),
			_Utils_Tuple2('lesseqgtr', '⋚'),
			_Utils_Tuple2('lesseqqgtr', '⪋'),
			_Utils_Tuple2('LessEqualGreater', '⋚'),
			_Utils_Tuple2('LessFullEqual', '≦'),
			_Utils_Tuple2('LessGreater', '≶'),
			_Utils_Tuple2('lessgtr', '≶'),
			_Utils_Tuple2('LessLess', '⪡'),
			_Utils_Tuple2('lesssim', '≲'),
			_Utils_Tuple2('LessSlantEqual', '⩽'),
			_Utils_Tuple2('LessTilde', '≲'),
			_Utils_Tuple2('lfisht', '⥼'),
			_Utils_Tuple2('lfloor', '⌊'),
			_Utils_Tuple2('Lfr', '\ud835\udd0f'),
			_Utils_Tuple2('lfr', '\ud835\udd29'),
			_Utils_Tuple2('lg', '≶'),
			_Utils_Tuple2('lgE', '⪑'),
			_Utils_Tuple2('lHar', '⥢'),
			_Utils_Tuple2('lhard', '↽'),
			_Utils_Tuple2('lharu', '↼'),
			_Utils_Tuple2('lharul', '⥪'),
			_Utils_Tuple2('lhblk', '▄'),
			_Utils_Tuple2('LJcy', 'Љ'),
			_Utils_Tuple2('ljcy', 'љ'),
			_Utils_Tuple2('llarr', '⇇'),
			_Utils_Tuple2('ll', '≪'),
			_Utils_Tuple2('Ll', '⋘'),
			_Utils_Tuple2('llcorner', '⌞'),
			_Utils_Tuple2('Lleftarrow', '⇚'),
			_Utils_Tuple2('llhard', '⥫'),
			_Utils_Tuple2('lltri', '◺'),
			_Utils_Tuple2('Lmidot', 'Ŀ'),
			_Utils_Tuple2('lmidot', 'ŀ'),
			_Utils_Tuple2('lmoustache', '⎰'),
			_Utils_Tuple2('lmoust', '⎰'),
			_Utils_Tuple2('lnap', '⪉'),
			_Utils_Tuple2('lnapprox', '⪉'),
			_Utils_Tuple2('lne', '⪇'),
			_Utils_Tuple2('lnE', '≨'),
			_Utils_Tuple2('lneq', '⪇'),
			_Utils_Tuple2('lneqq', '≨'),
			_Utils_Tuple2('lnsim', '⋦'),
			_Utils_Tuple2('loang', '⟬'),
			_Utils_Tuple2('loarr', '⇽'),
			_Utils_Tuple2('lobrk', '⟦'),
			_Utils_Tuple2('longleftarrow', '⟵'),
			_Utils_Tuple2('LongLeftArrow', '⟵'),
			_Utils_Tuple2('Longleftarrow', '⟸'),
			_Utils_Tuple2('longleftrightarrow', '⟷'),
			_Utils_Tuple2('LongLeftRightArrow', '⟷'),
			_Utils_Tuple2('Longleftrightarrow', '⟺'),
			_Utils_Tuple2('longmapsto', '⟼'),
			_Utils_Tuple2('longrightarrow', '⟶'),
			_Utils_Tuple2('LongRightArrow', '⟶'),
			_Utils_Tuple2('Longrightarrow', '⟹'),
			_Utils_Tuple2('looparrowleft', '↫'),
			_Utils_Tuple2('looparrowright', '↬'),
			_Utils_Tuple2('lopar', '⦅'),
			_Utils_Tuple2('Lopf', '\ud835\udd43'),
			_Utils_Tuple2('lopf', '\ud835\udd5d'),
			_Utils_Tuple2('loplus', '⨭'),
			_Utils_Tuple2('lotimes', '⨴'),
			_Utils_Tuple2('lowast', '∗'),
			_Utils_Tuple2('lowbar', '_'),
			_Utils_Tuple2('LowerLeftArrow', '↙'),
			_Utils_Tuple2('LowerRightArrow', '↘'),
			_Utils_Tuple2('loz', '◊'),
			_Utils_Tuple2('lozenge', '◊'),
			_Utils_Tuple2('lozf', '⧫'),
			_Utils_Tuple2('lpar', '('),
			_Utils_Tuple2('lparlt', '⦓'),
			_Utils_Tuple2('lrarr', '⇆'),
			_Utils_Tuple2('lrcorner', '⌟'),
			_Utils_Tuple2('lrhar', '⇋'),
			_Utils_Tuple2('lrhard', '⥭'),
			_Utils_Tuple2('lrm', '\u200e'),
			_Utils_Tuple2('lrtri', '⊿'),
			_Utils_Tuple2('lsaquo', '‹'),
			_Utils_Tuple2('lscr', '\ud835\udcc1'),
			_Utils_Tuple2('Lscr', 'ℒ'),
			_Utils_Tuple2('lsh', '↰'),
			_Utils_Tuple2('Lsh', '↰'),
			_Utils_Tuple2('lsim', '≲'),
			_Utils_Tuple2('lsime', '⪍'),
			_Utils_Tuple2('lsimg', '⪏'),
			_Utils_Tuple2('lsqb', '['),
			_Utils_Tuple2('lsquo', '‘'),
			_Utils_Tuple2('lsquor', '‚'),
			_Utils_Tuple2('Lstrok', 'Ł'),
			_Utils_Tuple2('lstrok', 'ł'),
			_Utils_Tuple2('ltcc', '⪦'),
			_Utils_Tuple2('ltcir', '⩹'),
			_Utils_Tuple2('lt', '<'),
			_Utils_Tuple2('LT', '<'),
			_Utils_Tuple2('Lt', '≪'),
			_Utils_Tuple2('ltdot', '⋖'),
			_Utils_Tuple2('lthree', '⋋'),
			_Utils_Tuple2('ltimes', '⋉'),
			_Utils_Tuple2('ltlarr', '⥶'),
			_Utils_Tuple2('ltquest', '⩻'),
			_Utils_Tuple2('ltri', '◃'),
			_Utils_Tuple2('ltrie', '⊴'),
			_Utils_Tuple2('ltrif', '◂'),
			_Utils_Tuple2('ltrPar', '⦖'),
			_Utils_Tuple2('lurdshar', '⥊'),
			_Utils_Tuple2('luruhar', '⥦'),
			_Utils_Tuple2('lvertneqq', '≨︀'),
			_Utils_Tuple2('lvnE', '≨︀'),
			_Utils_Tuple2('macr', '¯'),
			_Utils_Tuple2('male', '♂'),
			_Utils_Tuple2('malt', '✠'),
			_Utils_Tuple2('maltese', '✠'),
			_Utils_Tuple2('Map', '⤅'),
			_Utils_Tuple2('map', '↦'),
			_Utils_Tuple2('mapsto', '↦'),
			_Utils_Tuple2('mapstodown', '↧'),
			_Utils_Tuple2('mapstoleft', '↤'),
			_Utils_Tuple2('mapstoup', '↥'),
			_Utils_Tuple2('marker', '▮'),
			_Utils_Tuple2('mcomma', '⨩'),
			_Utils_Tuple2('Mcy', 'М'),
			_Utils_Tuple2('mcy', 'м'),
			_Utils_Tuple2('mdash', '—'),
			_Utils_Tuple2('mDDot', '∺'),
			_Utils_Tuple2('measuredangle', '∡'),
			_Utils_Tuple2('MediumSpace', '\u205f'),
			_Utils_Tuple2('Mellintrf', 'ℳ'),
			_Utils_Tuple2('Mfr', '\ud835\udd10'),
			_Utils_Tuple2('mfr', '\ud835\udd2a'),
			_Utils_Tuple2('mho', '℧'),
			_Utils_Tuple2('micro', 'µ'),
			_Utils_Tuple2('midast', '*'),
			_Utils_Tuple2('midcir', '⫰'),
			_Utils_Tuple2('mid', '∣'),
			_Utils_Tuple2('middot', '·'),
			_Utils_Tuple2('minusb', '⊟'),
			_Utils_Tuple2('minus', '−'),
			_Utils_Tuple2('minusd', '∸'),
			_Utils_Tuple2('minusdu', '⨪'),
			_Utils_Tuple2('MinusPlus', '∓'),
			_Utils_Tuple2('mlcp', '⫛'),
			_Utils_Tuple2('mldr', '…'),
			_Utils_Tuple2('mnplus', '∓'),
			_Utils_Tuple2('models', '⊧'),
			_Utils_Tuple2('Mopf', '\ud835\udd44'),
			_Utils_Tuple2('mopf', '\ud835\udd5e'),
			_Utils_Tuple2('mp', '∓'),
			_Utils_Tuple2('mscr', '\ud835\udcc2'),
			_Utils_Tuple2('Mscr', 'ℳ'),
			_Utils_Tuple2('mstpos', '∾'),
			_Utils_Tuple2('Mu', 'Μ'),
			_Utils_Tuple2('mu', 'μ'),
			_Utils_Tuple2('multimap', '⊸'),
			_Utils_Tuple2('mumap', '⊸'),
			_Utils_Tuple2('nabla', '∇'),
			_Utils_Tuple2('Nacute', 'Ń'),
			_Utils_Tuple2('nacute', 'ń'),
			_Utils_Tuple2('nang', '∠⃒'),
			_Utils_Tuple2('nap', '≉'),
			_Utils_Tuple2('napE', '⩰̸'),
			_Utils_Tuple2('napid', '≋̸'),
			_Utils_Tuple2('napos', 'ŉ'),
			_Utils_Tuple2('napprox', '≉'),
			_Utils_Tuple2('natural', '♮'),
			_Utils_Tuple2('naturals', 'ℕ'),
			_Utils_Tuple2('natur', '♮'),
			_Utils_Tuple2('nbsp', '\u00a0'),
			_Utils_Tuple2('nbump', '≎̸'),
			_Utils_Tuple2('nbumpe', '≏̸'),
			_Utils_Tuple2('ncap', '⩃'),
			_Utils_Tuple2('Ncaron', 'Ň'),
			_Utils_Tuple2('ncaron', 'ň'),
			_Utils_Tuple2('Ncedil', 'Ņ'),
			_Utils_Tuple2('ncedil', 'ņ'),
			_Utils_Tuple2('ncong', '≇'),
			_Utils_Tuple2('ncongdot', '⩭̸'),
			_Utils_Tuple2('ncup', '⩂'),
			_Utils_Tuple2('Ncy', 'Н'),
			_Utils_Tuple2('ncy', 'н'),
			_Utils_Tuple2('ndash', '–'),
			_Utils_Tuple2('nearhk', '⤤'),
			_Utils_Tuple2('nearr', '↗'),
			_Utils_Tuple2('neArr', '⇗'),
			_Utils_Tuple2('nearrow', '↗'),
			_Utils_Tuple2('ne', '≠'),
			_Utils_Tuple2('nedot', '≐̸'),
			_Utils_Tuple2('NegativeMediumSpace', '\u200b'),
			_Utils_Tuple2('NegativeThickSpace', '\u200b'),
			_Utils_Tuple2('NegativeThinSpace', '\u200b'),
			_Utils_Tuple2('NegativeVeryThinSpace', '\u200b'),
			_Utils_Tuple2('nequiv', '≢'),
			_Utils_Tuple2('nesear', '⤨'),
			_Utils_Tuple2('nesim', '≂̸'),
			_Utils_Tuple2('NestedGreaterGreater', '≫'),
			_Utils_Tuple2('NestedLessLess', '≪'),
			_Utils_Tuple2('NewLine', '\n'),
			_Utils_Tuple2('nexist', '∄'),
			_Utils_Tuple2('nexists', '∄'),
			_Utils_Tuple2('Nfr', '\ud835\udd11'),
			_Utils_Tuple2('nfr', '\ud835\udd2b'),
			_Utils_Tuple2('ngE', '≧̸'),
			_Utils_Tuple2('nge', '≱'),
			_Utils_Tuple2('ngeq', '≱'),
			_Utils_Tuple2('ngeqq', '≧̸'),
			_Utils_Tuple2('ngeqslant', '⩾̸'),
			_Utils_Tuple2('nges', '⩾̸'),
			_Utils_Tuple2('nGg', '⋙̸'),
			_Utils_Tuple2('ngsim', '≵'),
			_Utils_Tuple2('nGt', '≫⃒'),
			_Utils_Tuple2('ngt', '≯'),
			_Utils_Tuple2('ngtr', '≯'),
			_Utils_Tuple2('nGtv', '≫̸'),
			_Utils_Tuple2('nharr', '↮'),
			_Utils_Tuple2('nhArr', '⇎'),
			_Utils_Tuple2('nhpar', '⫲'),
			_Utils_Tuple2('ni', '∋'),
			_Utils_Tuple2('nis', '⋼'),
			_Utils_Tuple2('nisd', '⋺'),
			_Utils_Tuple2('niv', '∋'),
			_Utils_Tuple2('NJcy', 'Њ'),
			_Utils_Tuple2('njcy', 'њ'),
			_Utils_Tuple2('nlarr', '↚'),
			_Utils_Tuple2('nlArr', '⇍'),
			_Utils_Tuple2('nldr', '‥'),
			_Utils_Tuple2('nlE', '≦̸'),
			_Utils_Tuple2('nle', '≰'),
			_Utils_Tuple2('nleftarrow', '↚'),
			_Utils_Tuple2('nLeftarrow', '⇍'),
			_Utils_Tuple2('nleftrightarrow', '↮'),
			_Utils_Tuple2('nLeftrightarrow', '⇎'),
			_Utils_Tuple2('nleq', '≰'),
			_Utils_Tuple2('nleqq', '≦̸'),
			_Utils_Tuple2('nleqslant', '⩽̸'),
			_Utils_Tuple2('nles', '⩽̸'),
			_Utils_Tuple2('nless', '≮'),
			_Utils_Tuple2('nLl', '⋘̸'),
			_Utils_Tuple2('nlsim', '≴'),
			_Utils_Tuple2('nLt', '≪⃒'),
			_Utils_Tuple2('nlt', '≮'),
			_Utils_Tuple2('nltri', '⋪'),
			_Utils_Tuple2('nltrie', '⋬'),
			_Utils_Tuple2('nLtv', '≪̸'),
			_Utils_Tuple2('nmid', '∤'),
			_Utils_Tuple2('NoBreak', '\u2060'),
			_Utils_Tuple2('NonBreakingSpace', '\u00a0'),
			_Utils_Tuple2('nopf', '\ud835\udd5f'),
			_Utils_Tuple2('Nopf', 'ℕ'),
			_Utils_Tuple2('Not', '⫬'),
			_Utils_Tuple2('not', '¬'),
			_Utils_Tuple2('NotCongruent', '≢'),
			_Utils_Tuple2('NotCupCap', '≭'),
			_Utils_Tuple2('NotDoubleVerticalBar', '∦'),
			_Utils_Tuple2('NotElement', '∉'),
			_Utils_Tuple2('NotEqual', '≠'),
			_Utils_Tuple2('NotEqualTilde', '≂̸'),
			_Utils_Tuple2('NotExists', '∄'),
			_Utils_Tuple2('NotGreater', '≯'),
			_Utils_Tuple2('NotGreaterEqual', '≱'),
			_Utils_Tuple2('NotGreaterFullEqual', '≧̸'),
			_Utils_Tuple2('NotGreaterGreater', '≫̸'),
			_Utils_Tuple2('NotGreaterLess', '≹'),
			_Utils_Tuple2('NotGreaterSlantEqual', '⩾̸'),
			_Utils_Tuple2('NotGreaterTilde', '≵'),
			_Utils_Tuple2('NotHumpDownHump', '≎̸'),
			_Utils_Tuple2('NotHumpEqual', '≏̸'),
			_Utils_Tuple2('notin', '∉'),
			_Utils_Tuple2('notindot', '⋵̸'),
			_Utils_Tuple2('notinE', '⋹̸'),
			_Utils_Tuple2('notinva', '∉'),
			_Utils_Tuple2('notinvb', '⋷'),
			_Utils_Tuple2('notinvc', '⋶'),
			_Utils_Tuple2('NotLeftTriangleBar', '⧏̸'),
			_Utils_Tuple2('NotLeftTriangle', '⋪'),
			_Utils_Tuple2('NotLeftTriangleEqual', '⋬'),
			_Utils_Tuple2('NotLess', '≮'),
			_Utils_Tuple2('NotLessEqual', '≰'),
			_Utils_Tuple2('NotLessGreater', '≸'),
			_Utils_Tuple2('NotLessLess', '≪̸'),
			_Utils_Tuple2('NotLessSlantEqual', '⩽̸'),
			_Utils_Tuple2('NotLessTilde', '≴'),
			_Utils_Tuple2('NotNestedGreaterGreater', '⪢̸'),
			_Utils_Tuple2('NotNestedLessLess', '⪡̸'),
			_Utils_Tuple2('notni', '∌'),
			_Utils_Tuple2('notniva', '∌'),
			_Utils_Tuple2('notnivb', '⋾'),
			_Utils_Tuple2('notnivc', '⋽'),
			_Utils_Tuple2('NotPrecedes', '⊀'),
			_Utils_Tuple2('NotPrecedesEqual', '⪯̸'),
			_Utils_Tuple2('NotPrecedesSlantEqual', '⋠'),
			_Utils_Tuple2('NotReverseElement', '∌'),
			_Utils_Tuple2('NotRightTriangleBar', '⧐̸'),
			_Utils_Tuple2('NotRightTriangle', '⋫'),
			_Utils_Tuple2('NotRightTriangleEqual', '⋭'),
			_Utils_Tuple2('NotSquareSubset', '⊏̸'),
			_Utils_Tuple2('NotSquareSubsetEqual', '⋢'),
			_Utils_Tuple2('NotSquareSuperset', '⊐̸'),
			_Utils_Tuple2('NotSquareSupersetEqual', '⋣'),
			_Utils_Tuple2('NotSubset', '⊂⃒'),
			_Utils_Tuple2('NotSubsetEqual', '⊈'),
			_Utils_Tuple2('NotSucceeds', '⊁'),
			_Utils_Tuple2('NotSucceedsEqual', '⪰̸'),
			_Utils_Tuple2('NotSucceedsSlantEqual', '⋡'),
			_Utils_Tuple2('NotSucceedsTilde', '≿̸'),
			_Utils_Tuple2('NotSuperset', '⊃⃒'),
			_Utils_Tuple2('NotSupersetEqual', '⊉'),
			_Utils_Tuple2('NotTilde', '≁'),
			_Utils_Tuple2('NotTildeEqual', '≄'),
			_Utils_Tuple2('NotTildeFullEqual', '≇'),
			_Utils_Tuple2('NotTildeTilde', '≉'),
			_Utils_Tuple2('NotVerticalBar', '∤'),
			_Utils_Tuple2('nparallel', '∦'),
			_Utils_Tuple2('npar', '∦'),
			_Utils_Tuple2('nparsl', '⫽⃥'),
			_Utils_Tuple2('npart', '∂̸'),
			_Utils_Tuple2('npolint', '⨔'),
			_Utils_Tuple2('npr', '⊀'),
			_Utils_Tuple2('nprcue', '⋠'),
			_Utils_Tuple2('nprec', '⊀'),
			_Utils_Tuple2('npreceq', '⪯̸'),
			_Utils_Tuple2('npre', '⪯̸'),
			_Utils_Tuple2('nrarrc', '⤳̸'),
			_Utils_Tuple2('nrarr', '↛'),
			_Utils_Tuple2('nrArr', '⇏'),
			_Utils_Tuple2('nrarrw', '↝̸'),
			_Utils_Tuple2('nrightarrow', '↛'),
			_Utils_Tuple2('nRightarrow', '⇏'),
			_Utils_Tuple2('nrtri', '⋫'),
			_Utils_Tuple2('nrtrie', '⋭'),
			_Utils_Tuple2('nsc', '⊁'),
			_Utils_Tuple2('nsccue', '⋡'),
			_Utils_Tuple2('nsce', '⪰̸'),
			_Utils_Tuple2('Nscr', '\ud835\udca9'),
			_Utils_Tuple2('nscr', '\ud835\udcc3'),
			_Utils_Tuple2('nshortmid', '∤'),
			_Utils_Tuple2('nshortparallel', '∦'),
			_Utils_Tuple2('nsim', '≁'),
			_Utils_Tuple2('nsime', '≄'),
			_Utils_Tuple2('nsimeq', '≄'),
			_Utils_Tuple2('nsmid', '∤'),
			_Utils_Tuple2('nspar', '∦'),
			_Utils_Tuple2('nsqsube', '⋢'),
			_Utils_Tuple2('nsqsupe', '⋣'),
			_Utils_Tuple2('nsub', '⊄'),
			_Utils_Tuple2('nsubE', '⫅̸'),
			_Utils_Tuple2('nsube', '⊈'),
			_Utils_Tuple2('nsubset', '⊂⃒'),
			_Utils_Tuple2('nsubseteq', '⊈'),
			_Utils_Tuple2('nsubseteqq', '⫅̸'),
			_Utils_Tuple2('nsucc', '⊁'),
			_Utils_Tuple2('nsucceq', '⪰̸'),
			_Utils_Tuple2('nsup', '⊅'),
			_Utils_Tuple2('nsupE', '⫆̸'),
			_Utils_Tuple2('nsupe', '⊉'),
			_Utils_Tuple2('nsupset', '⊃⃒'),
			_Utils_Tuple2('nsupseteq', '⊉'),
			_Utils_Tuple2('nsupseteqq', '⫆̸'),
			_Utils_Tuple2('ntgl', '≹'),
			_Utils_Tuple2('Ntilde', 'Ñ'),
			_Utils_Tuple2('ntilde', 'ñ'),
			_Utils_Tuple2('ntlg', '≸'),
			_Utils_Tuple2('ntriangleleft', '⋪'),
			_Utils_Tuple2('ntrianglelefteq', '⋬'),
			_Utils_Tuple2('ntriangleright', '⋫'),
			_Utils_Tuple2('ntrianglerighteq', '⋭'),
			_Utils_Tuple2('Nu', 'Ν'),
			_Utils_Tuple2('nu', 'ν'),
			_Utils_Tuple2('num', '#'),
			_Utils_Tuple2('numero', '№'),
			_Utils_Tuple2('numsp', '\u2007'),
			_Utils_Tuple2('nvap', '≍⃒'),
			_Utils_Tuple2('nvdash', '⊬'),
			_Utils_Tuple2('nvDash', '⊭'),
			_Utils_Tuple2('nVdash', '⊮'),
			_Utils_Tuple2('nVDash', '⊯'),
			_Utils_Tuple2('nvge', '≥⃒'),
			_Utils_Tuple2('nvgt', '>⃒'),
			_Utils_Tuple2('nvHarr', '⤄'),
			_Utils_Tuple2('nvinfin', '⧞'),
			_Utils_Tuple2('nvlArr', '⤂'),
			_Utils_Tuple2('nvle', '≤⃒'),
			_Utils_Tuple2('nvlt', '<⃒'),
			_Utils_Tuple2('nvltrie', '⊴⃒'),
			_Utils_Tuple2('nvrArr', '⤃'),
			_Utils_Tuple2('nvrtrie', '⊵⃒'),
			_Utils_Tuple2('nvsim', '∼⃒'),
			_Utils_Tuple2('nwarhk', '⤣'),
			_Utils_Tuple2('nwarr', '↖'),
			_Utils_Tuple2('nwArr', '⇖'),
			_Utils_Tuple2('nwarrow', '↖'),
			_Utils_Tuple2('nwnear', '⤧'),
			_Utils_Tuple2('Oacute', 'Ó'),
			_Utils_Tuple2('oacute', 'ó'),
			_Utils_Tuple2('oast', '⊛'),
			_Utils_Tuple2('Ocirc', 'Ô'),
			_Utils_Tuple2('ocirc', 'ô'),
			_Utils_Tuple2('ocir', '⊚'),
			_Utils_Tuple2('Ocy', 'О'),
			_Utils_Tuple2('ocy', 'о'),
			_Utils_Tuple2('odash', '⊝'),
			_Utils_Tuple2('Odblac', 'Ő'),
			_Utils_Tuple2('odblac', 'ő'),
			_Utils_Tuple2('odiv', '⨸'),
			_Utils_Tuple2('odot', '⊙'),
			_Utils_Tuple2('odsold', '⦼'),
			_Utils_Tuple2('OElig', 'Œ'),
			_Utils_Tuple2('oelig', 'œ'),
			_Utils_Tuple2('ofcir', '⦿'),
			_Utils_Tuple2('Ofr', '\ud835\udd12'),
			_Utils_Tuple2('ofr', '\ud835\udd2c'),
			_Utils_Tuple2('ogon', '˛'),
			_Utils_Tuple2('Ograve', 'Ò'),
			_Utils_Tuple2('ograve', 'ò'),
			_Utils_Tuple2('ogt', '⧁'),
			_Utils_Tuple2('ohbar', '⦵'),
			_Utils_Tuple2('ohm', 'Ω'),
			_Utils_Tuple2('oint', '∮'),
			_Utils_Tuple2('olarr', '↺'),
			_Utils_Tuple2('olcir', '⦾'),
			_Utils_Tuple2('olcross', '⦻'),
			_Utils_Tuple2('oline', '‾'),
			_Utils_Tuple2('olt', '⧀'),
			_Utils_Tuple2('Omacr', 'Ō'),
			_Utils_Tuple2('omacr', 'ō'),
			_Utils_Tuple2('Omega', 'Ω'),
			_Utils_Tuple2('omega', 'ω'),
			_Utils_Tuple2('Omicron', 'Ο'),
			_Utils_Tuple2('omicron', 'ο'),
			_Utils_Tuple2('omid', '⦶'),
			_Utils_Tuple2('ominus', '⊖'),
			_Utils_Tuple2('Oopf', '\ud835\udd46'),
			_Utils_Tuple2('oopf', '\ud835\udd60'),
			_Utils_Tuple2('opar', '⦷'),
			_Utils_Tuple2('OpenCurlyDoubleQuote', '“'),
			_Utils_Tuple2('OpenCurlyQuote', '‘'),
			_Utils_Tuple2('operp', '⦹'),
			_Utils_Tuple2('oplus', '⊕'),
			_Utils_Tuple2('orarr', '↻'),
			_Utils_Tuple2('Or', '⩔'),
			_Utils_Tuple2('or', '∨'),
			_Utils_Tuple2('ord', '⩝'),
			_Utils_Tuple2('order', 'ℴ'),
			_Utils_Tuple2('orderof', 'ℴ'),
			_Utils_Tuple2('ordf', 'ª'),
			_Utils_Tuple2('ordm', 'º'),
			_Utils_Tuple2('origof', '⊶'),
			_Utils_Tuple2('oror', '⩖'),
			_Utils_Tuple2('orslope', '⩗'),
			_Utils_Tuple2('orv', '⩛'),
			_Utils_Tuple2('oS', 'Ⓢ'),
			_Utils_Tuple2('Oscr', '\ud835\udcaa'),
			_Utils_Tuple2('oscr', 'ℴ'),
			_Utils_Tuple2('Oslash', 'Ø'),
			_Utils_Tuple2('oslash', 'ø'),
			_Utils_Tuple2('osol', '⊘'),
			_Utils_Tuple2('Otilde', 'Õ'),
			_Utils_Tuple2('otilde', 'õ'),
			_Utils_Tuple2('otimesas', '⨶'),
			_Utils_Tuple2('Otimes', '⨷'),
			_Utils_Tuple2('otimes', '⊗'),
			_Utils_Tuple2('Ouml', 'Ö'),
			_Utils_Tuple2('ouml', 'ö'),
			_Utils_Tuple2('ovbar', '⌽'),
			_Utils_Tuple2('OverBar', '‾'),
			_Utils_Tuple2('OverBrace', '⏞'),
			_Utils_Tuple2('OverBracket', '⎴'),
			_Utils_Tuple2('OverParenthesis', '⏜'),
			_Utils_Tuple2('para', '¶'),
			_Utils_Tuple2('parallel', '∥'),
			_Utils_Tuple2('par', '∥'),
			_Utils_Tuple2('parsim', '⫳'),
			_Utils_Tuple2('parsl', '⫽'),
			_Utils_Tuple2('part', '∂'),
			_Utils_Tuple2('PartialD', '∂'),
			_Utils_Tuple2('Pcy', 'П'),
			_Utils_Tuple2('pcy', 'п'),
			_Utils_Tuple2('percnt', '%'),
			_Utils_Tuple2('period', '.'),
			_Utils_Tuple2('permil', '‰'),
			_Utils_Tuple2('perp', '⊥'),
			_Utils_Tuple2('pertenk', '‱'),
			_Utils_Tuple2('Pfr', '\ud835\udd13'),
			_Utils_Tuple2('pfr', '\ud835\udd2d'),
			_Utils_Tuple2('Phi', 'Φ'),
			_Utils_Tuple2('phi', 'φ'),
			_Utils_Tuple2('phiv', 'ϕ'),
			_Utils_Tuple2('phmmat', 'ℳ'),
			_Utils_Tuple2('phone', '☎'),
			_Utils_Tuple2('Pi', 'Π'),
			_Utils_Tuple2('pi', 'π'),
			_Utils_Tuple2('pitchfork', '⋔'),
			_Utils_Tuple2('piv', 'ϖ'),
			_Utils_Tuple2('planck', 'ℏ'),
			_Utils_Tuple2('planckh', 'ℎ'),
			_Utils_Tuple2('plankv', 'ℏ'),
			_Utils_Tuple2('plusacir', '⨣'),
			_Utils_Tuple2('plusb', '⊞'),
			_Utils_Tuple2('pluscir', '⨢'),
			_Utils_Tuple2('plus', '+'),
			_Utils_Tuple2('plusdo', '∔'),
			_Utils_Tuple2('plusdu', '⨥'),
			_Utils_Tuple2('pluse', '⩲'),
			_Utils_Tuple2('PlusMinus', '±'),
			_Utils_Tuple2('plusmn', '±'),
			_Utils_Tuple2('plussim', '⨦'),
			_Utils_Tuple2('plustwo', '⨧'),
			_Utils_Tuple2('pm', '±'),
			_Utils_Tuple2('Poincareplane', 'ℌ'),
			_Utils_Tuple2('pointint', '⨕'),
			_Utils_Tuple2('popf', '\ud835\udd61'),
			_Utils_Tuple2('Popf', 'ℙ'),
			_Utils_Tuple2('pound', '£'),
			_Utils_Tuple2('prap', '⪷'),
			_Utils_Tuple2('Pr', '⪻'),
			_Utils_Tuple2('pr', '≺'),
			_Utils_Tuple2('prcue', '≼'),
			_Utils_Tuple2('precapprox', '⪷'),
			_Utils_Tuple2('prec', '≺'),
			_Utils_Tuple2('preccurlyeq', '≼'),
			_Utils_Tuple2('Precedes', '≺'),
			_Utils_Tuple2('PrecedesEqual', '⪯'),
			_Utils_Tuple2('PrecedesSlantEqual', '≼'),
			_Utils_Tuple2('PrecedesTilde', '≾'),
			_Utils_Tuple2('preceq', '⪯'),
			_Utils_Tuple2('precnapprox', '⪹'),
			_Utils_Tuple2('precneqq', '⪵'),
			_Utils_Tuple2('precnsim', '⋨'),
			_Utils_Tuple2('pre', '⪯'),
			_Utils_Tuple2('prE', '⪳'),
			_Utils_Tuple2('precsim', '≾'),
			_Utils_Tuple2('prime', '′'),
			_Utils_Tuple2('Prime', '″'),
			_Utils_Tuple2('primes', 'ℙ'),
			_Utils_Tuple2('prnap', '⪹'),
			_Utils_Tuple2('prnE', '⪵'),
			_Utils_Tuple2('prnsim', '⋨'),
			_Utils_Tuple2('prod', '∏'),
			_Utils_Tuple2('Product', '∏'),
			_Utils_Tuple2('profalar', '⌮'),
			_Utils_Tuple2('profline', '⌒'),
			_Utils_Tuple2('profsurf', '⌓'),
			_Utils_Tuple2('prop', '∝'),
			_Utils_Tuple2('Proportional', '∝'),
			_Utils_Tuple2('Proportion', '∷'),
			_Utils_Tuple2('propto', '∝'),
			_Utils_Tuple2('prsim', '≾'),
			_Utils_Tuple2('prurel', '⊰'),
			_Utils_Tuple2('Pscr', '\ud835\udcab'),
			_Utils_Tuple2('pscr', '\ud835\udcc5'),
			_Utils_Tuple2('Psi', 'Ψ'),
			_Utils_Tuple2('psi', 'ψ'),
			_Utils_Tuple2('puncsp', '\u2008'),
			_Utils_Tuple2('Qfr', '\ud835\udd14'),
			_Utils_Tuple2('qfr', '\ud835\udd2e'),
			_Utils_Tuple2('qint', '⨌'),
			_Utils_Tuple2('qopf', '\ud835\udd62'),
			_Utils_Tuple2('Qopf', 'ℚ'),
			_Utils_Tuple2('qprime', '⁗'),
			_Utils_Tuple2('Qscr', '\ud835\udcac'),
			_Utils_Tuple2('qscr', '\ud835\udcc6'),
			_Utils_Tuple2('quaternions', 'ℍ'),
			_Utils_Tuple2('quatint', '⨖'),
			_Utils_Tuple2('quest', '?'),
			_Utils_Tuple2('questeq', '≟'),
			_Utils_Tuple2('quot', '\"'),
			_Utils_Tuple2('QUOT', '\"'),
			_Utils_Tuple2('rAarr', '⇛'),
			_Utils_Tuple2('race', '∽̱'),
			_Utils_Tuple2('Racute', 'Ŕ'),
			_Utils_Tuple2('racute', 'ŕ'),
			_Utils_Tuple2('radic', '√'),
			_Utils_Tuple2('raemptyv', '⦳'),
			_Utils_Tuple2('rang', '⟩'),
			_Utils_Tuple2('Rang', '⟫'),
			_Utils_Tuple2('rangd', '⦒'),
			_Utils_Tuple2('range', '⦥'),
			_Utils_Tuple2('rangle', '⟩'),
			_Utils_Tuple2('raquo', '»'),
			_Utils_Tuple2('rarrap', '⥵'),
			_Utils_Tuple2('rarrb', '⇥'),
			_Utils_Tuple2('rarrbfs', '⤠'),
			_Utils_Tuple2('rarrc', '⤳'),
			_Utils_Tuple2('rarr', '→'),
			_Utils_Tuple2('Rarr', '↠'),
			_Utils_Tuple2('rArr', '⇒'),
			_Utils_Tuple2('rarrfs', '⤞'),
			_Utils_Tuple2('rarrhk', '↪'),
			_Utils_Tuple2('rarrlp', '↬'),
			_Utils_Tuple2('rarrpl', '⥅'),
			_Utils_Tuple2('rarrsim', '⥴'),
			_Utils_Tuple2('Rarrtl', '⤖'),
			_Utils_Tuple2('rarrtl', '↣'),
			_Utils_Tuple2('rarrw', '↝'),
			_Utils_Tuple2('ratail', '⤚'),
			_Utils_Tuple2('rAtail', '⤜'),
			_Utils_Tuple2('ratio', '∶'),
			_Utils_Tuple2('rationals', 'ℚ'),
			_Utils_Tuple2('rbarr', '⤍'),
			_Utils_Tuple2('rBarr', '⤏'),
			_Utils_Tuple2('RBarr', '⤐'),
			_Utils_Tuple2('rbbrk', '❳'),
			_Utils_Tuple2('rbrace', '}'),
			_Utils_Tuple2('rbrack', ']'),
			_Utils_Tuple2('rbrke', '⦌'),
			_Utils_Tuple2('rbrksld', '⦎'),
			_Utils_Tuple2('rbrkslu', '⦐'),
			_Utils_Tuple2('Rcaron', 'Ř'),
			_Utils_Tuple2('rcaron', 'ř'),
			_Utils_Tuple2('Rcedil', 'Ŗ'),
			_Utils_Tuple2('rcedil', 'ŗ'),
			_Utils_Tuple2('rceil', '⌉'),
			_Utils_Tuple2('rcub', '}'),
			_Utils_Tuple2('Rcy', 'Р'),
			_Utils_Tuple2('rcy', 'р'),
			_Utils_Tuple2('rdca', '⤷'),
			_Utils_Tuple2('rdldhar', '⥩'),
			_Utils_Tuple2('rdquo', '”'),
			_Utils_Tuple2('rdquor', '”'),
			_Utils_Tuple2('rdsh', '↳'),
			_Utils_Tuple2('real', 'ℜ'),
			_Utils_Tuple2('realine', 'ℛ'),
			_Utils_Tuple2('realpart', 'ℜ'),
			_Utils_Tuple2('reals', 'ℝ'),
			_Utils_Tuple2('Re', 'ℜ'),
			_Utils_Tuple2('rect', '▭'),
			_Utils_Tuple2('reg', '®'),
			_Utils_Tuple2('REG', '®'),
			_Utils_Tuple2('ReverseElement', '∋'),
			_Utils_Tuple2('ReverseEquilibrium', '⇋'),
			_Utils_Tuple2('ReverseUpEquilibrium', '⥯'),
			_Utils_Tuple2('rfisht', '⥽'),
			_Utils_Tuple2('rfloor', '⌋'),
			_Utils_Tuple2('rfr', '\ud835\udd2f'),
			_Utils_Tuple2('Rfr', 'ℜ'),
			_Utils_Tuple2('rHar', '⥤'),
			_Utils_Tuple2('rhard', '⇁'),
			_Utils_Tuple2('rharu', '⇀'),
			_Utils_Tuple2('rharul', '⥬'),
			_Utils_Tuple2('Rho', 'Ρ'),
			_Utils_Tuple2('rho', 'ρ'),
			_Utils_Tuple2('rhov', 'ϱ'),
			_Utils_Tuple2('RightAngleBracket', '⟩'),
			_Utils_Tuple2('RightArrowBar', '⇥'),
			_Utils_Tuple2('rightarrow', '→'),
			_Utils_Tuple2('RightArrow', '→'),
			_Utils_Tuple2('Rightarrow', '⇒'),
			_Utils_Tuple2('RightArrowLeftArrow', '⇄'),
			_Utils_Tuple2('rightarrowtail', '↣'),
			_Utils_Tuple2('RightCeiling', '⌉'),
			_Utils_Tuple2('RightDoubleBracket', '⟧'),
			_Utils_Tuple2('RightDownTeeVector', '⥝'),
			_Utils_Tuple2('RightDownVectorBar', '⥕'),
			_Utils_Tuple2('RightDownVector', '⇂'),
			_Utils_Tuple2('RightFloor', '⌋'),
			_Utils_Tuple2('rightharpoondown', '⇁'),
			_Utils_Tuple2('rightharpoonup', '⇀'),
			_Utils_Tuple2('rightleftarrows', '⇄'),
			_Utils_Tuple2('rightleftharpoons', '⇌'),
			_Utils_Tuple2('rightrightarrows', '⇉'),
			_Utils_Tuple2('rightsquigarrow', '↝'),
			_Utils_Tuple2('RightTeeArrow', '↦'),
			_Utils_Tuple2('RightTee', '⊢'),
			_Utils_Tuple2('RightTeeVector', '⥛'),
			_Utils_Tuple2('rightthreetimes', '⋌'),
			_Utils_Tuple2('RightTriangleBar', '⧐'),
			_Utils_Tuple2('RightTriangle', '⊳'),
			_Utils_Tuple2('RightTriangleEqual', '⊵'),
			_Utils_Tuple2('RightUpDownVector', '⥏'),
			_Utils_Tuple2('RightUpTeeVector', '⥜'),
			_Utils_Tuple2('RightUpVectorBar', '⥔'),
			_Utils_Tuple2('RightUpVector', '↾'),
			_Utils_Tuple2('RightVectorBar', '⥓'),
			_Utils_Tuple2('RightVector', '⇀'),
			_Utils_Tuple2('ring', '˚'),
			_Utils_Tuple2('risingdotseq', '≓'),
			_Utils_Tuple2('rlarr', '⇄'),
			_Utils_Tuple2('rlhar', '⇌'),
			_Utils_Tuple2('rlm', '\u200f'),
			_Utils_Tuple2('rmoustache', '⎱'),
			_Utils_Tuple2('rmoust', '⎱'),
			_Utils_Tuple2('rnmid', '⫮'),
			_Utils_Tuple2('roang', '⟭'),
			_Utils_Tuple2('roarr', '⇾'),
			_Utils_Tuple2('robrk', '⟧'),
			_Utils_Tuple2('ropar', '⦆'),
			_Utils_Tuple2('ropf', '\ud835\udd63'),
			_Utils_Tuple2('Ropf', 'ℝ'),
			_Utils_Tuple2('roplus', '⨮'),
			_Utils_Tuple2('rotimes', '⨵'),
			_Utils_Tuple2('RoundImplies', '⥰'),
			_Utils_Tuple2('rpar', ')'),
			_Utils_Tuple2('rpargt', '⦔'),
			_Utils_Tuple2('rppolint', '⨒'),
			_Utils_Tuple2('rrarr', '⇉'),
			_Utils_Tuple2('Rrightarrow', '⇛'),
			_Utils_Tuple2('rsaquo', '›'),
			_Utils_Tuple2('rscr', '\ud835\udcc7'),
			_Utils_Tuple2('Rscr', 'ℛ'),
			_Utils_Tuple2('rsh', '↱'),
			_Utils_Tuple2('Rsh', '↱'),
			_Utils_Tuple2('rsqb', ']'),
			_Utils_Tuple2('rsquo', '’'),
			_Utils_Tuple2('rsquor', '’'),
			_Utils_Tuple2('rthree', '⋌'),
			_Utils_Tuple2('rtimes', '⋊'),
			_Utils_Tuple2('rtri', '▹'),
			_Utils_Tuple2('rtrie', '⊵'),
			_Utils_Tuple2('rtrif', '▸'),
			_Utils_Tuple2('rtriltri', '⧎'),
			_Utils_Tuple2('RuleDelayed', '⧴'),
			_Utils_Tuple2('ruluhar', '⥨'),
			_Utils_Tuple2('rx', '℞'),
			_Utils_Tuple2('Sacute', 'Ś'),
			_Utils_Tuple2('sacute', 'ś'),
			_Utils_Tuple2('sbquo', '‚'),
			_Utils_Tuple2('scap', '⪸'),
			_Utils_Tuple2('Scaron', 'Š'),
			_Utils_Tuple2('scaron', 'š'),
			_Utils_Tuple2('Sc', '⪼'),
			_Utils_Tuple2('sc', '≻'),
			_Utils_Tuple2('sccue', '≽'),
			_Utils_Tuple2('sce', '⪰'),
			_Utils_Tuple2('scE', '⪴'),
			_Utils_Tuple2('Scedil', 'Ş'),
			_Utils_Tuple2('scedil', 'ş'),
			_Utils_Tuple2('Scirc', 'Ŝ'),
			_Utils_Tuple2('scirc', 'ŝ'),
			_Utils_Tuple2('scnap', '⪺'),
			_Utils_Tuple2('scnE', '⪶'),
			_Utils_Tuple2('scnsim', '⋩'),
			_Utils_Tuple2('scpolint', '⨓'),
			_Utils_Tuple2('scsim', '≿'),
			_Utils_Tuple2('Scy', 'С'),
			_Utils_Tuple2('scy', 'с'),
			_Utils_Tuple2('sdotb', '⊡'),
			_Utils_Tuple2('sdot', '⋅'),
			_Utils_Tuple2('sdote', '⩦'),
			_Utils_Tuple2('searhk', '⤥'),
			_Utils_Tuple2('searr', '↘'),
			_Utils_Tuple2('seArr', '⇘'),
			_Utils_Tuple2('searrow', '↘'),
			_Utils_Tuple2('sect', '§'),
			_Utils_Tuple2('semi', ';'),
			_Utils_Tuple2('seswar', '⤩'),
			_Utils_Tuple2('setminus', '∖'),
			_Utils_Tuple2('setmn', '∖'),
			_Utils_Tuple2('sext', '✶'),
			_Utils_Tuple2('Sfr', '\ud835\udd16'),
			_Utils_Tuple2('sfr', '\ud835\udd30'),
			_Utils_Tuple2('sfrown', '⌢'),
			_Utils_Tuple2('sharp', '♯'),
			_Utils_Tuple2('SHCHcy', 'Щ'),
			_Utils_Tuple2('shchcy', 'щ'),
			_Utils_Tuple2('SHcy', 'Ш'),
			_Utils_Tuple2('shcy', 'ш'),
			_Utils_Tuple2('ShortDownArrow', '↓'),
			_Utils_Tuple2('ShortLeftArrow', '←'),
			_Utils_Tuple2('shortmid', '∣'),
			_Utils_Tuple2('shortparallel', '∥'),
			_Utils_Tuple2('ShortRightArrow', '→'),
			_Utils_Tuple2('ShortUpArrow', '↑'),
			_Utils_Tuple2('shy', '\u00ad'),
			_Utils_Tuple2('Sigma', 'Σ'),
			_Utils_Tuple2('sigma', 'σ'),
			_Utils_Tuple2('sigmaf', 'ς'),
			_Utils_Tuple2('sigmav', 'ς'),
			_Utils_Tuple2('sim', '∼'),
			_Utils_Tuple2('simdot', '⩪'),
			_Utils_Tuple2('sime', '≃'),
			_Utils_Tuple2('simeq', '≃'),
			_Utils_Tuple2('simg', '⪞'),
			_Utils_Tuple2('simgE', '⪠'),
			_Utils_Tuple2('siml', '⪝'),
			_Utils_Tuple2('simlE', '⪟'),
			_Utils_Tuple2('simne', '≆'),
			_Utils_Tuple2('simplus', '⨤'),
			_Utils_Tuple2('simrarr', '⥲'),
			_Utils_Tuple2('slarr', '←'),
			_Utils_Tuple2('SmallCircle', '∘'),
			_Utils_Tuple2('smallsetminus', '∖'),
			_Utils_Tuple2('smashp', '⨳'),
			_Utils_Tuple2('smeparsl', '⧤'),
			_Utils_Tuple2('smid', '∣'),
			_Utils_Tuple2('smile', '⌣'),
			_Utils_Tuple2('smt', '⪪'),
			_Utils_Tuple2('smte', '⪬'),
			_Utils_Tuple2('smtes', '⪬︀'),
			_Utils_Tuple2('SOFTcy', 'Ь'),
			_Utils_Tuple2('softcy', 'ь'),
			_Utils_Tuple2('solbar', '⌿'),
			_Utils_Tuple2('solb', '⧄'),
			_Utils_Tuple2('sol', '/'),
			_Utils_Tuple2('Sopf', '\ud835\udd4a'),
			_Utils_Tuple2('sopf', '\ud835\udd64'),
			_Utils_Tuple2('spades', '♠'),
			_Utils_Tuple2('spadesuit', '♠'),
			_Utils_Tuple2('spar', '∥'),
			_Utils_Tuple2('sqcap', '⊓'),
			_Utils_Tuple2('sqcaps', '⊓︀'),
			_Utils_Tuple2('sqcup', '⊔'),
			_Utils_Tuple2('sqcups', '⊔︀'),
			_Utils_Tuple2('Sqrt', '√'),
			_Utils_Tuple2('sqsub', '⊏'),
			_Utils_Tuple2('sqsube', '⊑'),
			_Utils_Tuple2('sqsubset', '⊏'),
			_Utils_Tuple2('sqsubseteq', '⊑'),
			_Utils_Tuple2('sqsup', '⊐'),
			_Utils_Tuple2('sqsupe', '⊒'),
			_Utils_Tuple2('sqsupset', '⊐'),
			_Utils_Tuple2('sqsupseteq', '⊒'),
			_Utils_Tuple2('square', '□'),
			_Utils_Tuple2('Square', '□'),
			_Utils_Tuple2('SquareIntersection', '⊓'),
			_Utils_Tuple2('SquareSubset', '⊏'),
			_Utils_Tuple2('SquareSubsetEqual', '⊑'),
			_Utils_Tuple2('SquareSuperset', '⊐'),
			_Utils_Tuple2('SquareSupersetEqual', '⊒'),
			_Utils_Tuple2('SquareUnion', '⊔'),
			_Utils_Tuple2('squarf', '▪'),
			_Utils_Tuple2('squ', '□'),
			_Utils_Tuple2('squf', '▪'),
			_Utils_Tuple2('srarr', '→'),
			_Utils_Tuple2('Sscr', '\ud835\udcae'),
			_Utils_Tuple2('sscr', '\ud835\udcc8'),
			_Utils_Tuple2('ssetmn', '∖'),
			_Utils_Tuple2('ssmile', '⌣'),
			_Utils_Tuple2('sstarf', '⋆'),
			_Utils_Tuple2('Star', '⋆'),
			_Utils_Tuple2('star', '☆'),
			_Utils_Tuple2('starf', '★'),
			_Utils_Tuple2('straightepsilon', 'ϵ'),
			_Utils_Tuple2('straightphi', 'ϕ'),
			_Utils_Tuple2('strns', '¯'),
			_Utils_Tuple2('sub', '⊂'),
			_Utils_Tuple2('Sub', '⋐'),
			_Utils_Tuple2('subdot', '⪽'),
			_Utils_Tuple2('subE', '⫅'),
			_Utils_Tuple2('sube', '⊆'),
			_Utils_Tuple2('subedot', '⫃'),
			_Utils_Tuple2('submult', '⫁'),
			_Utils_Tuple2('subnE', '⫋'),
			_Utils_Tuple2('subne', '⊊'),
			_Utils_Tuple2('subplus', '⪿'),
			_Utils_Tuple2('subrarr', '⥹'),
			_Utils_Tuple2('subset', '⊂'),
			_Utils_Tuple2('Subset', '⋐'),
			_Utils_Tuple2('subseteq', '⊆'),
			_Utils_Tuple2('subseteqq', '⫅'),
			_Utils_Tuple2('SubsetEqual', '⊆'),
			_Utils_Tuple2('subsetneq', '⊊'),
			_Utils_Tuple2('subsetneqq', '⫋'),
			_Utils_Tuple2('subsim', '⫇'),
			_Utils_Tuple2('subsub', '⫕'),
			_Utils_Tuple2('subsup', '⫓'),
			_Utils_Tuple2('succapprox', '⪸'),
			_Utils_Tuple2('succ', '≻'),
			_Utils_Tuple2('succcurlyeq', '≽'),
			_Utils_Tuple2('Succeeds', '≻'),
			_Utils_Tuple2('SucceedsEqual', '⪰'),
			_Utils_Tuple2('SucceedsSlantEqual', '≽'),
			_Utils_Tuple2('SucceedsTilde', '≿'),
			_Utils_Tuple2('succeq', '⪰'),
			_Utils_Tuple2('succnapprox', '⪺'),
			_Utils_Tuple2('succneqq', '⪶'),
			_Utils_Tuple2('succnsim', '⋩'),
			_Utils_Tuple2('succsim', '≿'),
			_Utils_Tuple2('SuchThat', '∋'),
			_Utils_Tuple2('sum', '∑'),
			_Utils_Tuple2('Sum', '∑'),
			_Utils_Tuple2('sung', '♪'),
			_Utils_Tuple2('sup1', '¹'),
			_Utils_Tuple2('sup2', '²'),
			_Utils_Tuple2('sup3', '³'),
			_Utils_Tuple2('sup', '⊃'),
			_Utils_Tuple2('Sup', '⋑'),
			_Utils_Tuple2('supdot', '⪾'),
			_Utils_Tuple2('supdsub', '⫘'),
			_Utils_Tuple2('supE', '⫆'),
			_Utils_Tuple2('supe', '⊇'),
			_Utils_Tuple2('supedot', '⫄'),
			_Utils_Tuple2('Superset', '⊃'),
			_Utils_Tuple2('SupersetEqual', '⊇'),
			_Utils_Tuple2('suphsol', '⟉'),
			_Utils_Tuple2('suphsub', '⫗'),
			_Utils_Tuple2('suplarr', '⥻'),
			_Utils_Tuple2('supmult', '⫂'),
			_Utils_Tuple2('supnE', '⫌'),
			_Utils_Tuple2('supne', '⊋'),
			_Utils_Tuple2('supplus', '⫀'),
			_Utils_Tuple2('supset', '⊃'),
			_Utils_Tuple2('Supset', '⋑'),
			_Utils_Tuple2('supseteq', '⊇'),
			_Utils_Tuple2('supseteqq', '⫆'),
			_Utils_Tuple2('supsetneq', '⊋'),
			_Utils_Tuple2('supsetneqq', '⫌'),
			_Utils_Tuple2('supsim', '⫈'),
			_Utils_Tuple2('supsub', '⫔'),
			_Utils_Tuple2('supsup', '⫖'),
			_Utils_Tuple2('swarhk', '⤦'),
			_Utils_Tuple2('swarr', '↙'),
			_Utils_Tuple2('swArr', '⇙'),
			_Utils_Tuple2('swarrow', '↙'),
			_Utils_Tuple2('swnwar', '⤪'),
			_Utils_Tuple2('szlig', 'ß'),
			_Utils_Tuple2('Tab', '\t'),
			_Utils_Tuple2('target', '⌖'),
			_Utils_Tuple2('Tau', 'Τ'),
			_Utils_Tuple2('tau', 'τ'),
			_Utils_Tuple2('tbrk', '⎴'),
			_Utils_Tuple2('Tcaron', 'Ť'),
			_Utils_Tuple2('tcaron', 'ť'),
			_Utils_Tuple2('Tcedil', 'Ţ'),
			_Utils_Tuple2('tcedil', 'ţ'),
			_Utils_Tuple2('Tcy', 'Т'),
			_Utils_Tuple2('tcy', 'т'),
			_Utils_Tuple2('tdot', '⃛'),
			_Utils_Tuple2('telrec', '⌕'),
			_Utils_Tuple2('Tfr', '\ud835\udd17'),
			_Utils_Tuple2('tfr', '\ud835\udd31'),
			_Utils_Tuple2('there4', '∴'),
			_Utils_Tuple2('therefore', '∴'),
			_Utils_Tuple2('Therefore', '∴'),
			_Utils_Tuple2('Theta', 'Θ'),
			_Utils_Tuple2('theta', 'θ'),
			_Utils_Tuple2('thetasym', 'ϑ'),
			_Utils_Tuple2('thetav', 'ϑ'),
			_Utils_Tuple2('thickapprox', '≈'),
			_Utils_Tuple2('thicksim', '∼'),
			_Utils_Tuple2('ThickSpace', '\u205f\u200a'),
			_Utils_Tuple2('ThinSpace', '\u2009'),
			_Utils_Tuple2('thinsp', '\u2009'),
			_Utils_Tuple2('thkap', '≈'),
			_Utils_Tuple2('thksim', '∼'),
			_Utils_Tuple2('THORN', 'Þ'),
			_Utils_Tuple2('thorn', 'þ'),
			_Utils_Tuple2('tilde', '˜'),
			_Utils_Tuple2('Tilde', '∼'),
			_Utils_Tuple2('TildeEqual', '≃'),
			_Utils_Tuple2('TildeFullEqual', '≅'),
			_Utils_Tuple2('TildeTilde', '≈'),
			_Utils_Tuple2('timesbar', '⨱'),
			_Utils_Tuple2('timesb', '⊠'),
			_Utils_Tuple2('times', '×'),
			_Utils_Tuple2('timesd', '⨰'),
			_Utils_Tuple2('tint', '∭'),
			_Utils_Tuple2('toea', '⤨'),
			_Utils_Tuple2('topbot', '⌶'),
			_Utils_Tuple2('topcir', '⫱'),
			_Utils_Tuple2('top', '⊤'),
			_Utils_Tuple2('Topf', '\ud835\udd4b'),
			_Utils_Tuple2('topf', '\ud835\udd65'),
			_Utils_Tuple2('topfork', '⫚'),
			_Utils_Tuple2('tosa', '⤩'),
			_Utils_Tuple2('tprime', '‴'),
			_Utils_Tuple2('trade', '™'),
			_Utils_Tuple2('TRADE', '™'),
			_Utils_Tuple2('triangle', '▵'),
			_Utils_Tuple2('triangledown', '▿'),
			_Utils_Tuple2('triangleleft', '◃'),
			_Utils_Tuple2('trianglelefteq', '⊴'),
			_Utils_Tuple2('triangleq', '≜'),
			_Utils_Tuple2('triangleright', '▹'),
			_Utils_Tuple2('trianglerighteq', '⊵'),
			_Utils_Tuple2('tridot', '◬'),
			_Utils_Tuple2('trie', '≜'),
			_Utils_Tuple2('triminus', '⨺'),
			_Utils_Tuple2('TripleDot', '⃛'),
			_Utils_Tuple2('triplus', '⨹'),
			_Utils_Tuple2('trisb', '⧍'),
			_Utils_Tuple2('tritime', '⨻'),
			_Utils_Tuple2('trpezium', '⏢'),
			_Utils_Tuple2('Tscr', '\ud835\udcaf'),
			_Utils_Tuple2('tscr', '\ud835\udcc9'),
			_Utils_Tuple2('TScy', 'Ц'),
			_Utils_Tuple2('tscy', 'ц'),
			_Utils_Tuple2('TSHcy', 'Ћ'),
			_Utils_Tuple2('tshcy', 'ћ'),
			_Utils_Tuple2('Tstrok', 'Ŧ'),
			_Utils_Tuple2('tstrok', 'ŧ'),
			_Utils_Tuple2('twixt', '≬'),
			_Utils_Tuple2('twoheadleftarrow', '↞'),
			_Utils_Tuple2('twoheadrightarrow', '↠'),
			_Utils_Tuple2('Uacute', 'Ú'),
			_Utils_Tuple2('uacute', 'ú'),
			_Utils_Tuple2('uarr', '↑'),
			_Utils_Tuple2('Uarr', '↟'),
			_Utils_Tuple2('uArr', '⇑'),
			_Utils_Tuple2('Uarrocir', '⥉'),
			_Utils_Tuple2('Ubrcy', 'Ў'),
			_Utils_Tuple2('ubrcy', 'ў'),
			_Utils_Tuple2('Ubreve', 'Ŭ'),
			_Utils_Tuple2('ubreve', 'ŭ'),
			_Utils_Tuple2('Ucirc', 'Û'),
			_Utils_Tuple2('ucirc', 'û'),
			_Utils_Tuple2('Ucy', 'У'),
			_Utils_Tuple2('ucy', 'у'),
			_Utils_Tuple2('udarr', '⇅'),
			_Utils_Tuple2('Udblac', 'Ű'),
			_Utils_Tuple2('udblac', 'ű'),
			_Utils_Tuple2('udhar', '⥮'),
			_Utils_Tuple2('ufisht', '⥾'),
			_Utils_Tuple2('Ufr', '\ud835\udd18'),
			_Utils_Tuple2('ufr', '\ud835\udd32'),
			_Utils_Tuple2('Ugrave', 'Ù'),
			_Utils_Tuple2('ugrave', 'ù'),
			_Utils_Tuple2('uHar', '⥣'),
			_Utils_Tuple2('uharl', '↿'),
			_Utils_Tuple2('uharr', '↾'),
			_Utils_Tuple2('uhblk', '▀'),
			_Utils_Tuple2('ulcorn', '⌜'),
			_Utils_Tuple2('ulcorner', '⌜'),
			_Utils_Tuple2('ulcrop', '⌏'),
			_Utils_Tuple2('ultri', '◸'),
			_Utils_Tuple2('Umacr', 'Ū'),
			_Utils_Tuple2('umacr', 'ū'),
			_Utils_Tuple2('uml', '¨'),
			_Utils_Tuple2('UnderBar', '_'),
			_Utils_Tuple2('UnderBrace', '⏟'),
			_Utils_Tuple2('UnderBracket', '⎵'),
			_Utils_Tuple2('UnderParenthesis', '⏝'),
			_Utils_Tuple2('Union', '⋃'),
			_Utils_Tuple2('UnionPlus', '⊎'),
			_Utils_Tuple2('Uogon', 'Ų'),
			_Utils_Tuple2('uogon', 'ų'),
			_Utils_Tuple2('Uopf', '\ud835\udd4c'),
			_Utils_Tuple2('uopf', '\ud835\udd66'),
			_Utils_Tuple2('UpArrowBar', '⤒'),
			_Utils_Tuple2('uparrow', '↑'),
			_Utils_Tuple2('UpArrow', '↑'),
			_Utils_Tuple2('Uparrow', '⇑'),
			_Utils_Tuple2('UpArrowDownArrow', '⇅'),
			_Utils_Tuple2('updownarrow', '↕'),
			_Utils_Tuple2('UpDownArrow', '↕'),
			_Utils_Tuple2('Updownarrow', '⇕'),
			_Utils_Tuple2('UpEquilibrium', '⥮'),
			_Utils_Tuple2('upharpoonleft', '↿'),
			_Utils_Tuple2('upharpoonright', '↾'),
			_Utils_Tuple2('uplus', '⊎'),
			_Utils_Tuple2('UpperLeftArrow', '↖'),
			_Utils_Tuple2('UpperRightArrow', '↗'),
			_Utils_Tuple2('upsi', 'υ'),
			_Utils_Tuple2('Upsi', 'ϒ'),
			_Utils_Tuple2('upsih', 'ϒ'),
			_Utils_Tuple2('Upsilon', 'Υ'),
			_Utils_Tuple2('upsilon', 'υ'),
			_Utils_Tuple2('UpTeeArrow', '↥'),
			_Utils_Tuple2('UpTee', '⊥'),
			_Utils_Tuple2('upuparrows', '⇈'),
			_Utils_Tuple2('urcorn', '⌝'),
			_Utils_Tuple2('urcorner', '⌝'),
			_Utils_Tuple2('urcrop', '⌎'),
			_Utils_Tuple2('Uring', 'Ů'),
			_Utils_Tuple2('uring', 'ů'),
			_Utils_Tuple2('urtri', '◹'),
			_Utils_Tuple2('Uscr', '\ud835\udcb0'),
			_Utils_Tuple2('uscr', '\ud835\udcca'),
			_Utils_Tuple2('utdot', '⋰'),
			_Utils_Tuple2('Utilde', 'Ũ'),
			_Utils_Tuple2('utilde', 'ũ'),
			_Utils_Tuple2('utri', '▵'),
			_Utils_Tuple2('utrif', '▴'),
			_Utils_Tuple2('uuarr', '⇈'),
			_Utils_Tuple2('Uuml', 'Ü'),
			_Utils_Tuple2('uuml', 'ü'),
			_Utils_Tuple2('uwangle', '⦧'),
			_Utils_Tuple2('vangrt', '⦜'),
			_Utils_Tuple2('varepsilon', 'ϵ'),
			_Utils_Tuple2('varkappa', 'ϰ'),
			_Utils_Tuple2('varnothing', '∅'),
			_Utils_Tuple2('varphi', 'ϕ'),
			_Utils_Tuple2('varpi', 'ϖ'),
			_Utils_Tuple2('varpropto', '∝'),
			_Utils_Tuple2('varr', '↕'),
			_Utils_Tuple2('vArr', '⇕'),
			_Utils_Tuple2('varrho', 'ϱ'),
			_Utils_Tuple2('varsigma', 'ς'),
			_Utils_Tuple2('varsubsetneq', '⊊︀'),
			_Utils_Tuple2('varsubsetneqq', '⫋︀'),
			_Utils_Tuple2('varsupsetneq', '⊋︀'),
			_Utils_Tuple2('varsupsetneqq', '⫌︀'),
			_Utils_Tuple2('vartheta', 'ϑ'),
			_Utils_Tuple2('vartriangleleft', '⊲'),
			_Utils_Tuple2('vartriangleright', '⊳'),
			_Utils_Tuple2('vBar', '⫨'),
			_Utils_Tuple2('Vbar', '⫫'),
			_Utils_Tuple2('vBarv', '⫩'),
			_Utils_Tuple2('Vcy', 'В'),
			_Utils_Tuple2('vcy', 'в'),
			_Utils_Tuple2('vdash', '⊢'),
			_Utils_Tuple2('vDash', '⊨'),
			_Utils_Tuple2('Vdash', '⊩'),
			_Utils_Tuple2('VDash', '⊫'),
			_Utils_Tuple2('Vdashl', '⫦'),
			_Utils_Tuple2('veebar', '⊻'),
			_Utils_Tuple2('vee', '∨'),
			_Utils_Tuple2('Vee', '⋁'),
			_Utils_Tuple2('veeeq', '≚'),
			_Utils_Tuple2('vellip', '⋮'),
			_Utils_Tuple2('verbar', '|'),
			_Utils_Tuple2('Verbar', '‖'),
			_Utils_Tuple2('vert', '|'),
			_Utils_Tuple2('Vert', '‖'),
			_Utils_Tuple2('VerticalBar', '∣'),
			_Utils_Tuple2('VerticalLine', '|'),
			_Utils_Tuple2('VerticalSeparator', '❘'),
			_Utils_Tuple2('VerticalTilde', '≀'),
			_Utils_Tuple2('VeryThinSpace', '\u200a'),
			_Utils_Tuple2('Vfr', '\ud835\udd19'),
			_Utils_Tuple2('vfr', '\ud835\udd33'),
			_Utils_Tuple2('vltri', '⊲'),
			_Utils_Tuple2('vnsub', '⊂⃒'),
			_Utils_Tuple2('vnsup', '⊃⃒'),
			_Utils_Tuple2('Vopf', '\ud835\udd4d'),
			_Utils_Tuple2('vopf', '\ud835\udd67'),
			_Utils_Tuple2('vprop', '∝'),
			_Utils_Tuple2('vrtri', '⊳'),
			_Utils_Tuple2('Vscr', '\ud835\udcb1'),
			_Utils_Tuple2('vscr', '\ud835\udccb'),
			_Utils_Tuple2('vsubnE', '⫋︀'),
			_Utils_Tuple2('vsubne', '⊊︀'),
			_Utils_Tuple2('vsupnE', '⫌︀'),
			_Utils_Tuple2('vsupne', '⊋︀'),
			_Utils_Tuple2('Vvdash', '⊪'),
			_Utils_Tuple2('vzigzag', '⦚'),
			_Utils_Tuple2('Wcirc', 'Ŵ'),
			_Utils_Tuple2('wcirc', 'ŵ'),
			_Utils_Tuple2('wedbar', '⩟'),
			_Utils_Tuple2('wedge', '∧'),
			_Utils_Tuple2('Wedge', '⋀'),
			_Utils_Tuple2('wedgeq', '≙'),
			_Utils_Tuple2('weierp', '℘'),
			_Utils_Tuple2('Wfr', '\ud835\udd1a'),
			_Utils_Tuple2('wfr', '\ud835\udd34'),
			_Utils_Tuple2('Wopf', '\ud835\udd4e'),
			_Utils_Tuple2('wopf', '\ud835\udd68'),
			_Utils_Tuple2('wp', '℘'),
			_Utils_Tuple2('wr', '≀'),
			_Utils_Tuple2('wreath', '≀'),
			_Utils_Tuple2('Wscr', '\ud835\udcb2'),
			_Utils_Tuple2('wscr', '\ud835\udccc'),
			_Utils_Tuple2('xcap', '⋂'),
			_Utils_Tuple2('xcirc', '◯'),
			_Utils_Tuple2('xcup', '⋃'),
			_Utils_Tuple2('xdtri', '▽'),
			_Utils_Tuple2('Xfr', '\ud835\udd1b'),
			_Utils_Tuple2('xfr', '\ud835\udd35'),
			_Utils_Tuple2('xharr', '⟷'),
			_Utils_Tuple2('xhArr', '⟺'),
			_Utils_Tuple2('Xi', 'Ξ'),
			_Utils_Tuple2('xi', 'ξ'),
			_Utils_Tuple2('xlarr', '⟵'),
			_Utils_Tuple2('xlArr', '⟸'),
			_Utils_Tuple2('xmap', '⟼'),
			_Utils_Tuple2('xnis', '⋻'),
			_Utils_Tuple2('xodot', '⨀'),
			_Utils_Tuple2('Xopf', '\ud835\udd4f'),
			_Utils_Tuple2('xopf', '\ud835\udd69'),
			_Utils_Tuple2('xoplus', '⨁'),
			_Utils_Tuple2('xotime', '⨂'),
			_Utils_Tuple2('xrarr', '⟶'),
			_Utils_Tuple2('xrArr', '⟹'),
			_Utils_Tuple2('Xscr', '\ud835\udcb3'),
			_Utils_Tuple2('xscr', '\ud835\udccd'),
			_Utils_Tuple2('xsqcup', '⨆'),
			_Utils_Tuple2('xuplus', '⨄'),
			_Utils_Tuple2('xutri', '△'),
			_Utils_Tuple2('xvee', '⋁'),
			_Utils_Tuple2('xwedge', '⋀'),
			_Utils_Tuple2('Yacute', 'Ý'),
			_Utils_Tuple2('yacute', 'ý'),
			_Utils_Tuple2('YAcy', 'Я'),
			_Utils_Tuple2('yacy', 'я'),
			_Utils_Tuple2('Ycirc', 'Ŷ'),
			_Utils_Tuple2('ycirc', 'ŷ'),
			_Utils_Tuple2('Ycy', 'Ы'),
			_Utils_Tuple2('ycy', 'ы'),
			_Utils_Tuple2('yen', '¥'),
			_Utils_Tuple2('Yfr', '\ud835\udd1c'),
			_Utils_Tuple2('yfr', '\ud835\udd36'),
			_Utils_Tuple2('YIcy', 'Ї'),
			_Utils_Tuple2('yicy', 'ї'),
			_Utils_Tuple2('Yopf', '\ud835\udd50'),
			_Utils_Tuple2('yopf', '\ud835\udd6a'),
			_Utils_Tuple2('Yscr', '\ud835\udcb4'),
			_Utils_Tuple2('yscr', '\ud835\udcce'),
			_Utils_Tuple2('YUcy', 'Ю'),
			_Utils_Tuple2('yucy', 'ю'),
			_Utils_Tuple2('yuml', 'ÿ'),
			_Utils_Tuple2('Yuml', 'Ÿ'),
			_Utils_Tuple2('Zacute', 'Ź'),
			_Utils_Tuple2('zacute', 'ź'),
			_Utils_Tuple2('Zcaron', 'Ž'),
			_Utils_Tuple2('zcaron', 'ž'),
			_Utils_Tuple2('Zcy', 'З'),
			_Utils_Tuple2('zcy', 'з'),
			_Utils_Tuple2('Zdot', 'Ż'),
			_Utils_Tuple2('zdot', 'ż'),
			_Utils_Tuple2('zeetrf', 'ℨ'),
			_Utils_Tuple2('ZeroWidthSpace', '\u200b'),
			_Utils_Tuple2('Zeta', 'Ζ'),
			_Utils_Tuple2('zeta', 'ζ'),
			_Utils_Tuple2('zfr', '\ud835\udd37'),
			_Utils_Tuple2('Zfr', 'ℨ'),
			_Utils_Tuple2('ZHcy', 'Ж'),
			_Utils_Tuple2('zhcy', 'ж'),
			_Utils_Tuple2('zigrarr', '⇝'),
			_Utils_Tuple2('zopf', '\ud835\udd6b'),
			_Utils_Tuple2('Zopf', 'ℤ'),
			_Utils_Tuple2('Zscr', '\ud835\udcb5'),
			_Utils_Tuple2('zscr', '\ud835\udccf'),
			_Utils_Tuple2('zwj', '\u200d'),
			_Utils_Tuple2('zwnj', '\u200c')
		]));
var hecrj$html_parser$Html$Parser$namedCharacterReference = A2(
	elm$parser$Parser$map,
	function (reference) {
		return A2(
			elm$core$Maybe$withDefault,
			'&' + (reference + ';'),
			A2(elm$core$Dict$get, reference, hecrj$html_parser$Html$Parser$NamedCharacterReferences$dict));
	},
	elm$parser$Parser$getChompedString(
		hecrj$html_parser$Html$Parser$chompOneOrMore(elm$core$Char$isAlpha)));
var elm$core$Char$fromCode = _Char_fromCode;
var elm$parser$Parser$ExpectingInt = {$: 'ExpectingInt'};
var elm$parser$Parser$Advanced$consumeBase = _Parser_consumeBase;
var elm$parser$Parser$Advanced$consumeBase16 = _Parser_consumeBase16;
var elm$parser$Parser$Advanced$bumpOffset = F2(
	function (newOffset, s) {
		return {col: s.col + (newOffset - s.offset), context: s.context, indent: s.indent, offset: newOffset, row: s.row, src: s.src};
	});
var elm$parser$Parser$Advanced$chompBase10 = _Parser_chompBase10;
var elm$parser$Parser$Advanced$isAsciiCode = _Parser_isAsciiCode;
var elm$parser$Parser$Advanced$consumeExp = F2(
	function (offset, src) {
		if (A3(elm$parser$Parser$Advanced$isAsciiCode, 101, offset, src) || A3(elm$parser$Parser$Advanced$isAsciiCode, 69, offset, src)) {
			var eOffset = offset + 1;
			var expOffset = (A3(elm$parser$Parser$Advanced$isAsciiCode, 43, eOffset, src) || A3(elm$parser$Parser$Advanced$isAsciiCode, 45, eOffset, src)) ? (eOffset + 1) : eOffset;
			var newOffset = A2(elm$parser$Parser$Advanced$chompBase10, expOffset, src);
			return _Utils_eq(expOffset, newOffset) ? (-newOffset) : newOffset;
		} else {
			return offset;
		}
	});
var elm$parser$Parser$Advanced$consumeDotAndExp = F2(
	function (offset, src) {
		return A3(elm$parser$Parser$Advanced$isAsciiCode, 46, offset, src) ? A2(
			elm$parser$Parser$Advanced$consumeExp,
			A2(elm$parser$Parser$Advanced$chompBase10, offset + 1, src),
			src) : A2(elm$parser$Parser$Advanced$consumeExp, offset, src);
	});
var elm$parser$Parser$Advanced$finalizeInt = F5(
	function (invalid, handler, startOffset, _n0, s) {
		var endOffset = _n0.a;
		var n = _n0.b;
		if (handler.$ === 'Err') {
			var x = handler.a;
			return A2(
				elm$parser$Parser$Advanced$Bad,
				true,
				A2(elm$parser$Parser$Advanced$fromState, s, x));
		} else {
			var toValue = handler.a;
			return _Utils_eq(startOffset, endOffset) ? A2(
				elm$parser$Parser$Advanced$Bad,
				_Utils_cmp(s.offset, startOffset) < 0,
				A2(elm$parser$Parser$Advanced$fromState, s, invalid)) : A3(
				elm$parser$Parser$Advanced$Good,
				true,
				toValue(n),
				A2(elm$parser$Parser$Advanced$bumpOffset, endOffset, s));
		}
	});
var elm$parser$Parser$Advanced$finalizeFloat = F6(
	function (invalid, expecting, intSettings, floatSettings, intPair, s) {
		var intOffset = intPair.a;
		var floatOffset = A2(elm$parser$Parser$Advanced$consumeDotAndExp, intOffset, s.src);
		if (floatOffset < 0) {
			return A2(
				elm$parser$Parser$Advanced$Bad,
				true,
				A4(elm$parser$Parser$Advanced$fromInfo, s.row, s.col - (floatOffset + s.offset), invalid, s.context));
		} else {
			if (_Utils_eq(s.offset, floatOffset)) {
				return A2(
					elm$parser$Parser$Advanced$Bad,
					false,
					A2(elm$parser$Parser$Advanced$fromState, s, expecting));
			} else {
				if (_Utils_eq(intOffset, floatOffset)) {
					return A5(elm$parser$Parser$Advanced$finalizeInt, invalid, intSettings, s.offset, intPair, s);
				} else {
					if (floatSettings.$ === 'Err') {
						var x = floatSettings.a;
						return A2(
							elm$parser$Parser$Advanced$Bad,
							true,
							A2(elm$parser$Parser$Advanced$fromState, s, invalid));
					} else {
						var toValue = floatSettings.a;
						var _n1 = elm$core$String$toFloat(
							A3(elm$core$String$slice, s.offset, floatOffset, s.src));
						if (_n1.$ === 'Nothing') {
							return A2(
								elm$parser$Parser$Advanced$Bad,
								true,
								A2(elm$parser$Parser$Advanced$fromState, s, invalid));
						} else {
							var n = _n1.a;
							return A3(
								elm$parser$Parser$Advanced$Good,
								true,
								toValue(n),
								A2(elm$parser$Parser$Advanced$bumpOffset, floatOffset, s));
						}
					}
				}
			}
		}
	});
var elm$parser$Parser$Advanced$number = function (c) {
	return elm$parser$Parser$Advanced$Parser(
		function (s) {
			if (A3(elm$parser$Parser$Advanced$isAsciiCode, 48, s.offset, s.src)) {
				var zeroOffset = s.offset + 1;
				var baseOffset = zeroOffset + 1;
				return A3(elm$parser$Parser$Advanced$isAsciiCode, 120, zeroOffset, s.src) ? A5(
					elm$parser$Parser$Advanced$finalizeInt,
					c.invalid,
					c.hex,
					baseOffset,
					A2(elm$parser$Parser$Advanced$consumeBase16, baseOffset, s.src),
					s) : (A3(elm$parser$Parser$Advanced$isAsciiCode, 111, zeroOffset, s.src) ? A5(
					elm$parser$Parser$Advanced$finalizeInt,
					c.invalid,
					c.octal,
					baseOffset,
					A3(elm$parser$Parser$Advanced$consumeBase, 8, baseOffset, s.src),
					s) : (A3(elm$parser$Parser$Advanced$isAsciiCode, 98, zeroOffset, s.src) ? A5(
					elm$parser$Parser$Advanced$finalizeInt,
					c.invalid,
					c.binary,
					baseOffset,
					A3(elm$parser$Parser$Advanced$consumeBase, 2, baseOffset, s.src),
					s) : A6(
					elm$parser$Parser$Advanced$finalizeFloat,
					c.invalid,
					c.expecting,
					c._int,
					c._float,
					_Utils_Tuple2(zeroOffset, 0),
					s)));
			} else {
				return A6(
					elm$parser$Parser$Advanced$finalizeFloat,
					c.invalid,
					c.expecting,
					c._int,
					c._float,
					A3(elm$parser$Parser$Advanced$consumeBase, 10, s.offset, s.src),
					s);
			}
		});
};
var elm$parser$Parser$Advanced$int = F2(
	function (expecting, invalid) {
		return elm$parser$Parser$Advanced$number(
			{
				binary: elm$core$Result$Err(invalid),
				expecting: expecting,
				_float: elm$core$Result$Err(invalid),
				hex: elm$core$Result$Err(invalid),
				_int: elm$core$Result$Ok(elm$core$Basics$identity),
				invalid: invalid,
				octal: elm$core$Result$Err(invalid)
			});
	});
var elm$parser$Parser$int = A2(elm$parser$Parser$Advanced$int, elm$parser$Parser$ExpectingInt, elm$parser$Parser$ExpectingInt);
var elm$core$Char$isHexDigit = function (_char) {
	var code = elm$core$Char$toCode(_char);
	return ((48 <= code) && (code <= 57)) || (((65 <= code) && (code <= 70)) || ((97 <= code) && (code <= 102)));
};
var elm$core$List$tail = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return elm$core$Maybe$Just(xs);
	} else {
		return elm$core$Maybe$Nothing;
	}
};
var elm$core$Basics$pow = _Basics_pow;
var rtfeldman$elm_hex$Hex$fromStringHelp = F3(
	function (position, chars, accumulated) {
		fromStringHelp:
		while (true) {
			if (!chars.b) {
				return elm$core$Result$Ok(accumulated);
			} else {
				var _char = chars.a;
				var rest = chars.b;
				switch (_char.valueOf()) {
					case '0':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated;
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '1':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + A2(elm$core$Basics$pow, 16, position);
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '2':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (2 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '3':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (3 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '4':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (4 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '5':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (5 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '6':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (6 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '7':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (7 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '8':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (8 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '9':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (9 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'a':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (10 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'b':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (11 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'c':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (12 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'd':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (13 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'e':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (14 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'f':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (15 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					default:
						var nonHex = _char;
						return elm$core$Result$Err(
							elm$core$String$fromChar(nonHex) + ' is not a valid hexadecimal character.');
				}
			}
		}
	});
var rtfeldman$elm_hex$Hex$fromString = function (str) {
	if (elm$core$String$isEmpty(str)) {
		return elm$core$Result$Err('Empty strings are not valid hexadecimal strings.');
	} else {
		var result = function () {
			if (A2(elm$core$String$startsWith, '-', str)) {
				var list = A2(
					elm$core$Maybe$withDefault,
					_List_Nil,
					elm$core$List$tail(
						elm$core$String$toList(str)));
				return A2(
					elm$core$Result$map,
					elm$core$Basics$negate,
					A3(
						rtfeldman$elm_hex$Hex$fromStringHelp,
						elm$core$List$length(list) - 1,
						list,
						0));
			} else {
				return A3(
					rtfeldman$elm_hex$Hex$fromStringHelp,
					elm$core$String$length(str) - 1,
					elm$core$String$toList(str),
					0);
			}
		}();
		var formatError = function (err) {
			return A2(
				elm$core$String$join,
				' ',
				_List_fromArray(
					['\"' + (str + '\"'), 'is not a valid hexadecimal string because', err]));
		};
		return A2(elm$core$Result$mapError, formatError, result);
	}
};
var hecrj$html_parser$Html$Parser$hexadecimal = A2(
	elm$parser$Parser$andThen,
	function (hex) {
		var _n0 = rtfeldman$elm_hex$Hex$fromString(
			elm$core$String$toLower(hex));
		if (_n0.$ === 'Ok') {
			var value = _n0.a;
			return elm$parser$Parser$succeed(value);
		} else {
			var error = _n0.a;
			return elm$parser$Parser$problem(error);
		}
	},
	elm$parser$Parser$getChompedString(
		hecrj$html_parser$Html$Parser$chompOneOrMore(elm$core$Char$isHexDigit)));
var hecrj$html_parser$Html$Parser$numericCharacterReference = function () {
	var codepoint = elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				elm$parser$Parser$keeper,
				A2(
					elm$parser$Parser$ignorer,
					elm$parser$Parser$succeed(elm$core$Basics$identity),
					elm$parser$Parser$chompIf(
						function (c) {
							return _Utils_eq(
								c,
								_Utils_chr('x')) || _Utils_eq(
								c,
								_Utils_chr('X'));
						})),
				hecrj$html_parser$Html$Parser$hexadecimal),
				A2(
				elm$parser$Parser$keeper,
				A2(
					elm$parser$Parser$ignorer,
					elm$parser$Parser$succeed(elm$core$Basics$identity),
					elm$parser$Parser$chompWhile(
						elm$core$Basics$eq(
							_Utils_chr('0')))),
				elm$parser$Parser$int)
			]));
	return A2(
		elm$parser$Parser$keeper,
		A2(
			elm$parser$Parser$ignorer,
			elm$parser$Parser$succeed(elm$core$Basics$identity),
			elm$parser$Parser$chompIf(
				elm$core$Basics$eq(
					_Utils_chr('#')))),
		A2(
			elm$parser$Parser$map,
			A2(elm$core$Basics$composeR, elm$core$Char$fromCode, elm$core$String$fromChar),
			codepoint));
}();
var hecrj$html_parser$Html$Parser$characterReference = A2(
	elm$parser$Parser$keeper,
	A2(
		elm$parser$Parser$ignorer,
		elm$parser$Parser$succeed(elm$core$Basics$identity),
		elm$parser$Parser$chompIf(
			elm$core$Basics$eq(
				_Utils_chr('&')))),
	elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				elm$parser$Parser$ignorer,
				elm$parser$Parser$backtrackable(hecrj$html_parser$Html$Parser$namedCharacterReference),
				hecrj$html_parser$Html$Parser$chompSemicolon),
				A2(
				elm$parser$Parser$ignorer,
				elm$parser$Parser$backtrackable(hecrj$html_parser$Html$Parser$numericCharacterReference),
				hecrj$html_parser$Html$Parser$chompSemicolon),
				elm$parser$Parser$succeed('&')
			])));
var hecrj$html_parser$Html$Parser$tagAttributeQuotedValue = function (quote) {
	var isQuotedValueChar = function (c) {
		return (!_Utils_eq(c, quote)) && (!_Utils_eq(
			c,
			_Utils_chr('&')));
	};
	return A2(
		elm$parser$Parser$keeper,
		A2(
			elm$parser$Parser$ignorer,
			elm$parser$Parser$succeed(elm$core$Basics$identity),
			elm$parser$Parser$chompIf(
				elm$core$Basics$eq(quote))),
		A2(
			elm$parser$Parser$ignorer,
			A2(
				elm$parser$Parser$map,
				elm$core$String$join(''),
				hecrj$html_parser$Html$Parser$many(
					elm$parser$Parser$oneOf(
						_List_fromArray(
							[
								elm$parser$Parser$getChompedString(
								hecrj$html_parser$Html$Parser$chompOneOrMore(isQuotedValueChar)),
								hecrj$html_parser$Html$Parser$characterReference
							])))),
			elm$parser$Parser$chompIf(
				elm$core$Basics$eq(quote))));
};
var hecrj$html_parser$Html$Parser$oneOrMore = F2(
	function (type_, parser_) {
		return A2(
			elm$parser$Parser$loop,
			_List_Nil,
			function (list) {
				return elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							A2(
							elm$parser$Parser$map,
							function (_new) {
								return elm$parser$Parser$Loop(
									A2(elm$core$List$cons, _new, list));
							},
							parser_),
							elm$core$List$isEmpty(list) ? elm$parser$Parser$problem('expecting at least one ' + type_) : elm$parser$Parser$succeed(
							elm$parser$Parser$Done(
								elm$core$List$reverse(list)))
						]));
			});
	});
var hecrj$html_parser$Html$Parser$tagAttributeUnquotedValue = function () {
	var isUnquotedValueChar = function (c) {
		return (!hecrj$html_parser$Html$Parser$isSpaceCharacter(c)) && ((!_Utils_eq(
			c,
			_Utils_chr('\"'))) && ((!_Utils_eq(
			c,
			_Utils_chr('\''))) && ((!_Utils_eq(
			c,
			_Utils_chr('='))) && ((!_Utils_eq(
			c,
			_Utils_chr('<'))) && ((!_Utils_eq(
			c,
			_Utils_chr('>'))) && ((!_Utils_eq(
			c,
			_Utils_chr('`'))) && (!_Utils_eq(
			c,
			_Utils_chr('&')))))))));
	};
	return A2(
		elm$parser$Parser$map,
		elm$core$String$join(''),
		A2(
			hecrj$html_parser$Html$Parser$oneOrMore,
			'attribute value',
			elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						elm$parser$Parser$getChompedString(
						hecrj$html_parser$Html$Parser$chompOneOrMore(isUnquotedValueChar)),
						hecrj$html_parser$Html$Parser$characterReference
					]))));
}();
var hecrj$html_parser$Html$Parser$tagAttributeValue = elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			elm$parser$Parser$keeper,
			A2(
				elm$parser$Parser$ignorer,
				A2(
					elm$parser$Parser$ignorer,
					elm$parser$Parser$succeed(elm$core$Basics$identity),
					elm$parser$Parser$chompIf(
						elm$core$Basics$eq(
							_Utils_chr('=')))),
				elm$parser$Parser$chompWhile(hecrj$html_parser$Html$Parser$isSpaceCharacter)),
			elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						hecrj$html_parser$Html$Parser$tagAttributeUnquotedValue,
						hecrj$html_parser$Html$Parser$tagAttributeQuotedValue(
						_Utils_chr('\"')),
						hecrj$html_parser$Html$Parser$tagAttributeQuotedValue(
						_Utils_chr('\''))
					]))),
			elm$parser$Parser$succeed('')
		]));
var hecrj$html_parser$Html$Parser$tagAttribute = A2(
	elm$parser$Parser$keeper,
	A2(
		elm$parser$Parser$keeper,
		elm$parser$Parser$succeed(elm$core$Tuple$pair),
		A2(
			elm$parser$Parser$ignorer,
			hecrj$html_parser$Html$Parser$tagAttributeName,
			elm$parser$Parser$chompWhile(hecrj$html_parser$Html$Parser$isSpaceCharacter))),
	A2(
		elm$parser$Parser$ignorer,
		hecrj$html_parser$Html$Parser$tagAttributeValue,
		elm$parser$Parser$chompWhile(hecrj$html_parser$Html$Parser$isSpaceCharacter)));
var hecrj$html_parser$Html$Parser$tagAttributes = hecrj$html_parser$Html$Parser$many(hecrj$html_parser$Html$Parser$tagAttribute);
var hecrj$html_parser$Html$Parser$tagName = A2(
	elm$parser$Parser$map,
	elm$core$String$toLower,
	elm$parser$Parser$getChompedString(
		A2(
			elm$parser$Parser$ignorer,
			elm$parser$Parser$chompIf(elm$core$Char$isAlphaNum),
			elm$parser$Parser$chompWhile(
				function (c) {
					return elm$core$Char$isAlphaNum(c) || _Utils_eq(
						c,
						_Utils_chr('-'));
				}))));
var hecrj$html_parser$Html$Parser$Text = function (a) {
	return {$: 'Text', a: a};
};
var hecrj$html_parser$Html$Parser$text = A2(
	elm$parser$Parser$map,
	A2(
		elm$core$Basics$composeR,
		elm$core$String$join(''),
		hecrj$html_parser$Html$Parser$Text),
	A2(
		hecrj$html_parser$Html$Parser$oneOrMore,
		'text element',
		elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					elm$parser$Parser$getChompedString(
					hecrj$html_parser$Html$Parser$chompOneOrMore(
						function (c) {
							return (!_Utils_eq(
								c,
								_Utils_chr('<'))) && (!_Utils_eq(
								c,
								_Utils_chr('&')));
						})),
					hecrj$html_parser$Html$Parser$characterReference
				]))));
function hecrj$html_parser$Html$Parser$cyclic$node() {
	return elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				hecrj$html_parser$Html$Parser$text,
				hecrj$html_parser$Html$Parser$comment,
				hecrj$html_parser$Html$Parser$cyclic$element()
			]));
}
function hecrj$html_parser$Html$Parser$cyclic$element() {
	return A2(
		elm$parser$Parser$andThen,
		function (_n0) {
			var name = _n0.a;
			var attributes = _n0.b;
			return hecrj$html_parser$Html$Parser$isVoidElement(name) ? A2(
				elm$parser$Parser$ignorer,
				A2(
					elm$parser$Parser$ignorer,
					elm$parser$Parser$succeed(
						A3(hecrj$html_parser$Html$Parser$Element, name, attributes, _List_Nil)),
					elm$parser$Parser$oneOf(
						_List_fromArray(
							[
								elm$parser$Parser$chompIf(
								elm$core$Basics$eq(
									_Utils_chr('/'))),
								elm$parser$Parser$succeed(_Utils_Tuple0)
							]))),
				elm$parser$Parser$chompIf(
					elm$core$Basics$eq(
						_Utils_chr('>')))) : A2(
				elm$parser$Parser$keeper,
				A2(
					elm$parser$Parser$ignorer,
					elm$parser$Parser$succeed(
						A2(hecrj$html_parser$Html$Parser$Element, name, attributes)),
					elm$parser$Parser$chompIf(
						elm$core$Basics$eq(
							_Utils_chr('>')))),
				A2(
					elm$parser$Parser$ignorer,
					hecrj$html_parser$Html$Parser$many(
						elm$parser$Parser$backtrackable(
							hecrj$html_parser$Html$Parser$cyclic$node())),
					hecrj$html_parser$Html$Parser$closingTag(name)));
		},
		A2(
			elm$parser$Parser$keeper,
			A2(
				elm$parser$Parser$keeper,
				A2(
					elm$parser$Parser$ignorer,
					elm$parser$Parser$succeed(elm$core$Tuple$pair),
					elm$parser$Parser$chompIf(
						elm$core$Basics$eq(
							_Utils_chr('<')))),
				A2(
					elm$parser$Parser$ignorer,
					hecrj$html_parser$Html$Parser$tagName,
					elm$parser$Parser$chompWhile(hecrj$html_parser$Html$Parser$isSpaceCharacter))),
			hecrj$html_parser$Html$Parser$tagAttributes));
}
try {
	var hecrj$html_parser$Html$Parser$node = hecrj$html_parser$Html$Parser$cyclic$node();
	hecrj$html_parser$Html$Parser$cyclic$node = function () {
		return hecrj$html_parser$Html$Parser$node;
	};
	var hecrj$html_parser$Html$Parser$element = hecrj$html_parser$Html$Parser$cyclic$element();
	hecrj$html_parser$Html$Parser$cyclic$element = function () {
		return hecrj$html_parser$Html$Parser$element;
	};
} catch ($) {
throw 'Some top-level definitions from `Html.Parser` are causing infinite recursion:\n\n  ┌─────┐\n  │    node\n  │     ↓\n  │    element\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.0/halting-problem to learn how to fix it!';}
var hecrj$html_parser$Html$Parser$run = function (str) {
	return elm$core$String$isEmpty(str) ? elm$core$Result$Ok(_List_Nil) : A2(
		elm$parser$Parser$run,
		A2(hecrj$html_parser$Html$Parser$oneOrMore, 'node', hecrj$html_parser$Html$Parser$node),
		str);
};
var elm$virtual_dom$VirtualDom$node = function (tag) {
	return _VirtualDom_node(
		_VirtualDom_noScript(tag));
};
var elm$html$Html$node = elm$virtual_dom$VirtualDom$node;
var hecrj$html_parser$Html$Parser$Util$toAttribute = function (_n0) {
	var name = _n0.a;
	var value = _n0.b;
	return A2(elm$html$Html$Attributes$attribute, name, value);
};
var hecrj$html_parser$Html$Parser$Util$toVirtualDom = function (nodes) {
	return A2(elm$core$List$map, hecrj$html_parser$Html$Parser$Util$toVirtualDomEach, nodes);
};
var hecrj$html_parser$Html$Parser$Util$toVirtualDomEach = function (node) {
	switch (node.$) {
		case 'Element':
			var name = node.a;
			var attrs = node.b;
			var children = node.c;
			return A3(
				elm$html$Html$node,
				name,
				A2(elm$core$List$map, hecrj$html_parser$Html$Parser$Util$toAttribute, attrs),
				hecrj$html_parser$Html$Parser$Util$toVirtualDom(children));
		case 'Text':
			var s = node.a;
			return elm$html$Html$text(s);
		default:
			return elm$html$Html$text('');
	}
};
var author$project$Lia$Markdown$Inline$View$html_parse = function (str) {
	var _n0 = hecrj$html_parser$Html$Parser$run(str);
	if (_n0.$ === 'Ok') {
		var rslt = _n0.a;
		return A2(
			elm$html$Html$span,
			_List_Nil,
			hecrj$html_parser$Html$Parser$Util$toVirtualDom(rslt));
	} else {
		return A2(
			elm$html$Html$span,
			_List_Nil,
			_List_fromArray(
				[
					elm$html$Html$text(str)
				]));
	}
};
var elm$html$Html$audio = _VirtualDom_node('audio');
var elm$html$Html$b = _VirtualDom_node('b');
var elm$html$Html$code = _VirtualDom_node('code');
var elm$html$Html$em = _VirtualDom_node('em');
var elm$html$Html$iframe = _VirtualDom_node('iframe');
var elm$html$Html$img = _VirtualDom_node('img');
var elm$html$Html$s = _VirtualDom_node('s');
var elm$html$Html$source = _VirtualDom_node('source');
var elm$html$Html$u = _VirtualDom_node('u');
var elm$html$Html$video = _VirtualDom_node('video');
var elm$html$Html$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			_VirtualDom_property,
			key,
			elm$json$Json$Encode$bool(bool));
	});
var elm$html$Html$Attributes$controls = elm$html$Html$Attributes$boolProperty('controls');
var elm$html$Html$Attributes$id = elm$html$Html$Attributes$stringProperty('id');
var elm$html$Html$Attributes$src = function (url) {
	return A2(
		elm$html$Html$Attributes$stringProperty,
		'src',
		_VirtualDom_noJavaScriptOrHtmlUri(url));
};
var elm$html$Html$Attributes$title = elm$html$Html$Attributes$stringProperty('title');
var author$project$Lia$Markdown$Inline$View$reference = F3(
	function (visible, ref, attr) {
		switch (ref.$) {
			case 'Link':
				var alt_ = ref.a;
				var url_ = ref.b;
				var title_ = ref.c;
				return A5(author$project$Lia$Markdown$Inline$View$view_url, visible, alt_, url_, title_, attr);
			case 'Mail':
				var alt_ = ref.a;
				var url_ = ref.b;
				var title_ = ref.c;
				return A5(author$project$Lia$Markdown$Inline$View$view_url, visible, alt_, url_, title_, attr);
			case 'Image':
				var alt_ = ref.a;
				var url_ = ref.b;
				var title_ = ref.c;
				return A2(
					elm$html$Html$img,
					A2(
						elm$core$List$cons,
						elm$html$Html$Attributes$src(url_),
						A2(
							elm$core$List$cons,
							elm$html$Html$Attributes$title(title_),
							A2(author$project$Lia$Markdown$Inline$View$annotation, 'lia-image', attr))),
					A2(author$project$Lia$Markdown$Inline$View$viewer, visible, alt_));
			case 'Audio':
				var alt_ = ref.a;
				var _n5 = ref.b;
				var tube = _n5.a;
				var url_ = _n5.b;
				var title_ = ref.c;
				return tube ? A2(
					elm$html$Html$iframe,
					A2(
						elm$core$List$cons,
						elm$html$Html$Attributes$src(url_),
						A2(
							elm$core$List$cons,
							A2(elm$html$Html$Attributes$attribute, 'allowfullscreen', ''),
							A2(
								elm$core$List$cons,
								A2(elm$html$Html$Attributes$attribute, 'allow', 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture'),
								A2(
									elm$core$List$cons,
									elm$html$Html$Attributes$title(title_),
									A2(
										elm$core$List$cons,
										A2(elm$html$Html$Attributes$style, 'width', '100%'),
										A2(author$project$Lia$Markdown$Inline$View$annotation, 'lia-audio', attr)))))),
					A2(author$project$Lia$Markdown$Inline$View$viewer, visible, alt_)) : A2(
					elm$html$Html$audio,
					A2(
						elm$core$List$cons,
						elm$html$Html$Attributes$controls(true),
						A2(
							elm$core$List$cons,
							elm$html$Html$Attributes$title(title_),
							A2(author$project$Lia$Markdown$Inline$View$annotation, 'lia-audio', attr))),
					_List_fromArray(
						[
							A2(
							elm$html$Html$source,
							_List_fromArray(
								[
									elm$html$Html$Attributes$src(url_)
								]),
							_List_Nil),
							A2(
							elm$html$Html$span,
							_List_Nil,
							A2(author$project$Lia$Markdown$Inline$View$viewer, visible, alt_))
						]));
			default:
				var alt_ = ref.a;
				var _n6 = ref.b;
				var tube = _n6.a;
				var url_ = _n6.b;
				var title_ = ref.c;
				return tube ? A2(
					elm$html$Html$iframe,
					A2(
						elm$core$List$cons,
						elm$html$Html$Attributes$src(url_),
						A2(
							elm$core$List$cons,
							A2(elm$html$Html$Attributes$attribute, 'allowfullscreen', ''),
							A2(
								elm$core$List$cons,
								A2(elm$html$Html$Attributes$attribute, 'allow', 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture'),
								A2(
									elm$core$List$cons,
									elm$html$Html$Attributes$title(title_),
									A2(author$project$Lia$Markdown$Inline$View$annotation, 'lia-movie', attr))))),
					A2(author$project$Lia$Markdown$Inline$View$viewer, visible, alt_)) : A2(
					elm$html$Html$video,
					A2(
						elm$core$List$cons,
						elm$html$Html$Attributes$controls(true),
						A2(
							elm$core$List$cons,
							elm$html$Html$Attributes$title(title_),
							A2(author$project$Lia$Markdown$Inline$View$annotation, 'lia-movie', attr))),
					_List_fromArray(
						[
							A2(
							elm$html$Html$source,
							_List_fromArray(
								[
									elm$html$Html$Attributes$src(url_)
								]),
							_List_Nil),
							A2(
							elm$html$Html$span,
							_List_Nil,
							A2(author$project$Lia$Markdown$Inline$View$viewer, visible, alt_))
						]));
		}
	});
var author$project$Lia$Markdown$Inline$View$view = F2(
	function (visible, element) {
		view:
		while (true) {
			switch (element.$) {
				case 'Bold':
					var e = element.a;
					var attr = element.b;
					return A2(
						elm$html$Html$b,
						A2(author$project$Lia$Markdown$Inline$View$annotation, 'lia-bold', attr),
						_List_fromArray(
							[
								A2(author$project$Lia$Markdown$Inline$View$view, visible, e)
							]));
				case 'Italic':
					var e = element.a;
					var attr = element.b;
					return A2(
						elm$html$Html$em,
						A2(author$project$Lia$Markdown$Inline$View$annotation, 'lia-italic', attr),
						_List_fromArray(
							[
								A2(author$project$Lia$Markdown$Inline$View$view, visible, e)
							]));
				case 'Strike':
					var e = element.a;
					var attr = element.b;
					return A2(
						elm$html$Html$s,
						A2(author$project$Lia$Markdown$Inline$View$annotation, 'lia-strike', attr),
						_List_fromArray(
							[
								A2(author$project$Lia$Markdown$Inline$View$view, visible, e)
							]));
				case 'Underline':
					var e = element.a;
					var attr = element.b;
					return A2(
						elm$html$Html$u,
						A2(author$project$Lia$Markdown$Inline$View$annotation, 'lia-underline', attr),
						_List_fromArray(
							[
								A2(author$project$Lia$Markdown$Inline$View$view, visible, e)
							]));
				case 'Superscript':
					var e = element.a;
					var attr = element.b;
					return A2(
						elm$html$Html$sup,
						A2(author$project$Lia$Markdown$Inline$View$annotation, 'lia-superscript', attr),
						_List_fromArray(
							[
								A2(author$project$Lia$Markdown$Inline$View$view, visible, e)
							]));
				case 'Verbatim':
					var e = element.a;
					var attr = element.b;
					return A2(
						elm$html$Html$code,
						A2(author$project$Lia$Markdown$Inline$View$annotation, 'lia-code', attr),
						_List_fromArray(
							[
								elm$html$Html$text(e)
							]));
				case 'Ref':
					var e = element.a;
					var attr = element.b;
					return A3(author$project$Lia$Markdown$Inline$View$reference, visible, e, attr);
				case 'FootnoteMark':
					var e = element.a;
					var attr = element.b;
					return A2(
						author$project$Lia$Markdown$Footnote$View$inline,
						e,
						author$project$Lia$Markdown$Inline$View$attributes(attr));
				case 'Container':
					var list = element.a;
					var attr = element.b;
					return A2(
						elm$html$Html$span,
						A2(author$project$Lia$Markdown$Inline$View$annotation, 'lia-container', attr),
						A2(
							elm$core$List$map,
							function (e) {
								return A2(author$project$Lia$Markdown$Inline$View$view, visible, e);
							},
							list));
				case 'HTML':
					var str = element.a;
					return author$project$Lia$Markdown$Inline$View$html_parse(str);
				case 'EInline':
					var id_in = element.a;
					var id_out = element.b;
					var e = element.c;
					var attr = element.d;
					return ((_Utils_cmp(id_in, visible) < 1) && (_Utils_cmp(id_out, visible) > 0)) ? A2(
						elm$html$Html$span,
						A2(
							elm$core$List$cons,
							elm$html$Html$Attributes$id(
								elm$core$String$fromInt(id_in)),
							A2(author$project$Lia$Markdown$Inline$View$annotation, 'lia-effect-inline', attr)),
						A3(
							author$project$Lia$Markdown$Effect$View$view,
							author$project$Lia$Markdown$Inline$View$viewer(visible),
							id_in,
							e)) : elm$html$Html$text('');
				case 'Symbol':
					if (element.b.$ === 'Nothing') {
						var e = element.a;
						var _n3 = element.b;
						return elm$html$Html$text(e);
					} else {
						var e = element.a;
						var attr = element.b;
						var $temp$visible = visible,
							$temp$element = A2(
							author$project$Lia$Markdown$Inline$Types$Container,
							_List_fromArray(
								[
									A2(author$project$Lia$Markdown$Inline$Types$Symbol, e, elm$core$Maybe$Nothing)
								]),
							attr);
						visible = $temp$visible;
						element = $temp$element;
						continue view;
					}
				case 'Chars':
					if (element.b.$ === 'Nothing') {
						var e = element.a;
						var _n1 = element.b;
						return elm$html$Html$text(e);
					} else {
						var e = element.a;
						var attr = element.b;
						var $temp$visible = visible,
							$temp$element = A2(
							author$project$Lia$Markdown$Inline$Types$Container,
							_List_fromArray(
								[
									A2(author$project$Lia$Markdown$Inline$Types$Chars, e, elm$core$Maybe$Nothing)
								]),
							attr);
						visible = $temp$visible;
						element = $temp$element;
						continue view;
					}
				default:
					if (element.c.$ === 'Nothing') {
						var mode = element.a;
						var e = element.b;
						var _n2 = element.c;
						return A3(
							elm$html$Html$node,
							'katex-formula',
							_List_fromArray(
								[
									A2(elm$html$Html$Attributes$attribute, 'displayMode', mode)
								]),
							_List_fromArray(
								[
									elm$html$Html$text(e)
								]));
					} else {
						var mode = element.a;
						var e = element.b;
						var attr = element.c;
						var $temp$visible = visible,
							$temp$element = A2(
							author$project$Lia$Markdown$Inline$Types$Container,
							_List_fromArray(
								[
									A3(author$project$Lia$Markdown$Inline$Types$Formula, mode, e, elm$core$Maybe$Nothing)
								]),
							attr);
						visible = $temp$visible;
						element = $temp$element;
						continue view;
					}
			}
		}
	});
var author$project$Lia$Markdown$Inline$View$view_url = F5(
	function (visible, alt_, url_, title_, attr) {
		return function (a) {
			return a(
				A2(author$project$Lia$Markdown$Inline$View$viewer, visible, alt_));
		}(
			elm$html$Html$a(
				A2(
					elm$core$List$append,
					A2(author$project$Lia$Markdown$Inline$View$annotation, 'lia-link', attr),
					_List_fromArray(
						[
							elm$html$Html$Attributes$href(url_),
							elm$html$Html$Attributes$title(title_)
						]))));
	});
var author$project$Lia$Markdown$Inline$View$viewer = F2(
	function (visible, elements) {
		return A2(
			elm$core$List$map,
			author$project$Lia$Markdown$Inline$View$view(visible),
			elements);
	});
var author$project$Lia$Markdown$Inline$View$view_inf = author$project$Lia$Markdown$Inline$View$view(99999);
var author$project$Index$View$inlines = elm$core$List$map(author$project$Lia$Markdown$Inline$View$view_inf);
var elm$html$Html$h3 = _VirtualDom_node('h3');
var author$project$Index$View$viewHeader = F2(
	function (author, logo) {
		return A2(
			elm$html$Html$div,
			_List_fromArray(
				[
					elm$html$Html$Attributes$class('course-header')
				]),
			_List_fromArray(
				[
					function () {
					var _n0 = _Utils_Tuple2(
						elm$core$String$trim(author),
						elm$core$String$trim(logo));
					if (_n0.b === '') {
						var str_a = _n0.a;
						return A2(
							elm$html$Html$div,
							_List_fromArray(
								[
									elm$html$Html$Attributes$class('course-author--no-cover')
								]),
							_List_fromArray(
								[
									A2(
									elm$html$Html$h3,
									_List_Nil,
									_List_fromArray(
										[
											elm$html$Html$text(
											'by ' + ((str_a === '') ? 'annonymous' : str_a))
										]))
								]));
					} else {
						var str_a = _n0.a;
						var str_l = _n0.b;
						return A2(
							elm$html$Html$div,
							_List_fromArray(
								[
									elm$html$Html$Attributes$class('course-cover'),
									A2(elm$html$Html$Attributes$style, 'background', 'url(\'' + (str_l + '\')')),
									A2(elm$html$Html$Attributes$style, 'background-size', 'cover')
								]),
							_List_fromArray(
								[
									A2(
									elm$html$Html$div,
									_List_fromArray(
										[
											elm$html$Html$Attributes$class('course-author')
										]),
									_List_fromArray(
										[
											A2(
											elm$html$Html$h3,
											_List_Nil,
											_List_fromArray(
												[
													elm$html$Html$text('by ' + str_a)
												]))
										]))
								]));
					}
				}()
				]));
	});
var elm$html$Html$li = _VirtualDom_node('li');
var elm$html$Html$ul = _VirtualDom_node('ul');
var author$project$Index$View$viewVersions = function (course) {
	return A2(
		elm$html$Html$div,
		_List_fromArray(
			[
				elm$html$Html$Attributes$class('course-tags')
			]),
		elm$core$List$singleton(
			A2(
				elm$html$Html$ul,
				_List_Nil,
				A2(
					elm$core$List$map,
					A2(
						elm$core$Basics$composeR,
						elm$core$Basics$append('V.'),
						A2(
							elm$core$Basics$composeR,
							elm$html$Html$text,
							A2(
								elm$core$Basics$composeR,
								elm$core$List$singleton,
								A2(
									elm$core$Basics$composeR,
									elm$html$Html$a(_List_Nil),
									A2(
										elm$core$Basics$composeR,
										elm$core$List$singleton,
										elm$html$Html$li(_List_Nil)))))),
					elm$core$Dict$keys(course.versions)))));
};
var elm$html$Html$p = _VirtualDom_node('p');
var elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 'Normal', a: a};
};
var elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			elm$virtual_dom$VirtualDom$on,
			event,
			elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var elm$html$Html$Events$onClick = function (msg) {
	return A2(
		elm$html$Html$Events$on,
		'click',
		elm$json$Json$Decode$succeed(msg));
};
var author$project$Index$View$viewCard = function (course) {
	var _n0 = author$project$Index$View$get_active(course);
	if (_n0.$ === 'Just') {
		var title = _n0.a.title;
		var definition = _n0.a.definition;
		return A2(
			elm$html$Html$div,
			_List_fromArray(
				[
					elm$html$Html$Attributes$class('course-container')
				]),
			_List_fromArray(
				[
					A2(author$project$Index$View$viewHeader, definition.author, definition.logo),
					A2(
					elm$html$Html$div,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('course-body')
						]),
					_List_fromArray(
						[
							A2(
							elm$html$Html$div,
							_List_fromArray(
								[
									elm$html$Html$Attributes$class('course-title')
								]),
							_List_fromArray(
								[
									A2(
									elm$html$Html$h1,
									_List_Nil,
									author$project$Index$View$inlines(title))
								])),
							A2(
							elm$html$Html$div,
							_List_fromArray(
								[
									elm$html$Html$Attributes$class('course-summary')
								]),
							_List_fromArray(
								[
									A2(
									elm$html$Html$p,
									_List_Nil,
									author$project$Index$View$inlines(definition.comment))
								])),
							author$project$Index$View$viewVersions(course)
						])),
					A2(
					elm$html$Html$div,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('course-footer')
						]),
					_List_fromArray(
						[
							A2(
							elm$html$Html$ul,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									elm$html$Html$li,
									_List_fromArray(
										[
											elm$html$Html$Attributes$class('published-date')
										]),
									_List_fromArray(
										[
											elm$html$Html$text(course.last_visit)
										])),
									A2(
									elm$html$Html$li,
									_List_fromArray(
										[
											elm$html$Html$Attributes$class('published-date')
										]),
									_List_fromArray(
										[
											A2(
											elm$html$Html$a,
											_List_fromArray(
												[
													elm$html$Html$Events$onClick(
													author$project$Index$Update$Delete(course.id))
												]),
											_List_fromArray(
												[
													elm$html$Html$text('delete')
												]))
										])),
									A2(
									elm$html$Html$li,
									_List_fromArray(
										[
											elm$html$Html$Attributes$class('published-date')
										]),
									_List_fromArray(
										[
											A2(
											elm$html$Html$a,
											_List_Nil,
											_List_fromArray(
												[
													elm$html$Html$text('reset')
												]))
										])),
									A2(
									elm$html$Html$li,
									_List_fromArray(
										[
											elm$html$Html$Attributes$class('published-date')
										]),
									_List_fromArray(
										[
											A2(
											elm$html$Html$a,
											_List_fromArray(
												[
													elm$html$Html$Attributes$href('/?' + course.id)
												]),
											_List_fromArray(
												[
													elm$html$Html$text('open')
												]))
										]))
								]))
						]))
				]));
	} else {
		return elm$html$Html$text('something went wrong');
	}
};
var author$project$Index$View$view = function (model) {
	return A2(
		elm$html$Html$div,
		_List_fromArray(
			[
				A2(elm$html$Html$Attributes$style, 'overflow-y', 'auto'),
				A2(elm$html$Html$Attributes$style, 'height', '100%')
			]),
		A2(
			elm$core$List$cons,
			author$project$Index$View$searchBar(model.input),
			A2(elm$core$List$map, author$project$Index$View$viewCard, model.courses)));
};
var author$project$Lia$Settings$View$design = function (model) {
	return _List_fromArray(
		[
			elm$html$Html$Attributes$class(
			'lia-canvas lia-theme-' + (model.theme + (' lia-variant-' + (model.light ? 'light' : 'dark')))),
			A2(
			elm$html$Html$Attributes$style,
			'font-size',
			elm$core$String$fromInt(model.font_size) + '%')
		]);
};
var author$project$Lia$Definition$Types$get_translations = function (def) {
	return elm$core$Dict$toList(def.translation);
};
var author$project$Lia$Markdown$Effect$View$state = function (model) {
	return (!model.effects) ? '' : (' (' + (elm$core$String$fromInt(model.visible + 1) + ('/' + (elm$core$String$fromInt(model.effects + 1) + ')'))));
};
var author$project$Lia$Markdown$View$Config = F5(
	function (mode, view, section, ace_theme, lang) {
		return {ace_theme: ace_theme, lang: lang, mode: mode, section: section, view: view};
	});
var elm$core$Dict$isEmpty = function (dict) {
	if (dict.$ === 'RBEmpty_elm_builtin') {
		return true;
	} else {
		return false;
	}
};
var author$project$Lia$Markdown$Footnote$Model$empty = elm$core$Dict$isEmpty;
var author$project$Lia$Markdown$Footnote$Model$toList = elm$core$Dict$toList;
var elm$html$Html$td = _VirtualDom_node('td');
var elm$html$Html$tr = _VirtualDom_node('tr');
var author$project$Lia$Markdown$Footnote$View$definition = F2(
	function (fn, _n0) {
		var key = _n0.a;
		var val = _n0.b;
		return A2(
			elm$html$Html$tr,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					elm$html$Html$td,
					_List_fromArray(
						[
							A2(elm$html$Html$Attributes$attribute, 'valign', 'top'),
							A2(elm$html$Html$Attributes$style, 'padding-right', '10px')
						]),
					_List_fromArray(
						[
							A2(
							elm$html$Html$p,
							_List_Nil,
							_List_fromArray(
								[
									author$project$Lia$Markdown$Footnote$View$braces(key)
								]))
						])),
					A2(
					elm$html$Html$td,
					_List_fromArray(
						[
							A2(elm$html$Html$Attributes$attribute, 'valign', 'top')
						]),
					A2(elm$core$List$map, fn, val))
				]));
	});
var elm$html$Html$table = _VirtualDom_node('table');
var elm$html$Html$Attributes$align = elm$html$Html$Attributes$stringProperty('align');
var author$project$Lia$Markdown$Footnote$View$block = F2(
	function (fn, model) {
		if (author$project$Lia$Markdown$Footnote$Model$empty(model)) {
			return elm$html$Html$text('');
		} else {
			var def = author$project$Lia$Markdown$Footnote$View$definition(fn);
			return A2(
				elm$html$Html$table,
				_List_fromArray(
					[
						A2(elm$html$Html$Attributes$style, 'padding', '-10px'),
						A2(elm$html$Html$Attributes$style, 'border-top', '2px solid black'),
						A2(elm$html$Html$Attributes$style, '-ms-transform', 'scale(0.8, 0.8)'),
						A2(elm$html$Html$Attributes$style, '-ms-transform-origin', '0 50%'),
						A2(elm$html$Html$Attributes$style, '-webkit-transform', 'scale(0.8, 0.8)'),
						A2(elm$html$Html$Attributes$style, '-webkit-transform-origin-x', '0'),
						A2(elm$html$Html$Attributes$style, 'transform', 'scale(0.8, 0.8)'),
						A2(elm$html$Html$Attributes$style, 'transform-origin', '0 50%'),
						elm$html$Html$Attributes$align('left')
					]),
				A2(
					elm$core$List$map,
					def,
					author$project$Lia$Markdown$Footnote$Model$toList(model)));
		}
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$vectorEffect = A2(elm$html$Html$Attributes$attribute, 'vector-effect', 'none');
var elm$svg$Svg$trustedNode = _VirtualDom_nodeNS('http://www.w3.org/2000/svg');
var elm$svg$Svg$marker = elm$svg$Svg$trustedNode('marker');
var elm$svg$Svg$path = elm$svg$Svg$trustedNode('path');
var elm$svg$Svg$Attributes$d = _VirtualDom_attribute('d');
var elm$svg$Svg$Attributes$id = _VirtualDom_attribute('id');
var elm$svg$Svg$Attributes$markerHeight = _VirtualDom_attribute('markerHeight');
var elm$svg$Svg$Attributes$markerUnits = _VirtualDom_attribute('markerUnits');
var elm$svg$Svg$Attributes$markerWidth = _VirtualDom_attribute('markerWidth');
var elm$svg$Svg$Attributes$orient = _VirtualDom_attribute('orient');
var elm$svg$Svg$Attributes$refX = _VirtualDom_attribute('refX');
var elm$svg$Svg$Attributes$refY = _VirtualDom_attribute('refY');
var elm$svg$Svg$Attributes$viewBox = _VirtualDom_attribute('viewBox');
var andre_dietrich$elm_svgbob$SvgBob$Grid$arrowMarker = A2(
	elm$svg$Svg$marker,
	_List_fromArray(
		[
			elm$svg$Svg$Attributes$id('triangle'),
			elm$svg$Svg$Attributes$viewBox('0 0 14 14'),
			elm$svg$Svg$Attributes$refX('0'),
			elm$svg$Svg$Attributes$refY('5'),
			elm$svg$Svg$Attributes$markerUnits('strokeWidth'),
			elm$svg$Svg$Attributes$markerWidth('10'),
			elm$svg$Svg$Attributes$markerHeight('10'),
			elm$svg$Svg$Attributes$orient('auto')
		]),
	_List_fromArray(
		[
			A2(
			elm$svg$Svg$path,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$d('M 0 0 L 10 5 L 0 10 z'),
					andre_dietrich$elm_svgbob$SvgBob$Grid$vectorEffect
				]),
			_List_Nil)
		]));
var avh4$elm_color$Color$toRgba = function (_n0) {
	var r = _n0.a;
	var g = _n0.b;
	var b = _n0.c;
	var a = _n0.d;
	return {alpha: a, blue: b, green: g, red: r};
};
var elm$core$String$fromFloat = _String_fromNumber;
var andre_dietrich$elm_svgbob$SvgBob$Grid$colorText = function (color) {
	var _n0 = avh4$elm_color$Color$toRgba(color);
	var red = _n0.red;
	var green = _n0.green;
	var blue = _n0.blue;
	var alpha = _n0.alpha;
	return 'rgb(' + (elm$core$String$fromFloat(red) + (',' + (elm$core$String$fromFloat(green) + (',' + (elm$core$String$fromFloat(blue) + ')')))));
};
var andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth = 8.0;
var andre_dietrich$elm_svgbob$SvgBob$Grid$measureX = function (x) {
	return x * andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
};
var andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight = 16.0;
var andre_dietrich$elm_svgbob$SvgBob$Grid$measureY = function (y) {
	return y * andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
};
var elm$svg$Svg$line = elm$svg$Svg$trustedNode('line');
var elm$svg$Svg$Attributes$markerEnd = _VirtualDom_attribute('marker-end');
var elm$svg$Svg$Attributes$style = _VirtualDom_attribute('style');
var elm$svg$Svg$Attributes$x1 = _VirtualDom_attribute('x1');
var elm$svg$Svg$Attributes$x2 = _VirtualDom_attribute('x2');
var elm$svg$Svg$Attributes$y1 = _VirtualDom_attribute('y1');
var elm$svg$Svg$Attributes$y2 = _VirtualDom_attribute('y2');
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawArrowDown = F3(
	function (x, y, model) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var endY = startY + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var endX = startX;
		return A2(
			elm$svg$Svg$line,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$x1(
					elm$core$String$fromFloat(startX)),
					elm$svg$Svg$Attributes$x2(
					elm$core$String$fromFloat(endX)),
					elm$svg$Svg$Attributes$y1(
					elm$core$String$fromFloat(startY)),
					elm$svg$Svg$Attributes$y2(
					elm$core$String$fromFloat(endY)),
					elm$svg$Svg$Attributes$style(
					'stroke: ' + (andre_dietrich$elm_svgbob$SvgBob$Grid$colorText(model.settings.color) + (';stroke-width:' + elm$core$String$fromFloat(model.settings.lineWidth)))),
					elm$svg$Svg$Attributes$markerEnd('url(#triangle)'),
					andre_dietrich$elm_svgbob$SvgBob$Grid$vectorEffect
				]),
			_List_Nil);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawArrowLeft = F3(
	function (x, y, model) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var endY = startY;
		var endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		return A2(
			elm$svg$Svg$line,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$x1(
					elm$core$String$fromFloat(startX)),
					elm$svg$Svg$Attributes$x2(
					elm$core$String$fromFloat(endX)),
					elm$svg$Svg$Attributes$y1(
					elm$core$String$fromFloat(startY)),
					elm$svg$Svg$Attributes$y2(
					elm$core$String$fromFloat(endY)),
					elm$svg$Svg$Attributes$style(
					'stroke: ' + (andre_dietrich$elm_svgbob$SvgBob$Grid$colorText(model.settings.color) + (';stroke-width:' + elm$core$String$fromFloat(model.settings.lineWidth)))),
					elm$svg$Svg$Attributes$markerEnd('url(#triangle)'),
					andre_dietrich$elm_svgbob$SvgBob$Grid$vectorEffect
				]),
			_List_Nil);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawArrowNorthEast = F3(
	function (x, y, model) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		return A2(
			elm$svg$Svg$line,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$x1(
					elm$core$String$fromFloat(startX)),
					elm$svg$Svg$Attributes$x2(
					elm$core$String$fromFloat(endX)),
					elm$svg$Svg$Attributes$y1(
					elm$core$String$fromFloat(startY)),
					elm$svg$Svg$Attributes$y2(
					elm$core$String$fromFloat(endY)),
					elm$svg$Svg$Attributes$style(
					'stroke: ' + (andre_dietrich$elm_svgbob$SvgBob$Grid$colorText(model.settings.color) + (';stroke-width:' + elm$core$String$fromFloat(model.settings.lineWidth)))),
					elm$svg$Svg$Attributes$markerEnd('url(#triangle)'),
					andre_dietrich$elm_svgbob$SvgBob$Grid$vectorEffect
				]),
			_List_Nil);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawArrowNorthWest = F3(
	function (x, y, model) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var endX = startX + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		return A2(
			elm$svg$Svg$line,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$x1(
					elm$core$String$fromFloat(startX)),
					elm$svg$Svg$Attributes$x2(
					elm$core$String$fromFloat(endX)),
					elm$svg$Svg$Attributes$y1(
					elm$core$String$fromFloat(startY)),
					elm$svg$Svg$Attributes$y2(
					elm$core$String$fromFloat(endY)),
					elm$svg$Svg$Attributes$style(
					'stroke: ' + (andre_dietrich$elm_svgbob$SvgBob$Grid$colorText(model.settings.color) + (';stroke-width:' + elm$core$String$fromFloat(model.settings.lineWidth)))),
					elm$svg$Svg$Attributes$markerEnd('url(#triangle)'),
					andre_dietrich$elm_svgbob$SvgBob$Grid$vectorEffect
				]),
			_List_Nil);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawArrowRight = F3(
	function (x, y, model) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var endY = startY;
		var endX = startX + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		return A2(
			elm$svg$Svg$line,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$x1(
					elm$core$String$fromFloat(startX)),
					elm$svg$Svg$Attributes$x2(
					elm$core$String$fromFloat(endX)),
					elm$svg$Svg$Attributes$y1(
					elm$core$String$fromFloat(startY)),
					elm$svg$Svg$Attributes$y2(
					elm$core$String$fromFloat(endY)),
					elm$svg$Svg$Attributes$style(
					'stroke: ' + (andre_dietrich$elm_svgbob$SvgBob$Grid$colorText(model.settings.color) + (';stroke-width:' + elm$core$String$fromFloat(model.settings.lineWidth)))),
					elm$svg$Svg$Attributes$markerEnd('url(#triangle)'),
					andre_dietrich$elm_svgbob$SvgBob$Grid$vectorEffect
				]),
			_List_Nil);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawArrowSouthEast = F3(
	function (x, y, model) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var endY = startY + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var endX = startX + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		return A2(
			elm$svg$Svg$line,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$x1(
					elm$core$String$fromFloat(startX)),
					elm$svg$Svg$Attributes$x2(
					elm$core$String$fromFloat(endX)),
					elm$svg$Svg$Attributes$y1(
					elm$core$String$fromFloat(startY)),
					elm$svg$Svg$Attributes$y2(
					elm$core$String$fromFloat(endY)),
					elm$svg$Svg$Attributes$style(
					'stroke: ' + (andre_dietrich$elm_svgbob$SvgBob$Grid$colorText(model.settings.color) + (';stroke-width:' + elm$core$String$fromFloat(model.settings.lineWidth)))),
					elm$svg$Svg$Attributes$markerEnd('url(#triangle)'),
					andre_dietrich$elm_svgbob$SvgBob$Grid$vectorEffect
				]),
			_List_Nil);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawArrowSouthWest = F3(
	function (x, y, model) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var endY = startY + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var endX = startX - (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		return A2(
			elm$svg$Svg$line,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$x1(
					elm$core$String$fromFloat(startX)),
					elm$svg$Svg$Attributes$x2(
					elm$core$String$fromFloat(endX)),
					elm$svg$Svg$Attributes$y1(
					elm$core$String$fromFloat(startY)),
					elm$svg$Svg$Attributes$y2(
					elm$core$String$fromFloat(endY)),
					elm$svg$Svg$Attributes$style(
					'stroke: ' + (andre_dietrich$elm_svgbob$SvgBob$Grid$colorText(model.settings.color) + (';stroke-width:' + elm$core$String$fromFloat(model.settings.lineWidth)))),
					elm$svg$Svg$Attributes$markerEnd('url(#triangle)'),
					andre_dietrich$elm_svgbob$SvgBob$Grid$vectorEffect
				]),
			_List_Nil);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawArrowUp = F3(
	function (x, y, model) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var endX = startX;
		return A2(
			elm$svg$Svg$line,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$x1(
					elm$core$String$fromFloat(startX)),
					elm$svg$Svg$Attributes$x2(
					elm$core$String$fromFloat(endX)),
					elm$svg$Svg$Attributes$y1(
					elm$core$String$fromFloat(startY)),
					elm$svg$Svg$Attributes$y2(
					elm$core$String$fromFloat(endY)),
					elm$svg$Svg$Attributes$style(
					'stroke: ' + (andre_dietrich$elm_svgbob$SvgBob$Grid$colorText(model.settings.color) + (';stroke-width:' + elm$core$String$fromFloat(model.settings.lineWidth)))),
					elm$svg$Svg$Attributes$markerEnd('url(#triangle)'),
					andre_dietrich$elm_svgbob$SvgBob$Grid$vectorEffect
				]),
			_List_Nil);
	});
var elm$svg$Svg$Attributes$fill = _VirtualDom_attribute('fill');
var elm$svg$Svg$Attributes$stroke = _VirtualDom_attribute('stroke');
var elm$svg$Svg$Attributes$strokeWidth = _VirtualDom_attribute('stroke-width');
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc = F6(
	function (startX, startY, endX, endY, radius, s) {
		var ry = radius;
		var rx = radius;
		var paths = A2(
			elm$core$String$join,
			' ',
			_List_fromArray(
				[
					'M',
					elm$core$String$fromFloat(startX),
					elm$core$String$fromFloat(startY),
					'A',
					elm$core$String$fromFloat(rx),
					elm$core$String$fromFloat(ry),
					'0',
					'0',
					'0',
					elm$core$String$fromFloat(endX),
					elm$core$String$fromFloat(endY)
				]));
		return A2(
			elm$svg$Svg$path,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$d(paths),
					elm$svg$Svg$Attributes$stroke('black'),
					elm$svg$Svg$Attributes$strokeWidth(
					elm$core$String$fromFloat(s.lineWidth)),
					elm$svg$Svg$Attributes$fill('transparent'),
					andre_dietrich$elm_svgbob$SvgBob$Grid$vectorEffect
				]),
			_List_Nil);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawBigCloseCurve = F3(
	function (x, y, model) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, startX, startY, endX, endY, model.settings.arcRadius * 4, model.settings)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawBigOpenCurve = F3(
	function (x, y, model) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, startX, startY, endX, endY, model.settings.arcRadius * 4, model.settings)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawCloseCurve = F3(
	function (x, y, model) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var radius = andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, startX, startY, endX, endY, radius, model.settings)
			]);
	});
var elm$svg$Svg$Attributes$strokeLinecap = _VirtualDom_attribute('stroke-linecap');
var elm$svg$Svg$Attributes$strokeLinejoin = _VirtualDom_attribute('stroke-linejoin');
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine = F5(
	function (startX, startY, endX, endY, s) {
		return A2(
			elm$svg$Svg$line,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$x1(
					elm$core$String$fromFloat(startX)),
					elm$svg$Svg$Attributes$x2(
					elm$core$String$fromFloat(endX)),
					elm$svg$Svg$Attributes$y1(
					elm$core$String$fromFloat(startY)),
					elm$svg$Svg$Attributes$y2(
					elm$core$String$fromFloat(endY)),
					elm$svg$Svg$Attributes$stroke(
					andre_dietrich$elm_svgbob$SvgBob$Grid$colorText(s.color)),
					elm$svg$Svg$Attributes$strokeWidth(
					elm$core$String$fromFloat(s.lineWidth)),
					elm$svg$Svg$Attributes$strokeLinecap('round'),
					elm$svg$Svg$Attributes$strokeLinejoin('mitter'),
					andre_dietrich$elm_svgbob$SvgBob$Grid$vectorEffect
				]),
			_List_Nil);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawHorizontalLine = F3(
	function (x, y, model) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var endY = startY;
		var endX = startX + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		return A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, startX, startY, endX, endY, model.settings);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawIntersection = F4(
	function (x, y, itype, model) {
		var v2startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var v2startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var v2endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var v2endX = v2startX;
		var v2Line = A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, v2startX, v2startY, v2endX, v2endY, model.settings);
		var v1startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var v1startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var v1endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var v1endX = v1startX;
		var v1Line = A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, v1startX, v1startY, v1endX, v1endY, model.settings);
		var h2startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var h2startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var h2endY = h2startY;
		var h2endX = h2startX + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var h2Line = A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, h2startX, h2startY, h2endX, h2endY, model.settings);
		var h1startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var h1startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var h1endY = h1startY;
		var h1endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var h1Line = A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, h1startX, h1startY, h1endX, h1endY, model.settings);
		switch (itype.$) {
			case 'VertJunctionLeft':
				return _List_fromArray(
					[v1Line, v2Line, h1Line]);
			case 'VertJunctionRight':
				return _List_fromArray(
					[v1Line, v2Line, h2Line]);
			case 'HorJunctionTop':
				return _List_fromArray(
					[h1Line, h2Line, v1Line]);
			case 'HorJunctionBot':
				return _List_fromArray(
					[h1Line, h2Line, v2Line]);
			case 'TopLeft':
				return _List_fromArray(
					[h2Line, v2Line]);
			case 'TopRight':
				return _List_fromArray(
					[h1Line, v2Line]);
			case 'BottomLeft':
				return _List_fromArray(
					[v1Line, h2Line]);
			case 'BottomRight':
				return _List_fromArray(
					[v1Line, h1Line]);
			default:
				return _List_fromArray(
					[v1Line, v2Line, h1Line, h2Line]);
		}
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawLowHorizontalExtendLeft = F3(
	function (x, y, model) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) - andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var endY = startY;
		var endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		return A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, startX, startY, endX, endY, model.settings);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawLowHorizontalExtendRight = F3(
	function (x, y, model) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var endY = startY;
		var endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth * 2);
		return A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, startX, startY, endX, endY, model.settings);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawLowHorizontalExtendVerticalBottomLeft = F3(
	function (x, y, model) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) - (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var endY = startY;
		var endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		return A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, startX, startY, endX, endY, model.settings);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawLowHorizontalExtendVerticalBottomRight = F3(
	function (x, y, model) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var endY = startY;
		var endX = (andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		return A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, startX, startY, endX, endY, model.settings);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawLowHorizontalExtendVerticalLeft = F3(
	function (x, y, model) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) - (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var endY = startY;
		var endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		return A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, startX, startY, endX, endY, model.settings);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawLowHorizontalExtendVerticalRight = F3(
	function (x, y, model) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var endY = startY;
		var endX = (andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		return A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, startX, startY, endX, endY, model.settings);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawLowHorizontalLine = F3(
	function (x, y, model) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var endY = startY;
		var endX = startX + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		return A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, startX, startY, endX, endY, model.settings);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawOpenCurve = F3(
	function (x, y, model) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, startX, startY, endX, endY, model.settings.arcRadius * 4, model.settings)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawBottomLeftBigCurve = F3(
	function (x, y, s) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) - (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, startX, startY, endX, endY, s.arcRadius * 4, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawBottomRightBigCurve = F3(
	function (x, y, s) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var endX = (andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, startX, startY, endX, endY, s.arcRadius * 4, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundBottomLeftCorner = F3(
	function (x, y, s) {
		var startY = (andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2)) - (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, startX, startY, endX, endY, s.arcRadius, s),
				A5(
				andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine,
				startX,
				startY,
				startX,
				andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y),
				s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundBottomLeftLowHorizontalCorner = F3(
	function (x, y, s) {
		var startY = (andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight) - (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, startX, startY, endX, endY, s.arcRadius, s),
				A5(
				andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine,
				startX,
				startY,
				startX,
				andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y),
				s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundBottomLeftSlantedBottomRightCorner = F3(
	function (x, y, s) {
		var lstartY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var lstartX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var lendY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 1) / 4);
		var lendX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var l2startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var l2startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var l2endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 3) / 4);
		var l2endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth * 3) / 4);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, lendX, lendY, l2endX, l2endY, s.arcRadius * 4, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, lstartX, lstartY, lendX, lendY, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, l2startX, l2startY, l2endX, l2endY, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundBottomLeftSlantedTopLeftCorner = F3(
	function (x, y, s) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var lstartY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var lstartX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var lendY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 1) / 4);
		var lendX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth * 1) / 4);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, lendX, lendY, startX, startY, s.arcRadius * 2, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, lstartX, lstartY, lendX, lendY, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundBottomLeftSlantedTopRightCorner = F3(
	function (x, y, s) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var lstartY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var lstartX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var lendY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 1) / 4);
		var lendX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth * 3) / 4);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, lendX, lendY, startX, startY, (s.arcRadius * 3) / 4, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, lstartX, lstartY, lendX, lendY, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundBottomLeftSlantedTopRightLowHorizontal = F3(
	function (x, y, s) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var lstartY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var lstartX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var lendY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var lendX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, lendX, lendY, startX, startY, s.arcRadius * 1.5, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, lstartX, lstartY, lendX, lendY, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundBottomRightCorner = F3(
	function (x, y, s) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var endY = (andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2)) - (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, startX, startY, endX, endY, s.arcRadius, s),
				A5(
				andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine,
				endX,
				endY,
				endX,
				andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y),
				s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundBottomRightLowHorizontalCorner = F3(
	function (x, y, s) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var endY = (andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight) - (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, startX, startY, endX, endY, s.arcRadius, s),
				A5(
				andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine,
				endX,
				endY,
				endX,
				andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y),
				s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundBottomRightSlantedBottomLeft = F3(
	function (x, y, s) {
		var lstartY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var lstartX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var lendY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 1) / 4);
		var lendX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var l2startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var l2startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var l2endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 3) / 4);
		var l2endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth * 1) / 4);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, l2endX, l2endY, lendX, lendY, s.arcRadius * 4, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, lstartX, lstartY, lendX, lendY, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, l2startX, l2startY, l2endX, l2endY, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundBottomRightSlantedTopLeftCorner = F3(
	function (x, y, s) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var lstartY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var lstartX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var lendY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 1) / 4);
		var lendX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth * 1) / 4);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, startX, startY, lendX, lendY, (s.arcRadius * 3) / 4, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, lstartX, lstartY, lendX, lendY, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundBottomRightSlantedTopLeftLowHorizontal = F3(
	function (x, y, s) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var lstartY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var lstartX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var lendY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var lendX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, startX, startY, lendX, lendY, s.arcRadius * 1.5, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, lstartX, lstartY, lendX, lendY, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundBottomRightSlantedTopRightCorner = F3(
	function (x, y, s) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var lstartY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var lstartX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var lendY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 1) / 4);
		var lendX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth * 3) / 4);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, startX, startY, lendX, lendY, s.arcRadius * 2, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, lstartX, lstartY, lendX, lendY, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundSlantedLeftJunctionLeft = F3(
	function (x, y, s) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 3) / 4);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth * 3) / 4);
		var lstartY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var lstartX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var lendY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var lendX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, startX, startY, endX, endY, s.arcRadius * 2, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, lstartX, lstartY, lendX, lendY, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundSlantedLeftJunctionRight = F3(
	function (x, y, s) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 1) / 4);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth * 1) / 4);
		var lstartY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var lstartX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var lendY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var lendX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, startX, startY, endX, endY, s.arcRadius * 2, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, lstartX, lstartY, lendX, lendY, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundSlantedRightJunctionLeft = F3(
	function (x, y, s) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var lstartY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var lstartX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var lendY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var lendX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 1) / 4);
		var endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth * 3) / 4);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, startX, startY, endX, endY, s.arcRadius * 2, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, lstartX, lstartY, lendX, lendY, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundSlantedRightJunctionRight = F3(
	function (x, y, s) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var lstartY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var lstartX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var lendY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var lendX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 3) / 4);
		var endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth * 1) / 4);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, startX, startY, endX, endY, s.arcRadius * 2, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, lstartX, lstartY, lendX, lendY, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundTopLeftCorner = F3(
	function (x, y, s) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var endY = (andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2)) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, startX, startY, endX, endY, s.arcRadius, s),
				A5(
				andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine,
				endX,
				endY,
				endX,
				andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight,
				s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundTopLeftSlantedBottomLeftCorner = F3(
	function (x, y, s) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var lstartY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var lstartX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var lendY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 3) / 4);
		var lendX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth * 1) / 4);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, startX, startY, lendX, lendY, s.arcRadius * 2, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, lstartX, lstartY, lendX, lendY, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundTopLeftSlantedBottomRightCorner = F3(
	function (x, y, s) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var lstartY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var lstartX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var lendY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 3) / 4);
		var lendX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth * 3) / 4);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, startX, startY, lendX, lendY, (s.arcRadius * 3) / 4, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, lstartX, lstartY, lendX, lendY, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundTopLeftSlantedTopRightCorner = F3(
	function (x, y, s) {
		var lstartY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var lstartX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var lendY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 1) / 4);
		var lendX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth * 3) / 4);
		var l2startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var l2startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var l2endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 3) / 4);
		var l2endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, lendX, lendY, l2endX, l2endY, s.arcRadius * 4, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, lstartX, lstartY, lendX, lendY, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, l2startX, l2startY, l2endX, l2endY, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundTopRightCorner = F3(
	function (x, y, s) {
		var startY = (andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2)) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, startX, startY, endX, endY, s.arcRadius, s),
				A5(
				andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine,
				startX,
				startY,
				startX,
				andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight,
				s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundTopRightSlantedBottomLeft = F3(
	function (x, y, s) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var lstartY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var lstartX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var lendY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 3) / 4);
		var lendX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth * 1) / 4);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, lendX, lendY, startX, startY, (s.arcRadius * 3) / 4, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, lstartX, lstartY, lendX, lendY, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundTopRightSlantedBottomRight = F3(
	function (x, y, s) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var lstartY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var lstartX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var lendY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 3) / 4);
		var lendX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth * 3) / 4);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, lendX, lendY, startX, startY, s.arcRadius * 2, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, lstartX, lstartY, lendX, lendY, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundTopRightSlantedTopLeft = F3(
	function (x, y, s) {
		var lstartY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var lstartX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var lendY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 3) / 4);
		var lendX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var l2startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var l2startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var l2endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 1) / 4);
		var l2endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth * 1) / 4);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, lendX, lendY, l2endX, l2endY, s.arcRadius * 4, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, lstartX, lstartY, lendX, lendY, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, l2startX, l2startY, l2endX, l2endY, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawTopLeftBigCurve = F3(
	function (x, y, s) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) - (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, startX, startY, endX, endY, s.arcRadius * 4, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawTopRightBigCurve = F3(
	function (x, y, s) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var startX = (andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
		var endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, startX, startY, endX, endY, s.arcRadius * 4, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawVerticalTopDownJunctionBottomLeft = F3(
	function (x, y, s) {
		var lstartY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var lstartX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var lendY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 1) / 4);
		var lendX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var l3startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var l3startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var l3endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var l3endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var l2startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var l2startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var l2endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 3) / 4);
		var l2endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth * 1) / 4);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, l2endX, l2endY, lendX, lendY, s.arcRadius * 4, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, lstartX, lstartY, lendX, lendY, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, l2startX, l2startY, l2endX, l2endY, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, l3startX, l3startY, l3endX, l3endY, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawVerticalTopDownJunctionBottomRight = F3(
	function (x, y, s) {
		var lstartY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var lstartX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var lendY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 1) / 4);
		var lendX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var l3startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var l3startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var l3endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var l3endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var l2startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var l2startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var l2endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 3) / 4);
		var l2endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth * 3) / 4);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, lendX, lendY, l2endX, l2endY, s.arcRadius * 4, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, lstartX, lstartY, lendX, lendY, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, l2startX, l2startY, l2endX, l2endY, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, l3startX, l3startY, l3endX, l3endY, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawVerticalTopDownJunctionTopLeft = F3(
	function (x, y, s) {
		var lstartY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var lstartX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var lendY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 3) / 4);
		var lendX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var l3startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var l3startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var l3endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var l3endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var l2startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var l2startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var l2endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 1) / 4);
		var l2endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth * 1) / 4);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, lendX, lendY, l2endX, l2endY, s.arcRadius * 4, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, lstartX, lstartY, lendX, lendY, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, l2startX, l2startY, l2endX, l2endY, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, l3startX, l3startY, l3endX, l3endY, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawVerticalTopDownJunctionTopRight = F3(
	function (x, y, s) {
		var lstartY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var lstartX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		var lendY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 1) / 4);
		var lendX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth * 3) / 4);
		var l3startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var l3startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var l3endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var l3endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var l2startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var l2startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var l2endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 3) / 4);
		var l2endX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		return _List_fromArray(
			[
				A6(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, lendX, lendY, l2endX, l2endY, s.arcRadius * 4, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, lstartX, lstartY, lendX, lendY, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, l2startX, l2startY, l2endX, l2endY, s),
				A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, l3startX, l3startY, l3endX, l3endY, s)
			]);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundCorner = F4(
	function (x, y, pos, model) {
		switch (pos.$) {
			case 'TopLeftCorner':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundTopLeftCorner, x, y, model.settings);
			case 'TopRightCorner':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundTopRightCorner, x, y, model.settings);
			case 'BottomLeftCorner':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundBottomLeftCorner, x, y, model.settings);
			case 'BottomRightCorner':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundBottomRightCorner, x, y, model.settings);
			case 'TopLeftSlantedBottomLeft':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundTopLeftSlantedBottomLeftCorner, x, y, model.settings);
			case 'TopLeftSlantedBottomRight':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundTopLeftSlantedBottomRightCorner, x, y, model.settings);
			case 'TopRightSlantedBottomRight':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundTopRightSlantedBottomRight, x, y, model.settings);
			case 'TopRightSlantedBottomLeft':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundTopRightSlantedBottomLeft, x, y, model.settings);
			case 'TopRightSlantedTopLeft':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundTopRightSlantedTopLeft, x, y, model.settings);
			case 'VerticalTopDownJunctionTopLeft':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawVerticalTopDownJunctionTopLeft, x, y, model.settings);
			case 'SlantedRightJunctionRight':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundSlantedRightJunctionRight, x, y, model.settings);
			case 'SlantedLeftJunctionLeft':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundSlantedLeftJunctionLeft, x, y, model.settings);
			case 'SlantedRightJunctionLeft':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundSlantedRightJunctionLeft, x, y, model.settings);
			case 'SlantedLeftJunctionRight':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundSlantedLeftJunctionRight, x, y, model.settings);
			case 'BottomLeftLowHorizontal':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundBottomLeftLowHorizontalCorner, x, y, model.settings);
			case 'BottomRightLowHorizontal':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundBottomRightLowHorizontalCorner, x, y, model.settings);
			case 'BottomLeftSlantedTopLeft':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundBottomLeftSlantedTopLeftCorner, x, y, model.settings);
			case 'BottomLeftSlantedTopRight':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundBottomLeftSlantedTopRightCorner, x, y, model.settings);
			case 'BottomLeftSlantedBottomRight':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundBottomLeftSlantedBottomRightCorner, x, y, model.settings);
			case 'BottomLeftSlantedTopRightLowHorizontal':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundBottomLeftSlantedTopRightLowHorizontal, x, y, model.settings);
			case 'BottomRightSlantedTopRight':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundBottomRightSlantedTopRightCorner, x, y, model.settings);
			case 'BottomRightSlantedTopLeftLowHorizontal':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundBottomRightSlantedTopLeftLowHorizontal, x, y, model.settings);
			case 'BottomRightSlantedTopLeft':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundBottomRightSlantedTopLeftCorner, x, y, model.settings);
			case 'BottomRightSlantedBottomLeft':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundBottomRightSlantedBottomLeft, x, y, model.settings);
			case 'VerticalTopDownJunctionBottomLeft':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawVerticalTopDownJunctionBottomLeft, x, y, model.settings);
			case 'VerticalTopDownJunctionBottomRight':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawVerticalTopDownJunctionBottomRight, x, y, model.settings);
			case 'TopLeftSlantedTopRight':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundTopLeftSlantedTopRightCorner, x, y, model.settings);
			case 'VerticalTopDownJunctionTopRight':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawVerticalTopDownJunctionTopRight, x, y, model.settings);
			case 'TopLeftBigCurve':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawTopLeftBigCurve, x, y, model.settings);
			case 'TopRightBigCurve':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawTopRightBigCurve, x, y, model.settings);
			case 'BottomLeftBigCurve':
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawBottomLeftBigCurve, x, y, model.settings);
			default:
				return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawBottomRightBigCurve, x, y, model.settings);
		}
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawSlantLeftLine = F3(
	function (x, y, model) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var endX = startX + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		return A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, startX, startY, endX, endY, model.settings);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawSlantRightLine = F3(
	function (x, y, model) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x);
		var endY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var endX = startX + andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
		return A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, startX, startY, endX, endY, model.settings);
	});
var elm$virtual_dom$VirtualDom$nodeNS = function (tag) {
	return _VirtualDom_nodeNS(
		_VirtualDom_noScript(tag));
};
var elm$svg$Svg$node = elm$virtual_dom$VirtualDom$nodeNS('http://www.w3.org/2000/svg');
var elm$svg$Svg$text = elm$virtual_dom$VirtualDom$text;
var elm$svg$Svg$Attributes$x = _VirtualDom_attribute('x');
var elm$svg$Svg$Attributes$y = _VirtualDom_attribute('y');
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawText = F4(
	function (x_, y_, _char, s) {
		var y__ = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y_) + ((andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight * 3) / 4);
		var x__ = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x_) - (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 4);
		return A3(
			elm$svg$Svg$node,
			'text',
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$x(
					elm$core$String$fromFloat(x__)),
					elm$svg$Svg$Attributes$y(
					elm$core$String$fromFloat(y__)),
					elm$svg$Svg$Attributes$style(
					'font-size:' + (elm$core$String$fromFloat(s.fontSize) + 'px;font-family:monospace'))
				]),
			_List_fromArray(
				[
					elm$svg$Svg$text(
					elm$core$String$fromChar(_char))
				]));
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawVerticalLine = F3(
	function (x, y, model) {
		var startY = andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y);
		var startX = andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + (andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2);
		var endY = startY + andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
		var endX = startX;
		return A5(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, startX, startY, endX, endY, model.settings);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$get = F3(
	function (x, y, model) {
		var row = y;
		var line = A2(elm$core$Array$get, y, model.lines);
		var _char = function () {
			if (line.$ === 'Just') {
				var l = line.a;
				return A2(elm$core$Array$get, x, l);
			} else {
				return elm$core$Maybe$Nothing;
			}
		}();
		return _char;
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$bottomLeftOf = F3(
	function (x, y, model) {
		return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$get, x - 1, y + 1, model);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$bottomOf = F3(
	function (x, y, model) {
		return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$get, x, y + 1, model);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$bottomRightOf = F3(
	function (x, y, model) {
		return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$get, x + 1, y + 1, model);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$isAlphaNumeric = function (_char) {
	return elm$core$Char$isDigit(_char) || (elm$core$Char$isUpper(_char) || elm$core$Char$isLower(_char));
};
var andre_dietrich$elm_svgbob$SvgBob$Grid$arrowDown = _List_fromArray(
	[
		_Utils_chr('V'),
		_Utils_chr('v')
	]);
var andre_dietrich$elm_svgbob$SvgBob$Grid$isArrowDown = function (_char) {
	return A2(elm$core$List$member, _char, andre_dietrich$elm_svgbob$SvgBob$Grid$arrowDown);
};
var andre_dietrich$elm_svgbob$SvgBob$Grid$arrowLeft = _List_fromArray(
	[
		_Utils_chr('<')
	]);
var andre_dietrich$elm_svgbob$SvgBob$Grid$isArrowLeft = function (_char) {
	return A2(elm$core$List$member, _char, andre_dietrich$elm_svgbob$SvgBob$Grid$arrowLeft);
};
var andre_dietrich$elm_svgbob$SvgBob$Grid$arrowRight = _List_fromArray(
	[
		_Utils_chr('>')
	]);
var andre_dietrich$elm_svgbob$SvgBob$Grid$isArrowRight = function (_char) {
	return A2(elm$core$List$member, _char, andre_dietrich$elm_svgbob$SvgBob$Grid$arrowRight);
};
var andre_dietrich$elm_svgbob$SvgBob$Grid$arrowUp = _List_fromArray(
	[
		_Utils_chr('^'),
		_Utils_chr('î')
	]);
var andre_dietrich$elm_svgbob$SvgBob$Grid$isArrowUp = function (_char) {
	return A2(elm$core$List$member, _char, andre_dietrich$elm_svgbob$SvgBob$Grid$arrowUp);
};
var andre_dietrich$elm_svgbob$SvgBob$Grid$closeCurve = _List_fromArray(
	[
		_Utils_chr(')')
	]);
var andre_dietrich$elm_svgbob$SvgBob$Grid$isCloseCurve = function (_char) {
	return A2(elm$core$List$member, _char, andre_dietrich$elm_svgbob$SvgBob$Grid$closeCurve);
};
var andre_dietrich$elm_svgbob$SvgBob$Grid$horizontal = _List_fromArray(
	[
		_Utils_chr('-')
	]);
var andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal = function (_char) {
	return A2(elm$core$List$member, _char, andre_dietrich$elm_svgbob$SvgBob$Grid$horizontal);
};
var andre_dietrich$elm_svgbob$SvgBob$Grid$intersections = _List_fromArray(
	[
		_Utils_chr('+')
	]);
var andre_dietrich$elm_svgbob$SvgBob$Grid$isIntersection = function (_char) {
	return A2(elm$core$List$member, _char, andre_dietrich$elm_svgbob$SvgBob$Grid$intersections);
};
var andre_dietrich$elm_svgbob$SvgBob$Grid$lowHorizontal = _List_fromArray(
	[
		_Utils_chr('_')
	]);
var andre_dietrich$elm_svgbob$SvgBob$Grid$isLowHorizontal = function (_char) {
	return A2(elm$core$List$member, _char, andre_dietrich$elm_svgbob$SvgBob$Grid$lowHorizontal);
};
var andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor = F2(
	function (neighbor, check) {
		if (neighbor.$ === 'Just') {
			var neighbor_ = neighbor.a;
			return check(neighbor_);
		} else {
			return false;
		}
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$openCurve = _List_fromArray(
	[
		_Utils_chr('(')
	]);
var andre_dietrich$elm_svgbob$SvgBob$Grid$isOpenCurve = function (_char) {
	return A2(elm$core$List$member, _char, andre_dietrich$elm_svgbob$SvgBob$Grid$openCurve);
};
var andre_dietrich$elm_svgbob$SvgBob$Grid$roundCorners = _List_fromArray(
	[
		_Utils_chr('.'),
		_Utils_chr('\'')
	]);
var andre_dietrich$elm_svgbob$SvgBob$Grid$isRoundCorner = function (_char) {
	return A2(elm$core$List$member, _char, andre_dietrich$elm_svgbob$SvgBob$Grid$roundCorners);
};
var andre_dietrich$elm_svgbob$SvgBob$Grid$slantLeft = _List_fromArray(
	[
		_Utils_chr('\\')
	]);
var andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantLeft = function (_char) {
	return A2(elm$core$List$member, _char, andre_dietrich$elm_svgbob$SvgBob$Grid$slantLeft);
};
var andre_dietrich$elm_svgbob$SvgBob$Grid$slantRight = _List_fromArray(
	[
		_Utils_chr('/')
	]);
var andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantRight = function (_char) {
	return A2(elm$core$List$member, _char, andre_dietrich$elm_svgbob$SvgBob$Grid$slantRight);
};
var andre_dietrich$elm_svgbob$SvgBob$Grid$vertical = _List_fromArray(
	[
		_Utils_chr('|')
	]);
var andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical = function (_char) {
	return A2(elm$core$List$member, _char, andre_dietrich$elm_svgbob$SvgBob$Grid$vertical);
};
var andre_dietrich$elm_svgbob$SvgBob$Grid$leftOf = F3(
	function (x, y, model) {
		return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$get, x - 1, y, model);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$rightOf = F3(
	function (x, y, model) {
		return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$get, x + 1, y, model);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$topLeftOf = F3(
	function (x, y, model) {
		return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$get, x - 1, y - 1, model);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$topOf = F3(
	function (x, y, model) {
		return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$get, x, y - 1, model);
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$topRightOf = F3(
	function (x, y, model) {
		return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$get, x + 1, y - 1, model);
	});
var andre_dietrich$elm_svgbob$SvgBob$Types$ArrowEast = {$: 'ArrowEast'};
var andre_dietrich$elm_svgbob$SvgBob$Types$ArrowNorth = {$: 'ArrowNorth'};
var andre_dietrich$elm_svgbob$SvgBob$Types$ArrowNorthEast = {$: 'ArrowNorthEast'};
var andre_dietrich$elm_svgbob$SvgBob$Types$ArrowNorthWest = {$: 'ArrowNorthWest'};
var andre_dietrich$elm_svgbob$SvgBob$Types$ArrowSouth = {$: 'ArrowSouth'};
var andre_dietrich$elm_svgbob$SvgBob$Types$ArrowSouthEast = {$: 'ArrowSouthEast'};
var andre_dietrich$elm_svgbob$SvgBob$Types$ArrowSouthWest = {$: 'ArrowSouthWest'};
var andre_dietrich$elm_svgbob$SvgBob$Types$ArrowWest = {$: 'ArrowWest'};
var andre_dietrich$elm_svgbob$SvgBob$Types$BigCloseCurve = {$: 'BigCloseCurve'};
var andre_dietrich$elm_svgbob$SvgBob$Types$BigOpenCurve = {$: 'BigOpenCurve'};
var andre_dietrich$elm_svgbob$SvgBob$Types$BottomLeft = {$: 'BottomLeft'};
var andre_dietrich$elm_svgbob$SvgBob$Types$BottomLeftBigCurve = {$: 'BottomLeftBigCurve'};
var andre_dietrich$elm_svgbob$SvgBob$Types$BottomLeftCorner = {$: 'BottomLeftCorner'};
var andre_dietrich$elm_svgbob$SvgBob$Types$BottomLeftLowHorizontal = {$: 'BottomLeftLowHorizontal'};
var andre_dietrich$elm_svgbob$SvgBob$Types$BottomLeftSlantedBottomRight = {$: 'BottomLeftSlantedBottomRight'};
var andre_dietrich$elm_svgbob$SvgBob$Types$BottomLeftSlantedTopLeft = {$: 'BottomLeftSlantedTopLeft'};
var andre_dietrich$elm_svgbob$SvgBob$Types$BottomLeftSlantedTopRight = {$: 'BottomLeftSlantedTopRight'};
var andre_dietrich$elm_svgbob$SvgBob$Types$BottomLeftSlantedTopRightLowHorizontal = {$: 'BottomLeftSlantedTopRightLowHorizontal'};
var andre_dietrich$elm_svgbob$SvgBob$Types$BottomRight = {$: 'BottomRight'};
var andre_dietrich$elm_svgbob$SvgBob$Types$BottomRightBigCurve = {$: 'BottomRightBigCurve'};
var andre_dietrich$elm_svgbob$SvgBob$Types$BottomRightCorner = {$: 'BottomRightCorner'};
var andre_dietrich$elm_svgbob$SvgBob$Types$BottomRightLowHorizontal = {$: 'BottomRightLowHorizontal'};
var andre_dietrich$elm_svgbob$SvgBob$Types$BottomRightSlantedBottomLeft = {$: 'BottomRightSlantedBottomLeft'};
var andre_dietrich$elm_svgbob$SvgBob$Types$BottomRightSlantedTopLeft = {$: 'BottomRightSlantedTopLeft'};
var andre_dietrich$elm_svgbob$SvgBob$Types$BottomRightSlantedTopLeftLowHorizontal = {$: 'BottomRightSlantedTopLeftLowHorizontal'};
var andre_dietrich$elm_svgbob$SvgBob$Types$BottomRightSlantedTopRight = {$: 'BottomRightSlantedTopRight'};
var andre_dietrich$elm_svgbob$SvgBob$Types$CloseCurve = {$: 'CloseCurve'};
var andre_dietrich$elm_svgbob$SvgBob$Types$Cross = {$: 'Cross'};
var andre_dietrich$elm_svgbob$SvgBob$Types$HorJunctionBot = {$: 'HorJunctionBot'};
var andre_dietrich$elm_svgbob$SvgBob$Types$HorJunctionTop = {$: 'HorJunctionTop'};
var andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal = {$: 'Horizontal'};
var andre_dietrich$elm_svgbob$SvgBob$Types$Intersection = function (a) {
	return {$: 'Intersection', a: a};
};
var andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontal = {$: 'LowHorizontal'};
var andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontalExtendLeft = {$: 'LowHorizontalExtendLeft'};
var andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontalExtendRight = {$: 'LowHorizontalExtendRight'};
var andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontalExtendVerticalBottomLeft = {$: 'LowHorizontalExtendVerticalBottomLeft'};
var andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontalExtendVerticalBottomRight = {$: 'LowHorizontalExtendVerticalBottomRight'};
var andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontalExtendVerticalLeft = {$: 'LowHorizontalExtendVerticalLeft'};
var andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontalExtendVerticalRight = {$: 'LowHorizontalExtendVerticalRight'};
var andre_dietrich$elm_svgbob$SvgBob$Types$OpenCurve = {$: 'OpenCurve'};
var andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner = function (a) {
	return {$: 'RoundCorner', a: a};
};
var andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft = {$: 'SlantLeft'};
var andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight = {$: 'SlantRight'};
var andre_dietrich$elm_svgbob$SvgBob$Types$SlantedLeftJunctionLeft = {$: 'SlantedLeftJunctionLeft'};
var andre_dietrich$elm_svgbob$SvgBob$Types$SlantedLeftJunctionRight = {$: 'SlantedLeftJunctionRight'};
var andre_dietrich$elm_svgbob$SvgBob$Types$SlantedRightJunctionLeft = {$: 'SlantedRightJunctionLeft'};
var andre_dietrich$elm_svgbob$SvgBob$Types$SlantedRightJunctionRight = {$: 'SlantedRightJunctionRight'};
var andre_dietrich$elm_svgbob$SvgBob$Types$Text = function (a) {
	return {$: 'Text', a: a};
};
var andre_dietrich$elm_svgbob$SvgBob$Types$TopLeft = {$: 'TopLeft'};
var andre_dietrich$elm_svgbob$SvgBob$Types$TopLeftBigCurve = {$: 'TopLeftBigCurve'};
var andre_dietrich$elm_svgbob$SvgBob$Types$TopLeftCorner = {$: 'TopLeftCorner'};
var andre_dietrich$elm_svgbob$SvgBob$Types$TopLeftSlantedBottomLeft = {$: 'TopLeftSlantedBottomLeft'};
var andre_dietrich$elm_svgbob$SvgBob$Types$TopLeftSlantedBottomRight = {$: 'TopLeftSlantedBottomRight'};
var andre_dietrich$elm_svgbob$SvgBob$Types$TopLeftSlantedTopRight = {$: 'TopLeftSlantedTopRight'};
var andre_dietrich$elm_svgbob$SvgBob$Types$TopRight = {$: 'TopRight'};
var andre_dietrich$elm_svgbob$SvgBob$Types$TopRightBigCurve = {$: 'TopRightBigCurve'};
var andre_dietrich$elm_svgbob$SvgBob$Types$TopRightCorner = {$: 'TopRightCorner'};
var andre_dietrich$elm_svgbob$SvgBob$Types$TopRightSlantedBottomLeft = {$: 'TopRightSlantedBottomLeft'};
var andre_dietrich$elm_svgbob$SvgBob$Types$TopRightSlantedBottomRight = {$: 'TopRightSlantedBottomRight'};
var andre_dietrich$elm_svgbob$SvgBob$Types$TopRightSlantedTopLeft = {$: 'TopRightSlantedTopLeft'};
var andre_dietrich$elm_svgbob$SvgBob$Types$VertJunctionLeft = {$: 'VertJunctionLeft'};
var andre_dietrich$elm_svgbob$SvgBob$Types$VertJunctionRight = {$: 'VertJunctionRight'};
var andre_dietrich$elm_svgbob$SvgBob$Types$Vertical = {$: 'Vertical'};
var andre_dietrich$elm_svgbob$SvgBob$Types$VerticalTopDownJunctionBottomLeft = {$: 'VerticalTopDownJunctionBottomLeft'};
var andre_dietrich$elm_svgbob$SvgBob$Types$VerticalTopDownJunctionBottomRight = {$: 'VerticalTopDownJunctionBottomRight'};
var andre_dietrich$elm_svgbob$SvgBob$Types$VerticalTopDownJunctionTopLeft = {$: 'VerticalTopDownJunctionTopLeft'};
var andre_dietrich$elm_svgbob$SvgBob$Types$VerticalTopDownJunctionTopRight = {$: 'VerticalTopDownJunctionTopRight'};
var andre_dietrich$elm_svgbob$SvgBob$Grid$getElement = F3(
	function (x, y, model) {
		var topRight = A3(andre_dietrich$elm_svgbob$SvgBob$Grid$topRightOf, x, y, model);
		var topLeft = A3(andre_dietrich$elm_svgbob$SvgBob$Grid$topLeftOf, x, y, model);
		var top = A3(andre_dietrich$elm_svgbob$SvgBob$Grid$topOf, x, y, model);
		var right = A3(andre_dietrich$elm_svgbob$SvgBob$Grid$rightOf, x, y, model);
		var left = A3(andre_dietrich$elm_svgbob$SvgBob$Grid$leftOf, x, y, model);
		var _char = A3(andre_dietrich$elm_svgbob$SvgBob$Grid$get, x, y, model);
		var bottomRight = A3(andre_dietrich$elm_svgbob$SvgBob$Grid$bottomRightOf, x, y, model);
		var bottomLeft = A3(andre_dietrich$elm_svgbob$SvgBob$Grid$bottomLeftOf, x, y, model);
		var bottom = A3(andre_dietrich$elm_svgbob$SvgBob$Grid$bottomOf, x, y, model);
		if (_char.$ === 'Just') {
			var char_ = _char.a;
			if (andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical(char_) && ((!A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isAlphaNumeric)) && (!A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isAlphaNumeric)))) {
				return elm$core$Maybe$Just(andre_dietrich$elm_svgbob$SvgBob$Types$Vertical);
			} else {
				if (andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal(char_) && ((!A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isAlphaNumeric)) && (!A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isAlphaNumeric)))) {
					return elm$core$Maybe$Just(andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal);
				} else {
					if (andre_dietrich$elm_svgbob$SvgBob$Grid$isLowHorizontal(char_) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantRight)) {
						return elm$core$Maybe$Just(andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontalExtendLeft);
					} else {
						if (andre_dietrich$elm_svgbob$SvgBob$Grid$isLowHorizontal(char_) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical)) {
							return elm$core$Maybe$Just(andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontalExtendVerticalLeft);
						} else {
							if (andre_dietrich$elm_svgbob$SvgBob$Grid$isLowHorizontal(char_) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantLeft)) {
								return elm$core$Maybe$Just(andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontalExtendRight);
							} else {
								if (andre_dietrich$elm_svgbob$SvgBob$Grid$isLowHorizontal(char_) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical)) {
									return elm$core$Maybe$Just(andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontalExtendVerticalRight);
								} else {
									if (andre_dietrich$elm_svgbob$SvgBob$Grid$isLowHorizontal(char_) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottomLeft, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical)) {
										return elm$core$Maybe$Just(andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontalExtendVerticalBottomLeft);
									} else {
										if (andre_dietrich$elm_svgbob$SvgBob$Grid$isLowHorizontal(char_) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottomRight, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical)) {
											return elm$core$Maybe$Just(andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontalExtendVerticalBottomRight);
										} else {
											if (andre_dietrich$elm_svgbob$SvgBob$Grid$isLowHorizontal(char_) && ((!A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isAlphaNumeric)) && (!A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isAlphaNumeric)))) {
												return elm$core$Maybe$Just(andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontal);
											} else {
												if (andre_dietrich$elm_svgbob$SvgBob$Grid$isIntersection(char_)) {
													var isVerticalJunctionRight = A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, top, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && (A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottom, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal));
													var isVerticalJunctionLeft = A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, top, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && (A2(
														andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor,
														A3(andre_dietrich$elm_svgbob$SvgBob$Grid$bottomOf, x, y, model),
														andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && A2(
														andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor,
														A3(andre_dietrich$elm_svgbob$SvgBob$Grid$leftOf, x, y, model),
														andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal));
													var isTopRightIntersection = A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottom, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal);
													var isTopLeftIntersection = A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottom, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal);
													var isHorizontalJunctionTop = A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal) && (A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, top, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical));
													var isHorizontalJunctionBot = A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal) && (A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottom, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical));
													var isCrossIntersection = A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, top, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && (A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottom, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && (A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal)));
													var isBottomRightIntersection = A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, top, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal);
													var isBottomLeftIntersection = A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, top, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal);
													return isCrossIntersection ? elm$core$Maybe$Just(
														andre_dietrich$elm_svgbob$SvgBob$Types$Intersection(andre_dietrich$elm_svgbob$SvgBob$Types$Cross)) : (isVerticalJunctionLeft ? elm$core$Maybe$Just(
														andre_dietrich$elm_svgbob$SvgBob$Types$Intersection(andre_dietrich$elm_svgbob$SvgBob$Types$VertJunctionLeft)) : (isVerticalJunctionRight ? elm$core$Maybe$Just(
														andre_dietrich$elm_svgbob$SvgBob$Types$Intersection(andre_dietrich$elm_svgbob$SvgBob$Types$VertJunctionRight)) : (isHorizontalJunctionTop ? elm$core$Maybe$Just(
														andre_dietrich$elm_svgbob$SvgBob$Types$Intersection(andre_dietrich$elm_svgbob$SvgBob$Types$HorJunctionTop)) : (isHorizontalJunctionBot ? elm$core$Maybe$Just(
														andre_dietrich$elm_svgbob$SvgBob$Types$Intersection(andre_dietrich$elm_svgbob$SvgBob$Types$HorJunctionBot)) : (isTopRightIntersection ? elm$core$Maybe$Just(
														andre_dietrich$elm_svgbob$SvgBob$Types$Intersection(andre_dietrich$elm_svgbob$SvgBob$Types$TopRight)) : (isTopLeftIntersection ? elm$core$Maybe$Just(
														andre_dietrich$elm_svgbob$SvgBob$Types$Intersection(andre_dietrich$elm_svgbob$SvgBob$Types$TopLeft)) : (isBottomRightIntersection ? elm$core$Maybe$Just(
														andre_dietrich$elm_svgbob$SvgBob$Types$Intersection(andre_dietrich$elm_svgbob$SvgBob$Types$BottomRight)) : (isBottomLeftIntersection ? elm$core$Maybe$Just(
														andre_dietrich$elm_svgbob$SvgBob$Types$Intersection(andre_dietrich$elm_svgbob$SvgBob$Types$BottomLeft)) : elm$core$Maybe$Nothing))))))));
												} else {
													if (andre_dietrich$elm_svgbob$SvgBob$Grid$isRoundCorner(char_)) {
														return (A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, topRight, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantRight) && (A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottomLeft, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantRight) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal))) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$SlantedRightJunctionRight)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, top, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && (A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottom, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, topLeft, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantLeft))) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$VerticalTopDownJunctionTopLeft)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, topLeft, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantLeft) && (A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottomRight, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantLeft) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal))) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$SlantedLeftJunctionLeft)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, topRight, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantRight) && (A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottomLeft, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantRight) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal))) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$SlantedRightJunctionLeft)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, topLeft, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantLeft) && (A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottomRight, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantLeft) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal))) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$SlantedLeftJunctionRight)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, top, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && (A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottom, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottomLeft, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantRight))) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$VerticalTopDownJunctionBottomLeft)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, top, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && (A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottom, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottomRight, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantLeft))) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$VerticalTopDownJunctionBottomRight)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, top, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && (A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottom, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, topRight, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantRight))) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$VerticalTopDownJunctionTopRight)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottom, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$TopLeftCorner)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottom, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$TopRightCorner)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottom, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, topRight, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantRight)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$TopLeftSlantedTopRight)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottomLeft, andre_dietrich$elm_svgbob$SvgBob$Grid$isOpenCurve)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$TopLeftBigCurve)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isRoundCorner) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottomLeft, andre_dietrich$elm_svgbob$SvgBob$Grid$isOpenCurve)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$TopLeftBigCurve)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottomRight, andre_dietrich$elm_svgbob$SvgBob$Grid$isCloseCurve)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$TopRightBigCurve)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isRoundCorner) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottomRight, andre_dietrich$elm_svgbob$SvgBob$Grid$isCloseCurve)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$TopRightBigCurve)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, topLeft, andre_dietrich$elm_svgbob$SvgBob$Grid$isOpenCurve)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$BottomLeftBigCurve)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, topRight, andre_dietrich$elm_svgbob$SvgBob$Grid$isCloseCurve)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$BottomRightBigCurve)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isRoundCorner) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, topLeft, andre_dietrich$elm_svgbob$SvgBob$Grid$isOpenCurve)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$BottomLeftBigCurve)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isRoundCorner) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, topRight, andre_dietrich$elm_svgbob$SvgBob$Grid$isCloseCurve)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$BottomRightBigCurve)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, top, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$BottomLeftCorner)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, top, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isLowHorizontal)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$BottomLeftLowHorizontal)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, top, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isLowHorizontal)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$BottomRightLowHorizontal)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, topLeft, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantLeft)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$BottomLeftSlantedTopLeft)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, topRight, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantRight)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$BottomLeftSlantedTopRight)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, top, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottomRight, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantLeft)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$BottomLeftSlantedBottomRight)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, topRight, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantRight)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$BottomRightSlantedTopRight)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isLowHorizontal) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, topRight, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantRight)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$BottomLeftSlantedTopRightLowHorizontal)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isLowHorizontal) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, topLeft, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantLeft)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$BottomRightSlantedTopLeftLowHorizontal)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, topLeft, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantLeft)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$BottomRightSlantedTopLeft)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, top, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottomLeft, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantRight)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$BottomRightSlantedBottomLeft)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, top, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$BottomRightCorner)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottom, andre_dietrich$elm_svgbob$SvgBob$Grid$isRoundCorner)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$TopLeftCorner)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottom, andre_dietrich$elm_svgbob$SvgBob$Grid$isRoundCorner)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$TopRightCorner)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, top, andre_dietrich$elm_svgbob$SvgBob$Grid$isRoundCorner)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$BottomRightCorner)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, top, andre_dietrich$elm_svgbob$SvgBob$Grid$isRoundCorner)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$BottomLeftCorner)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottomLeft, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantRight)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$TopLeftSlantedBottomLeft)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, right, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottomRight, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantLeft)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$TopLeftSlantedBottomRight)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottomRight, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantLeft)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$TopRightSlantedBottomRight)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, left, andre_dietrich$elm_svgbob$SvgBob$Grid$isHorizontal) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottomLeft, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantRight)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$TopRightSlantedBottomLeft)) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottom, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, topLeft, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantLeft)) ? elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$RoundCorner(andre_dietrich$elm_svgbob$SvgBob$Types$TopRightSlantedTopLeft)) : elm$core$Maybe$Just(
															andre_dietrich$elm_svgbob$SvgBob$Types$Text(char_)))))))))))))))))))))))))))))))))))))))));
													} else {
														if (andre_dietrich$elm_svgbob$SvgBob$Grid$isArrowRight(char_)) {
															return elm$core$Maybe$Just(andre_dietrich$elm_svgbob$SvgBob$Types$ArrowEast);
														} else {
															if (andre_dietrich$elm_svgbob$SvgBob$Grid$isArrowDown(char_)) {
																return A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, top, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) ? elm$core$Maybe$Just(andre_dietrich$elm_svgbob$SvgBob$Types$ArrowSouth) : (A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, topRight, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantRight) ? elm$core$Maybe$Just(andre_dietrich$elm_svgbob$SvgBob$Types$ArrowSouthWest) : (A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, topLeft, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantLeft) ? elm$core$Maybe$Just(andre_dietrich$elm_svgbob$SvgBob$Types$ArrowSouthEast) : elm$core$Maybe$Just(
																	andre_dietrich$elm_svgbob$SvgBob$Types$Text(char_))));
															} else {
																if (andre_dietrich$elm_svgbob$SvgBob$Grid$isArrowLeft(char_)) {
																	return elm$core$Maybe$Just(andre_dietrich$elm_svgbob$SvgBob$Types$ArrowWest);
																} else {
																	if (andre_dietrich$elm_svgbob$SvgBob$Grid$isArrowUp(char_)) {
																		return A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottom, andre_dietrich$elm_svgbob$SvgBob$Grid$isVertical) ? elm$core$Maybe$Just(andre_dietrich$elm_svgbob$SvgBob$Types$ArrowNorth) : (A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottomLeft, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantRight) ? elm$core$Maybe$Just(andre_dietrich$elm_svgbob$SvgBob$Types$ArrowNorthWest) : (A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottomRight, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantLeft) ? elm$core$Maybe$Just(andre_dietrich$elm_svgbob$SvgBob$Types$ArrowNorthEast) : elm$core$Maybe$Just(
																			andre_dietrich$elm_svgbob$SvgBob$Types$Text(char_))));
																	} else {
																		if (andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantRight(char_)) {
																			return elm$core$Maybe$Just(andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight);
																		} else {
																			if (andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantLeft(char_)) {
																				return elm$core$Maybe$Just(andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft);
																			} else {
																				if (andre_dietrich$elm_svgbob$SvgBob$Grid$isOpenCurve(char_)) {
																					return (A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, topRight, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantRight) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottomRight, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantLeft)) ? elm$core$Maybe$Just(andre_dietrich$elm_svgbob$SvgBob$Types$OpenCurve) : ((A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, topRight, andre_dietrich$elm_svgbob$SvgBob$Grid$isRoundCorner) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottomRight, andre_dietrich$elm_svgbob$SvgBob$Grid$isRoundCorner)) ? elm$core$Maybe$Just(andre_dietrich$elm_svgbob$SvgBob$Types$BigOpenCurve) : elm$core$Maybe$Just(
																						andre_dietrich$elm_svgbob$SvgBob$Types$Text(char_)));
																				} else {
																					if (andre_dietrich$elm_svgbob$SvgBob$Grid$isCloseCurve(char_) && (A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, topLeft, andre_dietrich$elm_svgbob$SvgBob$Grid$isRoundCorner) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottomLeft, andre_dietrich$elm_svgbob$SvgBob$Grid$isRoundCorner))) {
																						return elm$core$Maybe$Just(andre_dietrich$elm_svgbob$SvgBob$Types$BigCloseCurve);
																					} else {
																						if (andre_dietrich$elm_svgbob$SvgBob$Grid$isCloseCurve(char_) && (A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, topLeft, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantLeft) && A2(andre_dietrich$elm_svgbob$SvgBob$Grid$isNeighbor, bottomLeft, andre_dietrich$elm_svgbob$SvgBob$Grid$isSlantRight))) {
																							return elm$core$Maybe$Just(andre_dietrich$elm_svgbob$SvgBob$Types$CloseCurve);
																						} else {
																							if (!_Utils_eq(
																								char_,
																								_Utils_chr(' '))) {
																								return elm$core$Maybe$Just(
																									andre_dietrich$elm_svgbob$SvgBob$Types$Text(char_));
																							} else {
																								return elm$core$Maybe$Nothing;
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		} else {
			return elm$core$Maybe$Nothing;
		}
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawElement = F3(
	function (x, y, model) {
		var element = A3(andre_dietrich$elm_svgbob$SvgBob$Grid$getElement, x, y, model);
		if (element.$ === 'Just') {
			var e = element.a;
			switch (e.$) {
				case 'Horizontal':
					return _List_fromArray(
						[
							A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawHorizontalLine, x, y, model)
						]);
				case 'LowHorizontal':
					return _List_fromArray(
						[
							A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLowHorizontalLine, x, y, model)
						]);
				case 'LowHorizontalExtendLeft':
					return _List_fromArray(
						[
							A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLowHorizontalExtendLeft, x, y, model)
						]);
				case 'LowHorizontalExtendVerticalLeft':
					return _List_fromArray(
						[
							A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLowHorizontalExtendVerticalLeft, x, y, model)
						]);
				case 'LowHorizontalExtendRight':
					return _List_fromArray(
						[
							A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLowHorizontalExtendRight, x, y, model)
						]);
				case 'LowHorizontalExtendVerticalRight':
					return _List_fromArray(
						[
							A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLowHorizontalExtendVerticalRight, x, y, model)
						]);
				case 'LowHorizontalExtendVerticalBottomLeft':
					return _List_fromArray(
						[
							A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLowHorizontalExtendVerticalBottomLeft, x, y, model)
						]);
				case 'LowHorizontalExtendVerticalBottomRight':
					return _List_fromArray(
						[
							A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawLowHorizontalExtendVerticalBottomRight, x, y, model)
						]);
				case 'Vertical':
					return _List_fromArray(
						[
							A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawVerticalLine, x, y, model)
						]);
				case 'Intersection':
					var itype = e.a;
					return A4(andre_dietrich$elm_svgbob$SvgBob$Grid$drawIntersection, x, y, itype, model);
				case 'RoundCorner':
					var pos = e.a;
					return A4(andre_dietrich$elm_svgbob$SvgBob$Grid$drawRoundCorner, x, y, pos, model);
				case 'ArrowEast':
					return _List_fromArray(
						[
							A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArrowRight, x, y, model)
						]);
				case 'ArrowSouth':
					return _List_fromArray(
						[
							A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArrowDown, x, y, model)
						]);
				case 'ArrowSouthWest':
					return _List_fromArray(
						[
							A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArrowSouthWest, x, y, model)
						]);
				case 'ArrowSouthEast':
					return _List_fromArray(
						[
							A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArrowSouthEast, x, y, model)
						]);
				case 'ArrowNorth':
					return _List_fromArray(
						[
							A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArrowUp, x, y, model)
						]);
				case 'ArrowNorthWest':
					return _List_fromArray(
						[
							A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArrowNorthWest, x, y, model)
						]);
				case 'ArrowNorthEast':
					return _List_fromArray(
						[
							A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArrowNorthEast, x, y, model)
						]);
				case 'ArrowWest':
					return _List_fromArray(
						[
							A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawArrowLeft, x, y, model)
						]);
				case 'SlantRight':
					return _List_fromArray(
						[
							A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawSlantRightLine, x, y, model)
						]);
				case 'SlantLeft':
					return _List_fromArray(
						[
							A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawSlantLeftLine, x, y, model)
						]);
				case 'OpenCurve':
					return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawOpenCurve, x, y, model);
				case 'CloseCurve':
					return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawCloseCurve, x, y, model);
				case 'BigOpenCurve':
					return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawBigOpenCurve, x, y, model);
				case 'BigCloseCurve':
					return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawBigCloseCurve, x, y, model);
				default:
					var _char = e.a;
					return _List_fromArray(
						[
							A4(andre_dietrich$elm_svgbob$SvgBob$Grid$drawText, x, y, _char, model.settings)
						]);
			}
		} else {
			return _List_Nil;
		}
	});
var andre_dietrich$elm_svgbob$SvgBob$Grid$drawPaths = function (model) {
	return elm$core$List$concat(
		elm$core$List$concat(
			elm$core$Array$toList(
				A2(
					elm$core$Array$indexedMap,
					F2(
						function (r, line) {
							return elm$core$Array$toList(
								A2(
									elm$core$Array$indexedMap,
									F2(
										function (c, _char) {
											return A3(andre_dietrich$elm_svgbob$SvgBob$Grid$drawElement, c, r, model);
										}),
									line));
						}),
					model.lines))));
};
var elm$svg$Svg$defs = elm$svg$Svg$trustedNode('defs');
var elm$svg$Svg$svg = elm$svg$Svg$trustedNode('svg');
var andre_dietrich$elm_svgbob$SvgBob$Grid$getSvg = F2(
	function (attr, model) {
		var gwidth = elm$core$String$fromFloat(
			andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(model.columns) + 10);
		var gheight = elm$core$String$fromFloat(
			andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(model.rows) + 10);
		return A2(
			elm$svg$Svg$svg,
			A2(
				elm$core$List$cons,
				elm$svg$Svg$Attributes$viewBox('0 0 ' + (gwidth + (' ' + gheight))),
				attr),
			A2(
				elm$core$List$cons,
				A2(
					elm$svg$Svg$defs,
					_List_Nil,
					_List_fromArray(
						[andre_dietrich$elm_svgbob$SvgBob$Grid$arrowMarker])),
				andre_dietrich$elm_svgbob$SvgBob$Grid$drawPaths(model)));
	});
var andre_dietrich$elm_svgbob$SvgBob$getSvg = andre_dietrich$elm_svgbob$SvgBob$Grid$getSvg;
var terezka$line_charts$Internal$Dots$Config = function (a) {
	return {$: 'Config', a: a};
};
var terezka$line_charts$Internal$Dots$customAny = terezka$line_charts$Internal$Dots$Config;
var terezka$line_charts$LineChart$Dots$customAny = terezka$line_charts$Internal$Dots$customAny;
var terezka$line_charts$Internal$Dots$Full = {$: 'Full'};
var terezka$line_charts$Internal$Dots$Style = function (a) {
	return {$: 'Style', a: a};
};
var terezka$line_charts$Internal$Dots$style = F2(
	function (radius, variety) {
		return terezka$line_charts$Internal$Dots$Style(
			{radius: radius, variety: variety});
	});
var terezka$line_charts$Internal$Dots$full = function (radius) {
	return A2(terezka$line_charts$Internal$Dots$style, radius, terezka$line_charts$Internal$Dots$Full);
};
var terezka$line_charts$LineChart$Dots$full = terezka$line_charts$Internal$Dots$full;
var author$project$Lia$Markdown$Chart$View$customDotsConfig = function () {
	var styleLegend = function (_n1) {
		return terezka$line_charts$LineChart$Dots$full(7);
	};
	var styleIndividual = function (_n0) {
		var small = _n0.b;
		return terezka$line_charts$LineChart$Dots$full(
			small ? 5 : 12);
	};
	return terezka$line_charts$LineChart$Dots$customAny(
		{individual: styleIndividual, legend: styleLegend});
}();
var author$project$Lia$Markdown$Chart$View$dotSize = F2(
	function (c, points) {
		var small = elm$core$Char$isLower(c);
		return A2(
			elm$core$List$map,
			function (p) {
				return _Utils_Tuple2(p, small);
			},
			points);
	});
var terezka$line_charts$Internal$Dots$Circle = {$: 'Circle'};
var terezka$line_charts$LineChart$Dots$circle = terezka$line_charts$Internal$Dots$Circle;
var terezka$line_charts$Internal$Dots$Cross = {$: 'Cross'};
var terezka$line_charts$LineChart$Dots$cross = terezka$line_charts$Internal$Dots$Cross;
var terezka$line_charts$Internal$Dots$Plus = {$: 'Plus'};
var terezka$line_charts$LineChart$Dots$plus = terezka$line_charts$Internal$Dots$Plus;
var terezka$line_charts$Internal$Dots$Square = {$: 'Square'};
var terezka$line_charts$LineChart$Dots$square = terezka$line_charts$Internal$Dots$Square;
var terezka$line_charts$Internal$Dots$Triangle = {$: 'Triangle'};
var terezka$line_charts$LineChart$Dots$triangle = terezka$line_charts$Internal$Dots$Triangle;
var author$project$Lia$Markdown$Chart$View$dotType = function (c) {
	switch (c.valueOf()) {
		case 't':
			return terezka$line_charts$LineChart$Dots$triangle;
		case 'T':
			return terezka$line_charts$LineChart$Dots$triangle;
		case 'A':
			return terezka$line_charts$LineChart$Dots$triangle;
		case 'v':
			return terezka$line_charts$LineChart$Dots$triangle;
		case 'V':
			return terezka$line_charts$LineChart$Dots$triangle;
		case '#':
			return terezka$line_charts$LineChart$Dots$square;
		case 'H':
			return terezka$line_charts$LineChart$Dots$square;
		case 'B':
			return terezka$line_charts$LineChart$Dots$square;
		case 'N':
			return terezka$line_charts$LineChart$Dots$square;
		case '+':
			return terezka$line_charts$LineChart$Dots$plus;
		case 'x':
			return terezka$line_charts$LineChart$Dots$cross;
		case 'X':
			return terezka$line_charts$LineChart$Dots$cross;
		default:
			return terezka$line_charts$LineChart$Dots$circle;
	}
};
var avh4$elm_color$Color$black = A4(avh4$elm_color$Color$RgbaSpace, 0 / 255, 0 / 255, 0 / 255, 1.0);
var avh4$elm_color$Color$blue = A4(avh4$elm_color$Color$RgbaSpace, 52 / 255, 101 / 255, 164 / 255, 1.0);
var avh4$elm_color$Color$brown = A4(avh4$elm_color$Color$RgbaSpace, 193 / 255, 125 / 255, 17 / 255, 1.0);
var avh4$elm_color$Color$darkRed = A4(avh4$elm_color$Color$RgbaSpace, 164 / 255, 0 / 255, 0 / 255, 1.0);
var avh4$elm_color$Color$green = A4(avh4$elm_color$Color$RgbaSpace, 115 / 255, 210 / 255, 22 / 255, 1.0);
var avh4$elm_color$Color$grey = A4(avh4$elm_color$Color$RgbaSpace, 211 / 255, 215 / 255, 207 / 255, 1.0);
var avh4$elm_color$Color$orange = A4(avh4$elm_color$Color$RgbaSpace, 245 / 255, 121 / 255, 0 / 255, 1.0);
var avh4$elm_color$Color$scaleFrom255 = function (c) {
	return c / 255;
};
var avh4$elm_color$Color$rgb255 = F3(
	function (r, g, b) {
		return A4(
			avh4$elm_color$Color$RgbaSpace,
			avh4$elm_color$Color$scaleFrom255(r),
			avh4$elm_color$Color$scaleFrom255(g),
			avh4$elm_color$Color$scaleFrom255(b),
			1.0);
	});
var avh4$elm_color$Color$white = A4(avh4$elm_color$Color$RgbaSpace, 255 / 255, 255 / 255, 255 / 255, 1.0);
var avh4$elm_color$Color$yellow = A4(avh4$elm_color$Color$RgbaSpace, 237 / 255, 212 / 255, 0 / 255, 1.0);
var terezka$line_charts$LineChart$Colors$cyan = A3(avh4$elm_color$Color$rgb255, 0, 229, 255);
var terezka$line_charts$LineChart$Colors$pink = A3(avh4$elm_color$Color$rgb255, 245, 105, 215);
var terezka$line_charts$LineChart$Colors$purple = A3(avh4$elm_color$Color$rgb255, 156, 39, 176);
var terezka$line_charts$LineChart$Colors$red = A3(avh4$elm_color$Color$rgb255, 216, 27, 96);
var terezka$line_charts$LineChart$Colors$rust = A3(avh4$elm_color$Color$rgb255, 205, 102, 51);
var terezka$line_charts$LineChart$Colors$strongBlue = A3(avh4$elm_color$Color$rgb255, 89, 51, 204);
var terezka$line_charts$LineChart$Colors$teal = A3(avh4$elm_color$Color$rgb255, 29, 233, 182);
var author$project$Lia$Markdown$Chart$View$colors = elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			_Utils_chr('*'),
			avh4$elm_color$Color$black),
			_Utils_Tuple2(
			_Utils_chr('+'),
			avh4$elm_color$Color$black),
			_Utils_Tuple2(
			_Utils_chr('x'),
			avh4$elm_color$Color$black),
			_Utils_Tuple2(
			_Utils_chr('a'),
			A3(avh4$elm_color$Color$rgb255, 127, 255, 212)),
			_Utils_Tuple2(
			_Utils_chr('b'),
			avh4$elm_color$Color$blue),
			_Utils_Tuple2(
			_Utils_chr('c'),
			terezka$line_charts$LineChart$Colors$cyan),
			_Utils_Tuple2(
			_Utils_chr('d'),
			avh4$elm_color$Color$darkRed),
			_Utils_Tuple2(
			_Utils_chr('e'),
			avh4$elm_color$Color$grey),
			_Utils_Tuple2(
			_Utils_chr('f'),
			A3(avh4$elm_color$Color$rgb255, 230, 230, 250)),
			_Utils_Tuple2(
			_Utils_chr('g'),
			avh4$elm_color$Color$green),
			_Utils_Tuple2(
			_Utils_chr('h'),
			A3(avh4$elm_color$Color$rgb255, 240, 255, 240)),
			_Utils_Tuple2(
			_Utils_chr('i'),
			A3(avh4$elm_color$Color$rgb255, 75, 0, 130)),
			_Utils_Tuple2(
			_Utils_chr('j'),
			avh4$elm_color$Color$black),
			_Utils_Tuple2(
			_Utils_chr('k'),
			A3(avh4$elm_color$Color$rgb255, 240, 230, 140)),
			_Utils_Tuple2(
			_Utils_chr('l'),
			A3(avh4$elm_color$Color$rgb255, 230, 230, 250)),
			_Utils_Tuple2(
			_Utils_chr('m'),
			A3(avh4$elm_color$Color$rgb255, 255, 0, 255)),
			_Utils_Tuple2(
			_Utils_chr('n'),
			avh4$elm_color$Color$brown),
			_Utils_Tuple2(
			_Utils_chr('o'),
			avh4$elm_color$Color$orange),
			_Utils_Tuple2(
			_Utils_chr('p'),
			terezka$line_charts$LineChart$Colors$pink),
			_Utils_Tuple2(
			_Utils_chr('q'),
			A3(avh4$elm_color$Color$rgb255, 0, 255, 255)),
			_Utils_Tuple2(
			_Utils_chr('r'),
			terezka$line_charts$LineChart$Colors$red),
			_Utils_Tuple2(
			_Utils_chr('s'),
			terezka$line_charts$LineChart$Colors$strongBlue),
			_Utils_Tuple2(
			_Utils_chr('t'),
			terezka$line_charts$LineChart$Colors$teal),
			_Utils_Tuple2(
			_Utils_chr('u'),
			terezka$line_charts$LineChart$Colors$rust),
			_Utils_Tuple2(
			_Utils_chr('v'),
			terezka$line_charts$LineChart$Colors$purple),
			_Utils_Tuple2(
			_Utils_chr('w'),
			avh4$elm_color$Color$white),
			_Utils_Tuple2(
			_Utils_chr('y'),
			avh4$elm_color$Color$yellow),
			_Utils_Tuple2(
			_Utils_chr('z'),
			A3(avh4$elm_color$Color$rgb255, 240, 255, 255))
		]));
var elm$core$Char$toLower = _Char_toLower;
var author$project$Lia$Markdown$Chart$View$get_color = function (c) {
	return A2(
		elm$core$Maybe$withDefault,
		avh4$elm_color$Color$black,
		A2(
			elm$core$Dict$get,
			elm$core$Char$toLower(c),
			author$project$Lia$Markdown$Chart$View$colors));
};
var terezka$line_charts$Internal$Line$Series = function (a) {
	return {$: 'Series', a: a};
};
var terezka$line_charts$Internal$Line$SeriesConfig = F5(
	function (color, shape, dashing, label, data) {
		return {color: color, dashing: dashing, data: data, label: label, shape: shape};
	});
var terezka$line_charts$Internal$Line$dash = F5(
	function (color_, shape_, label_, dashing_, data_) {
		return terezka$line_charts$Internal$Line$Series(
			A5(terezka$line_charts$Internal$Line$SeriesConfig, color_, shape_, dashing_, label_, data_));
	});
var terezka$line_charts$LineChart$dash = terezka$line_charts$Internal$Line$dash;
var terezka$line_charts$Internal$Line$line = F4(
	function (color_, shape_, label_, data_) {
		return terezka$line_charts$Internal$Line$Series(
			A5(terezka$line_charts$Internal$Line$SeriesConfig, color_, shape_, _List_Nil, label_, data_));
	});
var terezka$line_charts$LineChart$line = terezka$line_charts$Internal$Line$line;
var author$project$Lia$Markdown$Chart$View$plot = function (config) {
	if (config.b.$ === 'Line') {
		var c = config.a;
		var points = config.b.a;
		return A4(
			terezka$line_charts$LineChart$line,
			author$project$Lia$Markdown$Chart$View$get_color(c),
			author$project$Lia$Markdown$Chart$View$dotType(c),
			'',
			A2(author$project$Lia$Markdown$Chart$View$dotSize, c, points));
	} else {
		var c = config.a;
		var points = config.b.a;
		return A5(
			terezka$line_charts$LineChart$dash,
			author$project$Lia$Markdown$Chart$View$get_color(c),
			author$project$Lia$Markdown$Chart$View$dotType(c),
			'',
			_List_fromArray(
				[0, 50]),
			A2(author$project$Lia$Markdown$Chart$View$dotSize, c, points));
	}
};
var elm$svg$Svg$g = elm$svg$Svg$trustedNode('g');
var elm$core$Basics$round = _Basics_round;
var avh4$elm_color$Color$toCssString = function (_n0) {
	var r = _n0.a;
	var g = _n0.b;
	var b = _n0.c;
	var a = _n0.d;
	var roundTo = function (x) {
		return elm$core$Basics$round(x * 1000) / 1000;
	};
	var pct = function (x) {
		return elm$core$Basics$round(x * 10000) / 100;
	};
	return elm$core$String$concat(
		_List_fromArray(
			[
				'rgba(',
				elm$core$String$fromFloat(
				pct(r)),
				'%,',
				elm$core$String$fromFloat(
				pct(g)),
				'%,',
				elm$core$String$fromFloat(
				pct(b)),
				'%,',
				elm$core$String$fromFloat(
				roundTo(a)),
				')'
			]));
};
var elm$svg$Svg$text_ = elm$svg$Svg$trustedNode('text');
var elm$svg$Svg$tspan = elm$svg$Svg$trustedNode('tspan');
var terezka$line_charts$Internal$Svg$label = F2(
	function (color, string) {
		return A2(
			elm$svg$Svg$text_,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$fill(color),
					elm$svg$Svg$Attributes$style('pointer-events: none;')
				]),
			_List_fromArray(
				[
					A2(
					elm$svg$Svg$tspan,
					_List_Nil,
					_List_fromArray(
						[
							elm$svg$Svg$text(string)
						]))
				]));
	});
var terezka$line_charts$LineChart$Junk$label = function (color) {
	return terezka$line_charts$Internal$Svg$label(
		avh4$elm_color$Color$toCssString(color));
};
var terezka$line_charts$Internal$Svg$Transfrom = F2(
	function (a, b) {
		return {$: 'Transfrom', a: a, b: b};
	});
var terezka$line_charts$Internal$Coordinate$lengthX = function (system) {
	return A2(elm$core$Basics$max, 1, (system.frame.size.width - system.frame.margin.left) - system.frame.margin.right);
};
var terezka$line_charts$Internal$Coordinate$reachX = function (system) {
	var diff = system.x.max - system.x.min;
	return (diff > 0) ? diff : 1;
};
var terezka$line_charts$LineChart$Coordinate$scaleSvgX = F2(
	function (system, value) {
		return (value * terezka$line_charts$Internal$Coordinate$lengthX(system)) / terezka$line_charts$Internal$Coordinate$reachX(system);
	});
var terezka$line_charts$LineChart$Coordinate$toSvgX = F2(
	function (system, value) {
		return A2(terezka$line_charts$LineChart$Coordinate$scaleSvgX, system, value - system.x.min) + system.frame.margin.left;
	});
var terezka$line_charts$Internal$Coordinate$lengthY = function (system) {
	return A2(elm$core$Basics$max, 1, (system.frame.size.height - system.frame.margin.bottom) - system.frame.margin.top);
};
var terezka$line_charts$Internal$Coordinate$reachY = function (system) {
	var diff = system.y.max - system.y.min;
	return (diff > 0) ? diff : 1;
};
var terezka$line_charts$LineChart$Coordinate$scaleSvgY = F2(
	function (system, value) {
		return (value * terezka$line_charts$Internal$Coordinate$lengthY(system)) / terezka$line_charts$Internal$Coordinate$reachY(system);
	});
var terezka$line_charts$LineChart$Coordinate$toSvgY = F2(
	function (system, value) {
		return A2(terezka$line_charts$LineChart$Coordinate$scaleSvgY, system, system.y.max - value) + system.frame.margin.top;
	});
var terezka$line_charts$Internal$Svg$move = F3(
	function (system, x, y) {
		return A2(
			terezka$line_charts$Internal$Svg$Transfrom,
			A2(terezka$line_charts$LineChart$Coordinate$toSvgX, system, x),
			A2(terezka$line_charts$LineChart$Coordinate$toSvgY, system, y));
	});
var terezka$line_charts$LineChart$Junk$move = terezka$line_charts$Internal$Svg$move;
var terezka$line_charts$Internal$Svg$offset = F2(
	function (x, y) {
		return A2(terezka$line_charts$Internal$Svg$Transfrom, x, y);
	});
var terezka$line_charts$LineChart$Junk$offset = terezka$line_charts$Internal$Svg$offset;
var elm$svg$Svg$Attributes$transform = _VirtualDom_attribute('transform');
var terezka$line_charts$Internal$Svg$addPosition = F2(
	function (_n0, _n1) {
		var x = _n0.a;
		var y = _n0.b;
		var xf = _n1.a;
		var yf = _n1.b;
		return A2(terezka$line_charts$Internal$Svg$Transfrom, xf + x, yf + y);
	});
var terezka$line_charts$Internal$Svg$toPosition = A2(
	elm$core$List$foldr,
	terezka$line_charts$Internal$Svg$addPosition,
	A2(terezka$line_charts$Internal$Svg$Transfrom, 0, 0));
var terezka$line_charts$Internal$Svg$transform = function (translations) {
	var _n0 = terezka$line_charts$Internal$Svg$toPosition(translations);
	var x = _n0.a;
	var y = _n0.b;
	return elm$svg$Svg$Attributes$transform(
		'translate(' + (elm$core$String$fromFloat(x) + (', ' + (elm$core$String$fromFloat(y) + ')'))));
};
var terezka$line_charts$LineChart$Junk$transform = terezka$line_charts$Internal$Svg$transform;
var terezka$line_charts$LineChart$Junk$labelAt = F8(
	function (system, x, y, xo, yo, anchor, color, text) {
		return A2(
			elm$svg$Svg$g,
			_List_fromArray(
				[
					terezka$line_charts$LineChart$Junk$transform(
					_List_fromArray(
						[
							A3(terezka$line_charts$LineChart$Junk$move, system, x, y),
							A2(terezka$line_charts$LineChart$Junk$offset, xo, yo)
						])),
					elm$svg$Svg$Attributes$style('text-anchor: ' + (anchor + ';'))
				]),
			_List_fromArray(
				[
					A2(terezka$line_charts$LineChart$Junk$label, color, text)
				]));
	});
var author$project$Lia$Markdown$Chart$View$title = F2(
	function (str, system) {
		return {
			above: _List_fromArray(
				[
					A8(terezka$line_charts$LineChart$Junk$labelAt, system, system.x.max / 2, system.y.max, 0, -5, 'middle', avh4$elm_color$Color$black, str)
				]),
			below: _List_Nil,
			html: _List_Nil
		};
	});
var elm$svg$Svg$Attributes$class = _VirtualDom_attribute('class');
var terezka$line_charts$Internal$Axis$variable = function (_n0) {
	var config = _n0.a;
	return config.variable;
};
var elm$svg$Svg$Attributes$clipPath = _VirtualDom_attribute('clip-path');
var terezka$line_charts$Internal$Utils$toChartAreaId = function (id) {
	return 'chart__chart-area--' + id;
};
var terezka$line_charts$Internal$Svg$withinChartArea = function (_n0) {
	var id = _n0.id;
	return elm$svg$Svg$Attributes$clipPath(
		'url(#' + (terezka$line_charts$Internal$Utils$toChartAreaId(id) + ')'));
};
var terezka$line_charts$Internal$Axis$attributesLine = F2(
	function (system, _n0) {
		var events = _n0.events;
		var width = _n0.width;
		var color = _n0.color;
		return _Utils_ap(
			events,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$strokeWidth(
					elm$core$String$fromFloat(width)),
					elm$svg$Svg$Attributes$stroke(
					avh4$elm_color$Color$toCssString(color)),
					terezka$line_charts$Internal$Svg$withinChartArea(system)
				]));
	});
var terezka$line_charts$Internal$Path$Line = function (a) {
	return {$: 'Line', a: a};
};
var terezka$line_charts$Internal$Path$Move = function (a) {
	return {$: 'Move', a: a};
};
var terezka$line_charts$Internal$Path$join = function (commands) {
	return A2(elm$core$String$join, ' ', commands);
};
var terezka$line_charts$Internal$Path$bool = function (bool_) {
	return bool_ ? '1' : '0';
};
var terezka$line_charts$Internal$Path$point = function (point_) {
	return elm$core$String$fromFloat(point_.x) + (' ' + elm$core$String$fromFloat(point_.y));
};
var terezka$line_charts$Internal$Path$points = function (points_) {
	return A2(
		elm$core$String$join,
		',',
		A2(elm$core$List$map, terezka$line_charts$Internal$Path$point, points_));
};
var terezka$line_charts$Internal$Path$toString = function (command) {
	switch (command.$) {
		case 'Close':
			return 'Z';
		case 'Move':
			var p = command.a;
			return 'M' + terezka$line_charts$Internal$Path$point(p);
		case 'Line':
			var p = command.a;
			return 'L' + terezka$line_charts$Internal$Path$point(p);
		case 'Horizontal':
			var x = command.a;
			return 'H' + elm$core$String$fromFloat(x);
		case 'Vertical':
			var y = command.a;
			return 'V' + elm$core$String$fromFloat(y);
		case 'CubicBeziers':
			var c1 = command.a;
			var c2 = command.b;
			var p = command.c;
			return 'C' + terezka$line_charts$Internal$Path$points(
				_List_fromArray(
					[c1, c2, p]));
		case 'CubicBeziersShort':
			var c1 = command.a;
			var p = command.b;
			return 'Q' + terezka$line_charts$Internal$Path$points(
				_List_fromArray(
					[c1, p]));
		case 'QuadraticBeziers':
			var c1 = command.a;
			var p = command.b;
			return 'Q' + terezka$line_charts$Internal$Path$points(
				_List_fromArray(
					[c1, p]));
		case 'QuadraticBeziersShort':
			var p = command.a;
			return 'T' + terezka$line_charts$Internal$Path$point(p);
		default:
			var rx = command.a;
			var ry = command.b;
			var xAxisRotation = command.c;
			var largeArcFlag = command.d;
			var sweepFlag = command.e;
			var p = command.f;
			return 'A' + terezka$line_charts$Internal$Path$join(
				_List_fromArray(
					[
						elm$core$String$fromFloat(rx),
						elm$core$String$fromFloat(ry),
						elm$core$String$fromInt(xAxisRotation),
						terezka$line_charts$Internal$Path$bool(largeArcFlag),
						terezka$line_charts$Internal$Path$bool(sweepFlag),
						terezka$line_charts$Internal$Path$point(p)
					]));
	}
};
var terezka$line_charts$Internal$Path$Arc = F6(
	function (a, b, c, d, e, f) {
		return {$: 'Arc', a: a, b: b, c: c, d: d, e: e, f: f};
	});
var terezka$line_charts$Internal$Path$Close = {$: 'Close'};
var terezka$line_charts$Internal$Path$CubicBeziers = F3(
	function (a, b, c) {
		return {$: 'CubicBeziers', a: a, b: b, c: c};
	});
var terezka$line_charts$Internal$Path$CubicBeziersShort = F2(
	function (a, b) {
		return {$: 'CubicBeziersShort', a: a, b: b};
	});
var terezka$line_charts$Internal$Path$Horizontal = function (a) {
	return {$: 'Horizontal', a: a};
};
var terezka$line_charts$Internal$Path$QuadraticBeziers = F2(
	function (a, b) {
		return {$: 'QuadraticBeziers', a: a, b: b};
	});
var terezka$line_charts$Internal$Path$QuadraticBeziersShort = function (a) {
	return {$: 'QuadraticBeziersShort', a: a};
};
var terezka$line_charts$Internal$Path$Vertical = function (a) {
	return {$: 'Vertical', a: a};
};
var terezka$line_charts$LineChart$Coordinate$toSvg = F2(
	function (system, point) {
		return {
			x: A2(terezka$line_charts$LineChart$Coordinate$toSvgX, system, point.x),
			y: A2(terezka$line_charts$LineChart$Coordinate$toSvgY, system, point.y)
		};
	});
var terezka$line_charts$Internal$Path$translate = F2(
	function (system, command) {
		switch (command.$) {
			case 'Move':
				var p = command.a;
				return terezka$line_charts$Internal$Path$Move(
					A2(terezka$line_charts$LineChart$Coordinate$toSvg, system, p));
			case 'Line':
				var p = command.a;
				return terezka$line_charts$Internal$Path$Line(
					A2(terezka$line_charts$LineChart$Coordinate$toSvg, system, p));
			case 'Horizontal':
				var x = command.a;
				return terezka$line_charts$Internal$Path$Horizontal(
					A2(terezka$line_charts$LineChart$Coordinate$toSvgX, system, x));
			case 'Vertical':
				var y = command.a;
				return terezka$line_charts$Internal$Path$Vertical(
					A2(terezka$line_charts$LineChart$Coordinate$toSvgY, system, y));
			case 'CubicBeziers':
				var c1 = command.a;
				var c2 = command.b;
				var p = command.c;
				return A3(
					terezka$line_charts$Internal$Path$CubicBeziers,
					A2(terezka$line_charts$LineChart$Coordinate$toSvg, system, c1),
					A2(terezka$line_charts$LineChart$Coordinate$toSvg, system, c2),
					A2(terezka$line_charts$LineChart$Coordinate$toSvg, system, p));
			case 'CubicBeziersShort':
				var c1 = command.a;
				var p = command.b;
				return A2(
					terezka$line_charts$Internal$Path$CubicBeziersShort,
					A2(terezka$line_charts$LineChart$Coordinate$toSvg, system, c1),
					A2(terezka$line_charts$LineChart$Coordinate$toSvg, system, p));
			case 'QuadraticBeziers':
				var c1 = command.a;
				var p = command.b;
				return A2(
					terezka$line_charts$Internal$Path$QuadraticBeziers,
					A2(terezka$line_charts$LineChart$Coordinate$toSvg, system, c1),
					A2(terezka$line_charts$LineChart$Coordinate$toSvg, system, p));
			case 'QuadraticBeziersShort':
				var p = command.a;
				return terezka$line_charts$Internal$Path$QuadraticBeziersShort(
					A2(terezka$line_charts$LineChart$Coordinate$toSvg, system, p));
			case 'Arc':
				var rx = command.a;
				var ry = command.b;
				var xAxisRotation = command.c;
				var largeArcFlag = command.d;
				var sweepFlag = command.e;
				var p = command.f;
				return A6(
					terezka$line_charts$Internal$Path$Arc,
					rx,
					ry,
					xAxisRotation,
					largeArcFlag,
					sweepFlag,
					A2(terezka$line_charts$LineChart$Coordinate$toSvg, system, p));
			default:
				return terezka$line_charts$Internal$Path$Close;
		}
	});
var terezka$line_charts$Internal$Path$description = F2(
	function (system, commands) {
		return terezka$line_charts$Internal$Path$join(
			A2(
				elm$core$List$map,
				A2(
					elm$core$Basics$composeR,
					terezka$line_charts$Internal$Path$translate(system),
					terezka$line_charts$Internal$Path$toString),
				commands));
	});
var terezka$line_charts$Internal$Path$viewPath = function (attributes) {
	return A2(elm$svg$Svg$path, attributes, _List_Nil);
};
var terezka$line_charts$Internal$Path$view = F3(
	function (system, attributes, commands) {
		return terezka$line_charts$Internal$Path$viewPath(
			_Utils_ap(
				attributes,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$d(
						A2(terezka$line_charts$Internal$Path$description, system, commands))
					])));
	});
var terezka$line_charts$Internal$Utils$concat = F3(
	function (first, second, third) {
		return _Utils_ap(
			first,
			_Utils_ap(second, third));
	});
var terezka$line_charts$LineChart$Colors$gray = A3(avh4$elm_color$Color$rgb255, 163, 163, 163);
var terezka$line_charts$Internal$Svg$horizontal = F5(
	function (system, userAttributes, y, x1, x2) {
		var attributes = A3(
			terezka$line_charts$Internal$Utils$concat,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$stroke(
					avh4$elm_color$Color$toCssString(terezka$line_charts$LineChart$Colors$gray)),
					elm$svg$Svg$Attributes$style('pointer-events: none;')
				]),
			userAttributes,
			_List_Nil);
		return A3(
			terezka$line_charts$Internal$Path$view,
			system,
			attributes,
			_List_fromArray(
				[
					terezka$line_charts$Internal$Path$Move(
					{x: x1, y: y}),
					terezka$line_charts$Internal$Path$Line(
					{x: x1, y: y}),
					terezka$line_charts$Internal$Path$Line(
					{x: x2, y: y})
				]));
	});
var terezka$line_charts$Internal$Axis$viewHorizontalAxisLine = F3(
	function (system, axisPosition, config) {
		return A5(
			terezka$line_charts$Internal$Svg$horizontal,
			system,
			A2(terezka$line_charts$Internal$Axis$attributesLine, system, config),
			axisPosition,
			config.start,
			config.end);
	});
var terezka$line_charts$Internal$Axis$attributesTick = function (_n0) {
	var width = _n0.width;
	var color = _n0.color;
	return _List_fromArray(
		[
			elm$svg$Svg$Attributes$strokeWidth(
			elm$core$String$fromFloat(width)),
			elm$svg$Svg$Attributes$stroke(
			avh4$elm_color$Color$toCssString(color))
		]);
};
var terezka$line_charts$Internal$Axis$Tick$isPositive = function (direction) {
	if (direction.$ === 'Positive') {
		return true;
	} else {
		return false;
	}
};
var terezka$line_charts$Internal$Axis$lengthOfTick = function (_n0) {
	var length = _n0.length;
	var direction = _n0.direction;
	return terezka$line_charts$Internal$Axis$Tick$isPositive(direction) ? (-length) : length;
};
var terezka$line_charts$Internal$Svg$Middle = {$: 'Middle'};
var terezka$line_charts$Internal$Svg$anchorStyle = function (anchor) {
	var anchorString = function () {
		switch (anchor.$) {
			case 'Start':
				return 'start';
			case 'Middle':
				return 'middle';
			default:
				return 'end';
		}
	}();
	return elm$svg$Svg$Attributes$style('text-anchor: ' + (anchorString + ';'));
};
var terezka$line_charts$Internal$Axis$viewHorizontalLabel = F4(
	function (system, _n0, position, view) {
		var direction = _n0.direction;
		var length = _n0.length;
		var yOffset = terezka$line_charts$Internal$Axis$Tick$isPositive(direction) ? ((-5) - length) : (15 + length);
		return A2(
			elm$svg$Svg$g,
			_List_fromArray(
				[
					terezka$line_charts$Internal$Svg$transform(
					_List_fromArray(
						[
							A3(terezka$line_charts$Internal$Svg$move, system, position.x, position.y),
							A2(terezka$line_charts$Internal$Svg$offset, 0, yOffset)
						])),
					terezka$line_charts$Internal$Svg$anchorStyle(terezka$line_charts$Internal$Svg$Middle)
				]),
			_List_fromArray(
				[view]));
	});
var terezka$line_charts$Internal$Svg$xTick = F5(
	function (system, height, userAttributes, y, x) {
		var attributes = A3(
			terezka$line_charts$Internal$Utils$concat,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$stroke(
					avh4$elm_color$Color$toCssString(terezka$line_charts$LineChart$Colors$gray))
				]),
			userAttributes,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$x1(
					elm$core$String$fromFloat(
						A2(terezka$line_charts$LineChart$Coordinate$toSvgX, system, x))),
					elm$svg$Svg$Attributes$x2(
					elm$core$String$fromFloat(
						A2(terezka$line_charts$LineChart$Coordinate$toSvgX, system, x))),
					elm$svg$Svg$Attributes$y1(
					elm$core$String$fromFloat(
						A2(terezka$line_charts$LineChart$Coordinate$toSvgY, system, y))),
					elm$svg$Svg$Attributes$y2(
					elm$core$String$fromFloat(
						A2(terezka$line_charts$LineChart$Coordinate$toSvgY, system, y) + height))
				]));
		return A2(elm$svg$Svg$line, attributes, _List_Nil);
	});
var terezka$line_charts$Internal$Utils$viewMaybe = F2(
	function (a, view) {
		return A2(
			elm$core$Maybe$withDefault,
			elm$svg$Svg$text(''),
			A2(elm$core$Maybe$map, view, a));
	});
var terezka$line_charts$Internal$Axis$viewHorizontalTick = F3(
	function (system, point, tick) {
		var x = point.x;
		var y = point.y;
		return A2(
			elm$svg$Svg$g,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$class('chart__tick')
				]),
			_List_fromArray(
				[
					A5(
					terezka$line_charts$Internal$Svg$xTick,
					system,
					terezka$line_charts$Internal$Axis$lengthOfTick(tick),
					terezka$line_charts$Internal$Axis$attributesTick(tick),
					y,
					x),
					A2(
					terezka$line_charts$Internal$Utils$viewMaybe,
					tick.label,
					A3(terezka$line_charts$Internal$Axis$viewHorizontalLabel, system, tick, point))
				]));
	});
var terezka$line_charts$Internal$Svg$Start = {$: 'Start'};
var terezka$line_charts$Internal$Axis$viewHorizontalTitle = F3(
	function (system, at, _n0) {
		var title = _n0.title;
		var position = at(
			A2(title.position, system.xData, system.x));
		var _n1 = title.offset;
		var xOffset = _n1.a;
		var yOffset = _n1.b;
		return A2(
			elm$svg$Svg$g,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$class('chart__title'),
					terezka$line_charts$Internal$Svg$transform(
					_List_fromArray(
						[
							A3(terezka$line_charts$Internal$Svg$move, system, position.x, position.y),
							A2(terezka$line_charts$Internal$Svg$offset, xOffset + 15, yOffset + 5)
						])),
					terezka$line_charts$Internal$Svg$anchorStyle(terezka$line_charts$Internal$Svg$Start)
				]),
			_List_fromArray(
				[title.view]));
	});
var terezka$line_charts$Internal$Axis$Intersection$getY = function (_n0) {
	var func = _n0.a;
	return A2(
		elm$core$Basics$composeL,
		function ($) {
			return $.y;
		},
		func);
};
var terezka$line_charts$Internal$Axis$Line$config = function (_n0) {
	var config_ = _n0.a;
	return config_;
};
var terezka$line_charts$Internal$Axis$Tick$properties = function (_n0) {
	var properties_ = _n0.a;
	return properties_;
};
var terezka$line_charts$Internal$Axis$Ticks$ticks = F3(
	function (dataRange, range, _n0) {
		var values = _n0.a;
		return A2(
			elm$core$List$map,
			terezka$line_charts$Internal$Axis$Tick$properties,
			A2(values, dataRange, range));
	});
var terezka$line_charts$Internal$Axis$Title$config = function (_n0) {
	var title = _n0.a;
	return title;
};
var terezka$line_charts$Internal$Axis$viewHorizontal = F3(
	function (system, intersection, _n0) {
		var config = _n0.a;
		var viewConfig = {
			intersection: A2(terezka$line_charts$Internal$Axis$Intersection$getY, intersection, system),
			line: A3(terezka$line_charts$Internal$Axis$Line$config, config.axisLine, system.xData, system.x),
			ticks: A3(terezka$line_charts$Internal$Axis$Ticks$ticks, system.xData, system.x, config.ticks),
			title: terezka$line_charts$Internal$Axis$Title$config(config.title)
		};
		var viewAxisLine = A2(terezka$line_charts$Internal$Axis$viewHorizontalAxisLine, system, viewConfig.intersection);
		var at = function (x) {
			return {x: x, y: viewConfig.intersection};
		};
		var viewTick = function (tick) {
			return A3(
				terezka$line_charts$Internal$Axis$viewHorizontalTick,
				system,
				at(tick.position),
				tick);
		};
		return A2(
			elm$svg$Svg$g,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$class('chart__axis--horizontal')
				]),
			_List_fromArray(
				[
					A3(terezka$line_charts$Internal$Axis$viewHorizontalTitle, system, at, viewConfig),
					viewAxisLine(viewConfig.line),
					A2(
					elm$svg$Svg$g,
					_List_fromArray(
						[
							elm$svg$Svg$Attributes$class('chart__ticks')
						]),
					A2(elm$core$List$map, viewTick, viewConfig.ticks))
				]));
	});
var terezka$line_charts$Internal$Svg$vertical = F5(
	function (system, userAttributes, x, y1, y2) {
		var attributes = A3(
			terezka$line_charts$Internal$Utils$concat,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$stroke(
					avh4$elm_color$Color$toCssString(terezka$line_charts$LineChart$Colors$gray)),
					elm$svg$Svg$Attributes$style('pointer-events: none;')
				]),
			userAttributes,
			_List_Nil);
		return A3(
			terezka$line_charts$Internal$Path$view,
			system,
			attributes,
			_List_fromArray(
				[
					terezka$line_charts$Internal$Path$Move(
					{x: x, y: y1}),
					terezka$line_charts$Internal$Path$Line(
					{x: x, y: y1}),
					terezka$line_charts$Internal$Path$Line(
					{x: x, y: y2})
				]));
	});
var terezka$line_charts$Internal$Axis$viewVerticalAxisLine = F3(
	function (system, axisPosition, config) {
		return A5(
			terezka$line_charts$Internal$Svg$vertical,
			system,
			A2(terezka$line_charts$Internal$Axis$attributesLine, system, config),
			axisPosition,
			config.start,
			config.end);
	});
var terezka$line_charts$Internal$Svg$End = {$: 'End'};
var terezka$line_charts$Internal$Axis$viewVerticalLabel = F4(
	function (system, _n0, position, view) {
		var direction = _n0.direction;
		var length = _n0.length;
		var xOffset = terezka$line_charts$Internal$Axis$Tick$isPositive(direction) ? (5 + length) : ((-5) - length);
		var anchor = terezka$line_charts$Internal$Axis$Tick$isPositive(direction) ? terezka$line_charts$Internal$Svg$Start : terezka$line_charts$Internal$Svg$End;
		return A2(
			elm$svg$Svg$g,
			_List_fromArray(
				[
					terezka$line_charts$Internal$Svg$transform(
					_List_fromArray(
						[
							A3(terezka$line_charts$Internal$Svg$move, system, position.x, position.y),
							A2(terezka$line_charts$Internal$Svg$offset, xOffset, 5)
						])),
					terezka$line_charts$Internal$Svg$anchorStyle(anchor)
				]),
			_List_fromArray(
				[view]));
	});
var terezka$line_charts$Internal$Svg$yTick = F5(
	function (system, width, userAttributes, x, y) {
		var attributes = A3(
			terezka$line_charts$Internal$Utils$concat,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$class('chart__tick'),
					elm$svg$Svg$Attributes$stroke(
					avh4$elm_color$Color$toCssString(terezka$line_charts$LineChart$Colors$gray))
				]),
			userAttributes,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$x1(
					elm$core$String$fromFloat(
						A2(terezka$line_charts$LineChart$Coordinate$toSvgX, system, x))),
					elm$svg$Svg$Attributes$x2(
					elm$core$String$fromFloat(
						A2(terezka$line_charts$LineChart$Coordinate$toSvgX, system, x) - width)),
					elm$svg$Svg$Attributes$y1(
					elm$core$String$fromFloat(
						A2(terezka$line_charts$LineChart$Coordinate$toSvgY, system, y))),
					elm$svg$Svg$Attributes$y2(
					elm$core$String$fromFloat(
						A2(terezka$line_charts$LineChart$Coordinate$toSvgY, system, y)))
				]));
		return A2(elm$svg$Svg$line, attributes, _List_Nil);
	});
var terezka$line_charts$Internal$Axis$viewVerticalTick = F3(
	function (system, point, tick) {
		var x = point.x;
		var y = point.y;
		return A2(
			elm$svg$Svg$g,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$class('chart__tick')
				]),
			_List_fromArray(
				[
					A5(
					terezka$line_charts$Internal$Svg$yTick,
					system,
					terezka$line_charts$Internal$Axis$lengthOfTick(tick),
					terezka$line_charts$Internal$Axis$attributesTick(tick),
					x,
					y),
					A2(
					terezka$line_charts$Internal$Utils$viewMaybe,
					tick.label,
					A3(terezka$line_charts$Internal$Axis$viewVerticalLabel, system, tick, point))
				]));
	});
var terezka$line_charts$Internal$Axis$viewVerticalTitle = F3(
	function (system, at, _n0) {
		var title = _n0.title;
		var position = at(
			A2(title.position, system.yData, system.y));
		var _n1 = title.offset;
		var xOffset = _n1.a;
		var yOffset = _n1.b;
		return A2(
			elm$svg$Svg$g,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$class('chart__title'),
					terezka$line_charts$Internal$Svg$transform(
					_List_fromArray(
						[
							A3(terezka$line_charts$Internal$Svg$move, system, position.x, position.y),
							A2(terezka$line_charts$Internal$Svg$offset, xOffset + 2, yOffset - 10)
						])),
					terezka$line_charts$Internal$Svg$anchorStyle(terezka$line_charts$Internal$Svg$End)
				]),
			_List_fromArray(
				[title.view]));
	});
var terezka$line_charts$Internal$Axis$Intersection$getX = function (_n0) {
	var func = _n0.a;
	return A2(
		elm$core$Basics$composeL,
		function ($) {
			return $.x;
		},
		func);
};
var terezka$line_charts$Internal$Axis$viewVertical = F3(
	function (system, intersection, _n0) {
		var config = _n0.a;
		var viewConfig = {
			intersection: A2(terezka$line_charts$Internal$Axis$Intersection$getX, intersection, system),
			line: A3(terezka$line_charts$Internal$Axis$Line$config, config.axisLine, system.yData, system.y),
			ticks: A3(terezka$line_charts$Internal$Axis$Ticks$ticks, system.yData, system.y, config.ticks),
			title: terezka$line_charts$Internal$Axis$Title$config(config.title)
		};
		var viewAxisLine = A2(terezka$line_charts$Internal$Axis$viewVerticalAxisLine, system, viewConfig.intersection);
		var at = function (y) {
			return {x: viewConfig.intersection, y: y};
		};
		var viewTick = function (tick) {
			return A3(
				terezka$line_charts$Internal$Axis$viewVerticalTick,
				system,
				at(tick.position),
				tick);
		};
		return A2(
			elm$svg$Svg$g,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$class('chart__axis--vertical')
				]),
			_List_fromArray(
				[
					A3(terezka$line_charts$Internal$Axis$viewVerticalTitle, system, at, viewConfig),
					viewAxisLine(viewConfig.line),
					A2(
					elm$svg$Svg$g,
					_List_fromArray(
						[
							elm$svg$Svg$Attributes$class('chart__ticks')
						]),
					A2(elm$core$List$map, viewTick, viewConfig.ticks))
				]));
	});
var terezka$line_charts$Internal$Container$properties = F2(
	function (f, _n0) {
		var properties_ = _n0.a;
		return f(properties_);
	});
var terezka$line_charts$Internal$Events$toContainerAttributes = F3(
	function (data, system, _n0) {
		var events = _n0.a;
		var order = function (_n1) {
			var outside = _n1.a;
			var event = _n1.b;
			return outside ? elm$core$Maybe$Just(
				A2(event, data, system)) : elm$core$Maybe$Nothing;
		};
		return A2(elm$core$List$filterMap, order, events);
	});
var terezka$line_charts$Internal$Axis$ticks = function (_n0) {
	var config = _n0.a;
	return config.ticks;
};
var elm$core$List$concatMap = F2(
	function (f, list) {
		return elm$core$List$concat(
			A2(elm$core$List$map, f, list));
	});
var elm$svg$Svg$circle = elm$svg$Svg$trustedNode('circle');
var elm$svg$Svg$Attributes$cx = _VirtualDom_attribute('cx');
var elm$svg$Svg$Attributes$cy = _VirtualDom_attribute('cy');
var elm$svg$Svg$Attributes$r = _VirtualDom_attribute('r');
var terezka$line_charts$Internal$Svg$gridDot = F3(
	function (radius, color, point) {
		return A2(
			elm$svg$Svg$circle,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$cx(
					elm$core$String$fromFloat(point.x)),
					elm$svg$Svg$Attributes$cy(
					elm$core$String$fromFloat(point.y)),
					elm$svg$Svg$Attributes$r(
					elm$core$String$fromFloat(radius)),
					elm$svg$Svg$Attributes$fill(
					avh4$elm_color$Color$toCssString(color))
				]),
			_List_Nil);
	});
var terezka$line_charts$LineChart$Coordinate$Point = F2(
	function (x, y) {
		return {x: x, y: y};
	});
var terezka$line_charts$Internal$Grid$viewDots = F5(
	function (system, verticals, horizontals, radius, color) {
		var dot = F2(
			function (x, y) {
				return A2(
					terezka$line_charts$LineChart$Coordinate$toSvg,
					system,
					A2(terezka$line_charts$LineChart$Coordinate$Point, x, y));
			});
		var dots_ = function (g) {
			return A2(
				elm$core$List$map,
				dot(g),
				horizontals);
		};
		var alldots = A2(elm$core$List$concatMap, dots_, verticals);
		return A2(
			elm$core$List$map,
			A2(terezka$line_charts$Internal$Svg$gridDot, radius, color),
			alldots);
	});
var terezka$line_charts$Internal$Svg$horizontalGrid = F3(
	function (system, userAttributes, y) {
		var attributes = A3(
			terezka$line_charts$Internal$Utils$concat,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$stroke(
					avh4$elm_color$Color$toCssString(terezka$line_charts$LineChart$Colors$gray)),
					elm$svg$Svg$Attributes$style('pointer-events: none;')
				]),
			userAttributes,
			_List_Nil);
		return A5(terezka$line_charts$Internal$Svg$horizontal, system, attributes, y, system.x.min, system.x.max);
	});
var terezka$line_charts$Internal$Svg$verticalGrid = F3(
	function (system, userAttributes, x) {
		var attributes = A3(
			terezka$line_charts$Internal$Utils$concat,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$stroke(
					avh4$elm_color$Color$toCssString(terezka$line_charts$LineChart$Colors$gray)),
					elm$svg$Svg$Attributes$style('pointer-events: none;')
				]),
			userAttributes,
			_List_Nil);
		return A5(terezka$line_charts$Internal$Svg$vertical, system, attributes, x, system.y.min, system.y.max);
	});
var terezka$line_charts$Internal$Grid$viewLines = F5(
	function (system, verticals, horizontals, width, color) {
		var attributes = _List_fromArray(
			[
				elm$svg$Svg$Attributes$strokeWidth(
				elm$core$String$fromFloat(width)),
				elm$svg$Svg$Attributes$stroke(
				avh4$elm_color$Color$toCssString(color))
			]);
		return _Utils_ap(
			A2(
				elm$core$List$map,
				A2(terezka$line_charts$Internal$Svg$horizontalGrid, system, attributes),
				horizontals),
			A2(
				elm$core$List$map,
				A2(terezka$line_charts$Internal$Svg$verticalGrid, system, attributes),
				verticals));
	});
var terezka$line_charts$Internal$Grid$view = F4(
	function (system, xAxis, yAxis, grid) {
		var hasGrid = function (tick) {
			return tick.grid ? elm$core$Maybe$Just(tick.position) : elm$core$Maybe$Nothing;
		};
		var horizontals = A2(
			elm$core$List$filterMap,
			hasGrid,
			A3(
				terezka$line_charts$Internal$Axis$Ticks$ticks,
				system.yData,
				system.y,
				terezka$line_charts$Internal$Axis$ticks(yAxis)));
		var verticals = A2(
			elm$core$List$filterMap,
			hasGrid,
			A3(
				terezka$line_charts$Internal$Axis$Ticks$ticks,
				system.xData,
				system.x,
				terezka$line_charts$Internal$Axis$ticks(xAxis)));
		if (grid.$ === 'Dots') {
			var radius = grid.a;
			var color = grid.b;
			return A5(terezka$line_charts$Internal$Grid$viewDots, system, verticals, horizontals, radius, color);
		} else {
			var width = grid.a;
			var color = grid.b;
			return A5(terezka$line_charts$Internal$Grid$viewLines, system, verticals, horizontals, width, color);
		}
	});
var terezka$line_charts$Internal$Junk$addBelow = F2(
	function (below, layers) {
		return _Utils_update(
			layers,
			{
				below: _Utils_ap(below, layers.below)
			});
	});
var terezka$line_charts$Internal$Junk$getLayers = F5(
	function (series, toX, toY, system, _n0) {
		var toLayers = _n0.a;
		return A4(toLayers, series, toX, toY, system);
	});
var terezka$line_charts$Internal$Line$label = function (_n0) {
	var config = _n0.a;
	return config.label;
};
var terezka$line_charts$Internal$Legends$viewFree = F5(
	function (system, placement, viewLabel, line, data) {
		var _n0 = function () {
			if (placement.$ === 'Beginning') {
				return _Utils_Tuple3(data, terezka$line_charts$Internal$Svg$End, -10);
			} else {
				return _Utils_Tuple3(
					elm$core$List$reverse(data),
					terezka$line_charts$Internal$Svg$Start,
					10);
			}
		}();
		var orderedPoints = _n0.a;
		var anchor = _n0.b;
		var xOffset = _n0.c;
		var transform = function (_n3) {
			var x = _n3.x;
			var y = _n3.y;
			return terezka$line_charts$Internal$Svg$transform(
				_List_fromArray(
					[
						A3(terezka$line_charts$Internal$Svg$move, system, x, y),
						A2(terezka$line_charts$Internal$Svg$offset, xOffset, 3)
					]));
		};
		var viewLegend = function (_n2) {
			var point = _n2.point;
			return A2(
				elm$svg$Svg$g,
				_List_fromArray(
					[
						transform(point),
						terezka$line_charts$Internal$Svg$anchorStyle(anchor)
					]),
				_List_fromArray(
					[
						viewLabel(
						terezka$line_charts$Internal$Line$label(line))
					]));
		};
		return A2(
			terezka$line_charts$Internal$Utils$viewMaybe,
			elm$core$List$head(orderedPoints),
			viewLegend);
	});
var terezka$line_charts$Internal$Legends$viewFrees = F3(
	function (_n0, placement, view_) {
		var system = _n0.system;
		var lines = _n0.lines;
		var data = _n0.data;
		return A2(
			elm$svg$Svg$g,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$class('chart__legends')
				]),
			A3(
				elm$core$List$map2,
				A3(terezka$line_charts$Internal$Legends$viewFree, system, placement, view_),
				lines,
				data));
	});
var terezka$line_charts$Internal$Data$Point = F2(
	function (x, y) {
		return {x: x, y: y};
	});
var elm$core$Basics$pi = _Basics_pi;
var elm$core$Basics$sqrt = _Basics_sqrt;
var elm$svg$Svg$Attributes$strokeOpacity = _VirtualDom_attribute('stroke-opacity');
var terezka$line_charts$Internal$Dots$varietyAttributes = F2(
	function (color, variety) {
		switch (variety.$) {
			case 'Empty':
				var width = variety.a;
				return _List_fromArray(
					[
						elm$svg$Svg$Attributes$stroke(
						avh4$elm_color$Color$toCssString(color)),
						elm$svg$Svg$Attributes$strokeWidth(
						elm$core$String$fromInt(width)),
						elm$svg$Svg$Attributes$fill('white')
					]);
			case 'Aura':
				var width = variety.a;
				var opacity = variety.b;
				return _List_fromArray(
					[
						elm$svg$Svg$Attributes$stroke(
						avh4$elm_color$Color$toCssString(color)),
						elm$svg$Svg$Attributes$strokeWidth(
						elm$core$String$fromInt(width)),
						elm$svg$Svg$Attributes$strokeOpacity(
						elm$core$String$fromFloat(opacity)),
						elm$svg$Svg$Attributes$fill(
						avh4$elm_color$Color$toCssString(color))
					]);
			case 'Disconnected':
				var width = variety.a;
				return _List_fromArray(
					[
						elm$svg$Svg$Attributes$stroke('white'),
						elm$svg$Svg$Attributes$strokeWidth(
						elm$core$String$fromInt(width)),
						elm$svg$Svg$Attributes$fill(
						avh4$elm_color$Color$toCssString(color))
					]);
			default:
				return _List_fromArray(
					[
						elm$svg$Svg$Attributes$fill(
						avh4$elm_color$Color$toCssString(color))
					]);
		}
	});
var terezka$line_charts$Internal$Dots$viewCircle = F5(
	function (events, variety, color, area, point) {
		var radius = elm$core$Basics$sqrt(area / elm$core$Basics$pi);
		var attributes = _List_fromArray(
			[
				elm$svg$Svg$Attributes$cx(
				elm$core$String$fromFloat(point.x)),
				elm$svg$Svg$Attributes$cy(
				elm$core$String$fromFloat(point.y)),
				elm$svg$Svg$Attributes$r(
				elm$core$String$fromFloat(radius))
			]);
		return A2(
			elm$svg$Svg$circle,
			_Utils_ap(
				events,
				_Utils_ap(
					attributes,
					A2(terezka$line_charts$Internal$Dots$varietyAttributes, color, variety))),
			_List_Nil);
	});
var terezka$line_charts$Internal$Dots$pathPlus = F2(
	function (area, point) {
		var side = elm$core$Basics$sqrt(area / 5);
		var r6 = side / 2;
		var r3 = side;
		var commands = _List_fromArray(
			[
				'M' + (elm$core$String$fromFloat(point.x - r6) + (' ' + elm$core$String$fromFloat((point.y - r3) - r6))),
				'v' + elm$core$String$fromFloat(r3),
				'h' + elm$core$String$fromFloat(-r3),
				'v' + elm$core$String$fromFloat(r3),
				'h' + elm$core$String$fromFloat(r3),
				'v' + elm$core$String$fromFloat(r3),
				'h' + elm$core$String$fromFloat(r3),
				'v' + elm$core$String$fromFloat(-r3),
				'h' + elm$core$String$fromFloat(r3),
				'v' + elm$core$String$fromFloat(-r3),
				'h' + elm$core$String$fromFloat(-r3),
				'v' + elm$core$String$fromFloat(-r3),
				'h' + elm$core$String$fromFloat(-r3),
				'v' + elm$core$String$fromFloat(r3)
			]);
		return A2(elm$core$String$join, ' ', commands);
	});
var terezka$line_charts$Internal$Dots$viewCross = F5(
	function (events, variety, color, area, point) {
		var rotation = 'rotate(45 ' + (elm$core$String$fromFloat(point.x) + (' ' + (elm$core$String$fromFloat(point.y) + ')')));
		var attributes = _List_fromArray(
			[
				elm$svg$Svg$Attributes$d(
				A2(terezka$line_charts$Internal$Dots$pathPlus, area, point)),
				elm$svg$Svg$Attributes$transform(rotation)
			]);
		return A2(
			elm$svg$Svg$path,
			_Utils_ap(
				events,
				_Utils_ap(
					attributes,
					A2(terezka$line_charts$Internal$Dots$varietyAttributes, color, variety))),
			_List_Nil);
	});
var elm$svg$Svg$rect = elm$svg$Svg$trustedNode('rect');
var elm$svg$Svg$Attributes$height = _VirtualDom_attribute('height');
var elm$svg$Svg$Attributes$width = _VirtualDom_attribute('width');
var terezka$line_charts$Internal$Dots$viewDiamond = F5(
	function (events, variety, color, area, point) {
		var side = elm$core$Basics$sqrt(area);
		var rotation = 'rotate(45 ' + (elm$core$String$fromFloat(point.x) + (' ' + (elm$core$String$fromFloat(point.y) + ')')));
		var attributes = _List_fromArray(
			[
				elm$svg$Svg$Attributes$x(
				elm$core$String$fromFloat(point.x - (side / 2))),
				elm$svg$Svg$Attributes$y(
				elm$core$String$fromFloat(point.y - (side / 2))),
				elm$svg$Svg$Attributes$width(
				elm$core$String$fromFloat(side)),
				elm$svg$Svg$Attributes$height(
				elm$core$String$fromFloat(side)),
				elm$svg$Svg$Attributes$transform(rotation)
			]);
		return A2(
			elm$svg$Svg$rect,
			_Utils_ap(
				events,
				_Utils_ap(
					attributes,
					A2(terezka$line_charts$Internal$Dots$varietyAttributes, color, variety))),
			_List_Nil);
	});
var terezka$line_charts$Internal$Dots$viewPlus = F5(
	function (events, variety, color, area, point) {
		var attributes = _List_fromArray(
			[
				elm$svg$Svg$Attributes$d(
				A2(terezka$line_charts$Internal$Dots$pathPlus, area, point))
			]);
		return A2(
			elm$svg$Svg$path,
			_Utils_ap(
				events,
				_Utils_ap(
					attributes,
					A2(terezka$line_charts$Internal$Dots$varietyAttributes, color, variety))),
			_List_Nil);
	});
var terezka$line_charts$Internal$Dots$viewSquare = F5(
	function (events, variety, color, area, point) {
		var side = elm$core$Basics$sqrt(area);
		var attributes = _List_fromArray(
			[
				elm$svg$Svg$Attributes$x(
				elm$core$String$fromFloat(point.x - (side / 2))),
				elm$svg$Svg$Attributes$y(
				elm$core$String$fromFloat(point.y - (side / 2))),
				elm$svg$Svg$Attributes$width(
				elm$core$String$fromFloat(side)),
				elm$svg$Svg$Attributes$height(
				elm$core$String$fromFloat(side))
			]);
		return A2(
			elm$svg$Svg$rect,
			_Utils_ap(
				events,
				_Utils_ap(
					attributes,
					A2(terezka$line_charts$Internal$Dots$varietyAttributes, color, variety))),
			_List_Nil);
	});
var elm$core$Basics$degrees = function (angleInDegrees) {
	return (angleInDegrees * elm$core$Basics$pi) / 180;
};
var elm$core$Basics$tan = _Basics_tan;
var terezka$line_charts$Internal$Dots$pathTriangle = F2(
	function (area, point) {
		var side = elm$core$Basics$sqrt(
			(area * 4) / elm$core$Basics$sqrt(3));
		var height = (elm$core$Basics$sqrt(3) * side) / 2;
		var fromMiddle = height - ((elm$core$Basics$tan(
			elm$core$Basics$degrees(30)) * side) / 2);
		var commands = _List_fromArray(
			[
				'M' + (elm$core$String$fromFloat(point.x) + (' ' + elm$core$String$fromFloat(point.y - fromMiddle))),
				'l' + (elm$core$String$fromFloat((-side) / 2) + (' ' + elm$core$String$fromFloat(height))),
				'h' + elm$core$String$fromFloat(side),
				'z'
			]);
		return A2(elm$core$String$join, ' ', commands);
	});
var terezka$line_charts$Internal$Dots$viewTriangle = F5(
	function (events, variety, color, area, point) {
		var attributes = _List_fromArray(
			[
				elm$svg$Svg$Attributes$d(
				A2(terezka$line_charts$Internal$Dots$pathTriangle, area, point))
			]);
		return A2(
			elm$svg$Svg$path,
			_Utils_ap(
				events,
				_Utils_ap(
					attributes,
					A2(terezka$line_charts$Internal$Dots$varietyAttributes, color, variety))),
			_List_Nil);
	});
var terezka$line_charts$Internal$Dots$viewShape = F5(
	function (system, _n0, shape, color, point) {
		var radius = _n0.radius;
		var variety = _n0.variety;
		var view_ = function () {
			switch (shape.$) {
				case 'Circle':
					return terezka$line_charts$Internal$Dots$viewCircle;
				case 'Triangle':
					return terezka$line_charts$Internal$Dots$viewTriangle;
				case 'Square':
					return terezka$line_charts$Internal$Dots$viewSquare;
				case 'Diamond':
					return terezka$line_charts$Internal$Dots$viewDiamond;
				case 'Cross':
					return terezka$line_charts$Internal$Dots$viewCross;
				case 'Plus':
					return terezka$line_charts$Internal$Dots$viewPlus;
				default:
					return F5(
						function (_n2, _n3, _n4, _n5, _n6) {
							return elm$svg$Svg$text('');
						});
			}
		}();
		var size = (2 * elm$core$Basics$pi) * radius;
		var pointSvg = A2(terezka$line_charts$LineChart$Coordinate$toSvg, system, point);
		return A5(view_, _List_Nil, variety, color, size, pointSvg);
	});
var terezka$line_charts$Internal$Dots$viewSample = F5(
	function (_n0, shape, color, system, data) {
		var config = _n0.a;
		var _n1 = config.legend(
			A2(
				elm$core$List$map,
				function ($) {
					return $.user;
				},
				data));
		var style_ = _n1.a;
		return A4(terezka$line_charts$Internal$Dots$viewShape, system, style_, shape, color);
	});
var terezka$line_charts$Internal$Line$color = F3(
	function (_n0, _n1, data_) {
		var config = _n0.a;
		var line_ = _n1.a;
		var _n2 = config(
			A2(
				elm$core$List$map,
				function ($) {
					return $.user;
				},
				data_));
		var style_ = _n2.a;
		return style_.color(line_.color);
	});
var terezka$line_charts$Internal$Line$shape = function (_n0) {
	var config = _n0.a;
	return config.shape;
};
var elm$svg$Svg$Attributes$fillOpacity = _VirtualDom_attribute('fill-opacity');
var terezka$line_charts$Internal$Area$hasArea = function (config) {
	switch (config.$) {
		case 'None':
			return false;
		case 'Normal':
			return true;
		case 'Stacked':
			return true;
		default:
			return true;
	}
};
var terezka$line_charts$Internal$Area$opacity = function (config) {
	switch (config.$) {
		case 'None':
			return 0;
		case 'Normal':
			var opacity_ = config.a;
			return opacity_;
		case 'Stacked':
			var opacity_ = config.a;
			return opacity_;
		default:
			var opacity_ = config.a;
			return opacity_;
	}
};
var terezka$line_charts$Internal$Line$toAreaAttributes = F3(
	function (_n0, _n1, area) {
		var serie = _n0.a;
		var style_ = _n1.a;
		return _List_fromArray(
			[
				elm$svg$Svg$Attributes$class('chart__interpolation__area__fragment'),
				elm$svg$Svg$Attributes$fill(
				avh4$elm_color$Color$toCssString(
					style_.color(serie.color)))
			]);
	});
var elm$svg$Svg$Attributes$strokeDasharray = _VirtualDom_attribute('stroke-dasharray');
var terezka$line_charts$Internal$Line$toSeriesAttributes = F2(
	function (_n0, _n1) {
		var serie = _n0.a;
		var style_ = _n1.a;
		return _List_fromArray(
			[
				elm$svg$Svg$Attributes$style('pointer-events: none;'),
				elm$svg$Svg$Attributes$class('chart__interpolation__line__fragment'),
				elm$svg$Svg$Attributes$stroke(
				avh4$elm_color$Color$toCssString(
					style_.color(serie.color))),
				elm$svg$Svg$Attributes$strokeWidth(
				elm$core$String$fromFloat(style_.width)),
				elm$svg$Svg$Attributes$strokeDasharray(
				A2(
					elm$core$String$join,
					' ',
					A2(elm$core$List$map, elm$core$String$fromFloat, serie.dashing))),
				elm$svg$Svg$Attributes$fill('transparent')
			]);
	});
var terezka$line_charts$Internal$Utils$viewIf = F2(
	function (condition, view) {
		return condition ? view(_Utils_Tuple0) : elm$svg$Svg$text('');
	});
var terezka$line_charts$Internal$Line$viewSample = F5(
	function (_n0, line_, area, data_, sampleWidth) {
		var look = _n0.a;
		var style_ = look(
			A2(
				elm$core$List$map,
				function ($) {
					return $.user;
				},
				data_));
		var sizeAttributes = _List_fromArray(
			[
				elm$svg$Svg$Attributes$x1('0'),
				elm$svg$Svg$Attributes$y1('0'),
				elm$svg$Svg$Attributes$x2(
				elm$core$String$fromFloat(sampleWidth)),
				elm$svg$Svg$Attributes$y2('0')
			]);
		var rectangleAttributes = _List_fromArray(
			[
				elm$svg$Svg$Attributes$x('0'),
				elm$svg$Svg$Attributes$y('0'),
				elm$svg$Svg$Attributes$height('9'),
				elm$svg$Svg$Attributes$width(
				elm$core$String$fromFloat(sampleWidth))
			]);
		var lineAttributes = A2(terezka$line_charts$Internal$Line$toSeriesAttributes, line_, style_);
		var areaAttributes = A2(
			elm$core$List$cons,
			elm$svg$Svg$Attributes$fillOpacity(
				elm$core$String$fromFloat(
					terezka$line_charts$Internal$Area$opacity(area))),
			A3(terezka$line_charts$Internal$Line$toAreaAttributes, line_, style_, area));
		var viewRectangle = function (_n1) {
			return A2(
				elm$svg$Svg$rect,
				_Utils_ap(areaAttributes, rectangleAttributes),
				_List_Nil);
		};
		return A2(
			elm$svg$Svg$g,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					elm$svg$Svg$line,
					_Utils_ap(lineAttributes, sizeAttributes),
					_List_Nil),
					A2(
					terezka$line_charts$Internal$Utils$viewIf,
					terezka$line_charts$Internal$Area$hasArea(area),
					viewRectangle)
				]));
	});
var terezka$line_charts$LineChart$Coordinate$scaleDataX = F2(
	function (system, value) {
		return (value * terezka$line_charts$Internal$Coordinate$reachX(system)) / terezka$line_charts$Internal$Coordinate$lengthX(system);
	});
var terezka$line_charts$LineChart$Coordinate$toDataX = F2(
	function (system, value) {
		return system.x.min + A2(terezka$line_charts$LineChart$Coordinate$scaleDataX, system, value - system.frame.margin.left);
	});
var terezka$line_charts$LineChart$Coordinate$scaleDataY = F2(
	function (system, value) {
		return (value * terezka$line_charts$Internal$Coordinate$reachY(system)) / terezka$line_charts$Internal$Coordinate$lengthY(system);
	});
var terezka$line_charts$LineChart$Coordinate$toDataY = F2(
	function (system, value) {
		return system.y.max - A2(terezka$line_charts$LineChart$Coordinate$scaleDataY, system, value - system.frame.margin.top);
	});
var terezka$line_charts$LineChart$Coordinate$toData = F2(
	function (system, point) {
		return {
			x: A2(terezka$line_charts$LineChart$Coordinate$toDataX, system, point.x),
			y: A2(terezka$line_charts$LineChart$Coordinate$toDataY, system, point.y)
		};
	});
var terezka$line_charts$Internal$Legends$viewSample = F4(
	function (_n0, sampleWidth, line, data) {
		var system = _n0.system;
		var lineConfig = _n0.lineConfig;
		var dotsConfig = _n0.dotsConfig;
		var area = _n0.area;
		var shape = terezka$line_charts$Internal$Line$shape(line);
		var dotPosition = A2(
			terezka$line_charts$LineChart$Coordinate$toData,
			system,
			A2(terezka$line_charts$Internal$Data$Point, sampleWidth / 2, 0));
		var color = A3(terezka$line_charts$Internal$Line$color, lineConfig, line, data);
		return A2(
			elm$svg$Svg$g,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$class('chart__sample')
				]),
			_List_fromArray(
				[
					A5(terezka$line_charts$Internal$Line$viewSample, lineConfig, line, area, data, sampleWidth),
					A6(terezka$line_charts$Internal$Dots$viewSample, dotsConfig, shape, color, system, data, dotPosition)
				]));
	});
var terezka$line_charts$Internal$Legends$viewGrouped = F3(
	function (_arguments, sampleWidth, container) {
		var toLegend = F2(
			function (line, data) {
				return {
					label: terezka$line_charts$Internal$Line$label(line),
					sample: A4(terezka$line_charts$Internal$Legends$viewSample, _arguments, sampleWidth, line, data)
				};
			});
		var legends = A3(elm$core$List$map2, toLegend, _arguments.lines, _arguments.data);
		return A2(container, _arguments.system, legends);
	});
var terezka$line_charts$Internal$Legends$view = function (_arguments) {
	var _n0 = _arguments.legends;
	switch (_n0.$) {
		case 'Free':
			var placement = _n0.a;
			var view_ = _n0.b;
			return A3(terezka$line_charts$Internal$Legends$viewFrees, _arguments, placement, view_);
		case 'Grouped':
			var sampleWidth = _n0.a;
			var container = _n0.b;
			return A3(
				terezka$line_charts$Internal$Legends$viewGrouped,
				_arguments,
				sampleWidth,
				container(_arguments));
		default:
			return elm$svg$Svg$text('');
	}
};
var terezka$line_charts$Internal$Line$data = function (_n0) {
	var config = _n0.a;
	return config.data;
};
var terezka$line_charts$Internal$Area$opacityContainer = function (config) {
	switch (config.$) {
		case 'None':
			return 1;
		case 'Normal':
			var opacity_ = config.a;
			return 1;
		case 'Stacked':
			var opacity_ = config.a;
			return opacity_;
		default:
			var opacity_ = config.a;
			return opacity_;
	}
};
var elm$core$List$map3 = _List_map3;
var terezka$line_charts$Internal$Line$viewNormal = function (_n0) {
	var areas = _n0.a;
	var lines = _n0.b;
	var dots = _n0.c;
	var view_ = F3(
		function (area_, line_, dots_) {
			return A2(
				elm$svg$Svg$g,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$class('chart__line')
					]),
				_List_fromArray(
					[area_, line_, dots_]));
		});
	return A4(elm$core$List$map3, view_, areas, lines, dots);
};
var elm$core$Basics$clamp = F3(
	function (low, high, number) {
		return (_Utils_cmp(number, low) < 0) ? low : ((_Utils_cmp(number, high) > 0) ? high : number);
	});
var terezka$line_charts$Internal$Data$isWithinRange = F2(
	function (system, point) {
		return _Utils_eq(
			A3(elm$core$Basics$clamp, system.x.min, system.x.max, point.x),
			point.x) && _Utils_eq(
			A3(elm$core$Basics$clamp, system.y.min, system.y.max, point.y),
			point.y);
	});
var elm$core$Tuple$mapFirst = F2(
	function (func, _n0) {
		var x = _n0.a;
		var y = _n0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var elm$core$Tuple$mapSecond = F2(
	function (func, _n0) {
		var x = _n0.a;
		var y = _n0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var terezka$line_charts$Internal$Interpolation$linear = elm$core$List$map(
	elm$core$List$map(terezka$line_charts$Internal$Path$Line));
var terezka$line_charts$Internal$Interpolation$First = {$: 'First'};
var terezka$line_charts$Internal$Interpolation$Previous = function (a) {
	return {$: 'Previous', a: a};
};
var terezka$line_charts$Internal$Interpolation$monotoneCurve = F4(
	function (point0, point1, tangent0, tangent1) {
		var dx = (point1.x - point0.x) / 3;
		return A3(
			terezka$line_charts$Internal$Path$CubicBeziers,
			{x: point0.x + dx, y: point0.y + (dx * tangent0)},
			{x: point1.x - dx, y: point1.y - (dx * tangent1)},
			point1);
	});
var terezka$line_charts$Internal$Interpolation$slope2 = F3(
	function (point0, point1, t) {
		var h = point1.x - point0.x;
		return h ? ((((3 * (point1.y - point0.y)) / h) - t) / 2) : t;
	});
var elm$core$Basics$abs = function (n) {
	return (n < 0) ? (-n) : n;
};
var elm$core$Basics$isNaN = _Basics_isNaN;
var elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var terezka$line_charts$Internal$Interpolation$sign = function (x) {
	return (x < 0) ? (-1) : 1;
};
var terezka$line_charts$Internal$Interpolation$toH = F2(
	function (h0, h1) {
		return (!h0) ? ((h1 < 0) ? (0 * (-1)) : h1) : h0;
	});
var terezka$line_charts$Internal$Interpolation$slope3 = F3(
	function (point0, point1, point2) {
		var h1 = point2.x - point1.x;
		var h0 = point1.x - point0.x;
		var s0h = A2(terezka$line_charts$Internal$Interpolation$toH, h0, h1);
		var s0 = (point1.y - point0.y) / s0h;
		var s1h = A2(terezka$line_charts$Internal$Interpolation$toH, h1, h0);
		var s1 = (point2.y - point1.y) / s1h;
		var p = ((s0 * h1) + (s1 * h0)) / (h0 + h1);
		var slope = (terezka$line_charts$Internal$Interpolation$sign(s0) + terezka$line_charts$Internal$Interpolation$sign(s1)) * A2(
			elm$core$Basics$min,
			A2(
				elm$core$Basics$min,
				elm$core$Basics$abs(s0),
				elm$core$Basics$abs(s1)),
			0.5 * elm$core$Basics$abs(p));
		return elm$core$Basics$isNaN(slope) ? 0 : slope;
	});
var terezka$line_charts$Internal$Interpolation$monotonePart = F2(
	function (points, _n0) {
		var tangent = _n0.a;
		var commands = _n0.b;
		var _n1 = _Utils_Tuple2(tangent, points);
		_n1$4:
		while (true) {
			if (_n1.a.$ === 'First') {
				if (_n1.b.b && _n1.b.b.b) {
					if (_n1.b.b.b.b) {
						var _n2 = _n1.a;
						var _n3 = _n1.b;
						var p0 = _n3.a;
						var _n4 = _n3.b;
						var p1 = _n4.a;
						var _n5 = _n4.b;
						var p2 = _n5.a;
						var rest = _n5.b;
						var t1 = A3(terezka$line_charts$Internal$Interpolation$slope3, p0, p1, p2);
						var t0 = A3(terezka$line_charts$Internal$Interpolation$slope2, p0, p1, t1);
						return A2(
							terezka$line_charts$Internal$Interpolation$monotonePart,
							A2(
								elm$core$List$cons,
								p1,
								A2(elm$core$List$cons, p2, rest)),
							_Utils_Tuple2(
								terezka$line_charts$Internal$Interpolation$Previous(t1),
								_Utils_ap(
									commands,
									_List_fromArray(
										[
											A4(terezka$line_charts$Internal$Interpolation$monotoneCurve, p0, p1, t0, t1)
										]))));
					} else {
						var _n9 = _n1.a;
						var _n10 = _n1.b;
						var p0 = _n10.a;
						var _n11 = _n10.b;
						var p1 = _n11.a;
						var t1 = A3(terezka$line_charts$Internal$Interpolation$slope3, p0, p1, p1);
						return _Utils_Tuple2(
							terezka$line_charts$Internal$Interpolation$Previous(t1),
							_Utils_ap(
								commands,
								_List_fromArray(
									[
										A4(terezka$line_charts$Internal$Interpolation$monotoneCurve, p0, p1, t1, t1),
										terezka$line_charts$Internal$Path$Line(p1)
									])));
					}
				} else {
					break _n1$4;
				}
			} else {
				if (_n1.b.b && _n1.b.b.b) {
					if (_n1.b.b.b.b) {
						var t0 = _n1.a.a;
						var _n6 = _n1.b;
						var p0 = _n6.a;
						var _n7 = _n6.b;
						var p1 = _n7.a;
						var _n8 = _n7.b;
						var p2 = _n8.a;
						var rest = _n8.b;
						var t1 = A3(terezka$line_charts$Internal$Interpolation$slope3, p0, p1, p2);
						return A2(
							terezka$line_charts$Internal$Interpolation$monotonePart,
							A2(
								elm$core$List$cons,
								p1,
								A2(elm$core$List$cons, p2, rest)),
							_Utils_Tuple2(
								terezka$line_charts$Internal$Interpolation$Previous(t1),
								_Utils_ap(
									commands,
									_List_fromArray(
										[
											A4(terezka$line_charts$Internal$Interpolation$monotoneCurve, p0, p1, t0, t1)
										]))));
					} else {
						var t0 = _n1.a.a;
						var _n12 = _n1.b;
						var p0 = _n12.a;
						var _n13 = _n12.b;
						var p1 = _n13.a;
						var t1 = A3(terezka$line_charts$Internal$Interpolation$slope3, p0, p1, p1);
						return _Utils_Tuple2(
							terezka$line_charts$Internal$Interpolation$Previous(t1),
							_Utils_ap(
								commands,
								_List_fromArray(
									[
										A4(terezka$line_charts$Internal$Interpolation$monotoneCurve, p0, p1, t0, t1),
										terezka$line_charts$Internal$Path$Line(p1)
									])));
					}
				} else {
					break _n1$4;
				}
			}
		}
		return _Utils_Tuple2(tangent, commands);
	});
var terezka$line_charts$Internal$Interpolation$monotoneSection = F2(
	function (points, _n0) {
		var tangent = _n0.a;
		var acc = _n0.b;
		var _n1 = function () {
			if (points.b) {
				var p0 = points.a;
				var rest = points.b;
				return A2(
					terezka$line_charts$Internal$Interpolation$monotonePart,
					A2(elm$core$List$cons, p0, rest),
					_Utils_Tuple2(
						tangent,
						_List_fromArray(
							[
								terezka$line_charts$Internal$Path$Line(p0)
							])));
			} else {
				return _Utils_Tuple2(tangent, _List_Nil);
			}
		}();
		var t0 = _n1.a;
		var commands = _n1.b;
		return _Utils_Tuple2(
			t0,
			A2(elm$core$List$cons, commands, acc));
	});
var terezka$line_charts$Internal$Interpolation$monotone = function (sections) {
	return A3(
		elm$core$List$foldr,
		terezka$line_charts$Internal$Interpolation$monotoneSection,
		_Utils_Tuple2(terezka$line_charts$Internal$Interpolation$First, _List_Nil),
		sections).b;
};
var terezka$line_charts$Internal$Interpolation$after = F2(
	function (a, b) {
		return _List_fromArray(
			[
				a,
				A2(terezka$line_charts$Internal$Data$Point, b.x, a.y),
				b
			]);
	});
var terezka$line_charts$Internal$Interpolation$stepped = function (sections) {
	var expand = F2(
		function (result, section) {
			expand:
			while (true) {
				if (section.a.b) {
					if (section.a.b.b) {
						var _n1 = section.a;
						var a = _n1.a;
						var _n2 = _n1.b;
						var b = _n2.a;
						var rest = _n2.b;
						var broken = section.b;
						var $temp$result = _Utils_ap(
							result,
							A2(terezka$line_charts$Internal$Interpolation$after, a, b)),
							$temp$section = _Utils_Tuple2(
							A2(elm$core$List$cons, b, rest),
							broken);
						result = $temp$result;
						section = $temp$section;
						continue expand;
					} else {
						if (section.b.$ === 'Just') {
							var _n3 = section.a;
							var last = _n3.a;
							var broken = section.b.a;
							return _Utils_ap(
								result,
								_List_fromArray(
									[
										A2(terezka$line_charts$Internal$Data$Point, broken.x, last.y)
									]));
						} else {
							var _n4 = section.a;
							var last = _n4.a;
							var _n5 = section.b;
							return result;
						}
					}
				} else {
					return result;
				}
			}
		});
	return A2(
		elm$core$List$map,
		A2(
			elm$core$Basics$composeR,
			expand(_List_Nil),
			elm$core$List$map(terezka$line_charts$Internal$Path$Line)),
		sections);
};
var terezka$line_charts$Internal$Interpolation$toCommands = F2(
	function (interpolation, data) {
		var pointsSections = elm$core$List$map(
			A2(
				elm$core$Basics$composeR,
				elm$core$Tuple$mapFirst(
					elm$core$List$map(
						function ($) {
							return $.point;
						})),
				elm$core$Tuple$mapSecond(
					elm$core$Maybe$map(
						function ($) {
							return $.point;
						}))));
		var points = elm$core$List$map(
			A2(
				elm$core$Basics$composeR,
				elm$core$Tuple$first,
				elm$core$List$map(
					function ($) {
						return $.point;
					})));
		switch (interpolation.$) {
			case 'Linear':
				return terezka$line_charts$Internal$Interpolation$linear(
					points(data));
			case 'Monotone':
				return terezka$line_charts$Internal$Interpolation$monotone(
					points(data));
			default:
				return terezka$line_charts$Internal$Interpolation$stepped(
					pointsSections(data));
		}
	});
var terezka$line_charts$Internal$Area$opacitySingle = function (config) {
	switch (config.$) {
		case 'None':
			return 0;
		case 'Normal':
			var opacity_ = config.a;
			return opacity_;
		case 'Stacked':
			var opacity_ = config.a;
			return 1;
		default:
			var opacity_ = config.a;
			return 1;
	}
};
var terezka$line_charts$Internal$Path$toPoint = function (command) {
	switch (command.$) {
		case 'Close':
			return A2(terezka$line_charts$LineChart$Coordinate$Point, 0, 0);
		case 'Move':
			var p = command.a;
			return p;
		case 'Line':
			var p = command.a;
			return p;
		case 'Horizontal':
			var x = command.a;
			return A2(terezka$line_charts$LineChart$Coordinate$Point, x, 0);
		case 'Vertical':
			var y = command.a;
			return A2(terezka$line_charts$LineChart$Coordinate$Point, 0, y);
		case 'CubicBeziers':
			var c1 = command.a;
			var c2 = command.b;
			var p = command.c;
			return p;
		case 'CubicBeziersShort':
			var c1 = command.a;
			var p = command.b;
			return p;
		case 'QuadraticBeziers':
			var c1 = command.a;
			var p = command.b;
			return p;
		case 'QuadraticBeziersShort':
			var p = command.a;
			return p;
		default:
			var rx = command.a;
			var ry = command.b;
			var xAxisRotation = command.c;
			var largeArcFlag = command.d;
			var sweepFlag = command.e;
			var p = command.f;
			return p;
	}
};
var terezka$line_charts$Internal$Utils$towardsZero = function (_n0) {
	var max = _n0.max;
	var min = _n0.min;
	return A3(elm$core$Basics$clamp, min, max, 0);
};
var terezka$line_charts$Internal$Utils$last = function (list) {
	return elm$core$List$head(
		A2(
			elm$core$List$drop,
			elm$core$List$length(list) - 1,
			list));
};
var terezka$line_charts$Internal$Utils$lastSafe = F2(
	function (first, rest) {
		return A2(
			elm$core$Maybe$withDefault,
			first,
			terezka$line_charts$Internal$Utils$last(rest));
	});
var terezka$line_charts$Internal$Utils$viewWithEdges = F2(
	function (stuff, view) {
		if (stuff.b) {
			var first = stuff.a;
			var rest = stuff.b;
			return A3(
				view,
				first,
				rest,
				A2(terezka$line_charts$Internal$Utils$lastSafe, first, rest));
		} else {
			return elm$svg$Svg$text('');
		}
	});
var terezka$line_charts$LineChart$Junk$withinChartArea = terezka$line_charts$Internal$Svg$withinChartArea;
var terezka$line_charts$Internal$Line$viewArea = F5(
	function (_n0, line_, style_, interpolation, data_) {
		var system = _n0.system;
		var lineConfig = _n0.lineConfig;
		var area = _n0.area;
		var ground = function (point) {
			return A2(
				terezka$line_charts$Internal$Data$Point,
				point.x,
				terezka$line_charts$Internal$Utils$towardsZero(system.y));
		};
		var commands = F3(
			function (first, middle, last) {
				return A3(
					terezka$line_charts$Internal$Utils$concat,
					_List_fromArray(
						[
							terezka$line_charts$Internal$Path$Move(
							ground(
								terezka$line_charts$Internal$Path$toPoint(first))),
							terezka$line_charts$Internal$Path$Line(
							terezka$line_charts$Internal$Path$toPoint(first))
						]),
					interpolation,
					_List_fromArray(
						[
							terezka$line_charts$Internal$Path$Line(
							ground(
								terezka$line_charts$Internal$Path$toPoint(last)))
						]));
			});
		var attributes = A2(
			elm$core$List$cons,
			terezka$line_charts$LineChart$Junk$withinChartArea(system),
			A2(
				elm$core$List$cons,
				elm$svg$Svg$Attributes$fillOpacity(
					elm$core$String$fromFloat(
						terezka$line_charts$Internal$Area$opacitySingle(area))),
				A3(terezka$line_charts$Internal$Line$toAreaAttributes, line_, style_, area)));
		return A2(
			terezka$line_charts$Internal$Utils$viewWithEdges,
			interpolation,
			F3(
				function (first, middle, last) {
					return A3(
						terezka$line_charts$Internal$Path$view,
						system,
						attributes,
						A3(commands, first, middle, last));
				}));
	});
var terezka$line_charts$Internal$Dots$view = F2(
	function (_n0, data) {
		var system = _n0.system;
		var dotsConfig = _n0.dotsConfig;
		var shape = _n0.shape;
		var color = _n0.color;
		var _n1 = dotsConfig;
		var config = _n1.a;
		var _n2 = config.individual(data.user);
		var style_ = _n2.a;
		return A5(terezka$line_charts$Internal$Dots$viewShape, system, style_, shape, color, data.point);
	});
var terezka$line_charts$Internal$Line$viewDot = F3(
	function (_arguments, _n0, _n1) {
		var lineConfig = _n0.a;
		var style_ = _n1.a;
		return terezka$line_charts$Internal$Dots$view(
			{
				color: style_.color(lineConfig.color),
				dotsConfig: _arguments.dotsConfig,
				shape: lineConfig.shape,
				system: _arguments.system
			});
	});
var terezka$line_charts$Internal$Utils$viewWithFirst = F2(
	function (stuff, view) {
		if (stuff.b) {
			var first = stuff.a;
			var rest = stuff.b;
			return A2(view, first, rest);
		} else {
			return elm$svg$Svg$text('');
		}
	});
var terezka$line_charts$Internal$Line$viewSeries = F5(
	function (_n0, line_, style_, interpolation, data_) {
		var system = _n0.system;
		var lineConfig = _n0.lineConfig;
		var attributes = A2(
			elm$core$List$cons,
			terezka$line_charts$LineChart$Junk$withinChartArea(system),
			A2(terezka$line_charts$Internal$Line$toSeriesAttributes, line_, style_));
		return A2(
			terezka$line_charts$Internal$Utils$viewWithFirst,
			data_,
			F2(
				function (first, _n1) {
					return A3(
						terezka$line_charts$Internal$Path$view,
						system,
						attributes,
						A2(
							elm$core$List$cons,
							terezka$line_charts$Internal$Path$Move(first.point),
							interpolation));
				}));
	});
var terezka$line_charts$Internal$Utils$part = F4(
	function (isReal, points, current, parts) {
		part:
		while (true) {
			if (points.b) {
				var first = points.a;
				var rest = points.b;
				if (isReal(first)) {
					var $temp$isReal = isReal,
						$temp$points = rest,
						$temp$current = _Utils_ap(
						current,
						_List_fromArray(
							[first])),
						$temp$parts = parts;
					isReal = $temp$isReal;
					points = $temp$points;
					current = $temp$current;
					parts = $temp$parts;
					continue part;
				} else {
					var $temp$isReal = isReal,
						$temp$points = rest,
						$temp$current = _List_Nil,
						$temp$parts = A2(
						elm$core$List$cons,
						_Utils_Tuple2(
							current,
							elm$core$Maybe$Just(first)),
						parts);
					isReal = $temp$isReal;
					points = $temp$points;
					current = $temp$current;
					parts = $temp$parts;
					continue part;
				}
			} else {
				return A2(
					elm$core$List$cons,
					_Utils_Tuple2(current, elm$core$Maybe$Nothing),
					parts);
			}
		}
	});
var terezka$line_charts$Internal$Line$viewSingle = F3(
	function (_arguments, line_, data_) {
		var style_ = function (_n1) {
			var look = _n1.a;
			return look(
				A2(
					elm$core$List$map,
					function ($) {
						return $.user;
					},
					data_));
		}(_arguments.lineConfig);
		var sections = A4(
			terezka$line_charts$Internal$Utils$part,
			function ($) {
				return $.isReal;
			},
			data_,
			_List_Nil,
			_List_Nil);
		var parts = A2(elm$core$List$map, elm$core$Tuple$first, sections);
		var viewDots = A2(
			elm$svg$Svg$g,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$class('chart__dots')
				]),
			A2(
				elm$core$List$map,
				A3(terezka$line_charts$Internal$Line$viewDot, _arguments, line_, style_),
				A2(
					elm$core$List$filter,
					A2(
						elm$core$Basics$composeL,
						terezka$line_charts$Internal$Data$isWithinRange(_arguments.system),
						function ($) {
							return $.point;
						}),
					elm$core$List$concat(parts))));
		var commands = A2(terezka$line_charts$Internal$Interpolation$toCommands, _arguments.interpolation, sections);
		var viewAreas = function (_n0) {
			return A2(
				elm$svg$Svg$g,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$class('chart__interpolation__area')
					]),
				A3(
					elm$core$List$map2,
					A3(terezka$line_charts$Internal$Line$viewArea, _arguments, line_, style_),
					commands,
					parts));
		};
		var viewSeriess = A2(
			elm$svg$Svg$g,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$class('chart__interpolation__line')
				]),
			A3(
				elm$core$List$map2,
				A3(terezka$line_charts$Internal$Line$viewSeries, _arguments, line_, style_),
				commands,
				parts));
		return _Utils_Tuple3(
			A2(
				terezka$line_charts$Internal$Utils$viewIf,
				terezka$line_charts$Internal$Area$hasArea(_arguments.area),
				viewAreas),
			viewSeriess,
			viewDots);
	});
var terezka$line_charts$Internal$Line$viewStacked = F2(
	function (area, _n0) {
		var areas = _n0.a;
		var lines = _n0.b;
		var dots = _n0.c;
		var toList = F2(
			function (l, d) {
				return _List_fromArray(
					[l, d]);
			});
		var opacity = 'opacity: ' + elm$core$String$fromFloat(
			terezka$line_charts$Internal$Area$opacityContainer(area));
		var bottoms = elm$core$List$concat(
			A3(elm$core$List$map2, toList, lines, dots));
		return _List_fromArray(
			[
				A2(
				elm$svg$Svg$g,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$class('chart__bottoms'),
						elm$svg$Svg$Attributes$style(opacity)
					]),
				areas),
				A2(
				elm$svg$Svg$g,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$class('chart__tops')
					]),
				bottoms)
			]);
	});
var terezka$line_charts$Internal$Utils$unzip3 = function (pairs) {
	var step = F2(
		function (_n0, _n1) {
			var a = _n0.a;
			var b = _n0.b;
			var c = _n0.c;
			var aas = _n1.a;
			var bs = _n1.b;
			var cs = _n1.c;
			return _Utils_Tuple3(
				A2(elm$core$List$cons, a, aas),
				A2(elm$core$List$cons, b, bs),
				A2(elm$core$List$cons, c, cs));
		});
	return A3(
		elm$core$List$foldr,
		step,
		_Utils_Tuple3(_List_Nil, _List_Nil, _List_Nil),
		pairs);
};
var terezka$line_charts$Internal$Line$view = F3(
	function (_arguments, lines, datas) {
		var container = elm$svg$Svg$g(
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$class('chart__lines')
				]));
		var buildSeriesViews = (terezka$line_charts$Internal$Area$opacityContainer(_arguments.area) < 1) ? terezka$line_charts$Internal$Line$viewStacked(_arguments.area) : terezka$line_charts$Internal$Line$viewNormal;
		return container(
			buildSeriesViews(
				terezka$line_charts$Internal$Utils$unzip3(
					A3(
						elm$core$List$map2,
						terezka$line_charts$Internal$Line$viewSingle(_arguments),
						lines,
						datas))));
	});
var terezka$line_charts$Internal$Events$toChartAttributes = F3(
	function (data, system, _n0) {
		var events = _n0.a;
		var order = function (_n1) {
			var outside = _n1.a;
			var event = _n1.b;
			return outside ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(
				A2(event, data, system));
		};
		return A2(elm$core$List$filterMap, order, events);
	});
var terezka$line_charts$LineChart$chartAreaAttributes = function (system) {
	return _List_fromArray(
		[
			elm$svg$Svg$Attributes$x(
			elm$core$String$fromFloat(system.frame.margin.left)),
			elm$svg$Svg$Attributes$y(
			elm$core$String$fromFloat(system.frame.margin.top)),
			elm$svg$Svg$Attributes$width(
			elm$core$String$fromFloat(
				terezka$line_charts$Internal$Coordinate$lengthX(system))),
			elm$svg$Svg$Attributes$height(
			elm$core$String$fromFloat(
				terezka$line_charts$Internal$Coordinate$lengthY(system)))
		]);
};
var terezka$line_charts$LineChart$chartAreaPlatform = F3(
	function (config, data, system) {
		var attributes = elm$core$List$concat(
			_List_fromArray(
				[
					_List_fromArray(
					[
						elm$svg$Svg$Attributes$fill('transparent')
					]),
					terezka$line_charts$LineChart$chartAreaAttributes(system),
					A3(terezka$line_charts$Internal$Events$toChartAttributes, data, system, config.events)
				]));
		return A2(elm$svg$Svg$rect, attributes, _List_Nil);
	});
var elm$svg$Svg$clipPath = elm$svg$Svg$trustedNode('clipPath');
var terezka$line_charts$LineChart$clipPath = function (system) {
	return A2(
		elm$svg$Svg$clipPath,
		_List_fromArray(
			[
				elm$svg$Svg$Attributes$id(
				terezka$line_charts$Internal$Utils$toChartAreaId(system.id))
			]),
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$rect,
				terezka$line_charts$LineChart$chartAreaAttributes(system),
				_List_Nil)
			]));
};
var terezka$line_charts$Internal$Container$sizeStyles = F3(
	function (_n0, width, height) {
		var properties_ = _n0.a;
		var _n1 = properties_.size;
		if (_n1.$ === 'Static') {
			return _List_fromArray(
				[
					A2(
					elm$html$Html$Attributes$style,
					'height',
					elm$core$String$fromFloat(height) + 'px'),
					A2(
					elm$html$Html$Attributes$style,
					'width',
					elm$core$String$fromFloat(width) + 'px')
				]);
		} else {
			return _List_Nil;
		}
	});
var terezka$line_charts$LineChart$container = F4(
	function (config, _n0, junkHtml, plot) {
		var frame = _n0.frame;
		var userAttributes = A2(
			terezka$line_charts$Internal$Container$properties,
			function ($) {
				return $.attributesHtml;
			},
			config.container);
		var sizeStyles = A3(terezka$line_charts$Internal$Container$sizeStyles, config.container, frame.size.width, frame.size.height);
		var styles = A2(
			elm$core$List$cons,
			A2(elm$html$Html$Attributes$style, 'position', 'relative'),
			sizeStyles);
		return A2(
			elm$html$Html$div,
			_Utils_ap(styles, userAttributes),
			A2(elm$core$List$cons, plot, junkHtml));
	});
var terezka$line_charts$Internal$Data$Data = F3(
	function (user, point, isReal) {
		return {isReal: isReal, point: point, user: user};
	});
var terezka$line_charts$LineChart$setY = F2(
	function (datum, y) {
		return A3(
			terezka$line_charts$Internal$Data$Data,
			datum.user,
			A2(terezka$line_charts$Internal$Data$Point, datum.point.x, y),
			datum.isReal);
	});
var terezka$line_charts$LineChart$normalize = function (datasets) {
	if (datasets.b) {
		var highest = datasets.a;
		var belows = datasets.b;
		var toPercentage = F2(
			function (highest_, datum) {
				return A2(terezka$line_charts$LineChart$setY, datum, (100 * datum.point.y) / highest_.point.y);
			});
		return A2(
			elm$core$List$map,
			A2(elm$core$List$map2, toPercentage, highest),
			A2(elm$core$List$cons, highest, belows));
	} else {
		return datasets;
	}
};
var terezka$line_charts$Internal$Utils$withFirst = F2(
	function (stuff, process) {
		if (stuff.b) {
			var first = stuff.a;
			var rest = stuff.b;
			return elm$core$Maybe$Just(
				A2(process, first, rest));
		} else {
			return elm$core$Maybe$Nothing;
		}
	});
var terezka$line_charts$LineChart$addBelows = F2(
	function (alldata, dataBelowAll) {
		var add = F2(
			function (below, datum) {
				return A2(terezka$line_charts$LineChart$setY, below, below.point.y + datum.point.y);
			});
		var iterate = F4(
			function (datum0, dataTop, dataBelowTop, result) {
				iterate:
				while (true) {
					var _n0 = _Utils_Tuple2(dataTop, dataBelowTop);
					if (_n0.a.b) {
						if (_n0.b.b) {
							var _n1 = _n0.a;
							var datum1 = _n1.a;
							var data = _n1.b;
							var _n2 = _n0.b;
							var datumBelow = _n2.a;
							var dataBelow = _n2.b;
							if (_Utils_cmp(datum1.point.x, datumBelow.point.x) > 0) {
								if (datumBelow.isReal) {
									var $temp$datum0 = datum0,
										$temp$dataTop = A2(elm$core$List$cons, datum1, data),
										$temp$dataBelowTop = dataBelow,
										$temp$result = A2(
										elm$core$List$cons,
										A2(add, datumBelow, datum0),
										result);
									datum0 = $temp$datum0;
									dataTop = $temp$dataTop;
									dataBelowTop = $temp$dataBelowTop;
									result = $temp$result;
									continue iterate;
								} else {
									var breakdata = _Utils_update(
										datum0,
										{isReal: false});
									var $temp$datum0 = datum0,
										$temp$dataTop = A2(elm$core$List$cons, datum1, data),
										$temp$dataBelowTop = dataBelow,
										$temp$result = A2(
										elm$core$List$cons,
										A2(add, datumBelow, datum0),
										result);
									datum0 = $temp$datum0;
									dataTop = $temp$dataTop;
									dataBelowTop = $temp$dataBelowTop;
									result = $temp$result;
									continue iterate;
								}
							} else {
								var $temp$datum0 = datum1,
									$temp$dataTop = data,
									$temp$dataBelowTop = A2(elm$core$List$cons, datumBelow, dataBelow),
									$temp$result = result;
								datum0 = $temp$datum0;
								dataTop = $temp$dataTop;
								dataBelowTop = $temp$dataBelowTop;
								result = $temp$result;
								continue iterate;
							}
						} else {
							var _n4 = _n0.a;
							var datum1 = _n4.a;
							var data = _n4.b;
							return result;
						}
					} else {
						if (_n0.b.b) {
							var _n3 = _n0.b;
							var datumBelow = _n3.a;
							var dataBelow = _n3.b;
							if (_Utils_cmp(datum0.point.x, datumBelow.point.x) < 1) {
								var $temp$datum0 = datum0,
									$temp$dataTop = _List_Nil,
									$temp$dataBelowTop = dataBelow,
									$temp$result = A2(
									elm$core$List$cons,
									A2(add, datumBelow, datum0),
									result);
								datum0 = $temp$datum0;
								dataTop = $temp$dataTop;
								dataBelowTop = $temp$dataBelowTop;
								result = $temp$result;
								continue iterate;
							} else {
								var $temp$datum0 = datum0,
									$temp$dataTop = _List_Nil,
									$temp$dataBelowTop = dataBelow,
									$temp$result = A2(elm$core$List$cons, datumBelow, result);
								datum0 = $temp$datum0;
								dataTop = $temp$dataTop;
								dataBelowTop = $temp$dataBelowTop;
								result = $temp$result;
								continue iterate;
							}
						} else {
							return result;
						}
					}
				}
			});
		return elm$core$List$reverse(
			A2(
				elm$core$Maybe$withDefault,
				_List_Nil,
				A2(
					terezka$line_charts$Internal$Utils$withFirst,
					alldata,
					F2(
						function (first, rest) {
							return A4(iterate, first, rest, dataBelowAll, _List_Nil);
						}))));
	});
var terezka$line_charts$LineChart$stack = function (dataset) {
	var stackBelows = F2(
		function (dataset_, result) {
			if (dataset_.b) {
				var data = dataset_.a;
				var belows = dataset_.b;
				return A2(
					stackBelows,
					belows,
					A2(
						elm$core$List$cons,
						A3(elm$core$List$foldl, terezka$line_charts$LineChart$addBelows, data, belows),
						result));
			} else {
				return result;
			}
		});
	return elm$core$List$reverse(
		A2(stackBelows, dataset, _List_Nil));
};
var terezka$line_charts$LineChart$toDataPoints = F2(
	function (config, lines) {
		var y = terezka$line_charts$Internal$Axis$variable(config.y);
		var x = terezka$line_charts$Internal$Axis$variable(config.x);
		var addPoint = function (datum) {
			var _n1 = _Utils_Tuple2(
				x(datum),
				y(datum));
			if (_n1.a.$ === 'Just') {
				if (_n1.b.$ === 'Just') {
					var x_ = _n1.a.a;
					var y_ = _n1.b.a;
					return elm$core$Maybe$Just(
						A3(
							terezka$line_charts$Internal$Data$Data,
							datum,
							A2(terezka$line_charts$Internal$Data$Point, x_, y_),
							true));
				} else {
					var x_ = _n1.a.a;
					var _n2 = _n1.b;
					return elm$core$Maybe$Just(
						A3(
							terezka$line_charts$Internal$Data$Data,
							datum,
							A2(terezka$line_charts$Internal$Data$Point, x_, 0),
							false));
				}
			} else {
				if (_n1.b.$ === 'Just') {
					var _n3 = _n1.a;
					var y_ = _n1.b.a;
					return elm$core$Maybe$Nothing;
				} else {
					var _n4 = _n1.a;
					var _n5 = _n1.b;
					return elm$core$Maybe$Nothing;
				}
			}
		};
		var data = A2(
			elm$core$List$map,
			A2(
				elm$core$Basics$composeR,
				terezka$line_charts$Internal$Line$data,
				elm$core$List$filterMap(addPoint)),
			lines);
		var _n0 = config.area;
		switch (_n0.$) {
			case 'None':
				return data;
			case 'Normal':
				return data;
			case 'Stacked':
				return terezka$line_charts$LineChart$stack(data);
			default:
				return terezka$line_charts$LineChart$normalize(
					terezka$line_charts$LineChart$stack(data));
		}
	});
var terezka$line_charts$Internal$Axis$pixels = function (_n0) {
	var config = _n0.a;
	return config.pixels;
};
var terezka$line_charts$Internal$Axis$range = function (_n0) {
	var config = _n0.a;
	return config.range;
};
var terezka$line_charts$LineChart$Coordinate$Range = F2(
	function (min, max) {
		return {max: max, min: min};
	});
var terezka$line_charts$Internal$Axis$Range$applyX = F2(
	function (range, system) {
		switch (range.$) {
			case 'Padded':
				var padMin = range.a;
				var padMax = range.b;
				var _n1 = system;
				var frame = _n1.frame;
				var _n2 = frame;
				var size = _n2.size;
				var system_ = _Utils_update(
					system,
					{
						frame: _Utils_update(
							frame,
							{
								size: _Utils_update(
									size,
									{
										width: A2(elm$core$Basics$max, 1, (size.width - padMin) - padMax)
									})
							})
					});
				var scale = terezka$line_charts$LineChart$Coordinate$scaleDataX(system_);
				return A2(
					terezka$line_charts$LineChart$Coordinate$Range,
					system.x.min - scale(padMin),
					system.x.max + scale(padMax));
			case 'Window':
				var min = range.a;
				var max = range.b;
				return A2(terezka$line_charts$LineChart$Coordinate$Range, min, max);
			default:
				var toRange = range.a;
				return toRange(system.x);
		}
	});
var terezka$line_charts$Internal$Axis$Range$applyY = F2(
	function (range, system) {
		switch (range.$) {
			case 'Padded':
				var padMin = range.a;
				var padMax = range.b;
				var _n1 = system;
				var frame = _n1.frame;
				var _n2 = frame;
				var size = _n2.size;
				var system_ = _Utils_update(
					system,
					{
						frame: _Utils_update(
							frame,
							{
								size: _Utils_update(
									size,
									{
										height: A2(elm$core$Basics$max, 1, (size.height - padMin) - padMax)
									})
							})
					});
				var scale = terezka$line_charts$LineChart$Coordinate$scaleDataY(system_);
				return A2(
					terezka$line_charts$LineChart$Coordinate$Range,
					system.y.min - scale(padMin),
					system.y.max + scale(padMax));
			case 'Window':
				var min = range.a;
				var max = range.b;
				return A2(terezka$line_charts$LineChart$Coordinate$Range, min, max);
			default:
				var toRange = range.a;
				return toRange(system.y);
		}
	});
var terezka$line_charts$Internal$Coordinate$Frame = F2(
	function (margin, size) {
		return {margin: margin, size: size};
	});
var terezka$line_charts$Internal$Coordinate$Size = F2(
	function (width, height) {
		return {height: height, width: width};
	});
var terezka$line_charts$Internal$Coordinate$ground = function (range_) {
	return _Utils_update(
		range_,
		{
			min: A2(elm$core$Basics$min, range_.min, 0)
		});
};
var terezka$line_charts$Internal$Coordinate$maximum = function (toValue) {
	return A2(
		elm$core$Basics$composeR,
		elm$core$List$map(toValue),
		A2(
			elm$core$Basics$composeR,
			elm$core$List$maximum,
			elm$core$Maybe$withDefault(1)));
};
var elm$core$List$minimum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return elm$core$Maybe$Just(
			A3(elm$core$List$foldl, elm$core$Basics$min, x, xs));
	} else {
		return elm$core$Maybe$Nothing;
	}
};
var terezka$line_charts$Internal$Coordinate$minimum = function (toValue) {
	return A2(
		elm$core$Basics$composeR,
		elm$core$List$map(toValue),
		A2(
			elm$core$Basics$composeR,
			elm$core$List$minimum,
			elm$core$Maybe$withDefault(0)));
};
var terezka$line_charts$Internal$Coordinate$range = F2(
	function (toValue, data) {
		var range_ = {
			max: A2(terezka$line_charts$Internal$Coordinate$maximum, toValue, data),
			min: A2(terezka$line_charts$Internal$Coordinate$minimum, toValue, data)
		};
		return _Utils_eq(range_.min, range_.max) ? _Utils_update(
			range_,
			{max: range_.max + 1}) : range_;
	});
var terezka$line_charts$LineChart$toSystem = F2(
	function (config, data) {
		var yRange = A2(
			terezka$line_charts$Internal$Coordinate$range,
			A2(
				elm$core$Basics$composeR,
				function ($) {
					return $.point;
				},
				function ($) {
					return $.y;
				}),
			data);
		var xRange = A2(
			terezka$line_charts$Internal$Coordinate$range,
			A2(
				elm$core$Basics$composeR,
				function ($) {
					return $.point;
				},
				function ($) {
					return $.x;
				}),
			data);
		var size = A2(
			terezka$line_charts$Internal$Coordinate$Size,
			terezka$line_charts$Internal$Axis$pixels(config.x),
			terezka$line_charts$Internal$Axis$pixels(config.y));
		var hasArea = terezka$line_charts$Internal$Area$hasArea(config.area);
		var container_ = A2(terezka$line_charts$Internal$Container$properties, elm$core$Basics$identity, config.container);
		var frame = A2(terezka$line_charts$Internal$Coordinate$Frame, container_.margin, size);
		var adjustDomainRange = function (domain) {
			return hasArea ? terezka$line_charts$Internal$Coordinate$ground(domain) : domain;
		};
		var system = {
			frame: frame,
			id: container_.id,
			x: xRange,
			xData: xRange,
			y: adjustDomainRange(yRange),
			yData: yRange
		};
		return _Utils_update(
			system,
			{
				x: A2(
					terezka$line_charts$Internal$Axis$Range$applyX,
					terezka$line_charts$Internal$Axis$range(config.x),
					system),
				y: A2(
					terezka$line_charts$Internal$Axis$Range$applyY,
					terezka$line_charts$Internal$Axis$range(config.y),
					system)
			});
	});
var terezka$line_charts$LineChart$viewBoxAttribute = function (_n0) {
	var frame = _n0.frame;
	return elm$svg$Svg$Attributes$viewBox(
		'0 0 ' + (elm$core$String$fromFloat(frame.size.width) + (' ' + elm$core$String$fromFloat(frame.size.height))));
};
var terezka$line_charts$LineChart$viewCustom = F2(
	function (config, lines) {
		var junkLineInfo = function (line_) {
			return _Utils_Tuple3(
				A3(terezka$line_charts$Internal$Line$color, config.line, line_, _List_Nil),
				terezka$line_charts$Internal$Line$label(line_),
				terezka$line_charts$Internal$Line$data(line_));
		};
		var getJunk = A3(
			terezka$line_charts$Internal$Junk$getLayers,
			A2(elm$core$List$map, junkLineInfo, lines),
			terezka$line_charts$Internal$Axis$variable(config.x),
			terezka$line_charts$Internal$Axis$variable(config.y));
		var data = A2(terezka$line_charts$LineChart$toDataPoints, config, lines);
		var dataAll = elm$core$List$concat(data);
		var dataSafe = A2(
			elm$core$List$map,
			elm$core$List$filter(
				function ($) {
					return $.isReal;
				}),
			data);
		var dataAllSafe = elm$core$List$concat(dataSafe);
		var system = A2(terezka$line_charts$LineChart$toSystem, config, dataAllSafe);
		var viewLines = terezka$line_charts$Internal$Line$view(
			{area: config.area, dotsConfig: config.dots, interpolation: config.interpolation, lineConfig: config.line, system: system});
		var viewLegends = terezka$line_charts$Internal$Legends$view(
			{
				area: config.area,
				data: dataSafe,
				dotsConfig: config.dots,
				legends: config.legends,
				lineConfig: config.line,
				lines: lines,
				system: system,
				x: terezka$line_charts$Internal$Axis$variable(config.x),
				y: terezka$line_charts$Internal$Axis$variable(config.y)
			});
		var attributes = elm$core$List$concat(
			_List_fromArray(
				[
					A2(
					terezka$line_charts$Internal$Container$properties,
					function ($) {
						return $.attributesSvg;
					},
					config.container),
					A3(terezka$line_charts$Internal$Events$toContainerAttributes, dataAll, system, config.events),
					_List_fromArray(
					[
						terezka$line_charts$LineChart$viewBoxAttribute(system)
					])
				]));
		var addGrid = terezka$line_charts$Internal$Junk$addBelow(
			A4(terezka$line_charts$Internal$Grid$view, system, config.x, config.y, config.grid));
		var junk = addGrid(
			A2(getJunk, system, config.junk));
		return A4(
			terezka$line_charts$LineChart$container,
			config,
			system,
			junk.html,
			A2(
				elm$svg$Svg$svg,
				attributes,
				_List_fromArray(
					[
						A2(
						elm$svg$Svg$defs,
						_List_Nil,
						_List_fromArray(
							[
								terezka$line_charts$LineChart$clipPath(system)
							])),
						A2(
						elm$svg$Svg$g,
						_List_fromArray(
							[
								elm$svg$Svg$Attributes$class('chart__junk--below')
							]),
						junk.below),
						A2(viewLines, lines, data),
						A3(terezka$line_charts$LineChart$chartAreaPlatform, config, dataAll, system),
						A3(terezka$line_charts$Internal$Axis$viewHorizontal, system, config.intersection, config.x),
						A3(terezka$line_charts$Internal$Axis$viewVertical, system, config.intersection, config.y),
						viewLegends,
						A2(
						elm$svg$Svg$g,
						_List_fromArray(
							[
								elm$svg$Svg$Attributes$class('chart__junk--above')
							]),
						junk.above)
					])));
	});
var terezka$line_charts$Internal$Area$None = {$: 'None'};
var terezka$line_charts$Internal$Area$none = terezka$line_charts$Internal$Area$None;
var terezka$line_charts$LineChart$Area$default = terezka$line_charts$Internal$Area$none;
var terezka$line_charts$Internal$Axis$Config = function (a) {
	return {$: 'Config', a: a};
};
var terezka$line_charts$Internal$Axis$custom = terezka$line_charts$Internal$Axis$Config;
var terezka$line_charts$Internal$Axis$Line$Config = function (a) {
	return {$: 'Config', a: a};
};
var terezka$line_charts$Internal$Axis$Line$custom = terezka$line_charts$Internal$Axis$Line$Config;
var terezka$line_charts$Internal$Coordinate$smallestRange = F2(
	function (data, range_) {
		return {
			max: A2(elm$core$Basics$min, data.max, range_.max),
			min: A2(elm$core$Basics$max, data.min, range_.min)
		};
	});
var terezka$line_charts$Internal$Axis$Line$rangeFrame = function (color) {
	return terezka$line_charts$Internal$Axis$Line$custom(
		F2(
			function (data, range) {
				var smallest = A2(terezka$line_charts$Internal$Coordinate$smallestRange, data, range);
				return {color: color, end: smallest.max, events: _List_Nil, start: smallest.min, width: 1};
			}));
};
var terezka$line_charts$Internal$Axis$Range$Padded = F2(
	function (a, b) {
		return {$: 'Padded', a: a, b: b};
	});
var terezka$line_charts$Internal$Axis$Range$padded = terezka$line_charts$Internal$Axis$Range$Padded;
var terezka$line_charts$Internal$Axis$Ticks$Config = function (a) {
	return {$: 'Config', a: a};
};
var terezka$line_charts$Internal$Axis$Ticks$custom = terezka$line_charts$Internal$Axis$Ticks$Config;
var terezka$line_charts$Internal$Axis$Title$Config = function (a) {
	return {$: 'Config', a: a};
};
var terezka$line_charts$Internal$Axis$Title$custom = F4(
	function (position, x, y, title) {
		return terezka$line_charts$Internal$Axis$Title$Config(
			{
				offset: _Utils_Tuple2(x, y),
				position: position,
				view: title
			});
	});
var terezka$line_charts$Internal$Axis$Title$atPosition = F3(
	function (position, x, y) {
		return A2(
			elm$core$Basics$composeL,
			A3(terezka$line_charts$Internal$Axis$Title$custom, position, x, y),
			terezka$line_charts$Internal$Svg$label('inherit'));
	});
var terezka$line_charts$Internal$Axis$Title$atDataMax = function () {
	var position = F2(
		function (data, range) {
			return A2(elm$core$Basics$min, data.max, range.max);
		});
	return terezka$line_charts$Internal$Axis$Title$atPosition(position);
}();
var terezka$line_charts$Internal$Axis$Values$Around = function (a) {
	return {$: 'Around', a: a};
};
var terezka$line_charts$Internal$Axis$Values$around = terezka$line_charts$Internal$Axis$Values$Around;
var terezka$line_charts$Internal$Axis$Values$ceilingTo = F2(
	function (prec, number) {
		return prec * elm$core$Basics$ceiling(number / prec);
	});
var terezka$line_charts$Internal$Axis$Values$getBeginning = F2(
	function (min, interval) {
		var multiple = min / interval;
		return _Utils_eq(
			multiple,
			elm$core$Basics$round(multiple)) ? min : A2(terezka$line_charts$Internal$Axis$Values$ceilingTo, interval, min);
	});
var elm$core$Basics$isInfinite = _Basics_isInfinite;
var elm$core$String$padRight = F3(
	function (n, _char, string) {
		return _Utils_ap(
			string,
			A2(
				elm$core$String$repeat,
				n - elm$core$String$length(string),
				elm$core$String$fromChar(_char)));
	});
var elm$core$String$reverse = _String_reverse;
var myrho$elm_round$Round$addSign = F2(
	function (signed, str) {
		var isNotZero = A2(
			elm$core$List$any,
			function (c) {
				return (!_Utils_eq(
					c,
					_Utils_chr('0'))) && (!_Utils_eq(
					c,
					_Utils_chr('.')));
			},
			elm$core$String$toList(str));
		return _Utils_ap(
			(signed && isNotZero) ? '-' : '',
			str);
	});
var myrho$elm_round$Round$increaseNum = function (_n0) {
	var head = _n0.a;
	var tail = _n0.b;
	if (_Utils_eq(
		head,
		_Utils_chr('9'))) {
		var _n1 = elm$core$String$uncons(tail);
		if (_n1.$ === 'Nothing') {
			return '01';
		} else {
			var headtail = _n1.a;
			return A2(
				elm$core$String$cons,
				_Utils_chr('0'),
				myrho$elm_round$Round$increaseNum(headtail));
		}
	} else {
		var c = elm$core$Char$toCode(head);
		return ((c >= 48) && (c < 57)) ? A2(
			elm$core$String$cons,
			elm$core$Char$fromCode(c + 1),
			tail) : '0';
	}
};
var myrho$elm_round$Round$splitComma = function (str) {
	var _n0 = A2(elm$core$String$split, '.', str);
	if (_n0.b) {
		if (_n0.b.b) {
			var before = _n0.a;
			var _n1 = _n0.b;
			var after = _n1.a;
			return _Utils_Tuple2(before, after);
		} else {
			var before = _n0.a;
			return _Utils_Tuple2(before, '0');
		}
	} else {
		return _Utils_Tuple2('0', '0');
	}
};
var myrho$elm_round$Round$toDecimal = function (fl) {
	var _n0 = A2(
		elm$core$String$split,
		'e',
		elm$core$String$fromFloat(
			elm$core$Basics$abs(fl)));
	if (_n0.b) {
		if (_n0.b.b) {
			var num = _n0.a;
			var _n1 = _n0.b;
			var exp = _n1.a;
			var e = A2(
				elm$core$Maybe$withDefault,
				0,
				elm$core$String$toInt(
					A2(elm$core$String$startsWith, '+', exp) ? A2(elm$core$String$dropLeft, 1, exp) : exp));
			var _n2 = myrho$elm_round$Round$splitComma(num);
			var before = _n2.a;
			var after = _n2.b;
			var total = _Utils_ap(before, after);
			var zeroed = (e < 0) ? A2(
				elm$core$Maybe$withDefault,
				'0',
				A2(
					elm$core$Maybe$map,
					function (_n3) {
						var a = _n3.a;
						var b = _n3.b;
						return a + ('.' + b);
					},
					A2(
						elm$core$Maybe$map,
						elm$core$Tuple$mapFirst(elm$core$String$fromChar),
						elm$core$String$uncons(
							_Utils_ap(
								A2(
									elm$core$String$repeat,
									elm$core$Basics$abs(e),
									'0'),
								total))))) : A3(
				elm$core$String$padRight,
				e + 1,
				_Utils_chr('0'),
				total);
			return _Utils_ap(
				(fl < 0) ? '-' : '',
				zeroed);
		} else {
			var num = _n0.a;
			return _Utils_ap(
				(fl < 0) ? '-' : '',
				num);
		}
	} else {
		return '';
	}
};
var myrho$elm_round$Round$roundFun = F3(
	function (functor, s, fl) {
		if (elm$core$Basics$isInfinite(fl) || elm$core$Basics$isNaN(fl)) {
			return elm$core$String$fromFloat(fl);
		} else {
			var signed = fl < 0;
			var _n0 = myrho$elm_round$Round$splitComma(
				myrho$elm_round$Round$toDecimal(
					elm$core$Basics$abs(fl)));
			var before = _n0.a;
			var after = _n0.b;
			var r = elm$core$String$length(before) + s;
			var normalized = _Utils_ap(
				A2(elm$core$String$repeat, (-r) + 1, '0'),
				A3(
					elm$core$String$padRight,
					r,
					_Utils_chr('0'),
					_Utils_ap(before, after)));
			var totalLen = elm$core$String$length(normalized);
			var roundDigitIndex = A2(elm$core$Basics$max, 1, r);
			var increase = A2(
				functor,
				signed,
				A3(elm$core$String$slice, roundDigitIndex, totalLen, normalized));
			var remains = A3(elm$core$String$slice, 0, roundDigitIndex, normalized);
			var num = increase ? elm$core$String$reverse(
				A2(
					elm$core$Maybe$withDefault,
					'1',
					A2(
						elm$core$Maybe$map,
						myrho$elm_round$Round$increaseNum,
						elm$core$String$uncons(
							elm$core$String$reverse(remains))))) : remains;
			var numLen = elm$core$String$length(num);
			var numZeroed = (num === '0') ? num : ((s <= 0) ? _Utils_ap(
				num,
				A2(
					elm$core$String$repeat,
					elm$core$Basics$abs(s),
					'0')) : ((_Utils_cmp(
				s,
				elm$core$String$length(after)) < 0) ? (A3(elm$core$String$slice, 0, numLen - s, num) + ('.' + A3(elm$core$String$slice, numLen - s, numLen, num))) : _Utils_ap(
				before + '.',
				A3(
					elm$core$String$padRight,
					s,
					_Utils_chr('0'),
					after))));
			return A2(myrho$elm_round$Round$addSign, signed, numZeroed);
		}
	});
var myrho$elm_round$Round$round = myrho$elm_round$Round$roundFun(
	F2(
		function (signed, str) {
			var _n0 = elm$core$String$uncons(str);
			if (_n0.$ === 'Nothing') {
				return false;
			} else {
				if ('5' === _n0.a.a.valueOf()) {
					if (_n0.a.b === '') {
						var _n1 = _n0.a;
						return !signed;
					} else {
						var _n2 = _n0.a;
						return true;
					}
				} else {
					var _n3 = _n0.a;
					var _int = _n3.a;
					return function (i) {
						return ((i > 53) && signed) || ((i >= 53) && (!signed));
					}(
						elm$core$Char$toCode(_int));
				}
			}
		}));
var terezka$line_charts$Internal$Axis$Values$correctFloat = function (prec) {
	return A2(
		elm$core$Basics$composeR,
		myrho$elm_round$Round$round(prec),
		A2(
			elm$core$Basics$composeR,
			elm$core$String$toFloat,
			elm$core$Maybe$withDefault(0)));
};
var terezka$line_charts$Internal$Axis$Values$getMultiples = F3(
	function (magnitude, allowDecimals, hasTickAmount) {
		var defaults = hasTickAmount ? _List_fromArray(
			[1, 1.2, 1.5, 2, 2.5, 3, 4, 5, 6, 8, 10]) : _List_fromArray(
			[1, 2, 2.5, 5, 10]);
		return allowDecimals ? defaults : ((magnitude === 1) ? A2(
			elm$core$List$filter,
			function (n) {
				return _Utils_eq(
					elm$core$Basics$round(n),
					n);
			},
			defaults) : ((magnitude <= 0.1) ? _List_fromArray(
			[1 / magnitude]) : defaults));
	});
var terezka$line_charts$Internal$Axis$Values$getPrecision = function (number) {
	var _n0 = A2(
		elm$core$String$split,
		'e',
		elm$core$String$fromFloat(number));
	if ((_n0.b && _n0.b.b) && (!_n0.b.b.b)) {
		var before = _n0.a;
		var _n1 = _n0.b;
		var after = _n1.a;
		return elm$core$Basics$abs(
			A2(
				elm$core$Maybe$withDefault,
				0,
				elm$core$String$toInt(after)));
	} else {
		var _n2 = A2(
			elm$core$String$split,
			'.',
			elm$core$String$fromFloat(number));
		if ((_n2.b && _n2.b.b) && (!_n2.b.b.b)) {
			var before = _n2.a;
			var _n3 = _n2.b;
			var after = _n3.a;
			return elm$core$String$length(after);
		} else {
			return 0;
		}
	}
};
var elm$core$Basics$e = _Basics_e;
var terezka$line_charts$Internal$Utils$magnitude = function (num) {
	return A2(
		elm$core$Basics$pow,
		10,
		elm$core$Basics$floor(
			A2(elm$core$Basics$logBase, elm$core$Basics$e, num) / A2(elm$core$Basics$logBase, elm$core$Basics$e, 10)));
};
var terezka$line_charts$Internal$Axis$Values$getInterval = F3(
	function (intervalRaw, allowDecimals, hasTickAmount) {
		var magnitude = terezka$line_charts$Internal$Utils$magnitude(intervalRaw);
		var multiples = A3(terezka$line_charts$Internal$Axis$Values$getMultiples, magnitude, allowDecimals, hasTickAmount);
		var normalized = intervalRaw / magnitude;
		var findMultipleExact = function (multiples_) {
			findMultipleExact:
			while (true) {
				if (multiples_.b) {
					var m1 = multiples_.a;
					var rest = multiples_.b;
					if (_Utils_cmp(m1 * magnitude, intervalRaw) > -1) {
						return m1;
					} else {
						var $temp$multiples_ = rest;
						multiples_ = $temp$multiples_;
						continue findMultipleExact;
					}
				} else {
					return 1;
				}
			}
		};
		var findMultiple = function (multiples_) {
			findMultiple:
			while (true) {
				if (multiples_.b) {
					if (multiples_.b.b) {
						var m1 = multiples_.a;
						var _n2 = multiples_.b;
						var m2 = _n2.a;
						var rest = _n2.b;
						if (_Utils_cmp(normalized, (m1 + m2) / 2) < 1) {
							return m1;
						} else {
							var $temp$multiples_ = A2(elm$core$List$cons, m2, rest);
							multiples_ = $temp$multiples_;
							continue findMultiple;
						}
					} else {
						var m1 = multiples_.a;
						var rest = multiples_.b;
						if (_Utils_cmp(normalized, m1) < 1) {
							return m1;
						} else {
							var $temp$multiples_ = rest;
							multiples_ = $temp$multiples_;
							continue findMultiple;
						}
					}
				} else {
					return 1;
				}
			}
		};
		var multiple = hasTickAmount ? findMultipleExact(multiples) : findMultiple(multiples);
		var precision = terezka$line_charts$Internal$Axis$Values$getPrecision(magnitude) + terezka$line_charts$Internal$Axis$Values$getPrecision(multiple);
		return A2(terezka$line_charts$Internal$Axis$Values$correctFloat, precision, multiple * magnitude);
	});
var terezka$line_charts$Internal$Axis$Values$positions = F5(
	function (range, beginning, interval, m, acc) {
		positions:
		while (true) {
			var next = A2(
				terezka$line_charts$Internal$Axis$Values$correctFloat,
				terezka$line_charts$Internal$Axis$Values$getPrecision(interval),
				beginning + (m * interval));
			if (_Utils_cmp(next, range.max) > 0) {
				return acc;
			} else {
				var $temp$range = range,
					$temp$beginning = beginning,
					$temp$interval = interval,
					$temp$m = m + 1,
					$temp$acc = _Utils_ap(
					acc,
					_List_fromArray(
						[next]));
				range = $temp$range;
				beginning = $temp$beginning;
				interval = $temp$interval;
				m = $temp$m;
				acc = $temp$acc;
				continue positions;
			}
		}
	});
var terezka$line_charts$Internal$Axis$Values$values = F4(
	function (allowDecimals, exact, amountRough, range) {
		var intervalRough = (range.max - range.min) / amountRough;
		var interval = A3(terezka$line_charts$Internal$Axis$Values$getInterval, intervalRough, allowDecimals, exact);
		var intervalSafe = (!interval) ? 1 : interval;
		var beginning = A2(terezka$line_charts$Internal$Axis$Values$getBeginning, range.min, intervalSafe);
		var amountRoughSafe = (!amountRough) ? 1 : amountRough;
		return A5(terezka$line_charts$Internal$Axis$Values$positions, range, beginning, intervalSafe, 0, _List_Nil);
	});
var terezka$line_charts$Internal$Axis$Values$float = function (amount) {
	if (amount.$ === 'Exactly') {
		var amount_ = amount.a;
		return A3(terezka$line_charts$Internal$Axis$Values$values, true, true, amount_);
	} else {
		var amount_ = amount.a;
		return A3(terezka$line_charts$Internal$Axis$Values$values, true, false, amount_);
	}
};
var terezka$line_charts$Internal$Axis$Tick$Negative = {$: 'Negative'};
var terezka$line_charts$Internal$Axis$Tick$Config = function (a) {
	return {$: 'Config', a: a};
};
var terezka$line_charts$Internal$Axis$Tick$custom = terezka$line_charts$Internal$Axis$Tick$Config;
var terezka$line_charts$Internal$Axis$Tick$float = function (n) {
	return terezka$line_charts$Internal$Axis$Tick$custom(
		{
			color: terezka$line_charts$LineChart$Colors$gray,
			direction: terezka$line_charts$Internal$Axis$Tick$Negative,
			grid: true,
			label: elm$core$Maybe$Just(
				A2(
					terezka$line_charts$Internal$Svg$label,
					'inherit',
					elm$core$String$fromFloat(n))),
			length: 5,
			position: n,
			width: 1
		});
};
var terezka$line_charts$LineChart$Axis$Tick$float = terezka$line_charts$Internal$Axis$Tick$float;
var terezka$line_charts$Internal$Axis$default = F3(
	function (pixels_, title_, variable_) {
		return terezka$line_charts$Internal$Axis$custom(
			{
				axisLine: terezka$line_charts$Internal$Axis$Line$rangeFrame(terezka$line_charts$LineChart$Colors$gray),
				pixels: pixels_,
				range: A2(terezka$line_charts$Internal$Axis$Range$padded, 20, 20),
				ticks: terezka$line_charts$Internal$Axis$Ticks$custom(
					F2(
						function (data, range_) {
							var smallest = A2(terezka$line_charts$Internal$Coordinate$smallestRange, data, range_);
							var rangeSmall = smallest.max - smallest.min;
							var rangeLong = range_.max - range_.min;
							var diff = 1 - ((rangeLong - rangeSmall) / rangeLong);
							var amount = elm$core$Basics$round((diff * pixels_) / 90);
							return A2(
								elm$core$List$map,
								terezka$line_charts$LineChart$Axis$Tick$float,
								A2(
									terezka$line_charts$Internal$Axis$Values$float,
									terezka$line_charts$Internal$Axis$Values$around(amount),
									smallest));
						})),
				title: A3(terezka$line_charts$Internal$Axis$Title$atDataMax, 0, 0, title_),
				variable: A2(elm$core$Basics$composeL, elm$core$Maybe$Just, variable_)
			});
	});
var terezka$line_charts$LineChart$Axis$default = terezka$line_charts$Internal$Axis$default;
var terezka$line_charts$Internal$Axis$Intersection$Config = function (a) {
	return {$: 'Config', a: a};
};
var terezka$line_charts$Internal$Axis$Intersection$custom = F2(
	function (toX, toY) {
		return terezka$line_charts$Internal$Axis$Intersection$Config(
			function (_n0) {
				var x = _n0.x;
				var y = _n0.y;
				return A2(
					terezka$line_charts$Internal$Data$Point,
					toX(x),
					toY(y));
			});
	});
var terezka$line_charts$Internal$Axis$Intersection$default = A2(
	terezka$line_charts$Internal$Axis$Intersection$custom,
	function ($) {
		return $.min;
	},
	function ($) {
		return $.min;
	});
var terezka$line_charts$LineChart$Axis$Intersection$default = terezka$line_charts$Internal$Axis$Intersection$default;
var terezka$line_charts$Internal$Container$Margin = F4(
	function (top, right, bottom, left) {
		return {bottom: bottom, left: left, right: right, top: top};
	});
var terezka$line_charts$Internal$Container$Config = function (a) {
	return {$: 'Config', a: a};
};
var terezka$line_charts$Internal$Container$custom = terezka$line_charts$Internal$Container$Config;
var terezka$line_charts$Internal$Container$Static = {$: 'Static'};
var terezka$line_charts$Internal$Container$static = terezka$line_charts$Internal$Container$Static;
var terezka$line_charts$Internal$Container$styled = F2(
	function (id, styles) {
		return terezka$line_charts$Internal$Container$custom(
			{
				attributesHtml: A2(
					elm$core$List$map,
					function (_n0) {
						var p = _n0.a;
						var v = _n0.b;
						return A2(elm$html$Html$Attributes$style, p, v);
					},
					styles),
				attributesSvg: _List_Nil,
				id: id,
				margin: A4(terezka$line_charts$Internal$Container$Margin, 60, 140, 60, 80),
				size: terezka$line_charts$Internal$Container$static
			});
	});
var terezka$line_charts$LineChart$Container$styled = terezka$line_charts$Internal$Container$styled;
var terezka$line_charts$Internal$Events$Config = function (a) {
	return {$: 'Config', a: a};
};
var terezka$line_charts$Internal$Events$custom = terezka$line_charts$Internal$Events$Config;
var terezka$line_charts$Internal$Events$default = terezka$line_charts$Internal$Events$custom(_List_Nil);
var terezka$line_charts$LineChart$Events$default = terezka$line_charts$Internal$Events$default;
var terezka$line_charts$Internal$Grid$Lines = F2(
	function (a, b) {
		return {$: 'Lines', a: a, b: b};
	});
var terezka$line_charts$Internal$Grid$lines = terezka$line_charts$Internal$Grid$Lines;
var terezka$line_charts$LineChart$Colors$grayLightest = A3(avh4$elm_color$Color$rgb255, 243, 243, 243);
var terezka$line_charts$Internal$Grid$default = A2(terezka$line_charts$Internal$Grid$lines, 1, terezka$line_charts$LineChart$Colors$grayLightest);
var terezka$line_charts$LineChart$Grid$default = terezka$line_charts$Internal$Grid$default;
var terezka$line_charts$Internal$Interpolation$Monotone = {$: 'Monotone'};
var terezka$line_charts$LineChart$Interpolation$monotone = terezka$line_charts$Internal$Interpolation$Monotone;
var terezka$line_charts$Internal$Junk$Config = function (a) {
	return {$: 'Config', a: a};
};
var terezka$line_charts$Internal$Junk$custom = function (func) {
	return terezka$line_charts$Internal$Junk$Config(
		F3(
			function (_n0, _n1, _n2) {
				return func;
			}));
};
var terezka$line_charts$LineChart$Junk$custom = terezka$line_charts$Internal$Junk$custom;
var terezka$line_charts$Internal$Legends$None = {$: 'None'};
var terezka$line_charts$Internal$Legends$none = terezka$line_charts$Internal$Legends$None;
var terezka$line_charts$LineChart$Legends$none = terezka$line_charts$Internal$Legends$none;
var terezka$line_charts$Internal$Line$Config = function (a) {
	return {$: 'Config', a: a};
};
var terezka$line_charts$Internal$Line$Style = function (a) {
	return {$: 'Style', a: a};
};
var terezka$line_charts$Internal$Line$style = F2(
	function (width, color_) {
		return terezka$line_charts$Internal$Line$Style(
			{color: color_, width: width});
	});
var terezka$line_charts$Internal$Line$default = terezka$line_charts$Internal$Line$Config(
	function (_n0) {
		return A2(terezka$line_charts$Internal$Line$style, 1, elm$core$Basics$identity);
	});
var terezka$line_charts$LineChart$Line$default = terezka$line_charts$Internal$Line$default;
var author$project$Lia$Markdown$Chart$View$view = F2(
	function (attr, chart) {
		var list = A2(
			elm$core$List$map,
			author$project$Lia$Markdown$Chart$View$plot,
			elm$core$Dict$toList(chart.diagrams));
		return A2(
			elm$html$Html$div,
			A2(author$project$Lia$Markdown$Inline$View$annotation, 'lia-chart', attr),
			_List_fromArray(
				[
					A2(
					terezka$line_charts$LineChart$viewCustom,
					{
						area: terezka$line_charts$LineChart$Area$default,
						container: A2(
							terezka$line_charts$LineChart$Container$styled,
							'lia-diagram',
							_List_fromArray(
								[
									_Utils_Tuple2('width', '100%'),
									_Utils_Tuple2('display', 'inline'),
									_Utils_Tuple2('font-family', 'monospace')
								])),
						dots: author$project$Lia$Markdown$Chart$View$customDotsConfig,
						events: terezka$line_charts$LineChart$Events$default,
						grid: terezka$line_charts$LineChart$Grid$default,
						interpolation: terezka$line_charts$LineChart$Interpolation$monotone,
						intersection: terezka$line_charts$LineChart$Axis$Intersection$default,
						junk: terezka$line_charts$LineChart$Junk$custom(
							author$project$Lia$Markdown$Chart$View$title(chart.title)),
						legends: terezka$line_charts$LineChart$Legends$none,
						line: terezka$line_charts$LineChart$Line$default,
						x: A3(
							terezka$line_charts$LineChart$Axis$default,
							600,
							chart.x_label,
							A2(
								elm$core$Basics$composeR,
								elm$core$Tuple$first,
								function ($) {
									return $.x;
								})),
						y: A3(
							terezka$line_charts$LineChart$Axis$default,
							450,
							chart.y_label,
							A2(
								elm$core$Basics$composeR,
								elm$core$Tuple$first,
								function ($) {
									return $.y;
								}))
					},
					list)
				]));
	});
var author$project$Lia$Markdown$Code$Terminal$Input = function (a) {
	return {$: 'Input', a: a};
};
var author$project$Lia$Markdown$Code$Terminal$KeyDown = function (a) {
	return {$: 'KeyDown', a: a};
};
var elm$html$Html$Events$keyCode = A2(elm$json$Json$Decode$field, 'keyCode', elm$json$Json$Decode$int);
var author$project$Lia$Markdown$Code$Terminal$onKeyDown = function (tagger) {
	return A2(
		elm$html$Html$Events$on,
		'keydown',
		A2(elm$json$Json$Decode$map, tagger, elm$html$Html$Events$keyCode));
};
var elm$html$Html$Attributes$value = elm$html$Html$Attributes$stringProperty('value');
var author$project$Lia$Markdown$Code$Terminal$view = function (terminal) {
	return A2(
		elm$html$Html$div,
		_List_fromArray(
			[
				elm$html$Html$Attributes$class('lia-code-stdout'),
				A2(elm$html$Html$Attributes$style, 'margin-top', '-10px')
			]),
		_List_fromArray(
			[
				A2(
				elm$html$Html$code,
				_List_Nil,
				_List_fromArray(
					[
						elm$html$Html$text('>> ')
					])),
				A2(
				elm$html$Html$input,
				_List_fromArray(
					[
						elm$html$Html$Events$onInput(author$project$Lia$Markdown$Code$Terminal$Input),
						author$project$Lia$Markdown$Code$Terminal$onKeyDown(author$project$Lia$Markdown$Code$Terminal$KeyDown),
						elm$html$Html$Attributes$value(terminal.input),
						A2(elm$html$Html$Attributes$style, 'background-color', 'black'),
						A2(elm$html$Html$Attributes$style, 'color', 'white'),
						A2(elm$html$Html$Attributes$style, 'border', '0'),
						A2(elm$html$Html$Attributes$style, 'width', 'calc(100% - 30px)')
					]),
				_List_Nil)
			]));
};
var author$project$Lia$Markdown$Code$Update$UpdateTerminal = F2(
	function (a, b) {
		return {$: 'UpdateTerminal', a: a, b: b};
	});
var author$project$Lia$Markdown$Code$View$div_ = elm$html$Html$div(
	_List_fromArray(
		[
			A2(elm$html$Html$Attributes$style, 'margin-top', '16px'),
			A2(elm$html$Html$Attributes$style, 'margin-bottom', '16px')
		]));
var author$project$Lia$Markdown$Code$View$list_get = F2(
	function (idx, list) {
		list_get:
		while (true) {
			if (!list.b) {
				return elm$core$Maybe$Nothing;
			} else {
				var x = list.a;
				var xs = list.b;
				if (!idx) {
					return elm$core$Maybe$Just(x);
				} else {
					var $temp$idx = idx - 1,
						$temp$list = xs;
					idx = $temp$idx;
					list = $temp$list;
					continue list_get;
				}
			}
		}
	});
var author$project$Lia$Markdown$Code$View$get_annotations = F2(
	function (log, file_id) {
		return A2(
			elm$core$Maybe$withDefault,
			elm$json$Json$Encode$null,
			A2(author$project$Lia$Markdown$Code$View$list_get, file_id, log.details));
	});
var author$project$Lia$Markdown$Code$Editor$editor = function (attr) {
	return A2(
		elm$html$Html$node,
		'code-editor',
		A2(
			elm$core$List$cons,
			A2(elm$html$Html$Attributes$style, 'display', 'block'),
			attr));
};
var elm$virtual_dom$VirtualDom$property = F2(
	function (key, value) {
		return A2(
			_VirtualDom_property,
			_VirtualDom_noInnerHtmlOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var elm$html$Html$Attributes$property = elm$virtual_dom$VirtualDom$property;
var author$project$Lia$Markdown$Code$Editor$boolean = function (prop) {
	return A2(
		elm$core$Basics$composeR,
		elm$json$Json$Encode$bool,
		elm$html$Html$Attributes$property(prop));
};
var author$project$Lia$Markdown$Code$Editor$highlightActiveLine = author$project$Lia$Markdown$Code$Editor$boolean('highlightActiveLine');
var author$project$Lia$Markdown$Code$Editor$mode = A2(
	elm$core$Basics$composeR,
	elm$json$Json$Encode$string,
	elm$html$Html$Attributes$property('mode'));
var author$project$Lia$Markdown$Code$Editor$readOnly = author$project$Lia$Markdown$Code$Editor$boolean('readOnly');
var author$project$Lia$Markdown$Code$Editor$showCursor = author$project$Lia$Markdown$Code$Editor$boolean('showCursor');
var author$project$Lia$Markdown$Code$Editor$showGutter = author$project$Lia$Markdown$Code$Editor$boolean('showGutter');
var author$project$Lia$Markdown$Code$Editor$showPrintMargin = author$project$Lia$Markdown$Code$Editor$boolean('showPrintMargin');
var author$project$Lia$Markdown$Code$Editor$tabSize = A2(
	elm$core$Basics$composeR,
	elm$json$Json$Encode$int,
	elm$html$Html$Attributes$property('tabSize'));
var author$project$Lia$Markdown$Code$Editor$theme = A2(
	elm$core$Basics$composeR,
	elm$json$Json$Encode$string,
	elm$html$Html$Attributes$property('theme'));
var author$project$Lia$Markdown$Code$Editor$useSoftTabs = author$project$Lia$Markdown$Code$Editor$boolean('useSoftTabs');
var author$project$Lia$Markdown$Code$Editor$value = A2(
	elm$core$Basics$composeR,
	elm$json$Json$Encode$string,
	elm$html$Html$Attributes$property('value'));
var author$project$Lia$Markdown$Code$View$highlight = F5(
	function (theme, attr, lang, code, headless) {
		var top_border = headless ? '4px' : '0px';
		return A2(
			author$project$Lia$Markdown$Code$Editor$editor,
			A2(
				elm$core$List$append,
				_List_fromArray(
					[
						A2(elm$html$Html$Attributes$style, 'border-bottom-left-radius', '4px'),
						A2(elm$html$Html$Attributes$style, 'border-bottom-right-radius', '4px'),
						A2(elm$html$Html$Attributes$style, 'border-top-left-radius', top_border),
						A2(elm$html$Html$Attributes$style, 'border-top-right-radius', top_border),
						A2(elm$html$Html$Attributes$style, 'border', '1px solid gray'),
						author$project$Lia$Markdown$Code$Editor$value(code),
						author$project$Lia$Markdown$Code$Editor$mode(lang),
						author$project$Lia$Markdown$Code$Editor$theme(theme),
						author$project$Lia$Markdown$Code$Editor$tabSize(2),
						author$project$Lia$Markdown$Code$Editor$useSoftTabs(false),
						author$project$Lia$Markdown$Code$Editor$readOnly(true),
						author$project$Lia$Markdown$Code$Editor$showCursor(false),
						author$project$Lia$Markdown$Code$Editor$highlightActiveLine(false),
						author$project$Lia$Markdown$Code$Editor$showGutter(false),
						author$project$Lia$Markdown$Code$Editor$showPrintMargin(false)
					]),
				author$project$Lia$Markdown$Inline$View$attributes(attr)),
			_List_Nil);
	});
var elm$html$Html$button = _VirtualDom_node('button');
var author$project$Lia$Markdown$Code$View$view_code = F3(
	function (theme, attr, snippet) {
		var headless = snippet.name === '';
		return A2(
			elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					headless ? elm$html$Html$text('') : A2(
					elm$html$Html$button,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-accordion-dummy')
						]),
					_List_fromArray(
						[
							elm$html$Html$text(snippet.name)
						])),
					A5(author$project$Lia$Markdown$Code$View$highlight, theme, attr, snippet.lang, snippet.code, headless)
				]));
	});
var author$project$Lia$Markdown$Code$Update$Eval = function (a) {
	return {$: 'Eval', a: a};
};
var author$project$Lia$Markdown$Code$Update$First = function (a) {
	return {$: 'First', a: a};
};
var author$project$Lia$Markdown$Code$Update$Last = function (a) {
	return {$: 'Last', a: a};
};
var author$project$Lia$Markdown$Code$Update$Load = F2(
	function (a, b) {
		return {$: 'Load', a: a, b: b};
	});
var author$project$Lia$Markdown$Code$Update$Stop = function (a) {
	return {$: 'Stop', a: a};
};
var author$project$Lia$Markdown$Code$View$control_style = _List_fromArray(
	[
		A2(elm$html$Html$Attributes$style, 'padding-left', '5px'),
		A2(elm$html$Html$Attributes$style, 'padding-right', '5px'),
		A2(elm$html$Html$Attributes$style, 'float', 'right'),
		A2(elm$html$Html$Attributes$style, 'margin-right', '2px'),
		A2(elm$html$Html$Attributes$style, 'margin-left', '2px')
	]);
var author$project$Translations$codeExecute = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Изпълни';
		case 'De':
			return 'Ausführen';
		case 'En':
			return 'Execute';
		case 'Fa':
			return 'اجرا';
		case 'Hy':
			return 'իրականացնել';
		default:
			return 'запустити';
	}
};
var author$project$Translations$codeFirst = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Първа версия';
		case 'De':
			return 'erste Version';
		case 'En':
			return 'first version';
		case 'Fa':
			return 'نسخه اولیه';
		case 'Hy':
			return 'առաջին տարբերակը';
		default:
			return 'перша версія';
	}
};
var author$project$Translations$codeLast = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Последна версия';
		case 'De':
			return 'letzte Version';
		case 'En':
			return 'last version';
		case 'Fa':
			return 'آخرین نسخه';
		case 'Hy':
			return 'վերջին տարբերակը';
		default:
			return 'остання версія';
	}
};
var author$project$Translations$codeNext = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'следваща версия';
		case 'De':
			return 'eine Version vor';
		case 'En':
			return 'next version';
		case 'Fa':
			return 'نسخه بعدی';
		case 'Hy':
			return 'հաջորդ տարբերակը';
		default:
			return 'наступна версія';
	}
};
var author$project$Translations$codePrev = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Предишна версия';
		case 'De':
			return 'eine Version zurück';
		case 'En':
			return 'previous version';
		case 'Fa':
			return 'نسخه قبلی';
		case 'Hy':
			return 'նախորդ տարբերակը';
		default:
			return 'попередня версія';
	}
};
var author$project$Translations$codeRunning = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Работещ';
		case 'De':
			return 'wird ausgeführt';
		case 'En':
			return 'is running';
		case 'Fa':
			return 'در حال اجرا';
		case 'Hy':
			return 'ընթանում է';
		default:
			return 'виконується';
	}
};
var elm$html$Html$Attributes$disabled = elm$html$Html$Attributes$boolProperty('disabled');
var author$project$Lia$Markdown$Code$View$view_control = F6(
	function (lang, idx, version_active, version_count, running, terminal) {
		var forward = running || (!version_active);
		var backward = running || _Utils_eq(version_active, version_count - 1);
		return A2(
			elm$html$Html$div,
			_List_fromArray(
				[
					A2(elm$html$Html$Attributes$style, 'padding', '0px'),
					A2(elm$html$Html$Attributes$style, 'width', '100%')
				]),
			_List_fromArray(
				[
					function () {
					var _n0 = _Utils_Tuple2(running, terminal);
					if (_n0.a) {
						if (!_n0.b) {
							return A2(
								elm$html$Html$span,
								_List_fromArray(
									[
										elm$html$Html$Attributes$class('lia-btn lia-icon'),
										A2(elm$html$Html$Attributes$style, 'margin-left', '0px'),
										elm$html$Html$Attributes$title(
										author$project$Translations$codeRunning(lang)),
										elm$html$Html$Attributes$disabled(true)
									]),
								_List_fromArray(
									[
										A2(
										elm$html$Html$span,
										_List_fromArray(
											[
												elm$html$Html$Attributes$class('lia-icon rotating')
											]),
										_List_fromArray(
											[
												elm$html$Html$text('sync')
											]))
									]));
						} else {
							return A2(
								elm$html$Html$span,
								_List_fromArray(
									[
										elm$html$Html$Attributes$class('lia-btn lia-icon'),
										A2(elm$html$Html$Attributes$style, 'margin-left', '0px'),
										elm$html$Html$Attributes$title(
										author$project$Translations$codeRunning(lang)),
										elm$html$Html$Events$onClick(
										author$project$Lia$Markdown$Code$Update$Stop(idx))
									]),
								_List_fromArray(
									[
										elm$html$Html$text('stop')
									]));
						}
					} else {
						return A2(
							elm$html$Html$span,
							_List_fromArray(
								[
									elm$html$Html$Attributes$class('lia-btn lia-icon'),
									elm$html$Html$Events$onClick(
									author$project$Lia$Markdown$Code$Update$Eval(idx)),
									A2(elm$html$Html$Attributes$style, 'margin-left', '0px'),
									elm$html$Html$Attributes$title(
									author$project$Translations$codeExecute(lang))
								]),
							_List_fromArray(
								[
									elm$html$Html$text('play_circle_filled')
								]));
					}
				}(),
					A2(
					elm$html$Html$button,
					A2(
						elm$core$List$append,
						author$project$Lia$Markdown$Code$View$control_style,
						_List_fromArray(
							[
								elm$html$Html$Events$onClick(
								author$project$Lia$Markdown$Code$Update$Last(idx)),
								elm$html$Html$Attributes$class('lia-btn lia-icon'),
								elm$html$Html$Attributes$title(
								author$project$Translations$codeLast(lang)),
								elm$html$Html$Attributes$disabled(backward)
							])),
					_List_fromArray(
						[
							elm$html$Html$text('last_page')
						])),
					A2(
					elm$html$Html$button,
					A2(
						elm$core$List$append,
						author$project$Lia$Markdown$Code$View$control_style,
						_List_fromArray(
							[
								elm$html$Html$Events$onClick(
								A2(author$project$Lia$Markdown$Code$Update$Load, idx, version_active + 1)),
								elm$html$Html$Attributes$class('lia-btn lia-icon'),
								elm$html$Html$Attributes$title(
								author$project$Translations$codeNext(lang)),
								elm$html$Html$Attributes$disabled(backward)
							])),
					_List_fromArray(
						[
							elm$html$Html$text('navigate_next')
						])),
					A2(
					elm$html$Html$span,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-label'),
							A2(elm$html$Html$Attributes$style, 'float', 'right'),
							A2(elm$html$Html$Attributes$style, 'margin-top', '11px')
						]),
					_List_fromArray(
						[
							elm$html$Html$text(
							elm$core$String$fromInt(version_active))
						])),
					A2(
					elm$html$Html$button,
					A2(
						elm$core$List$append,
						author$project$Lia$Markdown$Code$View$control_style,
						_List_fromArray(
							[
								elm$html$Html$Events$onClick(
								A2(author$project$Lia$Markdown$Code$Update$Load, idx, version_active - 1)),
								elm$html$Html$Attributes$class('lia-btn lia-icon'),
								elm$html$Html$Attributes$title(
								author$project$Translations$codePrev(lang)),
								elm$html$Html$Attributes$disabled(forward)
							])),
					_List_fromArray(
						[
							elm$html$Html$text('navigate_before')
						])),
					A2(
					elm$html$Html$button,
					A2(
						elm$core$List$append,
						author$project$Lia$Markdown$Code$View$control_style,
						_List_fromArray(
							[
								elm$html$Html$Events$onClick(
								author$project$Lia$Markdown$Code$Update$First(idx)),
								elm$html$Html$Attributes$class('lia-btn lia-icon'),
								elm$html$Html$Attributes$title(
								author$project$Translations$codeFirst(lang)),
								elm$html$Html$Attributes$disabled(forward)
							])),
					_List_fromArray(
						[
							elm$html$Html$text('first_page')
						]))
				]));
	});
var author$project$Lia$Markdown$Code$Update$FlipFullscreen = F2(
	function (a, b) {
		return {$: 'FlipFullscreen', a: a, b: b};
	});
var author$project$Lia$Markdown$Code$Update$FlipView = F2(
	function (a, b) {
		return {$: 'FlipView', a: a, b: b};
	});
var author$project$Lia$Markdown$Code$Editor$annotations = elm$html$Html$Attributes$property('annotations');
var author$project$Lia$Markdown$Code$Editor$enableBasicAutocompletion = author$project$Lia$Markdown$Code$Editor$boolean('enableBasicAutocompletion');
var author$project$Lia$Markdown$Code$Editor$enableLiveAutocompletion = author$project$Lia$Markdown$Code$Editor$boolean('enableLiveAutocompletion');
var author$project$Lia$Markdown$Code$Editor$enableSnippets = author$project$Lia$Markdown$Code$Editor$boolean('enableSnippets');
var author$project$Lia$Markdown$Code$Editor$extensions = A2(
	elm$core$Basics$composeR,
	elm$json$Json$Encode$list(elm$json$Json$Encode$string),
	elm$html$Html$Attributes$property('extensions'));
var author$project$Lia$Markdown$Code$Editor$maxLines = A2(
	elm$core$Basics$composeR,
	elm$json$Json$Encode$int,
	elm$html$Html$Attributes$property('maxLines'));
var author$project$Lia$Markdown$Code$Editor$onChange = function (msg) {
	return A2(
		elm$html$Html$Events$on,
		'editorChanged',
		A2(
			elm$json$Json$Decode$map,
			msg,
			A2(
				elm$json$Json$Decode$at,
				_List_fromArray(
					['target', 'value']),
				elm$json$Json$Decode$string)));
};
var author$project$Lia$Markdown$Code$Update$Update = F3(
	function (a, b, c) {
		return {$: 'Update', a: a, b: b, c: c};
	});
var author$project$Lia$Markdown$Code$View$lines = function (code) {
	return elm$core$List$length(
		elm$core$String$lines(code));
};
var author$project$Lia$Markdown$Code$View$pixel = function (from_lines) {
	return (from_lines * 21) + 16;
};
var author$project$Lia$Markdown$Code$View$toStyle = F3(
	function (visible, headless, pix) {
		var top_border = headless ? '4px' : '0px';
		return _List_fromArray(
			[
				A2(
				elm$html$Html$Attributes$style,
				'max-height',
				visible ? (elm$core$String$fromInt(pix) + 'px') : '0px'),
				A2(elm$html$Html$Attributes$style, 'transition', 'max-height 0.25s ease-out'),
				A2(elm$html$Html$Attributes$style, 'border-bottom-left-radius', '4px'),
				A2(elm$html$Html$Attributes$style, 'border-bottom-right-radius', '4px'),
				A2(elm$html$Html$Attributes$style, 'border-top-left-radius', top_border),
				A2(elm$html$Html$Attributes$style, 'border-top-right-radius', top_border),
				A2(elm$html$Html$Attributes$style, 'border', '1px solid gray')
			]);
	});
var author$project$Lia$Markdown$Code$View$evaluate = F7(
	function (theme, attr, running, _n0, file, headless, errors) {
		var id_1 = _n0.a;
		var id_2 = _n0.b;
		var total_lines = author$project$Lia$Markdown$Code$View$lines(file.code);
		var max_lines = file.fullscreen ? total_lines : ((total_lines > 16) ? 16 : total_lines);
		return A2(
			author$project$Lia$Markdown$Code$Editor$editor,
			A2(
				elm$core$List$append,
				_List_fromArray(
					[
						author$project$Lia$Markdown$Code$Editor$onChange(
						A2(author$project$Lia$Markdown$Code$Update$Update, id_1, id_2)),
						author$project$Lia$Markdown$Code$Editor$value(file.code),
						author$project$Lia$Markdown$Code$Editor$mode(file.lang),
						author$project$Lia$Markdown$Code$Editor$theme(theme),
						author$project$Lia$Markdown$Code$Editor$maxLines(
						(max_lines > 16) ? (-1) : max_lines),
						author$project$Lia$Markdown$Code$Editor$readOnly(running),
						author$project$Lia$Markdown$Code$Editor$tabSize(2),
						author$project$Lia$Markdown$Code$Editor$useSoftTabs(false),
						author$project$Lia$Markdown$Code$Editor$annotations(errors),
						author$project$Lia$Markdown$Code$Editor$enableBasicAutocompletion(true),
						author$project$Lia$Markdown$Code$Editor$enableLiveAutocompletion(true),
						author$project$Lia$Markdown$Code$Editor$enableSnippets(true),
						author$project$Lia$Markdown$Code$Editor$extensions(
						_List_fromArray(
							['language_tools']))
					]),
				A2(
					elm$core$List$append,
					A3(
						author$project$Lia$Markdown$Code$View$toStyle,
						file.visible,
						headless,
						author$project$Lia$Markdown$Code$View$pixel(max_lines)),
					author$project$Lia$Markdown$Inline$View$attributes(attr))),
			_List_Nil);
	});
var author$project$Translations$codeMaximize = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Максимизиране';
		case 'De':
			return 'Darstellung maximieren';
		case 'En':
			return 'maximize view';
		case 'Fa':
			return 'بزرگ کردن پنجره';
		case 'Hy':
			return 'բարձրագունել տեսքը';
		default:
			return 'зображення збільшити';
	}
};
var author$project$Translations$codeMinimize = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Минимизиране';
		case 'De':
			return 'Darstellung minimieren';
		case 'En':
			return 'minimize view';
		case 'Fa':
			return 'کوچک کردن پنجره';
		case 'Hy':
			return 'նվազեցնել տեսքը';
		default:
			return 'зображення зменшити';
	}
};
var elm$html$Html$Attributes$classList = function (classes) {
	return elm$html$Html$Attributes$class(
		A2(
			elm$core$String$join,
			' ',
			A2(
				elm$core$List$map,
				elm$core$Tuple$first,
				A2(elm$core$List$filter, elm$core$Tuple$second, classes))));
};
var author$project$Lia$Markdown$Code$View$view_eval = F8(
	function (lang, theme, attr, running, errors, id_1, id_2, file) {
		var headless = file.name === '';
		return A2(
			elm$html$Html$div,
			A2(author$project$Lia$Markdown$Inline$View$annotation, '', attr),
			_List_fromArray(
				[
					headless ? elm$html$Html$text('') : A2(
					elm$html$Html$div,
					_List_fromArray(
						[
							elm$html$Html$Attributes$classList(
							_List_fromArray(
								[
									_Utils_Tuple2('lia-accordion', true),
									_Utils_Tuple2('active', file.visible)
								]))
						]),
					_List_fromArray(
						[
							A2(
							elm$html$Html$span,
							_List_fromArray(
								[
									elm$html$Html$Events$onClick(
									A2(author$project$Lia$Markdown$Code$Update$FlipView, id_1, id_2)),
									A2(elm$html$Html$Attributes$style, 'width', 'calc(100% - 20px)'),
									A2(elm$html$Html$Attributes$style, 'display', 'inline-block')
								]),
							_List_fromArray(
								[
									A2(
									elm$html$Html$b,
									_List_Nil,
									_List_fromArray(
										[
											file.visible ? elm$html$Html$text(' + ') : elm$html$Html$text(' - ')
										])),
									elm$html$Html$text(file.name)
								])),
							file.visible ? A2(
							elm$html$Html$span,
							_List_fromArray(
								[
									elm$html$Html$Attributes$class('lia-accordion-min-max'),
									elm$html$Html$Events$onClick(
									A2(author$project$Lia$Markdown$Code$Update$FlipFullscreen, id_1, id_2)),
									elm$html$Html$Attributes$title(
									file.fullscreen ? author$project$Translations$codeMinimize(lang) : author$project$Translations$codeMaximize(lang))
								]),
							_List_fromArray(
								[
									A2(
									elm$html$Html$b,
									_List_Nil,
									_List_fromArray(
										[
											file.fullscreen ? elm$html$Html$text('↥') : elm$html$Html$text('↧')
										]))
								])) : elm$html$Html$text('')
						])),
					A7(
					author$project$Lia$Markdown$Code$View$evaluate,
					theme,
					attr,
					running,
					_Utils_Tuple2(id_1, id_2),
					file,
					headless,
					errors(id_2))
				]));
	});
var author$project$Lia$Markdown$Code$Log$view_level = function (level) {
	return A2(
		elm$html$Html$Attributes$style,
		'color',
		function () {
			switch (level.$) {
				case 'Debug':
					return 'lightblue';
				case 'Info':
					return 'white';
				case 'Warn':
					return 'yellow';
				default:
					return 'red';
			}
		}());
};
var author$project$Lia$Markdown$Code$Log$view_message = function (_n0) {
	var level = _n0.level;
	var text = _n0.text;
	return A2(
		elm$html$Html$span,
		_List_fromArray(
			[
				author$project$Lia$Markdown$Code$Log$view_level(level)
			]),
		_List_fromArray(
			[
				elm$html$Html$text(text)
			]));
};
var author$project$Lia$Markdown$Code$Log$view = function (log) {
	return A2(
		elm$core$List$map,
		author$project$Lia$Markdown$Code$Log$view_message,
		elm$core$List$reverse(log.messages));
};
var author$project$Lia$Markdown$Code$View$scroll_to_end = function (lines_) {
	return A2(
		elm$html$Html$Attributes$property,
		'scrollTop',
		elm$json$Json$Encode$string(
			elm$core$String$fromInt(14 + (14 * lines_))));
};
var elm$html$Html$pre = _VirtualDom_node('pre');
var author$project$Lia$Markdown$Code$View$view_result = function (log) {
	return (!log.lines) ? A2(
		elm$html$Html$div,
		_List_fromArray(
			[
				A2(elm$html$Html$Attributes$style, 'margin-top', '8px')
			]),
		_List_Nil) : A2(
		elm$html$Html$pre,
		_List_fromArray(
			[
				elm$html$Html$Attributes$class('lia-code-stdout'),
				author$project$Lia$Markdown$Code$View$scroll_to_end(log.lines)
			]),
		author$project$Lia$Markdown$Code$Log$view(log));
};
var elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var elm$html$Html$map = elm$virtual_dom$VirtualDom$map;
var author$project$Lia$Markdown$Code$View$view = F5(
	function (lang, theme, attr, model, code) {
		if (code.$ === 'Highlight') {
			var lang_title_code = code.a;
			return author$project$Lia$Markdown$Code$View$div_(
				A2(
					elm$core$List$map,
					A2(author$project$Lia$Markdown$Code$View$view_code, theme, attr),
					lang_title_code));
		} else {
			var id_1 = code.a;
			var _n1 = A2(elm$core$Array$get, id_1, model);
			if (_n1.$ === 'Just') {
				var project = _n1.a;
				var errors = author$project$Lia$Markdown$Code$View$get_annotations(project.log);
				return author$project$Lia$Markdown$Code$View$div_(
					_List_fromArray(
						[
							A2(
							elm$html$Html$div,
							_List_Nil,
							elm$core$Array$toList(
								A2(
									elm$core$Array$indexedMap,
									A6(author$project$Lia$Markdown$Code$View$view_eval, lang, theme, attr, project.running, errors, id_1),
									project.file))),
							A6(
							author$project$Lia$Markdown$Code$View$view_control,
							lang,
							id_1,
							project.version_active,
							elm$core$Array$length(project.version),
							project.running,
							_Utils_eq(project.terminal, elm$core$Maybe$Nothing) ? false : true),
							author$project$Lia$Markdown$Code$View$view_result(project.log),
							function () {
							var _n2 = project.terminal;
							if (_n2.$ === 'Nothing') {
								return elm$html$Html$text('');
							} else {
								var term = _n2.a;
								return A2(
									elm$html$Html$map,
									author$project$Lia$Markdown$Code$Update$UpdateTerminal(id_1),
									author$project$Lia$Markdown$Code$Terminal$view(term));
							}
						}()
						]));
			} else {
				return elm$html$Html$text('');
			}
		}
	});
var author$project$Lia$Markdown$Effect$Model$get_paragraph = F3(
	function (id1, id2, model) {
		var _n0 = A2(
			elm$core$Maybe$map,
			elm$core$Array$get(id2),
			A2(
				elm$core$Maybe$map,
				function ($) {
					return $.paragraphs;
				},
				A2(elm$core$Dict$get, id1, model.comments)));
		if (_n0.$ === 'Just') {
			var a = _n0.a;
			return a;
		} else {
			return elm$core$Maybe$Nothing;
		}
	});
var author$project$Lia$Markdown$Effect$View$view_block = F3(
	function (viewer, idx, blocks) {
		return A2(
			elm$core$List$cons,
			A2(
				elm$html$Html$span,
				_List_fromArray(
					[
						elm$html$Html$Attributes$class('lia-effect-circle')
					]),
				_List_fromArray(
					[
						elm$html$Html$text(
						elm$core$String$fromInt(idx))
					])),
			A2(elm$core$List$map, viewer, blocks));
	});
var author$project$Lia$Markdown$Quiz$Model$get_state = F2(
	function (vector, idx) {
		return A2(elm$core$Array$get, idx, vector);
	});
var author$project$Lia$Markdown$Quiz$Types$solved = function (e) {
	return !_Utils_eq(e.solved, author$project$Lia$Markdown$Quiz$Types$Open);
};
var author$project$Lia$Markdown$Quiz$Block$Update$Toggle = {$: 'Toggle'};
var author$project$Lia$Markdown$Quiz$Block$View$get_option = F2(
	function (id, list) {
		get_option:
		while (true) {
			var _n0 = _Utils_Tuple2(id, list);
			if (_n0.b.b) {
				if (!_n0.a) {
					var _n1 = _n0.b;
					var x = _n1.a;
					return A2(
						elm$html$Html$span,
						_List_Nil,
						A2(elm$core$List$map, author$project$Lia$Markdown$Inline$View$view_inf, x));
				} else {
					var i = _n0.a;
					var _n2 = _n0.b;
					var xs = _n2.b;
					var $temp$id = i - 1,
						$temp$list = xs;
					id = $temp$id;
					list = $temp$list;
					continue get_option;
				}
			} else {
				return elm$html$Html$text('choose');
			}
		}
	});
var author$project$Lia$Markdown$Quiz$Block$Update$Choose = function (a) {
	return {$: 'Choose', a: a};
};
var author$project$Lia$Markdown$Quiz$Block$View$option = F2(
	function (id, opt) {
		return A2(
			elm$html$Html$div,
			_List_fromArray(
				[
					elm$html$Html$Attributes$class('lia-dropdown-option'),
					elm$html$Html$Events$onClick(
					author$project$Lia$Markdown$Quiz$Block$Update$Choose(id))
				]),
			A2(elm$core$List$map, author$project$Lia$Markdown$Inline$View$view_inf, opt));
	});
var author$project$Lia$Markdown$Quiz$Block$View$select = F4(
	function (solved, open, options, i) {
		return A2(
			elm$html$Html$span,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					elm$html$Html$span,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-dropdown'),
							solved ? elm$html$Html$Attributes$disabled(true) : elm$html$Html$Events$onClick(author$project$Lia$Markdown$Quiz$Block$Update$Toggle)
						]),
					_List_fromArray(
						[
							A2(author$project$Lia$Markdown$Quiz$Block$View$get_option, i, options),
							A2(
							elm$html$Html$span,
							_List_fromArray(
								[
									elm$html$Html$Attributes$class('lia-icon'),
									A2(elm$html$Html$Attributes$style, 'float', 'right')
								]),
							_List_fromArray(
								[
									open ? elm$html$Html$text('arrow_drop_down') : elm$html$Html$text('arrow_drop_up')
								]))
						])),
					A2(
					elm$html$Html$div,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-dropdown-options'),
							A2(
							elm$html$Html$Attributes$style,
							'max-height',
							open ? '2000px' : '0px')
						]),
					A2(elm$core$List$indexedMap, author$project$Lia$Markdown$Quiz$Block$View$option, options))
				]));
	});
var author$project$Lia$Markdown$Quiz$Block$Update$Input = function (a) {
	return {$: 'Input', a: a};
};
var elm$html$Html$Attributes$type_ = elm$html$Html$Attributes$stringProperty('type');
var author$project$Lia$Markdown$Quiz$Block$View$text = F2(
	function (solved, state) {
		return A2(
			elm$html$Html$input,
			_List_fromArray(
				[
					elm$html$Html$Attributes$type_('input'),
					elm$html$Html$Attributes$class('lia-input'),
					elm$html$Html$Attributes$value(state),
					elm$html$Html$Attributes$disabled(solved),
					elm$html$Html$Events$onInput(author$project$Lia$Markdown$Quiz$Block$Update$Input)
				]),
			_List_Nil);
	});
var author$project$Lia$Markdown$Quiz$Block$View$view = F3(
	function (solved, quiz, state) {
		if (state.$ === 'Text') {
			var str = state.a;
			return A2(author$project$Lia$Markdown$Quiz$Block$View$text, solved, str);
		} else {
			var open = state.a;
			var value = state.b;
			return A4(
				author$project$Lia$Markdown$Quiz$Block$View$select,
				solved,
				open,
				quiz.options,
				A2(
					elm$core$Maybe$withDefault,
					-1,
					elm$core$List$head(value)));
		}
	});
var author$project$Lia$Markdown$Quiz$Matrix$View$add_text = F2(
	function (inline, toRow) {
		return A2(
			elm$html$Html$tr,
			_List_Nil,
			A2(
				elm$core$List$append,
				toRow,
				elm$core$List$singleton(
					A2(
						elm$html$Html$td,
						_List_Nil,
						A2(elm$core$List$map, author$project$Lia$Markdown$Inline$View$view_inf, inline)))));
	});
var elm$html$Html$th = _VirtualDom_node('th');
var author$project$Lia$Markdown$Quiz$Matrix$View$th = function (inlines) {
	return A2(
		elm$html$Html$th,
		_List_fromArray(
			[
				elm$html$Html$Attributes$align('center')
			]),
		A2(elm$core$List$map, author$project$Lia$Markdown$Inline$View$view_inf, inlines));
};
var author$project$Lia$Markdown$Quiz$Matrix$View$header = function (inlines) {
	return A2(
		elm$html$Html$tr,
		_List_fromArray(
			[
				elm$html$Html$Attributes$class('lia-label')
			]),
		A2(elm$core$List$map, author$project$Lia$Markdown$Quiz$Matrix$View$th, inlines));
};
var author$project$Lia$Markdown$Quiz$Matrix$Update$Toggle = F2(
	function (a, b) {
		return {$: 'Toggle', a: a, b: b};
	});
var elm$html$Html$Attributes$checked = elm$html$Html$Attributes$boolProperty('checked');
var author$project$Lia$Markdown$Quiz$Matrix$View$check = F4(
	function (solved, row_id, column_id, value) {
		return A2(
			elm$html$Html$td,
			_List_fromArray(
				[
					elm$html$Html$Attributes$align('center')
				]),
			_List_fromArray(
				[
					A2(
					elm$html$Html$span,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-check-item')
						]),
					_List_fromArray(
						[
							A2(
							elm$html$Html$input,
							_List_fromArray(
								[
									elm$html$Html$Attributes$type_('checkbox'),
									elm$html$Html$Attributes$checked(value),
									solved ? elm$html$Html$Attributes$disabled(true) : elm$html$Html$Events$onClick(
									A2(author$project$Lia$Markdown$Quiz$Matrix$Update$Toggle, row_id, column_id))
								]),
							_List_Nil),
							A2(
							elm$html$Html$span,
							_List_fromArray(
								[
									elm$html$Html$Attributes$class('lia-check-btn')
								]),
							_List_fromArray(
								[
									elm$html$Html$text('check')
								]))
						]))
				]));
	});
var author$project$Lia$Markdown$Quiz$Matrix$View$radio = F4(
	function (solved, row_id, column_id, value) {
		return A2(
			elm$html$Html$td,
			_List_fromArray(
				[
					elm$html$Html$Attributes$align('center')
				]),
			_List_fromArray(
				[
					A2(
					elm$html$Html$span,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-radio-item')
						]),
					_List_fromArray(
						[
							A2(
							elm$html$Html$input,
							_List_fromArray(
								[
									elm$html$Html$Attributes$type_('radio'),
									elm$html$Html$Attributes$checked(value),
									solved ? elm$html$Html$Attributes$disabled(true) : elm$html$Html$Events$onClick(
									A2(author$project$Lia$Markdown$Quiz$Matrix$Update$Toggle, row_id, column_id))
								]),
							_List_Nil),
							A2(
							elm$html$Html$span,
							_List_fromArray(
								[
									elm$html$Html$Attributes$class('lia-radio-btn')
								]),
							_List_fromArray(
								[
									elm$html$Html$text('')
								]))
						]))
				]));
	});
var author$project$Lia$Markdown$Quiz$Matrix$View$tr = F3(
	function (solved, id, state) {
		if (state.$ === 'SingleChoice') {
			var list = state.a;
			return A2(
				elm$core$List$indexedMap,
				A2(author$project$Lia$Markdown$Quiz$Matrix$View$radio, solved, id),
				list);
		} else {
			var list = state.a;
			return A2(
				elm$core$List$indexedMap,
				A2(author$project$Lia$Markdown$Quiz$Matrix$View$check, solved, id),
				list);
		}
	});
var author$project$Lia$Markdown$Quiz$Matrix$View$view = F3(
	function (solved, quiz, state) {
		return A2(
			elm$html$Html$table,
			_List_fromArray(
				[
					elm$html$Html$Attributes$class('lia-survey-matrix')
				]),
			A2(
				elm$core$List$cons,
				author$project$Lia$Markdown$Quiz$Matrix$View$header(quiz.headers),
				A3(
					elm$core$List$map2,
					author$project$Lia$Markdown$Quiz$Matrix$View$add_text,
					quiz.options,
					A2(
						elm$core$List$indexedMap,
						author$project$Lia$Markdown$Quiz$Matrix$View$tr(solved),
						elm$core$Array$toList(state)))));
	});
var author$project$Lia$Markdown$Quiz$Update$Block_Update = F2(
	function (a, b) {
		return {$: 'Block_Update', a: a, b: b};
	});
var author$project$Lia$Markdown$Quiz$Update$Matrix_Update = F2(
	function (a, b) {
		return {$: 'Matrix_Update', a: a, b: b};
	});
var author$project$Lia$Markdown$Quiz$Update$Vector_Update = F2(
	function (a, b) {
		return {$: 'Vector_Update', a: a, b: b};
	});
var author$project$Lia$Markdown$Quiz$Vector$Update$Toggle = function (a) {
	return {$: 'Toggle', a: a};
};
var author$project$Lia$Markdown$Quiz$Vector$View$check = F3(
	function (solved, checked, _n0) {
		var id = _n0.a;
		var line = _n0.b;
		return A2(
			elm$html$Html$tr,
			_List_fromArray(
				[
					elm$html$Html$Attributes$class('lia-check-item')
				]),
			_List_fromArray(
				[
					A2(
					elm$html$Html$td,
					_List_fromArray(
						[
							A2(elm$html$Html$Attributes$attribute, 'valign', 'top'),
							elm$html$Html$Attributes$class('lia-label')
						]),
					_List_fromArray(
						[
							A2(
							elm$html$Html$input,
							_List_fromArray(
								[
									elm$html$Html$Attributes$type_('checkbox'),
									elm$html$Html$Attributes$checked(checked),
									solved ? elm$html$Html$Attributes$disabled(true) : elm$html$Html$Events$onClick(
									author$project$Lia$Markdown$Quiz$Vector$Update$Toggle(id))
								]),
							_List_Nil),
							A2(
							elm$html$Html$span,
							_List_fromArray(
								[
									elm$html$Html$Attributes$class('lia-check-btn')
								]),
							_List_fromArray(
								[
									elm$html$Html$text('check')
								]))
						])),
					A2(
					elm$html$Html$td,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-label')
						]),
					A2(elm$core$List$map, author$project$Lia$Markdown$Inline$View$view_inf, line))
				]));
	});
var author$project$Lia$Markdown$Quiz$Vector$View$radio = F3(
	function (solved, checked, _n0) {
		var id = _n0.a;
		var line = _n0.b;
		return A2(
			elm$html$Html$tr,
			_List_fromArray(
				[
					elm$html$Html$Attributes$class('lia-radio-item')
				]),
			_List_fromArray(
				[
					A2(
					elm$html$Html$td,
					_List_fromArray(
						[
							A2(elm$html$Html$Attributes$attribute, 'valign', 'top'),
							elm$html$Html$Attributes$class('lia-label')
						]),
					_List_fromArray(
						[
							A2(
							elm$html$Html$input,
							_List_fromArray(
								[
									elm$html$Html$Attributes$type_('radio'),
									elm$html$Html$Attributes$checked(checked),
									solved ? elm$html$Html$Attributes$disabled(true) : elm$html$Html$Events$onClick(
									author$project$Lia$Markdown$Quiz$Vector$Update$Toggle(id))
								]),
							_List_Nil),
							A2(
							elm$html$Html$span,
							_List_fromArray(
								[
									elm$html$Html$Attributes$class('lia-radio-btn')
								]),
							_List_Nil)
						])),
					A2(
					elm$html$Html$td,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-label')
						]),
					A2(elm$core$List$map, author$project$Lia$Markdown$Inline$View$view_inf, line))
				]));
	});
var author$project$Lia$Markdown$Quiz$Vector$View$table = F3(
	function (fn, inlines, bools) {
		return A2(
			elm$html$Html$table,
			_List_fromArray(
				[
					A2(elm$html$Html$Attributes$attribute, 'cellspacing', '8')
				]),
			A3(
				elm$core$List$map2,
				fn,
				bools,
				A2(elm$core$List$indexedMap, elm$core$Tuple$pair, inlines)));
	});
var author$project$Lia$Markdown$Quiz$Vector$View$view = F3(
	function (solved, quiz, state) {
		var _n0 = _Utils_Tuple2(quiz.solution, state);
		_n0$2:
		while (true) {
			if (_n0.a.$ === 'SingleChoice') {
				if (_n0.b.$ === 'SingleChoice') {
					var list = _n0.b.a;
					return A3(
						author$project$Lia$Markdown$Quiz$Vector$View$table,
						author$project$Lia$Markdown$Quiz$Vector$View$radio(solved),
						quiz.options,
						list);
				} else {
					break _n0$2;
				}
			} else {
				if (_n0.b.$ === 'MultipleChoice') {
					var list = _n0.b.a;
					return A3(
						author$project$Lia$Markdown$Quiz$Vector$View$table,
						author$project$Lia$Markdown$Quiz$Vector$View$check(solved),
						quiz.options,
						list);
				} else {
					break _n0$2;
				}
			}
		}
		return elm$html$Html$text('');
	});
var author$project$Lia$Markdown$Quiz$View$state_view = F3(
	function (solved, state, quiz) {
		var _n0 = _Utils_Tuple2(state, quiz.quiz);
		_n0$3:
		while (true) {
			switch (_n0.a.$) {
				case 'Block_State':
					if (_n0.b.$ === 'Block_Type') {
						var s = _n0.a.a;
						var q = _n0.b.a;
						return A2(
							elm$html$Html$map,
							author$project$Lia$Markdown$Quiz$Update$Block_Update(quiz.id),
							A3(author$project$Lia$Markdown$Quiz$Block$View$view, solved, q, s));
					} else {
						break _n0$3;
					}
				case 'Vector_State':
					if (_n0.b.$ === 'Vector_Type') {
						var s = _n0.a.a;
						var q = _n0.b.a;
						return A2(
							elm$html$Html$map,
							author$project$Lia$Markdown$Quiz$Update$Vector_Update(quiz.id),
							A3(author$project$Lia$Markdown$Quiz$Vector$View$view, solved, q, s));
					} else {
						break _n0$3;
					}
				case 'Matrix_State':
					if (_n0.b.$ === 'Matrix_Type') {
						var s = _n0.a.a;
						var q = _n0.b.a;
						return A2(
							elm$html$Html$map,
							author$project$Lia$Markdown$Quiz$Update$Matrix_Update(quiz.id),
							A3(author$project$Lia$Markdown$Quiz$Matrix$View$view, solved, q, s));
					} else {
						break _n0$3;
					}
				default:
					break _n0$3;
			}
		}
		return elm$html$Html$text('');
	});
var author$project$Lia$Markdown$Quiz$Update$Check = F3(
	function (a, b, c) {
		return {$: 'Check', a: a, b: b, c: c};
	});
var author$project$Lia$Markdown$Quiz$Update$ShowSolution = F2(
	function (a, b) {
		return {$: 'ShowSolution', a: a, b: b};
	});
var author$project$Translations$quizCheck = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Проверка';
		case 'De':
			return 'Prüfen';
		case 'En':
			return 'Check';
		case 'Fa':
			return 'بررسی';
		case 'Hy':
			return 'ստուգել';
		default:
			return 'перевірити';
	}
};
var author$project$Translations$quizChecked = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Проверено';
		case 'De':
			return 'Gelöst';
		case 'En':
			return 'Checked';
		case 'Fa':
			return 'بررسی شده';
		case 'Hy':
			return 'ստուգված';
		default:
			return 'перевірено';
	}
};
var author$project$Translations$quizResolved = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Решено';
		case 'De':
			return 'Aufgelöst';
		case 'En':
			return 'Resolved';
		case 'Fa':
			return 'حل شده';
		case 'Hy':
			return 'լուծված է ';
		default:
			return 'розв\'язано';
	}
};
var author$project$Lia$Markdown$Quiz$View$view_button = F4(
	function (lang, trials, solved, msg) {
		switch (solved.$) {
			case 'Open':
				return (!trials) ? A2(
					elm$html$Html$button,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-btn'),
							elm$html$Html$Events$onClick(msg)
						]),
					_List_fromArray(
						[
							elm$html$Html$text(
							author$project$Translations$quizCheck(lang))
						])) : A2(
					elm$html$Html$button,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-btn'),
							elm$html$Html$Attributes$class('lia-failure'),
							elm$html$Html$Events$onClick(msg)
						]),
					_List_fromArray(
						[
							elm$html$Html$text(
							author$project$Translations$quizCheck(lang) + (' ' + elm$core$String$fromInt(trials)))
						]));
			case 'Solved':
				return A2(
					elm$html$Html$button,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-btn'),
							elm$html$Html$Attributes$class('lia-success'),
							elm$html$Html$Attributes$disabled(true)
						]),
					_List_fromArray(
						[
							elm$html$Html$text(
							author$project$Translations$quizChecked(lang) + (' ' + elm$core$String$fromInt(trials)))
						]));
			default:
				return A2(
					elm$html$Html$button,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-btn'),
							elm$html$Html$Attributes$class('lia-warning'),
							elm$html$Html$Attributes$disabled(true)
						]),
					_List_fromArray(
						[
							elm$html$Html$text(
							author$project$Translations$quizResolved(lang))
						]));
		}
	});
var author$project$Translations$quizSolution = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Отговор';
		case 'De':
			return 'zeige Lösung';
		case 'En':
			return 'show solution';
		case 'Fa':
			return 'نمایش راهکار';
		case 'Hy':
			return 'ցույց տալ լուծումը';
		default:
			return 'показати розв\'язок';
	}
};
var author$project$Lia$Markdown$Quiz$View$view_button_solution = F3(
	function (lang, solution, msg) {
		return _Utils_eq(solution, author$project$Lia$Markdown$Quiz$Types$Open) ? A2(
			elm$html$Html$span,
			_List_fromArray(
				[
					elm$html$Html$Attributes$class('lia-hint-btn'),
					elm$html$Html$Events$onClick(msg),
					elm$html$Html$Attributes$title(
					author$project$Translations$quizSolution(lang)),
					A2(elm$html$Html$Attributes$style, 'cursor', 'pointer')
				]),
			_List_fromArray(
				[
					elm$html$Html$text('info')
				])) : elm$html$Html$text('');
	});
var author$project$Lia$Markdown$Quiz$Update$ShowHint = function (a) {
	return {$: 'ShowHint', a: a};
};
var author$project$Lia$Markdown$Quiz$View$view_hints = F3(
	function (idx, counter, hints) {
		var v_hints = F2(
			function (h, c) {
				var _n0 = _Utils_Tuple2(h, c);
				if (!_n0.a.b) {
					return _List_Nil;
				} else {
					if (!_n0.b) {
						return _List_Nil;
					} else {
						var _n1 = _n0.a;
						var x = _n1.a;
						var xs = _n1.b;
						return A2(
							elm$core$List$cons,
							A2(
								elm$html$Html$p,
								_List_Nil,
								A2(
									elm$core$List$cons,
									A2(
										elm$html$Html$span,
										_List_fromArray(
											[
												elm$html$Html$Attributes$class('lia-icon')
											]),
										_List_fromArray(
											[
												elm$html$Html$text('lightbulb_outline')
											])),
									A2(elm$core$List$map, author$project$Lia$Markdown$Inline$View$view_inf, x))),
							A2(v_hints, xs, c - 1));
					}
				}
			});
		return (_Utils_cmp(
			counter,
			elm$core$List$length(hints)) < 0) ? A2(
			elm$html$Html$span,
			_List_Nil,
			_List_fromArray(
				[
					elm$html$Html$text(' '),
					A2(
					elm$html$Html$span,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-hint-btn'),
							elm$html$Html$Events$onClick(
							author$project$Lia$Markdown$Quiz$Update$ShowHint(idx)),
							elm$html$Html$Attributes$title('show hint'),
							A2(elm$html$Html$Attributes$style, 'cursor', 'pointer')
						]),
					_List_fromArray(
						[
							elm$html$Html$text('help')
						])),
					A2(
					elm$html$Html$div,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-hints')
						]),
					A2(v_hints, hints, counter))
				])) : A2(
			elm$html$Html$div,
			_List_fromArray(
				[
					elm$html$Html$Attributes$class('lia-hints')
				]),
			A2(v_hints, hints, counter));
	});
var elm$html$Html$br = _VirtualDom_node('br');
var author$project$Lia$Markdown$Quiz$View$view_quiz = F4(
	function (lang, state, quiz, fn) {
		return A2(
			elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					(state.error_msg === '') ? elm$html$Html$text('') : A2(elm$html$Html$br, _List_Nil, _List_Nil),
					(state.error_msg === '') ? elm$html$Html$text('') : elm$html$Html$text(state.error_msg),
					fn,
					A4(
					author$project$Lia$Markdown$Quiz$View$view_button,
					lang,
					state.trial,
					state.solved,
					A3(author$project$Lia$Markdown$Quiz$Update$Check, quiz.id, quiz.quiz, quiz.javascript)),
					_Utils_eq(quiz.quiz, author$project$Lia$Markdown$Quiz$Types$Empty_Type) ? elm$html$Html$text('') : A3(
					author$project$Lia$Markdown$Quiz$View$view_button_solution,
					lang,
					state.solved,
					A2(author$project$Lia$Markdown$Quiz$Update$ShowSolution, quiz.id, quiz.quiz)),
					A3(author$project$Lia$Markdown$Quiz$View$view_hints, quiz.id, state.hint, quiz.hints)
				]));
	});
var author$project$Lia$Markdown$Quiz$View$view = F3(
	function (lang, quiz, vector) {
		var _n0 = A2(author$project$Lia$Markdown$Quiz$Model$get_state, vector, quiz.id);
		if (_n0.$ === 'Just') {
			var elem = _n0.a;
			return A4(
				author$project$Lia$Markdown$Quiz$View$view_quiz,
				lang,
				elem,
				quiz,
				A3(
					author$project$Lia$Markdown$Quiz$View$state_view,
					author$project$Lia$Markdown$Quiz$Types$solved(elem),
					elem.state,
					quiz));
		} else {
			return elm$html$Html$text('');
		}
	});
var author$project$Lia$Markdown$Quiz$View$view_solution = F2(
	function (vector, quiz) {
		return A2(
			elm$core$Tuple$pair,
			_Utils_eq(quiz.quiz, author$project$Lia$Markdown$Quiz$Types$Empty_Type),
			A2(
				elm$core$Maybe$withDefault,
				false,
				A2(
					elm$core$Maybe$map,
					author$project$Lia$Markdown$Quiz$Types$solved,
					A2(author$project$Lia$Markdown$Quiz$Model$get_state, vector, quiz.id))));
	});
var author$project$Lia$Markdown$Survey$Model$get_matrix_state = F4(
	function (vector, idx, row, _var) {
		var _n0 = A2(elm$core$Array$get, idx, vector);
		if ((_n0.$ === 'Just') && (_n0.a.b.$ === 'Matrix_State')) {
			var _n1 = _n0.a;
			var _n2 = _n1.b;
			var matrix = _n2.b;
			return A2(
				elm$core$Maybe$withDefault,
				false,
				A2(
					elm$core$Maybe$andThen,
					function (d) {
						return A2(elm$core$Dict$get, _var, d);
					},
					A2(elm$core$Array$get, row, matrix)));
		} else {
			return false;
		}
	});
var author$project$Lia$Markdown$Survey$Model$get_select_state = F2(
	function (vector, id) {
		var _n0 = A2(elm$core$Array$get, id, vector);
		if ((_n0.$ === 'Just') && (_n0.a.b.$ === 'Select_State')) {
			var _n1 = _n0.a;
			var _n2 = _n1.b;
			var open = _n2.a;
			var value = _n2.b;
			return _Utils_Tuple2(open, value);
		} else {
			return _Utils_Tuple2(false, -1);
		}
	});
var author$project$Lia$Markdown$Survey$Model$get_text_state = F2(
	function (vector, idx) {
		var _n0 = A2(elm$core$Array$get, idx, vector);
		if ((_n0.$ === 'Just') && (_n0.a.b.$ === 'Text_State')) {
			var _n1 = _n0.a;
			var str = _n1.b.a;
			return str;
		} else {
			return '';
		}
	});
var author$project$Lia$Markdown$Survey$Model$get_vector_state = F3(
	function (vector, idx, _var) {
		var _n0 = A2(elm$core$Array$get, idx, vector);
		if ((_n0.$ === 'Just') && (_n0.a.b.$ === 'Vector_State')) {
			var _n1 = _n0.a;
			var _n2 = _n1.b;
			var state = _n2.b;
			return A2(
				elm$core$Maybe$withDefault,
				false,
				A2(elm$core$Dict$get, _var, state));
		} else {
			return false;
		}
	});
var author$project$Lia$Markdown$Survey$Update$MatrixUpdate = F3(
	function (a, b, c) {
		return {$: 'MatrixUpdate', a: a, b: b, c: c};
	});
var author$project$Lia$Markdown$Survey$Update$VectorUpdate = F2(
	function (a, b) {
		return {$: 'VectorUpdate', a: a, b: b};
	});
var author$project$Lia$Markdown$Survey$View$inline = function (elements) {
	return A2(
		elm$html$Html$span,
		_List_Nil,
		A2(elm$core$List$map, author$project$Lia$Markdown$Inline$View$view_inf, elements));
};
var author$project$Lia$Markdown$Survey$View$input = F4(
	function (button, msg, checked, submitted) {
		return A2(
			elm$html$Html$span,
			_List_fromArray(
				[
					elm$html$Html$Attributes$class(
					button ? 'lia-check-item' : 'lia-radio-item')
				]),
			_List_fromArray(
				[
					A2(
					elm$html$Html$input,
					_List_fromArray(
						[
							elm$html$Html$Attributes$type_(
							button ? 'checkbox' : 'radio'),
							elm$html$Html$Attributes$checked(checked),
							submitted ? elm$html$Html$Attributes$disabled(true) : elm$html$Html$Events$onClick(msg)
						]),
					_List_Nil),
					A2(
					elm$html$Html$span,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class(
							button ? 'lia-check-btn' : 'lia-radio-btn')
						]),
					_List_fromArray(
						[
							elm$html$Html$text(
							button ? 'check' : '')
						]))
				]));
	});
var author$project$Lia$Markdown$Survey$View$matrix = F6(
	function (button, msg, fn, vars, submitted, _n0) {
		var row = _n0.a;
		var elements = _n0.b;
		var msgX = msg(row);
		var fnX = fn(row);
		return A2(
			elm$html$Html$tr,
			_List_Nil,
			A2(
				elm$core$List$append,
				A2(
					elm$core$List$map,
					function (_var) {
						return A2(
							elm$html$Html$td,
							_List_fromArray(
								[
									elm$html$Html$Attributes$align('center')
								]),
							_List_fromArray(
								[
									A4(
									author$project$Lia$Markdown$Survey$View$input,
									button,
									msgX(_var),
									fnX(_var),
									submitted)
								]));
					},
					vars),
				_List_fromArray(
					[
						A2(
						elm$html$Html$td,
						_List_Nil,
						_List_fromArray(
							[
								author$project$Lia$Markdown$Survey$View$inline(elements)
							]))
					])));
	});
var author$project$Lia$Markdown$Survey$View$vector = F5(
	function (button, msg, fn, submitted, _n0) {
		var _var = _n0.a;
		var elements = _n0.b;
		return A2(
			elm$html$Html$table,
			_List_fromArray(
				[
					A2(elm$html$Html$Attributes$attribute, 'cellspacing', '8')
				]),
			_List_fromArray(
				[
					A2(
					elm$html$Html$td,
					_List_fromArray(
						[
							A2(elm$html$Html$Attributes$attribute, 'valign', 'top'),
							elm$html$Html$Attributes$class('lia-label')
						]),
					_List_fromArray(
						[
							A4(
							author$project$Lia$Markdown$Survey$View$input,
							button,
							msg(_var),
							fn(_var),
							submitted)
						])),
					A2(
					elm$html$Html$td,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-label')
						]),
					_List_fromArray(
						[
							author$project$Lia$Markdown$Survey$View$inline(elements)
						]))
				]));
	});
var elm$html$Html$thead = _VirtualDom_node('thead');
var author$project$Lia$Markdown$Survey$View$view_matrix = F5(
	function (header, vars, questions, fn, submitted) {
		var th = A2(
			elm$html$Html$thead,
			_List_Nil,
			A2(
				elm$core$List$map,
				A2(
					elm$core$Basics$composeR,
					elm$core$List$map(author$project$Lia$Markdown$Inline$View$view_inf),
					elm$html$Html$th(
						_List_fromArray(
							[
								elm$html$Html$Attributes$align('center')
							]))),
				header));
		var fnX = fn(submitted);
		return A2(
			elm$html$Html$table,
			_List_fromArray(
				[
					elm$html$Html$Attributes$class('lia-survey-matrix')
				]),
			A2(
				elm$core$List$cons,
				th,
				A2(
					elm$core$List$map,
					fnX,
					A2(elm$core$List$indexedMap, elm$core$Tuple$pair, questions))));
	});
var author$project$Lia$Markdown$Survey$Update$SelectChose = function (a) {
	return {$: 'SelectChose', a: a};
};
var author$project$Lia$Markdown$Survey$View$get_option = F2(
	function (id, list) {
		get_option:
		while (true) {
			var _n0 = _Utils_Tuple2(id, list);
			if (_n0.b.b) {
				if (!_n0.a) {
					var _n1 = _n0.b;
					var x = _n1.a;
					return A2(
						elm$html$Html$span,
						_List_Nil,
						A2(elm$core$List$map, author$project$Lia$Markdown$Inline$View$view_inf, x));
				} else {
					var i = _n0.a;
					var _n2 = _n0.b;
					var xs = _n2.b;
					var $temp$id = i - 1,
						$temp$list = xs;
					id = $temp$id;
					list = $temp$list;
					continue get_option;
				}
			} else {
				return elm$html$Html$text('choose');
			}
		}
	});
var author$project$Lia$Markdown$Survey$Update$SelectUpdate = F2(
	function (a, b) {
		return {$: 'SelectUpdate', a: a, b: b};
	});
var author$project$Lia$Markdown$Survey$View$option = F3(
	function (id1, id2, opt) {
		return A2(
			elm$html$Html$div,
			_List_fromArray(
				[
					elm$html$Html$Attributes$class('lia-dropdown-option'),
					elm$html$Html$Events$onClick(
					A2(author$project$Lia$Markdown$Survey$Update$SelectUpdate, id1, id2))
				]),
			A2(elm$core$List$map, author$project$Lia$Markdown$Inline$View$view_inf, opt));
	});
var author$project$Lia$Markdown$Survey$View$view_select = F5(
	function (lang, options, _n0, id, submitted) {
		var open = _n0.a;
		var value = _n0.b;
		return A2(
			elm$html$Html$span,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					elm$html$Html$span,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-dropdown'),
							submitted ? elm$html$Html$Attributes$disabled(true) : elm$html$Html$Events$onClick(
							author$project$Lia$Markdown$Survey$Update$SelectChose(id))
						]),
					_List_fromArray(
						[
							A2(author$project$Lia$Markdown$Survey$View$get_option, value, options),
							A2(
							elm$html$Html$span,
							_List_fromArray(
								[
									elm$html$Html$Attributes$class('lia-icon'),
									A2(elm$html$Html$Attributes$style, 'float', 'right')
								]),
							_List_fromArray(
								[
									open ? elm$html$Html$text('arrow_drop_down') : elm$html$Html$text('arrow_drop_up')
								]))
						])),
					A2(
					elm$html$Html$div,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-dropdown-options'),
							A2(
							elm$html$Html$Attributes$style,
							'max-height',
							open ? '2000px' : '0px')
						]),
					A2(
						elm$core$List$indexedMap,
						author$project$Lia$Markdown$Survey$View$option(id),
						options))
				]));
	});
var author$project$Lia$Markdown$Survey$Model$get_submission_state = F2(
	function (vector, idx) {
		var _n0 = A2(elm$core$Array$get, idx, vector);
		if ((_n0.$ === 'Just') && _n0.a.a) {
			var _n1 = _n0.a;
			return true;
		} else {
			return false;
		}
	});
var author$project$Translations$surveySubmit = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Изпрати';
		case 'De':
			return 'Abschicken';
		case 'En':
			return 'Submit';
		case 'Fa':
			return 'ارسال';
		case 'Hy':
			return 'ներկայացնել';
		default:
			return 'відіслати';
	}
};
var author$project$Translations$surveySubmitted = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Благодаря';
		case 'De':
			return 'Dankeshön';
		case 'En':
			return 'Thanks';
		case 'Fa':
			return 'تشکر';
		case 'Hy':
			return 'շնորհակալություն';
		default:
			return 'дякую';
	}
};
var author$project$Lia$Markdown$Survey$View$submit_button = F4(
	function (lang, submitted, idx, javascript) {
		return A2(
			elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					submitted ? A2(
					elm$html$Html$button,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-btn'),
							elm$html$Html$Attributes$disabled(true)
						]),
					_List_fromArray(
						[
							elm$html$Html$text(
							author$project$Translations$surveySubmitted(lang))
						])) : A2(
					elm$html$Html$button,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-btn'),
							elm$html$Html$Events$onClick(
							A2(author$project$Lia$Markdown$Survey$Update$Submit, idx, javascript))
						]),
					_List_fromArray(
						[
							elm$html$Html$text(
							author$project$Translations$surveySubmit(lang))
						]))
				]));
	});
var author$project$Lia$Markdown$Survey$View$view_survey = F5(
	function (lang, model, idx, javascript, fn) {
		var submitted = A2(author$project$Lia$Markdown$Survey$Model$get_submission_state, model, idx);
		return _List_fromArray(
			[
				fn(submitted),
				A4(author$project$Lia$Markdown$Survey$View$submit_button, lang, submitted, idx, javascript)
			]);
	});
var author$project$Lia$Markdown$Survey$Update$TextUpdate = F2(
	function (a, b) {
		return {$: 'TextUpdate', a: a, b: b};
	});
var author$project$Translations$surveyText = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Въведете текст...';
		case 'De':
			return 'Texteingabe ...';
		case 'En':
			return 'Enter some text...';
		case 'Fa':
			return 'لطفا متن وارد کنید';
		case 'Hy':
			return 'Մուտքագրեք որոշ տեքստ';
		default:
			return 'Ввід тексту ...';
	}
};
var elm$html$Html$textarea = _VirtualDom_node('textarea');
var elm$html$Html$Attributes$rows = function (n) {
	return A2(
		_VirtualDom_attribute,
		'rows',
		elm$core$String$fromInt(n));
};
var author$project$Lia$Markdown$Survey$View$view_text = F5(
	function (lang, str, lines, idx, submitted) {
		var attr = _List_fromArray(
			[
				elm$html$Html$Events$onInput(
				author$project$Lia$Markdown$Survey$Update$TextUpdate(idx)),
				elm$html$Html$Attributes$class('lia-textarea'),
				elm$html$Html$Attributes$placeholder(
				author$project$Translations$surveyText(lang)),
				elm$html$Html$Attributes$value(str),
				elm$html$Html$Attributes$disabled(submitted)
			]);
		if (lines === 1) {
			return A2(elm$html$Html$input, attr, _List_Nil);
		} else {
			return A2(
				elm$html$Html$textarea,
				A2(
					elm$core$List$cons,
					elm$html$Html$Attributes$rows(lines),
					attr),
				_List_Nil);
		}
	});
var author$project$Lia$Markdown$Survey$View$view_vector = F3(
	function (questions, fn, submitted) {
		var fnX = fn(submitted);
		return A2(
			elm$html$Html$div,
			_List_Nil,
			A2(elm$core$List$map, fnX, questions));
	});
var author$project$Lia$Markdown$Survey$View$view = F4(
	function (lang, attr, survey, model) {
		return A2(
			elm$html$Html$p,
			A2(author$project$Lia$Markdown$Inline$View$annotation, 'lia-quiz lia-card', attr),
			function () {
				var _n0 = survey.survey;
				switch (_n0.$) {
					case 'Text':
						var lines = _n0.a;
						return A5(
							author$project$Lia$Markdown$Survey$View$view_survey,
							lang,
							model,
							survey.id,
							survey.javascript,
							A4(
								author$project$Lia$Markdown$Survey$View$view_text,
								lang,
								A2(author$project$Lia$Markdown$Survey$Model$get_text_state, model, survey.id),
								lines,
								survey.id));
					case 'Select':
						var inlines = _n0.a;
						return A5(
							author$project$Lia$Markdown$Survey$View$view_survey,
							lang,
							model,
							survey.id,
							survey.javascript,
							A4(
								author$project$Lia$Markdown$Survey$View$view_select,
								lang,
								inlines,
								A2(author$project$Lia$Markdown$Survey$Model$get_select_state, model, survey.id),
								survey.id));
					case 'Vector':
						var button = _n0.a;
						var questions = _n0.b;
						return A5(
							author$project$Lia$Markdown$Survey$View$view_survey,
							lang,
							model,
							survey.id,
							survey.javascript,
							A2(
								author$project$Lia$Markdown$Survey$View$view_vector,
								questions,
								A3(
									author$project$Lia$Markdown$Survey$View$vector,
									button,
									author$project$Lia$Markdown$Survey$Update$VectorUpdate(survey.id),
									A2(author$project$Lia$Markdown$Survey$Model$get_vector_state, model, survey.id))));
					default:
						var button = _n0.a;
						var header = _n0.b;
						var vars = _n0.c;
						var questions = _n0.d;
						return A5(
							author$project$Lia$Markdown$Survey$View$view_survey,
							lang,
							model,
							survey.id,
							survey.javascript,
							A4(
								author$project$Lia$Markdown$Survey$View$view_matrix,
								header,
								vars,
								questions,
								A4(
									author$project$Lia$Markdown$Survey$View$matrix,
									button,
									author$project$Lia$Markdown$Survey$Update$MatrixUpdate(survey.id),
									A2(author$project$Lia$Markdown$Survey$Model$get_matrix_state, model, survey.id),
									vars)));
				}
			}());
	});
var author$project$Lia$Markdown$View$view_table = F5(
	function (config, attr, header, format, body) {
		var view_row = F2(
			function (fct, row) {
				return (_Utils_eq(header, _List_Nil) ? elm$core$List$map(
					function (r) {
						return A2(
							fct,
							_List_fromArray(
								[
									elm$html$Html$Attributes$align('left')
								]),
							config.view(r));
					}) : A2(
					elm$core$List$map2,
					F2(
						function (f, r) {
							return A2(
								fct,
								_List_fromArray(
									[
										elm$html$Html$Attributes$align(f)
									]),
								config.view(r));
						}),
					format))(row);
			});
		return A2(
			elm$html$Html$table,
			A2(author$project$Lia$Markdown$Inline$View$annotation, 'lia-table', attr),
			A2(
				elm$core$List$cons,
				A2(
					elm$html$Html$thead,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-inline lia-table-head')
						]),
					A2(view_row, elm$html$Html$th, header)),
				A2(
					elm$core$List$map,
					function (row) {
						return A2(
							elm$html$Html$tr,
							_List_fromArray(
								[
									elm$html$Html$Attributes$class('lia-inline lia-table-row')
								]),
							A2(view_row, elm$html$Html$td, row));
					},
					body)));
	});
var elm$html$Html$blockquote = _VirtualDom_node('blockquote');
var elm$html$Html$hr = _VirtualDom_node('hr');
var elm$html$Html$ol = _VirtualDom_node('ol');
var author$project$Lia$Markdown$View$view_block = F2(
	function (config, block) {
		switch (block.$) {
			case 'HLine':
				var attr = block.a;
				return A2(
					elm$html$Html$hr,
					A2(author$project$Lia$Markdown$Inline$View$annotation, 'lia-horiz-line', attr),
					_List_Nil);
			case 'Paragraph':
				var attr = block.a;
				var elements = block.b;
				return A2(
					elm$html$Html$p,
					A2(author$project$Lia$Markdown$Inline$View$annotation, 'lia-paragraph', attr),
					config.view(elements));
			case 'Effect':
				var attr = block.a;
				var _n1 = block.b;
				var id_in = _n1.a;
				var id_out = _n1.b;
				var sub_blocks = _n1.c;
				return (_Utils_eq(config.mode, author$project$Lia$Settings$Model$Textbook) || ((_Utils_cmp(id_in, config.section.effect_model.visible) < 1) && (_Utils_cmp(id_out, config.section.effect_model.visible) > 0))) ? A2(
					elm$html$Html$div,
					A2(
						elm$core$List$cons,
						_Utils_eq(id_in, config.section.effect_model.visible) ? elm$html$Html$Attributes$id('focused') : elm$html$Html$Attributes$id(
							elm$core$String$fromInt(id_in)),
						A2(author$project$Lia$Markdown$Inline$View$annotation, 'lia-effect-inline', attr)),
					A3(
						author$project$Lia$Markdown$Effect$View$view_block,
						author$project$Lia$Markdown$View$view_block(config),
						id_in,
						sub_blocks)) : elm$html$Html$text('');
			case 'BulletList':
				var attr = block.a;
				var list = block.b;
				return A2(
					elm$html$Html$ul,
					A2(author$project$Lia$Markdown$Inline$View$annotation, 'lia-list lia-unordered', attr),
					A2(author$project$Lia$Markdown$View$view_list, config, list));
			case 'OrderedList':
				var attr = block.a;
				var list = block.b;
				return A2(
					elm$html$Html$ol,
					A2(author$project$Lia$Markdown$Inline$View$annotation, 'lia-list lia-ordered', attr),
					A2(author$project$Lia$Markdown$View$view_list, config, list));
			case 'Table':
				var attr = block.a;
				var header = block.b;
				var format = block.c;
				var body = block.d;
				return A5(author$project$Lia$Markdown$View$view_table, config, attr, header, format, body);
			case 'Quote':
				var attr = block.a;
				var elements = block.b;
				return A2(
					elm$html$Html$blockquote,
					A2(author$project$Lia$Markdown$Inline$View$annotation, 'lia-quote', attr),
					A2(
						elm$core$List$map,
						function (e) {
							return A2(author$project$Lia$Markdown$View$view_block, config, e);
						},
						elements));
			case 'Code':
				var attr = block.a;
				var code = block.b;
				return A2(
					elm$html$Html$map,
					author$project$Lia$Markdown$Update$UpdateCode,
					A5(author$project$Lia$Markdown$Code$View$view, config.lang, config.ace_theme, attr, config.section.code_vector, code));
			case 'Quiz':
				if (block.c.$ === 'Nothing') {
					var attr = block.a;
					var quiz = block.b;
					var _n2 = block.c;
					return A2(
						elm$html$Html$div,
						A2(author$project$Lia$Markdown$Inline$View$annotation, 'lia-quiz lia-card', attr),
						_List_fromArray(
							[
								A2(
								elm$html$Html$map,
								author$project$Lia$Markdown$Update$UpdateQuiz,
								A3(author$project$Lia$Markdown$Quiz$View$view, config.lang, quiz, config.section.quiz_vector))
							]));
				} else {
					var attr = block.a;
					var quiz = block.b;
					var _n3 = block.c.a;
					var answer = _n3.a;
					var hidden_effects = _n3.b;
					return A2(
						elm$html$Html$div,
						A2(author$project$Lia$Markdown$Inline$View$annotation, 'lia-quiz lia-card', attr),
						function () {
							var _n4 = A2(author$project$Lia$Markdown$Quiz$View$view_solution, config.section.quiz_vector, quiz);
							if (_n4.b) {
								var empty = _n4.a;
								return A2(
									elm$core$List$append,
									_List_fromArray(
										[
											A2(
											elm$html$Html$map,
											author$project$Lia$Markdown$Update$UpdateQuiz,
											A3(author$project$Lia$Markdown$Quiz$View$view, config.lang, quiz, config.section.quiz_vector))
										]),
									A2(
										elm$core$List$cons,
										empty ? elm$html$Html$text('') : A2(elm$html$Html$hr, _List_Nil, _List_Nil),
										A2(
											elm$core$List$map,
											author$project$Lia$Markdown$View$view_block(config),
											answer)));
							} else {
								return _List_fromArray(
									[
										A2(
										elm$html$Html$map,
										author$project$Lia$Markdown$Update$UpdateQuiz,
										A3(author$project$Lia$Markdown$Quiz$View$view, config.lang, quiz, config.section.quiz_vector))
									]);
							}
						}());
				}
			case 'Survey':
				var attr = block.a;
				var survey = block.b;
				return A2(
					elm$html$Html$map,
					author$project$Lia$Markdown$Update$UpdateSurvey,
					A4(author$project$Lia$Markdown$Survey$View$view, config.lang, attr, survey, config.section.survey_vector));
			case 'Comment':
				var _n5 = block.a;
				var id1 = _n5.a;
				var id2 = _n5.b;
				var _n6 = _Utils_Tuple3(
					config.mode,
					_Utils_eq(id1, config.section.effect_model.visible),
					A3(author$project$Lia$Markdown$Effect$Model$get_paragraph, id1, id2, config.section.effect_model));
				if ((_n6.a.$ === 'Textbook') && (_n6.c.$ === 'Just')) {
					var _n7 = _n6.a;
					var _n8 = _n6.c.a;
					var attr = _n8.a;
					var par = _n8.b;
					return A2(
						author$project$Lia$Markdown$View$view_block,
						config,
						A2(author$project$Lia$Markdown$Types$Paragraph, attr, par));
				} else {
					return elm$html$Html$text('');
				}
			case 'Chart':
				var attr = block.a;
				var chart = block.b;
				return A2(author$project$Lia$Markdown$Chart$View$view, attr, chart);
			default:
				var attr = block.a;
				var txt = block.b;
				return A2(
					andre_dietrich$elm_svgbob$SvgBob$getSvg,
					author$project$Lia$Markdown$Inline$View$attributes(attr),
					txt);
		}
	});
var author$project$Lia$Markdown$View$view_list = F2(
	function (config, list) {
		var viewer = function (sub_list) {
			return A2(
				elm$core$List$map,
				author$project$Lia$Markdown$View$view_block(config),
				sub_list);
		};
		var html = elm$html$Html$li(_List_Nil);
		return A2(
			elm$core$List$map,
			html,
			A2(elm$core$List$map, viewer, list));
	});
var author$project$Lia$Markdown$Footnote$Model$getNote = F2(
	function (model, key) {
		return A2(elm$core$Dict$get, key, model);
	});
var author$project$Lia$Markdown$Update$FootnoteHide = {$: 'FootnoteHide'};
var author$project$Lia$Markdown$View$view_footnote = F3(
	function (viewer, key, footnotes) {
		var _n0 = A2(
			elm$core$Maybe$andThen,
			author$project$Lia$Markdown$Footnote$Model$getNote(footnotes),
			key);
		if (_n0.$ === 'Just') {
			var notes = _n0.a;
			return A2(
				elm$html$Html$div,
				_List_fromArray(
					[
						elm$html$Html$Events$onClick(author$project$Lia$Markdown$Update$FootnoteHide),
						A2(elm$html$Html$Attributes$style, 'position', 'fixed'),
						A2(elm$html$Html$Attributes$style, 'display', 'block'),
						A2(elm$html$Html$Attributes$style, 'width', '100%'),
						A2(elm$html$Html$Attributes$style, 'height', '100%'),
						A2(elm$html$Html$Attributes$style, 'top', '0'),
						A2(elm$html$Html$Attributes$style, 'left', '0'),
						A2(elm$html$Html$Attributes$style, 'right', '0'),
						A2(elm$html$Html$Attributes$style, 'bottom', '0'),
						A2(elm$html$Html$Attributes$style, 'background-color', 'rgba(0,0,0,0.6)'),
						A2(elm$html$Html$Attributes$style, 'z-index', '2'),
						A2(elm$html$Html$Attributes$style, 'cursor', 'pointer'),
						A2(elm$html$Html$Attributes$style, 'overflow', 'auto')
					]),
				_List_fromArray(
					[
						A2(
						elm$html$Html$div,
						_List_fromArray(
							[
								A2(elm$html$Html$Attributes$style, 'position', 'absolute'),
								A2(elm$html$Html$Attributes$style, 'top', '50%'),
								A2(elm$html$Html$Attributes$style, 'left', '50%'),
								A2(elm$html$Html$Attributes$style, 'font-size', '20px'),
								A2(elm$html$Html$Attributes$style, 'color', 'white'),
								A2(elm$html$Html$Attributes$style, 'transform', 'translate(-50%,-50%)'),
								A2(elm$html$Html$Attributes$style, '-ms-transform', 'translate(-50%,-50%)')
							]),
						A2(elm$core$List$map, viewer, notes))
					]));
		} else {
			return elm$html$Html$text('');
		}
	});
var elm$html$Html$h2 = _VirtualDom_node('h2');
var elm$html$Html$h4 = _VirtualDom_node('h4');
var elm$html$Html$h5 = _VirtualDom_node('h5');
var elm$html$Html$h6 = _VirtualDom_node('h6');
var elm$html$Html$header = _VirtualDom_node('header');
var author$project$Lia$Markdown$View$view_header = function (config) {
	return A2(
		elm$html$Html$header,
		_List_Nil,
		elm$core$List$singleton(
			function () {
				var _n0 = config.section.indentation;
				switch (_n0) {
					case 1:
						return elm$html$Html$h1(
							_List_fromArray(
								[
									elm$html$Html$Attributes$class('lia-inline lia-h1')
								]));
					case 2:
						return elm$html$Html$h2(
							_List_fromArray(
								[
									elm$html$Html$Attributes$class('lia-inline lia-h2')
								]));
					case 3:
						return elm$html$Html$h3(
							_List_fromArray(
								[
									elm$html$Html$Attributes$class('lia-inline lia-h3')
								]));
					case 4:
						return elm$html$Html$h4(
							_List_fromArray(
								[
									elm$html$Html$Attributes$class('lia-inline lia-h4')
								]));
					case 5:
						return elm$html$Html$h5(
							_List_fromArray(
								[
									elm$html$Html$Attributes$class('lia-inline lia-h5')
								]));
					default:
						return elm$html$Html$h6(
							_List_fromArray(
								[
									elm$html$Html$Attributes$class('lia-inline lia-h6')
								]));
				}
			}()(
				config.view(config.section.title))));
};
var elm$html$Html$section = _VirtualDom_node('section');
var author$project$Lia$Markdown$View$view_body = F2(
	function (_n0, body) {
		var config = _n0.a;
		var footnote2show = _n0.b;
		var footnotes = _n0.c;
		return A2(
			elm$html$Html$section,
			_List_fromArray(
				[
					elm$html$Html$Attributes$class('lia-content')
				]),
			function (s) {
				return _Utils_eq(config.mode, author$project$Lia$Settings$Model$Textbook) ? A2(
					elm$core$List$append,
					s,
					_List_fromArray(
						[
							A2(
							author$project$Lia$Markdown$Footnote$View$block,
							author$project$Lia$Markdown$View$view_block(config),
							footnotes)
						])) : s;
			}(
				A2(
					elm$core$List$cons,
					author$project$Lia$Markdown$View$view_header(config),
					A2(
						elm$core$List$cons,
						A3(
							author$project$Lia$Markdown$View$view_footnote,
							author$project$Lia$Markdown$View$view_block(config),
							footnote2show,
							footnotes),
						A2(
							elm$core$List$map,
							author$project$Lia$Markdown$View$view_block(config),
							body)))));
	});
var elm$virtual_dom$VirtualDom$lazy2 = _VirtualDom_lazy2;
var elm$html$Html$Lazy$lazy2 = elm$virtual_dom$VirtualDom$lazy2;
var author$project$Lia$Markdown$View$view = F4(
	function (lang, mode, section, ace_theme) {
		var config = A5(
			author$project$Lia$Markdown$View$Config,
			mode,
			author$project$Lia$Markdown$Inline$View$viewer(
				_Utils_eq(mode, author$project$Lia$Settings$Model$Textbook) ? 9999 : section.effect_model.visible),
			section,
			ace_theme,
			lang);
		var _n0 = section.error;
		if (_n0.$ === 'Just') {
			var msg = _n0.a;
			return A2(
				elm$html$Html$section,
				_List_fromArray(
					[
						elm$html$Html$Attributes$class('lia-content')
					]),
				_List_fromArray(
					[
						author$project$Lia$Markdown$View$view_header(config),
						elm$html$Html$text(msg)
					]));
		} else {
			return A3(
				elm$html$Html$Lazy$lazy2,
				author$project$Lia$Markdown$View$view_body,
				_Utils_Tuple3(config, section.footnote2show, section.footnotes),
				section.body);
		}
	});
var author$project$Lia$Markdown$Effect$Model$current_paragraphs = function (model) {
	var _n0 = A2(elm$core$Dict$get, model.visible, model.comments);
	if (_n0.$ === 'Just') {
		var e = _n0.a;
		return elm$core$Array$toList(e.paragraphs);
	} else {
		return _List_Nil;
	}
};
var author$project$Translations$soundOff = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Звук вкл.';
		case 'De':
			return 'Sprecher aus';
		case 'En':
			return 'Sound off';
		case 'Fa':
			return 'صدا خاموش';
		case 'Hy':
			return 'առանց ձայն';
		default:
			return 'вимкнений';
	}
};
var author$project$Translations$soundOn = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Звук изкл.';
		case 'De':
			return 'Sprecher an';
		case 'En':
			return 'Sound on';
		case 'Fa':
			return 'صدا روشن';
		case 'Hy':
			return 'ձայնով';
		default:
			return 'увімкнений';
	}
};
var elm$html$Html$Attributes$alt = elm$html$Html$Attributes$stringProperty('alt');
var elm$html$Html$Attributes$height = function (n) {
	return A2(
		_VirtualDom_attribute,
		'height',
		elm$core$String$fromInt(n));
};
var elm$html$Html$Attributes$width = function (n) {
	return A2(
		_VirtualDom_attribute,
		'width',
		elm$core$String$fromInt(n));
};
var author$project$Lia$Markdown$Effect$View$responsive = F3(
	function (lang, sound, msg) {
		return A2(
			elm$html$Html$span,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					elm$html$Html$button,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-btn lia-icon'),
							elm$html$Html$Events$onClick(msg),
							elm$html$Html$Attributes$title(
							sound ? author$project$Translations$soundOn(lang) : author$project$Translations$soundOff(lang))
						]),
					_List_fromArray(
						[
							sound ? elm$html$Html$text('volume_up') : elm$html$Html$text('volume_off')
						])),
					A2(
					elm$html$Html$a,
					_List_fromArray(
						[
							elm$html$Html$Attributes$href('https://responsivevoice.org')
						]),
					_List_fromArray(
						[
							elm$html$Html$text('ResponsiveVoice-NonCommercial')
						])),
					elm$html$Html$text(' licensed under '),
					A2(
					elm$html$Html$a,
					_List_fromArray(
						[
							elm$html$Html$Attributes$href('https://creativecommons.org/licenses/by-nc-nd/4.0/')
						]),
					_List_fromArray(
						[
							A2(
							elm$html$Html$img,
							_List_fromArray(
								[
									elm$html$Html$Attributes$title('ResponsiveVoice Text To Speech'),
									elm$html$Html$Attributes$src('https://responsivevoice.org/wp-content/uploads/2014/08/95x15.png'),
									elm$html$Html$Attributes$alt('95x15'),
									elm$html$Html$Attributes$width(95),
									elm$html$Html$Attributes$height(15)
								]),
							_List_Nil)
						]))
				]));
	});
var author$project$Lia$Settings$Update$Sound = {$: 'Sound'};
var author$project$Lia$Settings$Update$Toggle = function (a) {
	return {$: 'Toggle', a: a};
};
var author$project$Lia$Settings$Update$toggle_sound = author$project$Lia$Settings$Update$Toggle(author$project$Lia$Settings$Update$Sound);
var elm$html$Html$footer = _VirtualDom_node('footer');
var author$project$Lia$View$view_footer = F4(
	function (lang, sound, mode, effects) {
		switch (mode.$) {
			case 'Slides':
				return A2(
					elm$html$Html$footer,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-footer')
						]),
					A3(
						pilatch$flip$Flip$flip,
						elm$core$List$append,
						_List_fromArray(
							[
								A3(
								author$project$Lia$Markdown$Effect$View$responsive,
								lang,
								sound,
								author$project$Lia$Update$UpdateSettings(author$project$Lia$Settings$Update$toggle_sound))
							]),
						A2(
							elm$core$List$map,
							function (_n1) {
								var par = _n1.b;
								return A2(
									elm$html$Html$p,
									_List_Nil,
									A2(author$project$Lia$Markdown$Inline$View$viewer, 9999, par));
							},
							author$project$Lia$Markdown$Effect$Model$current_paragraphs(effects))));
			case 'Presentation':
				return A2(
					elm$html$Html$footer,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-footer')
						]),
					_List_fromArray(
						[
							A3(
							author$project$Lia$Markdown$Effect$View$responsive,
							lang,
							sound,
							author$project$Lia$Update$UpdateSettings(author$project$Lia$Settings$Update$toggle_sound))
						]));
			default:
				return elm$html$Html$text('');
		}
	});
var author$project$Lia$Settings$Update$SwitchMode = {$: 'SwitchMode'};
var author$project$Translations$modePresentation = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Режим: Презентация';
		case 'De':
			return 'Modus: Präsentation';
		case 'En':
			return 'Mode: Presentation';
		case 'Fa':
			return 'سبک: ارائه';
		case 'Hy':
			return 'կերպ: ներկայացում';
		default:
			return 'режим: презентація';
	}
};
var author$project$Translations$modeSlides = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Режим: Слайдове';
		case 'De':
			return 'Modus: Folien';
		case 'En':
			return 'Mode: Slides';
		case 'Fa':
			return 'سبک: اسلایدها';
		case 'Hy':
			return 'կերպ: սլայդներ';
		default:
			return 'режим: слайди';
	}
};
var author$project$Translations$modeTextbook = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Режим: Текст';
		case 'De':
			return 'Modus: Lehrbuch';
		case 'En':
			return 'Mode: Textbook';
		case 'Fa':
			return 'سبک: کتاب';
		case 'Hy':
			return 'կերպ: գիրք';
		default:
			return 'режим: навчальна книга';
	}
};
var author$project$Lia$Settings$View$switch_button_mode = F2(
	function (lang, mode) {
		return A2(
			elm$html$Html$button,
			_List_fromArray(
				[
					elm$html$Html$Attributes$class('lia-btn lia-right'),
					elm$html$Html$Events$onClick(author$project$Lia$Settings$Update$SwitchMode),
					elm$html$Html$Attributes$title(
					function () {
						switch (mode.$) {
							case 'Slides':
								return author$project$Translations$modeSlides(lang);
							case 'Presentation':
								return author$project$Translations$modePresentation(lang);
							default:
								return author$project$Translations$modeTextbook(lang);
						}
					}())
				]),
			_List_fromArray(
				[
					elm$html$Html$text(
					function () {
						switch (mode.$) {
							case 'Slides':
								return 'visibility';
							case 'Presentation':
								return 'hearing';
							default:
								return 'book';
						}
					}())
				]));
	});
var author$project$Lia$Settings$Update$TableOfContents = {$: 'TableOfContents'};
var author$project$Translations$baseToc = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Съдържание (показване/скриване)';
		case 'De':
			return 'Inhaltsverzeichnis (zeigen/verbergen)';
		case 'En':
			return 'Table of Contents (show/hide)';
		case 'Fa':
			return 'فهرست مطالب) نمایش/عدم نمایش)';
		case 'Hy':
			return 'բովանդակություն (ցույց տալ / թաքցնել)';
		default:
			return 'зміст (показати/приховати)';
	}
};
var author$project$Lia$Settings$View$toggle_button_toc = function (lang) {
	return A2(
		elm$html$Html$button,
		_List_fromArray(
			[
				elm$html$Html$Events$onClick(
				author$project$Lia$Settings$Update$Toggle(author$project$Lia$Settings$Update$TableOfContents)),
				elm$html$Html$Attributes$title(
				author$project$Translations$baseToc(lang)),
				elm$html$Html$Attributes$class('lia-btn lia-toc-control lia-left')
			]),
		_List_fromArray(
			[
				elm$html$Html$text('toc')
			]));
};
var author$project$Lia$Update$NextSection = {$: 'NextSection'};
var author$project$Lia$Update$PrevSection = {$: 'PrevSection'};
var author$project$Lia$View$navButton = F3(
	function (str, title, msg) {
		return A2(
			elm$html$Html$button,
			_List_fromArray(
				[
					elm$html$Html$Events$onClick(msg),
					elm$html$Html$Attributes$title(title),
					elm$html$Html$Attributes$class('lia-btn lia-slide-control lia-left')
				]),
			_List_fromArray(
				[
					elm$html$Html$text(str)
				]));
	});
var author$project$Translations$baseNext = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Следващ';
		case 'De':
			return 'weiter';
		case 'En':
			return 'next';
		case 'Fa':
			return 'بعدی';
		case 'Hy':
			return 'հաջորդը';
		default:
			return 'далі';
	}
};
var author$project$Translations$basePrev = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Предишен';
		case 'De':
			return 'zurück';
		case 'En':
			return 'previous';
		case 'Fa':
			return 'قبلی';
		case 'Hy':
			return 'նախորդը';
		default:
			return 'назад';
	}
};
var elm$html$Html$nav = _VirtualDom_node('nav');
var author$project$Lia$View$view_nav = F7(
	function (section_active, mode, lang, base, translations, speaking, state) {
		return A2(
			elm$html$Html$nav,
			_List_fromArray(
				[
					elm$html$Html$Attributes$class('lia-toolbar')
				]),
			_List_fromArray(
				[
					A2(
					elm$html$Html$map,
					author$project$Lia$Update$UpdateSettings,
					author$project$Lia$Settings$View$toggle_button_toc(lang)),
					A2(
					elm$html$Html$span,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-spacer')
						]),
					_List_Nil),
					A3(
					author$project$Lia$View$navButton,
					'navigate_before',
					author$project$Translations$basePrev(lang),
					author$project$Lia$Update$PrevSection),
					A2(
					elm$html$Html$span,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-labeled lia-left')
						]),
					_List_fromArray(
						[
							A2(
							elm$html$Html$span,
							_List_fromArray(
								[
									elm$html$Html$Attributes$class('lia-label'),
									speaking ? A2(elm$html$Html$Attributes$style, 'text-decoration', 'underline') : A2(elm$html$Html$Attributes$style, '', '')
								]),
							_List_fromArray(
								[
									elm$html$Html$text(
									elm$core$String$fromInt(section_active + 1)),
									elm$html$Html$text(
									function () {
										if (mode.$ === 'Textbook') {
											return '';
										} else {
											return state;
										}
									}())
								]))
						])),
					A3(
					author$project$Lia$View$navButton,
					'navigate_next',
					author$project$Translations$baseNext(lang),
					author$project$Lia$Update$NextSection),
					A2(
					elm$html$Html$span,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-spacer')
						]),
					_List_Nil),
					A2(
					elm$html$Html$map,
					author$project$Lia$Update$UpdateSettings,
					A2(author$project$Lia$Settings$View$switch_button_mode, lang, mode))
				]));
	});
var elm$html$Html$article = _VirtualDom_node('article');
var author$project$Lia$View$view_article = function (model) {
	return A2(
		elm$html$Html$article,
		_List_fromArray(
			[
				elm$html$Html$Attributes$class('lia-slide')
			]),
		function () {
			var _n0 = author$project$Lia$Update$get_active_section(model);
			if (_n0.$ === 'Just') {
				var section = _n0.a;
				return _List_fromArray(
					[
						A7(
						author$project$Lia$View$view_nav,
						model.section_active,
						model.settings.mode,
						model.translation,
						model.url,
						author$project$Lia$Definition$Types$get_translations(model.definition),
						model.settings.speaking,
						author$project$Lia$Markdown$Effect$View$state(section.effect_model)),
						A2(
						elm$html$Html$map,
						author$project$Lia$Update$UpdateMarkdown,
						A4(author$project$Lia$Markdown$View$view, model.translation, model.settings.mode, section, model.settings.editor)),
						A4(author$project$Lia$View$view_footer, model.translation, model.settings.sound, model.settings.mode, section.effect_model)
					]);
			} else {
				return _List_fromArray(
					[
						elm$html$Html$text('')
					]);
			}
		}());
};
var author$project$Lia$Index$View$toc = F2(
	function (active, section) {
		return section.visible ? A2(
			elm$html$Html$a,
			_List_fromArray(
				[
					elm$html$Html$Attributes$class(
					'lia-toc-l' + (elm$core$String$fromInt(section.indentation) + ((!_Utils_eq(section.error, elm$core$Maybe$Nothing)) ? ' lia-error' : (_Utils_eq(active, section.idx) ? ' lia-active' : (section.visited ? '' : ' lia-not-visited'))))),
					elm$html$Html$Attributes$href(
					'#' + elm$core$String$fromInt(section.idx + 1))
				]),
			A2(author$project$Lia$Markdown$Inline$View$viewer, 9999, section.title)) : elm$html$Html$text('');
	});
var author$project$Lia$Index$View$view = F2(
	function (active, sections) {
		var toc_ = author$project$Lia$Index$View$toc(active);
		return A2(
			elm$html$Html$div,
			_List_fromArray(
				[
					elm$html$Html$Attributes$class('lia-content')
				]),
			A2(
				elm$core$List$map,
				toc_,
				elm$core$Array$toList(sections)));
	});
var author$project$Lia$Index$Update$ScanIndex = function (a) {
	return {$: 'ScanIndex', a: a};
};
var author$project$Translations$baseSearch = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Търсене';
		case 'De':
			return 'Suche';
		case 'En':
			return 'Search';
		case 'Fa':
			return 'جستجو';
		case 'Hy':
			return 'փնտրել';
		default:
			return 'пошук';
	}
};
var author$project$Lia$Index$View$view_search = F2(
	function (lang, model) {
		return A2(
			elm$html$Html$span,
			_List_fromArray(
				[
					elm$html$Html$Attributes$class('lia-toolbar')
				]),
			_List_fromArray(
				[
					A2(
					elm$html$Html$input,
					_List_fromArray(
						[
							elm$html$Html$Attributes$type_('input'),
							elm$html$Html$Attributes$value(model),
							elm$html$Html$Attributes$class('lia-input'),
							elm$html$Html$Attributes$placeholder(
							author$project$Translations$baseSearch(lang)),
							A2(elm$html$Html$Attributes$style, 'max-width', '100%'),
							elm$html$Html$Events$onInput(author$project$Lia$Index$Update$ScanIndex)
						]),
					_List_Nil)
				]));
	});
var author$project$Lia$Settings$Update$Button = function (a) {
	return {$: 'Button', a: a};
};
var author$project$Lia$Settings$Update$Informations = {$: 'Informations'};
var author$project$Lia$Settings$Update$Settings = {$: 'Settings'};
var author$project$Lia$Settings$Update$Share = {$: 'Share'};
var author$project$Lia$Settings$Update$Translations = {$: 'Translations'};
var author$project$Lia$Settings$View$dropdown = F4(
	function (active, name, alt, msg) {
		return A2(
			elm$html$Html$button,
			_List_fromArray(
				[
					elm$html$Html$Events$onClick(msg),
					elm$html$Html$Attributes$class(
					'lia-btn lia-icon' + (active ? ' lia-selected' : '')),
					elm$html$Html$Attributes$title(alt),
					A2(elm$html$Html$Attributes$style, 'width', '42px'),
					A2(elm$html$Html$Attributes$style, 'padding', '0px')
				]),
			_List_fromArray(
				[
					elm$html$Html$text(name)
				]));
	});
var author$project$Lia$Settings$View$menu_style = function (visible) {
	return _List_fromArray(
		[
			elm$html$Html$Attributes$class(
			'lia-slide-animation' + (visible ? ' lia-settings' : '')),
			A2(
			elm$html$Html$Attributes$style,
			'max-height',
			visible ? '256px' : '0px')
		]);
};
var author$project$Lia$Settings$View$qrCodeView = F2(
	function (visible, url) {
		return A2(
			elm$html$Html$div,
			author$project$Lia$Settings$View$menu_style(visible),
			_List_fromArray(
				[
					A2(
					elm$html$Html$p,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							elm$html$Html$img,
							_List_fromArray(
								[
									elm$html$Html$Attributes$src('https://api.qrserver.com/v1/create-qr-code/?size=222x222&data=' + url),
									A2(elm$html$Html$Attributes$style, 'width', '99%')
								]),
							_List_Nil)
						]))
				]));
	});
var author$project$Lia$Settings$View$bold = A2(
	elm$core$Basics$composeR,
	elm$html$Html$text,
	A2(
		elm$core$Basics$composeR,
		elm$core$List$singleton,
		elm$html$Html$b(_List_Nil)));
var author$project$Lia$Settings$View$span_block = elm$html$Html$span(
	_List_fromArray(
		[
			A2(elm$html$Html$Attributes$style, 'display', 'block')
		]));
var author$project$Lia$Settings$View$thanks = function (to) {
	return A2(
		elm$html$Html$span,
		_List_Nil,
		_List_fromArray(
			[
				A2(elm$html$Html$hr, _List_Nil, _List_Nil),
				author$project$Lia$Settings$View$span_block(
				A2(elm$core$List$map, author$project$Lia$Markdown$Inline$View$view_inf, to))
			]));
};
var author$project$Lia$Settings$View$view_attributes = function (thanks_to) {
	return A2(
		elm$html$Html$span,
		_List_Nil,
		A2(elm$core$List$map, author$project$Lia$Settings$View$thanks, thanks_to));
};
var author$project$Translations$infoAuthor = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Автор: ';
		case 'De':
			return 'Autor: ';
		case 'En':
			return 'Author: ';
		case 'Fa':
			return 'نویسنده: ';
		case 'Hy':
			return 'հեղինակ: ';
		default:
			return 'автор: ';
	}
};
var author$project$Translations$infoDate = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Дата: ';
		case 'De':
			return 'Datum: ';
		case 'En':
			return 'Date: ';
		case 'Fa':
			return 'تاریخ: ';
		case 'Hy':
			return 'ամսաթիվ: ';
		default:
			return 'дата: ';
	}
};
var author$project$Translations$infoEmail = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'eMail: ';
		case 'De':
			return 'e-Mail: ';
		case 'En':
			return 'eMail: ';
		case 'Fa':
			return 'ایمیل: ';
		case 'Hy':
			return 'էլ․ փոստ: ';
		default:
			return 'електронна пошта: ';
	}
};
var author$project$Translations$infoVersion = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Версия: ';
		case 'De':
			return 'Version: ';
		case 'En':
			return 'Version: ';
		case 'Fa':
			return 'نسخه: ';
		case 'Hy':
			return 'տարբերակ: ';
		default:
			return 'версія: ';
	}
};
var author$project$Lia$Settings$View$view_information = F3(
	function (lang, visible, definition) {
		return A2(
			elm$html$Html$div,
			author$project$Lia$Settings$View$menu_style(visible),
			_List_fromArray(
				[
					elm$core$String$isEmpty(definition.author) ? elm$html$Html$text('') : author$project$Lia$Settings$View$span_block(
					_List_fromArray(
						[
							author$project$Lia$Settings$View$bold(
							author$project$Translations$infoAuthor(lang)),
							elm$html$Html$text(definition.author)
						])),
					elm$core$String$isEmpty(definition.email) ? elm$html$Html$text('') : author$project$Lia$Settings$View$span_block(
					_List_fromArray(
						[
							author$project$Lia$Settings$View$bold(
							author$project$Translations$infoEmail(lang)),
							A2(
							elm$html$Html$a,
							_List_fromArray(
								[
									elm$html$Html$Attributes$href(definition.email)
								]),
							_List_fromArray(
								[
									elm$html$Html$text(definition.email)
								]))
						])),
					elm$core$String$isEmpty(definition.version) ? elm$html$Html$text('') : author$project$Lia$Settings$View$span_block(
					_List_fromArray(
						[
							author$project$Lia$Settings$View$bold(
							author$project$Translations$infoVersion(lang)),
							elm$html$Html$text(definition.version)
						])),
					elm$core$String$isEmpty(definition.date) ? elm$html$Html$text('') : author$project$Lia$Settings$View$span_block(
					_List_fromArray(
						[
							author$project$Lia$Settings$View$bold(
							author$project$Translations$infoDate(lang)),
							elm$html$Html$text(definition.date)
						])),
					elm$core$List$isEmpty(definition.attributes) ? elm$html$Html$text('') : author$project$Lia$Settings$View$span_block(
					_List_fromArray(
						[
							author$project$Lia$Settings$View$bold('Attributes:'),
							A2(elm$html$Html$br, _List_Nil, _List_Nil),
							author$project$Lia$Settings$View$view_attributes(definition.attributes)
						]))
				]));
	});
var author$project$Lia$Settings$Update$ChangeTheme = function (a) {
	return {$: 'ChangeTheme', a: a};
};
var elm$html$Html$label = _VirtualDom_node('label');
var elm$html$Html$Attributes$name = elm$html$Html$Attributes$stringProperty('name');
var author$project$Lia$Settings$View$check_list = F4(
	function (checked, label, text, dir) {
		return A2(
			elm$html$Html$label,
			_List_fromArray(
				[
					elm$html$Html$Attributes$class(label),
					A2(elm$html$Html$Attributes$style, 'float', dir)
				]),
			_List_fromArray(
				[
					A2(
					elm$html$Html$input,
					_List_fromArray(
						[
							elm$html$Html$Attributes$type_('radio'),
							elm$html$Html$Attributes$name('toggle'),
							elm$html$Html$Attributes$checked(checked),
							elm$html$Html$Events$onClick(
							author$project$Lia$Settings$Update$ChangeTheme(label))
						]),
					_List_Nil),
					A2(
					elm$html$Html$span,
					_List_Nil,
					_List_fromArray(
						[
							elm$html$Html$text(text)
						]))
				]));
	});
var author$project$Translations$cAmber = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Кехлибар';
		case 'De':
			return 'Bernstein';
		case 'En':
			return 'Amber';
		case 'Fa':
			return 'کهربایی';
		case 'Hy':
			return 'սաթագույն';
		default:
			return 'бурштиновий';
	}
};
var author$project$Translations$cBlue = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Синьо';
		case 'De':
			return 'Blau';
		case 'En':
			return 'Blue';
		case 'Fa':
			return 'آبی';
		case 'Hy':
			return 'կապույտ';
		default:
			return 'синій';
	}
};
var author$project$Translations$cDefault = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Подразбиране';
		case 'De':
			return 'Standard';
		case 'En':
			return 'Default';
		case 'Fa':
			return 'پیشفرض';
		case 'Hy':
			return 'կանխադրված';
		default:
			return 'стандартний';
	}
};
var author$project$Translations$cGray = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Сиво';
		case 'De':
			return 'Grau';
		case 'En':
			return 'Gray';
		case 'Fa':
			return 'خاکستری';
		case 'Hy':
			return 'մոխրագույն';
		default:
			return 'сірий';
	}
};
var author$project$Translations$cGreen = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Зелено';
		case 'De':
			return 'Grün';
		case 'En':
			return 'Green';
		case 'Fa':
			return 'سبز';
		case 'Hy':
			return 'կանաչ';
		default:
			return 'зелений';
	}
};
var author$project$Translations$cPurple = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Лилаво';
		case 'De':
			return 'Violett';
		case 'En':
			return 'Purple';
		case 'Fa':
			return 'بنفش';
		case 'Hy':
			return 'մանուշակագույն';
		default:
			return 'фіолетовий';
	}
};
var author$project$Lia$Settings$View$design_theme = F2(
	function (lang, theme) {
		return A2(
			elm$html$Html$div,
			_List_fromArray(
				[
					elm$html$Html$Attributes$class('lia-color')
				]),
			A2(
				elm$core$List$map,
				function (_n0) {
					var c = _n0.a;
					var b = _n0.b;
					var text = _n0.c;
					return A4(
						author$project$Lia$Settings$View$check_list,
						_Utils_eq(c, theme),
						c,
						text,
						b);
				},
				_List_fromArray(
					[
						_Utils_Tuple3(
						'default',
						'left',
						author$project$Translations$cDefault(lang)),
						_Utils_Tuple3(
						'amber',
						'right',
						author$project$Translations$cAmber(lang)),
						_Utils_Tuple3(
						'blue',
						'left',
						author$project$Translations$cBlue(lang)),
						_Utils_Tuple3(
						'green',
						'right',
						author$project$Translations$cGreen(lang)),
						_Utils_Tuple3(
						'grey',
						'left',
						author$project$Translations$cGray(lang)),
						_Utils_Tuple3(
						'purple',
						'right',
						author$project$Translations$cPurple(lang))
					])));
	});
var author$project$Lia$Settings$Update$ChangeFontSize = function (a) {
	return {$: 'ChangeFontSize', a: a};
};
var author$project$Lia$Settings$View$navButton = F3(
	function (str, title, msg) {
		return A2(
			elm$html$Html$button,
			_List_fromArray(
				[
					elm$html$Html$Events$onClick(msg),
					elm$html$Html$Attributes$title(title),
					elm$html$Html$Attributes$class('lia-btn lia-slide-control lia-left')
				]),
			_List_fromArray(
				[
					elm$html$Html$text(str)
				]));
	});
var author$project$Translations$baseDec = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Увеличаване';
		case 'De':
			return 'verkleinern';
		case 'En':
			return 'decrease';
		case 'Fa':
			return 'افزودن';
		case 'Hy':
			return 'նվազել';
		default:
			return 'зменшити';
	}
};
var author$project$Translations$baseFont = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Шрифт';
		case 'De':
			return 'Schrift';
		case 'En':
			return 'Font';
		case 'Fa':
			return 'فونت';
		case 'Hy':
			return 'տառատեսակ';
		default:
			return 'шрифт';
	}
};
var author$project$Translations$baseInc = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Намаляване';
		case 'De':
			return 'vergrößern';
		case 'En':
			return 'increase';
		case 'Fa':
			return 'کاستن';
		case 'Hy':
			return 'աճել';
		default:
			return 'збільшити';
	}
};
var author$project$Lia$Settings$View$inc_font_size = F2(
	function (lang, _int) {
		return A2(
			elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					elm$html$Html$text(
					author$project$Translations$baseFont(lang) + ':'),
					A3(
					author$project$Lia$Settings$View$navButton,
					'-',
					author$project$Translations$baseDec(lang),
					author$project$Lia$Settings$Update$ChangeFontSize(false)),
					elm$html$Html$text(
					elm$core$String$fromInt(_int) + '%'),
					A3(
					author$project$Lia$Settings$View$navButton,
					'+',
					author$project$Translations$baseInc(lang),
					author$project$Lia$Settings$Update$ChangeFontSize(true))
				]));
	});
var author$project$Lia$Settings$Update$Reset = {$: 'Reset'};
var author$project$Lia$Settings$View$reset = A2(
	elm$html$Html$button,
	_List_fromArray(
		[
			elm$html$Html$Events$onClick(author$project$Lia$Settings$Update$Reset)
		]),
	_List_fromArray(
		[
			elm$html$Html$text('reset course')
		]));
var author$project$Lia$Settings$Update$ChangeEditor = function (a) {
	return {$: 'ChangeEditor', a: a};
};
var elm$html$Html$option = _VirtualDom_node('option');
var elm$html$Html$Attributes$selected = elm$html$Html$Attributes$boolProperty('selected');
var author$project$Lia$Settings$View$option = F2(
	function (current, _n0) {
		var val = _n0.a;
		var text = _n0.b;
		return A2(
			elm$html$Html$option,
			_List_fromArray(
				[
					elm$html$Html$Attributes$value(val),
					elm$html$Html$Attributes$selected(
					_Utils_eq(val, current))
				]),
			_List_fromArray(
				[
					elm$html$Html$text(text)
				]));
	});
var author$project$Translations$cBright = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Светло';
		case 'De':
			return 'Hell';
		case 'En':
			return 'Bright';
		case 'Fa':
			return 'روشن';
		case 'Hy':
			return 'բաց';
		default:
			return 'світлий';
	}
};
var author$project$Translations$cDark = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Тъмно';
		case 'De':
			return 'Dunkel';
		case 'En':
			return 'Dark';
		case 'Fa':
			return 'تیره';
		case 'Hy':
			return 'մուգ';
		default:
			return 'темний';
	}
};
var elm$html$Html$optgroup = _VirtualDom_node('optgroup');
var elm$html$Html$select = _VirtualDom_node('select');
var author$project$Lia$Settings$View$view_ace = F2(
	function (lang, theme) {
		var op = author$project$Lia$Settings$View$option(theme);
		return A2(
			elm$html$Html$div,
			_List_fromArray(
				[
					A2(elm$html$Html$Attributes$style, 'display', 'inline-flex'),
					A2(elm$html$Html$Attributes$style, 'width', '99%')
				]),
			_List_fromArray(
				[
					A2(
					elm$html$Html$select,
					_List_fromArray(
						[
							elm$html$Html$Events$onInput(author$project$Lia$Settings$Update$ChangeEditor)
						]),
					_List_fromArray(
						[
							A2(
							elm$html$Html$optgroup,
							_List_fromArray(
								[
									A2(
									elm$html$Html$Attributes$attribute,
									'label',
									author$project$Translations$cBright(lang))
								]),
							A2(
								elm$core$List$map,
								op,
								_List_fromArray(
									[
										_Utils_Tuple2('chrome', 'Chrome'),
										_Utils_Tuple2('clouds', 'Clouds'),
										_Utils_Tuple2('crimson_editor', 'Crimson Editor'),
										_Utils_Tuple2('dawn', 'Dawn'),
										_Utils_Tuple2('dreamweaver', 'Dreamweaver'),
										_Utils_Tuple2('eclipse', 'Eclipse'),
										_Utils_Tuple2('github', 'Github'),
										_Utils_Tuple2('iplastic', 'IPlastic'),
										_Utils_Tuple2('katzenmilch', 'KatzenMilch'),
										_Utils_Tuple2('kuroir', 'Kuroir'),
										_Utils_Tuple2('solarized_light', 'Solarized Light'),
										_Utils_Tuple2('sqlserver', 'SQL Server'),
										_Utils_Tuple2('textmate', 'TextMate'),
										_Utils_Tuple2('tomorrow', 'Tomorrow'),
										_Utils_Tuple2('xcode', 'XCode')
									]))),
							A2(
							elm$html$Html$optgroup,
							_List_fromArray(
								[
									A2(
									elm$html$Html$Attributes$attribute,
									'label',
									author$project$Translations$cDark(lang))
								]),
							A2(
								elm$core$List$map,
								op,
								_List_fromArray(
									[
										_Utils_Tuple2('ambiance', 'Ambiance'),
										_Utils_Tuple2('chaos', 'Chaos'),
										_Utils_Tuple2('clouds_midnight', 'Clouds Midnight'),
										_Utils_Tuple2('cobalt', 'Cobalt'),
										_Utils_Tuple2('dracula', 'Dracula'),
										_Utils_Tuple2('gob', 'Green on Black'),
										_Utils_Tuple2('gruvbox', 'Gruvbox'),
										_Utils_Tuple2('idle_fingers', 'idle Fingers'),
										_Utils_Tuple2('kr_theme', 'krTheme'),
										_Utils_Tuple2('merbivore', 'Merbivore'),
										_Utils_Tuple2('merbivore_soft', 'Merbivore Soft'),
										_Utils_Tuple2('mono_industrial', 'Mono Industrial'),
										_Utils_Tuple2('monokai', 'Monokai'),
										_Utils_Tuple2('pastel_on_dark', 'Pastel on dark'),
										_Utils_Tuple2('solarized_dark', 'Solarized Dark'),
										_Utils_Tuple2('terminal', 'Terminal'),
										_Utils_Tuple2('tomorrow_night', 'Tomorrow Night'),
										_Utils_Tuple2('tomorrow_night_blue', 'Tomorrow Night Blue'),
										_Utils_Tuple2('tomorrow_night_bright', 'Tomorrow Night Bright'),
										_Utils_Tuple2('tomorrow_night_eighties', 'Tomorrow Night 80s'),
										_Utils_Tuple2('twilight', 'Twilight'),
										_Utils_Tuple2('vibrant_ink', 'Vibrant Ink')
									])))
						]))
				]));
	});
var author$project$Lia$Settings$Update$Light = {$: 'Light'};
var author$project$Lia$Settings$View$view_light = function (light) {
	return A2(
		elm$html$Html$span,
		_List_fromArray(
			[
				elm$html$Html$Attributes$class('lia-btn'),
				elm$html$Html$Events$onClick(
				author$project$Lia$Settings$Update$Toggle(author$project$Lia$Settings$Update$Light)),
				A2(elm$html$Html$Attributes$style, 'text-align', 'right')
			]),
		_List_fromArray(
			[
				light ? elm$html$Html$text('🌞') : elm$html$Html$text('🌝')
			]));
};
var author$project$Translations$cColor = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Цвят';
		case 'De':
			return 'Farbe';
		case 'En':
			return 'Color';
		case 'Fa':
			return 'رنگ';
		case 'Hy':
			return 'գույն';
		default:
			return 'колір';
	}
};
var author$project$Lia$Settings$View$view_settings = F2(
	function (model, lang) {
		return A2(
			elm$html$Html$div,
			author$project$Lia$Settings$View$menu_style(model.buttons.settings),
			_List_fromArray(
				[
					A2(
					elm$html$Html$p,
					_List_Nil,
					_List_fromArray(
						[
							elm$html$Html$text(
							author$project$Translations$cColor(lang)),
							author$project$Lia$Settings$View$view_light(model.light),
							A2(author$project$Lia$Settings$View$design_theme, lang, model.theme),
							A2(author$project$Lia$Settings$View$view_ace, lang, model.editor),
							A2(author$project$Lia$Settings$View$inc_font_size, lang, model.font_size),
							author$project$Lia$Settings$View$reset
						]))
				]));
	});
var author$project$Translations$no_translation = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Без превод';
		case 'De':
			return 'noch keine Übersetzungen vorhanden';
		case 'En':
			return 'no translation yet';
		case 'Fa':
			return 'در دست ترجمه';
		case 'Hy':
			return 'դեռ թագմանություն չկա';
		default:
			return 'переклад відсутній';
	}
};
var author$project$Lia$Settings$View$view_translations = F4(
	function (lang, visible, base, list) {
		return A2(
			elm$html$Html$div,
			author$project$Lia$Settings$View$menu_style(visible),
			elm$core$List$isEmpty(list) ? _List_fromArray(
				[
					elm$html$Html$text(
					author$project$Translations$no_translation(lang))
				]) : A2(
				elm$core$List$map,
				function (_n0) {
					var lang_ = _n0.a;
					var url = _n0.b;
					return A2(
						elm$html$Html$a,
						_List_fromArray(
							[
								elm$html$Html$Attributes$href(
								_Utils_ap(base, url))
							]),
						_List_fromArray(
							[
								elm$html$Html$text(lang_),
								A2(elm$html$Html$br, _List_Nil, _List_Nil)
							]));
				},
				list));
	});
var author$project$Translations$confInformations = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Информация';
		case 'De':
			return 'Informationen';
		case 'En':
			return 'Informations';
		case 'Fa':
			return 'اطلاعات';
		case 'Hy':
			return 'ինֆորմացիա';
		default:
			return 'інформація';
	}
};
var author$project$Translations$confSettings = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Настройки';
		case 'De':
			return 'Einstellungen';
		case 'En':
			return 'Settings';
		case 'Fa':
			return 'تنظیمات';
		case 'Hy':
			return 'կարգավորումներ';
		default:
			return 'налаштування';
	}
};
var author$project$Translations$confShare = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Споделяне';
		case 'De':
			return 'Teilen';
		case 'En':
			return 'Share';
		case 'Fa':
			return 'اشتراک';
		case 'Hy':
			return 'կիսվել';
		default:
			return 'поділитися';
	}
};
var author$project$Translations$confTranslations = function (lang) {
	switch (lang.$) {
		case 'Bg':
			return 'Транслации';
		case 'De':
			return 'Übersetzungen';
		case 'En':
			return 'Translations';
		case 'Fa':
			return 'ترجمه ها';
		case 'Hy':
			return 'թարգմանություններ';
		default:
			return 'переклади';
	}
};
var elm$virtual_dom$VirtualDom$lazy3 = _VirtualDom_lazy3;
var elm$html$Html$Lazy$lazy3 = elm$virtual_dom$VirtualDom$lazy3;
var author$project$Lia$Settings$View$view = F5(
	function (model, defines, url, origin, lang) {
		return A2(
			elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A3(elm$html$Html$Lazy$lazy2, author$project$Lia$Settings$View$view_settings, model, lang),
					A4(elm$html$Html$Lazy$lazy3, author$project$Lia$Settings$View$view_information, lang, model.buttons.informations, defines),
					A4(
					author$project$Lia$Settings$View$view_translations,
					lang,
					model.buttons.translations,
					origin + '?',
					author$project$Lia$Definition$Types$get_translations(defines)),
					A3(elm$html$Html$Lazy$lazy2, author$project$Lia$Settings$View$qrCodeView, model.buttons.share, url),
					A2(
					elm$html$Html$div,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('lia-settings'),
							A2(elm$html$Html$Attributes$style, 'display', 'inline-flex'),
							A2(elm$html$Html$Attributes$style, 'width', '99%')
						]),
					_List_fromArray(
						[
							A4(
							author$project$Lia$Settings$View$dropdown,
							model.buttons.settings,
							'settings',
							author$project$Translations$confSettings(lang),
							author$project$Lia$Settings$Update$Toggle(
								author$project$Lia$Settings$Update$Button(author$project$Lia$Settings$Update$Settings))),
							A4(
							author$project$Lia$Settings$View$dropdown,
							model.buttons.informations,
							'info',
							author$project$Translations$confInformations(lang),
							author$project$Lia$Settings$Update$Toggle(
								author$project$Lia$Settings$Update$Button(author$project$Lia$Settings$Update$Informations))),
							A4(
							author$project$Lia$Settings$View$dropdown,
							model.buttons.translations,
							'translate',
							author$project$Translations$confTranslations(lang),
							author$project$Lia$Settings$Update$Toggle(
								author$project$Lia$Settings$Update$Button(author$project$Lia$Settings$Update$Translations))),
							A4(
							author$project$Lia$Settings$View$dropdown,
							model.buttons.share,
							'share',
							author$project$Translations$confShare(lang),
							author$project$Lia$Settings$Update$Toggle(
								author$project$Lia$Settings$Update$Button(author$project$Lia$Settings$Update$Share)))
						]))
				]));
	});
var author$project$Lia$Update$UpdateIndex = function (a) {
	return {$: 'UpdateIndex', a: a};
};
var elm$html$Html$aside = _VirtualDom_node('aside');
var author$project$Lia$View$view_aside = function (model) {
	return A2(
		elm$html$Html$aside,
		_List_fromArray(
			[
				elm$html$Html$Attributes$class('lia-toc'),
				A2(
				elm$html$Html$Attributes$style,
				'max-width',
				model.settings.table_of_contents ? '256px' : '0px')
			]),
		_List_fromArray(
			[
				A2(
				elm$html$Html$map,
				author$project$Lia$Update$UpdateIndex,
				A2(author$project$Lia$Index$View$view_search, model.translation, model.index_model)),
				A2(author$project$Lia$Index$View$view, model.section_active, model.sections),
				A2(
				elm$html$Html$map,
				author$project$Lia$Update$UpdateSettings,
				A5(
					author$project$Lia$Settings$View$view,
					model.settings,
					A2(
						elm$core$Maybe$withDefault,
						model.definition,
						A2(
							elm$core$Maybe$andThen,
							function ($) {
								return $.definition;
							},
							author$project$Lia$Update$get_active_section(model))),
					model.url,
					model.origin,
					model.translation))
			]));
};
var author$project$Lia$View$view = function (model) {
	return A2(
		elm$html$Html$div,
		author$project$Lia$Settings$View$design(model.settings),
		_List_fromArray(
			[
				author$project$Lia$View$view_aside(model),
				author$project$Lia$View$view_article(model)
			]));
};
var author$project$Lia$Script$view = function (model) {
	return author$project$Lia$View$view(model);
};
var author$project$View$base_div = elm$html$Html$div(
	_List_fromArray(
		[
			A2(elm$html$Html$Attributes$style, 'width', '100%'),
			A2(elm$html$Html$Attributes$style, 'text-align', 'center'),
			A2(elm$html$Html$Attributes$style, 'top', '25%'),
			A2(elm$html$Html$Attributes$style, 'position', 'absolute')
		]));
var author$project$View$view = function (model) {
	return {
		body: function () {
			var _n0 = model.state;
			switch (_n0.$) {
				case 'Running':
					return _List_fromArray(
						[
							A2(
							elm$html$Html$map,
							author$project$Update$LiaScript,
							author$project$Lia$Script$view(model.lia))
						]);
				case 'Idle':
					return _List_fromArray(
						[
							A2(
							elm$html$Html$map,
							author$project$Update$UpdateIndex,
							author$project$Index$View$view(model.index))
						]);
				case 'Loading':
					return _List_fromArray(
						[
							author$project$View$base_div(
							_List_fromArray(
								[
									A2(
									elm$html$Html$h1,
									_List_Nil,
									_List_fromArray(
										[
											elm$html$Html$text('Loading')
										])),
									A2(elm$html$Html$br, _List_Nil, _List_Nil),
									A2(
									elm$html$Html$div,
									_List_fromArray(
										[
											elm$html$Html$Attributes$class('lds-dual-ring')
										]),
									_List_Nil)
								]))
						]);
				case 'Parsing':
					var percent = elm$core$String$length(
						A2(elm$core$Maybe$withDefault, '', model.code));
					return _List_fromArray(
						[
							author$project$View$base_div(
							_List_fromArray(
								[
									A2(
									elm$html$Html$h1,
									_List_Nil,
									_List_fromArray(
										[
											elm$html$Html$text(
											'Parsing : ' + (A3(
												elm$core$String$slice,
												0,
												5,
												elm$core$String$fromFloat(100 - ((percent / model.size) * 100))) + '%'))
										])),
									A2(elm$html$Html$br, _List_Nil, _List_Nil),
									A2(
									elm$html$Html$div,
									_List_fromArray(
										[
											elm$html$Html$Attributes$class('lds-dual-ring')
										]),
									_List_Nil)
								]))
						]);
				default:
					var info = _n0.a;
					return _List_fromArray(
						[
							author$project$View$base_div(
							_List_fromArray(
								[
									A2(
									elm$html$Html$h1,
									_List_Nil,
									_List_fromArray(
										[
											elm$html$Html$text('Load failed')
										])),
									A2(
									elm$html$Html$h6,
									_List_Nil,
									_List_fromArray(
										[
											elm$html$Html$text(model.lia.readme)
										])),
									A2(
									elm$html$Html$p,
									_List_fromArray(
										[
											A2(elm$html$Html$Attributes$style, 'margin-left', '20%'),
											A2(elm$html$Html$Attributes$style, 'margin-right', '20%')
										]),
									_List_fromArray(
										[
											elm$html$Html$text(info)
										]))
								]))
						]);
			}
		}(),
		title: model.lia.title
	};
};
var elm$browser$Browser$application = _Browser_application;
var author$project$Main$main = elm$browser$Browser$application(
	{init: author$project$Main$init, onUrlChange: author$project$Update$UrlChanged, onUrlRequest: author$project$Update$LinkClicked, subscriptions: author$project$Update$subscriptions, update: author$project$Update$update, view: author$project$View$view});
_Platform_export({'Main':{'init':author$project$Main$main(
	A2(
		elm$json$Json$Decode$andThen,
		function (spa) {
			return A2(
				elm$json$Json$Decode$andThen,
				function (script) {
					return A2(
						elm$json$Json$Decode$andThen,
						function (debug) {
							return A2(
								elm$json$Json$Decode$andThen,
								function (course) {
									return elm$json$Json$Decode$succeed(
										{course: course, debug: debug, script: script, spa: spa});
								},
								A2(
									elm$json$Json$Decode$field,
									'course',
									elm$json$Json$Decode$oneOf(
										_List_fromArray(
											[
												elm$json$Json$Decode$null(elm$core$Maybe$Nothing),
												A2(elm$json$Json$Decode$map, elm$core$Maybe$Just, elm$json$Json$Decode$string)
											]))));
						},
						A2(elm$json$Json$Decode$field, 'debug', elm$json$Json$Decode$bool));
				},
				A2(
					elm$json$Json$Decode$field,
					'script',
					elm$json$Json$Decode$oneOf(
						_List_fromArray(
							[
								elm$json$Json$Decode$null(elm$core$Maybe$Nothing),
								A2(elm$json$Json$Decode$map, elm$core$Maybe$Just, elm$json$Json$Decode$string)
							]))));
		},
		A2(elm$json$Json$Decode$field, 'spa', elm$json$Json$Decode$bool)))(0)}});}(this));

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _scss_main_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scss/main.scss */ "./src/scss/main.scss");
/* harmony import */ var _scss_main_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_scss_main_scss__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _scss_course_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scss/course.scss */ "./src/scss/course.scss");
/* harmony import */ var _scss_course_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_scss_course_scss__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _webcomponents_custom_elements__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @webcomponents/custom-elements */ "./node_modules/@webcomponents/custom-elements/custom-elements.min.js");
/* harmony import */ var _webcomponents_custom_elements__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_webcomponents_custom_elements__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _javascript_liascript_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./javascript/liascript/index.js */ "./src/javascript/liascript/index.js");
/* harmony import */ var _javascript_registerServiceWorker__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./javascript/registerServiceWorker */ "./src/javascript/registerServiceWorker.js");









if (document.getElementById('lia')) {
  if (true) {
    var app = new _javascript_liascript_index_js__WEBPACK_IMPORTED_MODULE_3__["LiaScript"](document.getElementById('lia'), true)
  } else { var app; }
}

Object(_javascript_registerServiceWorker__WEBPACK_IMPORTED_MODULE_4__["default"])()


/***/ }),

/***/ "./src/javascript/liascript/database.js":
/*!**********************************************!*\
  !*** ./src/javascript/liascript/database.js ***!
  \**********************************************/
/*! exports provided: LiaDB */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LiaDB", function() { return LiaDB; });
/* harmony import */ var dexie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dexie */ "./node_modules/dexie/dist/dexie.es.js");
/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger */ "./src/javascript/liascript/logger.js");


var Promise = __webpack_require__(/*! promise-polyfill */ "./node_modules/promise-polyfill/src/index.js").default





class LiaDB {
  constructor (send = null, channel = null) {
    this.channel = channel
    this.send = send

    if (channel) return

    this.dbIndex = new dexie__WEBPACK_IMPORTED_MODULE_0__["default"]("Index")
    this.dbIndex.version(1).stores({courses: '&id,updated,author,created,title'})
  }

  open_ (uidDB, versionDB) {
    let db = new dexie__WEBPACK_IMPORTED_MODULE_0__["default"](uidDB)

    db.version(versionDB).stores({
      code: '&id',
      quiz: '&id',
      survey: '&id',
      offline: '&id'
    })

    return db
  }

  async open (uidDB, versionDB, init) {
    if (!versionDB || this.channel) return

    this.db = this.open_(uidDB, versionDB)

    if(init) {
      const item = await this.db[init.topic].get(init.section)

      if(!!item) {
        if (item.data) {
          init.message.message = item.data
        }
        this.send(init)
      }
    }
  }

  async store (event) {
    if (this.channel) {
      storeChannel(event)
      return
    }

    if (!this.db) return

    _logger__WEBPACK_IMPORTED_MODULE_1__["lia"].warn(`liaDB: event(store), table(${event.topic}), id(${event.section}), data(${event.message})`)

    await this.db[event.topic].put({
      id: event.section,
      data: event.message,
      created: new Date().getTime()
    })
  }

  storeChannel (event) {
    this.channel.push('lia', {
      store: event.topic,
      slide: event.section,
      data: event.message
    })
      .receive('ok', e => {
        _logger__WEBPACK_IMPORTED_MODULE_1__["lia"].log('ok', e)
      })
      .receive('error', e => {
        _logger__WEBPACK_IMPORTED_MODULE_1__["lia"].log('error', e)
      })
  }

  async load (event) {
    if (this.channel) {
      this.loadChannel(event)
      return
    }

    if (!this.db) return

    _logger__WEBPACK_IMPORTED_MODULE_1__["lia"].log('loading => ', event.topic, event.section)

    const item = await this.db[event.topic].get(event.section)

    if(item) {
      _logger__WEBPACK_IMPORTED_MODULE_1__["lia"].log('restore table', event.topic)//, e._value.data)
      event.message = {
        topic: 'restore',
        section: -1,
        message: item.data
      }
      this.send(event)
    } else if (event.topic === 'code') {
      event.message = {
        topic: 'restore',
        section: -1,
        message: null
      }
      this.send(event)
    }
  }

  loadChannel(event) {
    let send = this.send

    this.channel.push('lia', {
      load: event.topic,
      slide: event.section
    })
      .receive('ok', e => {
        event.message = {
          topic: 'restore',
          section: -1,
          message: e.date
        }
        send(event)
      })
      .receive('error', e => {
        _logger__WEBPACK_IMPORTED_MODULE_1__["lia"].error(e)
      })
  }

  del () {
    if (this.channel || !this.db) return

    let name = db.name

    this.db.delete()
      .then(() => { _logger__WEBPACK_IMPORTED_MODULE_1__["lia"].log('database deleted: ', name) })
      .catch((err) => { _logger__WEBPACK_IMPORTED_MODULE_1__["lia"].error('error deleting database: ', name) })
  }

  async update (event, slide) {
    if (this.channel) {
      this.channel.push('lia', {
        update: event,
        slide: slide
      })
      return
    }

    if (!this.db) return

    let db = this.db
    await db.transaction('rw', db.code, async () => {
      const vector = await db.code.get(slide);

      if (vector.data) {
        let project = vector.data[event.section]

        switch (event.topic) {
          case 'flip': {
            if (event.message.topic === 'view') {
              project.file[event.message.section].visible = event.message.message
            } else if (event.message.topic === 'fullscreen') {
              project.file[event.message.section].fullscreen = event.message.message
            }
            break
          }
          case 'load': {
            let e_ = event.message
            project.version_active = e_.version_active
            project.log = e_.log
            project.file = e_.file
            break
          }
          case 'version_update': {
            let e_ = event.message
            project.version_active = e_.version_active
            project.log = e_.log
            project.version[e_.version_active] = e_.version
            break
          }
          case 'version_append': {
            let e_ = event.message
            project.version_active = e_.version_active
            project.log = e_.log
            project.file = e_.file
            project.version.push(e_.version)
            project.repository = { ...project.repository, ...e_.repository }
            break
          }
          default: {
            _logger__WEBPACK_IMPORTED_MODULE_1__["lia"].warn('unknown update cmd: ', event)
          }
        }

        vector.data[event.section] = project

        await (db.code.put(vector))
      }

    })
  }

  async restore(uidDB) {
    const course = await this.dbIndex.courses.get(uidDB)

    if (course) {
      let dbVersion = parseInt( Object.keys(course.data).sort().reverse() )

      let db = this.open_(uidDB, dbVersion)

      const offline = await db.offline.get(0)

      this.send({topic: "restore", message: offline.data, section: -1});
    }
  }

  async listIndex(order = 'updated', desc = false) {
    if (this.channel) return

    const courses = await this.dbIndex.courses.orderBy(order).toArray()

    if(!desc) {
      courses.reverse()
    }

    this.send({
      topic: 'index',
      section: -1,
      message: { list: courses }
    })
  }

  async storeIndex(data) {
    if (this.channel) return

    let date = new Date()
    let item = await this.dbIndex.courses.get(data.readme)

    if (!item) {
      item = {
        id: data.readme,
        title: data.definition.str_title,
        author: data.definition.author,
        data: { },
        created: date.getTime(),
        updated: null,
        updated_str: null
      }
    }

    item.updated = date.getTime()
    item.updated_str = date.toLocaleDateString()

    if (!item.data[data.version]) {
      item.data[data.version] = data.definition
      item.data[data.version]['title'] = data.title

      _logger__WEBPACK_IMPORTED_MODULE_1__["lia"].log('storing new version to index', item)

      this.store({
        topic: 'offline',
        section: 0,
        message: data
      })
    } else if (item.data[data.version].version !== data.definition.version) {
        item.data[data.version] = data.definition
        item.data[data.version]['title'] = data.title

        _logger__WEBPACK_IMPORTED_MODULE_1__["lia"].log('storing new version to index', item)

        this.store({
          topic: 'offline',
          section: 0,
          message: data
        })
    }

    this.dbIndex.courses.put(item)
  }

  async deleteIndex(uidDB) {
    if (this.channel) return

    await Promise.all([
      this.dbIndex.courses.delete(uidDB),
      dexie__WEBPACK_IMPORTED_MODULE_0__["default"].delete(uidDB)
    ])
  }

};




/***/ }),

/***/ "./src/javascript/liascript/events.js":
/*!********************************************!*\
  !*** ./src/javascript/liascript/events.js ***!
  \********************************************/
/*! exports provided: LiaEvents, lia_execute_event, lia_eval_event */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LiaEvents", function() { return LiaEvents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lia_execute_event", function() { return lia_execute_event; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lia_eval_event", function() { return lia_eval_event; });
/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger */ "./src/javascript/liascript/logger.js");




// Basic class for handline Code-Errors
class LiaError extends Error {
  constructor (message, files, ...params) {
    super(...params)
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, LiaError)
    }

    this.message = message
    this.details = []

    for (let i = 0; i < files; i++) {
      this.details.push([])
    }
  }

  add_detail (fileId, msg, type, line, column) {
    this.details[fileId].push({
      row: line,
      column: column,
      text: msg,
      type: type
    })
  }

  get_detail (msg, type, line, column = 0) {
    return {
      row: line,
      column: column,
      text: msg,
      type: type
    }
  }

  // sometimes you need to adjust the compile messages to fit into the
  // editor ... use this function to adapt the row parameters ...
  // file_id with 0 will apply the correction value to all files
  correct_lines (fileId, by) {
    if (fileId == null) {
      for (let i = 0; i < this.details.length; i++) {
        this.correct_lines(i, by)
      }
    } else {
      this.details[fileId] = this.details[fileId].map((e) => {
        e.line = e.line + by
      })
    }
  }
};



class LiaEvents {
  constructor () {
    this.event = {}
    this.input = {}
  }

  register (name, fn) {
    this.event[name] = fn
  }

  register_input (id1, id2, name, fn) {
    if (this.input[id1] === undefined) {
      this.input[id1] = {}
    }
    if (this.input[id1][id2] === undefined) {
      this.input[id1][id2] = {}
    }

    this.input[id1][id2][name] = fn
  }

  dispatch_input (event) { // id1, id2, name, msg) {
    try {
      this.input[event.section][event.message.section][event.message.topic](event.message.message);
    } catch (e) {
      _logger__WEBPACK_IMPORTED_MODULE_0__["lia"].error('unable to dispatch message', event.message)
    }
  }

  dispatch (name, data) {
    if (this.event.hasOwnProperty(name)) {
      this.event[name](data)
    }
  }

  remove (name) {
    delete this.event[name]
  }
};

function getLineNumber (error) {
  try {
    // firefox
    const firefoxRegex = /<anonymous>:(\d+):\d+/
    if (error.stack.match(firefoxRegex)) {
      const res = error.stack.match(firefoxRegex)
      return parseInt(res[1], 10)
    }

    // chrome
    const chromeRegex = /<anonymous>.+:(\d+):\d+/
    if (error.stack.match(chromeRegex)) {
      const res = error.stack.match(chromeRegex)
      return parseInt(res[1], 10)
    }
  } catch (e) {

  }
};

function lia_eval (code, send) {
  try {
    let console = {
      debug: (...args) => send.log('debug', '\n', args),
      log: (...args) => send.log('info', '\n', args),
      warn: (...args) => send.log('warn', '\n', args),
      error: (...args) => send.log('error', '\n', args),
      clear: () => send.lia('LIA: clear')
    }

    console.clear()

    send.lia(String(eval(code + '\n', send, console)))
  } catch (e) {
    if (e instanceof LiaError) {
      send.lia(e.message, e.details, false)
    } else {
      send.lia(e.message, [], false)
    }
  }
};

function lia_eval_event (send, channel, handler, event) {
  lia_eval(
    event.message.message, {
      lia: (result, details = [], ok = true) => {
        event.message.topic = 'eval'
        event.message.message = {
          result: result,
          details: details,
          ok: ok
        }
        send(event)
      },
      log: (topic, sep, ...args) => {
        event.message.topic = topic
        event.message.message = list_to_string(sep, args)
        send(event)
      },
      service: websocket(channel),
      handle: (name, fn) => {
        let e1 = event.section
        let e2 = event.message.section
        handler.register_input(e1, e2, name, fn)
      },
      register: (name, fn) => {
        handler.register(name, fn)
      }
    }
  )
};

function list_to_string (sep, list) {
  let str = ''

  for (let i = 0; i < list[0].length; i++) {
    str += list[0][i].toString() + ' '
  }

  return str + sep
};

function lia_execute_event (event) {
  try {
    setTimeout(() => {
      eval(event.code)
    }, event.delay)
  } catch (e) {
    _logger__WEBPACK_IMPORTED_MODULE_0__["lia"].error('exec => ', e)
  }
};

function websocket (channel = null) {
  if (channel) {
    return function (eventID, message) {
      return channel.push('lia', {
        event_id: eventID,
        message: message
      })
    }
  }
};




/***/ }),

/***/ "./src/javascript/liascript/index.js":
/*!*******************************************!*\
  !*** ./src/javascript/liascript/index.js ***!
  \*******************************************/
/*! exports provided: LiaScript */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LiaScript", function() { return LiaScript; });
/* harmony import */ var _elm_Main_elm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../elm/Main.elm */ "./src/elm/Main.elm");
/* harmony import */ var _elm_Main_elm__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_elm_Main_elm__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./database */ "./src/javascript/liascript/database.js");
/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./storage */ "./src/javascript/liascript/storage.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./events */ "./src/javascript/liascript/events.js");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./settings */ "./src/javascript/liascript/settings.js");
/* harmony import */ var _persistent__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./persistent */ "./src/javascript/liascript/persistent.js");
/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./logger */ "./src/javascript/liascript/logger.js");










function scrollIntoView (id, delay) {
  setTimeout(function (e) {
    try {
      document.getElementById(id).scrollIntoView({ behavior: 'smooth' })
    } catch (e) {}
  }, delay)
};

function handleEffects (event, elmSend) {
  switch (event.topic) {
    case 'scrollTo':
      scrollIntoView(event.message, 350)
      break
    case 'persistent':
      setTimeout((e) => { _persistent__WEBPACK_IMPORTED_MODULE_5__["persistent"].load(event.section) }, 10)
      break
    case 'execute':
      Object(_events__WEBPACK_IMPORTED_MODULE_3__["lia_execute_event"])(event.message)
      break
    case 'speak' : {
      let msg = {
        topic: 'settings',
        section: -1,
        message: {
          topic: 'speak',
          section: -1,
          message: 'stop'
        }
      }

      try {
        if (event.message === 'cancel') {
          responsiveVoice.cancel()
          msg.message.message = 'stop'
          elmSend(msg)
        } else if (event.message === 'repeat') {
          event.message = [ttsBackup[0], ttsBackup[1], 'true']
          handleEffects(event, elmSend)
        } else {
          ttsBackup = event.message
          if (event.message[2] === 'true') {
            responsiveVoice.speak(
              event.message[1],
              event.message[0],
              { onstart: e => {
                msg.message.message = 'start'
                elmSend(msg)
              },
              onend: e => {
                msg.message.message = 'stop'
                elmSend(msg)
              },
              onerror: e => {
                msg.message.message = e.toString()
                elmSend(msg)
              } })
          }
        }
      } catch (e) {
        msg.message.message = e.toString()
        elmSend(msg)
      }
      break
    }
    default:
      _logger__WEBPACK_IMPORTED_MODULE_6__["lia"].warn('effect missed', event)
  }
};

function meta (name, content) {
  if (content !== '') {
    let meta = document.createElement('meta')
    meta.name = name
    meta.content = content
    document.getElementsByTagName('head')[0].appendChild(meta)
  }
}
// -----------------------------------------------------------------------------

var eventHandler = undefined
var liaStorage = undefined
var ttsBackup = undefined

class LiaScript {
  constructor (elem, debug = false, course = null, script = null, url = '', slide = 0, spa = true, channel = null) {
    // if (debug)
    window.debug__ = true

    eventHandler = new _events__WEBPACK_IMPORTED_MODULE_3__["LiaEvents"]()

    this.app = _elm_Main_elm__WEBPACK_IMPORTED_MODULE_0__["Elm"].Main.init({
      node: elem,
      flags: {
        course: course,
        script: script,
        debug: debug,
        spa: spa
      }
    })

    let sendTo = this.app.ports.event2elm.send

    let sender = function (msg) {
      _logger__WEBPACK_IMPORTED_MODULE_6__["lia"].log('event2elm => ', msg)
      sendTo(msg)
    }

    let settings = localStorage.getItem(_settings__WEBPACK_IMPORTED_MODULE_4__["SETTINGS"])
    Object(_settings__WEBPACK_IMPORTED_MODULE_4__["initSettings"])(this.app.ports.event2elm.send, settings ? JSON.parse(settings) : settings, true)

    this.initChannel(channel, sender)
    this.initDB(channel, sender)

    this.initEventSystem(this.app.ports.event2js.subscribe, sender)

    liaStorage = new _storage__WEBPACK_IMPORTED_MODULE_2__["LiaStorage"](channel)
  }

  initDB (channel, sender) {
    this.db = new _database__WEBPACK_IMPORTED_MODULE_1__["LiaDB"](sender, channel)
  }

  initChannel (channel, send) {
    if (!channel) return

    this.channel = channel
    channel.on('service', e => { eventHandler.dispatch(e.event_id, e.message) })

    channel.join()
      .receive('ok', (e) => { _logger__WEBPACK_IMPORTED_MODULE_6__["lia"].log('joined to channel', e) }) // initSettings(send, e); })
      .receive('error', e => { _logger__WEBPACK_IMPORTED_MODULE_6__["lia"].error('channel join => ', e) })
  }

  reset () {
    this.app.ports.event2elm.send({
      topic: 'reset',
      section: -1,
      message: null
    })
  }

  initEventSystem (jsSubscribe, elmSend) {
    _logger__WEBPACK_IMPORTED_MODULE_6__["lia"].log('initEventSystem')

    let self = this

    jsSubscribe(function (event) {
      _logger__WEBPACK_IMPORTED_MODULE_6__["lia"].log('elm2js => ', event)

      switch (event.topic) {
        case 'slide': {
          // if(self.channel)
          //    self.channel.push('lia', { slide: event.section + 1 });

          let sec = document.getElementsByTagName('section')[0]
          if (sec) {
            sec.scrollTo(0, 0)
          }
          break
        }
        case 'load': {
          self.db.load({
            topic: event.message,
            section: event.section,
            message: null })
          break
        }
        case 'code' : {
          switch (event.message.topic) {
            case 'eval':
              Object(_events__WEBPACK_IMPORTED_MODULE_3__["lia_eval_event"])(elmSend, self.channel, eventHandler, event)
              break
            case 'store':
              event.message = event.message.message
              self.db.store(event)
              break
            case 'input':
              eventHandler.dispatch_input(event)
              break
            case 'stop':
              eventHandler.dispatch_input(event)
              break
            default: {
              self.db.update(event.message, event.section)
            }
          }
          break
        }
        case 'quiz' : {
          if (event.message.topic === 'store') {
            event.message = event.message.message
            self.db.store(event)
          } else if (event.message.topic === 'eval') {
            Object(_events__WEBPACK_IMPORTED_MODULE_3__["lia_eval_event"])(elmSend, self.channel, eventHandler, event)
          }

          break
        }
        case 'survey' : {
          if (event.message.topic === 'store') {
            event.message = event.message.message
            self.db.store(event)
          } else if (event.message.topic === 'eval') {
            Object(_events__WEBPACK_IMPORTED_MODULE_3__["lia_eval_event"])(elmSend, self.channel, eventHandler, event)
          }
          break
        }
        case 'effect' :
          handleEffects(event.message, elmSend)
          break
        case _settings__WEBPACK_IMPORTED_MODULE_4__["SETTINGS"]: {
          // if (self.channel) {
          //  self.channel.push('lia', {settings: event.message});
          // } else {
          localStorage.setItem(_settings__WEBPACK_IMPORTED_MODULE_4__["SETTINGS"], JSON.stringify(event.message))
          // }
          break
        }
        case 'resource' : {
          let elem = event.message[0]
          let url = event.message[1]

          _logger__WEBPACK_IMPORTED_MODULE_6__["lia"].log('loading resource => ', elem, ':', url)

          try {
            var tag = document.createElement(elem)
            if (elem === 'link') {
              tag.href = url
              tag.rel = 'stylesheet'
            } else {
              tag.src = url
              tag.async = false
            }
            document.head.appendChild(tag)
          } catch (e) {
            _logger__WEBPACK_IMPORTED_MODULE_6__["lia"].error('loading resource => ', e.msg)
          }
          break
        }
        case 'persistent': {
          if (event.message === 'store') {
            _persistent__WEBPACK_IMPORTED_MODULE_5__["persistent"].store(event.section)
            elmSend({ topic: 'load', section: -1, message: null })
          }

          break
        }
        case 'init': {
          let data = event.message

          self.db.open(
            data.readme,
            data.version,
            { topic: 'code',
              section: data.section_active,
              message: {
                topic: 'restore',
                section: -1,
                message: null }
          })

          if (data.definition.onload !== '') {
            Object(_events__WEBPACK_IMPORTED_MODULE_3__["lia_execute_event"])({ code: data.definition.onload, delay: 350 })
          }

          meta('author', data.definition.author)
          meta('og:description', data.comment)
          meta('og:title', data.str_title)
          meta('og:type', 'website')
          meta('og:url', '')
          meta('og:image', data.definition.logo)

          if (!self.channel) {
            let settings = localStorage.getItem(_settings__WEBPACK_IMPORTED_MODULE_4__["SETTINGS"])
            Object(_settings__WEBPACK_IMPORTED_MODULE_4__["initSettings"])(elmSend, settings ? JSON.parse(settings) : settings, true)
          }

          // store the basic info in the offline-repositories
          self.db.storeIndex(data)
          break
        }
        case 'index' : {
          switch (event.message.topic) {
            case 'list': {
              self.db.listIndex()
              break
            }
            case 'delete' : {
              self.db.deleteIndex(event.message.message)
              break
            }

            default:
              _logger__WEBPACK_IMPORTED_MODULE_6__["lia"].error('Command  not found => ', event.message)
          }
          break
        }
        case 'offline' : {
          self.db.restore(event.message)
          break;
        }
        case 'reset': {
          self.db.del()
          if (!self.channel) {
            Object(_settings__WEBPACK_IMPORTED_MODULE_4__["initSettings"])(elmSend, null, true)
          }
          window.location.reload()
          break
        }
        default:
          _logger__WEBPACK_IMPORTED_MODULE_6__["lia"].error('Command not found => ', event)
      }
    })
  }
};




/***/ }),

/***/ "./src/javascript/liascript/logger.js":
/*!********************************************!*\
  !*** ./src/javascript/liascript/logger.js ***!
  \********************************************/
/*! exports provided: lia */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lia", function() { return lia; });


var lia = {
  log: function () {
    if (window.debug__) console.log('LiaLog: ', ...arguments)
  },

  warn: function () {
    if (window.debug__) console.warn('LiaWarn: ', ...arguments)
  },

  error: function () {
    console.error('LiaError: ', ...arguments)
  }
}




/***/ }),

/***/ "./src/javascript/liascript/persistent.js":
/*!************************************************!*\
  !*** ./src/javascript/liascript/persistent.js ***!
  \************************************************/
/*! exports provided: persistent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "persistent", function() { return persistent; });


function swapElements (obj1, obj2) {
  // create marker element and insert it where obj1 is
  var temp = document.createElement('div')
  obj1.parentNode.insertBefore(temp, obj1)

  // move obj1 to right before obj2
  obj2.parentNode.insertBefore(obj1, obj2)

  // move obj2 to right before where obj1 used to be
  temp.parentNode.insertBefore(obj2, temp)

  // remove temporary marker node
  temp.parentNode.removeChild(temp)
}

var persistent = {
  bag: document.createElement('div'),
  section: -1,

  store: function (section) {
    if (section === this.section) return

    this.section = section
    let elements = document.getElementsByClassName('persistent')
    for (var e of elements) {
      let temp = document.createElement('span')
      this.bag.appendChild(temp)
      swapElements(temp, e)
    }
  },

  load: function (section) {
    let elements = document.getElementsByClassName('persistent')

    for (var e of elements) {
      for (var b of this.bag.childNodes) {
        if (b.id === e.id) {
          e.replaceWith(b)
          break
        }
      }
    }
  }
}




/***/ }),

/***/ "./src/javascript/liascript/settings.js":
/*!**********************************************!*\
  !*** ./src/javascript/liascript/settings.js ***!
  \**********************************************/
/*! exports provided: initSettings, SETTINGS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initSettings", function() { return initSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SETTINGS", function() { return SETTINGS; });


const SETTINGS = 'settings'

function initSettings (send, data, local = false) {
  if (data == null) {
    data = {
      table_of_contents: true,
      mode: 'Slides',
      theme: 'default',
      light: true,
      editor: 'dreamweaver',
      font_size: 100,
      sound: true,
      land: 'en'
    }
  }

  if (local) {
    localStorage.setItem(SETTINGS, JSON.stringify(data))
  }

  send({
    topic: SETTINGS,
    section: -1,
    message: {
      topic: 'init',
      section: -1,
      message: data
    }
  })
};




/***/ }),

/***/ "./src/javascript/liascript/storage.js":
/*!*********************************************!*\
  !*** ./src/javascript/liascript/storage.js ***!
  \*********************************************/
/*! exports provided: LiaStorage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LiaStorage", function() { return LiaStorage; });
/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger */ "./src/javascript/liascript/logger.js");




class LiaStorage {
  constructor (channel = null) {
    if (!channel) return

    this.channel = channel
    this._init()
  }

  _init () {
    if (!this.channel) return

    let store = this._setLocal

    this.channel.push('lia', {
      get_local_storage: []
    })
      .receive('ok', (e) => {
        store(e)
      })
      .receive('error', (e) => {
        _logger__WEBPACK_IMPORTED_MODULE_0__["lia"].error('storing => ', e)
      })
  }

  getItems (key = []) {
    if (typeof key === 'string') key = [key]

    let rslt = {}
    for (let i = 0; i < key.length; i++) {
      let value = localStorage.getItem(key[i])

      rslt[key[i]] = value ? JSON.parse(value) : value
    }

    return rslt
  }

  setItems (dict) {
    if (this.channel) {
      this.channel.push('lia', {
        set_local_storage: dict
      })
    }

    this._setLocal(dict)
  }

  _setLocal (dict) {
    if (typeof dict === 'object') {
      for (const [key, value] of Object.entries(dict)) {
        localStorage.setItem(key, JSON.stringify(value))
      }
    }
  }
};




/***/ }),

/***/ "./src/javascript/registerServiceWorker.js":
/*!*************************************************!*\
  !*** ./src/javascript/registerServiceWorker.js ***!
  \*************************************************/
/*! exports provided: default, unregister */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return register; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unregister", function() { return unregister; });
// In production, we register a service worker to serve assets from local cache.

// This lets the app load faster on subsequent visits in production, and gives
// it offline capabilities. However, it also means that developers (and users)
// will only see deployed updates on the "N+1" visit to a page, since previously
// cached resources are updated in the background.

// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.
// This link also includes instructions on opting out of this behavior.

const isLocalhost = Boolean(
  window.location.hostname === 'localhost' ||
    // [::1] is the IPv6 localhost address.
    window.location.hostname === '[::1]' ||
    // 127.0.0.1/8 is considered localhost for IPv4.
    window.location.hostname.match(
      /^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/
    )
);

function register() {
  if (false) {}
}

function registerValidSW(swUrl) {
  navigator.serviceWorker
    .register(swUrl)
    .then(registration => {
      registration.onupdatefound = () => {
        const installingWorker = registration.installing;
        installingWorker.onstatechange = () => {
          if (installingWorker.state === 'installed') {
            if (navigator.serviceWorker.controller) {
              // At this point, the old content will have been purged and
              // the fresh content will have been added to the cache.
              // It's the perfect time to display a "New content is
              // available; please refresh." message in your web app.
              console.log('New content is available; please refresh.');
            } else {
              // At this point, everything has been precached.
              // It's the perfect time to display a
              // "Content is cached for offline use." message.
              console.log('Content is cached for offline use.');
            }
          }
        };
      };
    })
    .catch(error => {
      console.error('Error during service worker registration:', error);
    });
}

function checkValidServiceWorker(swUrl) {
  // Check if the service worker can be found. If it can't reload the page.
  fetch(swUrl)
    .then(response => {
      // Ensure service worker exists, and that we really are getting a JS file.
      if (
        response.status === 404 ||
        response.headers.get('content-type').indexOf('javascript') === -1
      ) {
        // No service worker found. Probably a different app. Reload the page.
        navigator.serviceWorker.ready.then(registration => {
          registration.unregister().then(() => {
            window.location.reload();
          });
        });
      } else {
        // Service worker found. Proceed as normal.
        registerValidSW(swUrl);
      }
    })
    .catch(() => {
      console.log(
        'No internet connection found. App is running in offline mode.'
      );
    });
}

function unregister() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready.then(registration => {
      registration.unregister();
    });
  }
}


/***/ }),

/***/ "./src/scss/course.scss":
/*!******************************!*\
  !*** ./src/scss/course.scss ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/scss/main.scss":
/*!****************************!*\
  !*** ./src/scss/main.scss ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,